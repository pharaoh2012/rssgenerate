
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/FatTiger4399/p/18664207" title="发布于 2025-01-13 17:55">
    <span role="heading" aria-level="2">React源码解析(1): JSX语法与react项目渲染过程</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">好家伙</span></strong></p>
<p><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">&nbsp;</span></strong></p>
<h1>0.前言</h1>
<p><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">由于工作的需要，我不得不入手了react的全家桶，曾经我的主要技术栈是vue。</span></p>
<p><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">从vue转到react，一开始我感到非常不适应，jsx的语法的不了解，react hooks的使用方式，react路由的配置。。。这一度让我十分难受</span></p>
<p><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">但在熟悉一段时间后，我逐渐领略到react的魅力，灵活的状态管理，渲染速度，与vite集成后超快的打包速度，以及超漂亮UI组件库NextUI</span></p>
<p><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt"><img src="https://img2024.cnblogs.com/blog/2501855/202501/2501855-20250113171130944-1078940514.png" alt="" width="1355" height="652" loading="lazy"></span></p>
<p><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">&nbsp;(这真是我目前为止遇到的最漂亮的一套组件库，圆角，配色，动画交互)</span></p>
<p><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">让我们拥抱新技术吧！</span></p>
<p><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">&nbsp;</span></strong></p>
<p><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">&nbsp;</span></strong></p>
<h1>1. 关于 JSX</h1>
<p><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">JSX 就是“JavaScript + XML”的神奇结合。它让我们能在写 JavaScript 的同时写出类似 XML 标签的东西，看起来就像是这样：</span></strong></p>
<p>&nbsp;</p>
<div class="cnblogs_code">
<pre><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt"><span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> App() {
  return (
    </span>&lt;NextUIProvider&gt;
            &lt;RouterProvider router={router} /&gt;
        &lt;/NextUIProvider&gt;<span style="color: rgba(0, 0, 0, 1)">
  );
}</span></span></strong></pre>
</div>
<p>&nbsp;</p>
<p><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">实际上，这些标签最后会被编译成纯 JavaScript，也就是 React 官方的说法——JSX 会被转换成 React.createElement()。</span></strong></p>
<div class="markdown-code-block-header">
<p><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">去Babel的网站试一下吧</span></strong></p>
<p><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt"><a href="https://babeljs.io/repl" target="_blank" rel="noopener nofollow">https://babeljs.io/repl</a></span></strong></p>
</div>
<div>
<div data-keybinding-context="2036" data-mode-id="javascriptreact">
<div class="monaco-editor no-user-select  showUnused showDeprecated vs-dark" data-uri="aichat-code-block-anysphere://btcfvhwcbe">
<div class="overflow-guard" data-mprt="3">
<div class="blockDecorations-container"><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">一个简单的表格</span></strong></div>
<div class="blockDecorations-container">
<div class="cnblogs_code">
<pre><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">import React from <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">react</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;

export </span><span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> StudentTable() {
  const students </span>= [<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">panghu</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">xiaofu</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">daxiong</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">jinxiang</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">];

  return (
    </span>&lt;table style={{ borderCollapse: <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">collapse</span><span style="color: rgba(128, 0, 0, 1)">"</span>, width: <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">50%</span><span style="color: rgba(128, 0, 0, 1)">"</span>, margin: <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">1rem auto</span><span style="color: rgba(128, 0, 0, 1)">"</span> }}&gt;
      &lt;thead&gt;
        &lt;<span style="color: rgba(0, 0, 255, 1)">tr</span> style={{ backgroundColor: <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">#f2f2f2</span><span style="color: rgba(128, 0, 0, 1)">"</span> }}&gt;
          &lt;th style={{ border: <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">1px solid #ccc</span><span style="color: rgba(128, 0, 0, 1)">"</span>, padding: <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">8px</span><span style="color: rgba(128, 0, 0, 1)">"</span> }}&gt;序号&lt;/th&gt;
          &lt;th style={{ border: <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">1px solid #ccc</span><span style="color: rgba(128, 0, 0, 1)">"</span>, padding: <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">8px</span><span style="color: rgba(128, 0, 0, 1)">"</span> }}&gt;姓名&lt;/th&gt;
        &lt;/<span style="color: rgba(0, 0, 255, 1)">tr</span>&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;<span style="color: rgba(0, 0, 0, 1)">
        {students.map((name, index) </span>=&gt;<span style="color: rgba(0, 0, 0, 1)"> (
          </span>&lt;<span style="color: rgba(0, 0, 255, 1)">tr</span> key={index}&gt;
            &lt;td style={{ border: <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">1px solid #ccc</span><span style="color: rgba(128, 0, 0, 1)">"</span>, padding: <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">8px</span><span style="color: rgba(128, 0, 0, 1)">"</span> }}&gt;{index + <span style="color: rgba(128, 0, 128, 1)">1</span>}&lt;/td&gt;
            &lt;td style={{ border: <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">1px solid #ccc</span><span style="color: rgba(128, 0, 0, 1)">"</span>, padding: <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">8px</span><span style="color: rgba(128, 0, 0, 1)">"</span> }}&gt;{name}&lt;/td&gt;
          &lt;/<span style="color: rgba(0, 0, 255, 1)">tr</span>&gt;<span style="color: rgba(0, 0, 0, 1)">
        ))}
      </span>&lt;/tbody&gt;
    &lt;/table&gt;<span style="color: rgba(0, 0, 0, 1)">
  );
}</span></span></strong></pre>
</div>
<p><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">&nbsp;Babel编译后</span></strong></p>
</div>
<div class="blockDecorations-container"><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt"><img src="https://img2024.cnblogs.com/blog/2501855/202501/2501855-20250113172049194-953470939.png" alt="" width="1550" height="742" loading="lazy"></span></strong></div>
<div class="blockDecorations-container">
<p><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">&nbsp;</span></strong></p>
</div>
</div>
</div>
</div>
</div>
<p><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">但用 JSX 可读性更好，写着也舒爽。</span></strong></p>
<p class="markdown-section-toolbar"><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">&nbsp;</span></strong></p>
<h1>2.为什么要用jsx？</h1>
<p class="markdown-section-toolbar"><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">我们来看vue和react实现相同表格</span></strong></p>
<p class="markdown-section-toolbar"><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">React</span></strong></p>
<div class="cnblogs_code">
<pre><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">import React from <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">react</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;

export </span><span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> StudentTable() {
  const students </span>= [<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">panghu</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">xiaofu</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">daxiong</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">jinxiang</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">];

  return (
    </span>&lt;table style={{ borderCollapse: <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">collapse</span><span style="color: rgba(128, 0, 0, 1)">"</span>, width: <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">50%</span><span style="color: rgba(128, 0, 0, 1)">"</span>, margin: <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">1rem auto</span><span style="color: rgba(128, 0, 0, 1)">"</span> }}&gt;
      &lt;thead&gt;
        &lt;<span style="color: rgba(0, 0, 255, 1)">tr</span> style={{ backgroundColor: <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">#f2f2f2</span><span style="color: rgba(128, 0, 0, 1)">"</span> }}&gt;
          &lt;th style={{ border: <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">1px solid #ccc</span><span style="color: rgba(128, 0, 0, 1)">"</span>, padding: <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">8px</span><span style="color: rgba(128, 0, 0, 1)">"</span> }}&gt;序号&lt;/th&gt;
          &lt;th style={{ border: <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">1px solid #ccc</span><span style="color: rgba(128, 0, 0, 1)">"</span>, padding: <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">8px</span><span style="color: rgba(128, 0, 0, 1)">"</span> }}&gt;姓名&lt;/th&gt;
        &lt;/<span style="color: rgba(0, 0, 255, 1)">tr</span>&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;<span style="color: rgba(0, 0, 0, 1)">
        {students.map((name, index) </span>=&gt;<span style="color: rgba(0, 0, 0, 1)"> (
          </span>&lt;<span style="color: rgba(0, 0, 255, 1)">tr</span> key={index}&gt;
            &lt;td style={{ border: <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">1px solid #ccc</span><span style="color: rgba(128, 0, 0, 1)">"</span>, padding: <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">8px</span><span style="color: rgba(128, 0, 0, 1)">"</span> }}&gt;{index + <span style="color: rgba(128, 0, 128, 1)">1</span>}&lt;/td&gt;
            &lt;td style={{ border: <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">1px solid #ccc</span><span style="color: rgba(128, 0, 0, 1)">"</span>, padding: <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">8px</span><span style="color: rgba(128, 0, 0, 1)">"</span> }}&gt;{name}&lt;/td&gt;
          &lt;/<span style="color: rgba(0, 0, 255, 1)">tr</span>&gt;<span style="color: rgba(0, 0, 0, 1)">
        ))}
      </span>&lt;/tbody&gt;
    &lt;/table&gt;<span style="color: rgba(0, 0, 0, 1)">
  );
}</span></span></strong></pre>
</div>
<p><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">&nbsp;</span></strong></p>
<p><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">Vue</span></strong></p>
<div class="cnblogs_code">
<pre><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">&lt;template&gt;
  &lt;table style=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">border-collapse: collapse; width: 50%; margin: 1rem auto;</span><span style="color: rgba(128, 0, 0, 1)">"</span>&gt;
    &lt;thead&gt;
      &lt;<span style="color: rgba(0, 0, 255, 1)">tr</span> style=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">background-color: #f2f2f2;</span><span style="color: rgba(128, 0, 0, 1)">"</span>&gt;
        &lt;th style=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">border: 1px solid #ccc; padding: 8px;</span><span style="color: rgba(128, 0, 0, 1)">"</span>&gt;序号&lt;/th&gt;
        &lt;th style=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">border: 1px solid #ccc; padding: 8px;</span><span style="color: rgba(128, 0, 0, 1)">"</span>&gt;姓名&lt;/th&gt;
      &lt;/<span style="color: rgba(0, 0, 255, 1)">tr</span>&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
      &lt;<span style="color: rgba(0, 0, 255, 1)">tr</span><span style="color: rgba(0, 0, 0, 1)">
        v</span>-<span style="color: rgba(0, 0, 255, 1)">for</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">(student, index) in students</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
        :key</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">index</span><span style="color: rgba(128, 0, 0, 1)">"</span>
      &gt;
        &lt;td style=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">border: 1px solid #ccc; padding: 8px;</span><span style="color: rgba(128, 0, 0, 1)">"</span>&gt;{{ index + <span style="color: rgba(128, 0, 128, 1)">1</span> }}&lt;/td&gt;
        &lt;td style=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">border: 1px solid #ccc; padding: 8px;</span><span style="color: rgba(128, 0, 0, 1)">"</span>&gt;{{ student }}&lt;/td&gt;
      &lt;/<span style="color: rgba(0, 0, 255, 1)">tr</span>&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/template&gt;

&lt;script&gt;<span style="color: rgba(0, 0, 0, 1)">
export default {
  name: </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">StudentTable</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
  data() {
    return {
      students: [</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">panghu</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">xiaofu</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">daxiong</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">jinxiang</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">]
    };
  }
};
</span>&lt;/script&gt;</span></strong></pre>
</div>
<p><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">&nbsp;</span></strong></p>
<p><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">两段代码对比下来，你会发现</span></strong></p>
<p><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">JSX语法虽然对UI进行了描述，但是，将<span style="text-decoration: underline; background-color: rgba(204, 255, 204, 1)">“模板”和“逻辑”混合</span>在一起了</span></strong></p>
<p><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">&nbsp;</span></strong></p>
<div><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">在 JSX 中，你需要使用 JavaScript 的表达式（如变量、条件判断、循环等）直接对 UI 进行描述，类似于“模板 + 逻辑”的混合写法，具有较高的灵活度和可组合性。</span></strong></div>
<div><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">&nbsp;</span></strong></div>
<div><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">刚开始时，我：jsx，真不行，一坨</span></strong></div>
<div><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">两周后，我：这jsx哪里不行了，这jsx太棒了！</span></strong></div>
<div><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">&nbsp;</span></strong></div>
<div><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">清晰的组件功能结构，以及动态生成UI无不让我觉得react写起来真是非常爽！</span></strong></div>
<p class="markdown-section-toolbar"><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">且在单文件内，就可以实现多组件，还不用考虑作用域，真是太爽了！</span></strong></p>
<p class="markdown-section-toolbar"><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">&nbsp;</span></strong></p>
<p class="markdown-section-toolbar"><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">&nbsp;</span></strong></p>
<h1>3.react项目渲染过程</h1>
<h2>3.1.ReactElement 的数据结构</h2>
<div><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">虚拟 DOM 本质上是对真实 DOM 的抽象和映射，用一个轻量级的 JavaScript 对象来描述页面结构。</span></strong></div>
<div><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">当需要更新 UI 时，框架会先在内存中（虚拟 DOM）进行计算与对比，然后再将差异高效地应用到真实 DOM。这样的理念可以减少不必要的真实 DOM 操作，进而提升性能。</span></strong></div>
<div>&nbsp;</div>
<div><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">在 React 中，<span style="text-decoration: underline"><span style="background-color: rgba(204, 255, 204, 1)">“ReactElement”是构造虚拟 DOM 的核心数据结构，一般通过 JSX 或 React.createElement(...) 来创建</span></span>。一个典型的 ReactElement 对象包含以下信息：</span></strong></div>
<div><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">• type：要渲染的节点类型（字符串代表普通 DOM 标签，如 'div'；或一个自定义组件)。</span></strong></div>
<div><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">• props：节点的属性或子元素等相关数据。</span></strong></div>
<div><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">• key、ref 等内部标识符（帮助 React 快速判断节点变化，或为组件提供引用）。</span></strong></div>
<div>&nbsp;</div>
<div><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">这些“ReactElement”对象构成了 React 的虚拟 DOM 树，框架会根据它们与旧的虚拟 DOM 树进行对比后，找出需要更新的节点并执行真实 DOM 操作。</span></strong></div>
<div><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">Virtual DOM 更新对比流程</span></strong></div>
<div>&nbsp;</div>
<div><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">React 在进行更新时，使用一种称为“调和（Reconciliation）”的过程：</span></strong></div>
<div><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">1) 首先创建新旧虚拟 DOM 树的对比；</span></strong></div>
<div><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">2) 判断节点类型、key 等以定位可复用节点；</span></strong></div>
<div><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">3) 如果节点类型相同，则会进一步比较子元素；若不同，则放弃复用，销毁旧节点并新建节点；</span></strong></div>
<div><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">4) 计算出对真实 DOM 用户界面所需的最少量操作，然后执行更新。</span></strong></div>
<div><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">通过这种方式，React 避免了很多没必要的真实 DOM 重绘，性能相对较高</span></strong></div>
<div>&nbsp;</div>
<h2>3.2.渲染流程</h2>
<div>
<p><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt"><img src="https://img2024.cnblogs.com/blog/2501855/202501/2501855-20250113174705316-860777653.png" alt="" loading="lazy"></span></strong></p>
</div>
<div><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">流程：</span></strong></div>
<div><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">1.&nbsp;<span class="markdown-bold-text">编写&nbsp;JSX&nbsp;代码：</span></span></strong>
<div class="markdown-section-toolbar"><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">&nbsp;</span></strong></div>
<ul>
<li><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">开发者使用&nbsp;JSX&nbsp;语法编写组件，这种语法类似于 HTML，但可以在&nbsp;JavaScript 中使用。</span></strong></li>
</ul>
<ul>
<li value="2"><strong><span class="markdown-bold-text" style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">Babel&nbsp;编译：</span></strong></li>
</ul>
<ul>
<li><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">Babel&nbsp;是一个 JavaScript&nbsp;编译器，它将 JSX&nbsp;转换为&nbsp;<span class="markdown-inline-code">React.createElement&nbsp;调用。这一步将 JSX&nbsp;语法转化为&nbsp;JavaScript 代码，使其可以在浏览器中运行。</span></span></strong></li>
</ul>
<div class="markdown-section-toolbar"><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">&nbsp;</span></strong></div>
<strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">3.&nbsp;<span class="markdown-bold-text">React.createElement 调用：</span></span></strong>
<ul>
<li><strong><span class="markdown-inline-code" style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">React.createElement&nbsp;是一个函数，用于创建&nbsp;React&nbsp;元素（ReactElement）。每个&nbsp;JSX&nbsp;标签都会被转换为一个&nbsp;<span class="markdown-inline-code">React.createElement&nbsp;调用。</span></span></strong></li>
</ul>
<div class="markdown-section-toolbar"><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">&nbsp;</span></strong></div>
<strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">4.&nbsp;<span class="markdown-bold-text">ReactElement&nbsp;调用：</span></span></strong>
<ul>
<li><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">ReactElement&nbsp;是一个轻量级的描述对象，表示界面上某个节点的结构和属性。它是构建虚拟&nbsp;DOM&nbsp;的基础。</span></strong></li>
</ul>
<div class="markdown-section-toolbar"><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">&nbsp;</span></strong></div>
<strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">5.&nbsp;<span class="markdown-bold-text">虚拟 DOM：</span></span></strong>
<ul>
<li><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">React&nbsp;使用虚拟&nbsp;DOM 来描述&nbsp;UI&nbsp;的结构。虚拟 DOM&nbsp;是&nbsp;ReactElement 的集合，表示应用的当前状态。</span></strong></li>
</ul>
<div class="markdown-section-toolbar"><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">&nbsp;</span></strong></div>
<strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">6.&nbsp;<span class="markdown-bold-text">ReactDOM.render()：</span></span></strong>
<ul>
<li><strong><span class="markdown-inline-code" style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">ReactDOM.render()&nbsp;是&nbsp;React&nbsp;的核心方法之一。它的作用是将虚拟&nbsp;DOM 渲染为真实 DOM。</span></strong></li>
</ul>
<ul>
<li><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">具体过程：</span></strong></li>
</ul>
<ul>
<li><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">接收虚拟 DOM&nbsp;作为参数。</span></strong></li>
</ul>
<ul>
<li><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">比较新旧虚拟&nbsp;DOM，找出差异。</span></strong></li>
</ul>
<ul>
<li><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">将差异应用到真实 DOM 上，更新界面。</span></strong></li>
</ul>
<ul>
<li><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">这个过程通过高效的差异算法（Diffing&nbsp;Algorithm）实现，确保只更新必要的部分，从而提高性能。</span></strong></li>
</ul>
<div class="markdown-section-toolbar"><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">&nbsp;</span></strong></div>
<strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">7.&nbsp;<span class="markdown-bold-text">真实 DOM：</span></span></strong>
<div class="markdown-section-toolbar"><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">&nbsp;</span></strong></div>
<ul>
<li><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">最终，经过&nbsp;<span class="markdown-inline-code">ReactDOM.render()&nbsp;的处理，虚拟 DOM&nbsp;的变化被应用到真实&nbsp;DOM，用户界面得到更新。</span></span></strong></li>
</ul>
</div>
<p class="markdown-section-toolbar"><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">&nbsp;</span></strong></p>
<p><strong><span style="font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt">&nbsp;</span></strong></p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.5111196645752315" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-13 17:57">2025-01-13 17:55</span>&nbsp;
<a href="https://www.cnblogs.com/FatTiger4399">养肥胖虎</a>&nbsp;
阅读(<span id="post_view_count">37</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18664207" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18664207);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18664207', targetLink: 'https://www.cnblogs.com/FatTiger4399/p/18664207', title: 'React源码解析(1): JSX语法与react项目渲染过程' })">举报</a>
</div>
        