
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/johnnyzen/p/18931813" title="发布于 2025-06-17 19:58">
    <span role="heading" aria-level="2">[计算机组成原理/Java] 字符集编码: Unicode 字符集(UTF8/UTF16/UTF32) / `BOM`(Byte Order Mark/字节序标记) / UnicodeTextUtils</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="序">序</h1>
<ul>
<li>最近解析 以太网 SOME/IP 报文时，涉及到解析数据类型为 String(标准的Unicode字符集编码的文本序列，且细分为 动态 String [存在 32 bit 的 StringFieldLength] 和 静态 String ) 的场景。</li>
</ul>
<blockquote>
<p>尤其是 Struct 嵌套 String 时，还涉及到 CPU 的内存对齐(alignment)问题。</p>
</blockquote>
<ul>
<li>言归正传，本文对 Unicode 字符集 做个总结。</li>
<li>不想看 Unicode 不同细分字符集的原理的，可直接跳过 【Unicode字符集原理剖析】章节</li>
<li>不了解【<strong>大小端/字节序</strong>(<code>Endian</code>)】的朋友，可参考阅读此篇：</li>
</ul>
<blockquote>
<ul>
<li><a href="https://www.cnblogs.com/johnnyzen/p/18921308" target="_blank">[网络传输/序列化/CPU/内存/计算机组成原理] 字节序/大小端 - 博客园/千千寰宇</a></li>
</ul>
</blockquote>
<ul>
<li>关于 Unicode 字符集 与 BOM 的原理、技术实现/代码实现的帖子，全网比较缺乏。</li>
</ul>
<blockquote>
<p>此篇应该是相对详实且务实的一篇。(文末附有一个文本转Unicode字符集的工具类)</p>
</blockquote>
<h1 id="概述-unicode字符集">概述： Unicode字符集</h1>
<h2 id="字符编码">字符编码</h2>
<h3 id="字符编码的定义">字符编码的定义</h3>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1173617/202506/1173617-20250617205517801-1490597466.png" class="lazyload"></p>
<ul>
<li><strong>字符编码</strong>是指将<strong>字符集合</strong>（如字母、数字、标点符号、汉字等文本序列）映射到<strong>数字</strong>（通常为<strong>字节序列</strong>）的一种方法。</li>
</ul>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1173617/202506/1173617-20250617210124194-252474923.png" class="lazyload"></p>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1173617/202506/1173617-20250617210145800-1952273016.png" class="lazyload"></p>
<h3 id="常见的字符编码">常见的字符编码</h3>
<blockquote>
<ul>
<li>ASCII：一种<code>7</code>位编码方式，主要用于表示英语字符。</li>
<li>ISO-8859-1：又称Latin-1，用于表示西欧语言字符。</li>
<li>GB2312/GBK：主要用于简体中文和繁体中文字符的编码。GBK是GB2312的扩展，能够表示更多中文字符。</li>
<li>Unicode：一种统一的字符集，旨在表示全球所有文字。</li>
</ul>
<blockquote>
<ul>
<li>UTF-8：一种Unicode编码实现，使用1至4个字节表示一个字符，兼容ASCII，广泛应用于互联网。</li>
<li>UTF-16：另一种Unicode编码实现，通常使用2个或4个字节表示一个字符，在Java内部通常采用UTF-16来表示字符串。</li>
</ul>
</blockquote>
</blockquote>
<ul>
<li><strong>ASCII编码</strong></li>
</ul>
<blockquote>
<p><strong>ASCII编码</strong>每个字母或符号占1byte（8bits），并且<code>8</code>bits的最高位是0。因此，ASCII能编码的字母和符号只有128个。<br>
有一些编码把8bits最高位为1的后128个值也编码上，使得1byte可以表示256个值，但是这属于扩展的ASCII，<strong>并非标准ASCII</strong>。<br>
通常所说的<strong>标准ASCII</strong>只有前128个值！<br>
<code>ASCII</code><strong>编码</strong>几乎被世界上所有编码所兼容（UTF16和UTF32是个例外）。<br>
因此，如果一个文本文档里面的内容全都由ASCII里面的字母或符号构成，那么不管你如何展示该文档的内容，都不可能出现乱码的情况。</p>
</blockquote>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1173617/202506/1173617-20250617204011336-1281119775.png" class="lazyload"></p>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1173617/202506/1173617-20250617205733150-1394652410.png" class="lazyload"></p>
<ul>
<li>在Java中，<strong>字符串</strong>是以<code>Unicode</code>形式存储的。</li>
</ul>
<blockquote>
<p>具体来说，Java中的<code>String</code><strong>对象内部</strong>使用<code>UTF-16</code>编码。<br>
因此，在进行编码转换时，通常需要将<strong>字节数据</strong>按照<strong>源编码</strong>解码成<code>Java</code>内部的<code>Unicode</code>字符串，再按照<strong>目标编码</strong>转换成<strong>字节序列</strong>输出。</p>
</blockquote>
<h3 id="常见中文字符集编码的关系">常见中文字符集编码的关系</h3>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1173617/202506/1173617-20250617203532571-831977938.png" class="lazyload"></p>
<blockquote>
<p>GB18030 / GBK / GB2312 / ASCII / UTF-8</p>
</blockquote>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1173617/202506/1173617-20250617203423531-741258313.png" class="lazyload"></p>
<h2 id="文本编码转换的常见问题">文本编码转换的常见问题</h2>
<blockquote>
<p>在实际应用中，字符编码转换可能会遇到以下问题：</p>
</blockquote>
<ul>
<li><strong>乱码问题</strong>： 如果输入数据按照错误的编码解码，或者输出数据采用错误的编码写入，会导致显示乱码。</li>
</ul>
<blockquote>
<p>常见场景是中文字符在UTF-8和GBK之间转换不当。</p>
</blockquote>
<ul>
<li><strong>数据丢失</strong>： 部分编码格式可能无法表示某些字符，转换过程中可能导致数据丢失或替换成占位符（例如“？”）。</li>
<li><strong>效率问题</strong>： 对于大文件或大量数据转换，编码转换的效率也需要考虑，尤其是涉及到网络传输或实时处理时。</li>
</ul>
<h2 id="java-jdk的字符编码转换api">Java JDK的字符编码转换API</h2>
<blockquote>
<p>Java为我们提供了丰富的API来处理编码转换，主要包括：</p>
</blockquote>
<ul>
<li><code>String.getBytes(String charsetName)</code>：可以将一个字符串按照指定的字符集转换成字节数组。</li>
<li><code>new String(byte[] bytes, String charsetName)</code>：可以将字节数组按照指定字符集解码成字符串。</li>
<li><code>java.nio.charset.Charset</code>： 提供了对字符集对象的支持，可以通过Charset.forName("UTF-8")等方法获取字符集实例。</li>
<li><code>java.io.InputStreamReader</code> 和 <code>OutputStreamWriter</code>： 可以在流操作中指定编码格式，从而实现文件的编码转换。</li>
</ul>
<h2 id="unicode-字符集的-bom--byte-order-mark--字符顺序标记">Unicode 字符集的 BOM := Byte Order Mark := 字符顺序标记</h2>
<ul>
<li><code>BOM</code>（Byte Order Mark）在分析<code>unicode</code>之前，先把<code>bom</code>(byte order mark)说一下。</li>
</ul>
<blockquote>
<p><code>bom</code>是<code>unicode</code><strong>字符顺序的标识符号</strong>，一般以<strong>魔数</strong>(<code>magic code</code>)的形式出现在以<code>Unicode</code>字符编码的文件的开始的头部，作为该文件的编码标识。</p>
</blockquote>
<ul>
<li>举个很简单的例子:</li>
</ul>
<blockquote>
<p>在 windows 下新建一个文本文件，并另存为 utf8 的文件格式。<br>
该文件里面没有任何内容，我们再用<code>Hex Edit</code>来查看该文件的二进制内容：</p>
</blockquote>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1173617/202506/1173617-20250616205345092-1283192683.png" class="lazyload"></p>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1173617/202506/1173617-20250616205451431-1647625326.png" class="lazyload"></p>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1173617/202506/1173617-20250617201222901-1599536381.png" class="lazyload"></p>
<blockquote>
<p>UTF-8</p>
</blockquote>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1173617/202506/1173617-20250616205822918-2114867698.png" class="lazyload"></p>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1173617/202506/1173617-20250617201748607-1596416830.png" class="lazyload"></p>
<blockquote>
<p>UTF-8 with BOM</p>
</blockquote>
<blockquote>
<p><code>0xEF BB BF</code>就是这个文件的<code>bom</code>, 这也就是标识该文件是以<code>utf8</code>为编码格式的。</p>
</blockquote>
<h2 id="带-bom-的-unicode-文本-vs-不带-bom-的-unicode-文本">带 BOM 的 Unicode 文本 vs. 不带 BOM 的 Unicode 文本</h2>
<ul>
<li><code>UTF-8</code>、<code>UTF-16</code>、<code>UTF-32</code> 还区分带 <code>BOM</code> 的以及不带 <code>BOM</code> 的 Unicode 文本。</li>
<li><code>BOM</code> 的全称为 <code>byte-order mark</code>，即<strong>字节顺序标记</strong>，它是插入到以UTF-8、UTF16或UTF-32编码Unicode文件开头的特殊标记。</li>
</ul>
<blockquote>
<p>这些标记对于 UTF-8 来说<strong>并不是必须的</strong>。所以，我们们可以将带有 <code>BOM</code> 的 <code>UTF-8</code> 转换为 <code>UTF-8</code>。</p>
</blockquote>
<h2 id="unicode-字符集-bom的对应关系">Unicode 字符集 BOM的对应关系</h2>
<blockquote>
<p>下面来看看字符编码与其<code>bom</code>的对应关系</p>
</blockquote>
<table>
<thead>
<tr>
<th>字符编码</th>
<th>Bom (十六进制)</th>
</tr>
</thead>
<tbody>
<tr>
<td>UTF-8</td>
<td>EF BB BF</td>
</tr>
<tr>
<td>UTF-16 (BE) 大端</td>
<td>FE FF</td>
</tr>
<tr>
<td>UTF-16 (LE) 小端</td>
<td>FF FE</td>
</tr>
<tr>
<td>UTF-32 (BE) 大端</td>
<td>00 00 FE FF</td>
</tr>
<tr>
<td>UTF-32 (LE) 小端</td>
<td>FF FE 00 00</td>
</tr>
<tr>
<td>GB-18030</td>
<td>84 31 95 33</td>
</tr>
</tbody>
</table>
<h2 id="unicode字符集原理剖析">Unicode字符集原理剖析</h2>
<h3 id="utf-8编码剖析">UTF-8编码剖析</h3>
<ul>
<li><code>Unicode</code>编码以<code>code point</code>来标识每一个字符， <code>code point</code> 的范围是<br>
<code>0x000000 – 0x10FFFF</code></li>
</ul>
<blockquote>
<p>也就是每一个字符的code point都落在这个范围<br>
而<code>utf8</code>的<strong>一个字符</strong>可以用<code>1-4</code>字节来表示，可能有人会说这code point最大也就是0x10FFFF，为什么最大不是可以用三个字节表示呢？那是因为utf8有自己独特的表示格式，先来看看下面的对应关系:</p>
</blockquote>
<table>
<thead>
<tr>
<th>字节数</th>
<th>字符code point位数</th>
<th>最小的code point</th>
<th>最大的code point</th>
<th>第一个字节</th>
<th>第二个字节</th>
<th>第三个字节</th>
<th>第四个字节</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>7</td>
<td>U+0000</td>
<td>U+007F</td>
<td>0XXXXXXX</td>
<td>无</td>
<td>无</td>
<td>无</td>
</tr>
<tr>
<td>2</td>
<td>11</td>
<td>U+0080</td>
<td>U+07FF</td>
<td>110XXXXX</td>
<td>10XXXXXX</td>
<td>无</td>
<td>无</td>
</tr>
<tr>
<td>3</td>
<td>16</td>
<td>U+0800</td>
<td>U+FFFF</td>
<td>1110XXXX</td>
<td>10XXXXXX</td>
<td>10XXXXXX</td>
<td>无</td>
</tr>
<tr>
<td>4</td>
<td>21</td>
<td>U+10000</td>
<td>U+10FFFF</td>
<td>11110XXX</td>
<td>10XXXXXX</td>
<td>10XXXXXX</td>
<td>10XXXXXX</td>
</tr>
</tbody>
</table>
<ul>
<li>当某个字符的code point (cp简称) U+0000 &lt;= cp &lt;= U+007F 落在这个范围内</li>
</ul>
<blockquote>
<p>这时只需要一个字节来表示 0XXXXXXX，将该字符的code point （7位）填入X的位置，就可以得到该字符的utf8的编码后的格式了。<br>
我们以小写字母a举个例子，a的code point是01100001, 经过utf8编码后 <code>01100001(0x61)</code></p>
</blockquote>
<ul>
<li>例如，中文汉字 <code>加</code> code point 为 <code>0x52A0</code> 二进制格式 ‭<code>0101 0010 1010 0000</code></li>
</ul>
<blockquote>
<p>按照上表中的规则，该字符需要用3个字节来表示<br>
按照<strong>填充规则</strong> ，第一个字节 <code>1110XXXX</code> -&gt; <code>11100101</code> , 第二个字节10XXXXXX -&gt; 10001010 , 第三个字节10XXXXXX -&gt; 10100000</p>
<blockquote>
<p>组合起来就是 <code>11100101 10001010 10100000</code> := <code>‭HEX-&gt; 0xE58AA0‬</code></p>
</blockquote>
</blockquote>
<h3 id="utf-16编码剖析">UTF-16编码剖析</h3>
<ul>
<li><code>utf-16</code>编码的单元是2个字节，也就是16位。</li>
</ul>
<blockquote>
<p>utf-16编码格式在程序内存里经常使用，因为它比较高效,<br>
java中Character 字符用的就是utf-16编码格式<br>
在早期的时候，世界上所有的字符都可以用两个字节标识，也就是code point范围 U+0000 – U+FFFF，这样utf-16就可以很好的表示了，而且也不用像utf8那样按照固定的模板组合，可以直接用字符的code point表示，非常高效。</p>
</blockquote>
<blockquote>
<p>但是随着时间的推移，所有字符远远不能用两个字节的code point 表示了，那为了兼容code point 超过U+FFFF的字符 就出现字符代理对(Surrogate pair), utf16就是使用代理对来表示code point 范围在 U+10000 -&gt; U+10FFFF之间的字符，当然也就的使用四个字节来表示该字符了。<br>
对于Surrogate pair 与code point 之间的对应关系算法，等会儿再说。<br>
先来看下utf16对于code point 小与U+10000的字符表示，其实用的就是字符的code point表示，这里还区分了大小端的表示法。</p>
</blockquote>
<ul>
<li>案例</li>
</ul>
<blockquote>
<p>还是来看中文汉字 <code>加</code> code point 为 <code>0x52A0</code>， 推测一下:<br>
如果用utf16大端存储，那就是<code>0x52A0</code>;<br>
如果用utf16小端存储，那就是<code>0xA052</code></p>
</blockquote>
<h3 id="utf-32编码剖析">UTF-32编码剖析</h3>
<ul>
<li><code>utf-32</code>用4个字节表示<strong>一个字符</strong></li>
</ul>
<blockquote>
<ul>
<li>直接用字符的<code>code point</code>表示，非常高效，不需要任何的转化操作</li>
<li>但<strong>占用的存储空间</strong>却是很大的，会有空间的浪费。</li>
</ul>
</blockquote>
<ul>
<li>例如：小写字母<code>a</code></li>
</ul>
<blockquote>
<p><code>code point</code> 是 <code>0x61</code><br>
用<code>utf32</code>表示就是<strong>大端</strong> -&gt; <code>0x00 00 00 61</code> ; <strong>小端</strong> -&gt; <code>0x61 00 00 00</code><br>
这样会造成<strong>存储空间</strong>的浪费，当然应用场景不同而已，当追求高效的转换而忽略存储空间的浪费这个问题，utf32编码格式是比较好的选择。<br>
而utf8的原则是尽可能的节省存储空间，牺牲转化的效率，各有各的好处。</p>
</blockquote>
<h2 id="判别unicode文本的字符集的方法java-废弃不可靠">判别Unicode文本的字符集的方法(Java) 【废弃/不可靠】</h2>
<blockquote>
<p>亲测，此方法并可绝对可靠（尤其是结果为 UTF-8 的情况）。</p>
</blockquote>
<pre><code class="language-java">    /**
     * 获取 Unicode 文本的字符集
     * @param textBytes
     * @return
     */
    public static Charset getUnicodeTextCharset(byte[] textBytes){
        String encoding = null;
        int bomSize = 4;//BOM_SIZE;
        byte bom[] = new byte[bomSize];
        int n, unread;
        //n = internalIn.read(bom, 0, bom.length);

        //读取 bom
        int off = 0;
        int len = bom.length;
        int pos = 0;

        if (bom == null) {
            throw new NullPointerException();
        } else if (off &lt; 0 || len &lt; 0 || len &gt; bom.length - off) {
            throw new IndexOutOfBoundsException();
        }
        int avail = bom.length &lt;= textBytes.length ? bom.length : textBytes.length ;//算 bom.length 与 textBytes.length 的最小值
        if (avail &gt; 0) {
            System.arraycopy(textBytes, pos, bom, off, avail);
        }

        //判断 unicode 字符集
        if ((bom[0] == (byte) 0x00) &amp;&amp; (bom[1] == (byte) 0x00)
                &amp;&amp; (bom[2] == (byte) 0xFE) &amp;&amp; (bom[3] == (byte) 0xFF)) {
            encoding = "UTF-32BE";
            //unread = n - 4;
        } else if ((bom[0] == (byte) 0xFF) &amp;&amp; (bom[1] == (byte) 0xFE)
                &amp;&amp; (bom[2] == (byte) 0x00) &amp;&amp; (bom[3] == (byte) 0x00)) {
            encoding = "UTF-32LE";
            //unread = n - 4;
        } else if ((bom[0] == (byte) 0xEF) &amp;&amp; (bom[1] == (byte) 0xBB)
                &amp;&amp; (bom[2] == (byte) 0xBF)) {
            encoding = "UTF-8";//utf08 with bom
            //unread = n - 3;
        } else if ((bom[0] == (byte) 0xFE) &amp;&amp; (bom[1] == (byte) 0xFF)) {
            encoding = "UTF-16BE";
            //unread = n - 2;
        } else if ((bom[0] == (byte) 0xFF) &amp;&amp; (bom[1] == (byte) 0xFE)) {
            encoding = "UTF-16LE";
            //unread = n - 2;
        } else {
            // Unicode BOM mark not found, unread all bytes
            //defaultEncoding = defaultEncoding == null ? Charset.defaultCharset().name() : defaultEncoding;
            //defaultEncoding = defaultEncoding == null ? null : defaultEncoding;
            //encoding = defaultEncoding;
            //unread = n;
            encoding = "UTF-8";//默认: UTF-8 (without bom)
        }
        // System.out.println("read=" + n + ", unread=" + unread);
        return Charset.forName(encoding);
    }
</code></pre>
<h1 id="最佳实践">最佳实践</h1>
<h2 id="unicodetextutils--unicode文本处理工具类">UnicodeTextUtils : Unicode文本处理工具类</h2>
<h3 id="unicodecharsetenum">UnicodeCharsetEnum</h3>
<pre><code class="language-java">import com.xxx.sdk.pojo.text.enums.DigitalModeEnum;

/**
 * Unicode 字符集
 * @updateTime 2025.6.17 19:48
 */
public enum UnicodeCharsetEnum {
    UTF8_WITH_BOM("UTF8_WITH_BOM", "UTF-8 With BOM", "UTF-8"),
    UTF8_WITHOUT_BOM("UTF8_WITHOUT_BOM", "UTF-8 Without BOM", "UTF-8"),

    //小端
    UTF16LE_WITH_BOM("UTF16LE_WITH_BOM", "UTF-16LE With BOM", "UTF-16LE"),
    UTF16LE_WITHOUT_BOM("UTF16LE_WITHOUT_BOM", "UTF-16LE Without BOM", "UTF-16LE"),

    //大端
    UTF16BE_WITH_BOM("UTF16BE_WITH_BOM", "UTF-16BE With BOM", "UTF-16BE"),
    UTF16BE_WITHOUT_BOM("UTF16BE_WITHOUT_BOM", "UTF-16BE Without BOM", "UTF-16BE"),

    //小端
    UTF32LE_WITH_BOM("UTF32LE_WITH_BOM", "UTF-32LE With BOM",  "UTF-32LE"),
    UTF32LE_WITHOUT_BOM("UTF32LE_WITHOUT_BOM", "UTF-32LE Without BOM",  "UTF-32LE"),

    //大端
    UTF32BE_WITH_BOM("UTF32BE_WITH_BOM", "UTF-32BE With BOM", "UTF-32BE"),
    UTF32BE_WITHOUT_BOM("UTF32BE_WITHOUT_BOM", "UTF-32BE Without BOM", "UTF-32BE");

    private final String charsetCode;
    private final String charsetName;
    //java中定义的字符集
    private final String javaCharset;


    public final static String CODE_PARAM = "code";
    public final static String NAME_PARAM = "name";

    UnicodeCharsetEnum(String charsetCode, String charsetName, String javaCharset) {
        this.charsetCode = charsetCode;
        this.charsetName = charsetName;
        this.javaCharset = javaCharset;
    }

    public static UnicodeCharsetEnum findByCharsetCode(String charsetCode) {
        for (UnicodeCharsetEnum type : values()) {
            if (type.getCharsetCode().equals(charsetCode)) {
                return type;
            }
        }
        return null;
    }

    public static UnicodeCharsetEnum findByCharsetName(String charsetName) {
        for (UnicodeCharsetEnum type : values()) {
            if (type.getCharsetName().equals(charsetName)) {
                return type;
            }
        }
        return null;
    }


    public String getCharsetName() {
        return charsetName;
    }

    public String getCharsetCode() {
        return charsetCode;
    }

    public String getJavaCharset() {
        return javaCharset;
    }
}
</code></pre>
<h3 id="unicodetextutils">UnicodeTextUtils</h3>
<pre><code class="language-java">import com.xxx.sdk.pojo.text.UnicodeCharsetEnum;

import java.io.UnsupportedEncodingException;

/**
 * Unicode 文本处理工具类
 * @updateTime 2025.6.17 19:47
 */
public class UnicodeTextUtils {
    /**
     * 将指定文本转换为指定 Unicode 字符集的字节数组
     * @param text Java 字符串
     *     eg: "hello world!你好!"
     * @param unicodeCharset
     *     eg: UTF8_WITH_BOM
     * @return 指定 Unicode 字符集的字节数组
     * @usage String newText = new String( textToBytes(text="hello world!你好!", UTF8_WITH_BOM) ,  UTF8_WITH_BOM.charset)
     */
    public static byte [] textToBytes(String text, UnicodeCharsetEnum unicodeCharset) throws UnsupportedEncodingException {
        byte [] textBytes = null;
        switch (unicodeCharset) {
            // UTF8 不涉及 字节序(大小端)问题 (每个文本字符的最小单元: 1 byte)
            case UTF8_WITH_BOM : {
                byte [] textBytes1 = (new String( text )).getBytes( unicodeCharset.getJavaCharset() );//"UTF-8"
                int bomLength = 3;
                byte [] textBytes2 = new byte [textBytes1.length + bomLength];//预留 3个字节，填充 bom
                System.arraycopy(textBytes1, 00, textBytes2, 0 + bomLength, textBytes1.length);
                textBytes2[0] = (byte)0xef;
                textBytes2[1] = (byte)0xbb;
                textBytes2[2] = (byte)0xbf;

                //text == newText == "hello world!你好!", newText == [ (byte)0xef, (byte)0xbb, (byte)0xbf, 104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100, 33, -28, -67, -96, -27, -91, -67, 33 ]
                //String newText = new String( textBytes2, unicodeCharset.getJavaCharset() );
                textBytes = textBytes2;
                break;
            }
            case UTF8_WITHOUT_BOM : {
                byte [] textBytes1 = (new String( text )).getBytes( unicodeCharset.getJavaCharset() );//"UTF-8"

                //text == newText == "hello world!你好!", newText == [ 104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100, 33, -28, -67, -96, -27, -91, -67, 33 ]
                //String newText = new String( textBytes2, unicodeCharset.getJavaCharset() );
                textBytes = textBytes1;
                break;
            }

            //UTF16 设计 字节序(大小端)问题 (每个文本字符的最小单元: 2 byte)
            case UTF16LE_WITH_BOM : {
                byte [] textBytes1 = (new String( text )).getBytes( unicodeCharset.getJavaCharset() );//"UTF-16LE"
                int bomLength = 2;
                byte [] textBytes2 = new byte [textBytes1.length + bomLength];//预留 2个字节，填充 bom
                System.arraycopy(textBytes1, 00, textBytes2, 0 + bomLength, textBytes1.length);
                textBytes2[0] = (byte)0xff;
                textBytes2[1] = (byte)0xfe;
                //text == newText == "hello world!你好!", newText == [ 0xff/-1, 0xfe/-2, 104, 0, 101, 0, 108, 0, 108, 0, 111, 0, 32, 0, 119, 0, 111, 0, 114, 0, 108, 0, 100, 0, 33, 0, 96, 79, 125, 89, 33, 0 ]
                //String newText = new String( textBytes2, unicodeCharset.getJavaCharset() );
                textBytes = textBytes2;
                break;
            }
            case UTF16LE_WITHOUT_BOM : {
                byte [] textBytes1 = (new String( text )).getBytes( unicodeCharset.getJavaCharset() );//"UTF-16LE"

                //text == newText == "hello world!你好!", newText == [ 104, 0, 101, 0, 108, 0, 108, 0, 111, 0, 32, 0, 119, 0, 111, 0, 114, 0, 108, 0, 100, 0, 33, 0, 96, 79, 125, 89, 33, 0 ]
                //String newText = new String( textBytes2, unicodeCharset.getJavaCharset() );
                textBytes = textBytes1;
                break;
            }

            case UTF16BE_WITH_BOM : {
                //方法1
                byte [] textBytes1 = (new String( text )).getBytes( unicodeCharset.getJavaCharset() );//"UTF-16BE"
                int bomLength = 2;
                byte [] textBytes2 = new byte [textBytes1.length + bomLength];//预留 2个字节，填充 bom
                System.arraycopy(textBytes1, 00, textBytes2, 0 + bomLength, textBytes1.length);
                textBytes2[0] = (byte)0xfe;
                textBytes2[1] = (byte)0xff;

                //方法2
                //byte [] textBytes2 = (new String( text )).getBytes( "UTF-16" );//仅适用于 utf16 BE with bom(0xfe = -2, 0xff=-1)

                //text == newText == "hello world!你好!", newText == [ 0xfe/-2, 0xff/-1, 0, 104, 0, 101, 0, 108, 0, 108, 0, 111, 0, 32, 0, 119, 0, 111, 0, 114, 0, 108, 0, 100, 0, 33, 79, 96, 89, 125, 0, 33 ]
                //String newText = new String( textBytes2, unicodeCharset.getJavaCharset() );
                textBytes = textBytes2;
                break;
            }
            case UTF16BE_WITHOUT_BOM : {
                byte [] textBytes1 = (new String( text )).getBytes( unicodeCharset.getJavaCharset() );//"UTF-16BE"

                //text == newText == "hello world!你好!", newText == [ 0, 104, 0, 101, 0, 108, 0, 108, 0, 111, 0, 32, 0, 119, 0, 111, 0, 114, 0, 108, 0, 100, 0, 33, 79, 96, 89, 125, 0, 33 ]
                //String newText = new String( textBytes2, unicodeCharset.getJavaCharset() );
                textBytes = textBytes1;
                break;
            }

            //UTF32 设计 字节序(大小端)问题 (每个文本字符的最小单元: 4 byte)
            case UTF32LE_WITH_BOM : {
                byte [] textBytes1 = (new String( text )).getBytes( unicodeCharset.getJavaCharset() );//"UTF-32LE"
                int bomLength = 4;
                byte [] textBytes2 = new byte [textBytes1.length + bomLength];//预留 4个字节，填充 bom
                System.arraycopy(textBytes1, 00, textBytes2, 0 + bomLength, textBytes1.length);
                textBytes2[0] = (byte)0xff;
                textBytes2[1] = (byte)0xfe;
                textBytes2[2] = (byte)0x00;
                textBytes2[3] = (byte)0x00;

                //text == newText == "hello world!你好!", newText ==
                //String newText = new String( textBytes2, unicodeCharset.getJavaCharset() );
                textBytes = textBytes2;
                break;
            }
            case UTF32LE_WITHOUT_BOM : {
                byte [] textBytes1 = (new String( text )).getBytes( unicodeCharset.getJavaCharset() );//"UTF-32LE"

                //text == newText == "hello world!你好!", newText ==
                //String newText = new String( textBytes2, unicodeCharset.getJavaCharset() );
                textBytes = textBytes1;
                break;
            }

            case UTF32BE_WITH_BOM : {
                //方法1
                byte [] textBytes1 = (new String( text )).getBytes( unicodeCharset.getJavaCharset() );//"UTF-32BE"
                int bomLength = 4;
                byte [] textBytes2 = new byte [textBytes1.length + bomLength];//预留 2个字节，填充 bom
                System.arraycopy(textBytes1, 00, textBytes2, 0 + bomLength, textBytes1.length);
                textBytes2[0] = (byte)0x00;
                textBytes2[1] = (byte)0x00;
                textBytes2[2] = (byte)0xfe;
                textBytes2[3] = (byte)0xff;

                //text == newText == "hello world!你好!", newText ==
                //String newText = new String( textBytes2, unicodeCharset.getJavaCharset() );
                textBytes = textBytes2;
                break;
            }
            case UTF32BE_WITHOUT_BOM : {
                byte [] textBytes1 = (new String( text )).getBytes( unicodeCharset.getJavaCharset() );//"UTF-32BE"

                //方法2
                //byte [] textBytes2 = (new String( text )).getBytes( "UTF-32" );//仅适用于 utf32 BE without bom(0x00, 0x00, 0xfe = -2, 0xff=-1)

                //text == newText == "hello world!你好!", newText == [ 0, 0, 0, 104, 0, 0, 0, 101, 0, 0, 0, 108, 0, 0, 0, 108, 0, 0, 0, 111, 0, 0, 0, 32, 0, 0, 0, 119, 0, 0, 0, 111, 0, 0, 0, 114, 0, 0, 0, 108, 0, 0, 0, 100, 0, 0, 0, 33, 0, 0, 79, 96, 0, 0, 89, 125, 0, 0, 0, 33 ]
                //String newText = new String( textBytes2, unicodeCharset.getJavaCharset() );
                textBytes = textBytes1;
                break;
            }
            default: {
                //do nothing
                break;
            }
        }

        return textBytes;
    }
}
</code></pre>
<h3 id="unicodetextutilstest">UnicodeTextUtilsTest</h3>
<pre><code class="language-java">package com.xxx.sdk.utils.text;


import com.xxx.sdk.pojo.text.UnicodeCharsetEnum;
import com.xxx.sdk.utils.bytes.BytesUtils;
import lombok.extern.slf4j.Slf4j;
import org.junit.jupiter.api.Test;

@Slf4j
public class UnicodeTextUtilsTest {
    @Test
    public void textToBytesTest() throws Exception {
        String text = "hello world!你好!";

        //efbbbf68656c6c6f20776f726c6421e4bda0e5a5bd21
        log.info( "UTF8_WITH_BOM:{}", BytesUtils.bytesToHexString( UnicodeTextUtils.textToBytes(text, UnicodeCharsetEnum.UTF8_WITH_BOM) ));
        //68656c6c6f20776f726c6421e4bda0e5a5bd21
        log.info( "UTF8_WITHOUT_BOM:{}", BytesUtils.bytesToHexString( UnicodeTextUtils.textToBytes(text, UnicodeCharsetEnum.UTF8_WITHOUT_BOM) ));

        //fffe680065006c006c006f00200077006f0072006c0064002100604f7d592100
        log.info( "UTF16LE_WITH_BOM:{}", BytesUtils.bytesToHexString( UnicodeTextUtils.textToBytes(text, UnicodeCharsetEnum.UTF16LE_WITH_BOM) ));
        //680065006c006c006f00200077006f0072006c0064002100604f7d592100
        log.info( "UTF16LE_WITHOUT_BOM:{}", BytesUtils.bytesToHexString( UnicodeTextUtils.textToBytes(text, UnicodeCharsetEnum.UTF16LE_WITHOUT_BOM) ));
        //feff00680065006c006c006f00200077006f0072006c006400214f60597d0021
        log.info( "UTF16BE_WITH_BOM:{}", BytesUtils.bytesToHexString( UnicodeTextUtils.textToBytes(text, UnicodeCharsetEnum.UTF16BE_WITH_BOM) ));
        //00680065006c006c006f00200077006f0072006c006400214f60597d0021
        log.info( "UTF16BE_WITHOUT_BOM:{}", BytesUtils.bytesToHexString( UnicodeTextUtils.textToBytes(text, UnicodeCharsetEnum.UTF16BE_WITHOUT_BOM) ));

        //fffe000068000000650000006c0000006c0000006f00000020000000770000006f000000720000006c0000006400000021000000604f00007d59000021000000
        log.info( "UTF32LE_WITH_BOM:{}", BytesUtils.bytesToHexString( UnicodeTextUtils.textToBytes(text, UnicodeCharsetEnum.UTF32LE_WITH_BOM) ));
        //68000000650000006c0000006c0000006f00000020000000770000006f000000720000006c0000006400000021000000604f00007d59000021000000
        log.info( "UTF32LE_WITHOUT_BOM:{}", BytesUtils.bytesToHexString( UnicodeTextUtils.textToBytes(text, UnicodeCharsetEnum.UTF32LE_WITHOUT_BOM) ));
        //0000feff00000068000000650000006c0000006c0000006f00000020000000770000006f000000720000006c000000640000002100004f600000597d00000021
        log.info( "UTF32BE_WITH_BOM:{}", BytesUtils.bytesToHexString( UnicodeTextUtils.textToBytes(text, UnicodeCharsetEnum.UTF32BE_WITH_BOM) ));
        //00000068000000650000006c0000006c0000006f00000020000000770000006f000000720000006c000000640000002100004f600000597d00000021
        log.info( "UTF32BE_WITHOUT_BOM:{}", BytesUtils.bytesToHexString( UnicodeTextUtils.textToBytes(text, UnicodeCharsetEnum.UTF32BE_WITHOUT_BOM) ));
    }
}
</code></pre>
<h2 id="utf-16-并不是一个完美的选择没有完美的银弹字符集">UTF-16 并不是一个完美的选择————没有完美的银弹字符集</h2>
<ul>
<li><code>UTF-16</code> 存在几个方面的问题：</li>
</ul>
<blockquote>
<p>UTF-16 能表示的字符数有 6 万多，看起来很多，但是实际上目前 Unicode 5.0 收录的字符已经达到 99024 个字符，早已超过 UTF-16 的存储范围；这直接导致 UTF-16 地位颇为尴尬——如果谁还在想着只要使用 UTF-16 就可以高枕无忧的话，恐怕要失望了</p>
</blockquote>
<ul>
<li><code>UTF-16</code> 存在<strong>大小端/字节序</strong>问题，这个问题在进行信息交换时特别突出——如果字节序未协商好，将导致<strong>乱码</strong>；</li>
</ul>
<blockquote>
<p>如果协商好，但是双方一个采用大端一个采用小端，则必然有一方要进行<strong>大小端转换</strong>，<strong>性能损失</strong>不可避免（大小端问题其实不像看起来那么简单，有时会涉及硬件、操作系统、上层软件多个层次，可能会进行多次转换）<br>
另外，<strong>容错性低</strong>有时候也是一大问题——局部的字节错误，特别是丢失或增加可能导致所有后续字符全部错乱，错乱后要想恢复，可能很简单，也可能会非常困难。<br>
这一点在日常生活里大家感觉似乎无关紧要，但是在很多特殊环境下却是巨大的缺陷.<br>
目前支撑我们继续使用 <code>UTF-16</code> 的理由主要是考虑到它是<strong>双字节</strong>的，在计算字符串长度、执行索引操作时速度很快。<br>
当然这些优点 <code>UTF-32</code> 都具有，但很多人毕竟还是觉得 <code>UTF-32</code> <strong>太占空间</strong>了。</p>
</blockquote>
<ul>
<li>反过来 <code>UTF-8</code> 也不完美，也存在一些问题：</li>
</ul>
<blockquote>
<p>文化上的不平衡——对于<strong>欧美地区</strong>一些以<strong>英语</strong>为母语的国家 <code>UTF-8</code> 简直是太棒了，因为它和 <code>ASCII</code> 一样，<strong>一个字符只占一个字节</strong>，没有任何额外的<strong>存储负担</strong>；<br>
但是对于<strong>中日韩</strong>等国家来说，<code>UTF-8</code> 实在是太冗余，<strong>一个字符竟然要占用 3多个字节</strong>，存储和传输的效率不但没有提升，反而下降了。<br>
所以，<strong>欧美人民</strong>常常毫不犹豫的采用 <code>UTF-8</code>，而我们却老是要犹豫一会儿</p>
</blockquote>
<ul>
<li><strong>变长字节</strong>表示带来的<strong>效率问题</strong>——大家对 UTF-8 疑虑重重的一个问题就是在于其因为是<strong>变长字节</strong>表示。</li>
</ul>
<blockquote>
<p>因此，无论是计算<strong>字符数</strong>，还是<strong>执行索引操作效率</strong>都不高。<br>
为了解决这个问题，常常会考虑把 UTF-8 先转换为 UTF-16 或者 UTF-32 后再操作，操作完毕后再转换回去。而这显然是一种<strong>性能负担</strong>。</p>
</blockquote>
<ul>
<li>当然，<code>UTF-8</code> 的优点也不能忘了：</li>
</ul>
<blockquote>
<p>字符空间足够大，未来 Unicode 新标准收录更多字符，UTF-8 也能妥妥的兼容，因此不会再出现 UTF-16 那样的尴尬<br>
不存在大小端字节序问题，信息交换时非常便捷<br>
容错性高，局部的字节错误（丢失、增加、改变）不会导致连锁性的错误，因为 UTF-8 的字符边界很容易检测出来，这是一个巨大的优点（正是为了实现这一点，咱们中日韩人民不得不忍受 3 字节 1 个字符的苦日子）</p>
</blockquote>
<ul>
<li>那么到底该如何选择呢？</li>
</ul>
<blockquote>
<p>因为无论是 UTF-8 和 UTF-16/32 都各有优缺点，因此选择的时候应当立足于实际的应用场景。<br>
例如在某网友的习惯中，存储在磁盘上或进行网络交换时都会采用 UTF-8，而在程序内部进行处理时则转换为 UTF-16/32。<br>
对于大多数简单的程序来说，这样做既可以保证信息交换时容易实现相互兼容，同时在内部处理时会比较简单，性能也还算不错。<br>
基本上只要你的程序不是 I/O 密集型的都可以这么干，当然这只是我粗浅的认识范围内的经验，很可能会被无情的反驳。<br>
稍微再展开那么一点点……在一些特殊的领域，字符编码的选择会成为一个很关键的问题。特别是一些高性能网络处理程序里更是如此。<br>
这时采用一些特殊的设计技巧，可以缓解性能和字符集选择之间的矛盾。<br>
例如对于内容检测/过滤系统，需要面对任何可能的字符编码，这时如果还采用把各种不同的编码都转换为同一种编码后再处理的方案，那么性能下降将会很显著。<br>
而如果采用多字符编码支持的有限状态机方案，则既能够无需转换编码，同时又能够以极高的性能进行处理。<br>
当然如何从规则列表生成有限状态机，如何使得有限状态机支持多编码，以及这将带来哪些限制，已经又成了另外的问题了。</p>
</blockquote>
<h1 id="z-faq-for-unicode-字符集">Z FAQ for Unicode 字符集</h1>
<h2 id="q-utf-8-字符串与utf-16le和utf-16be字符串的结尾字节必须要求0结束吗">Q: UTF-8 字符串与UTF-16LE和UTF-16BE字符串的结尾字节必须要求\0结束吗？</h2>
<blockquote>
<p>在讨论 UTF-8、UTF-16LE 和 UTF-16BE 字符串的结尾字节是否需要以 <code>\0</code> 结束时，需要明确字符串的使用场景和上下文，因为这与编程语言、操作系统以及具体的应用场景有关。</p>
</blockquote>
<h3 id="utf-8-字符串">UTF-8 字符串</h3>
<ul>
<li>
<p><strong>C/C++ 等语言中的字符串</strong>：在 C/C++ 中，字符串通常以 <code>\0</code>（空字符）作为结束标志。这是因为 C/C++ 的字符串是以字符数组的形式存储的，程序通过检测 <code>\0</code> 来确定字符串的结束位置。例如：</p>
<pre><code class="language-c">char utf8_string[] = "你好，世界";
</code></pre>
<p>在这里，字符串的结尾会自动加上 <code>\0</code>。</p>
</li>
<li>
<p><strong>其他语言和场景</strong>：在其他编程语言（如 Python、Java 等）中，字符串通常是由语言的运行时环境管理的，它们有自己的内部表示方式，不一定需要以 <code>\0</code> 结束。例如，Python 的字符串是不可变对象，其长度由运行时环境记录，而不是通过 <code>\0</code> 来标识结束。</p>
</li>
</ul>
<h3 id="utf-16le-和-utf-16be-字符串">UTF-16LE 和 UTF-16BE 字符串</h3>
<ul>
<li>
<p><strong>C/C++ 等语言中的宽字符字符串</strong>：在 C/C++ 中，宽字符字符串（如 UTF-16 编码的字符串）也通常以空字符（<code>L'\0'</code>）作为结束标志。例如：</p>
<pre><code class="language-c">wchar_t utf16_string[] = L"你好，世界";
</code></pre>
<p>在这里，字符串的结尾会自动加上 <code>L'\0'</code>，其在内存中占用两个字节（对于 UTF-16 来说）。</p>
</li>
<li>
<p><strong>其他语言和场景</strong>：与 UTF-8 类似，其他编程语言（如 Python、Java 等）中对字符串的管理方式不同，不一定需要以 <code>\0</code> 结束。例如，Java 中的字符串是基于 UTF-16 编码的，但其长度由对象的元数据记录，而不是通过 <code>\0</code> 来标识结束。</p>
</li>
</ul>
<h3 id="总结">总结</h3>
<ul>
<li><strong>C/C++ 等需要手动管理字符串的编程语言</strong>：UTF-8、UTF-16LE 和 UTF-16BE 字符串通常需要以 <code>\0</code>（对于 UTF-8）或 <code>L'\0'</code>（对于 UTF-16）结束，因为这是这些语言中字符串的结束标志。</li>
<li><strong>其他编程语言或特定应用场景</strong>：不一定需要以 <code>\0</code> 结束，因为这些语言或场景通常有其他机制来管理字符串的长度和结束位置。</li>
</ul>
<blockquote>
<p>因此，是否需要以 <code>\0</code> 结束取决于具体的编程语言和应用场景。</p>
</blockquote>
<h1 id="y-推荐文献">Y 推荐文献</h1>
<ul>
<li>
<p><a href="https://www.cnblogs.com/johnnyzen/p/18921308" target="_blank">[网络传输/序列化/CPU/内存/计算机组成原理] 字节序/大小端 - 博客园/千千寰宇</a></p>
</li>
<li>
<p><a href="https://www.cnblogs.com/johnnyzen/p/18293230" target="_blank">[Java SE] 基础工具类：ByteUtils(字节操作) - 博客园/千千寰宇</a></p>
</li>
<li>
<p><a href="https://www.cnblogs.com/Chary/p/13813750.html" target="_blank">字符集及字符编码-字母表大全 - 博客园</a> 【推荐】</p>
</li>
<li>
<p><a href="https://stackoverflow.org.cn/questions/879482" target="_blank" rel="noopener nofollow">java - 如何使用 BOM 编码/解码 UTF-16LE 字节数组？ - StackoverFlow</a></p>
</li>
</ul>
<blockquote>
<p>用 <code>BOM</code> 将 a 编码 <code>java.lang.String</code> 为 <code>UTF-16 little endian</code> 的方法</p>
</blockquote>
<pre><code class="language-java">public static byte[] encodeString(String message) {

    byte[] tmp = null;
    try {
        tmp = message.getBytes("UTF-16LE");
    } catch(UnsupportedEncodingException e) {
        // should not possible
        AssertionError ae =
        new AssertionError("Could not encode UTF-16LE");
        ae.initCause(e);
        throw ae;
    }

    // use brute force method to add BOM
    byte[] utf16lemessage = new byte[2 + tmp.length];
    utf16lemessage[0] = (byte)0xFF;
    utf16lemessage[1] = (byte)0xFE;
    System.arraycopy(tmp, 0,
                     utf16lemessage, 2,
                     tmp.length);
    return utf16lemessage;
}
</code></pre>
<blockquote>
<p>这是一个老问题，但我仍然找不到适合我情况的可接受答案。基本上，<strong>Java 没有内置的带有 BOM 的 UTF-16LE 编码器。因此，您必须推出自己的实现</strong>。 2017-08-24T22:17:10.220</p>
</blockquote>
<pre><code class="language-java">private byte[] encodeUTF16LEWithBOM(final String s) {
    ByteBuffer content = Charset.forName("UTF-16LE").encode(s);
    byte[] bom = { (byte) 0xff, (byte) 0xfe };
    return ByteBuffer.allocate(content.capacity() + bom.length).put(bom).put(content).array();
}
</code></pre>
<ul>
<li><a href="https://blog.csdn.net/m0_61840987/article/details/146041316" target="_blank" rel="noopener nofollow">java实现字符编码转换utf-8/gbk（附带源码） - CSDN</a></li>
</ul>
<blockquote>
<p>EncodingConverter.java</p>
</blockquote>
<ul>
<li><a href="https://www.cnblogs.com/suv789/p/18622880" target="_blank">ANSI、UTF-16 LE、UTF-16 BE、UTF-8以及带有BOM的UTF-8之间的对比与区别，整理成表格 - 博客园</a></li>
</ul>
<table>
<thead>
<tr>
<th>编码格式</th>
<th>描述</th>
<th>是否带BOM</th>
<th>字节顺序标记 (BOM)</th>
<th>字符编码特点</th>
<th>常见应用场景</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>ANSI</strong></td>
<td>通常指操作系统默认的本地字符编码，基于系统语言环境（如Windows的GBK、ISO-8859-1等）。</td>
<td>否</td>
<td>无</td>
<td>使用单字节编码，字符集依赖操作系统语言，无法直接表示所有Unicode字符。</td>
<td>主要用于非Unicode编码的Windows环境下。</td>
</tr>
<tr>
<td><strong>UTF-16 LE</strong></td>
<td>UTF-16编码，采用小端字节序（低位字节在前）。</td>
<td>是</td>
<td>0xFF 0xFE</td>
<td>每个字符占用2字节，支持全球所有Unicode字符。</td>
<td>常见于Windows系统、Java环境。</td>
</tr>
<tr>
<td><strong>UTF-16 BE</strong></td>
<td>UTF-16编码，采用大端字节序（高位字节在前）。</td>
<td>是</td>
<td>0xFE 0xFF</td>
<td>每个字符占用2字节，支持全球所有Unicode字符。</td>
<td>主要用于一些特定硬件和平台，较少见。</td>
</tr>
<tr>
<td><strong>UTF-8</strong></td>
<td>可变长度的Unicode编码格式，向后兼容ASCII。</td>
<td>否</td>
<td>无</td>
<td>1到4个字节表示一个字符，广泛应用，兼容ASCII，节省空间。</td>
<td>网络传输、HTML、JSON、Web开发。</td>
</tr>
<tr>
<td><strong>带BOM的UTF-8</strong></td>
<td>UTF-8编码，带有字节顺序标记（BOM）。</td>
<td>是</td>
<td>0xEF 0xBB 0xBF</td>
<td>与普通UTF-8相同，但在文件开头加上字节顺序标记（BOM）。</td>
<td>有时用于明确标识编码格式，尤其在跨平台传输中。</td>
</tr>
</tbody>
</table>
<ul>
<li><a href="https://blog.csdn.net/m0_51545690/article/details/129915933" target="_blank" rel="noopener nofollow">java中的UTF-16编码详解，什么是码点？什么是字符？ - CSDN</a></li>
<li><a href="https://www.cnblogs.com/swtaa/p/17139046.html" target="_blank">字符集和字符编码（Charset &amp; Encoding） - 博客园</a> 【推荐】</li>
</ul>
<h1 id="x-参考文献">X 参考文献</h1>
<ul>
<li><a href="https://blog.csdn.net/rodbate/article/details/76296131" target="_blank" rel="noopener nofollow">字符集编码 Unicode UTF8 UTF16 UTF32 和BOM（Byte Order Mark） - CSDN</a></li>
<li><a href="https://www.zhihu.com/question/265298913" target="_blank" rel="noopener nofollow">win10下怎么把txt格式转换为无bom的utf-8形式？ - Zhihu</a></li>
</ul>
<blockquote>
<ul>
<li><code>UTF-8</code>、<code>UTF-16</code>、<code>UTF-32</code> 还区分带 <code>BOM</code> 的以及不带 <code>BOM</code> 的 Unicode 文本。</li>
</ul>
</blockquote>

</div>
<div id="MySignature" role="contentinfo">
    <div class="essaySuffix-box">
    <div class="essaySuffix-box-left" style=" margin: 6px auto; ">
        <img src="https://blog-static.cnblogs.com/files/johnnyzen/cnblogs-qq-group-qrcode.gif?t=1679679148" alt="QQ沟通交流群" onload="changeImg(this,200,100)">
    </div>
<div class="essaySuffix-box-right">
    <span class="essaySuffix-right-title">本文作者</span>：
        <strong><span><a href="https://github.com/Johnny-ZTSD" target="_blank">千千寰宇</a></span></strong>
    <br>
    <span style="font-weight: bold; white-space:nowrap;">本文链接</span>：
        <a href="https://www.cnblogs.com/johnnyzen" target="_blank" id="articleLinkElement"> https://www.cnblogs.com/johnnyzen</a>
    <br>
    <span class="essaySuffix-right-title">关于博文</span>：评论和私信会在第一时间回复，或<a href="https://msg.cnblogs.com/msg/send/johnnyzen" target="_blank">直接私信</a>我。
    <br>
    <span class="essaySuffix-right-title">版权声明</span>：本博客所有文章除特别声明外，均采用 <a title="https://creativecommons.org/licenses/by-nc-nd/4.0/" href="http://blog.sina.com.cn/s/blog_896327b90102y6c6.html" alt="BY-NC-SA" target="_blank">BY-NC-SA</a> 
    许可协议。转载请注明出处！<br>
    <span class="essaySuffix-right-title">日常交流</span>：大数据与软件开发-QQ交流群: 774386015<strong>
        <span style="color: #ff0000; font-size: 12pt;">【<a id="post-up" onclick="votePost(getArticleNumber(),'Digg')" href="javascript:void(0);">入群二维码</a>】</span></strong>参见左下角。您的支持、鼓励<span style="color: #ff0000; font-size: 12pt;"></span>是博主技术写作的重要动力！
    <br>
</div>
<div style="clear: both;">
</div>
</div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.5951388888888889" data-date-updated="2025-06-18 10:15">2025-06-17 19:58</span>&nbsp;
<a href="https://www.cnblogs.com/johnnyzen">千千寰宇</a>&nbsp;
阅读(<span id="post_view_count">95</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18931813);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18931813', targetLink: 'https://www.cnblogs.com/johnnyzen/p/18931813', title: '[计算机组成原理/Java] 字符集编码: Unicode 字符集(UTF8/UTF16/UTF32) / `BOM`(Byte Order Mark/字节序标记) / UnicodeTextUtils' })">举报</a>
</div>
        