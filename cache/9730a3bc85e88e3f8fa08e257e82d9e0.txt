
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/heymar/p/18643840" title="发布于 2024-12-31 13:54">
    <span role="heading" aria-level="2">ThreeJs-11精通着色器编程（重难点）</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="着色器语言编程比较重要后面的几个章节都会围绕这个来做特效">着色器语言编程比较重要，后面的几个章节都会围绕这个来做特效</h1>
<h1 id="一初识着色器语言">一.初识着色器语言</h1>
<p>首先什么叫做着色器，他是一种语言，首先需要设置为着色器材质，然后在材质里面书写一些语言，可以告诉他顶点，然后去自定义一些东西，比如我想要这一面为红色等等</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135233332-1708567879.png" alt="image-20241225223903619" loading="lazy"></p>
<p>比如用一个基础材质做了一个平面</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135232835-2015712741.png" alt="image-20241225223947852" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135232451-792191584.png" alt="image-20241225223935800" loading="lazy"></p>
<p>现在改为着色器材质</p>
<p>着色器里面一个顶点着色器告诉顶点位置，gl只能支持四维向量，vec4表示四维向量，position是有material自带的position直接拿过来的，最后一个1是第四个顶点</p>
<p>下面一个事片源着色器，负责告诉这个顶点要干嘛，比如我要修改颜色，也是一个四维向量rgba并且是浮点数，这个颜色就表示红色</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135231996-2027416106.png" alt="image-20241225224452718" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135231576-385567676.png" alt="image-20241225224819496" loading="lazy"></p>
<p>此时呢颜色就出来了，但是并不会跟着坐标轴转换</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135231167-486963127.png" alt="image-20241225224839921" loading="lazy"></p>
<p><strong>此时需要将顶点位置进行转换，这个公式也是固定的</strong></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135230771-856990757.png" alt="image-20241225225018167" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135230239-1173695408.png" alt="image-20241225225036810" loading="lazy"></p>
<p>此时就能随便动了</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135229856-1580207551.png" alt="image-20241225225054818" loading="lazy"></p>
<h2 id="11-插件安装与文件导入开发">1.1 插件安装与文件导入开发</h2>
<p>当然这个语言有时候可能会写很多，在一个模板字符串里面就比较麻烦，没有任何代码提示，而且也不会报错</p>
<p>所以一般我们都会这么来</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135229487-639341373.png" alt="image-20241225230556176" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135229113-1760759968.png" alt="image-20241225230607593" loading="lazy"></p>
<p>这边导入并使用</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135228750-229077558.png" alt="image-20241225230743065" loading="lazy"></p>
<p><mark>这里解决了些东西弄了半天，反正vite不支持直接这样分包导入</mark></p>
<p>如果一定要这样需要下载并配置</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135228360-268777949.png" alt="image-20241225233419320" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135228024-252809839.png" alt="image-20241225233429249" loading="lazy"></p>
<p>可以安装的插件，第一个对glsl语言的支持不再是字符串，第二个是格式化并代码提示的</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135227598-508344798.png" alt="QQ_1735180948347" loading="lazy"></p>
<h2 id="12-原始着色器材质rawshadermaterial">1.2 原始着色器材质(RawShaderMaterial)</h2>
<p>原始着色器和之前的着色器材质用法基本类似，唯一的区别就是，着色器材质很多都是可以默认直接拿mesh里面的比如position，但是原始着色器材质，所有的矩阵的属性都需要声明</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135227233-514299610.png" alt="image-20241226134211431" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135226870-1611095264.png" alt="QQ_1735191745820" loading="lazy"></p>
<p>到这里就可以实现之前着色器一样的效果，初次之外还有一些别的设置</p>
<p><mark>还有一个属性uv，他表示的是顶点，二维属性那就是二维平面的顶点</mark></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135226493-2117711647.png" alt="QQ_1735192410314" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135226126-544847899.png" alt="image-20241226140049591" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135225749-779804906.png" alt="QQ_1735193116068" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135225404-1975030729.png" alt="QQ_1735193132990" loading="lazy"></p>
<h2 id="13-控制顶点类型改变波浪形状">1.3 控制顶点类型改变波浪形状</h2>
<p>到目前为止好像也没有看出这个材质特殊性在哪</p>
<p>我们可以把之前顶点着色器代表位置的参数领出来作为一个变量，可以去单独设置他的x轴z轴等</p>
<p><mark>需要注意的是：这里的position每个轴的范围是-1到1，参考之前的uv顶点，也就是x轴是越来越大的，所以如果你用z轴去加x轴，就会变成这个效果，细品</mark></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135225020-1535650147.png" alt="QQ_1735195001880" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135224656-998324328.png" alt="QQ_1735195015282" loading="lazy"></p>
<p><strong>这里提供一个sin函数</strong></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135224011-897759915.gif" alt="GIF 2024-12-26 14-46-48" loading="lazy"></p>
<p>当然这是横着的波浪如果要竖着那就是对应还是z轴加y轴</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135222848-960125306.png" alt="image-20241226145323166" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135222480-1485040563.png" alt="image-20241226145335831" loading="lazy"></p>
<p>然后还可以来一个例子可以根据不同的凸出起来的高度设置暗度不同的颜色，所以首先我要拿到z轴</p>
<p>顶点这边声明可以交换的属性并且把z轴给上去</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135222120-1128485983.png" alt="image-20241226150436920" loading="lazy"></p>
<p>顶点拿过来的值不支持修改，如果要改，那就拿过来在片段着色器里面改，声明一个变量需要声明是什么类型的值，这里只是为了让范围在0-1</p>
<p><mark>一定要注意分号每一行都要加分号</mark></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135221745-879894905.png" alt="image-20241226152249705" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135221354-1354867788.png" alt="image-20241226152326834" loading="lazy"></p>
<h2 id="14-uniform传递变量">1.4 uniform传递变量</h2>
<p>我们可以让这个波浪动起来，既然要动起来就可以让z轴加一些动态的数据，其实就是时间就可以了</p>
<p>首先我们材质这里是可以传值进来的</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135221021-472430671.png" alt="image-20241226153319996" loading="lazy"></p>
<p>然后在动画函数里面，之前拿到过时间的函数，这个函数就是从进入3D一直以来的秒数</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135220690-1304555247.png" alt="QQ_1735198778424" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135220354-1412244813.png" alt="QQ_1735198828492" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135219932-636714773.gif" alt="GIF 2024-12-26 15-40-51" loading="lazy"></p>
<h2 id="15-uv纹理">1.5 uv纹理</h2>
<p>如果有一张图，比如冬奥会的旗帜是否可以让他实现彩旗飘飘的效果，这里需要用到uv纹理贴图</p>
<p>大概步骤是，加载贴图，然后跟刚才一样通过变量传进来</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135219521-525580401.png" alt="QQ_1735200983415" loading="lazy"></p>
<p>这边接收注意有专门的类型，根据顶点去除对应的颜色，刚好是四个点，图片也是四个点</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135219176-520730689.png" alt="QQ_1735201429309" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135218767-1084171922.gif" alt="GIF 2024-12-26 16-24-08" loading="lazy"></p>
<h1 id="二着色器编写各类型图案">二.着色器编写各类型图案</h1>
<h2 id="21-上部分">2.1 上部分</h2>
<p>首先回到最开始的状态，用uv作为四个顶点的颜色的状态</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135218359-1995063133.png" alt="image-20241226215305833" loading="lazy"></p>
<p>对于之前uv的应用</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135217846-2116364334.png" alt="image-20241226215543190" loading="lazy"></p>
<p><strong>利用uv实现渐变效果</strong></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135217418-1603248083.png" alt="image-20241226220355777" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135216955-966770456.png" alt="image-20241226220402770" loading="lazy"></p>
<p>mod取余函数</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135216091-909785178.gif" alt="GIF" loading="lazy"></p>
<p>step函数</p>
<p>实现斑马效果，注意上面mod的结果0-1之间</p>
<p>当然如果是对vUv.x那就是垂直条纹</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135215616-497351606.png" alt="image-20241226221559868" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135215210-1366121845.png" alt="image-20241226221617113" loading="lazy"></p>
<p>条纹还可以相加，x轴弄完弄y轴</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135214780-1364871380.png" alt="image-20241226221913449" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135214384-998412907.png" alt="image-20241226221922462" loading="lazy"></p>
<p>当然加减乘除其实都是可以的，分别可以完成不同的图案</p>
<p>乘的话就是类似于一个正方形</p>
<p><strong>只有1的位置才是白色，因为值设置的很大0.8，所以1的很少</strong></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135213976-937621039.png" alt="image-20241226223542851" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135213555-259126297.png" alt="image-20241226223620628" loading="lazy"></p>
<p>如果设置的很小大多数都可以为1</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135213191-1219082044.png" alt="image-20241226223835056" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135212813-1713429462.png" alt="image-20241226223843140" loading="lazy"></p>
<p>相减</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135212374-2039944492.png" alt="image-20241226223719237" loading="lazy"></p>
<p>如果相乘，值有些偏差此时可以形成一个条状效果</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135211952-583570084.png" alt="image-20241226223942543" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135211588-2035109226.png" alt="image-20241226223957783" loading="lazy"></p>
<p>那我如果来两个条带相加呢</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135211209-983702256.png" alt="image-20241226224024252" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135210811-1982063442.png" alt="image-20241226224033551" loading="lazy"></p>
<p>T型图，也就是设置偏移量，乘了10之后，减一些值</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135210360-2091962332.png" alt="image-20241226224404855" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135209923-696677389.png" alt="image-20241226224421073" loading="lazy"></p>
<p>利用绝对值 <strong>abs函数</strong></p>
<p>首先这里可以理解下</p>
<p>此时表示0-0.5，为什么以为vUv的值是0-1，减去0.5后，那就是-0.5-0.5，但是颜色rgba不支持负数，所以x轴就只能从0-0.5开始变，小于0的部分就都是黑色</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135209505-1492832581.png" alt="image-20241226224710347" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135209028-1786292003.png" alt="image-20241226224845318" loading="lazy"></p>
<p>那如果我想实现一个从白到黑再到白的效果，那就要用到绝对值</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135208598-1302648701.png" alt="image-20241226224923369" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135208089-413864405.png" alt="image-20241226224936658" loading="lazy"></p>
<h2 id="22-下部分">2.2 下部分</h2>
<p><strong>min函数</strong></p>
<p>实现十字交叉效果</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135207717-144540450.png" alt="image-20241226225208839" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135207309-1496686597.png" alt="image-20241226225222850" loading="lazy"></p>
<p><strong>同理把min改为max</strong></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135206928-481541096.png" alt="image-20241226225251105" loading="lazy"></p>
<p>利用step函数</p>
<p>外围是1，里面是0</p>
<p><strong>想反过来前面加个1.0-即可</strong></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135206526-180769980.png" alt="image-20241226225435481" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135206117-1489493342.png" alt="image-20241226225417500" loading="lazy"></p>
<p><strong>floor函数向下取整</strong></p>
<p><strong>同方法可以用向上取整ceil就是现在的图案白的更多一点</strong></p>
<p>也可以实现之前的条纹渐变</p>
<p>x*10范围在0-9.9999向下取整后那就是0-9再除以10那就是0-1左右</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135205713-40908507.png" alt="image-20241226225814496" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135205291-599044575.png" alt="image-20241226225931417" loading="lazy"></p>
<p>既然说floor可以实现渐变，之前也说乘可以实现格子效果，那么</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135204901-1241188278.png" alt="QQ_1735265346083" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135204545-400011109.png" alt="QQ_1735265368197" loading="lazy"></p>
<p><strong>随机值</strong></p>
<p>glsl本身没有随机函数，这里推荐一个网站</p>
<p><a href="https://thebookofshaders.com/" target="_blank" rel="noopener nofollow">https://thebookofshaders.com/</a></p>
<p>类似于glsl的文档，里面有一些关于随机怎么生成的使用，直接拿过来</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135204195-52107864.png" alt="QQ_1735265999923" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135203844-548508945.png" alt="QQ_1735266077787" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135203443-164000927.png" alt="QQ_1735266086429" loading="lazy"></p>
<p>同理改造下，让每个网格随机</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135203036-990485433.png" alt="QQ_1735266186919" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135202620-1583802111.png" alt="QQ_1735266304481" loading="lazy"></p>
<p><strong>length函数</strong></p>
<p>通过length函数得到uv变量长度给到color可以实现一个半径的扩展渐变效果</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135202250-1678035310.png" alt="image-20241228125345301" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135201865-976180637.png" alt="image-20241228125358635" loading="lazy"></p>
<p><strong>distance函数，两个向量之间的距离</strong></p>
<p>比如上面那个图案我不想以圆弧向外扩进，想以中心远点扩展，那我就可以计算顶点到0.5 0.5的距离，0.5 0.5就是中心原点</p>
<p><strong>要反过来颜色，就1-</strong></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135201429-1049020896.png" alt="image-20241228130720259" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135200997-2081989216.png" alt="image-20241228130728307" loading="lazy"></p>
<p><strong>除法</strong></p>
<p>前面加减乘都是有了对应的效果，由刚才的效果可知，越中间，和原点的距离是越短的值肯定就越小，那么一个值除以小值结果反而越大，除以大值结果反而越小，所以除法之后，中间越大，就越亮接近白色</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135200626-488787737.png" alt="image-20241228135225333" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135200250-2133315687.png" alt="image-20241228135237936" loading="lazy"></p>
<p>那如果此时减去一个1.0，周围可能会使负数，之前也看过负数也是黑色，然后光圈周围会越来越胆，最后只剩下比1大的还保留颜色</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135159884-1533675489.png" alt="image-20241228135426185" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135159543-670865103.png" alt="image-20241228135437038" loading="lazy"></p>
<p><strong>设置uVu</strong></p>
<p>我们可以对uVu进行直接设置，乘就是拉伸</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135159112-744534997.png" alt="image-20241228135712551" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135158701-382464255.png" alt="image-20241228135721140" loading="lazy"></p>
<p>加减就是偏移</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135158350-1233512329.png" alt="image-20241228135756624" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135157965-833656349.png" alt="image-20241228135804383" loading="lazy"></p>
<p>套用十字交叉效果</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135157411-180677819.png" alt="image-20241228135959173" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135156951-728269506.png" alt="image-20241228140009333" loading="lazy"></p>
<p>当然也可以直接相加</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135156509-1201100479.png" alt="image-20241228140029918" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135156108-1991731490.png" alt="image-20241228140041867" loading="lazy"></p>
<p><strong>如果你想要这个图案旋转起来</strong></p>
<p>也是一样的需要去找一些能实现的函数</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135155747-620060863.png" alt="image-20241228140409393" loading="lazy"></p>
<p>三个参数一个是uv，一个是旋转角度，一个是中心原点位置</p>
<p>旋转角度，也没有pi可以使用这里就用3.14代替，*0.25就表示180度，向量如果都是0.5可以只写一个</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135155397-701305719.png" alt="image-20241228140627878" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135155023-1930780166.png" alt="image-20241228140634115" loading="lazy"></p>
<p>如果要动起来传一个时间属性就可以了</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135154689-1273875767.png" alt="image-20241228140658811" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135153931-590831564.gif" alt="GIF" loading="lazy"></p>
<h1 id="三shader着色器编写高级图案">三.shader着色器编写高级图案</h1>
<h2 id="31-上部分">3.1 上部分</h2>
<p><strong>实现圆形</strong></p>
<p>顶点到原点的距离扩散，但是同时给个限定要么黑要么白</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135152871-847158385.png" alt="image-20241228142825202" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135152424-1378480198.png" alt="image-20241228142832500" loading="lazy"></p>
<p>如果你想让黑色再小点，也就是偏移往回走</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135152085-866802311.png" alt="image-20241228142916330" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135151751-755343101.png" alt="image-20241228142921522" loading="lazy"></p>
<p>实现圆环效果，也就是里面再来个圆，一个偏移量大一个小，然后乘起来</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135151341-214342233.png" alt="image-20241228143301333" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135151001-222114744.png" alt="image-20241228143318595" loading="lazy"></p>
<p><strong>当然实现光圈的效果不止这一种比如还有</strong></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135150657-70930903.png" alt="image-20241228145551435" loading="lazy"></p>
<p><strong>实现波浪环效果</strong></p>
<p>就是把顶点的x和y进行改造，加上sin角度，放入刚才环形里面</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135150236-1935882897.png" alt="image-20241228150308837" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135149837-1562239537.png" alt="image-20241228150314489" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135149450-1023735366.png" alt="image-20241228150332109" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135148982-199274362.png" alt="image-20241228150337452" loading="lazy"></p>
<p><strong>实现雷达效果</strong></p>
<p>需要用到一个 <strong>atan</strong>反正切函数</p>
<p>先简单设置一个角度</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135148558-1667992608.png" alt="image-20241228151442258" loading="lazy"></p>
<p>然后就可以得到这么一个图案，从左下顶点开始沿着一个顺时针，颜色变淡</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135148008-796456971.png" alt="image-20241228153020331" loading="lazy"></p>
<p>调整一下从中心原点开始，不从左下角开始</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135147591-911875256.png" alt="image-20241228153523283" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135147224-820479342.png" alt="image-20241228153530157" loading="lazy"></p>
<p>但是现在角度有点问题，左边部分是小于1减去0.5还是负数所以是黑色，这里有个公式</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135146826-1477895503.png" alt="image-20241228154800692" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135146425-1472238604.png" alt="image-20241228154806994" loading="lazy"></p>
<p>然后用刚才实现圆环的效果，给到透明度</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135145998-453660352.png" alt="image-20241228154859489" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135145559-1726192107.png" alt="image-20241228154907112" loading="lazy"></p>
<p>或者也可以用刚才实现圆的效果</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135145154-1429770548.png" alt="image-20241228154939964" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135144708-1574992688.png" alt="image-20241228154950874" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135144363-444962849.png" alt="image-20241228155008519" loading="lazy"></p>
<p>实现动态效果，就用刚才的旋转加时间方法拿来给到uv</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135143915-1886542017.png" alt="image-20241228155155327" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135143426-1744723317.gif" alt="GIF" loading="lazy"></p>
<p><strong>万花筒效果</strong></p>
<p>角度不变但是使用角度乘以一个数（决定到时候万花筒有多少壁），再对6.28取余，6.28就是2π，就是一圈</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135142892-973780062.png" alt="image-20241228155924306" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135142381-1567379425.png" alt="image-20241228160045041" loading="lazy"></p>
<p>或者也可以先把角度除了6.28</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135141928-962835159.png" alt="image-20241228160129215" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135141506-1868351144.png" alt="image-20241228160136266" loading="lazy"></p>
<p>当然也可以在最上面定义好一个π，<strong>注意定义的方式</strong></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135141106-1701538299.png" alt="image-20241228160213840" loading="lazy"></p>
<h2 id="32-下部分">3.2 下部分</h2>
<h3 id="分享一个网站httpswwwshadertoycom国内外大佬分享着色器成果的地方"><strong>分享一个网站https://www.shadertoy.com/，国内外大佬分享着色器成果的地方</strong></h3>
<p><strong>噪声效果</strong></p>
<p>可以在文档里面看到，一种随机效果，可以实现云，沙滩等效果</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135140728-976866833.png" alt="image-20241228160636320" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135140136-531571662.png" alt="image-20241228160651117" loading="lazy"></p>
<p><strong>实现波纹效果</strong></p>
<p>文档直接复制其函数</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135139478-533441346.png" alt="image-20241228163336472" loading="lazy"></p>
<p>直接用上来还不行还需要配合分段函数来</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135139020-1221436339.png" alt="image-20241228163712126" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135138515-1287523721.png" alt="image-20241228163717891" loading="lazy"></p>
<p><strong>sin实现波纹效果</strong></p>
<p>本身直接加sin是很模糊的</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135138092-781299692.png" alt="image-20241228165849092" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135137637-1738329388.png" alt="image-20241228165855212" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135137206-29919662.png" alt="image-20241228165914593" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135136687-1378103889.png" alt="image-20241228165920279" loading="lazy"></p>
<p><strong>现在想实现一个效果除了这些颜色在混合一点颜色进来，还有一个函数叫做混合mix</strong></p>
<p>黑加黄，第三个参数就是第三种颜色，就是黑</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135136341-1274827486.png" alt="image-20241228170140830" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135135975-695343024.png" alt="image-20241228170144742" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135135604-1771753330.png" alt="image-20241228170343901" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135135177-1803504414.png" alt="image-20241228170356423" loading="lazy"></p>
<p>融入波纹给到比例即可</p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135134836-746405543.png" alt="image-20241228170502466" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2680817/202412/2680817-20241231135133738-1525460424.png" alt="image-20241228170506535" loading="lazy"></p>
<p><strong>剩下漫天孔明灯效果</strong></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="22.446336024421296" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2024-12-31 17:33">2024-12-31 13:54</span>&nbsp;
<a href="https://www.cnblogs.com/heymar">Heymar-10</a>&nbsp;
阅读(<span id="post_view_count">185</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18643840" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18643840);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18643840', targetLink: 'https://www.cnblogs.com/heymar/p/18643840', title: 'ThreeJs-11精通着色器编程（重难点）' })">举报</a>
</div>
        