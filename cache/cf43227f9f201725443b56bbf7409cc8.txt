
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/Amd794/p/18859698" title="发布于 2025-05-05 00:58">
    <span role="heading" aria-level="2">FastAPI与Tortoise-ORM开发的神奇之旅</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<hr>
<p>title: FastAPI与Tortoise-ORM开发的神奇之旅<br>
date: 2025/05/05 00:15:48<br>
updated: 2025/05/05 00:15:48<br>
author: <a href="https://cmdragon.cn" target="_blank" rel="noopener nofollow"> cmdragon </a></p>
<p>excerpt:<br>
FastAPI与Tortoise-ORM结合实现全链路开发，涵盖环境配置、数据模型定义、Pydantic模式设计及API端点实现。文章模型包含软删除功能，通过<code>is_deleted</code>字段实现逻辑删除。API支持创建、分页查询、条件更新和软删除操作，确保数据安全与完整性。分页机制通过<code>offset</code>和<code>limit</code>实现，条件更新使用<code>exclude_unset=True</code>避免未传字段被覆盖。软删除通过<code>filter().update()</code>实现原子操作。系统具备用户认证、输入验证、防注入和细粒度权限控制等安全特性。</p>
<p>categories:</p>
<ul>
<li>后端开发</li>
<li>FastAPI</li>
</ul>
<p>tags:</p>
<ul>
<li>FastAPI</li>
<li>TortoiseORM</li>
<li>全链路开发</li>
<li>数据模型</li>
<li>API端点</li>
<li>分页机制</li>
<li>软删除</li>
</ul>
<hr>
<img src="https://static.shutu.cn/shutu/jpeg/openf0/2025/05/05/0b0b46ad98a23a046b81e1e777b2958f.jpeg" title="cmdragon_cn.png" alt="cmdragon_cn.png">
<img src="https://api2.cmdragon.cn/upload/cmder/20250304_012821924.jpg" title="cmdragon_cn.png" alt="cmdragon_cn.png">
<p>扫描<a href="https://api2.cmdragon.cn/upload/cmder/20250304_012821924.jpg" target="_blank" rel="noopener nofollow">二维码</a><br>
关注或者微信搜一搜：<code>编程智域 前端至全栈交流与成长</code></p>
<p><a href="https://tools.cmdragon.cn/zh/apps?category=ai_chat" target="_blank" rel="noopener nofollow">探索数千个预构建的 AI 应用，开启你的下一个伟大创意</a>：<a href="https://tools.cmdragon.cn/" target="_blank" rel="noopener nofollow">https://tools.cmdragon.cn/</a></p>
<h1 id="从api到数据库fastapi--tortoise-orm全链路开发指南">从API到数据库：FastAPI + Tortoise-ORM全链路开发指南</h1>
<h2 id="1-环境准备与包安装">1. 环境准备与包安装</h2>
<p>首先创建Python虚拟环境并安装必要依赖：</p>
<pre><code class="language-bash">python -m venv venv
source venc/bin/activate  # Linux/Mac
venv\Scripts\activate     # Windows

pip install fastapi uvicorn tortoise-orm pydantic python-multipart
</code></pre>
<h2 id="2-数据模型定义">2. 数据模型定义</h2>
<p>创建包含软删除功能的文章模型：</p>
<pre><code class="language-python"># models.py
from tortoise.models import Model
from tortoise import fields


class Article(Model):
    id = fields.IntField(pk=True)
    title = fields.CharField(max_length=255)
    content = fields.TextField()
    author_id = fields.IntField()
    created_at = fields.DatetimeField(auto_now_add=True)
    updated_at = fields.DatetimeField(auto_now=True)
    is_deleted = fields.BooleanField(default=False)

    class Meta:
        table = "articles"

    class PydanticMeta:
        exclude = ["is_deleted"]
</code></pre>
<h2 id="3-pydantic模式定义">3. Pydantic模式定义</h2>
<p>定义请求响应数据结构：</p>
<pre><code class="language-python"># schemas.py
from pydantic import BaseModel
from datetime import datetime


class ArticleCreate(BaseModel):
    title: str
    content: str


class ArticleUpdate(BaseModel):
    title: str | None = None
    content: str | None = None


class ArticleResponse(BaseModel):
    id: int
    title: str
    content: str
    author_id: int
    created_at: datetime
    updated_at: datetime

    class Config:
        orm_mode = True
</code></pre>
<h2 id="4-fastapi应用配置">4. FastAPI应用配置</h2>
<p>配置数据库连接和路由：</p>
<pre><code class="language-python"># main.py
from fastapi import FastAPI, Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer
from tortoise.contrib.fastapi import register_tortoise

app = FastAPI()

# 数据库配置
DATABASE_URL = "sqlite://./db.sqlite3"

register_tortoise(
    app,
    db_url=DATABASE_URL,
    modules={"models": ["models"]},
    generate_schemas=True,
    add_exception_handlers=True,
)

# 模拟用户认证
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")


async def get_current_user(token: str = Depends(oauth2_scheme)):
    return {"id": 1}  # 模拟返回用户信息
</code></pre>
<h2 id="5-完整api端点实现">5. 完整API端点实现</h2>
<h3 id="51-创建文章">5.1 创建文章</h3>
<pre><code class="language-python">@app.post("/articles", response_model=ArticleResponse)
async def create_article(
        article: ArticleCreate,
        user: dict = Depends(get_current_user)
):
    db_article = await Article.create(
        **article.dict(),
        author_id=user["id"]
    )
    return await ArticleResponse.from_tortoise_orm(db_article)
</code></pre>
<h3 id="52-分页查询">5.2 分页查询</h3>
<pre><code class="language-python">@app.get("/articles", response_model=list[ArticleResponse])
async def list_articles(
        page: int = 1,
        per_page: int = 10
):
    skip = (page - 1) * per_page
    query = Article.all().offset(skip).limit(per_page)
    return await ArticleResponse.from_queryset(query)
</code></pre>
<h3 id="53-条件更新">5.3 条件更新</h3>
<pre><code class="language-python">@app.patch("/articles/{article_id}", response_model=ArticleResponse)
async def update_article(
        article_id: int,
        update_data: ArticleUpdate,
        user: dict = Depends(get_current_user)
):
    # 只允许作者修改自己的文章
    db_article = await Article.get_or_none(id=article_id, author_id=user["id"])
    if not db_article:
        raise HTTPException(status_code=404, detail="Article not found")

    await db_article.update_from_dict(update_data.dict(exclude_unset=True))
    await db_article.save()
    return await ArticleResponse.from_tortoise_orm(db_article)
</code></pre>
<h3 id="54-软删除">5.4 软删除</h3>
<pre><code class="language-python">@app.delete("/articles/{article_id}")
async def delete_article(
        article_id: int,
        user: dict = Depends(get_current_user)
):
    updated_count = await Article.filter(
        id=article_id,
        author_id=user["id"]
    ).update(is_deleted=True)

    if not updated_count:
        raise HTTPException(status_code=404, detail="Article not found")
    return {"message": "Article deleted"}
</code></pre>
<h2 id="6-关键实现解析">6. 关键实现解析</h2>
<h3 id="61-分页机制原理">6.1 分页机制原理</h3>
<ul>
<li>计算skip值：<code>skip = (page - 1) * per_page</code></li>
<li>数据库查询使用offset和limit实现分页</li>
<li>实际生产环境建议使用游标分页（Cursor Pagination）</li>
</ul>
<h3 id="62-条件更新安全">6.2 条件更新安全</h3>
<ul>
<li>通过<code>get_or_none</code>确保记录存在</li>
<li>使用<code>filter().update()</code>实现原子操作</li>
<li><code>exclude_unset=True</code>忽略未传字段</li>
</ul>
<h3 id="63-软删除实现">6.3 软删除实现</h3>
<ol>
<li>添加is_deleted字段</li>
<li>重写默认查询过滤器：</li>
</ol>
<pre><code class="language-python">class SoftDeleteManager(fields.Model):
    def get_queryset(self):
        return super().get_queryset().filter(is_deleted=False)
</code></pre>
<h2 id="7-课后quiz">7. 课后Quiz</h2>
<p><strong>Q1：如何防止SQL注入攻击？</strong><br>
A：使用ORM的参数化查询，避免拼接SQL语句。Tortoise-ORM会自动处理查询参数，例如：</p>
<pre><code class="language-python">await Article.filter(title="Safe' OR 1=1--")
</code></pre>
<p>实际生成的SQL会是参数化查询，特殊字符会被正确转义</p>
<p><strong>Q2：为什么在更新时使用exclude_unset=True？</strong><br>
A：该参数会忽略未提供的字段，实现部分更新。例如用户只修改标题时，不会影响content字段</p>
<p><strong>Q3：如何实现真正的物理删除？</strong><br>
A：直接使用delete()方法：</p>
<pre><code class="language-python">await Article.filter(id=1).delete()
</code></pre>
<h2 id="8-常见报错解决方案">8. 常见报错解决方案</h2>
<p><strong>错误1：422 Validation Error</strong></p>
<ul>
<li>原因：请求体不符合Pydantic模型要求</li>
<li>解决：检查请求头Content-Type是否正确（应为application/json），确认字段类型和必填项</li>
</ul>
<p><strong>错误2：404 Not Found</strong></p>
<ul>
<li>原因：尝试操作不存在的记录</li>
<li>解决：在更新/删除前先使用get_or_none检查记录是否存在</li>
</ul>
<p><strong>错误3：RuntimeError - Event loop closed</strong></p>
<ul>
<li>原因：在同步代码中调用异步方法</li>
<li>解决：确保所有数据库操作都在async函数中执行，使用await调用</li>
</ul>
<p>启动服务命令：</p>
<pre><code class="language-bash">uvicorn main:app --reload
</code></pre>
<p>访问 <a href="http://localhost:8000/docs" target="_blank" rel="noopener nofollow">http://localhost:8000/docs</a> 即可测试API接口。本文实现的系统具备以下安全特性：</p>
<ol>
<li>用户认证隔离数据访问</li>
<li>所有输入参数自动验证</li>
<li>数据库操作防注入</li>
<li>细粒度的权限控制</li>
</ol>
<p>余下文章内容请点击跳转至 个人博客页面 或者 扫码关注或者微信搜一搜：<code>编程智域 前端至全栈交流与成长</code>，阅读完整的文章：<a href="https://blog.cmdragon.cn/posts/9f5729db84ef/" target="_blank" rel="noopener nofollow">FastAPI与Tortoise-ORM开发的神奇之旅 | cmdragon's Blog</a></p>
<h2 id="往期文章归档">往期文章归档：</h2>
<ul>
<li><a href="https://blog.cmdragon.cn/posts/62012cf83e26/" target="_blank" rel="noopener nofollow">DDD分层设计与异步职责划分：让你的代码不再“异步”混乱 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/c195d6c4d0b5/" target="_blank" rel="noopener nofollow">异步数据库事务锁：电商库存扣减的防超卖秘籍 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/f0e851eb1a74/" target="_blank" rel="noopener nofollow">FastAPI中的复杂查询与原子更新指南 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/512d338e0833/" target="_blank" rel="noopener nofollow">深入解析Tortoise-ORM关系型字段与异步查询 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/7649fa5d5b04/" target="_blank" rel="noopener nofollow">FastAPI与Tortoise-ORM模型配置及aerich迁移工具 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/c9824156400c/" target="_blank" rel="noopener nofollow">异步IO与Tortoise-ORM的数据库 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/74b39391a524/" target="_blank" rel="noopener nofollow">FastAPI数据库连接池配置与监控 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/f05753c1a8af/" target="_blank" rel="noopener nofollow">分布式事务在点赞功能中的实现 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/644d88ac6ff1/" target="_blank" rel="noopener nofollow">Tortoise-ORM级联查询与预加载性能优化 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/d7fcb94d965b/" target="_blank" rel="noopener nofollow">使用Tortoise-ORM和FastAPI构建评论系统 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/a344f0dfbdbf/" target="_blank" rel="noopener nofollow">分层架构在博客评论功能中的应用与实现 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/823cb13844de/" target="_blank" rel="noopener nofollow">深入解析事务基础与原子操作原理 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/0df919d7ff39/" target="_blank" rel="noopener nofollow">掌握Tortoise-ORM高级异步查询技巧 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/2c8d6d6e8c53/" target="_blank" rel="noopener nofollow">FastAPI与Tortoise-ORM实现关系型数据库关联 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/4b40fac9a431/" target="_blank" rel="noopener nofollow">Tortoise-ORM与FastAPI集成：异步模型定义与实践 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/ec70904aad68/" target="_blank" rel="noopener nofollow">异步编程与Tortoise-ORM框架 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/7112d376156d/" target="_blank" rel="noopener nofollow">FastAPI数据库集成与事务管理 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/ac94f11d8558/" target="_blank" rel="noopener nofollow">FastAPI与SQLAlchemy数据库集成 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/b64fbd2d819d/" target="_blank" rel="noopener nofollow">FastAPI与SQLAlchemy数据库集成与CRUD操作 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/05564696277e/" target="_blank" rel="noopener nofollow">FastAPI与SQLAlchemy同步数据库集成 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/dc3f1adccf0a/" target="_blank" rel="noopener nofollow">SQLAlchemy 核心概念与同步引擎配置详解 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/5c3e3f847f09/" target="_blank" rel="noopener nofollow">FastAPI依赖注入性能优化策略 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/d1b6b80e8665/" target="_blank" rel="noopener nofollow">FastAPI安全认证中的依赖组合 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/f5d382bc5354/" target="_blank" rel="noopener nofollow">FastAPI依赖注入系统及调试技巧 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/88761b137b82/" target="_blank" rel="noopener nofollow">FastAPI依赖覆盖与测试环境模拟 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/ef1282d9c9b8/" target="_blank" rel="noopener nofollow">FastAPI中的依赖注入与数据库事务管理 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/8b8658ec8dab/" target="_blank" rel="noopener nofollow">FastAPI依赖注入实践：工厂模式与实例复用的优化策略 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/0b359086bd7d/" target="_blank" rel="noopener nofollow">FastAPI依赖注入：链式调用与多级参数传递 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/ef71d1b7ddfb/" target="_blank" rel="noopener nofollow">FastAPI依赖注入：从基础概念到应用 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/1b01bf90607f/" target="_blank" rel="noopener nofollow">FastAPI中实现动态条件必填字段的实践 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/cda2eb13bf31/" target="_blank" rel="noopener nofollow">FastAPI中Pydantic异步分布式唯一性校验 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/18ef84c3b234/" target="_blank" rel="noopener nofollow">掌握FastAPI与Pydantic的跨字段验证技巧 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/9b9eb7489096/" target="_blank" rel="noopener nofollow">FastAPI中的Pydantic密码验证机制与实现 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/6e2a1c070e32/" target="_blank" rel="noopener nofollow">深入掌握FastAPI与OpenAPI规范的高级适配技巧 | cmdragon's Blog</a></li>
<li><a href="https://tools.cmdragon.cn/sitemap_index.xml" target="_blank" rel="noopener nofollow">XML Sitemap</a></li>
<li></li>
</ul>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.05699808963888889" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-05 00:58">2025-05-05 00:58</span>&nbsp;
<a href="https://www.cnblogs.com/Amd794">Amd794</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18859698);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18859698', targetLink: 'https://www.cnblogs.com/Amd794/p/18859698', title: 'FastAPI与Tortoise-ORM开发的神奇之旅' })">举报</a>
</div>
        