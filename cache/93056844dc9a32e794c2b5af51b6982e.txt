<!----> <meta itemprop="headline" content="跟着 Vue团队大佬学习在 Vue3 中二次封装组件"> <meta itemprop="keywords" content="前端"> <meta itemprop="datePublished" content="2025-06-15T18:06:31.000Z"> <meta itemprop="image" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-128.png~tplv-t2oaga2asx-image.image"> <div itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><meta itemprop="name" content="陳住气"> <meta itemprop="url" content="https://juejin.cn/user/4195392104437758"></div> <div itemprop="publisher" itemscope="itemscope" itemtype="http://schema.org/Organization"><meta itemprop="name" content="掘金"> <div itemprop="logo" itemscope="itemscope" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-white-180.png~tplv-t2oaga2asx-image.image"> <meta itemprop="width" content="180"> <meta itemprop="height" content="180"></div></div> <h1 class="article-title" data-v-61fb5e44="">
            跟着 Vue团队大佬学习在 Vue3 中二次封装组件
            <!----> <!----></h1> <div class="author-info-block block-hidden" data-v-61fb5e44=""><div class="author-info-box" data-v-61fb5e44=""><div class="author-name" data-v-61fb5e44=""><a href="/user/4195392104437758/posts" target="_blank" rel="" class="jj-link username username ellipsis" data-v-65b50b51="" data-v-292f6e48="" data-v-61fb5e44=""><span class="name" style="max-width:160px;" data-v-65b50b51="" data-v-292f6e48="">
    陳住气
  </span> <!----> <!----> <!----> </a></div> <div class="meta-box" data-v-61fb5e44=""><time datetime="2025-06-15T18:06:31.000Z" title="Sun Jun 15 2025 18:06:31 GMT+0000 (Coordinated Universal Time)" class="time" data-v-61fb5e44="">
                    2025-06-15
                  </time> <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" class="read-icon" data-v-61fb5e44=""><path d="M7.90078 2.80078C4.49278 2.80078 1.74745 6.11672 0.800781 7.77469C1.74745 9.58339 4.49278 13.2008 7.90078 13.2008C11.3088 13.2008 14.0541 9.58339 15.0008 7.77469C14.0541 6.11672 11.3088 2.80078 7.90078 2.80078Z" stroke="currentColor" data-v-61fb5e44=""></path><circle cx="7.89922" cy="8.00078" r="2.2" stroke="currentColor" data-v-61fb5e44=""></circle></svg> <span class="views-count" data-v-61fb5e44="">
                    4,015
                  </span> <span class="read-time" data-v-61fb5e44=""><svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" data-v-61fb5e44=""><rect width="16" height="16" fill="none" data-v-61fb5e44=""></rect><circle cx="8" cy="8" r="5.65625" stroke="#8A919F" data-v-61fb5e44=""></circle><path d="M7.69141 5.18652V8.30924H10.8141" stroke="#8A919F" stroke-linecap="round" stroke-linejoin="round" data-v-61fb5e44=""></path></svg>
                    阅读4分钟
                  </span> <!----></div></div> <div style="flex:1;" data-v-61fb5e44=""></div> <!----> <!----></div> <!----> <!----> <!----> <!----> <div id="article-root" itemprop="articleBody" class="main" data-v-61fb5e44=""><div class="article-viewer markdown-body result"><h2 data-id="heading-0">参考视频：</h2>
<ul>
<li><a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1Kz421e7K1" target="_blank" title="https://www.bilibili.com/video/BV1Kz421e7K1" ref="nofollow noopener noreferrer">《组件二次封装时不一样的插槽传递方式》 B站视频 - 远方os</a></li>
<li><a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1soMtz4ExE" target="_blank" title="https://www.bilibili.com/video/BV1soMtz4ExE" ref="nofollow noopener noreferrer">《组件二次封装-终极版》 B站视频 - 远方os</a></li>
<li><a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV166421Z7nU" target="_blank" title="https://www.bilibili.com/video/BV166421Z7nU" ref="nofollow noopener noreferrer">《h函数的使用》 B站视频 - 远方os</a></li>
<li><a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1Zm421V7rm" target="_blank" title="https://www.bilibili.com/video/BV1Zm421V7rm" ref="nofollow noopener noreferrer">《h函数的使用场景》 B站视频 - 远方os</a></li>
</ul>
<h2 data-id="heading-1">从二次封装 el-input 开始 🧀</h2>
<h3 data-id="heading-2">要解决的问题</h3>
<ol>
<li>props 如何穿透出去？</li>
<li>slots 如何穿透出去 ？</li>
<li>组件的方法如何暴露出去 ？</li>
<li>如何让 ts 类型完备 ？</li>
</ol>
<h3 data-id="heading-3">处理 props</h3>
<h4 data-id="heading-4">传递 $attrs</h4>
<p>为了保证组件原有<strong>属性</strong>和事件能被正常传递，我们可以使用 <code>mergeProps</code> 合并 $attrs 和重写默认属性或新增 <code>props</code> 对象，绑定到原有组件:</p>
<pre><code class="hljs language-html" lang="html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"ts"</span>&gt;</span><span class="javascript">
<span class="hljs-keyword">import</span> { mergeProps } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>
<span class="hljs-keyword">import</span> type { <span class="hljs-title class_">ExtractPublicPropTypes</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">"vue"</span>
<span class="hljs-keyword">import</span> type { <span class="hljs-title class_">InputProps</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'element-plus'</span>
<span class="hljs-keyword">const</span> props = defineProps&lt;<span class="hljs-title class_">ExtractPublicPropTypes</span>&lt;<span class="hljs-title class_">InputProps</span>&gt;&gt;()
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
 
<span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>
  <span class="hljs-comment">&lt;!-- &lt;el-input v-bind="{...$attrs, ...props}"&gt;&lt;/el-input&gt; --&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">v-bind</span>=<span class="hljs-string">"mergeProps($attrs, props)"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-input</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>
</code></pre>
<ol>
<li><code>$attrs</code> 包含所有传入的 props 和 emit 事件；</li>
<li>直接使用 <code>$attrs</code> 是没有 TS 类型提示的，所以我们要声明一个 <code>props</code>，至于 props  类型一般组件库都会导出。</li>
</ol>
<details class="lake-collapse"><summary id="user-content-u0b8f15a4"><strong><span class="ne-text"> ▶️ ExtractPublicPropTypes 类型是什么作用 ？ （点击展开）</span></strong></summary><p id="user-content-ua4fd4c16" class="ne-p"><span class="ne-text">其实，在上面的代码中，对于 props 的 TS 类型定义，一开始其实我使用的是 </span><code class="ne-code"><strong><span class="ne-text">Partial&lt;InputProps&gt;</span></strong></code><span class="ne-text"> ，把所有属性都变成可选，这样父组件使用时类型提示才不会报错，但是这样并不严谨，如果组件里有 props  属性是必填的，那可能不会有完备的类型提示。</span></p><hr id="user-content-rhfjP" class="ne-hr"><p id="user-content-u02d96422" class="ne-p"><span class="ne-text">对于 TypeScript 如果需要获取 Props 的类型，那就需要用到 Vue 的一个辅助类型</span><code class="ne-code"><strong><span class="ne-text">ExtractPropTypes</span></strong></code><span class="ne-text">，而在 element-plus 源码中， 大部分组件的 props 是用 </span><code class="ne-code"><span class="ne-text">ExtractPropTypes&lt;typeof inputProps&gt;</span></code><span class="ne-text"> 抽离的（</span><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Felement-plus%2Felement-plus%2Fblob%2Fdev%2Fpackages%2Fcomponents%2Finput%2Fsrc%2Finput.ts%23L171" data-href="https://github.com/element-plus/element-plus/blob/dev/packages/components/input/src/input.ts#L171" target="_blank" class="ne-link" title="https://github.com/element-plus/element-plus/blob/dev/packages/components/input/src/input.ts#L171" ref="nofollow noopener noreferrer"><span class="ne-text">源码链接 </span><span class="ne-text">🔗</span></a><span class="ne-text">）。</span></p><hr id="user-content-RuQgZ" class="ne-hr"><p id="user-content-u76edd17a" class="ne-p"><span class="ne-text">这里是我们属于二次封装组件，所以我们是外部引用 （父组件），对于外部引用，我们就使用 </span><code class="ne-code"><strong><span class="ne-text">ExtractPublicPropTypes</span></strong></code><span class="ne-text">。</span></p><p id="user-content-u3e4a1a86" class="ne-p"><span class="ne-text"></span></p><p id="user-content-u6e67bc85" class="ne-p"><strong><span class="ne-text">参考链接
    </span></strong><strong><span class="ne-text">🔗</span></strong></p><ul class="ne-ul"><li id="user-content-u23cf9a59" data-lake-index-type="0"><span id="user-content-Ro8Wd" class="ne-yuque-inline"><a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.yuque.com%2Fxianzhe-lce4g%2Fhf5btd%2Fclst4gguzbztig0f%3FsingleDoc%23C94WH" title="https://www.yuque.com/xianzhe-lce4g/hf5btd/clst4gguzbztig0f?singleDoc#C94WH" target="_blank" ref="nofollow noopener noreferrer">『精』Vue 组件如何模块化抽离Props</a></span><span class="ne-text"> （强烈推荐阅读）</span></li><li id="user-content-uf046abb2" data-lake-index-type="0"><span class="ne-text">Vue 官方文档 - TypeScript 工具类型 -  </span><a href="https://link.juejin.cn?target=https%3A%2F%2Fcn.vuejs.org%2Fapi%2Futility-types%23extractpublicproptypes" data-href="https://cn.vuejs.org/api/utility-types#extractpublicproptypes" target="_blank" class="ne-link" title="https://cn.vuejs.org/api/utility-types#extractpublicproptypes" ref="nofollow noopener noreferrer"><span class="ne-text">ExtractPublicPropTypes&lt;T&gt;</span></a></li></ul></details>
<h4 data-id="heading-5">覆盖默认值</h4>
<p>我们可以使用 <code>withDefaults</code> 给 props  设置默认值，从而达到覆盖原组件默认值的效果</p>
<pre><code class="hljs language-html" lang="html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"ts"</span>&gt;</span><span class="javascript">
<span class="hljs-keyword">import</span> { mergeProps } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>
<span class="hljs-keyword">import</span> type { <span class="hljs-title class_">ExtractPublicPropTypes</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">"vue"</span>
<span class="hljs-keyword">import</span> type { <span class="hljs-title class_">InputProps</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">ElInputProps</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'element-plus'</span>

type <span class="hljs-title class_">InputProps</span> = <span class="hljs-title class_">ExtractPublicPropTypes</span>&lt;<span class="hljs-title class_">ElInputProps</span>&gt; &amp; {
  <span class="hljs-comment">/* 可以在此处添加新属性 */</span>
}

<span class="hljs-keyword">const</span> props = <span class="hljs-title function_">withDefaults</span>(defineProps&lt;<span class="hljs-title class_">InputProps</span>&gt;(), {
  <span class="hljs-attr">clearable</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 改变el-input clearable 默认值</span>
	 <span class="hljs-comment">/* 可以在此处为新属性添加默认值 */</span>
})
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
 
<span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">v-bind</span>=<span class="hljs-string">"mergeProps($attrs, props)"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-input</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>
</code></pre>
<h3 data-id="heading-6">处理 slots</h3>
<h4 data-id="heading-7">常规版本</h4>
<p>我们以 element-plus  <a href="https://link.juejin.cn?target=https%3A%2F%2Felement-plus.org%2Fzh-CN%2Fcomponent%2Finput.html" target="_blank" title="https://element-plus.org/zh-CN/component/input.html" ref="nofollow noopener noreferrer">Input 输入框</a> 组件为例，为了向子组件传递插槽，常规的做法 , 遍历 <code>$slots</code>来实现，不论是封装什么组件都可以无脑使用 <code>v-for v-for="(_, name) in $slots"</code>，即使组件插槽相互有逻辑也不会被影响。</p>
<pre><code class="hljs language-html" lang="html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"ts"</span>&gt;</span><span class="javascript">
<span class="hljs-keyword">import</span> { mergeProps } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>
<span class="hljs-keyword">import</span> type { <span class="hljs-title class_">ExtractPublicPropTypes</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">"vue"</span>
<span class="hljs-keyword">import</span> type { <span class="hljs-title class_">InputProps</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">ElInputProps</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'element-plus'</span>
  
type <span class="hljs-title class_">InputProps</span> = <span class="hljs-title class_">ExtractPublicPropTypes</span>&lt;<span class="hljs-title class_">ElInputProps</span>&gt; &amp; {}
<span class="hljs-keyword">const</span> props = <span class="hljs-title function_">withDefaults</span>(defineProps&lt;<span class="hljs-title class_">InputProps</span>&gt;(),{})

</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
 
<span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">v-bind</span>=<span class="hljs-string">"mergeProps($attrs, props)"</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"(_, name) in $slots"</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">"name"</span> #[<span class="hljs-attr">name</span>]=<span class="hljs-string">"slotProps"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">:name</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">v-bind</span>=<span class="hljs-string">"slotProps"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span>
      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">el-input</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>
</code></pre>
<p><code>#[name]="slotProps"</code> 等同于 <code>v-slot:[name]="slotProps"</code> 。</p>
<p><strong>关于遍历 $slot 写法问题</strong></p>
<p><code>$slots</code> 是个Proxy 对象，下面的写法均可:</p>
<pre><code class="hljs language-html" lang="html">v-for="(_, name) in $slots"
v-for="(_, name) of $slots"
v-for="(_, name) Object.keys($slots)"
</code></pre>
<p>示例：在父组件使用， 并传递 <code>prepend</code>、<code>append</code> 插槽：</p>
<pre><code class="hljs language-html" lang="html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>
       <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>👨 父组件<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span>
       <span class="hljs-tag">&lt;<span class="hljs-name">YiInput</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"inputRef"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"msg"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"请输入内容"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">append</span>&gt;</span>
               <span class="hljs-tag">&lt;<span class="hljs-name">el-icon</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">Search</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-icon</span>&gt;</span>
            <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">suffix</span>&gt;</span>
               <span class="hljs-tag">&lt;<span class="hljs-name">el-icon</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">User</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-icon</span>&gt;</span>
            <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">YiInput</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"ts"</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript">
<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Search</span>, <span class="hljs-title class_">User</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'@element-plus/icons-vue'</span>
<span class="hljs-keyword">import</span> type { <span class="hljs-title class_">InputInstance</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'element-plus'</span>

<span class="hljs-keyword">const</span> inputRef = ref&lt;<span class="hljs-title class_">InputInstance</span>&gt;()
<span class="hljs-keyword">const</span> msg = <span class="hljs-title function_">ref</span>(<span class="hljs-string">'Hello world'</span>)

<span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {
  inputRef.<span class="hljs-property">value</span>?.<span class="hljs-title function_">focus</span>() <span class="hljs-comment">// 自动聚焦</span>
}, <span class="hljs-number">3000</span>)
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
</code></pre>
<h4 data-id="heading-8">使用 h 函数 （花活版🌸）</h4>
<pre><code class="hljs language-html" lang="html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"ts"</span>&gt;</span><span class="javascript">
<span class="hljs-keyword">import</span> { <span class="hljs-title class_">ElInput</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">"element-plus"</span>
<span class="hljs-keyword">import</span> type { <span class="hljs-title class_">ExtractPublicPropTypes</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">"vue"</span>
<span class="hljs-keyword">import</span> type { <span class="hljs-title class_">InputProps</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">ElInputProps</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'element-plus'</span>
  
type <span class="hljs-title class_">InputProps</span> = <span class="hljs-title class_">ExtractPublicPropTypes</span>&lt;<span class="hljs-title class_">ElInputProps</span>&gt; &amp; {}
<span class="hljs-keyword">const</span> props = <span class="hljs-title function_">withDefaults</span>(defineProps&lt;<span class="hljs-title class_">InputProps</span>&gt;(),{})
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
 
<span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">:is</span>=<span class="hljs-string">"h(ElInput, { ...$attrs, ...props }, $slots)"</span> /&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>
</code></pre>
<h4 data-id="heading-9">使用 Vue 3.3+ 新增加辅助函数 （ 花活版 🌸 ）</h4>
<p>在 Vue 中，我们可以在模板中直接通过 <code>$slots</code> 和 <code>$attrs</code> 来访问它们、  在 Vue 3.4  版本之后，可以分别用 <code>useSlots</code> 和 <code>useAttrs</code> 两个辅助函数：</p>
<pre><code class="hljs language-html" lang="html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"ts"</span>&gt;</span><span class="javascript">
<span class="hljs-keyword">import</span> { h, mergeProps, useAttrs, useSlots } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>
<span class="hljs-keyword">import</span> { <span class="hljs-title class_">ElInput</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">"element-plus"</span>
<span class="hljs-keyword">import</span> type { <span class="hljs-title class_">ExtractPublicPropTypes</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">"vue"</span>
<span class="hljs-keyword">import</span> type { <span class="hljs-title class_">InputProps</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">ElInputProps</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'element-plus'</span>
  
type <span class="hljs-title class_">InputProps</span> = <span class="hljs-title class_">ExtractPublicPropTypes</span>&lt;<span class="hljs-title class_">ElInputProps</span>&gt; &amp; {}

<span class="hljs-keyword">const</span> props = <span class="hljs-title function_">withDefaults</span>(defineProps&lt;<span class="hljs-title class_">InputProps</span>&gt;(),{})
<span class="hljs-keyword">const</span> attrs = <span class="hljs-title function_">useAttrs</span>()
<span class="hljs-keyword">const</span> slots = <span class="hljs-title function_">useSlots</span>()
<span class="hljs-keyword">const</span> $props = <span class="hljs-title function_">mergeProps</span>(attrs, props)

</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
 
<span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>
   <span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">:is</span>=<span class="hljs-string">"h(ElInput, $props, slots)"</span> /&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>
</code></pre>
<details class="lake-collapse">
    <summary id="user-content-u57ace913"><strong><span class="ne-text"> ▶️ component 组件为什么可以传入 h 函数 ？ （点击展开）</span></strong></summary><p id="user-content-u9a63dbbe" class="ne-p"><span class="ne-text">h 函数用于创建虚拟 DMO 节点（vnode），is 属性接收到一个函数时，也就是</span><code class="ne-code"><span class="ne-text">h(ElInput, $attrs, $slots)</span></code><span class="ne-text"> ，会立即执行并返回一个 VNode，这个 VNode 描述了如何渲染 ElInput 组件。</span></p></details>
<h3 data-id="heading-10">处理 ref</h3>
<p><strong>问题： 封装时怎么如何导出原组件实例方法？</strong></p>
<p>在二次封装子组件时，为了让父组件能够获取子组件的 ref， 并能够调用一些原有的方法，我们还需要将子组件的方法暴露出去。</p>
<p>对于这个需求，网上方法五花八门，但是在 Vue3 的 setup 模板中，我个人认为，<strong>其实并没有特别优雅的方式</strong>。</p>
<h4 data-id="heading-11">1. 向父组件暴露 ref 函数</h4>
<p>思路：创建一个 <code>getRef</code> 的函数，把 <code>ref</code> 暴露出去, 父组件调用 <code>getRef</code> 方法后在执行子组件方法的调用：</p>
<pre><code class="hljs language-html" lang="html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"ts"</span>&gt;</span><span class="javascript">
<span class="hljs-keyword">import</span> { ref } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>

<span class="hljs-keyword">const</span> inputRef = <span class="hljs-title function_">ref</span>()
<span class="hljs-keyword">const</span> <span class="hljs-title function_">getRef</span> = (<span class="hljs-params"></span>) =&gt; inputRef.<span class="hljs-property">value</span>

<span class="hljs-title function_">defineExpose</span>({ getRef })
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
 
<span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>
   <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"rawRef"</span> <span class="hljs-attr">v-bind</span>=<span class="hljs-string">"{...$attrs, ...props}"</span> /&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>
</code></pre>
<h4 data-id="heading-12">2. 使用 Proxy 代理</h4>
<p>另一个思路，我们可以使用 <code>Proxy</code> 代理暴露出去的方法：</p>
<pre><code class="hljs language-html" lang="html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"ts"</span>&gt;</span><span class="javascript">
<span class="hljs-keyword">import</span> { ref } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>
<span class="hljs-keyword">const</span> rawRef = <span class="hljs-title function_">ref</span>()

<span class="hljs-title function_">defineExpose</span>(
  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>({},
    {
      <span class="hljs-attr">get</span>: <span class="hljs-function">(<span class="hljs-params">_target, key</span>) =&gt;</span> rawRef.<span class="hljs-property">value</span>?.[key],
      <span class="hljs-comment">// 因为代理的是一个空对象，用 has 判断一下，访问的属性是否存在</span>
      <span class="hljs-attr">has</span>: <span class="hljs-function">(<span class="hljs-params">_target, key</span>) =&gt;</span> key <span class="hljs-keyword">in</span> (rawRef.<span class="hljs-property">value</span> || {})
    }
  ) 
)
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
 
<span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"rawRef"</span> <span class="hljs-attr">v-bind</span>=<span class="hljs-string">"{...$attrs, ...props}"</span> /&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>
</code></pre>
<ul>
<li><a href="https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal_Objects%2FProxy%2FProxy%2Fhas" target="_blank" title="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/has" ref="nofollow noopener noreferrer">new Proxy().has | MDN</a></li>
</ul>
<h4 data-id="heading-13">3. 使用 vm.exposed</h4>
<pre><code class="hljs language-html" lang="html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"ts"</span>&gt;</span><span class="javascript">
<span class="hljs-keyword">const</span> props = <span class="hljs-title function_">defineProps</span>()
<span class="hljs-keyword">const</span> vm = <span class="hljs-title function_">getCurrentInstance</span>()

<span class="hljs-keyword">const</span> <span class="hljs-title function_">changeRef</span> = (<span class="hljs-params">inputInstance</span>) =&gt; {
	vm!.<span class="hljs-property">exposed</span> = inputInstance || {}
	<span class="hljs-comment">// 其实父组件不是直接拿到这个 exposed 的，拿的是子组件的代理对象,</span>
  <span class="hljs-comment">// 不能只改变 exposed 的值，还要改变 exposeProxy 的值</span>
	vm!.<span class="hljs-property">exposeProxy</span> = inputInstance || {}
	<span class="hljs-comment">// 上面代码也可以直接写成: vm!.exposeProxy = vm!.exposed = inputInstance || {}</span>
}
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
 
<span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>
   <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"changeRef"</span> <span class="hljs-attr">v-bind</span>=<span class="hljs-string">"{...$attrs, ...props}"</span> /&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>
</code></pre>
<p><strong>Why ？</strong></p>
<p>我们添加一个 defineExpose 导出 <code>{ a: 1, b: 2 }</code>，然后打印 <code>vm.exposed</code> 和 changeRef 方法中返回的 <code>value</code> ：</p>
<pre><code class="hljs language-html" lang="html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"ts"</span>&gt;</span><span class="javascript">
<span class="hljs-keyword">import</span> { getCurrentInstance } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>

<span class="hljs-keyword">const</span> vm = <span class="hljs-title function_">getCurrentInstance</span>()
<span class="hljs-keyword">const</span> props = <span class="hljs-title function_">defineProps</span>()

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">'vm===&gt;'</span>,vm.<span class="hljs-property">exposed</span>)

<span class="hljs-keyword">const</span> <span class="hljs-title function_">changeRef</span> = (<span class="hljs-params">inputInstance</span>) =&gt; {
 <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">'value===&gt;'</span>,inputInstance)
 vm.<span class="hljs-property">exposed</span> = inputInstance ?? {}
}

<span class="hljs-title function_">defineExpose</span>({<span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>})
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">ElInput</span> <span class="hljs-attr">:ref</span>=<span class="hljs-string">"changeRef"</span> <span class="hljs-attr">v-bind</span>=<span class="hljs-string">"{...$attrs, ...props}"</span> &gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"(_, name) of $slots"</span> #[<span class="hljs-attr">name</span>]=<span class="hljs-string">"scop"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">:name</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">v-bind</span>=<span class="hljs-string">"scop"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">ElInput</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>
</code></pre>
<p>我们看看控制台打印是什么</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/417e619380ad47ae9dea2e9771a26e7a~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg6Zmz5L2P5rCU:q75.awebp?rk3s=f64ab15b&amp;x-expires=1753864043&amp;x-signature=V%2BgHUtAlll1lnXnYqmXvTdfwTDQ%3D" alt="iShot_2025-06-15_02.31.52.png" loading="lazy"></p>
<ul>
<li>在子组件的 ref 传递一个函数 <code>changeRef</code> ，在这个函数中，可以拿到原先组件（el-input）的对外暴露的对象(方法)；</li>
<li><code>getCurrentInstance</code> 获取的是当前组件的实例， <code>vm.exposed</code> 拿到的是 defineExpose 导出的 <code>{ a: 1, b: 2 }</code></li>
</ul>
<p>也就是说！<code>vm.exposed</code> 其实就是当前组件 <code>defineExpose({})</code> 对外抛出的对象，所以我们只要在 <code>changeRef</code> 函数中，设置 <code>vm.exposed = inputInstance</code> ，就可以再次把 el-input 对外暴露的方法暴露给父组件。</p>
<p>推荐阅读：<a href="https://link.juejin.cn?target=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F528017250" target="_blank" title="https://zhuanlan.zhihu.com/p/528017250" ref="nofollow noopener noreferrer">巧妙使用 Vue.extend 继承组件实现 el-table 双击可编辑 ｜ 知乎 </a>，回顾一下 Vue 2 中实例的高可玩性。</p>
<h3 data-id="heading-14">处理 Typescript 类型</h3>
<h4 data-id="heading-15">1. 完善 props 类型提示</h4>
<pre><code class="hljs language-ts" lang="ts"><span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> { <span class="hljs-title class_">InputProps</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">ElInputProps</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'element-plus'</span>
<span class="hljs-keyword">const</span> props = <span class="hljs-title function_">withDefaults</span>(defineProps&lt;<span class="hljs-title class_">ElInputProps</span>&gt;(), {})
</code></pre>
<h4 data-id="heading-16">2. 完善 $slots 类型提示</h4>
<pre><code class="hljs language-ts" lang="ts"><span class="hljs-keyword">import</span> { <span class="hljs-title class_">ElInput</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'element-plus'</span>
<span class="hljs-keyword">type</span> <span class="hljs-title class_">InputSlots</span> = <span class="hljs-title class_">InstanceType</span>&lt;<span class="hljs-keyword">typeof</span> <span class="hljs-title class_">ElInput</span>&gt;[<span class="hljs-string">'$slots'</span>] 
defineSlots&lt;<span class="hljs-title class_">InputSlots</span>&gt;()
</code></pre>
<h4 data-id="heading-17">3. 完善 $expose 类型提示</h4>
<p>这里的 <code>$expose</code> 指的是组件实例对外暴露的方法，如：Input 组件的 emit 事件（@foucs、@blur）等。</p>
<pre><code class="hljs language-ts" lang="ts"><span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> { <span class="hljs-title class_">InputInstance</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">ElInputInstance</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'element-plus'</span>
defineExpose&lt;<span class="hljs-title class_">ElInputInstance</span>&gt;()
</code></pre>
<h3 data-id="heading-18">终极版本 （TS 类型完备）</h3>
<h4 data-id="heading-19">基础版</h4>
<p>使用 proxy 暴露方法 :</p>
<pre><code class="hljs language-html" lang="html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"ts"</span>&gt;</span><span class="javascript">
<span class="hljs-keyword">import</span> type { <span class="hljs-title class_">InputInstance</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">ElInputInstance</span>, <span class="hljs-title class_">InputProps</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">ElInputProps</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'element-plus'</span>
<span class="hljs-keyword">import</span> { <span class="hljs-title class_">ElInput</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'element-plus'</span>
<span class="hljs-keyword">import</span> { mergeProps } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>

type <span class="hljs-title class_">InputProps</span> = <span class="hljs-title class_">ExtractPublicPropTypes</span>&lt;<span class="hljs-title class_">ElInputProps</span>&gt; &amp; { <span class="hljs-comment">/* 可以在此处添加新的 props */</span> }
type <span class="hljs-title class_">InputSlots</span> = <span class="hljs-title class_">InstanceType</span>&lt;<span class="hljs-keyword">typeof</span> <span class="hljs-title class_">ElInput</span>&gt;[<span class="hljs-string">'$slots'</span>] &amp; {<span class="hljs-comment">/* 可以在此处添加新的 slot */</span>}
type <span class="hljs-title class_">InputInstance</span> = <span class="hljs-title class_">ElInputInstance</span> &amp; {<span class="hljs-comment">/* 可以在此处添加新的组件实例方法 */</span>}

<span class="hljs-keyword">const</span> props = <span class="hljs-title function_">withDefaults</span>(defineProps&lt;<span class="hljs-title class_">InputProps</span>&gt;(), {
  <span class="hljs-attr">clearable</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 改变el-input clearable 默认值</span>
  <span class="hljs-comment">/* 可以在此处为新属性添加默认值 */</span>
})

<span class="hljs-keyword">const</span> rawRef = ref&lt;<span class="hljs-title class_">InputInstance</span>&gt;()

defineSlots&lt;<span class="hljs-title class_">InputSlots</span>&gt;()
defineExpose&lt;<span class="hljs-title class_">InputInstance</span>&gt;(
  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(
    {},
    {
      <span class="hljs-attr">get</span>: <span class="hljs-function">(<span class="hljs-params">_target, key</span>) =&gt;</span> rawRef.<span class="hljs-property">value</span>?.[key <span class="hljs-keyword">as</span> keyof <span class="hljs-title class_">InputInstance</span>],
      <span class="hljs-attr">has</span>: <span class="hljs-function">(<span class="hljs-params">_target, key</span>) =&gt;</span> key <span class="hljs-keyword">in</span> (rawRef.<span class="hljs-property">value</span> || {}),
    },
  ) <span class="hljs-keyword">as</span> <span class="hljs-title class_">InputInstance</span>,
)
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">ElInput</span> <span class="hljs-attr">v-bind</span>=<span class="hljs-string">"mergeProps($attrs, props)"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"rawRef"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"e-input"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"(_, name) in $slots"</span> #[<span class="hljs-attr">name</span>]=<span class="hljs-string">"scope"</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">:name</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">v-bind</span>=<span class="hljs-string">"scope"</span> /&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">ElInput</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"scss"</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="css">
  <span class="hljs-selector-class">.e-input</span> {
  <span class="hljs-attribute">min-width</span>: <span class="hljs-number">190px</span>; // 添加新样式
  // :<span class="hljs-built_in">deep</span>(xxx) {} 覆盖原有样式
}
</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>
</code></pre>
<h4 data-id="heading-20">h 函数版</h4>
<pre><code class="hljs language-html" lang="html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"ts"</span>&gt;</span><span class="javascript">
<span class="hljs-keyword">import</span> type { <span class="hljs-title class_">InputInstance</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">ElInputInstance</span>, <span class="hljs-title class_">InputProps</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">ElInputProps</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'element-plus'</span>
<span class="hljs-keyword">import</span> type { <span class="hljs-title class_">ExtractPublicPropTypes</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>
<span class="hljs-keyword">import</span> { <span class="hljs-title class_">ElInput</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'element-plus'</span>
<span class="hljs-keyword">import</span> { h } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>

type <span class="hljs-title class_">InputProps</span> = <span class="hljs-title class_">ExtractPublicPropTypes</span>&lt;<span class="hljs-title class_">ElInputProps</span>&gt; &amp; { }
type <span class="hljs-title class_">InputSlots</span> = <span class="hljs-title class_">InstanceType</span>&lt;<span class="hljs-keyword">typeof</span> <span class="hljs-title class_">ElInput</span>&gt;[<span class="hljs-string">'$slots'</span>] &amp; {}
type <span class="hljs-title class_">InputInstance</span> = <span class="hljs-title class_">ElInputInstance</span> &amp; {}

<span class="hljs-keyword">const</span> props = <span class="hljs-title function_">withDefaults</span>(defineProps&lt;<span class="hljs-title class_">InputProps</span>&gt;(), {})

<span class="hljs-keyword">const</span> vm = <span class="hljs-title function_">getCurrentInstance</span>()
<span class="hljs-keyword">const</span> <span class="hljs-title function_">changeRef</span> = (<span class="hljs-params">inputInstance: InputInstance</span>) =&gt; vm!.<span class="hljs-property">exposeProxy</span> = vm!.<span class="hljs-property">exposed</span> = inputInstance || {}

defineSlots&lt;<span class="hljs-title class_">InputSlots</span>&gt;() <span class="hljs-comment">// TS插槽类型提示</span>
defineExpose&lt;<span class="hljs-title class_">InputInstance</span>&gt;() <span class="hljs-comment">//  实例类型提示（组件上的事件）</span>
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">:is</span>=<span class="hljs-string">"h(ElInput, { ...$attrs, ...props, ref: changeRef as any }, $slots)"</span>/&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>
</code></pre>
<p>使用示例：</p>
<pre><code class="hljs language-html" lang="html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>👨 父组件<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">YiInput</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"inputRef"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"msg"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"请输入内容"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">append</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">el-icon</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">Search</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-icon</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">suffix</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">el-icon</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">User</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-icon</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">YiInput</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"ts"</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript">
<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Search</span>, <span class="hljs-title class_">User</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'@element-plus/icons-vue'</span>
<span class="hljs-keyword">import</span> type { <span class="hljs-title class_">InputInstance</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'element-plus'</span>
<span class="hljs-keyword">const</span> inputRef = ref&lt;<span class="hljs-title class_">InputInstance</span>&gt;()
<span class="hljs-keyword">const</span> msg = <span class="hljs-title function_">ref</span>(<span class="hljs-string">'Hello world'</span>)

<span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {
	inputRef.<span class="hljs-property">value</span>?.<span class="hljs-title function_">focus</span>() <span class="hljs-comment">// 自动聚焦</span>
	inputRef.<span class="hljs-property">value</span>?.<span class="hljs-title function_">clear</span>()
}, <span class="hljs-number">3000</span>)
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
</code></pre>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/ca6620201cc842d8b6968cdf8a617961~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg6Zmz5L2P5rCU:q75.awebp?rk3s=f64ab15b&amp;x-expires=1753864043&amp;x-signature=HwrUpOFoVthkf%2BGXg6xWH1V3PE0%3D" alt="" loading="lazy"></p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/7c51c6386a9f472d812e921374c601f3~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg6Zmz5L2P5rCU:q75.awebp?rk3s=f64ab15b&amp;x-expires=1753864043&amp;x-signature=LiPYv%2B53pkeVSUl8mhxWfFslVmM%3D" alt="" loading="lazy"></p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/424fc46639da47c9a28d6d76c79abfcf~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg6Zmz5L2P5rCU:q75.awebp?rk3s=f64ab15b&amp;x-expires=1753864043&amp;x-signature=7uWvcFb8aOx1wFm1ZEtNVqYVBl0%3D" alt="" loading="lazy"></p></div></div>