
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/du-hong/p/18451585" title="发布于 2025-06-30 15:55">
    <span role="heading" aria-level="2">《刚刚问世》系列初窥篇-Java+Playwright自动化测试-21- 操作鼠标拖拽 - 中篇（详细教程）</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h3 id="autoid-0-0-0">1.简介</h3>
<p>上一篇中，主要是介绍了拖拽的各种方法的理论知识以及实践，今天宏哥讲解和分享一下划取字段操作。例如：需要在一堆log字符中随机划取一段文字，然后右键选择摘取功能。</p>
<h3 id="autoid-0-1-0">2.划取字段操作</h3>
<p>划取字段操作就是在一段文字中随机选中一段文字，或者在标记文字。当然了，这个在一些网站的登录也需要滑块验证等。</p>
<p>selenium中提供了ActionChains类来处理鼠标事件。这个类中有2个方法和滑块移动过程相关。click_and_hold()：模拟按住鼠标左键在源元素上，点击并且不释放；release()：松开鼠标按键。字面意思就可以理解这2个函数的作用。今天跟随宏哥看一下，playwright是如何处理这种测试场景的。</p>
<h3 id="autoid-0-2-0">3.牛刀小试</h3>
<h4>3.1dragTo()</h4>
<p>在一段文字中，随机划取一小段文字（这个感觉比较鸡肋，貌似没有什么卵用，但是宏哥还是说一下吧）。那么宏哥就用度娘的免责声明进行实践，划取其中的一小段文字。</p>
<p>使用locator.dragTo()执行拖放操作，实现自动化测试。</p>
<h5>3.1.1代码设计</h5>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202410/1232840-20241008144939538-2104090971.png" alt="" loading="lazy"></p>
<h5>3.1.2参考代码</h5>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">package</span><span style="color: rgba(0, 0, 0, 1)"> com.bjhg.playwright;

</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.microsoft.playwright.Browser;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.microsoft.playwright.BrowserContext;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.microsoft.playwright.BrowserType;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.microsoft.playwright.Page;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.microsoft.playwright.Playwright;

</span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">
 * </span><span style="color: rgba(128, 128, 128, 1)">@author</span><span style="color: rgba(0, 128, 0, 1)"> 北京-宏哥
 * 
 * @公众号:北京宏哥（微信搜索，关注宏哥，提前解锁更多测试干货）
 * 
 * 《刚刚问世》系列初窥篇-Java+Playwright自动化测试-21-操作鼠标拖拽 -中篇（详细教程）
 *
 * 2024年10月11日
 </span><span style="color: rgba(0, 128, 0, 1)">*/</span>
<span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> Test_DragTo {
    
    
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> main(String[] args) {
        </span><span style="color: rgba(0, 0, 255, 1)">try</span> (Playwright playwright =<span style="color: rgba(0, 0, 0, 1)"> Playwright.create()) {
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">1.使用chromium浏览器，# 浏览器配置，设置以GUI模式启动Chrome浏览器（要查看浏览器UI，在启动浏览器时传递 headless=false 标志。您还可以使用 slowMo 来减慢执行速度。</span>
          Browser browser = playwright.chromium().launch(<span style="color: rgba(0, 0, 255, 1)">new</span> BrowserType.LaunchOptions().setHeadless(<span style="color: rgba(0, 0, 255, 1)">false</span>).setSlowMo(3000<span style="color: rgba(0, 0, 0, 1)">));
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">2.创建context</span>
          BrowserContext context =<span style="color: rgba(0, 0, 0, 1)"> browser.newContext();
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">创建page</span>
          Page page =<span style="color: rgba(0, 0, 0, 1)"> context.newPage();
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">3.浏览器访问demo</span>
          page.navigate("https://www.baidu.com/duty"<span style="color: rgba(0, 0, 0, 1)">);
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">4.开始拖拽划线</span>
          page.locator("//*/p").dragTo(page.locator("//*/ul[@class='privacy-ul-gap']/li[1]"<span style="color: rgba(0, 0, 0, 1)">));
          
          System.out.println(</span>"Test Pass"<span style="color: rgba(0, 0, 0, 1)">);
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">关闭page</span>
<span style="color: rgba(0, 0, 0, 1)">          page.close();
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">关闭browser</span>
<span style="color: rgba(0, 0, 0, 1)">          browser.close();
        }
    }
}</span></pre>
</div>
<h5>3.1.3运行代码</h5>
<p>1.运行代码，右键Run As-&gt;Java Application，就可以看到控制台输出，如下图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202410/1232840-20241008145021441-44349061.png" alt="" loading="lazy"></p>
<p>2.运行代码后电脑端的浏览器的动作（可以看到划取了一段内容，和我们平时按住鼠标左键滑动鼠标划取大同小异）。如下图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202410/1232840-20241010163034714-440753255.gif" alt="" loading="lazy"></p>
<h4>3.2dragAndDrop()</h4>
<p>使用page.dragAndDrop(locator, loacator)，实现自动化测试。</p>
<h5>3.2.1代码设计</h5>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202410/1232840-20241010163336689-1087835345.png" alt="" loading="lazy"></p>
<h5>3.2.2参考代码</h5>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">package</span><span style="color: rgba(0, 0, 0, 1)"> com.bjhg.playwright;

</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.microsoft.playwright.Browser;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.microsoft.playwright.BrowserContext;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.microsoft.playwright.BrowserType;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.microsoft.playwright.Page;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.microsoft.playwright.Playwright;

</span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">
 * </span><span style="color: rgba(128, 128, 128, 1)">@author</span><span style="color: rgba(0, 128, 0, 1)"> 北京-宏哥
 * 
 * @公众号:北京宏哥（微信搜索，关注宏哥，提前解锁更多测试干货）
 * 
 * 《刚刚问世》系列初窥篇-Java+Playwright自动化测试-21-操作鼠标拖拽 -中篇（详细教程）
 *
 * 2024年10月11日
 </span><span style="color: rgba(0, 128, 0, 1)">*/</span>
<span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> Test_DragTo {
    
    
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> main(String[] args) {
        </span><span style="color: rgba(0, 0, 255, 1)">try</span> (Playwright playwright =<span style="color: rgba(0, 0, 0, 1)"> Playwright.create()) {
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">1.使用chromium浏览器，# 浏览器配置，设置以GUI模式启动Chrome浏览器（要查看浏览器UI，在启动浏览器时传递 headless=false 标志。您还可以使用 slowMo 来减慢执行速度。</span>
          Browser browser = playwright.chromium().launch(<span style="color: rgba(0, 0, 255, 1)">new</span> BrowserType.LaunchOptions().setHeadless(<span style="color: rgba(0, 0, 255, 1)">false</span>).setSlowMo(3000<span style="color: rgba(0, 0, 0, 1)">));
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">2.创建context</span>
          BrowserContext context =<span style="color: rgba(0, 0, 0, 1)"> browser.newContext();
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">创建page</span>
          Page page =<span style="color: rgba(0, 0, 0, 1)"> context.newPage();
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">3.浏览器访问demo</span>
          page.navigate("https://www.baidu.com/duty"<span style="color: rgba(0, 0, 0, 1)">);
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">4.开始拖拽划线
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">page.locator("</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">*/p").dragTo(page.locator("</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">*/ul[@class='privacy-ul-gap']/li[1]"));</span>
          page.dragAndDrop("//*/p", "//*/ul[@class='privacy-ul-gap']/li[1]"<span style="color: rgba(0, 0, 0, 1)">);
          System.out.println(</span>"Test Pass"<span style="color: rgba(0, 0, 0, 1)">);
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">关闭page</span>
<span style="color: rgba(0, 0, 0, 1)">          page.close();
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">关闭browser</span>
<span style="color: rgba(0, 0, 0, 1)">          browser.close();
        }
    }
}</span></pre>
</div>
<h5>3.2.3运行代码</h5>
<p>1.运行代码，右键Run As-&gt;Java Application，就可以看到控制台输出，如下图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202410/1232840-20241010163317233-2139014714.png" alt="" loading="lazy"></p>
<p>2.运行代码后电脑端的浏览器的动作。如下图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202410/1232840-20241010163523636-1752150350.gif" alt="" loading="lazy"></p>
<h3 id="autoid-0-2-1">4.项目实战</h3>
<p>这里宏哥用java+selenium中的携程旅行，手机号查单页面的一个滑动，进行项目实战，结果发现挂了，携程取消了，可以能是用的人太多了吧，然后宏哥继续逛，果然皇天不负有心人啊，在其上边又找的一个滑动验证的地址（注册颜面），不过需要先点击同意协议才可以使用的哦，写代码的时候要注意了，地址：<a href="https://passport.ctrip.com/user/reg/home" target="_blank" rel="noopener nofollow">https://passport.ctrip.com/user/reg/home</a>&nbsp;，如下图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202410/1232840-20241011084343944-574607823.gif" alt="" loading="lazy"></p>
<h4 id="autoid-0-3-0">4.1思路说明</h4>
<ul>
<li>使用locator定位到要拖动滑块元素，如元素名叫ele</li>
<li>获取元素ele的bounding_box含4分属性值：x，y，width，height</li>
<li>把鼠标移动到元素ele的中心点，中心点位置为：x+width/2,y+height/2</li>
<li>按下鼠标</li>
<li>计算出要移动的下一个位置，以长条滑块为例，拖动到长条头部实现解锁，那x的位置应该为x+width/2 + 某个固定值（足够大就好）</li>
<li>执行移动操作，下一个位置坐标为：x+width/2 + 某个固定值,y+height/2</li>
<li>释放鼠标</li>
</ul>
<h4 id="autoid-0-3-1">4.2调用方法</h4>
<ul>
<li>元素定位：page.locator();</li>
<li>获取元素位置及大小：ele.boundingBox();</li>
<li>鼠标移动：page.mouse().move();</li>
<li>按下鼠标：page.mouse().down();</li>
<li>释放鼠标：page.mouse().up();</li>
</ul>
<h4 id="autoid-0-3-2">4.3代码设计</h4>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202410/1232840-20241011090119445-1121468935.png" alt="" loading="lazy"></p>
<h4 id="autoid-0-3-3">4.4参考代码</h4>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">package</span><span style="color: rgba(0, 0, 0, 1)"> com.bjhg.playwright;

</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.microsoft.playwright.Browser;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.microsoft.playwright.BrowserContext;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.microsoft.playwright.BrowserType;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.microsoft.playwright.Locator;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.microsoft.playwright.Page;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.microsoft.playwright.Playwright;


</span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">
 * </span><span style="color: rgba(128, 128, 128, 1)">@author</span><span style="color: rgba(0, 128, 0, 1)"> 北京-宏哥
 * 
 * @公众号:北京宏哥（微信搜索，关注宏哥，提前解锁更多测试干货）
 * 
 * 《刚刚问世》系列初窥篇-Java+Playwright自动化测试-21-操作鼠标拖拽 -中篇（详细教程）
 *
 * 2024年10月11日
 </span><span style="color: rgba(0, 128, 0, 1)">*/</span>
<span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> Test_DragDemo {

    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> main(String[] args) {
        </span><span style="color: rgba(0, 0, 255, 1)">try</span> (Playwright playwright =<span style="color: rgba(0, 0, 0, 1)"> Playwright.create()) {
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">1.使用chromium浏览器，# 浏览器配置，设置以GUI模式启动Chrome浏览器（要查看浏览器UI，在启动浏览器时传递 headless=false 标志。您还可以使用 slowMo 来减慢执行速度。</span>
          Browser browser = playwright.chromium().launch(<span style="color: rgba(0, 0, 255, 1)">new</span> BrowserType.LaunchOptions().setHeadless(<span style="color: rgba(0, 0, 255, 1)">false</span>).setSlowMo(3000<span style="color: rgba(0, 0, 0, 1)">));
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">2.创建context</span>
          BrowserContext context =<span style="color: rgba(0, 0, 0, 1)"> browser.newContext();
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">创建page</span>
          Page page =<span style="color: rgba(0, 0, 0, 1)"> context.newPage();
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">3.浏览器访问demo</span>
          page.navigate("https://passport.ctrip.com/user/reg/home"<span style="color: rgba(0, 0, 0, 1)">);
          page.locator(</span>"//*[@id='agr_pop']/div[3]/a[2]"<span style="color: rgba(0, 0, 0, 1)">).click();
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">4.开始拖拽
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">获取拖动按钮位置并拖动</span>
          Locator slider = page.locator("//*[@id='slideCode']/div[1]/div[2]"<span style="color: rgba(0, 0, 0, 1)">);
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 使用鼠标滑动滑块</span>
          page.mouse().move(slider.boundingBox().x + slider.boundingBox().width / 2, slider.boundingBox().y + slider.boundingBox().height / 2<span style="color: rgba(0, 0, 0, 1)">);
          page.mouse().down();
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 根据滑动的范围，这里使用滑动最大距离</span>
          page.mouse().move(slider.boundingBox().x + slider.boundingBox().width / 0.5+300, slider.boundingBox().y + slider.boundingBox().height / 2<span style="color: rgba(0, 0, 0, 1)">);
          page.mouse().up();
          page.pause();
          System.out.println(</span>"Test Pass"<span style="color: rgba(0, 0, 0, 1)">);
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">关闭page</span>
<span style="color: rgba(0, 0, 0, 1)">          page.close();
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">关闭browser</span>
<span style="color: rgba(0, 0, 0, 1)">          browser.close();
        }
    }
}</span></pre>
</div>
<h4>4.5运行代码</h4>
<p>1.运行代码，右键Run As-&gt;Java Application，就可以看到控制台输出，如下图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202410/1232840-20241011090235585-1509463382.png" alt="" loading="lazy"></p>
<p>2.运行代码后电脑端的浏览器的动作（滑动并验证通过，但是由于反爬虫机制，看的不是很清楚）。如下图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202410/1232840-20241011090913508-885155714.gif" alt="" loading="lazy"></p>
<p>3.之前宏哥也是用这个网站演示的，宏哥不是打广告也没有付宏哥广告费，因此之前跟随宏哥学习的有些小伙伴和同学们私信宏哥，说那不是发爬虫机制，是因为你没有滑动验证成功，所以才出现二次验证机制。宏哥没有多做解释。好吧，那就用事实说话吧，宏哥就用断点调试让小伙伴或者童鞋们自己看一下，到底第一步的滑动验证有没有成功。</p>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202410/1232840-20241011091543986-596183425.png" alt="" loading="lazy"></p>
<p>4.运行代码后电脑端的浏览器的动作（宏哥手动点击验证这个反爬虫的验证，然后可以清楚的看的第一步滑动验证是成功的。。。。并不是私信说的那样子吧），如下图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202410/1232840-20241011092044809-631554352.gif" alt="" loading="lazy"></p>
<h3 id="autoid-0-3-5">5.小结</h3>
<p>之前宏哥在java+selenium的文章中测试的时候，就会跳转到这个页面，之前说的是selenium检查机制，但是这里没有用selenium，怎么还会有这个，查了半天资料说是反爬虫机制。但是代码中加入反爬虫的机制不好使。有知道怎么回事的可以给宏哥留言。</p>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202410/1232840-20241011092224198-1725268132.png" alt="" loading="lazy"></p>
<h4 id="autoid-0-4-0">5.1测试网站</h4>
<p>测试链接：<a href="https://bot.sannysoft.com/" rel="noopener nofollow" target="_blank">https://bot.sannysoft.com/</a><a class=" wrap external" href="https://link.zhihu.com/?target=https%3A//intoli.com/blog/not-possible-to-block-chrome-headless/chrome-headless-test.html" rel="noopener nofollow" target="_blank" data-za-detail-view-id="1043"><br></a></p>
<p>正常浏览结果：</p>
<p><img src="https://img2020.cnblogs.com/blog/1232840/202109/1232840-20210930151449402-572879633.png" alt="" class="medium-zoom-image" loading="lazy"></p>
<p>宏哥然后加入暂停代码（<strong>page.pause()</strong>），在这个页面用网址监测一下，看到绕过Chrome的selenium反爬虫检测机制，但是还是会出现那个选择字的验证。查了半天也不知道怎么回事，有知道给宏哥留言，让宏哥学习学习。如下图所示：</p>
<p><img src="https://img2023.cnblogs.com/blog/1232840/202307/1232840-20230718141951542-1125937688.png" alt="" class="medium-zoom-image" loading="lazy"></p>
<p>好了，时间不早了，今天就分享和讲解到这里。</p>
</div>
<div id="MySignature" role="contentinfo">
    <div id="MySignature" style="display: block">
	<div style="font-size: 13px; border: 1px dashed rgb(45, 161, 45); padding: 10px 15px; background-color: rgb(248, 248, 248)">
		<label style="font-weight: bold">
			&nbsp;&nbsp;&nbsp;&nbsp;为了方便大家在移动端也能看到我分享的博文，现已注册个人微信公众号，扫描左下方二维码即可，欢迎大家关注，提前解锁更多测试干货！有时间会及时分享相关技术博文。
		</label>
		<br>
		<label style="font-weight: bold">
			&nbsp;&nbsp;&nbsp;&nbsp;为了方便大家互动讨论相关技术问题，刚刚建立了咱们的专门的微信群交流互动群，群内会分享交流测试领域前沿知识。  请您扫描中间的微信二维码进群 
		</label>
		<br>
		<label style="font-weight: bold">
			&nbsp;&nbsp;&nbsp;&nbsp;为了方便大家互动讨论相关技术问题，现已组建专门的微信群，由于微信群满100，请您扫描右下方宏哥个人微信二维码拉你进群
			<label style="font-weight: bold; color: red; font-size: 15px">
				（请务必备注：已关注公众号进群）平时上班忙（和你一样），所以加好友不及时，请稍安勿躁~
			</label>
			，欢迎大家加入这个大家庭，我们一起畅游知识的海洋。
		</label>
		<br>
		&nbsp;&nbsp;&nbsp;&nbsp;感谢您花时间阅读此篇文章,如果您觉得这篇文章你学到了东西也是为了犒劳下博主的码字不易不妨打赏一下吧，让博主能喝上一杯咖啡，在此谢过了！
		<br>
		&nbsp;&nbsp;&nbsp;&nbsp;如果您觉得阅读本文对您有帮助，请点一下左下角
		<a id="recommend" style="font-weight: bold; color: red; font-size: 15px; text-decoration: underline">
			“推荐”
		</a>
		按钮，您的
		<label style="font-weight: bold; color: red; font-size: 15px">
			“推荐”
		</label>
		将是我最大的写作动力！另外您也可以选择
		<a id="follow_me_btn" style="cursor: pointer; color: blue; text-decoration: underline">
			【
			<strong>
				关注我
			</strong>
			】
		</a>
		，可以很方便找到我！
		<br>
		&nbsp;&nbsp;&nbsp;&nbsp;本文版权归作者和博客园共有，来源网址：
		<a href="https://www.cnblogs.com/du-hong" style="color: red; text-decoration: underline" target="_blank">
			https://www.cnblogs.com/du-hong
		</a>
		欢迎各位转载，但是未经作者本人同意，转载文章之后必须在文章页面明显位置给出作者和原文连接，否则保留追究法律责任的权利！
	</div>
	<div style="text-align: center; margin-top: 10px">
		<p style=" font-weight: bolder; color: red; ">
			公众号(关注宏哥)&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			微信群(扫码进群) &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;客服微信
		</p>
		<img style="width: 200px;padding-right: 50px;" alt="个人微信公众号" src="https://img2018.cnblogs.com/common/1741949/201911/1741949-20191119095948011-608816619.png">
		<img style="width: 200px;padding-right: 65px;" alt="微信群" src="https://img2024.cnblogs.com/blog/1232840/202506/1232840-20250610113707419-637869921.png">
		<img style="width: 200px" alt="个人微信" src="https://img2018.cnblogs.com/common/1741949/201911/1741949-20191106101257091-849954564.png">
	</div>
</div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-06-30 15:55">2025-06-30 15:55</span>&nbsp;
<a href="https://www.cnblogs.com/du-hong">北京-宏哥</a>&nbsp;
阅读(<span id="post_view_count">89</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18451585);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18451585', targetLink: 'https://www.cnblogs.com/du-hong/p/18451585', title: '《刚刚问世》系列初窥篇-Java+Playwright自动化测试-21- 操作鼠标拖拽 - 中篇（详细教程）' })">举报</a>
</div>
        