
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/TonyCode/p/18893971" title="发布于 2025-05-24 00:29">
    <span role="heading" aria-level="2">游戏中常用的平滑曲线函数：高中生也能看懂的代码分析</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="移动中常用的平滑曲线函数">移动中常用的平滑曲线函数：</h2>
<p>在代码控制2D人物一动时候，为了保证人物在停止停止移动时候出现速度瞬变，卡顿问题，常常使用一个平滑函数，来使得速度按照函数的平滑曲线来逼近目标值。</p>
<p><img src="https://img2024.cnblogs.com/blog/3292471/202505/3292471-20250524002331806-355459157.png" alt="image" loading="lazy"></p>
<p>先看代码：</p>
<p><img src="https://img2024.cnblogs.com/blog/3292471/202505/3292471-20250524002407783-1926205097.png" alt="image" loading="lazy"></p>
<p>一个在Update中调用的移动函数。</p>
<p>首先通过获取用户输入的坐标方向来确定好人物移动的二维方向（2D游戏）。之后可以设定一个速度数值，赋值给targetVelocity ，作为人物的移动的目标速度。</p>
<p>有了目标速度，我们可以使用插值函数来使人物从当前速度过度到目标速度，从而避免速度突变卡顿现象。</p>
<pre><code class="language-C#">	mRigidbody2D.velocity = Vector2.Lerp(mRigidbody2D.velocity, targetVelocity, 1 - Mathf.Exp(-Time.deltaTime * 10));

</code></pre>
<p>来看这一行代码：</p>
<p>最外层的插值函数：</p>
<p><img src="https://img2024.cnblogs.com/blog/3292471/202505/3292471-20250524002452004-205339157.png" alt="image" loading="lazy"></p>
<p>也就是说我们要获取一个中间数值来使得人物从当前速度到目标速度有个过度。</p>
<p>显然我们第三个参数可以填0.5 直接选取中值来作为过度，但是忽略到了移动和帧率的关系，</p>
<p>当帧率高时候，这种固定取中值的方式不免还是有些僵硬。</p>
<p>这里我们抓住帧率这个变量，斟酌一下Lerp的插值系数。</p>
<pre><code>1 - Mathf.Exp(-Time.deltaTime * 10)
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/3292471/202505/3292471-20250524002906107-1787889660.png" alt="image" loading="lazy"></p>
<p>说到“平滑”自然想到高中时候学过的指数函数，没错就是它！选取底数为e的指数函数，如果你用指尖沿着函数曲线滑动，一定会有洗泡泡浴的感觉！什么？没有，发挥一下数学想象哈哈哈哈！</p>
<p><img src="https://img2024.cnblogs.com/blog/3292471/202505/3292471-20250524002615755-978854530.png" alt="image" loading="lazy"></p>
<ul>
<li>
<p>当帧率高时，Time.deltaTime 越小 ，-Time.deltaTime 越大，越从x轴负向靠近0坐标</p>
<p>取指数函数的数值越接近1 ，也就是插值结果越接近目标值。</p>
</li>
<li>
<p>当帧率低时，Time.deltaTime越大，-Time.deltaTime 越小，越从x轴负向<strong>远离</strong>0坐标</p>
<p>取指数函数的数值就越接近0.4 ,差值相对更接近当前状态的数值。</p>
</li>
</ul>
<p>结果更靠近起始值还是目标值，其变化程度是光滑过度的，这样就很好的解决了速度突变的问题。</p>
<p>当然代码中常量数值是可以作为光滑系数来使用的。</p>
<p>总结下：在面对两个数值间突变的情况，我们使用插值函数配合指数函数来做到光滑过度.在游戏开发中常用于实现各种平滑过渡效果，如：角色移动、相机跟随、UI 动画、物理模拟等</p>
<p>由函数曲线和逐行函数分析，使得我们了解到代码背后的数学原理。了解了数学原理，编程过程中也会领略到数学之美，也给游戏开发增点不一样的乐趣。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.07585427082523148" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-24 00:30">2025-05-24 00:29</span>&nbsp;
<a href="https://www.cnblogs.com/TonyCode">畅知</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18893971);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18893971', targetLink: 'https://www.cnblogs.com/TonyCode/p/18893971', title: '游戏中常用的平滑曲线函数：高中生也能看懂的代码分析' })">举报</a>
</div>
        