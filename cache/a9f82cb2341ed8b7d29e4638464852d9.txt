
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/12lisu/p/18877432" title="发布于 2025-05-15 11:34">
    <span role="heading" aria-level="2">校验参数的6大神功！</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="新手司机翻车实录">新手司机翻车实录</h2>
<p>"哥，注册接口又被刷爆了！</p>
<p>"某一个周末下午，我接到电话，打开日志一看，<code>NullPointerException</code>堆栈里有38个不同位置的校验逻辑。</p>
<p>原来新人小王在Controller里写满了这样的代码：</p>
<pre><code class="language-java">// 典型错误示范（转载自某小厂祖传代码）
public String register(UserDTO user) {
    if (user.getName() == null) {
        return "名字不能为空";
    }
    if (user.getAge() == null) {
        return "年龄不能为空";
    }
    if (user.getAge() &lt; 18) {
        return "年龄不能小于18岁";
    }
    if (!user.getPhone().matches("^1[3-9]\\d{9}$")) {
        return "手机号不合法";
    }
    // ...后续还有20个if...
}
</code></pre>
<p>这才是代码界的"九转大肠"——每个入口都让人窒息。</p>
<p>作为一位有很多开发经验的老司机，今天，老夫带你修炼参数校验的6大神功。</p>
<p><img src="https://files.mdnice.com/user/5303/88e5c22d-9fab-4212-a594-eb7139218108.png" alt="" loading="lazy"></p>
<p>希望对你会有所帮助。</p>
<h2 id="第一重jsr规范基础功">第一重：JSR规范基础功</h2>
<h3 id="11-hibernatevalidator瞬炼大法">1.1 HibernateValidator瞬炼大法</h3>
<p>可以使用Hibernate中Validator框架做参数校验，具体代码如下：</p>
<pre><code class="language-java">public class UserDTO {
    @NotBlank(message = "名称要填，皮这一下很开心？")
    private String name;

    @NotNull
    @Min(value = 18, message = "未成年禁止入内")
    @Max(60)
    private Integer age;

    @Pattern(regexp = "^1[3-9]\\d{9}$", message = "这手机号是哪国来的？")
    private String phone;
}

// Controller层启用校验（新手必知第一步）
@PostMapping("/register")
public Result register(@Valid @RequestBody UserDTO user) {
    // 业务代码...
}
</code></pre>
<p><strong>技术要点</strong>：</p>
<ul>
<li>引入<code>spring-boot-starter-validation</code>依赖（调料包记得加）</li>
<li><code>@Valid</code>注解要放在入参侧（别贴在DTO类上）</li>
<li>错误信息会进<code>BindingResult</code>（打扫战场需要手动处理）</li>
</ul>
<h2 id="第二重全局异常擒龙手">第二重：全局异常擒龙手</h2>
<h3 id="21-统一异常拦截器">2.1 统一异常拦截器</h3>
<p>我们需要对异常进行统一拦截。</p>
<p>这样在出现参数校验异常，比如空指针时，不会把服务的内部错误信息直接输出给用户。</p>
<p>通过@RestControllerAdvice和@ExceptionHandler注解实现统一异常拦截器的功能。</p>
<p>具体代码如下：</p>
<pre><code class="language-java">@RestControllerAdvice
public class GlobalExceptionHandler {
    
    // 专治各种不服校验
    @ExceptionHandler(MethodArgumentNotValidException.class)
    public Result handleValidException(MethodArgumentNotValidException e) {
        BindingResult result = e.getBindingResult();
        return Result.fail(result.getFieldError().getDefaultMessage());
    }
}

// 返回格式规范（示例）
public class Result&lt;T&gt; {
    private Integer code;
    private String msg;
    private T data;
    
    public static &lt;T&gt; Result&lt;T&gt; fail(String message) {
        return new Result&lt;&gt;(500, message, null);
    }
}
</code></pre>
<p><strong>反爬虫机制</strong>：</p>
<ul>
<li>禁止直接暴露字段名给前端（攻击者会利用字段名信息）</li>
<li>错误信息字典化管理（后面会教国际化这招）</li>
</ul>
<h2 id="第三重自定义校验屠龙技">第三重：自定义校验屠龙技</h2>
<h3 id="31-手机邮箱二元校验">3.1 手机/邮箱二元校验</h3>
<p>有时候，Hibernate Validator框架或者其他校验框架定义的校验不满足需求，我们需要自定义校验规则。</p>
<p>则可以自定义注解，实现ConstraintValidator接口，来实现具体的自定义的校验逻辑。</p>
<p>自定义注解@Contact在字段上使用。</p>
<p>具体代码如下：</p>
<pre><code class="language-java">@Target({FIELD, PARAMETER})
@Retention(RUNTIME)
@Constraint(validatedBy = ContactValidator.class)
public @interface Contact {
    String message() default "联系方式格式错误";
    Class&lt;?&gt;[] groups() default {};
    Class&lt;? extends Payload&gt;[] payload() default {};
}

// 校验逻辑实现（不要相信前端的下拉框！）
public class ContactValidator implements ConstraintValidator&lt;Contact, String&gt; {
    
    private static final Pattern PHONE_PATTERN = Pattern.compile("^1[3-9]\\d{9}$");
    private static final Pattern EMAIL_PATTERN = Pattern.compile("^\\w+@\\w+\\.\\w+$");

    @Override
    public boolean isValid(String value, ConstraintValidatorContext context) {
        return PHONE_PATTERN.matcher(value).matches() 
               || EMAIL_PATTERN.matcher(value).matches();
    }
}
</code></pre>
<p><strong>六边形战士培养计划</strong>：</p>
<ul>
<li>可通过<code>context.buildConstraintViolationWithTemplate()</code>动态修改错误信息</li>
<li>支持DI注入Spring管理的Bean（比如从数据库加载正则）</li>
</ul>
<h2 id="第四重分组校验北冥功">第四重：分组校验北冥功</h2>
<h3 id="41-增删改查不同校验规则">4.1 增删改查不同校验规则</h3>
<p>对于增删改查中，对于实体对象中的同一个参数，在不同的应用场景中需要做不同分组校验。</p>
<p>具体代码如下：</p>
<pre><code class="language-java">// 定义校验组别（划分阵营）
public interface CreateGroup {}
public interface UpdateGroup {}

// DTO根据场景应用分组
public class ProductDTO {
    @Null(groups = UpdateGroup.class)
    @NotNull(groups = CreateGroup.class)
    private Long id;

    @NotBlank(groups = {CreateGroup.class, UpdateGroup.class})
    private String name;
}

// 控制层按需激活校验组  
@PostMapping("/create")
public Result create(@Validated(CreateGroup.class) @RequestBody ProductDTO dto) {
    // 创建逻辑
}
</code></pre>
<p><strong>多副本作战手册</strong>：</p>
<ul>
<li>Default组始终生效（除非使用<code>groups</code>显式配置）</li>
<li>妙用<code>@ConvertGroup</code>进行分组转换</li>
</ul>
<h2 id="第五重跨界校验凌波微步">第五重：跨界校验凌波微步</h2>
<h3 id="51-跨字段关系校验">5.1 跨字段关系校验</h3>
<p>如果存在跨字段关系校验的情况，即组合条件校验，比如：用户密码和确认密码，可以将自定义注解作用在类上。</p>
<p>具体代码如下：</p>
<pre><code class="language-java">@Target(TYPE)
@Retention(RUNTIME)
@Constraint(validatedBy = PasswordValidator.class)
public @interface PasswordValid {
    String message() default "两次密码不一致";
    // ...
}

public class PasswordValidator implements ConstraintValidator&lt;PasswordValid, UserDTO&gt; {
    
    @Override
    public boolean isValid(UserDTO user, ConstraintValidatorContext context) {
        return user.getPassword().equals(user.getConfirmPassword());
    }
}

// 应用到类级别
@PasswordValid
public class UserDTO {
    private String password;
    private String confirmPassword;
}
</code></pre>
<p><strong>风控新法</strong>：</p>
<ul>
<li>适用于订单金额与优惠券匹配等业务规则</li>
<li>DDD值对象的天然场景</li>
</ul>
<h2 id="第六重规则引擎之天机策">第六重：规则引擎之天机策</h2>
<h3 id="天机殿的自动化战场">天机殿的自动化战场</h3>
<p>新来的产品小妹指着参数校验文档："每次改个手机号正则都要等发版？</p>
<p>"我默默掏出了祖传的规则引擎。</p>
<p>这种政商联动的需求，是时候施展大型工程的必杀技了！</p>
<h3 id="61-规则引擎的三层境界">6.1 规则引擎的三层境界</h3>
<p><strong>第一境：硬编码校验</strong>（青铜段位的if-else）<br>
<strong>第二境：配置化校验</strong>（黄金段位的数据库规则表）<br>
<strong>第三境：热力场作战</strong>（王者段位的动态规则引擎）</p>
<h3 id="62-drools天机大阵部署实录">6.2 Drools天机大阵部署实录</h3>
<p><strong>战场场景</strong>：信贷额度动态校验（每小时调整风控模型） 。</p>
<p>天机规则文件如下：</p>
<pre><code class="language-java">// 天机规则文件（credit_rule.drl）
rule "白领贷基础校验"
    when
        $req : LoanRequest(
            occupation == "白领", 
            salary &gt; 10000, 
            age &gt;= 25 &amp;&amp; age &lt;= 45
        )
    then
        $req.setRiskScore(-10); //加分项
end

rule "高危行业拦截"
    when
        $req : LoanRequest(
            industry in ("赌博业", "传销"), 
            location.contains("缅甸")
        )
    then
        throw new ValidationException("阁下莫非是缅北战神？"); 
end
</code></pre>
<p><strong>布阵心法</strong>：<br>
<img src="https://files.mdnice.com/user/5303/ab363a99-23c4-4dc3-a110-cc8b43059e22.png" alt="" loading="lazy"></p>
<p><strong>阵法要诀</strong>：</p>
<ol>
<li>规则文件按业务线拆分（金融/电商/社交各立山头）</li>
<li>使用kie-maven-plugin自动编译规则文件</li>
<li>KieScanner监听规则变更（天机更新不重启服务）</li>
</ol>
<h3 id="63-springboot接引天机大阵">6.3 SpringBoot接引天机大阵</h3>
<p><strong>法咒集成</strong>：</p>
<pre><code class="language-java">@Configuration
public class DroolsConfig {
    
    @Bean
    public KieContainer kieContainer() {
        KieServices ks = KieServices.Factory.get();
        KieFileSystem kfs = ks.newKieFileSystem();
        
        // 加载天机卷轴（规则文件）
        Resource resource = new ClassPathResource("rules/credit_rule.drl");
        kfs.write(ks.getResources().newInputStreamResource(resource.getInputStream())
                    .setTargetPath("credit_rule.drl"));
        
        KieBuilder kieBuilder = ks.newKieBuilder(kfs).buildAll();
        return ks.newKieContainer(kieBuilder.getKieModule().getReleaseId());
    }
}

// Controller层调用天尊之力
@PostMapping("/apply")
public Result applyLoan(@RequestBody LoanRequest request) {
    kieSession.insert(request);
    kieSession.fireAllRules(); // 执行天机推演
    return riskService.process(request);
}
</code></pre>
<p><strong>天机沙箱防御</strong>：</p>
<ol>
<li>限制规则中eval()的使用次数（防CPU过载）</li>
<li>为每个请求创建独立KieSession（防线程污染）</li>
<li>设置规则执行超时熔断（天机殿也有算不动的时候）</li>
</ol>
<h3 id="64-天机策反制诀窍">6.4 天机策反制诀窍</h3>
<p>某次上线后，规则引擎的神操作：</p>
<pre><code>rule "特殊时段放水"
    when
        $req : LoanRequest(hour &gt; 2 &amp;&amp; hour &lt; 5)
    then
        $req.setCreditLimit(50000); //给值夜班的兄弟开后门
end
</code></pre>
<p><strong>反制方案</strong>：</p>
<ol>
<li>规则提交走审批流（太上长老团联署制）</li>
<li>生产环境禁用update/modify关键字（防自动夺舍）</li>
<li>规则版本回滚机制（祭出玄天宝镜倒转时空）</li>
</ol>
<h2 id="祖师爷级参数校验纲领">祖师爷级参数校验纲领</h2>
<table>
<thead>
<tr>
<th>段位</th>
<th>招式名称</th>
<th>修炼难度</th>
<th>适用场景</th>
<th>破坏力</th>
</tr>
</thead>
<tbody>
<tr>
<td>青铜</td>
<td>if-else硬编码</td>
<td>★☆☆</td>
<td>小型工具类</td>
<td>⚡⚡⚡</td>
</tr>
<tr>
<td>白银</td>
<td>JSR注解大法</td>
<td>★★☆</td>
<td>常规CRUD</td>
<td>⚡⚡</td>
</tr>
<tr>
<td>黄金</td>
<td>全局异常拦截</td>
<td>★★★</td>
<td>RESTful API</td>
<td>⚡</td>
</tr>
<tr>
<td>铂金</td>
<td>定制校验规则</td>
<td>★★★☆</td>
<td>复杂业务规则</td>
<td>⚡</td>
</tr>
<tr>
<td>钻石</td>
<td>组合条件校验</td>
<td>★★★★</td>
<td>跨字段业务约束</td>
<td>⚡</td>
</tr>
<tr>
<td>王者</td>
<td>规则引擎整合</td>
<td>★★★★★</td>
<td>动态风控场景</td>
<td>✨</td>
</tr>
</tbody>
</table>
<h2 id="避坑法门">避坑法门</h2>
<ol>
<li><strong>不过三</strong>：Controller层校验不要超过三层（应该转给Service）</li>
<li><strong>见好就收</strong>：业务规则校验与基础格式校验分离</li>
<li><strong>防君子更防小人</strong>：服务端校验必须存在（前端校验是防君子用的）</li>
<li><strong>语义明确</strong>：错误提示避免暴露敏感信息（比如"用户不存在"改为"账号或密码错误"）</li>
</ol>
<p>最后提醒各位大侠：好的参数校验就像空气——你平时感受不到它的存在，但一旦失去它，整个系统瞬间崩塌！（代码fields正提刀赶来）</p>
<h2 id="最后说一句求关注别白嫖我">最后说一句(求关注，别白嫖我)</h2>
<p>如果这篇文章对您有所帮助，或者有所启发的话，帮忙关注一下我的同名公众号：苏三说技术，您的支持是我坚持写作最大的动力。</p>
<p>求一键三连：点赞、转发、在看。</p>
<p>关注公众号：【苏三说技术】，在公众号中回复：进大厂，可以免费获取我最近整理的10万字的面试宝典，好多小伙伴靠这个宝典拿到了多家大厂的offer。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.1994128199027778" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-15 11:34">2025-05-15 11:34</span>&nbsp;
<a href="https://www.cnblogs.com/12lisu">苏三说技术</a>&nbsp;
阅读(<span id="post_view_count">194</span>)&nbsp;
评论(<span id="post_comment_count">1</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18877432);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18877432', targetLink: 'https://www.cnblogs.com/12lisu/p/18877432', title: '校验参数的6大神功！' })">举报</a>
</div>
        