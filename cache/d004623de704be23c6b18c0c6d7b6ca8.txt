
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/chenshibao/p/18630730" title="发布于 2024-12-25 16:53">
    <span role="heading" aria-level="2">DDD架构展示</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="1-ddd分层架构">1 DDD分层架构</h2>
<p>DDD 分层架构就是优化后的四层架构。 从上到下依次是：用户接口层、应用层、领域层和基础层。</p>
<h3 id="11-ddd封层架构">1.1 DDD封层架构</h3>
<p><img src="https://img2024.cnblogs.com/blog/2212230/202412/2212230-20241225160333942-677249017.png" alt="image" loading="lazy"></p>
<ul>
<li>
<p>用户接口层：负责向用户显示信息和解释用户指令。这里的用户可能是：用户、程序、自动化测试和批处理脚本等等。</p>
</li>
<li>
<p>应用层：很薄的一层，理论上不应该有业务规则或逻辑，主要面向用例和流程相关的操作。但应用层又位于领域层之上，因为领域层包含多个聚合，所以它可以协调多个聚合的服务和领域对象完成服务编排和组合，协作完成业务操作。此外，应用层也是微服务之间交互的通道，它可以调用其它微服务的应用服务，完成微服务之间的服务组合和编排。</p>
</li>
<li>
<p>领域层：是实现企业核心业务逻辑，通过各种校验手段保证业务的正确性。领域层主要体现领域模型的业务能力，它用来表达业务概念、业务状态和业务规则。领域层包含聚合根、实体、值对象、领域服务等领域模型中的领域对象。</p>
</li>
<li>
<p>基础层：是贯穿所有层的，它的作用就是为其它各层提供通用的技术和基础服务，包括第三方工具、驱动、消息中间件、网关、文件、缓存以及数据库等。比较常见的功能还是提供数据库持久化。</p>
</li>
</ul>
<p>DDD 分层架构有一个重要的原则：<strong>每层只能与位于其下方的层发生耦合</strong>。</p>
<h3 id="12-ddd架构与mvc架构比较">1.2 DDD架构与MVC架构比较</h3>
<p>DDD 分层架构中的要素其实和三层架构类似，只是在 DDD 分层架构中，这些要素被重新归类，重新划分了层，确定了层与层之间的交互规则和职责边界。</p>
<p><img src="https://img2024.cnblogs.com/blog/2212230/202412/2212230-20241225160942976-2105274274.png" alt="image" loading="lazy"></p>
<h2 id="2整洁架构洋葱架构">2.整洁架构(洋葱架构)</h2>
<p>在整洁架构里，同心圆代表应用软件的不同部分，从里到外依次是领域模型、领域服务、应用服务和最外围的容易变化的内容，比如用户界面和基础设施。<br>
整洁架构最主要的原则是依赖原则，它定义了各层的依赖关系，越往里依赖越低，代码级别越高，越是核心能力。外圆代码依赖只能指向内圆，内圆不需要知道外圆的任何情况。</p>
<p><img src="https://img2024.cnblogs.com/blog/2212230/202412/2212230-20241225161340602-253846595.png" alt="image" loading="lazy"></p>
<p>在洋葱架构中，各层的职能划分：</p>
<ul>
<li>领域模型实现领域内核心业务逻辑，它封装了企业级的业务规则。领域模型的主体是实体，一个实体可以是一个带方法的对象，也可以是一个数据结构和方法集合。</li>
<li>领域服务实现涉及多个实体的复杂业务逻辑。应用服务实现与用户操作相关的服务组合与编排，它包含了应用特有的业务流程规则，封装和实现了系统所有用例。</li>
<li>最外层主要提供适配的能力，适配能力分为主动适配和被动适配。主动适配主要实现外部用户、网页、批处理和自动化测试等对内层业务逻辑访问适配。被动适配主要是实现核心业务逻辑对基础资源访问的适配，比如数据库、缓存、文件系统和消息中间件等。</li>
<li>红圈内的领域模型、领域服务和应用服务一起组成软件核心业务能力。</li>
</ul>
<h2 id="3cqrs架构更改查询隔离架构">3.CQRS架构(更改查询隔离架构)</h2>
<p>CQRS — Command Query Responsibility Segregation，故名思义是将 command 与 query 分离的一种模式。<br>
command ：命令则是对会引起数据发生变化操作的总称，即我们常说的新增，更新，删除这些操作，都是命令。<br>
Query：查询则和字面意思一样，即不会对数据产生变化的操作，只是按照某些条件查找数据。</p>
<p><img src="https://img2024.cnblogs.com/blog/2212230/202412/2212230-20241225163739530-797645514.png" alt="image" loading="lazy"></p>
<p><strong>适用场景：</strong></p>
<ul>
<li>查询数据复杂<br>
-- 写入数据通常聚焦在一个领域或聚合内<br>
-- 查询的数据结构复杂，跨域多个聚合的数据组合</li>
<li>读写分离<br>
-- 读数据比写数据频繁的多<br>
-- 通过读写分离提高系统的性能，可以灵活的使用不同的数据库技术实</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>数据一致性<br>
-- 数据的写入与事件触发更新不在同一个事务<br>
-- 两份数据可能异构存储如何保证最终一致性</li>
<li>基础实施不成熟<br>
-- CQRS大多是通过手工的读写分离实现<br>
-- 缺少具有统治地位的成熟框架</li>
</ul>
<h2 id="4-六边形架构端口适配器架构">4. 六边形架构(端口适配器架构)</h2>
<p>六边形架构的核心理念是：应用是通过端口与外部进行交互的</p>
<p>下图的红圈内的核心业务逻辑（应用程序和领域模型）与外部资源（包括 APP、Web 应用以及数据库资源等）完全隔离，仅通过适配器进行交互。它解决了业务逻辑与用户界面的代码交错问题，很好地实现了前后端分离。六边形架构各层的依赖关系与整洁架构一样，都是由外向内依赖。</p>
<p><img src="https://img2024.cnblogs.com/blog/2212230/202412/2212230-20241225164834998-1592837301.png" alt="image" loading="lazy"></p>
<p>六边形架构将系统分为内六边形和外六边形两层，这两层的职能划分如下：红圈内的六边形实现应用的核心业务逻辑；外六边形完成外部应用、驱动和基础资源等的交互和访问，对前端应用以 API 主动适配的方式提供服务，对基础资源以依赖倒置被动适配的方式实现资源访问。六边形架构的一个端口可能对应多个外部系统，不同的外部系统也可能会使用不同的适配器，由适配器负责协议转换。这就使得应用程序能够以一致的方式被用户、程序、自动化测试和批处理脚本使用。</p>
<h2 id="总结">总结</h2>
<p><img src="https://img2024.cnblogs.com/blog/2212230/202412/2212230-20241225165128713-1375783.png" alt="image" loading="lazy"></p>
<p>这三种架构模型的设计思想微服务架构高内聚低耦合原则的完美体现，而它们身上闪耀的正是以领域模型为中心的设计思想，将核心业务逻辑与外部应用、基础资源进行隔离。</p>
<p>红色框内部主要实现核心业务逻辑，但核心业务逻辑也是有差异的，有的业务逻辑属于领域模型的能力，有的则属于面向用户的用例和流程编排能力。按照这种功能的差异，我们在这三种架构中划分了应用层和领域层，来承担不同的业务逻辑。<br>
领域层实现面向领域模型，实现领域模型的核心业务逻辑，属于原子模型，它需要保持领域模型和业务逻辑的稳定，对外提供稳定的细粒度的领域服务，所以它处于架构的核心位置。<br>
应用层实现面向用户操作相关的用例和流程，对外提供粗粒度的 API 服务。它就像一个齿轮一样进行前台应用和领域层的适配，接收前台需求，随时做出响应和调整，尽量避免将前台需求传导到领域层。应用层作为配速齿轮则位于前台应用和领域层之间。</p>
<p>出自：<a href="https://www.jianshu.com/p/36c76dbaa20c" target="_blank" rel="noopener nofollow">https://www.jianshu.com/p/36c76dbaa20c</a></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.056549902289351854" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2024-12-25 16:54">2024-12-25 16:53</span>&nbsp;
<a href="https://www.cnblogs.com/chenshibao">似梦亦非梦</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18630730" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18630730);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18630730', targetLink: 'https://www.cnblogs.com/chenshibao/p/18630730', title: 'DDD架构展示' })">举报</a>
</div>
        