
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/fanliang11/p/18806262" title="发布于 2025-04-02 16:51">
    <span role="heading" aria-level="2">帮客户解决基于surging的物流速运网关内存泄漏问题</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h1 class="postTitle">&nbsp;一、概述</h1>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 有surging企业客户找到我，系统已经在线上环境运行，在使用过程中碰到内存不能释放的问题，每次都要和客户打招呼进行重启造成很坏的影响，问能不能彻底解决掉，然后我打包票可以解决，解决不了不收钱，</p>
<p>下面我将把我解决内容分析出来。</p>
<p><img src="https://img2024.cnblogs.com/blog/192878/202504/192878-20250402164904400-1492016621.jpg" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>。&nbsp;&nbsp;&nbsp;&nbsp; 木舟 (Kayak) 是什么?</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 木舟(Kayak)是基于.NET6.0软件环境下的surging微服务引擎进行开发的, 平台包含了微服务和物联网平台。支持异步和响应式编程开发，功能包含了物模型,设备,产品,网络组件的统一管理和微服务平台下的注册中心，服务路由，模块，中间服务等管理。还有多协议适配(TCP,MQTT,UDP,CoAP,HTTP,Grpc,websocket,rtmp,httpflv,webservice,等),通过灵活多样的配置适配能够接入不同厂家不同协议等设备。并且通过设备告警,消息通知,数据可视化等功能。能够让你能快速建立起微服务物联网平台系统。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp; 木舟物联网平台：<a href="http://117.72.121.2:3100" rel="noopener nofollow" target="_blank">http://117.72.121.2:3100</a>（用户名：fanly&nbsp; 密码：123456）</p>
<p>&nbsp; &nbsp; 链路跟踪Skywalking V8:<a href="http://117.72.121.2:8080/" rel="noopener nofollow" target="_blank">http://117.72.121.2:8080/</a></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; surging 微服务引擎开源地址：<a href="https://github.com/fanliang11/surging" rel="noopener nofollow" target="_blank">https://github.com/fanliang11/surging</a>（后面surging 会移动到<a href="https://github.com/microsurging/" rel="noopener nofollow" target="_blank">microsurging</a>进行维护）</p>
<h1 class="postTitle">&nbsp;二、dump文件分析</h1>
<p>有了vs,基本上不需要通过windbg进行装逼分析了，通过查看托管堆并没有大型对象，这边没有问题，那就是业务耗时导致线程阻塞。</p>
<p><img src="https://img2024.cnblogs.com/blog/192878/202504/192878-20250402153443892-1809338025.png" alt="" loading="lazy"></p>
<p>&nbsp;然后可以看到有50个线程阻塞同步等待消息</p>
<p><img src="https://img2024.cnblogs.com/blog/192878/202504/192878-20250402154018939-750020338.png" alt="" loading="lazy"></p>
<p>&nbsp;通过线程调用的堆栈信息，我们就可以发现dotnetty的work 的执行线程阻塞了</p>
<p><img src="https://img2024.cnblogs.com/blog/192878/202504/192878-20250402154304072-1940178594.png" alt="" loading="lazy"></p>
<h2>三、代码修改</h2>
<p>通过以上分析就可以得出网关在处理Rpc远程调用的时候，未收到及时的返回，造成消息积压，线程进行同步等待，</p>
<p>然后后面去业务端发现dotnetty 在处理业务的时候，是不支持ChannelPipeline的eventExecutor的，所以造成了网关消息的堆积。那么把代码改一下</p>
<p><img src="https://img2024.cnblogs.com/blog/192878/202504/192878-20250402155827537-519792037.png" alt="" loading="lazy"></p>
<p>&nbsp;ChannelRead 还是改成Task.Run</p>
<p><img src="https://img2024.cnblogs.com/blog/192878/202504/192878-20250402160018567-368436016.png" alt="" loading="lazy"></p>
<p>&nbsp;设置以下基于netty 的环境变量</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 128, 1)">1</span> Environment.SetEnvironmentVariable(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">io.netty.allocator.maxOrder</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">5</span><span style="color: rgba(128, 0, 0, 1)">"</span>);<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">调整 chunkSize 的大小,只能设置0-14范围内的值,默认值11</span>
<span style="color: rgba(0, 128, 128, 1)">2</span> Environment.SetEnvironmentVariable(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">io.netty.allocator.numDirectArenas</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">0</span><span style="color: rgba(128, 0, 0, 1)">"</span>);<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 设置Direct Arenas,默认核数*2</span>
<span style="color: rgba(0, 128, 128, 1)">3</span>  Environment.SetEnvironmentVariable(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">io.netty.allocator.type</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">unpooled</span><span style="color: rgba(128, 0, 0, 1)">"</span>);<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 不使用内存池</span>
<span style="color: rgba(0, 128, 128, 1)">4</span> 
<span style="color: rgba(0, 128, 128, 1)">5</span> Environment.SetEnvironmentVariable(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">io.netty.allocator.numHeapArenas</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">0</span><span style="color: rgba(128, 0, 0, 1)">"</span>);<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 设置Heap Arenas,默认核数*2</span></pre>
</div>
<h2>四、运行结果</h2>
<p>以下是运行3小时的内存消耗</p>
<p><img src="https://img2024.cnblogs.com/blog/192878/202504/192878-20250402164700196-2043138180.png" alt="" loading="lazy"></p>
<h2>五、小结</h2>
<p>能不能赚到这3.5w,请关注后续。</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.7524146100428241" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-02 16:56">2025-04-02 16:51</span>&nbsp;
<a href="https://www.cnblogs.com/fanliang11">fanly11</a>&nbsp;
阅读(<span id="post_view_count">124</span>)&nbsp;
评论(<span id="post_comment_count">1</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18806262" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18806262);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18806262', targetLink: 'https://www.cnblogs.com/fanliang11/p/18806262', title: '帮客户解决基于surging的物流速运网关内存泄漏问题' })">举报</a>
</div>
        