
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/ashuaiYiRen/p/18744793" title="发布于 2025-03-01 13:56">
    <span role="heading" aria-level="2">算法分享（贪心+动态规划）</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="算法">算法</h1>
<p>解决问题的方法。就好比同样是从长沙到北京，坐火车可能需要几天，坐高铁6小时，坐飞机两个半小时，当然交通工具不同，所消耗的成本也不同，算法就是在成本与时间中不断权衡，一个好的算法衡量标准就是用尽可能小的代价成本实现较短时间到达。</p>
<h1 id="算法有什么用">算法有什么用？</h1>
<ul>
<li>面试大厂必备技能。</li>
<li>更快的性能。计算机中主要的计算组件就是CPU，假设某个问题可以通过两种算法(简称为算法1、算法2)解决，它们的时间复杂度分为O(n)和O(n²)，假设现在某型号CPU的运算速度提升了10倍，我们分别配置稍微低一点的CPU去跑时间复杂度为O(n)的算法，和使用提升了10倍的CPU去跑时间时间复杂度为O(n²)的算法，我们会发现一个结果：在n&gt;10以后，使用配置低的硬件运行的效率要比配置高的硬件效率更好（假设n=20, CPU1: 20 &lt;CPU2 20²/10）</li>
</ul>
<h2 id="贪心">贪心</h2>
<p>每一步选择中都采取当前状态下最优的选择，追求局部最优解，从而希望达到全局最优解</p>
<h2 id="动态规划">动态规划</h2>
<p>将问题分解为多个阶段，每个阶段对应一个决策。我们记录每个阶段可达的状态集合（去掉重复的），然后通过当前阶段的状态集合推导下一个阶段的状态集合，动态地往前推进，直至到达最终阶段，得到全局最优解</p>
<h1 id="小兴兴兑换兴币问题">小兴兴兑换兴币问题</h1>
<h2 id="题目">题目</h2>
<p>用户有80个小兴兴，有四个兑换场次，分别是50个小兴兴兑换10个兴币，30个小兴兴兑换6个兴币，30个小兴兴兑换5个兴币，20个小兴兴兑换5个兴币</p>
<h3 id="兑换限制一人次">兑换限制一人/次</h3>
<h4 id="贪心-1">贪心</h4>
<p>分别计算三场兑换的比率</p>
<table>
<thead>
<tr>
<th>场次</th>
<th>比率</th>
</tr>
</thead>
<tbody>
<tr>
<td>50-&gt;10.5</td>
<td>0.21</td>
</tr>
<tr>
<td>30-&gt;6</td>
<td>0.2</td>
</tr>
<tr>
<td>30-&gt;5</td>
<td>0.18</td>
</tr>
<tr>
<td>20-&gt;5</td>
<td>0.25</td>
</tr>
</tbody>
</table>
<p>先兑换20-&gt;5，再兑换50-&gt;11，得15.5个兴币</p>
<h4 id="动态规划递归存储">动态规划(递归+存储)</h4>
<table>
<thead>
<tr>
<th></th>
<th>20</th>
<th>30</th>
<th>40</th>
<th>50</th>
<th>60</th>
<th>70</th>
<th>80</th>
</tr>
</thead>
<tbody>
<tr>
<td>50-&gt;10.5</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>10.5</td>
<td>10.5</td>
<td>10.5</td>
<td>10.5</td>
</tr>
<tr>
<td>30-&gt;6</td>
<td>0</td>
<td>6</td>
<td>6</td>
<td>10.5</td>
<td>10.5</td>
<td>10.5</td>
<td>16.5</td>
</tr>
<tr>
<td>30-&gt;5</td>
<td>0</td>
<td>6</td>
<td>6</td>
<td>10.5</td>
<td>11</td>
<td>11</td>
<td>16.5</td>
</tr>
<tr>
<td>20-&gt;5</td>
<td>5</td>
<td>6</td>
<td>6</td>
<td>11</td>
<td>11</td>
<td>15.5</td>
<td>16.5</td>
</tr>
</tbody>
</table>
<p><strong>寻找递推关系式</strong></p>
<p>面对当前场次有两种可能性：</p>
<p>小兴兴余额不足，总兴币与上一个场次兴币个数一致</p>
<p>小兴兴满赠门槛，但兑换了当前场次不一定是当前最优，所以需判断兑换的兴币是不是最大值</p>
<p><strong>关键代码：</strong></p>
<pre><code class="language-java">int[] w = { 0 , 50 , 30 ,30 , 20 };       //小兴兴兑换值0、50、30、30、20
float[] v = { 0 , 10.5f , 6 , 5 , 5 };       //兴币面额 10.5、6、5、5
int balance  = 80;                     //用户小兴兴总余额
float[][] dp = new float[5][7];               //动态规划表
for (int i = 1; i &lt;= 4; i++) {
    for (int j = 20; j &lt;= balance ; j+=10) {
        if (j &lt; w[i]){
            dp[i][j] = dp[i - 1][j];
        } else{
            dp[i][j] = Math.max(dp[i - 1][j], dp[i - 1][j - w[i]] + v[i]);
        }
    }
}
</code></pre>
<h3 id="兑换无限制">兑换无限制</h3>
<h4 id="贪心-2">贪心</h4>
<p>兑换20-&gt;5 *4 ，得20个兴币</p>
<h4 id="动态规划-1">动态规划</h4>
<table>
<thead>
<tr>
<th></th>
<th>20</th>
<th>30</th>
<th>40</th>
<th>50</th>
<th>60</th>
<th>70</th>
<th>80</th>
</tr>
</thead>
<tbody>
<tr>
<td>50-&gt;10.5</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>10.5</td>
<td>10.5</td>
<td>10.5</td>
<td>10.5</td>
</tr>
<tr>
<td>30-&gt;6</td>
<td>0</td>
<td>6</td>
<td>6</td>
<td>10.5</td>
<td>12</td>
<td>12</td>
<td>12</td>
</tr>
<tr>
<td>30-&gt;5</td>
<td>0</td>
<td>6</td>
<td>6</td>
<td>10.5</td>
<td>12</td>
<td>12</td>
<td>12</td>
</tr>
<tr>
<td>20-&gt;5</td>
<td>5</td>
<td>6</td>
<td>10</td>
<td>11</td>
<td>15</td>
<td>16</td>
<td>20</td>
</tr>
</tbody>
</table>
<p><strong>区别</strong>：可以兑换多次，即判断最大值时可以乘上K次,k*v[i] &lt; j</p>
<pre><code>dp[i][j] = Math.max(dp[i - 1][j], dp[i - 1][j - K*w[i]] + k*v[i]);
</code></pre>
<p><strong>关键代码</strong></p>
<pre><code class="language-java">for (int i = 1; i &lt;= 4; i++) {
    for (int j = 20; j &lt;= balance ; j+=10) {
        if (j &lt; w[i]){
            dp[i][j] = dp[i - 1][j];
        } else{
            for (int k = 1; k * w[i] &lt;= j; k++) {
                dp[i][j] = Math.max(dp[i - 1][j], dp[i - 1][j - k * w[i]] + k * v[i]);
            }
        }
    }
}
</code></pre>
<p>时间复杂度：O(N^3)</p>
<h5 id="优化">优化：</h5>
<pre><code class="language-java">dp[i][j] = Math.max(dp[i - 1][j], dp[i - 1][j - K*w[i]] + k*v[i]);
</code></pre>
<p>拆开得：</p>
<pre><code class="language-java">dp[i][j] = Math.max(dp[i-1][j],  dp[i-1][j - w[i]]+v[i], dp[i-1][j-2*w[i]]+2*v[i] ,......)
</code></pre>
<p>用代入法j=j-w[i]带入上面的方程中得到：</p>
<pre><code>dp[i][j-w[i]] = Math.max(dp[i-1][j-w[i]],  dp[i-1][j - 2*w[i]]+v[i], dp[i-1][j-3*w[i]]+2*v[i] ,......)
</code></pre>
<p>对比第二个和第一个方程，我们发现，方程1可以简化成：</p>
<pre><code class="language-java">dp[i][j] = Math.max(dp[i-1][j],dp[i][j-w[i]]+v[i]);
</code></pre>
<p>dp(i)(j - w(i)) 已经将除去1场当前兑换场次时的所有最优解已经求出来了，因此在计算dp(i)(j)时，无需再重复计算k=2,3,4,5…时的值了。</p>
<p><strong>简化代码</strong>：</p>
<pre><code>for (int i = 1; i &lt;= 4; i++) {
    for (int j = 20; j &lt;= balance ; j+=10) {
        if (j &lt; w[i]){
            dp[i][j] = dp[i - 1][j];
        } else{
            dp[i][j] = Math.max(dp[i-1][j],dp[i][j-w[i]]+v[i]);
        }
    }
}
</code></pre>
<p>时间复杂度O(N^2)</p>
<h4 id="贪心动态规划">贪心+动态规划</h4>
<p><strong>动态规划缺点</strong>：时间复杂度高，耗内存。当前用户小兴兴数为80，使用动态规划成本不是很高，如果是800，成本就上去了</p>
<p><strong>贪心算法缺点</strong>，在全局最优时不一定是最优解。</p>
<p><strong>核心思路</strong>：保证贪心算法在能实现全局最优的前提下，将计算的小兴兴数目最大化，在将剩余小兴兴使用动态规划去计算。</p>
<p>保证贪心算法能实现全局最优的前提：当前小兴兴数目大于50</p>
<p>即800-50=750</p>
<p>750：20*37 =740，得185兴币</p>
<p>余下60：得15兴币</p>
<p>总共：200个兴币</p>
<p>结语</p>
<p>**<code>硬件的速度提升并不是我们不去考虑开发出更高效率应用的借口，作为一名开发者，至少对自己开发的应用要有所标准！所以，开发一个程序时使用更好性能的算法是一名合格程序员应该考虑的因素。</code></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.01948211452662037" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-01 13:57">2025-03-01 13:56</span>&nbsp;
<a href="https://www.cnblogs.com/ashuaiYiRen">异人程序员</a>&nbsp;
阅读(<span id="post_view_count">7</span>)&nbsp;
评论(<span id="post_comment_count">2</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18744793" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18744793);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18744793', targetLink: 'https://www.cnblogs.com/ashuaiYiRen/p/18744793', title: '算法分享（贪心+动态规划）' })">举报</a>
</div>
        