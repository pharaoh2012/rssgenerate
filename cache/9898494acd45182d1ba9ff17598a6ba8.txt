<!----> <meta itemprop="headline" content="救命！这10个Vue3技巧藏太深了！性能翻倍+摸鱼神器全揭秘"> <meta itemprop="keywords" content="前端,JavaScript,Vue.js"> <meta itemprop="datePublished" content="2025-04-26T01:08:15.000Z"> <meta itemprop="image" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-128.png~tplv-t2oaga2asx-image.image"> <div itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><meta itemprop="name" content="前端大白话"> <meta itemprop="url" content="https://juejin.cn/user/3347379277017581"></div> <div itemprop="publisher" itemscope="itemscope" itemtype="http://schema.org/Organization"><meta itemprop="name" content="掘金"> <div itemprop="logo" itemscope="itemscope" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-white-180.png~tplv-t2oaga2asx-image.image"> <meta itemprop="width" content="180"> <meta itemprop="height" content="180"></div></div> <h1 class="article-title" data-v-7fb3e115="">
            救命！这10个Vue3技巧藏太深了！性能翻倍+摸鱼神器全揭秘
            <!----> <!----></h1> <div class="author-info-block block-hidden" data-v-7fb3e115=""><div class="author-info-box" data-v-7fb3e115=""><div class="author-name" data-v-7fb3e115=""><a href="/user/3347379277017581/posts" target="_blank" rel="" class="jj-link username username ellipsis" data-v-65b50b51="" data-v-292f6e48="" data-v-7fb3e115=""><span class="name" style="max-width:160px;" data-v-65b50b51="" data-v-292f6e48="">
    前端大白话
  </span> <!----> <!----> <!----> </a></div> <div class="meta-box" data-v-7fb3e115=""><time datetime="2025-04-26T01:08:15.000Z" title="Sat Apr 26 2025 01:08:15 GMT+0000 (Coordinated Universal Time)" class="time" data-v-7fb3e115="">
                    2025-04-26
                  </time> <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" class="read-icon" data-v-7fb3e115=""><path d="M7.90078 2.80078C4.49278 2.80078 1.74745 6.11672 0.800781 7.77469C1.74745 9.58339 4.49278 13.2008 7.90078 13.2008C11.3088 13.2008 14.0541 9.58339 15.0008 7.77469C14.0541 6.11672 11.3088 2.80078 7.90078 2.80078Z" stroke="currentColor" data-v-7fb3e115=""></path><circle cx="7.89922" cy="8.00078" r="2.2" stroke="currentColor" data-v-7fb3e115=""></circle></svg> <span class="views-count" data-v-7fb3e115="">
                    4
                  </span> <span class="read-time" data-v-7fb3e115=""><svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" data-v-7fb3e115=""><rect width="16" height="16" fill="none" data-v-7fb3e115=""></rect><circle cx="8" cy="8" r="5.65625" stroke="#8A919F" data-v-7fb3e115=""></circle><path d="M7.69141 5.18652V8.30924H10.8141" stroke="#8A919F" stroke-linecap="round" stroke-linejoin="round" data-v-7fb3e115=""></path></svg>
                    阅读7分钟
                  </span> <!----></div></div> <div style="flex:1;" data-v-7fb3e115=""></div> <!----> <!----></div> <!----> <!----> <!----> <!----> <div id="article-root" itemprop="articleBody" class="main" data-v-7fb3e115=""><div class="article-viewer markdown-body cache result"><h2 data-id="heading-0">救命！这10个Vue3技巧藏太深了！性能翻倍+摸鱼神器全揭秘</h2>
<h3 data-id="heading-1">引言</h3>
<p>前端打工人集合！是不是经常遇到这些崩溃瞬间：Vue3项目越写越卡，组件通信像走迷宫，复杂逻辑写得脑壳疼？别慌！作为在一线摸爬滚打多年的老前端，今天直接甩出10个超实用的Vue3实战技巧，手把手教你从“加班狗”变身“效率怪”，话不多说，直接上硬货！</p>
<h3 data-id="heading-2">技巧一：reactive的“平替版”shallowReactive，性能刺客退退退！</h3>
<p>有没有遇到过这种坑？明明只改了对象里的一个小属性，结果整个组件都重新渲染了！这是因为Vue3的<code>reactive</code>默认开启深度响应式，数据量大的时候性能直接拉胯。</p>
<p><strong>解决方案</strong>：试试<code>shallowReactive</code>！它只会监听对象的顶层属性变化，就像给响应式系统装上了“节能模式”，复杂数据结构下性能直接起飞！</p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-comment">// 引入shallowReactive函数</span>
<span class="hljs-keyword">import</span> { shallowReactive } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>;

<span class="hljs-comment">// 创建一个浅层响应式对象</span>
<span class="hljs-keyword">const</span> userInfo = <span class="hljs-title function_">shallowReactive</span>({
  <span class="hljs-attr">name</span>: <span class="hljs-string">'前端小白'</span>,
  <span class="hljs-attr">address</span>: {
    <span class="hljs-attr">city</span>: <span class="hljs-string">'北京'</span>,
    <span class="hljs-attr">district</span>: <span class="hljs-string">'朝阳区'</span>
  },
  <span class="hljs-attr">hobbies</span>: [<span class="hljs-string">'代码'</span>, <span class="hljs-string">'摸鱼'</span>]
});

<span class="hljs-comment">// 修改顶层属性会触发响应</span>
userInfo.<span class="hljs-property">name</span> = <span class="hljs-string">'前端大神'</span>;

<span class="hljs-comment">// 修改嵌套属性不会触发响应（注意！）</span>
<span class="hljs-comment">// userInfo.address.city = '上海'; </span>
</code></pre>
<p>在处理像表格数据、后台返回的复杂对象时，用<code>shallowReactive</code>能减少大量无效渲染，绝对是“Vue3性能优化”的必学技巧！</p>
<h3 data-id="heading-3">技巧二：ref批量解包神器toRefs，告别重复敲代码！</h3>
<p>每次从<code>reactive</code>对象里拆数据，都要写一堆<code>const name = state.name</code>？代码又臭又长还容易错！别傻了，<code>toRefs</code>就是来拯救你的！</p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-keyword">import</span> { reactive, toRefs } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>;

<span class="hljs-comment">// 创建一个响应式对象</span>
<span class="hljs-keyword">const</span> user = <span class="hljs-title function_">reactive</span>({
  <span class="hljs-attr">name</span>: <span class="hljs-string">'张三'</span>,
  <span class="hljs-attr">age</span>: <span class="hljs-number">25</span>,
  <span class="hljs-attr">email</span>: <span class="hljs-string">'zhangsan@example.com'</span>
});

<span class="hljs-comment">// 使用toRefs将响应式对象转换为多个ref</span>
<span class="hljs-keyword">const</span> { name, age, email } = <span class="hljs-title function_">toRefs</span>(user);

<span class="hljs-comment">// 修改数据，依然保持响应式</span>
name.<span class="hljs-property">value</span> = <span class="hljs-string">'李四'</span>;
</code></pre>
<p><code>toRefs</code>就像一个自动拆包机，一行代码把对象里的属性全变成独立的<code>ref</code>，模板里直接用<code>{{ name }}</code>，代码瞬间清爽！这可是“Vue3代码优化”的热门操作，赶紧学起来！</p>
<h3 data-id="heading-4">技巧三：watch的“延迟加载”模式watchEffect，告别数据抖动！</h3>
<p>用<code>watch</code>监听数据变化时，有没有遇到过刚赋值就触发回调的尴尬？或者依赖多个数据时，代码写得像意大利面？<code>watchEffect</code>专治各种不服！</p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-keyword">import</span> { ref, watchEffect } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>;

<span class="hljs-keyword">const</span> count = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>);
<span class="hljs-keyword">const</span> doubleCount = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>);

<span class="hljs-comment">// watchEffect会自动收集依赖，并且在数据变化后执行</span>
<span class="hljs-title function_">watchEffect</span>(<span class="hljs-function">() =&gt;</span> {
  doubleCount.<span class="hljs-property">value</span> = count.<span class="hljs-property">value</span> * <span class="hljs-number">2</span>;
  <span class="hljs-comment">// 只有count变化时，这里的代码才会重新执行</span>
});

count.<span class="hljs-property">value</span>++; <span class="hljs-comment">// 触发watchEffect重新计算</span>
</code></pre>
<p><code>watchEffect</code>就像一个智能管家，自动感知哪些数据被用到了，等所有数据稳定后再执行回调。处理表单联动、数据缓存这些场景，简直不要太香！妥妥的“Vue3响应式编程”热门技巧！</p>
<h3 data-id="heading-5">技巧四：Suspense组件——异步加载的“丝滑救星”</h3>
<p>加载异步组件时，页面突然白屏？用户直接骂骂咧咧退出！别慌，<code>Suspense</code>组件就是你的救星！</p>
<pre><code class="hljs language-html" lang="html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">Suspense</span>&gt;</span>
    <span class="hljs-comment">&lt;!-- 加载成功显示的内容 --&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">default</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">AsyncComponent</span> /&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>
    <span class="hljs-comment">&lt;!-- 加载中显示的占位符 --&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">fallback</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>拼命加载中...请稍后~<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">Suspense</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">
<span class="hljs-keyword">import</span> { defineAsyncComponent, <span class="hljs-title class_">Suspense</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>;

<span class="hljs-comment">// 定义异步组件</span>
<span class="hljs-keyword">const</span> <span class="hljs-title class_">AsyncComponent</span> = <span class="hljs-title function_">defineAsyncComponent</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">'./AsyncComponent.vue'</span>));

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {
  <span class="hljs-attr">components</span>: {
    <span class="hljs-title class_">Suspense</span>,
    <span class="hljs-title class_">AsyncComponent</span>
  }
};
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
</code></pre>
<p><code>Suspense</code>就像一个加载进度条，在异步组件还没加载完时，先给用户看点东西，加载完成后再无缝切换。配合“前端用户体验优化”关键词，直接拿捏流量密码！</p>
<h3 data-id="heading-6">技巧五：Teleport组件——组件“闪现”到任意位置！</h3>
<p>想把弹窗、下拉菜单渲染到<code>body</code>下，又不想改组件结构？<code>Teleport</code>组件让你实现“闪现自由”！</p>
<pre><code class="hljs language-html" lang="html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"showModal = true"</span>&gt;</span>打开弹窗<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
  <span class="hljs-comment">&lt;!-- 将弹窗传送到body下 --&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">Teleport</span> <span class="hljs-attr">to</span>=<span class="hljs-string">"body"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"showModal"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"modal"</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我是一个神奇的弹窗<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"showModal = false"</span>&gt;</span>关闭<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">Teleport</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">
<span class="hljs-keyword">import</span> { ref } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>;
<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Teleport</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>;

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {
  <span class="hljs-attr">components</span>: {
    <span class="hljs-title class_">Teleport</span>
  },
  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) {
    <span class="hljs-keyword">const</span> showModal = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">false</span>);
    <span class="hljs-keyword">return</span> {
      showModal
    };
  }
};
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
</code></pre>
<p><code>Teleport</code>就像一个任意门，不管组件在多深的层级，都能把内容“传送”到指定位置。解决样式覆盖、层级错乱这些老大难问题，绝对是“Vue3组件开发”的秘密武器！</p>
<h3 data-id="heading-7">技巧六：自定义指令v-copy——摸鱼必备！</h3>
<p>每次给按钮加个复制功能，都要写一大段<code>document.execCommand</code>？用自定义指令，一行代码搞定！</p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-keyword">import</span> { createApp } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>;

<span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>({});

<span class="hljs-comment">// 注册自定义指令v-copy</span>
app.<span class="hljs-title function_">directive</span>(<span class="hljs-string">'copy'</span>, {
  <span class="hljs-title function_">mounted</span>(<span class="hljs-params">el, binding</span>) {
    <span class="hljs-comment">// 给元素绑定点击事件</span>
    el.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">'click'</span>, <span class="hljs-function">() =&gt;</span> {
      <span class="hljs-comment">// 创建临时textarea元素</span>
      <span class="hljs-keyword">const</span> textarea = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">'textarea'</span>);
      <span class="hljs-comment">// 设置要复制的内容</span>
      textarea.<span class="hljs-property">value</span> = binding.<span class="hljs-property">value</span>;
      <span class="hljs-comment">// 将textarea添加到页面</span>
      <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(textarea);
      <span class="hljs-comment">// 选中内容</span>
      textarea.<span class="hljs-title function_">select</span>();
      <span class="hljs-comment">// 执行复制命令</span>
      <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">execCommand</span>(<span class="hljs-string">'copy'</span>);
      <span class="hljs-comment">// 移除textarea</span>
      <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">removeChild</span>(textarea);
    });
  }
});

app.<span class="hljs-title function_">mount</span>(<span class="hljs-string">'#app'</span>);
</code></pre>
<pre><code class="hljs language-html" lang="html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-copy</span>=<span class="hljs-string">"textToCopy"</span>&gt;</span>复制这段文字<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">
<span class="hljs-keyword">import</span> { ref } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>;

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {
  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) {
    <span class="hljs-keyword">const</span> textToCopy = <span class="hljs-title function_">ref</span>(<span class="hljs-string">'这是一段神奇的文字'</span>);
    <span class="hljs-keyword">return</span> {
      textToCopy
    };
  }
};
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
</code></pre>
<p>自定义指令就像给Vue加了外挂，把重复逻辑封装起来，下次直接复用！摸鱼时给同事秀一波，直接收获崇拜眼神~</p>
<h3 data-id="heading-8">技巧七：Pinia的“魔法”插件——状态管理开挂！</h3>
<p>用Pinia管理状态，但复杂业务逻辑写得七零八落？试试插件机制，让代码瞬间高大上！</p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-comment">// 创建一个Pinia插件</span>
<span class="hljs-keyword">const</span> <span class="hljs-title function_">myPlugin</span> = (<span class="hljs-params">context</span>) =&gt; {
  <span class="hljs-comment">// context包含store、app等信息</span>
  <span class="hljs-keyword">const</span> { store } = context;
  <span class="hljs-comment">// 给store添加一个自定义方法</span>
  store.<span class="hljs-property">$myMethod</span> = <span class="hljs-function">() =&gt;</span> {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">'这是插件添加的自定义方法'</span>);
  };
};

<span class="hljs-keyword">import</span> { createPinia } <span class="hljs-keyword">from</span> <span class="hljs-string">'pinia'</span>;

<span class="hljs-keyword">const</span> pinia = <span class="hljs-title function_">createPinia</span>();
<span class="hljs-comment">// 使用插件</span>
pinia.<span class="hljs-title function_">use</span>(myPlugin);

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> pinia;
</code></pre>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-comment">// 使用插件的store</span>
<span class="hljs-keyword">import</span> { defineStore } <span class="hljs-keyword">from</span> <span class="hljs-string">'pinia'</span>;

<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> useCounterStore = <span class="hljs-title function_">defineStore</span>(<span class="hljs-string">'counter'</span>, {
  <span class="hljs-attr">state</span>: <span class="hljs-function">() =&gt;</span> ({
    <span class="hljs-attr">count</span>: <span class="hljs-number">0</span>
  }),
  <span class="hljs-attr">actions</span>: {
    <span class="hljs-title function_">increment</span>(<span class="hljs-params"></span>) {
      <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span>++;
    }
  }
});
</code></pre>
<pre><code class="hljs language-html" lang="html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"increment"</span>&gt;</span>+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"store.$myMethod"</span>&gt;</span>调用插件方法<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Count: {{ count }}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">
<span class="hljs-keyword">import</span> { useCounterStore } <span class="hljs-keyword">from</span> <span class="hljs-string">'./stores/counter'</span>;
<span class="hljs-keyword">import</span> { useStore } <span class="hljs-keyword">from</span> <span class="hljs-string">'pinia'</span>;

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {
  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) {
    <span class="hljs-keyword">const</span> store = <span class="hljs-title function_">useStore</span>();
    <span class="hljs-keyword">const</span> counterStore = <span class="hljs-title function_">useCounterStore</span>();
    <span class="hljs-keyword">return</span> {
      <span class="hljs-attr">count</span>: counterStore.<span class="hljs-property">count</span>,
      <span class="hljs-attr">increment</span>: counterStore.<span class="hljs-property">increment</span>,
      store
    };
  }
};
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
</code></pre>
<p>Pinia插件就像给状态管理加了扩展包，把公共逻辑、权限校验这些功能统一管理，妥妥的“Vue3状态管理”进阶技巧！</p>
<h3 data-id="heading-9">技巧八：v-memo——列表渲染的“性能加速器”</h3>
<p>列表数据量大时，每次更新都卡顿？<code>v-memo</code>让列表渲染快到飞起！</p>
<pre><code class="hljs language-html" lang="html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>
    <span class="hljs-comment">&lt;!-- 只有当item.id或item.name变化时，才会重新渲染 --&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"item in list"</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">"item.id"</span> <span class="hljs-attr">v-memo</span>=<span class="hljs-string">"[item.id, item.name]"</span>&gt;</span>
      {{ item.name }} - {{ item.age }}
    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">
<span class="hljs-keyword">import</span> { ref } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>;

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {
  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) {
    <span class="hljs-keyword">const</span> list = <span class="hljs-title function_">ref</span>([
      { <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">'Alice'</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">25</span> },
      { <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">'Bob'</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">30</span> }
    ]);
    <span class="hljs-keyword">return</span> {
      list
    };
  }
};
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
</code></pre>
<p><code>v-memo</code>就像给列表加了缓存，只要指定的依赖项不变，就不会重新渲染。处理表格、长列表这些场景，性能直接拉满！“Vue3性能优化”必学+1！</p>
<h3 data-id="heading-10">技巧九：useIntersectionObserver——懒加载的“智能开关”</h3>
<p>图片太多导致页面加载慢？用<code>useIntersectionObserver</code>实现智能懒加载！</p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-keyword">import</span> { ref } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>;
<span class="hljs-keyword">import</span> { useIntersectionObserver } <span class="hljs-keyword">from</span> <span class="hljs-string">'@vueuse/core'</span>;

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {
  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) {
    <span class="hljs-keyword">const</span> imgRef = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">null</span>);
    <span class="hljs-keyword">const</span> isVisible = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">false</span>);

    <span class="hljs-comment">// 监听元素是否进入可视区域</span>
    <span class="hljs-keyword">const</span> { stop } = <span class="hljs-title function_">useIntersectionObserver</span>(
      imgRef,
      <span class="hljs-function">(<span class="hljs-params">[{ isIntersecting }]</span>) =&gt;</span> {
        isVisible.<span class="hljs-property">value</span> = isIntersecting;
        <span class="hljs-keyword">if</span> (isIntersecting) {
          <span class="hljs-comment">// 元素可见时执行加载逻辑</span>
          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">'图片进入可视区域，开始加载'</span>);
          <span class="hljs-title function_">stop</span>(); <span class="hljs-comment">// 停止监听</span>
        }
      },
      {
        <span class="hljs-attr">threshold</span>: <span class="hljs-number">0.1</span> <span class="hljs-comment">// 元素10%进入可视区域即触发</span>
      }
    );

    <span class="hljs-keyword">return</span> {
      imgRef,
      isVisible
    };
  }
};
</code></pre>
<pre><code class="hljs language-html" lang="html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"imgRef"</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">"isVisible? 'https://example.com/image.jpg' : ''"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">"懒加载图片"</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>
</code></pre>
<p><code>useIntersectionObserver</code>就像一个智能门卫，只有当元素进入视线范围时，才触发加载。配合“前端性能优化”“懒加载”关键词，流量直接爆！</p>
<h3 data-id="heading-11">技巧十：自定义Hooks——代码复用的“终极形态”</h3>
<p>表单验证、请求数据这些逻辑到处复制粘贴？自定义Hooks让你彻底告别重复代码！</p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-keyword">import</span> { ref } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>;

<span class="hljs-comment">// 自定义一个表单验证的Hook</span>
<span class="hljs-keyword">function</span> <span class="hljs-title function_">useFormValidation</span>(<span class="hljs-params"></span>) {
  <span class="hljs-keyword">const</span> username = <span class="hljs-title function_">ref</span>(<span class="hljs-string">''</span>);
  <span class="hljs-keyword">const</span> password = <span class="hljs-title function_">ref</span>(<span class="hljs-string">''</span>);
  <span class="hljs-keyword">const</span> errors = <span class="hljs-title function_">ref</span>({});

  <span class="hljs-keyword">const</span> <span class="hljs-title function_">validate</span> = (<span class="hljs-params"></span>) =&gt; {
    <span class="hljs-keyword">const</span> newErrors = {};
    <span class="hljs-keyword">if</span> (!username.<span class="hljs-property">value</span>) {
      newErrors.<span class="hljs-property">username</span> = <span class="hljs-string">'用户名不能为空'</span>;
    }
    <span class="hljs-keyword">if</span> (!password.<span class="hljs-property">value</span>) {
      newErrors.<span class="hljs-property">password</span> = <span class="hljs-string">'密码不能为空'</span>;
    }
    errors.<span class="hljs-property">value</span> = newErrors;
    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(newErrors).<span class="hljs-property">length</span> === <span class="hljs-number">0</span>;
  };

  <span class="hljs-keyword">return</span> {
    username,
    password,
    errors,
    validate
  };
}

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> useFormValidation;
</code></pre>
<pre><code class="hljs language-html" lang="html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"form.username"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"用户名"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"form.errors.username"</span>&gt;</span>{{ form.errors.username }}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"form.password"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"密码"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"form.errors.password"</span>&gt;</span>{{ form.errors.password }}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"submitForm"</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">
<span class="hljs-keyword">import</span> useFormValidation <span class="hljs-keyword">from</span> <span class="hljs-string">'./useFormValidation'</span>;

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {
  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) {
    <span class="hljs-keyword">const</span> form = <span class="hljs-title function_">useFormValidation</span>();

    <span class="hljs-keyword">const</span> <span class="hljs-title function_">submitForm</span> = (<span class="hljs-params"></span>) =&gt; {
      <span class="hljs-keyword">if</span> (form.<span class="hljs-title function_">validate</span>()) {
        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">'表单验证通过，提交数据'</span>);
      }
    };

    <span class="hljs-keyword">return</span> {
      form,
      submitForm
    };
  }
};
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
</code></pre>
<p>自定义Hooks就像乐高积木，把通用逻辑封装起来，哪里需要哪里搬！代码复用率直接拉满，“Vue3代码优化”的终极奥义！</p>
<p>以上就是我私藏的10个Vue3实战技巧！从性能优化到代码复用，每一个都是经过项目实战检验的“杀手锏”。赶紧动手试试，下次同事问你为啥下班这么早，就把这篇文章甩给他！要是还有其他Vue3难题，评论区告诉我，下期继续肝干货！</p>
<p>这些技巧都是项目中实打实能用的“硬货”。要是你在实践中遇到问题，或者还想解锁更多Vue3隐藏技能，随时来评论区唠唠！</p></div></div>