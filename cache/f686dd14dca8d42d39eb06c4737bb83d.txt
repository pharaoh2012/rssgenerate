
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/huangSir-devops/p/18839251" title="发布于 2025-04-21 19:44">
    <span role="heading" aria-level="2">Linux后台运行进程</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="概念">概念</h2>
<p>当我们在终端或控制台工作时，可能不希望由于运行一个作业而占住了屏幕，因为可能还有更重要的事情要做，比如阅读电子邮件。对于密集访问磁盘的进程，我们更希望它能够在每天的非负荷高峰时间段运行(例如凌晨)。为了使这些进程能够在后台运行，也就是说不在终端屏幕上运行，有几种选择方法可供使用。</p>
<h2 id="方法"><code>&amp;</code>方法</h2>
<p>使用<code>[shell] &amp;</code>可以使进程在后台运行，但是用户终端退出时，进程结束，也就是当你连接的终端断开时，你后台运行的服务、命令等自动停止<br>
例如：</p>
<pre><code># ping www.baidu.com的返回信息会输出到ping.log日志文件中，最后输出的jobnumber和PID
root@master-01:~#  ping www.baidu.com &amp;&gt;&gt; ping.log  &amp;
[1] 1254658

# 查看运行进程
root@master-01:~# jobs
[1]+  Running                 ping www.baidu.com &amp;&gt;&gt; ping.log &amp;
root@master-01:~# ps -aux | grep ping
root     1254658  0.0  0.0   9048  1344 pts/0    S    19:10   0:00 ping www.baidu.com


# 结束job，使用kill %jobid方式杀死job
root@master-01:~# kill %1
</code></pre>
<h2 id="nohup方法推荐使用"><code>nohup</code>方法，推荐使用！！！</h2>
<p>使用<code>&amp;</code>命令后，作业被提交到后台运行，当前控制台没有被占用，但是当前控制台关闭后，作业就会停止运行。<code>nohup</code>命令可以在你退出帐户之后继续运行相应的进程。nohup就是不挂起的意思( no hang up / ignoring hangup signals) 即 忽略挂起信号一直在后台执行。</p>
<h3 id="语法">语法:</h3>
<pre><code>nohup Command [ Arg … ] [&amp; ]
</code></pre>
<p>示例：</p>
<pre><code># 后台运行ping 作业，作业会将信息默认输出到当前目前下的nohup.out文件中
root@master-01:~# nohup ping www.baidu.com &amp;
[1] 1266070
root@master-01:~# nohup: ignoring input and appending output to 'nohup.out'
# 这里要按一下回车


# 查看作业
root@master-01:~# jobs
[1]+  Running                 nohup ping www.baidu.com &amp;

# 查看nohup.out文件
root@master-01:~# ll nohup.out
-rw------- 1 root root 1745 Apr 21 19:23 nohup.out

# 杀死作业
root@master-01:~# kill %1

# 查看作业是否退出
root@master-01:~# jobs
[1]+  Terminated              nohup ping www.baidu.com

</code></pre>
<h3 id="nohup将信息输出到指定文件">nohup将信息输出到指定文件</h3>
<p>语法：</p>
<pre><code>nohup command &gt;&gt; myout.file 2&gt;&amp;1 &amp;
</code></pre>
<p>解析：</p>
<ul>
<li>
<p>command&gt;&gt;out.file是将command的输出重定向到out.file文件，即输出内容不打印到屏幕上，而是追加输出到out.file文件中。</p>
</li>
<li>
<p>2&gt;&amp;1 是将标准出错 重定向到标准输出，这里的标准输出已经重定向到了out.file文件，即将标准出错也输出到out.file文件中。最后一个&amp;， 是让该命令在后台执行。</p>
</li>
</ul>
<p>示例：</p>
<pre><code># ping命令输出到ping.log日志文件中
root@master-01:~# nohup ping www.baidu.com  &gt;&gt; ping.log  2&gt;&amp;1 &amp;
[1] 1270295

# 查看ping.log文件
root@master-01:~# tail -f ping.log
64 bytes from 182.61.200.110 (182.61.200.110): icmp_seq=1 ttl=48 time=6.03 ms
64 bytes from 182.61.200.110 (182.61.200.110): icmp_seq=2 ttl=48 time=5.99 ms
64 bytes from 182.61.200.110 (182.61.200.110): icmp_seq=3 ttl=48 time=6.01 ms
64 bytes from 182.61.200.110 (182.61.200.110): icmp_seq=4 ttl=48 time=6.01 ms
64 bytes from 182.61.200.110 (182.61.200.110): icmp_seq=5 ttl=48 time=6.00 ms

# 杀掉作业进程
root@master-01:~# jobs
[1]+  Running                 nohup ping www.baidu.com &gt;&gt; ping.log 2&gt;&amp;1 &amp;
root@master-01:~# kill %1
root@master-01:~# jobs
[1]+  Terminated              nohup ping www.baidu.com &gt;&gt; ping.log 2&gt;&amp;1
</code></pre>
<h2 id="前后台进程的切换和控制">前后台进程的切换和控制</h2>
<p><code>CTRL+Z</code>键盘组合键可以使一个正在前台执行的命令放到后台，并且处于暂停状态<br>
<code>bg</code>可以将一个后台运行的命令变成在后台运行，如果后台有多个命令，可以用<code>bg %jobnumber</code>将选中的命令调出运行<br>
<code>fg</code>可以将后台的命令调至前台继续运行，如果后台有多个命令，可以用<code>fg %jobnumber</code>将选中的命令调出<br>
<img src="https://img2024.cnblogs.com/blog/3468887/202504/3468887-20250421193641183-1965428784.png" alt="image" loading="lazy"></p>
<h2 id="screen方式"><code>screen</code>方式</h2>
<p>Screen是一个全屏窗口管理器，它在多个进程（通常是交互式shell）之间多路传输物理终端。</p>
<h3 id="安装screen">安装screen</h3>
<pre><code># centos安装screen
 yum install -y screen

# 在Ubuntu上安装并使用screen
sudo apt update -y  # 更新包列表
sudo apt install screen -y # 安装screen工具
</code></pre>
<h3 id="使用方式">使用方式</h3>
<pre><code># 创建一个新的窗口
screen -S test

# 进入窗口后 执行文件
python test.py

# 退出当前窗口
ctrl+a+d   （方法1：保留当前窗口）
screen -d  （方法2：保留当前窗口）
exit       （方法3：退出程序，并关闭窗口）

# 查看窗口
screen -ls

# 重新连接窗口
screen -r id或窗口名称
</code></pre>
<p>相关快捷键</p>
<pre><code>Ctrl+a c ：创建窗口
Ctrl+a w ：窗口列表
 
Ctrl+a n ：下一个窗口
Ctrl+a p ：上一个窗口
 
Ctrl+a 0-9 ：在第0个窗口和第9个窗口之间切换
 
Ctrl+a K(大写) ：关闭当前窗口，并且切换到下一个窗口
（当退出最后一个窗口时，该终端自动终止，并且退回到原始shell状态）

exit ：关闭当前窗口，并且切换到下一个窗口
（当退出最后一个窗口时，该终端自动终止，并且退回到原始shell状态）

Ctrl+a d ：退出当前终端，返回加载screen前的shell命令状态
</code></pre>

</div>
<div id="MySignature" role="contentinfo">
    <p>本文来自博客园，作者：<a href="https://www.cnblogs.com/huangSir-devops/" target="_blank">huangSir-devops</a>，转载请注明原文链接：<a href="https://www.cnblogs.com/huangSir-devops/p/18839251" target="_blank">https://www.cnblogs.com/huangSir-devops/p/18839251</a>，微信Vac666666，欢迎交流</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.03092776561226852" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-21 19:45">2025-04-21 19:44</span>&nbsp;
<a href="https://www.cnblogs.com/huangSir-devops">huangSir-devops</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18839251);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18839251', targetLink: 'https://www.cnblogs.com/huangSir-devops/p/18839251', title: 'Linux后台运行进程' })">举报</a>
</div>
        