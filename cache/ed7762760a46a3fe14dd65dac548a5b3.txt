
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/fgaoxing/p/18704410" title="发布于 2025-02-08 15:37">
    <span role="heading" aria-level="2">Goh：一款Go语言的预编译快速模板引擎。（Benchmark排名第一）</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p><a href="https://github.com/OblivionOcean/Goh" target="_blank" rel="noopener nofollow">https://github.com/OblivionOcean/Goh</a></p>
<p>Goh 是一款Go语言的预编译快速模板引擎。</p>
<p><a href="https://github.com/OblivionOcean/Goh/blob/master/README.md" target="_blank" rel="noopener nofollow">English</a> | 简体中文</p>
<h2 id="目录">目录</h2>
<ul>
<li><a href="#%2525E7%252589%2525B9%2525E6%252580%2525A7" rel="noopener nofollow">特性</a></li>
<li><a href="#%2525E6%252580%2525A7%2525E8%252583%2525BD%2525E6%2525B5%25258B%2525E8%2525AF%252595" rel="noopener nofollow">性能测试</a></li>
<li><a href="#%2525E5%2525AE%252589%2525E8%2525A3%252585" rel="noopener nofollow">安装</a></li>
<li><a href="#%2525E4%2525BD%2525BF%2525E7%252594%2525A8" rel="noopener nofollow">使用</a></li>
<li><a href="#%2525E8%2525AF%2525AD%2525E6%2525B3%252595" rel="noopener nofollow">语法</a></li>
</ul>
<h2 id="特性">特性</h2>
<ul>
<li>预编译模板引擎，提升运行速度。</li>
<li>几乎兼容·Go语言的语法。</li>
<li>0依赖。</li>
<li>更改模板文件后自动重新编译。</li>
</ul>
<h2 id="性能测试">性能测试</h2>
<p>从 <a href="https://github.com/slinso/goTemplateBenchmark" target="_blank" rel="noopener nofollow">https://github.com/slinso/goTemplateBenchmark</a> 获取，目前为本地测试结果，代码与Hero部分的测试代码相同，BenchmarkComplexGoDirectBuffer和BenchmarkComplexGoStaticString分别是写入Buffer和静态String，所以不做计算，因此复杂模板测试排名第一</p>
<pre><code class="language-txt">goos: windows
goarch: amd64
pkg: github.com/SlinSo/goTemplateBenchmark
cpu: Intel(R) Core(TM) i7-10700 CPU @ 2.90GHz
# 复杂模板测试
BenchmarkComplexGolang-16                  36800             31428 ns/op            6562 B/op        290 allocs/op
BenchmarkComplexGolangText-16              88148             13370 ns/op            2235 B/op        107 allocs/op
BenchmarkComplexEgo-16                    486294              2411 ns/op             568 B/op         31 allocs/op
BenchmarkComplexQuicktemplate-16         1367928               878.1 ns/op             0 B/op          0 allocs/op
BenchmarkComplexTempl-16                  788673              1400 ns/op             408 B/op         11 allocs/op
BenchmarkComplexFtmpl-16                  293755              3982 ns/op            3534 B/op         38 allocs/op
BenchmarkComplexFtmplInclude-16           317361              4142 ns/op            3534 B/op         38 allocs/op
BenchmarkComplexMustache-16                90567             13748 ns/op            7274 B/op        156 allocs/op
BenchmarkComplexGorazor-16                361304              3195 ns/op            3688 B/op         24 allocs/op
BenchmarkComplexJetHTML-16                189176              5928 ns/op             532 B/op          5 allocs/op
BenchmarkComplexHero-16                  1410391               863.5 ns/op             0 B/op          0 allocs/op
BenchmarkComplexGoh-16                   2304783               535.4 ns/op             0 B/op          0 allocs/op
BenchmarkComplexJade-16                  1826784               651.8 ns/op             0 B/op          0 allocs/op
BenchmarkComplexGoDirectBuffer-16        2890996               414.6 ns/op             0 B/op          0 allocs/op
BenchmarkComplexGoHyperscript-16         1717754               778.6 ns/op             0 B/op          0 allocs/op
BenchmarkComplexGoStaticString-16       84003024                14.44 ns/op            0 B/op          0 allocs/op
# 简单模板测试
BenchmarkGolang-16                        300493              3691 ns/op             768 B/op         35 allocs/op
BenchmarkGolangText-16                   1000000              1073 ns/op             128 B/op          7 allocs/op
BenchmarkGoDirectBuffer-16              21959280                55.81 ns/op            0 B/op          0 allocs/op
BenchmarkGoCustomHtmlAPI-16             14034298                85.06 ns/op            0 B/op          0 allocs/op
BenchmarkGoFunc3-16                     14962965                68.62 ns/op            0 B/op          0 allocs/op
BenchmarkEgo-16                          2577276               464.3 ns/op            85 B/op          8 allocs/op
BenchmarkHB-16                            280617              4445 ns/op            2448 B/op         51 allocs/op
BenchmarkQuicktemplate-16                7013572               168.9 ns/op             0 B/op          0 allocs/op
BenchmarkFtmpl-16                        1000000              1000 ns/op             774 B/op         12 allocs/op
BenchmarkAce-16                           179811              6605 ns/op            1121 B/op         40 allocs/op
BenchmarkAmber-16                         268149              3800 ns/op             849 B/op         36 allocs/op
BenchmarkMustache-16                      523143              2636 ns/op            1722 B/op         30 allocs/op
BenchmarkPongo2-16                        350612              3862 ns/op            2074 B/op         32 allocs/op
BenchmarkHandlebars-16                    162860              7261 ns/op            3423 B/op         75 allocs/op
BenchmarkGorazor-16                      1562088               772.3 ns/op           512 B/op          5 allocs/op
BenchmarkSoy-16                           639549              2200 ns/op            1224 B/op         19 allocs/op
BenchmarkJetHTML-16                      1960117               600.4 ns/op             0 B/op          0 allocs/op
BenchmarkHero-16                        10452396               113.9 ns/op             0 B/op          0 allocs/op
BenchmarkGoh-16                         14838537                81.97 ns/op            0 B/op          0 allocs/op
BenchmarkJade-16                        15025261                78.85 ns/op            0 B/op          0 allocs/op
BenchmarkTempl-16                        4015622               293.1 ns/op            96 B/op          2 allocs/op
BenchmarkGomponents-16                    479330              2882 ns/op            1112 B/op         56 allocs/op
ok      github.com/SlinSo/goTemplateBenchmark   65.553s
</code></pre>
<h2 id="安装">安装</h2>
<pre><code class="language-shell">go get -u github.com/OblivionOcean/Goh
go install github.com/OblivionOcean/Goh

# 依赖
go get golang.org/x/tools/cmd/goimports
go install golang.org/x/tools/cmd/goimports
</code></pre>
<h2 id="使用">使用</h2>
<pre><code class="language-shell">~ $ Goh
Usage of ./Goh:
  -dest string
        generated golang files dir, it will be the same with source if not set
  -ext string
        source file extensions, comma splitted if many (default ".html")
  -pkg string
        the generated template package name, default is template (default "template")
  -src string
        the html template file or directory (default "./")
</code></pre>
<blockquote>
<p>完整的使用方法请参考<a href="https://github.com/OblivionOcean/Goh/tree/master/example" target="_blank" rel="noopener nofollow">实例程序</a></p>
</blockquote>
<pre><code class="language-html">&lt;%: func UserList(title string, userList []string, buf *bytes.Buffer) %&gt;
    &lt;!DOCTYPE html&gt;
    &lt;html&gt;

    &lt;head&gt;
        &lt;title&gt;
            &lt;%= title %&gt;
        &lt;/title&gt;
    &lt;/head&gt;

    &lt;body&gt;
        &lt;h1&gt;
            &lt;%= title %&gt;
        &lt;/h1&gt;
        &lt;ul&gt;
            &lt;% for _, user :=range userList { %&gt;
                &lt;% if user !="Alice" { %&gt;
                    &lt;li&gt;
                        &lt;%= user %&gt;
                    &lt;/li&gt;
                    &lt;% } %&gt;
                        &lt;% } %&gt;
        &lt;/ul&gt;
    &lt;/body&gt;

    &lt;/html&gt;
</code></pre>
<pre><code class="language-go">package main

import (
	"bytes"
	"net/http"

	"github.com/OblivionOcean/Goh/example/template"
)

func main() {
	http.HandleFunc("/users", func(w http.ResponseWriter, req *http.Request) {
		var userList = []string{
			"Alice",
			"Bob",
			"Tom",
		}

		buffer := new(bytes.Buffer)
		template.UserList("User List", userList, buffer)

		w.Write(buffer.Bytes())
	})

	http.ListenAndServe(":8080", nil)
}
</code></pre>
<h2 id="语法">语法</h2>
<blockquote>
<p>文档修改自<a href="https://github.com/shiyanhui/hero" target="_blank" rel="noopener nofollow">https://github.com/shiyanhui/hero</a></p>
</blockquote>
<p>Goh总共有九种语句，他们分别是：</p>
<ul>
<li>函数定义语句 <code>&lt;%: func define %&gt;</code>
<ul>
<li>该语句定义了该模板所对应的函数，如果一个模板中没有函数定义语句，那么最终结果不会生成对应的函数。</li>
<li>该函数最后一个参数必须为<code>*bytes.Buffer</code>或者<code>io.Writer</code>, hero会自动识别该参数的名字，并把把结果写到该参数里。</li>
<li>例:
<ul>
<li><code>&lt;%: func UserList(userList []string, buffer *bytes.Buffer) %&gt;</code></li>
<li><code>&lt;%: func UserList(userList []string, w io.Writer) %&gt;</code></li>
<li><code>&lt;%: func UserList(userList []string, w io.Writer) (int, error) %&gt;</code></li>
</ul>
</li>
</ul>
</li>
<li>模板继承语句 <code>&lt;%~ "parent template" %&gt;</code>
<ul>
<li>该语句声明要继承的模板。</li>
<li>例: <code>&lt;%~ "index.html" &gt;</code></li>
</ul>
</li>
<li>模板include语句 <code>&lt;%+ "sub template" %&gt;</code>
<ul>
<li>该语句把要include的模板加载进该模板，工作原理和<code>C++</code>中的<code>#include</code>有点类似。</li>
<li>例: <code>&lt;%+ "user.html" &gt;</code></li>
</ul>
</li>
<li>包导入语句 <code>&lt;%! go code %&gt;</code>
<ul>
<li>该语句用来声明所有在函数外的代码，包括依赖包导入、全局变量、const等。</li>
</ul>
</li>
<li>该语句不会被子模板所继承</li>
<li>例:</li>
</ul>
<pre><code class="language-go">    &lt;%!
    	import (
          	"fmt"
        	"strings"
        )

    	var a int

    	const b = "hello, world"

    	func Add(a, b int) int {
        	return a + b
    	}

    	type S struct {
        	Name string
    	}

    	func (s S) String() string {
        	return s.Name
    	}
    %&gt;
</code></pre>
<ul>
<li>块语句 <code>&lt;%@ blockName { %&gt; &lt;% } %&gt;</code></li>
</ul>
<blockquote>
<p>暂不支持该语法，请使用其他方式代替。</p>
</blockquote>
<ul>
<li>Go代码语句 <code>&lt;% go code %&gt;</code></li>
<li>该语句定义了函数内部的代码部分。</li>
<li>例:</li>
</ul>
<pre><code class="language-go">&lt;% for _, user := range userList { %&gt;
    &lt;% if user != "Alice" { %&gt;
    	&lt;%= user %&gt;
    &lt;% } %&gt;
&lt;% } %&gt;

&lt;%
    a, b := 1, 2
    c := Add(a, b)
%&gt;
</code></pre>
<ul>
<li>原生值语句 <code>&lt;%==[t] variable %&gt;</code>、<code>&lt;%- variable %&gt;</code></li>
<li>该语句把变量转换为string。</li>
<li><code>t</code>是变量的类型，hero会自动根据<code>t</code>来选择转换函数。<code>t</code>的待选值有:</li>
<li><code>b</code>: bool</li>
<li><code>i</code>: int, int8, int16, int32, int64</li>
<li><code>u</code>: byte, uint, uint8, uint16, uint32, uint64</li>
<li><code>f</code>: float32, float64</li>
<li><code>s</code>: string</li>
<li><code>bs</code>: []byte</li>
<li><code>v</code>: interface</li>
</ul>
<p>注意：</p>
<ul>
<li>如果<code>t</code>没有设置，那么<code>t</code>默认为<code>s</code>.</li>
<li>最好不要使用<code>v</code>，因为其对应的转换函数为<code>fmt.Sprintf("%v", variable)</code>，该函数很慢。</li>
<li>例:</li>
</ul>
<pre><code class="language-go">&lt;%== "hello" %&gt;
&lt;%==i 34  %&gt;
&lt;%==u Add(a, b) %&gt;
&lt;%==s user.Name %&gt;
</code></pre>
<ul>
<li>转义值语句 <code>&lt;%= statement %&gt;</code></li>
<li>该语句把变量转换为string后，又通过<code>html.EscapesString</code>记性转义。</li>
<li><code>t</code>跟上面原生值语句中的<code>t</code>一样。</li>
<li>例:</li>
</ul>
<pre><code class="language-go">&lt;%= a %&gt;
&lt;%= a + b %&gt;
&lt;%= Add(a, b) %&gt;
&lt;%= user.Name %&gt;
</code></pre>
<ul>
<li>注释语句 <code>&lt;%# note %&gt;</code></li>
<li>该语句注释相关模板，注释不会被生成到go代码里边去。</li>
<li>例: <code>&lt;# 这是一个注释 &gt;</code>.</li>
</ul>
<h2 id="感谢">感谢</h2>
<p><a href="https://github.com/shiyanhui/hero" target="_blank" rel="noopener nofollow">Shiyanhui/hero</a></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.02751397318287037" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-08 15:37">2025-02-08 15:37</span>&nbsp;
<a href="https://www.cnblogs.com/fgaoxing">Fgaoxing</a>&nbsp;
阅读(<span id="post_view_count">9</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18704410" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18704410);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18704410', targetLink: 'https://www.cnblogs.com/fgaoxing/p/18704410', title: 'Goh：一款Go语言的预编译快速模板引擎。（Benchmark排名第一）' })">举报</a>
</div>
        