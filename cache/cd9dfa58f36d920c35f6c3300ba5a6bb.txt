
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/hiit/p/18632435" title="发布于 2024-12-26 12:00">
    <span role="heading" aria-level="2">人工生命(AL:Artificial life)兰顿蚂蚁多版本代码html\go\php\python\java</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        <img src="https://img2024.cnblogs.com/blog/785716/202412/785716-20241226114206784-1286335351.png" alt="人工生命(AL:Artificial life)兰顿蚂蚁多版本代码html\go\php\python\java" class="desc_img">
        人工生命（AL:Artificial life）这一概念由美国计算机科学家、人工生命领域创始人之一克里斯托弗・盖尔・兰顿（Christopher G. Langton）提出。1986 年，兰顿提出了 “兰顿蚂蚁”（Langton's ant），它作为一个细胞自动机例子，是具有简单逻辑规则却能展现复杂动态行为的二维图灵机。次年，即 1987 年，在洛斯阿拉莫斯国家实验室（Los Alamos National Laboratory，制造了第一枚原子弹实验室）召开的 “生成以及模拟生命系统的国际会议” 上，兰顿正式提出了 “人工生命” 的概念，即使用计算机技术对生命建模，模拟生命系统。
    </div>
<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p><strong>背景介绍</strong></p>
<p>人工生命（AL:Artificial life）这一概念由美国计算机科学家、人工生命领域创始人之一克里斯托弗・盖尔・兰顿（Christopher G. Langton）提出。1986 年，兰顿提出了 “兰顿蚂蚁”（Langton's ant），它作为一个细胞自动机例子，是具有简单逻辑规则却能展现复杂动态行为的二维图灵机。次年，即 1987 年，在洛斯阿拉莫斯国家实验室（Los Alamos National Laboratory，制造了第一枚原子弹实验室）召开的 “生成以及模拟生命系统的国际会议” 上，兰顿正式提出了 “人工生命” 的概念，即使用计算机技术对生命建模，模拟生命系统。</p>
<p>目前人工生命的概念涵盖两个主要方面：其一为计算机科学范畴内的虚拟生命系统，这需要运用计算机软件工程以及人工智能技术来构建与实现；其二是借助基因工程技术对生物进行人工改造所形成的工程生物系统，其发展与合成生物学技术紧密相连，通过对生物遗传物质的精准操作与设计，赋予生物新的特性和功能，从而拓展生命的边界与可能性，推动生命科学在工程应用领域的进一步发展。</p>
<p>&nbsp;</p>
<h3>一、兰顿蚂蚁基本概念</h3>
<ul>
<li>定义：兰顿蚂蚁是一个二维图灵机，由黑白格子和一只“蚂蚁”构成。</li>
<li>提出者：克里斯托夫·兰顿</li>
<li>特性：拥有非常简单的逻辑和复杂的表现，其图灵完备性在2000年被证明。</li>
</ul>
<h3>二、规则与行为模式</h3>
<ul>
<li>
<p>规则：</p>
<ol>
<li>在平面上的正方形格子中，每个格子被填上黑色或白色。</li>
<li>有一只“蚂蚁”位于其中一个格子上，其头部朝向上下左右其中一方。</li>
<li>若蚂蚁在白格上，则左转90度，将该格改为黑格，然后向前移一步。</li>
<li>若蚂蚁在黑格上，则右转90度，将该格改为白格，然后向前移一步。</li>
</ol></li>
<li>
<p>行为模式：</p>
<ol>
<li>初始阶段：从全白的背景开始，蚂蚁在最初的数百步内会留下许多对称或重复的形状的路线。例如，假设蚂蚁初始位于一个全白平面的中心格点，头部朝上，第一步它左转90度（因为在白格上），将所在格染黑，然后向前一步。这样几步下来就可能形成一个简单的对称图案。</li>
<li>混沌阶段：随着步数的增加，蚂蚁的路线会变得类似混沌的假随机状态。这一阶段蚂蚁的行走路线看起来毫无规律，就像随意乱走一样。</li>
<li>高速公路阶段：大约经过一万步后，蚂蚁的路线会进入一个以104步为周期的无限重复的“高速公路”模式，并朝固定方向移动。如下图所示：
<p><img src="https://img2024.cnblogs.com/blog/785716/202412/785716-20241226112859336-1185318889.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
</li>
</ol></li>
</ul>
<h3>三、推广与扩展</h3>
<ul>
<li>多种颜色：除了基本的黑白两色外，兰顿蚂蚁的概念也可以被扩展到使用多种颜色。每种颜色可以定义蚂蚁左转或右转的规则，通用的表示方法是用L和R依序表示各颜色是左转还是右转。</li>
<li>其他形状：除了正方形格子外，也可以使用其他形状的格子，如六角形格子。</li>
<li>Turmites：进一步扩展是考虑Turing机器的多种状态，即蚂蚁本身的颜色可以改变。这些蚂蚁被称为“Turmites”，它们的行为模式包括产生高速公路、混乱增长和螺旋增长等。</li>
</ul>
<h3>四、意义与应用</h3>
<ul>
<li>理论意义：兰顿蚂蚁展示了简单规则下产生的复杂行为，对于理解细胞自动机、复杂系统和图灵机等领域具有重要意义。</li>
<li>实际应用：<ol>
<li>计算布尔电路：兰顿蚂蚁的轨迹可以用于计算布尔电路，通过特定的初始配置，可以实现逻辑门的功能。比如在特定的黑白格初始布局下，蚂蚁的行走轨迹能对应布尔电路中的与、或、非等逻辑操作。</li>
<li>模拟图灵机：兰顿蚂蚁可以模拟任意图灵机进行计算，显示了其通用计算能力。例如，通过设计特定的初始状态，如设定某些格子的颜色以及蚂蚁的初始位置和朝向等，可以实现简单的图灵机算法。</li>
<li>模式生成：在艺术和设计领域，兰顿蚂蚁的轨迹可以生成独特的图案和纹理，用于装饰和创意设计。例如，将蚂蚁的行走轨迹记录下来，经过艺术化处理后可以成为独特的壁纸图案。</li>
</ol></li>
</ul>
<h3>五、与其他模型的对比</h3>
<ul>
<li>与Conway的生命游戏对比：Conway的生命游戏也是一个经典的细胞自动机模型，但它主要关注的是细胞的生存和繁殖规则，而兰顿蚂蚁则更注重个体行为的动态变化和路径生成。</li>
<li>与元胞自动机对比：元胞自动机通常涉及多个细胞的状态变化，而兰顿蚂蚁则专注于单个“蚂蚁”的行为，尽管规则简单，但产生的行为却异常复杂。</li>
<li>与图灵机对比：图灵机是一种通用计算模型，而兰顿蚂蚁通过简单的规则实现了图灵完备性，展示了简单系统中的复杂计算能力。</li>
</ul>
<p><strong>下面是代码：</strong></p>
<p>兰顿蚂蚁html\go\php\python\java</p>
<p>每个版本都实现了相同的功能：</p>
<p>在网格上模拟兰顿蚂蚁的移动</p>
<p>使用黑白两色表示网格状态</p>
<p>用红色标记蚂蚁当前位置</p>
<p>支持周期性边界条件</p>
<p><img src="https://img2024.cnblogs.com/blog/785716/202412/785716-20241226111110596-1682225258.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p>HTML版本：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">&lt;!</span><span style="color: rgba(255, 0, 255, 1)">DOCTYPE html</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
<span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">html</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
<span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">head</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
    <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">meta </span><span style="color: rgba(255, 0, 0, 1)">http-equiv</span><span style="color: rgba(0, 0, 255, 1)">="Content-Type"</span><span style="color: rgba(255, 0, 0, 1)"> content</span><span style="color: rgba(0, 0, 255, 1)">="text/html; charset=UTF-8"</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
    <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">title</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>兰顿蚂蚁<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">title</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
    <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">style</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(128, 0, 0, 1)">
        html, body </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">{</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(255, 0, 0, 1)">
            margin</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">:</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 255, 1)"> 0 !important</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">;</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(255, 0, 0, 1)">
            padding</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">:</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 255, 1)"> 0 !important</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">;</span>
        <span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">}</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(128, 0, 0, 1)">
        body </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">{</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(255, 0, 0, 1)">
            display</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">:</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 255, 1)"> flex</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">;</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(255, 0, 0, 1)">
            justify-content</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">:</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 255, 1)"> center</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">;</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(255, 0, 0, 1)">
            align-items</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">:</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 255, 1)"> center</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">;</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(255, 0, 0, 1)">
            background-color</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">:</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 255, 1)"> #555555</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">;</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(255, 0, 0, 1)">
            height</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">:</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 255, 1)"> 100vh</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">;</span>
        <span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">}</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(128, 0, 0, 1)">
        canvas </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">{</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(255, 0, 0, 1)">
            display</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">:</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 255, 1)"> block</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">;</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(255, 0, 0, 1)">
            background-color</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">:</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 255, 1)"> white</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">;</span>
        <span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">}</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(128, 0, 0, 1)">
        #temp </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">{</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(255, 0, 0, 1)">
            display</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">:</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 255, 1)"> none</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">;</span>
        <span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">}</span>
    <span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">style</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">head</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
<span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">body</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
    <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">canvas </span><span style="color: rgba(255, 0, 0, 1)">id</span><span style="color: rgba(0, 0, 255, 1)">="bg"</span><span style="color: rgba(255, 0, 0, 1)"> width</span><span style="color: rgba(0, 0, 255, 1)">="640"</span><span style="color: rgba(255, 0, 0, 1)"> height</span><span style="color: rgba(0, 0, 255, 1)">="640"</span><span style="color: rgba(0, 0, 255, 1)">&gt;&lt;/</span><span style="color: rgba(128, 0, 0, 1)">canvas</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
    <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">canvas </span><span style="color: rgba(255, 0, 0, 1)">id</span><span style="color: rgba(0, 0, 255, 1)">="temp"</span><span style="color: rgba(255, 0, 0, 1)"> width</span><span style="color: rgba(0, 0, 255, 1)">="640"</span><span style="color: rgba(255, 0, 0, 1)"> height</span><span style="color: rgba(0, 0, 255, 1)">="640"</span><span style="color: rgba(0, 0, 255, 1)">&gt;&lt;/</span><span style="color: rgba(128, 0, 0, 1)">canvas</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
    <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">script</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
        <span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)">//</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)"> 处理索引边界</span>
<span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">        const cycle </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">=</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)"> (idx, max) </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">=&gt;</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)"> (idx </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">+</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)"> max) </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">%</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)"> max;

        </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)">//</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)"> 获取画布和上下文</span>
<span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">        const bg </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">=</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)"> document.getElementById(</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">"</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">bg</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">"</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">);
        const temp </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">=</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)"> document.getElementById(</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">"</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">temp</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">"</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">);
        const ctx </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">=</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)"> bg.getContext(</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">"</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">2d</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">"</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">);
        const ctempx </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">=</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)"> temp.getContext(</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">"</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">2d</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">"</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">);

        </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)">//</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)"> 设置基本参数</span>
<span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">        const bgWidth </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">=</span> <span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">640</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">;
        const bgHeight </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">=</span> <span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">640</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">;
        const size </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">=</span> <span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">2</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">;
        const speed </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">=</span> <span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">100</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">;
        const width </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">=</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)"> bgWidth </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">/</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)"> size;
        const height </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">=</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)"> bgHeight </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">/</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)"> size;

        </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)">//</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)"> 初始化画布尺寸</span>
<span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">        [bg, temp].forEach(canvas </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">=&gt;</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)"> {
            canvas.width </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">=</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)"> bgWidth;
            canvas.height </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">=</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)"> bgHeight;
        });

        </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)">//</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)"> 蚂蚁初始位置（中心点）</span>
<span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">        let antx </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">=</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)"> width </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">/</span> <span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">2</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">;
        let anty </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">=</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)"> height </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">/</span> <span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">2</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">;

        </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)">//</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)"> 方向数组：上、右、下、左</span>
<span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">        const dirs </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">=</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)"> [[</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">0</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">, </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">-</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">1</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">], [</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">1</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">, </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">0</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">], [</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">0</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">, </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">1</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">], [</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">-</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">1</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">, </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">0</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">]];
        let dir </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">=</span> <span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">0</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">;

        </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)">//</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)"> 初始化网格（使用数组技巧）</span>
<span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">        let grid </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">=</span> <span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 255, 1)">new</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)"> Array(height).fill(</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">0</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">).map(_ </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">=&gt;</span> <span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 255, 1)">new</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)"> Array(width).fill(</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">1</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">));

        </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)">//</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)"> 移动函数（dir可以是负数或大于3）</span>
<span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">        const move </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">=</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)"> (dir) </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">=&gt;</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)"> {
            dir </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">=</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)"> cycle(dir, dirs.length);
            antx </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">+=</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)"> dirs[dir][</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">0</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">];
            anty </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">+=</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)"> dirs[dir][</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">1</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">];
            antx </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">=</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)"> cycle(antx, width);
            anty </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">=</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)"> cycle(anty, height);
            </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 255, 1)">return</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)"> dir;
        }

        </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)">//</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)"> 初始化画布设置</span>
<span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">        ctx.fillStyle </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">=</span> <span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">"</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">white</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">"</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">;
        ctx.fillRect(</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">0</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">, </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">0</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">, bgWidth, bgHeight);
        ctx.scale(size, size);
        ctx.imageSmoothingEnabled </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">=</span> <span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 255, 1)">false</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">;

        </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)">//</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)"> 单步执行函数</span>
<span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">        const step </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">=</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)"> () </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">=&gt;</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)"> {
            const px </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">=</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)"> grid[anty][antx];
            </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)">//</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)"> 翻转当前格子的颜色，然后移动到下一个格子</span>
            <span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 255, 1)">if</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)"> (px </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">&gt;</span> <span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">0</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">) {
                grid[anty][antx] </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">=</span> <span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">0</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">;  </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)">//</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)"> 变黑</span>
<span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">                dir </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">=</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)"> move(dir </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">+</span> <span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">1</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">);    </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)">//</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)"> 右转</span>
<span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">            } </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 255, 1)">else</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)"> {
                grid[anty][antx] </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">=</span> <span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">7</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">;  </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)">//</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)"> 变白</span>
<span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">                dir </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">=</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)"> move(dir </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">-</span> <span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">1</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">);    </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)">//</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)"> 左转</span>
<span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">            }
        }

        </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)">//</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)"> 颜色转换函数</span>
<span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">        const intToColor </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">=</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)"> (px) </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">=&gt;</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)"> {
            </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)">//</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)"> 颜色对应关系：</span>
            <span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)">//</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)"> 0 -&gt; 黑色 [0, 0, 0] * 255</span>
            <span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)">//</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)"> 7 -&gt; 白色 [1, 1, 1] * 255</span>
            <span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)">//</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)"> 3 -&gt; 红色 [1, 0, 0] * 255</span>
            <span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)">//</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)"> 最后一个字节是透明度</span>
            <span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 255, 1)">return</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)"> [px </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">%</span> <span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">2</span> <span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">*</span> <span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">255</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">, px </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">%</span> <span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">3</span> <span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">*</span> <span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">255</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">, px </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">%</span> <span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">3</span> <span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">*</span> <span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">255</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">, </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">255</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">];
        }

        </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)">//</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)"> 绘制函数</span>
<span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">        const paint </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">=</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)"> () </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">=&gt;</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)"> {
            </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)">//</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)"> 在渲染前计算多步</span>
            <span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 255, 1)">for</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)"> (let i </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">=</span> <span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">0</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">; i </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">&lt;</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)"> speed; i</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">++</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">) {
                step();
            }
            </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)">//</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)"> 用红色标记蚂蚁的位置</span>
<span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">            const tmp </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">=</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)"> grid[anty][antx];
            grid[anty][antx] </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">=</span> <span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">3</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">;
            const bytes </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">=</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)"> grid.flat().map(intToColor).flat();
            const imgData </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">=</span> <span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 255, 1)">new</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)"> ImageData(Uint8ClampedArray.from(bytes), width, height);
            grid[anty][antx] </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">=</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)"> tmp;
            ctempx.putImageData(imgData, </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">0</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">, </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">0</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">);
            ctx.drawImage(temp, </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">0</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">, </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">0</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">);
        }

        </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)">//</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 128, 0, 1)"> 设置动画循环</span>
<span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">        setInterval(paint, </span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">20</span><span style="background-color: rgba(245, 245, 245, 1); color: rgba(0, 0, 0, 1)">);
    </span><span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">script</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">body</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">html</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span></pre>
</div>
<p>Python版本使用Pygame库实现图形界面，要运行这些代码你需要安装相应的依赖： Python: pip install pygame</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> pygame
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> numpy as np

</span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 初始化 Pygame</span>
<span style="color: rgba(0, 0, 0, 1)">pygame.init()

</span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 设置基本参数</span>
BG_WIDTH = 640<span style="color: rgba(0, 0, 0, 1)">
BG_HEIGHT </span>= 640<span style="color: rgba(0, 0, 0, 1)">
CELL_SIZE </span>= 2<span style="color: rgba(0, 0, 0, 1)">
SPEED </span>= 100<span style="color: rgba(0, 0, 0, 1)">
WIDTH </span>= BG_WIDTH //<span style="color: rgba(0, 0, 0, 1)"> CELL_SIZE
HEIGHT </span>= BG_HEIGHT //<span style="color: rgba(0, 0, 0, 1)"> CELL_SIZE

</span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 创建窗口</span>
screen =<span style="color: rgba(0, 0, 0, 1)"> pygame.display.set_mode((BG_WIDTH, BG_HEIGHT))
pygame.display.set_caption(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">兰顿蚂蚁</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)

</span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 初始化网格</span>
grid = np.ones((HEIGHT, WIDTH), dtype=<span style="color: rgba(0, 0, 0, 1)">int)

</span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 蚂蚁初始位置（中心点）</span>
ant_x = WIDTH // 2<span style="color: rgba(0, 0, 0, 1)">
ant_y </span>= HEIGHT // 2

<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 方向数组：上、右、下、左</span>
DIRS = [(0, -1), (1, 0), (0, 1), (-1<span style="color: rgba(0, 0, 0, 1)">, 0)]
dir_idx </span>=<span style="color: rgba(0, 0, 0, 1)"> 0

</span><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> move(direction):
    </span><span style="color: rgba(0, 0, 255, 1)">global</span><span style="color: rgba(0, 0, 0, 1)"> ant_x, ant_y
    direction </span>= direction %<span style="color: rgba(0, 0, 0, 1)"> len(DIRS)
    ant_x </span>= (ant_x + DIRS[direction][0]) %<span style="color: rgba(0, 0, 0, 1)"> WIDTH
    ant_y </span>= (ant_y + DIRS[direction][1]) %<span style="color: rgba(0, 0, 0, 1)"> HEIGHT
    </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> direction

</span><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> step():
    </span><span style="color: rgba(0, 0, 255, 1)">global</span><span style="color: rgba(0, 0, 0, 1)"> dir_idx
    px </span>=<span style="color: rgba(0, 0, 0, 1)"> grid[ant_y][ant_x]
    </span><span style="color: rgba(0, 0, 255, 1)">if</span> px &gt;<span style="color: rgba(0, 0, 0, 1)"> 0:
        grid[ant_y][ant_x] </span>= 0  <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 变黑</span>
        dir_idx = move(dir_idx + 1)  <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 右转</span>
    <span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">:
        grid[ant_y][ant_x] </span>= 7  <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 变白</span>
        dir_idx = move(dir_idx - 1)  <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 左转</span>

<span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> int_to_color(px):
    </span><span style="color: rgba(0, 0, 255, 1)">if</span> px == 0:  <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 黑色</span>
        <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> (0, 0, 0)
    </span><span style="color: rgba(0, 0, 255, 1)">elif</span> px == 7:  <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 白色</span>
        <span style="color: rgba(0, 0, 255, 1)">return</span> (255, 255, 255<span style="color: rgba(0, 0, 0, 1)">)
    </span><span style="color: rgba(0, 0, 255, 1)">else</span>:  <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 红色（蚂蚁位置）</span>
        <span style="color: rgba(0, 0, 255, 1)">return</span> (255<span style="color: rgba(0, 0, 0, 1)">, 0, 0)

</span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 主循环</span>
running =<span style="color: rgba(0, 0, 0, 1)"> True
clock </span>=<span style="color: rgba(0, 0, 0, 1)"> pygame.time.Clock()

</span><span style="color: rgba(0, 0, 255, 1)">while</span><span style="color: rgba(0, 0, 0, 1)"> running:
    </span><span style="color: rgba(0, 0, 255, 1)">for</span> event <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> pygame.event.get():
        </span><span style="color: rgba(0, 0, 255, 1)">if</span> event.type ==<span style="color: rgba(0, 0, 0, 1)"> pygame.QUIT:
            running </span>=<span style="color: rgba(0, 0, 0, 1)"> False

    </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 计算多步</span>
    <span style="color: rgba(0, 0, 255, 1)">for</span> _ <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> range(SPEED):
        step()

    </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 绘制</span>
    <span style="color: rgba(0, 0, 255, 1)">for</span> y <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> range(HEIGHT):
        </span><span style="color: rgba(0, 0, 255, 1)">for</span> x <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> range(WIDTH):
            color </span>=<span style="color: rgba(0, 0, 0, 1)"> int_to_color(grid[y][x])
            pygame.draw.rect(screen, color, 
                           (x </span>* CELL_SIZE, y *<span style="color: rgba(0, 0, 0, 1)"> CELL_SIZE, 
                            CELL_SIZE, CELL_SIZE))
    
    </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 标记蚂蚁位置</span>
    pygame.draw.rect(screen, (255<span style="color: rgba(0, 0, 0, 1)">, 0, 0),
                    (ant_x </span>* CELL_SIZE, ant_y *<span style="color: rgba(0, 0, 0, 1)"> CELL_SIZE,
                     CELL_SIZE, CELL_SIZE))

    pygame.display.flip()
    clock.tick(</span>50<span style="color: rgba(0, 0, 0, 1)">)

pygame.quit()</span></pre>
</div>
<p>&nbsp;</p>
<p>Java版本使用Swing实现图形界面</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">import</span> javax.swing.*<span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 0, 255, 1)">import</span> java.awt.*<span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> java.awt.image.BufferedImage;

</span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span> LangtonAnt <span style="color: rgba(0, 0, 255, 1)">extends</span><span style="color: rgba(0, 0, 0, 1)"> JPanel {
    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">final</span> <span style="color: rgba(0, 0, 255, 1)">int</span> BG_WIDTH = 640<span style="color: rgba(0, 0, 0, 1)">;
    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">final</span> <span style="color: rgba(0, 0, 255, 1)">int</span> BG_HEIGHT = 640<span style="color: rgba(0, 0, 0, 1)">;
    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">final</span> <span style="color: rgba(0, 0, 255, 1)">int</span> CELL_SIZE = 2<span style="color: rgba(0, 0, 0, 1)">;
    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">final</span> <span style="color: rgba(0, 0, 255, 1)">int</span> SPEED = 100<span style="color: rgba(0, 0, 0, 1)">;
    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">final</span> <span style="color: rgba(0, 0, 255, 1)">int</span> WIDTH = BG_WIDTH /<span style="color: rgba(0, 0, 0, 1)"> CELL_SIZE;
    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">final</span> <span style="color: rgba(0, 0, 255, 1)">int</span> HEIGHT = BG_HEIGHT /<span style="color: rgba(0, 0, 0, 1)"> CELL_SIZE;

    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)">[][] grid;
    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> antX, antY, dir;
    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">final</span> <span style="color: rgba(0, 0, 255, 1)">int</span>[][] dirs = {{0, -1}, {1, 0}, {0, 1}, {-1, 0<span style="color: rgba(0, 0, 0, 1)">}};
    </span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> BufferedImage buffer;

    </span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> LangtonAnt() {
        setPreferredSize(</span><span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> Dimension(BG_WIDTH, BG_HEIGHT));
        initializeGrid();
        buffer </span>= <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> BufferedImage(WIDTH, HEIGHT, BufferedImage.TYPE_INT_RGB);
        
        Timer timer </span>= <span style="color: rgba(0, 0, 255, 1)">new</span> Timer(20, e -&gt;<span style="color: rgba(0, 0, 0, 1)"> {
            update();
            repaint();
        });
        timer.start();
    }

    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> initializeGrid() {
        grid </span>= <span style="color: rgba(0, 0, 255, 1)">new</span> <span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)">[HEIGHT][WIDTH];
        </span><span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(0, 0, 255, 1)">int</span> y = 0; y &lt; HEIGHT; y++<span style="color: rgba(0, 0, 0, 1)">) {
            </span><span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(0, 0, 255, 1)">int</span> x = 0; x &lt; WIDTH; x++<span style="color: rgba(0, 0, 0, 1)">) {
                grid[y][x] </span>= 1<span style="color: rgba(0, 0, 0, 1)">;
            }
        }
        antX </span>= WIDTH / 2<span style="color: rgba(0, 0, 0, 1)">;
        antY </span>= HEIGHT / 2<span style="color: rgba(0, 0, 0, 1)">;
        dir </span>= 0<span style="color: rgba(0, 0, 0, 1)">;
    }

    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">int</span> move(<span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> direction) {
        direction </span>= (direction + dirs.length) %<span style="color: rgba(0, 0, 0, 1)"> dirs.length;
        antX </span>= (antX + dirs[direction][0] + WIDTH) %<span style="color: rgba(0, 0, 0, 1)"> WIDTH;
        antY </span>= (antY + dirs[direction][1] + HEIGHT) %<span style="color: rgba(0, 0, 0, 1)"> HEIGHT;
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> direction;
    }

    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> step() {
        </span><span style="color: rgba(0, 0, 255, 1)">int</span> px =<span style="color: rgba(0, 0, 0, 1)"> grid[antY][antX];
        </span><span style="color: rgba(0, 0, 255, 1)">if</span> (px &gt; 0<span style="color: rgba(0, 0, 0, 1)">) {
            grid[antY][antX] </span>= 0;  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 变黑</span>
            dir = move(dir + 1);   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 右转</span>
        } <span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)"> {
            grid[antY][antX] </span>= 7;  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 变白</span>
            dir = move(dir - 1);   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 左转</span>
<span style="color: rgba(0, 0, 0, 1)">        }
    }

    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> update() {
        </span><span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(0, 0, 255, 1)">int</span> i = 0; i &lt; SPEED; i++<span style="color: rgba(0, 0, 0, 1)">) {
            step();
        }
    }

    @Override
    </span><span style="color: rgba(0, 0, 255, 1)">protected</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> paintComponent(Graphics g) {
        </span><span style="color: rgba(0, 0, 255, 1)">super</span><span style="color: rgba(0, 0, 0, 1)">.paintComponent(g);
        
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 更新缓冲图像</span>
        <span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(0, 0, 255, 1)">int</span> y = 0; y &lt; HEIGHT; y++<span style="color: rgba(0, 0, 0, 1)">) {
            </span><span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(0, 0, 255, 1)">int</span> x = 0; x &lt; WIDTH; x++<span style="color: rgba(0, 0, 0, 1)">) {
                buffer.setRGB(x, y, grid[y][x] </span>&gt; 0 ? 0xFFFFFF : 0<span style="color: rgba(0, 0, 0, 1)">);
            }
        }
        buffer.setRGB(antX, antY, </span>0xFF0000);  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 蚂蚁位置标记为红色

        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 绘制放大后的图像</span>
        g.drawImage(buffer, 0, 0, BG_WIDTH, BG_HEIGHT, <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">);
    }

    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> main(String[] args) {
        SwingUtilities.invokeLater(() </span>-&gt;<span style="color: rgba(0, 0, 0, 1)"> {
            JFrame frame </span>= <span style="color: rgba(0, 0, 255, 1)">new</span> JFrame("兰顿蚂蚁"<span style="color: rgba(0, 0, 0, 1)">);
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            frame.add(</span><span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> LangtonAnt());
            frame.pack();
            frame.setLocationRelativeTo(</span><span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">);
            frame.setVisible(</span><span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">);
        });
    }
}</span></pre>
</div>
<p>&nbsp;</p>
<p>Go版本使用Ebiten游戏引擎实现图形界面，要运行这些代码你需要安装相应的依赖： Go: go get github.com/hajimehoshi/ebiten/v2</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">package</span><span style="color: rgba(0, 0, 0, 1)"> main

</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> (
    </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">image/color</span><span style="color: rgba(128, 0, 0, 1)">"</span>
    <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">log</span><span style="color: rgba(128, 0, 0, 1)">"</span>

    <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">github.com/hajimehoshi/ebiten/v2</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
)

</span><span style="color: rgba(0, 0, 255, 1)">const</span><span style="color: rgba(0, 0, 0, 1)"> (
    bgWidth  </span>= <span style="color: rgba(128, 0, 128, 1)">640</span><span style="color: rgba(0, 0, 0, 1)">
    bgHeight </span>= <span style="color: rgba(128, 0, 128, 1)">640</span><span style="color: rgba(0, 0, 0, 1)">
    cellSize </span>= <span style="color: rgba(128, 0, 128, 1)">2</span><span style="color: rgba(0, 0, 0, 1)">
    speed    </span>= <span style="color: rgba(128, 0, 128, 1)">100</span><span style="color: rgba(0, 0, 0, 1)">
    width    </span>= bgWidth /<span style="color: rgba(0, 0, 0, 1)"> cellSize
    height   </span>= bgHeight /<span style="color: rgba(0, 0, 0, 1)"> cellSize
)

</span><span style="color: rgba(0, 0, 255, 1)">type</span> Game <span style="color: rgba(0, 0, 255, 1)">struct</span><span style="color: rgba(0, 0, 0, 1)"> {
    grid    [][]</span><span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)">
    antX    </span><span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)">
    antY    </span><span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)">
    dir     </span><span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)">
    dirs    [][</span><span style="color: rgba(128, 0, 128, 1)">2</span>]<span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)">
    pixels  []</span><span style="color: rgba(0, 0, 255, 1)">byte</span><span style="color: rgba(0, 0, 0, 1)">
}

</span><span style="color: rgba(0, 0, 255, 1)">func</span> NewGame() *<span style="color: rgba(0, 0, 0, 1)">Game {
    g :</span>= &amp;<span style="color: rgba(0, 0, 0, 1)">Game{
        grid: </span><span style="color: rgba(0, 0, 255, 1)">make</span>([][]<span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)">, height),
        antX: width </span>/ <span style="color: rgba(128, 0, 128, 1)">2</span><span style="color: rgba(0, 0, 0, 1)">,
        antY: height </span>/ <span style="color: rgba(128, 0, 128, 1)">2</span><span style="color: rgba(0, 0, 0, 1)">,
        dirs: [][</span><span style="color: rgba(128, 0, 128, 1)">2</span>]<span style="color: rgba(0, 0, 255, 1)">int</span>{{<span style="color: rgba(128, 0, 128, 1)">0</span>, -<span style="color: rgba(128, 0, 128, 1)">1</span>}, {<span style="color: rgba(128, 0, 128, 1)">1</span>, <span style="color: rgba(128, 0, 128, 1)">0</span>}, {<span style="color: rgba(128, 0, 128, 1)">0</span>, <span style="color: rgba(128, 0, 128, 1)">1</span>}, {-<span style="color: rgba(128, 0, 128, 1)">1</span>, <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">}},
        pixels: </span><span style="color: rgba(0, 0, 255, 1)">make</span>([]<span style="color: rgba(0, 0, 255, 1)">byte</span>, width*height*<span style="color: rgba(128, 0, 128, 1)">4</span><span style="color: rgba(0, 0, 0, 1)">),
    }

    </span><span style="color: rgba(0, 0, 255, 1)">for</span> y := <span style="color: rgba(0, 0, 255, 1)">range</span><span style="color: rgba(0, 0, 0, 1)"> g.grid {
        g.grid[y] </span>= <span style="color: rgba(0, 0, 255, 1)">make</span>([]<span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)">, width)
        </span><span style="color: rgba(0, 0, 255, 1)">for</span> x := <span style="color: rgba(0, 0, 255, 1)">range</span><span style="color: rgba(0, 0, 0, 1)"> g.grid[y] {
            g.grid[y][x] </span>= <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">
        }
    }

    </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> g
}

</span><span style="color: rgba(0, 0, 255, 1)">func</span> (g *Game) move(dir <span style="color: rgba(0, 0, 255, 1)">int</span>) <span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> {
    dir </span>= (dir + <span style="color: rgba(0, 0, 255, 1)">len</span>(g.dirs)) % <span style="color: rgba(0, 0, 255, 1)">len</span><span style="color: rgba(0, 0, 0, 1)">(g.dirs)
    g.antX </span>= (g.antX + g.dirs[dir][<span style="color: rgba(128, 0, 128, 1)">0</span>] + width) %<span style="color: rgba(0, 0, 0, 1)"> width
    g.antY </span>= (g.antY + g.dirs[dir][<span style="color: rgba(128, 0, 128, 1)">1</span>] + height) %<span style="color: rgba(0, 0, 0, 1)"> height
    </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> dir
}

</span><span style="color: rgba(0, 0, 255, 1)">func</span> (g *<span style="color: rgba(0, 0, 0, 1)">Game) step() {
    px :</span>=<span style="color: rgba(0, 0, 0, 1)"> g.grid[g.antY][g.antX]
    </span><span style="color: rgba(0, 0, 255, 1)">if</span> px &gt; <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)"> {
        g.grid[g.antY][g.antX] </span>= <span style="color: rgba(128, 0, 128, 1)">0</span> <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 变黑</span>
        g.dir = g.move(g.dir + <span style="color: rgba(128, 0, 128, 1)">1</span>)  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 右转</span>
    } <span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)"> {
        g.grid[g.antY][g.antX] </span>= <span style="color: rgba(128, 0, 128, 1)">7</span> <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 变白</span>
        g.dir = g.move(g.dir - <span style="color: rgba(128, 0, 128, 1)">1</span>)  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 左转</span>
<span style="color: rgba(0, 0, 0, 1)">    }
}

</span><span style="color: rgba(0, 0, 255, 1)">func</span> (g *Game) Update() <span style="color: rgba(0, 0, 255, 1)">error</span><span style="color: rgba(0, 0, 0, 1)"> {
    </span><span style="color: rgba(0, 0, 255, 1)">for</span> i := <span style="color: rgba(128, 0, 128, 1)">0</span>; i &lt; speed; i++<span style="color: rgba(0, 0, 0, 1)"> {
        g.step()
    }
    </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> nil
}

</span><span style="color: rgba(0, 0, 255, 1)">func</span> (g *Game) Draw(screen *<span style="color: rgba(0, 0, 0, 1)">ebiten.Image) {
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 更新像素数据</span>
    <span style="color: rgba(0, 0, 255, 1)">for</span> y := <span style="color: rgba(128, 0, 128, 1)">0</span>; y &lt; height; y++<span style="color: rgba(0, 0, 0, 1)"> {
        </span><span style="color: rgba(0, 0, 255, 1)">for</span> x := <span style="color: rgba(128, 0, 128, 1)">0</span>; x &lt; width; x++<span style="color: rgba(0, 0, 0, 1)"> {
            idx :</span>= (y*width + x) * <span style="color: rgba(128, 0, 128, 1)">4</span>
            <span style="color: rgba(0, 0, 255, 1)">if</span> g.grid[y][x] &gt; <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)"> {
                g.pixels[idx] </span>= <span style="color: rgba(128, 0, 128, 1)">255</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> R</span>
                g.pixels[idx+<span style="color: rgba(128, 0, 128, 1)">1</span>] = <span style="color: rgba(128, 0, 128, 1)">255</span> <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> G</span>
                g.pixels[idx+<span style="color: rgba(128, 0, 128, 1)">2</span>] = <span style="color: rgba(128, 0, 128, 1)">255</span> <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> B</span>
                g.pixels[idx+<span style="color: rgba(128, 0, 128, 1)">3</span>] = <span style="color: rgba(128, 0, 128, 1)">255</span> <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> A</span>
            } <span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)"> {
                g.pixels[idx] </span>= <span style="color: rgba(128, 0, 128, 1)">0</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> R</span>
                g.pixels[idx+<span style="color: rgba(128, 0, 128, 1)">1</span>] = <span style="color: rgba(128, 0, 128, 1)">0</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> G</span>
                g.pixels[idx+<span style="color: rgba(128, 0, 128, 1)">2</span>] = <span style="color: rgba(128, 0, 128, 1)">0</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> B</span>
                g.pixels[idx+<span style="color: rgba(128, 0, 128, 1)">3</span>] = <span style="color: rgba(128, 0, 128, 1)">255</span> <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> A</span>
<span style="color: rgba(0, 0, 0, 1)">            }
        }
    }

    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 标记蚂蚁位置</span>
    idx := (g.antY*width + g.antX) * <span style="color: rgba(128, 0, 128, 1)">4</span><span style="color: rgba(0, 0, 0, 1)">
    g.pixels[idx] </span>= <span style="color: rgba(128, 0, 128, 1)">255</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> R</span>
    g.pixels[idx+<span style="color: rgba(128, 0, 128, 1)">1</span>] = <span style="color: rgba(128, 0, 128, 1)">0</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> G</span>
    g.pixels[idx+<span style="color: rgba(128, 0, 128, 1)">2</span>] = <span style="color: rgba(128, 0, 128, 1)">0</span>   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> B</span>
    g.pixels[idx+<span style="color: rgba(128, 0, 128, 1)">3</span>] = <span style="color: rgba(128, 0, 128, 1)">255</span> <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> A</span>
<span style="color: rgba(0, 0, 0, 1)">
    screen.WritePixels(g.pixels)
}

</span><span style="color: rgba(0, 0, 255, 1)">func</span> (g *Game) Layout(outsideWidth, outsideHeight <span style="color: rgba(0, 0, 255, 1)">int</span>) (<span style="color: rgba(0, 0, 255, 1)">int</span>, <span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)">) {
    </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> width, height
}

</span><span style="color: rgba(0, 0, 255, 1)">func</span><span style="color: rgba(0, 0, 0, 1)"> main() {
    ebiten.SetWindowSize(bgWidth, bgHeight)
    ebiten.SetWindowTitle(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">兰顿蚂蚁</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)

    </span><span style="color: rgba(0, 0, 255, 1)">if</span> err := ebiten.RunGame(NewGame()); err !=<span style="color: rgba(0, 0, 0, 1)"> nil {
        log.Fatal(err)
    }
}</span></pre>
</div>
<p>&nbsp;</p>
<p>PHP版本使用GD库生成静态图像，要运行这些代码你需要安装相应的依赖： PHP: 需要安装GD扩展</p>
<div class="cnblogs_code">
<pre>&lt;?<span style="color: rgba(0, 0, 0, 1)">php

</span><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> LangtonAnt {
    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(128, 0, 128, 1)">$width</span> = 640<span style="color: rgba(0, 0, 0, 1)">;
    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(128, 0, 128, 1)">$height</span> = 640<span style="color: rgba(0, 0, 0, 1)">;
    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(128, 0, 128, 1)">$cellSize</span> = 2<span style="color: rgba(0, 0, 0, 1)">;
    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(128, 0, 128, 1)">$speed</span> = 100<span style="color: rgba(0, 0, 0, 1)">;
    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(128, 0, 128, 1)">$gridWidth</span><span style="color: rgba(0, 0, 0, 1)">;
    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(128, 0, 128, 1)">$gridHeight</span><span style="color: rgba(0, 0, 0, 1)">;
    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(128, 0, 128, 1)">$grid</span> =<span style="color: rgba(0, 0, 0, 1)"> [];
    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(128, 0, 128, 1)">$antX</span><span style="color: rgba(0, 0, 0, 1)">;
    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(128, 0, 128, 1)">$antY</span><span style="color: rgba(0, 0, 0, 1)">;
    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(128, 0, 128, 1)">$dir</span> = 0<span style="color: rgba(0, 0, 0, 1)">;
    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(128, 0, 128, 1)">$dirs</span> = [[0, -1], [1, 0], [0, 1], [-1, 0<span style="color: rgba(0, 0, 0, 1)">]];
    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(128, 0, 128, 1)">$image</span><span style="color: rgba(0, 0, 0, 1)">;

    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> __construct() {
        </span><span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;gridWidth = <span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;width / <span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;<span style="color: rgba(0, 0, 0, 1)">cellSize;
        </span><span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;gridHeight = <span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;height / <span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;<span style="color: rgba(0, 0, 0, 1)">cellSize;
        </span><span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;antX = <span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;gridWidth / 2<span style="color: rgba(0, 0, 0, 1)">;
        </span><span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;antY = <span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;gridHeight / 2<span style="color: rgba(0, 0, 0, 1)">;

        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 初始化网格</span>
        <span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(128, 0, 128, 1)">$y</span> = 0; <span style="color: rgba(128, 0, 128, 1)">$y</span> &lt; <span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;gridHeight; <span style="color: rgba(128, 0, 128, 1)">$y</span>++<span style="color: rgba(0, 0, 0, 1)">) {
            </span><span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;grid[<span style="color: rgba(128, 0, 128, 1)">$y</span>] = <span style="color: rgba(0, 128, 128, 1)">array_fill</span>(0, <span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;gridWidth, 1<span style="color: rgba(0, 0, 0, 1)">);
        }

        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 创建图像</span>
        <span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;image = imagecreatetruecolor(<span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;width, <span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;<span style="color: rgba(0, 0, 0, 1)">height);
        imagefilledrectangle(</span><span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;image, 0, 0, <span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;width, <span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;height,<span style="color: rgba(0, 0, 0, 1)"> 
                            imagecolorallocate(</span><span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;image, 255, 255, 255<span style="color: rgba(0, 0, 0, 1)">));
    }

    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">function</span> move(<span style="color: rgba(128, 0, 128, 1)">$dir</span><span style="color: rgba(0, 0, 0, 1)">) {
        </span><span style="color: rgba(128, 0, 128, 1)">$dir</span> = (<span style="color: rgba(128, 0, 128, 1)">$dir</span> + <span style="color: rgba(0, 128, 128, 1)">count</span>(<span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;dirs)) % <span style="color: rgba(0, 128, 128, 1)">count</span>(<span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;<span style="color: rgba(0, 0, 0, 1)">dirs);
        </span><span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;antX = (<span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;antX + <span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;dirs[<span style="color: rgba(128, 0, 128, 1)">$dir</span>][0] + <span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;gridWidth) % <span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;<span style="color: rgba(0, 0, 0, 1)">gridWidth;
        </span><span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;antY = (<span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;antY + <span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;dirs[<span style="color: rgba(128, 0, 128, 1)">$dir</span>][1] + <span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;gridHeight) % <span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;<span style="color: rgba(0, 0, 0, 1)">gridHeight;
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(128, 0, 128, 1)">$dir</span><span style="color: rgba(0, 0, 0, 1)">;
    }

    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> step() {
        </span><span style="color: rgba(128, 0, 128, 1)">$px</span> = <span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;grid[<span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;antY][<span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;<span style="color: rgba(0, 0, 0, 1)">antX];
        </span><span style="color: rgba(0, 0, 255, 1)">if</span> (<span style="color: rgba(128, 0, 128, 1)">$px</span> &gt; 0<span style="color: rgba(0, 0, 0, 1)">) {
            </span><span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;grid[<span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;antY][<span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;antX] = 0;  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 变黑</span>
            <span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;<span style="color: rgba(0, 128, 128, 1)">dir</span> = <span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;move(<span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;<span style="color: rgba(0, 128, 128, 1)">dir</span> + 1);   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 右转</span>
        } <span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)"> {
            </span><span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;grid[<span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;antY][<span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;antX] = 7;  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 变白</span>
            <span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;<span style="color: rgba(0, 128, 128, 1)">dir</span> = <span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;move(<span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;<span style="color: rgba(0, 128, 128, 1)">dir</span> - 1);   <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 左转</span>
<span style="color: rgba(0, 0, 0, 1)">        }
    }

    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">function</span> run(<span style="color: rgba(128, 0, 128, 1)">$steps</span><span style="color: rgba(0, 0, 0, 1)">) {
        </span><span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(128, 0, 128, 1)">$i</span> = 0; <span style="color: rgba(128, 0, 128, 1)">$i</span> &lt; <span style="color: rgba(128, 0, 128, 1)">$steps</span>; <span style="color: rgba(128, 0, 128, 1)">$i</span>++<span style="color: rgba(0, 0, 0, 1)">) {
            </span><span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;<span style="color: rgba(0, 0, 0, 1)">step();
        }

        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 绘制网格</span>
        <span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(128, 0, 128, 1)">$y</span> = 0; <span style="color: rgba(128, 0, 128, 1)">$y</span> &lt; <span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;gridHeight; <span style="color: rgba(128, 0, 128, 1)">$y</span>++<span style="color: rgba(0, 0, 0, 1)">) {
            </span><span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(128, 0, 128, 1)">$x</span> = 0; <span style="color: rgba(128, 0, 128, 1)">$x</span> &lt; <span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;gridWidth; <span style="color: rgba(128, 0, 128, 1)">$x</span>++<span style="color: rgba(0, 0, 0, 1)">) {
                </span><span style="color: rgba(128, 0, 128, 1)">$color</span> = <span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;grid[<span style="color: rgba(128, 0, 128, 1)">$y</span>][<span style="color: rgba(128, 0, 128, 1)">$x</span>] &gt; 0 ?<span style="color: rgba(0, 0, 0, 1)"> 
                    imagecolorallocate(</span><span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;image, 255, 255, 255) :<span style="color: rgba(0, 0, 0, 1)"> 
                    imagecolorallocate(</span><span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;image, 0, 0, 0<span style="color: rgba(0, 0, 0, 1)">);
                
                imagefilledrectangle(
                    </span><span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;image,
                    <span style="color: rgba(128, 0, 128, 1)">$x</span> * <span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;cellSize,
                    <span style="color: rgba(128, 0, 128, 1)">$y</span> * <span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;cellSize,<span style="color: rgba(0, 0, 0, 1)">
                    (</span><span style="color: rgba(128, 0, 128, 1)">$x</span> + 1) * <span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;cellSize - 1,<span style="color: rgba(0, 0, 0, 1)">
                    (</span><span style="color: rgba(128, 0, 128, 1)">$y</span> + 1) * <span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;cellSize - 1,
                    <span style="color: rgba(128, 0, 128, 1)">$color</span><span style="color: rgba(0, 0, 0, 1)">
                );
            }
        }

        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 标记蚂蚁位置</span>
        <span style="color: rgba(128, 0, 128, 1)">$red</span> = imagecolorallocate(<span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;image, 255, 0, 0<span style="color: rgba(0, 0, 0, 1)">);
        imagefilledrectangle(
            </span><span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;image,
            <span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;antX * <span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;cellSize,
            <span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;antY * <span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;cellSize,<span style="color: rgba(0, 0, 0, 1)">
            (</span><span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;antX + 1) * <span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;cellSize - 1,<span style="color: rgba(0, 0, 0, 1)">
            (</span><span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;antY + 1) * <span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;cellSize - 1,
            <span style="color: rgba(128, 0, 128, 1)">$red</span><span style="color: rgba(0, 0, 0, 1)">
        );

        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 输出图像</span>
        <span style="color: rgba(0, 128, 128, 1)">header</span>('Content-Type: image/png'<span style="color: rgba(0, 0, 0, 1)">);
        imagepng(</span><span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;<span style="color: rgba(0, 0, 0, 1)">image);
        imagedestroy(</span><span style="color: rgba(128, 0, 128, 1)">$this</span>-&gt;<span style="color: rgba(0, 0, 0, 1)">image);
    }
}

</span><span style="color: rgba(128, 0, 128, 1)">$ant</span> = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> LangtonAnt();
</span><span style="color: rgba(128, 0, 128, 1)">$ant</span>-&gt;run(10000);  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 运行10000步</span></pre>
</div>
<p>综上所述，兰顿蚂蚁是一个具有深刻理论意义和广泛应用前景的细胞自动机模型。它通过简单的规则展示了复杂的行为模式，为我们理解自然界和人工系统中的复杂现象提供了新的视角和工具。未来的研究可以进一步探索兰顿蚂蚁在更多领域的应用，如生物系统的建模、城市交通规划等，以及开发新的扩展模型，以增强其计算能力和表现形式。</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.09744647328703704" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2024-12-26 12:00">2024-12-26 12:00</span>&nbsp;
<a href="https://www.cnblogs.com/hiit">HIIT</a>&nbsp;
阅读(<span id="post_view_count">12</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18632435" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18632435);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18632435', targetLink: 'https://www.cnblogs.com/hiit/p/18632435', title: '人工生命(AL:Artificial life)兰顿蚂蚁多版本代码html\go\php\python\java' })">举报</a>
</div>
        