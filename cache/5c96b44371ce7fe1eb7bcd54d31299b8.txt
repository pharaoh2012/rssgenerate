
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/deali/p/18872881" title="发布于 2025-05-12 16:33">
    <span role="heading" aria-level="2">如何清理误提交到git的历史大文件？</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="前言">前言</h2>
<p>哈喽！好久不见~</p>
<p>最近在思考转型的事情，好久没有更新文章了</p>
<p>不过看到我之前开发的视频剪辑工具 <a href="https://blog.deali.cn/Blog/Post/6a903b1c6fb2487f" target="_blank" rel="noopener nofollow">Clipify</a> 收获了不少 star ，让我想起之前画的饼似乎才实现了一点点，所以利用了周末的空闲时间给 Clipify 项目重构了一下界面以及开发一些新功能。</p>
<p>中途意识到现在使用的 WinForms + Blazor 技术栈，就像马拉火车，有种蒸汽朋克的复古感，虽然使用前端技术开发的界面很好看，但 WinForms 不能跨平台终究不是长久之计。</p>
<p>于是我便着手尝试迁移到 MAUI，虽然还不能支持 Linux，至少 Mac 还是可以的，也算是跨平台了吧…</p>
<p>然而我还没把项目跑起来呢，一不小心把一堆静态资源给提交进去了</p>
<p>就是下面这些文件</p>
<pre><code>Clipify.Maui/wwwroot/lib/
Clipify.Maui/wwwroot/css/*.min.css
Clipify.Maui/wwwroot/temp/
</code></pre>
<p>这下 <code>git push</code> 超级慢，而且会占用大量空间</p>
<p>还好最终在大模型爷爷的帮助下解决了这个问题</p>
<p>不过我想总不能老是去打扰大模型爷爷啊，问题解决了还是得记录一下，以后遇到类似的情况也好处理。</p>
<h2 id="使用git原生命令">使用git原生命令</h2>
<p>这个问题其实老生常谈了</p>
<p>网上能查到的很多文章都会告诉你可以用以下命令解决</p>
<pre><code class="language-bash">git rm -r --cached Clipify.Maui/wwwroot/lib
git rm --cached Clipify.Maui/wwwroot/css/*.min.css
git rm -r --cached Clipify.Maui/wwwroot/temp
</code></pre>
<p>这些命令会移除已提交的文件，但<strong>不会删除本地文件</strong></p>
<p>但我这样做了之后还是不行，git push 的时候还是很慢</p>
<h2 id="分析原因">分析原因</h2>
<p>那么问题来了，为什么 <code>git rm --cached</code> 没用呢？</p>
<p>原因是 <code>git rm --cached</code> 只会从当前 commit（工作区）中移除指定文件的 Git 跟踪，它不会修改过去的提交记录</p>
<p><strong>它解决的是「现在开始不要再跟踪」的问题，</strong> 但历史上它已经跟踪过的文件，Git 还会一直保留在对象数据库（<code>.git/objects</code>）里</p>
<p>我在前面几个 commit 已经把 Clipify.Maui/wwwroot/lib 这类文件夹提交进去了</p>
<p>所以这个命令对于这个场景来说是没用的😂</p>
<p>简单来说，Git 是个版本管理工具，它<strong>不会忘记</strong>你历史上做过的提交，哪怕现在 <code>git rm --cached</code> 移除了 <code>lib/</code> 文件夹</p>
<p>Git 仍然记得之前在第 N 次 commit 时曾经加入过它，所以 <code>.git</code> 目录依然保存了那些 <strong>大 blob 文件</strong>，<code>push</code> 时照样要传。</p>
<h2 id="解决方法">解决方法</h2>
<p>那么如何解决呢？</p>
<p>以前看到的方法是编写脚本，循环从每个 commit 里删除已提交的文件</p>
<p>现在不用这么麻烦了，有了 git-filter-repo 工具，这是一个 python 写的可以用来重写 git 历史记录的工具</p>
<p><a href="https://github.com/newren/git-filter-repo" target="_blank" rel="noopener nofollow">https://github.com/newren/git-filter-repo</a></p>
<p>感谢 scoop ，让我在 Windows 上也能获得类似 Linux/MacOS 类似的软件安装体验</p>
<pre><code class="language-bash"># 安装 Git Filter Repo
brew install git-filter-repo  # macOS
scoop install git-filter-repo # Windows
# 或者用 Python 安装
pip install git-filter-repo
</code></pre>
<p>使用方法</p>
<pre><code class="language-bash">git filter-repo --path Clipify.Maui/wwwroot/lib/ --invert-paths --force
</code></pre>
<p>这个命令会<strong>彻底删除历史中所有与该路径相关的文件和提交记录</strong></p>
<p><strong>重写整个 Git 提交历史</strong>之后，<strong>仓库大小会明显减小</strong>，<code>git push</code> 更快，<strong>历史提交中指定文件将完全移除</strong>。可能需要使用 <code>--force</code> 强制推送代码。</p>
<p>经过这一通操作之后，我再使用 git push 提交明显快了很多。</p>
<h2 id="拓展如何分析git提交历史里的大文件">拓展：如何分析git提交历史里的大文件</h2>
<p>用 [<code>git rev-list</code> + <code>git verify-pack</code>] 可以找出 Git 提交历史中的<strong>大对象（大文件）</strong></p>
<p>不过 git 原生的命令比较复杂</p>
<p>我还是选择借助工具的力量，这次是 git-sizer 工具</p>
<p><a href="https://github.com/github/git-sizer" target="_blank" rel="noopener nofollow">git-sizer</a>是 GitHub 官方出的工具，用于分析 Git 仓库大小、提交体积等问题。</p>
<pre><code class="language-bash">brew install git-sizer
# or
scoop install git-sizer
# or
cargo install git-sizer
</code></pre>
<blockquote>
<p>PS：再次感谢 scoop ！</p>
</blockquote>
<p>直接在项目根目录下执行 <code>git-sizer</code> 即可</p>
<p>这个工具会输出以下信息：</p>
<ul>
<li>最大的提交</li>
<li>最大的 blob（文件内容）</li>
<li>最大的目录</li>
<li>含大文件的分支</li>
<li>是否存在历史中隐藏的肥胖对象（hidden bloats）</li>
</ul>
<p>我使用这个工具生成的结果是这样</p>
<pre><code>Processing blobs: 2448                        
Processing trees: 218                        
Processing commits: 42                        
Matching commits to trees: 42                        
Processing annotated tags: 0                        
Processing references: 3                        
| Name                         | Value     | Level of concern               |
| ---------------------------- | --------- | ------------------------------ |
| Biggest objects              |           |                                |
| * Trees                      |           |                                |
|   * Maximum entries      [1] |  1.40 k   | *                              |

[1]  77b7ff2aa0456193bee83eebe9dfb76ebd4f35ac (2d9cc135f1aff0863ce2ef8ceff3cbf6984ee499:Clipify.Maui/wwwroot/lib/font-awesome/svgs/solid)
</code></pre>
<p>这样就能很方便定位到最大的文件，给 git 仓库瘦身~</p>

</div>
<div id="MySignature" role="contentinfo">
    微信公众号：「程序设计实验室」
专注于互联网热门新技术探索与团队敏捷开发实践，包括架构设计、机器学习与数据分析算法、移动端开发、Linux、Web前后端开发等，欢迎一起探讨技术，分享学习实践经验。
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.16651397016550926" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-12 16:33">2025-05-12 16:33</span>&nbsp;
<a href="https://www.cnblogs.com/deali">程序设计实验室</a>&nbsp;
阅读(<span id="post_view_count">108</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18872881);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18872881', targetLink: 'https://www.cnblogs.com/deali/p/18872881', title: '如何清理误提交到git的历史大文件？' })">举报</a>
</div>
        