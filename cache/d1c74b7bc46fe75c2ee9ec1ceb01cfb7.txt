
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/zhangmingcheng/p/19000155" title="发布于 2025-07-23 10:07">
    <span role="heading" aria-level="2">Linux dd命令详解：数据备份、转换与磁盘操作的终极工具</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h1>1. 概述</h1>
<p>Data Duplicator是Linux中一个​​底层数据操作工具​​，用于<strong>读取、转换并输出数据。</strong></p>
<p><strong><span style="color: rgba(0, 0, 0, 1)">dd 可从文件、设备或标准输入中读取数据，根据指定的格式来转换数据，再输出到文件、设备或标准输出</span></strong>，适用于备份、磁盘克隆、启动盘制作等高危操作。其强大性伴随着风险，使用时需格外谨慎。</p>
<h1>2. 命令说明</h1>
<p id="4cc3k"><strong>基本语法：</strong></p>
<div class="cnblogs_Highlighter">
<pre class="brush:bash;gutter:true;">dd if=&lt;输入文件&gt; of=&lt;输出文件&gt; [选项]</pre>
</div>
<ul>
<li>if=文件名：输入文件名，<strong>默认为标准输入</strong>。即指定源文件。</li>
<li>of=文件名：输出文件名，<strong>默认为标准输出</strong>。即指定目的文件。</li>
</ul>
<p><strong>选项说明：</strong></p>
<ul>
<li><span style="color: rgba(255, 0, 0, 1)"><strong>count=blocks</strong></span>：仅拷贝blocks个块，块大小等于ibs指定的字节数。</li>
<li>ibs=bytes：一次读入bytes个字节，即指定一个块大小为bytes个字节。<br>obs=bytes：一次输出bytes个字节，即指定一个块大小为bytes个字节。<br><span style="color: rgba(255, 0, 0, 1)"><strong>bs=bytes</strong></span>：同时设置读入/输出的块大小为bytes个字节。</li>
<li>cbs=bytes：一次转换bytes个字节，即指定转换缓冲区大小。</li>
<li>skip=blocks：从输入文件开头跳过blocks个块后再开始复制。</li>
<li>seek=blocks：从输出文件开头跳过blocks个块后再开始复制。</li>
<li>conv=&lt;关键字&gt;，关键字可以有以下11种：
<ul>
<li>conversion：用指定的参数转换文件。</li>
<li>ascii：转换ebcdic为ascii</li>
<li>ebcdic：转换ascii为ebcdic</li>
<li>ibm：转换ascii为alternate ebcdic</li>
<li>block：把每一行转换为长度为cbs，不足部分用空格填充</li>
<li>unblock：使每一行的长度都为cbs，不足部分用空格填充</li>
<li>lcase：把大写字符转换为小写字符</li>
<li>ucase：把小写字符转换为大写字符</li>
<li>swap：交换输入的每对字节</li>
<li>noerror：出错时不停止</li>
<li>notrunc：不截短输出文件</li>
<li>sync：将每个输入块填充到ibs个字节，不足部分用空（NUL）字符补齐。</li>





</ul>





</li>
<li>--help：显示帮助信息</li>
<li>--version：显示版本信息</li>





</ul>
<h1>3. 示例</h1>
<h2>3.1&nbsp;​​制作U盘启动盘</h2>
<div class="cnblogs_Highlighter">
<pre class="brush:bash;gutter:true;">dd if=ubuntu.iso of=/dev/sdb bs=4M status=progress
</pre>
</div>
<h2>3.2&nbsp;​​磁盘克隆与备份</h2>
<p><strong>​​全盘备份​​：</strong></p>
<div class="cnblogs_Highlighter">
<pre class="brush:bash;gutter:true;">dd if=/dev/sda of=/backup.img bs=4M conv=noerror,sync
</pre>
</div>
<p><strong>恢复备份​​：</strong></p>
<div class="cnblogs_Highlighter">
<pre class="brush:bash;gutter:true;">dd if=/backup.img of=/dev/sda bs=4M
</pre>
</div>
<h2>​​3.3 文件格式转换​​</h2>
<p><strong>大小写转换​​：</strong></p>
<div class="cnblogs_Highlighter">
<pre class="brush:bash;gutter:true;">dd if=source.txt of=upper.txt conv=ucase  # 转大写
</pre>
</div>
<p>由标准输入设备读入字符串，并将字符串转换成大写后，再输出到标准输出设备：　　</p>
<div class="cnblogs_Highlighter">
<pre class="brush:bash;gutter:true;">dd conv=ucase  #if默认为标准输入、of默认为标准输出
</pre>
</div>
<p>输入以上命令后按回车键，输入字符串，再按回车键，按组合键Ctrl+D 退出，出现以下结果：</p>
<div class="cnblogs_Highlighter">
<pre class="brush:bash;gutter:true;">dd conv=ucase 
Hello Linux! #输入字符串后按回车键  
HELLO LINUX! #按组合键Ctrl+D退出，转换成大写结果  
记录了0+1 的读入  
记录了0+1 的写出  
13字节（13 B）已复制，12.1558 秒，0.0 KB/s </pre>
</div>
<h2>​​3.4 生成测试文件　　</h2>
<p><strong>生成大文件：</strong></p>
<div class="cnblogs_Highlighter">
<pre class="brush:bash;gutter:true;">dd if=/dev/zero of=test bs=1G count=10   #快速生成10G的大文件
</pre>
</div>
<p><strong><strong>生成一个 1GB 的随机数据文件：</strong></strong></p>
<div class="cnblogs_Highlighter">
<pre class="brush:bash;gutter:true;">dd if=/dev/urandom of=randfile bs=1M count=1024 status=progress</pre>
</div>
<p><strong>随机生成1000个1K的小文件：</strong></p>
<div class="cnblogs_Highlighter">
<pre class="brush:bash;gutter:true;">seq 1000 | xargs -i dd if=/dev/zero of={}.dat bs=1024 count=1  #随机生成指定大小</pre>
</div>
<h2>3.5&nbsp;磁盘性能测试​​</h2>
<p><strong>测试磁盘写能力:</strong></p>
<div class="cnblogs_Highlighter">
<pre class="brush:bash;gutter:true;">time dd if=/dev/zero of=testw.dbf bs=4k count=100000 </pre>
</div>
<p>of文件只用于写，所以这个命令相当于测试磁盘的写能力。</p>
<p><strong>测试磁盘读能力:</strong></p>
<div class="cnblogs_Highlighter">
<pre class="brush:bash;gutter:true;">time dd if=/dev/sdb of=/dev/null bs=4k </pre>
</div>
<p>因为/dev/sdb是一个物理分区,对它的读取会产生IO,/dev/null是伪设备,相当于黑洞,of到该设备不会产生IO，所以这个命令的IO只发生在/dev/sdb上,也相当于测试磁盘的读能力。</p>
<p><strong>同时测试读写能力:</strong></p>
<div class="cnblogs_Highlighter">
<pre class="brush:bash;gutter:true;">time dd if=/dev/sdb of=/root/testrw.dbf bs=4k
</pre>
</div>
<p>在这个命令下,一个是物理分区,一个是实际的文件,对它们的读写都会产生IO（对/dev/sdb是读，对testrw.dbf是写），假设它们都在一个磁盘中，这个命令就相当于测试磁盘的同时读写能力。</p>
<p><strong>测试纯写入性能:</strong></p>
<div class="cnblogs_Highlighter">
<pre class="brush:bash;gutter:true;">dd if=/dev/zero of=test bs=8k count=10000  oflag=direct
</pre>
</div>
<p><strong>测试纯读取性能:</strong></p>
<div class="cnblogs_Highlighter">
<pre class="brush:bash;gutter:true;">dd if=/data/test of=/dev/null  bs=8k count=10000  iflag=direct
</pre>
</div>
<p>执行读写测试时，加上oflag=direct参数，因为没有这个参数，dd 命令有时会显示从内存中传输数据的结果速度，而不是从硬盘，无法测试出真实速度。　</p>
<p>关键参数​​：</p>
<blockquote>
<p><strong>/dev/null和/dev/zero的区别：</strong></p>
<p align="left"><strong>/dev/null：</strong>它是空设备，也称为位桶（bit bucket）、回收站、无底洞，可以向它输出任何数据。任何写入它的输出都会被抛弃。如果不想让消息以标准输出显示或写入文件，那么可以将消息重定向到位桶。</p>
<p align="left"><strong>/dev/zero：</strong>是一个输入设备，可用它来初始化文件。该设备无穷尽地提供0，可以使用任何需要的数目——设备提供的要多的多。它可以用于向设备或文件写入字符串0。</p>
</blockquote>
<h1>4. 性能优化</h1>
<h2 id="og0t">4.1 调整块大小（bs选项）</h2>
<p>选择合适的块大小可以显著提高dd的性能。块大小太小会导致系统调用频繁，增加开销；块大小太大会浪费内存。一般来说，较大的块大小（如 4MB 或 8MB）通常能提高传输速度。</p>
<div class="rno-markdown-code">
<div class="rno-markdown-code-toolbar">
<div class="rno-markdown-code-toolbar-info">
<div class="rno-markdown-code-toolbar-item is-type">
<div class="cnblogs_Highlighter">
<pre class="brush:bash;gutter:true;">dd if=/dev/sda of=/path/to/backup.img bs=4M status=progress</pre>
</div>
</div>
</div>
</div>
</div>
<h2 id="92qqn">4.2 使用直接 I/O（oflag=direct选项）</h2>
<p>使用直接 I/O 选项可以绕过操作系统的缓存，提高大文件复制的性能。这对于磁盘备份和恢复尤其有效。</p>
<div class="rno-markdown-code">
<div class="rno-markdown-code-toolbar">
<div class="rno-markdown-code-toolbar-info">
<div class="rno-markdown-code-toolbar-item is-type">
<div class="cnblogs_Highlighter">
<pre class="brush:bash;gutter:true;">dd if=/dev/sda of=/path/to/backup.img bs=4M oflag=direct status=progress</pre>
</div>
</div>
</div>
</div>
</div>
<h2>4.3 异步 I/O（oflag=dsync 或 iflag=dsync 选项）</h2>
<p>异步 I/O 可以在写入数据时不等待 I/O 操作完成，这样可以提高数据传输效率。<span style="font-family: monospace">dsync</span>选项可以保证<span class="mod-overview__keyword">数据完整性。</span></p>
<div class="rno-markdown-code">
<div class="rno-markdown-code-toolbar">
<div class="rno-markdown-code-toolbar-info">
<div class="rno-markdown-code-toolbar-item is-type">
<div class="cnblogs_Highlighter">
<pre class="brush:bash;gutter:true;">dd if=/dev/sda of=/path/to/backup.img bs=4M oflag=dsync status=progress</pre>
</div>
<h2 id="5ej0m">4.4 禁用错误检测（conv=noerror,sync&nbsp;选项）</h2>
<p><span style="font-family: &quot;PingFang SC&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px">在复制过程中，如果遇到错误，默认情况下dd</span><span style="font-family: &quot;PingFang SC&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px">会停止。使用noerror</span><span style="font-family: &quot;PingFang SC&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px">选项可以忽略错误，继续复制。sync</span><span style="font-family: &quot;PingFang SC&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px">选项可以填充错误的块，使输出文件和输入文件大小一致。</span></p>
</div>
</div>
</div>
</div>
<div class="rno-markdown-code">
<div class="rno-markdown-code-toolbar">
<div class="rno-markdown-code-toolbar-info">
<div class="rno-markdown-code-toolbar-item is-type">
<div class="cnblogs_Highlighter">
<pre class="brush:bash;gutter:true;">dd if=/dev/sda of=/path/to/backup.img bs=4M conv=noerror,sync status=progress</pre>
</div>
</div>
</div>
</div>
</div>
<h2 id="5cgab">4.5 调整输入输出缓冲区大小（ibs 和 obs选项）</h2>
<p>可以分别设置输入和输出的块大小，以优化特定设备的读写性能。例如，输入块大小为 1MB，输出块大小为 4MB：</p>
<div class="rno-markdown-code">
<div class="rno-markdown-code-toolbar">
<div class="rno-markdown-code-toolbar-info">
<div class="rno-markdown-code-toolbar-item is-type">
<div class="cnblogs_Highlighter">
<pre class="brush:bash;gutter:true;">dd if=/dev/sda of=/path/to/backup.img ibs=1M obs=4M status=progress
</pre>
</div>
<h2><span style="font-size: 0.83em">4.6 设置进度显示（status=progress&nbsp;</span><span style="font-size: 0.83em">选项）</span></h2>
</div>
</div>
</div>
</div>
<p>虽然这不会直接提高性能，但 status=progress&nbsp;选项可以实时显示进度，使你能够监控dd的执行情况，有助于识别和优化性能瓶颈。</p>
<div class="rno-markdown-code">
<div class="rno-markdown-code-toolbar">
<div class="rno-markdown-code-toolbar-info">
<div class="rno-markdown-code-toolbar-item is-type">
<div class="cnblogs_Highlighter">
<pre class="brush:bash;gutter:true;">dd if=/dev/sda of=/path/to/backup.img bs=4M status=progress</pre>
</div>
</div>
</div>
</div>
</div>
<h1>5. 总结</h1>
<p>dd是Linux系统管理的​​双刃剑​​，牢记：</p>
<ol>
<li>
<p>​​三查原则​​：查输入、查输出、查参数；</p>
</li>
<li>
<p>​​进度监控​​：必加status=progress。</p>
</li>
</ol>
<div class="hyc-common-markdown__code">
<div class="hyc-code-scrollbar">
<div class="hyc-code-scrollbar__track">
<p>参考：<a href="https://www.cnblogs.com/kongzhongqijing/articles/9049336.html" target="_blank">https://www.cnblogs.com/kongzhongqijing/articles/9049336.html</a></p>
</div>
</div>
</div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.019444444444444445" data-date-updated="2025-07-23 10:35">2025-07-23 10:07</span>&nbsp;
<a href="https://www.cnblogs.com/zhangmingcheng">人艰不拆_zmc</a>&nbsp;
阅读(<span id="post_view_count">37</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19000155);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19000155', targetLink: 'https://www.cnblogs.com/zhangmingcheng/p/19000155', title: 'Linux dd命令详解：数据备份、转换与磁盘操作的终极工具' })">举报</a>
</div>
        