
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/fzuljz/p/16192629.html" title="发布于 2025-01-12 15:18">
    <span role="heading" aria-level="2">实现windows下简单的自动化窗口管理</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<blockquote>
<p><font color="red"><strong>转载或者引用本文内容请注明来源及原作者</strong></font></p>
</blockquote>
<h2 id="一问题描述">一、问题描述</h2>
<ul>
<li>用户的应用场景非常简单：一个无主播的线上弹幕游戏，需要定时开启和关闭直播，直播平台是在Windows端的某播伴侣。</li>
</ul>
<h2 id="二分析需求">二、分析需求</h2>
<ul>
<li>首先需要定时任务管理。在特定的时间进行应用的管理，并且能够支持用户进行修改</li>
<li>其次需要在对应应用上点击验证。某播平台需要一系列的点击验证，需要在开启后进行这一连串的操作，实现上线直播</li>
<li>最后为了方便实现逻辑</li>
</ul>
<h2 id="三步步为营">三、步步为营</h2>
<ul>
<li>通过需求的分析，并且我们想要快速的在Windows上实现该需求，简单查找资料，发现Python语言能够很方便的实现。<br>
这里我们选择的环境为Python3.11，搭建好环境后开始我们的编码吧！</li>
</ul>
<h3 id="定时任务schedule">定时任务（<strong>schedule</strong>）</h3>
<ul>
<li><strong>schedule</strong>是我们常见的Python中处理定时任务的老伙计了。通过import导入我们的schedule，简单的几行代码即可实现：<pre><code class="language-py">  #每天定时开启和关闭（open_time和close_time是时间）
  #open_window和close_window是我们第二步要做的事情
  schedule.every().day.at(open_time).do(open_window) 
  schedule.every().day.at(close_time).do(close_window) 
</code></pre>
</li>
</ul>
<h3 id="软件开启os">软件开启（<strong>os</strong>）</h3>
<ul>
<li>涉及到系统级的软件开关，就需要请出我们的<strong>os</strong>大哥。通过指定我们软件exe所在的文件路径，<strong>os</strong>就能帮我将应用打开。<pre><code class="language-py">  #注意这里的cmd内的文件路径，\字符需要转义，变成\\
  cmd='你的exe的文件路径'
  myApp = os.popen(cmd)
</code></pre>
</li>
</ul>
<h3 id="窗口获取win32gui">窗口获取（<strong>win32gui</strong>）</h3>
<ul>
<li>
<p>今天的主角<strong>win32gui</strong>，这个伙伴能够做许多了不起的事情：</p>
<ul>
<li>通过窗口名获取窗口句柄（获取窗口句柄后我们才能做更多的事情）</li>
<li>通过窗口句柄+窗口下的窗口名，能够构建整个窗口树（也就是你能拿到所有展示在你面前的窗口）</li>
<li>强制聚焦我们选择的窗口句柄（唤起我们想要的窗口）</li>
<li>通过窗口句柄，获取窗口位置和大小（这个对我们的自动化点击非常有帮助）</li>
</ul>
</li>
<li>
<p>下一步，我知道我当前应用的窗口叫啥名字呢？<strong>Spy++</strong>是个非常好用的工具。</p>
<ul>
<li>Spy++继承在Visual Studio编辑器下，我们可以通过下载Visual Studio，这里的社区版本也是有带的，位于我们的工具菜单栏下：<br>
<img src="https://img2024.cnblogs.com/blog/885799/202501/885799-20250112144018008-1781647411.png" alt="" loading="lazy"></li>
<li>打开之后长这样：<br>
<img src="https://img2024.cnblogs.com/blog/885799/202501/885799-20250112144548516-1275956703.png" alt="" loading="lazy"></li>
<li>完全看不懂咋办？别慌，有搜索工具。点击Spy++窗口上方的搜索按钮\查找窗口：<br>
<img src="https://img2024.cnblogs.com/blog/885799/202501/885799-20250112144730000-20231935.png" alt="" loading="lazy"></li>
<li>将瞄准器对准我们想要的窗口就能捕获到我们的窗口了！这时候Spy++列表就能够ping到选择的窗口选项，右键窗口选项，选择属性。打开属性面板，查看对应类名和标题名。<br>
<img src="https://img2024.cnblogs.com/blog/885799/202501/885799-20250112150121050-862262752.png" alt="" loading="lazy"><br>
<img src="https://img2024.cnblogs.com/blog/885799/202501/885799-20250112150207981-1641928036.png" alt="" loading="lazy"></li>
</ul>
</li>
<li>
<p>大火烹饪！通过代码将两者串联起来。</p>
<pre><code class="language-py">  #handle为句柄
  handle = win32gui.FindWindow(类名, 标题名)
  #获取handle下的子窗口句柄
  child = win32gui.FindWindowEx(handle, None, 子标题名, None)
</code></pre>
</li>
</ul>
<h3 id="模拟点击pywinauto">模拟点击（<strong>pywinauto</strong>）</h3>
<ul>
<li><strong>pywinauto</strong>内有一个mouse对象，能够帮助我们去点击对应的窗口位置，实现基本的鼠标相关操作。<pre><code class="language-py">  #child是我们上一步骤获取的子窗口句柄，通过GetWindowRect，获取子窗口的位置
  left, top, right, bottom = win32gui.GetWindowRect(child)
  #算好位置
  click_x = left + int((right - left) * 7 / 10)
  click_y = bottom - 40
  #模拟点击位置
  pywinauto.mouse.click(coords=(click_x, click_y))
</code></pre>
</li>
</ul>
<h3 id="总结">总结</h3>
<ul>
<li>最后结合我们的Windows进程服务，一个简单的自动化窗口管理器就能够实现了。这里最重要的要点就是成功捕获到窗口句柄，句柄是重要的操作对象。通过句柄，我们能够实现更复杂更繁琐的需求。</li>
</ul>
<p><img src="https://img2023.cnblogs.com/blog/885799/202303/885799-20230327224504818-1184859417.png" alt="" loading="lazy"></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.7414560099328704" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-12 15:18">2025-01-12 15:18</span>&nbsp;
<a href="https://www.cnblogs.com/fzuljz">小小钊</a>&nbsp;
阅读(<span id="post_view_count">177</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=16192629" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(16192629);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '16192629', targetLink: 'https://www.cnblogs.com/fzuljz/p/16192629.html', title: '实现windows下简单的自动化窗口管理' })">举报</a>
</div>
        