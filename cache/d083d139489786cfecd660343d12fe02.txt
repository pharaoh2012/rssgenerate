
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/BNTang/p/18815937" title="发布于 2025-04-09 09:29">
    <span role="heading" aria-level="2">一文彻底搞懂 MCP：AI 大模型的标准化工具箱</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250409014815182-581652720.png" alt="" loading="lazy"></p>
<p><strong>MCP</strong> 最近在 <strong>AI 领域</strong> 引发了 <strong>广泛关注</strong>，特别是在 <strong>海外各大社区</strong> 中，大家热烈讨论，热度 <strong>相当高</strong>。</p>
<p>我打开了 <a href="https://trends.google.com/trends/?hl=zh-cn" target="_blank" rel="noopener nofollow">Google Trends</a>，这是一个专门用于查看全球热点趋势的网站。</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250403140339297-2144891449.png" alt="" loading="lazy"></p>
<p>输入关键词后，可以查看其<strong>热度变化</strong>。</p>
<p>我搜索了 <strong>“MCP”</strong>，它的趋势如图所示，变化<strong>非常明显</strong>。</p>
<p>各位可以<strong>参考一下</strong>。</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250403143740065-619979594.png" alt="" loading="lazy"></p>
<p>每天都有<strong>新的 MCP 工具</strong>被推出，<strong>为我们带来了无限的机会</strong>。</p>
<p>当我打开 <strong>Cline 的 MCP Servers</strong> 时，便发现了<strong>许多新工具</strong>等待探索。</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250403144126619-1378836812.gif" alt="" loading="lazy"></p>
<p>本文，我会全面介绍 <strong>MCP</strong>，包括它的<strong>基本概念</strong>、<strong>核心技术原理</strong>，以及它在<strong>实际应用中的各种场景</strong>。</p>
<p>让你轻松掌握 <strong>MCP</strong> 的<strong>所有要点</strong>。</p>
<h1 id="什么是-mcp">什么是 MCP</h1>
<p><strong>MCP</strong>（<strong>Model Context Protocol</strong>，即<strong>模型上下文协议</strong>）是由 <strong>Anthropic</strong>（<strong>Claude</strong> 的母公司）于 <strong>2024年11月</strong> 开源发布的一项 <strong>全新技术</strong>。</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250403142530983-1119836712.png" alt="" loading="lazy"></p>
<p>简单来说，<strong>MCP</strong> 是一个 <strong>AI 大模型的标准化工具箱</strong>。</p>
<p>大模型可以通过这些工具与 <strong>外界互动</strong>，<strong>获取信息</strong>，并 <strong>完成具体任务</strong>。</p>
<p>在日常工作和学习中，我们经常需要与 <strong>浏览器</strong>、<strong>文件</strong>、<strong>数据库</strong> 和 <strong>代码仓库</strong> 等外部工具进行交互。</p>
<p>在 <strong>传统方式</strong> 中，我们需要 <strong>手动截图</strong> 或 <strong>复制文本</strong>，再将其 <strong>粘贴</strong> 到 <strong>AI 窗口</strong> 中进行对话。</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250407012144428-1870177639.gif" alt="" loading="lazy"></p>
<p>大家请注意，我的插画中的箭头都是从<strong>右到左</strong>，表示内容是<strong>单向流动</strong>的，而不是双向的。</p>
<p>这意味着我们是将<strong>浏览器</strong>、<strong>文件系统</strong>或<strong>GitHub</strong>中的信息<strong>复制到 AI 中</strong>，以便进行对话时的数据流向。</p>
<p><strong>MCP</strong>通过<strong>标准化的协议</strong>，让我们不再需要<strong>手动截图</strong>、<strong>复制文本</strong>，然后再<strong>粘贴</strong>到<strong>AI 窗口</strong>中进行对话。</p>
<p>这一过程被<strong>自动化</strong>了，<strong>简化了我们的操作</strong>。</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250407012258257-761708660.png" alt="" loading="lazy"></p>
<p><strong>MCP 服务</strong>充当<strong>AI 和外部工具之间的桥梁</strong>，能够<strong>自动替代人类</strong>访问和操作这些外部工具。</p>
<p>在我的插图中，<strong>箭头为双向</strong>，表示<strong>AI 可以直接访问 MCP 服务</strong>。</p>
<p>而 <strong>MCP 服务</strong>则能访问<strong>浏览器、文件系统等数据源</strong>。</p>
<p>通过这种方式，<strong>数据能够通过 MCP 服务传输到 AI 中</strong>。</p>
<p>每个 <strong>MCP 服务</strong>（也称为 <strong>MCP Server</strong>）<strong>专注于特定的任务</strong>。</p>
<p>例如，有的服务<strong>专门用于读取和写入浏览器信息</strong>，有的<strong>负责处理本地文件</strong>，还有的<strong>用于操作 Git 仓库</strong>等。</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250407012333949-1197201473.png" alt="" loading="lazy"></p>
<p><strong>MCP Server</strong> 通常是一个<strong>在本地运行的程序</strong>，可能是用 <strong>Node.js</strong> 或 <strong>Python</strong> 开发的。</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250407012351083-1030343257.png" alt="" loading="lazy"></p>
<p><strong>大模型</strong>通过操作系统的 <strong>标准输入输出（stdio）</strong>，即我们常说的<strong>输入与输出通道</strong>，来进行<strong>信息交流与处理</strong>，并<strong>调用某个 MCP Server</strong>。</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250407012459848-645355148.png" alt="" loading="lazy"></p>
<p>它的信息格式<strong>是 JSON</strong>，这是一种<strong>常用的数据交换格式</strong>。</p>
<pre><code class="language-json">{
    "jsonrpc": "2.0",
    "id": 129,
    "method": "tools/call",
    "params": {
        "name": "search_repositories",
        "arguments": {
            "query": "user:BNTang"
        }
    }
}
</code></pre>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250408133445347-1424963920.png" alt="" loading="lazy"></p>
<p><strong>MCP Server</strong> 在接收到请求后，会通过<strong>自身的代码</strong>或<strong>外部工具的 API</strong>来执行任务。</p>
<p>从这里可以看出，<strong>MCP 协议</strong>与 <strong>Function Calling</strong> 非常相似。</p>
<p><strong>MCP 的最大优点</strong>是整合了之前各大模型不同的<strong>Function Call 标准</strong>，形成了一个<strong>统一的标准协议</strong>。</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250407014254890-1262356457.png" alt="" loading="lazy"></p>
<p>而且，<strong>不仅是 Claude</strong>，<strong>几乎所有市面上的大模型</strong>都可以接入 <strong>MCP</strong>。</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202503/2105804-20250314232609864-1284901776.png" alt="" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250409020021249-1723877213.png" alt="" loading="lazy"></p>
<p>本文，我将用<strong>免费的 DeepSeek</strong>，来进行<strong>实战演示</strong>。</p>
<h1 id="准备工作">准备工作</h1>
<p>在正式开始之前，我们需要先准备一个<strong>支持 MCP 协议的客户端</strong>。</p>
<p>目前支持 <strong>MCP 功能</strong> 的客户端并不多，主要有 <strong>AI 编程工具 Cline、Cursor、WindSurf</strong>，以及 <strong>Claude 官方客户端（Claude App）</strong> 等。</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250407023526821-2054301345.png" alt="" loading="lazy"></p>
<p>本文将以开源免费的 <strong>Cline</strong> 为例进行演示，并简要介绍如何在 <strong>Cursor</strong> 中完成相关配置。</p>
<p>首先，请访问 <strong><a href="https://code.visualstudio.com/" target="_blank" rel="noopener nofollow">VSCode</a> 官网</strong>，下载并安装 <strong>Visual Studio Code</strong>。</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250407024237815-504882435.png" alt="" loading="lazy"></p>
<p>后续我会持续分享 <strong>VSCode 的安装与使用教程</strong>，欢迎大家<strong>关注我</strong>，以便<strong>第一时间获取最新内容</strong>。</p>
<p>安装完成后，我们打开 <strong>VSCode 软件</strong>：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250407024337151-675461815.png" alt="" loading="lazy"></p>
<p>在界面左侧的工具栏中，找到并点击 <strong>Extensions 图标</strong>，即可进入<strong>插件市场</strong>，方便我们<strong>安装和管理各种实用插件</strong>。</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250407024430477-1837111240.png" alt="" loading="lazy"></p>
<p>在 <strong>Extensions 市场</strong>中搜索 <strong>Cline</strong>，找到并点击 <strong>安装插件</strong>：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250407024557282-708064575.png" alt="" loading="lazy"></p>
<p>安装完成后，在左侧面板找到 <strong>Cline</strong>，点击进入：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250407024709438-2112620695.png" alt="" loading="lazy"></p>
<p>接下来，需要为 <strong>Cline 配置一个 AI 模型</strong>。首先点击 <strong>设置（Settings）</strong>：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250407024746763-1175069026.png" alt="" loading="lazy"></p>
<p>在 <strong>模型提供商</strong>中，选择 <strong>OpenRouter</strong>，它提供免费的 <strong>DeepSeek V3 模型</strong>：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250407024932205-1698462683.png" alt="" loading="lazy"></p>
<p>在模型搜索框中，输入 <code>deepseek/deepseek-chat-free</code>，选择该模型：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250407025117875-138100417.png" alt="" loading="lazy"></p>
<p>这是免费的 <strong>DeepSeek V3 模型</strong>，大家可以选择它。</p>
<p>接下来，我们需要获取一个 <strong>API Key</strong>，点击 <strong>Get OpenRouter API Key</strong>：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250407025239331-1850321625.png" alt="" loading="lazy"></p>
<p>需要登录（可以使用 <strong>谷歌账号</strong>）：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250407025511470-1926796674.png" alt="" loading="lazy"></p>
<p>该地址在国内可以直连。</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250407025303518-1702585298.png" alt="" loading="lazy"></p>
<p>点击 <strong>Authorize 授权</strong>：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250407025628652-434680405.png" alt="" loading="lazy"></p>
<p>点击 <strong>打开 Visual Studio Code</strong>：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250407025650335-280872764.png" alt="" loading="lazy"></p>
<p>然后再点击 <strong>Open</strong>：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250407025807126-763848798.png" alt="" loading="lazy"></p>
<p>此时 <strong>OpenRouter 的 API Key 会自动填写</strong>：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250407025908447-1380851161.png" alt="" loading="lazy"></p>
<p>Cline 支持两种运行模式：<strong>Planning（规划模式）</strong> 和 <strong>Acting（执行模式）</strong>，具体说明如下：</p>
<ul>
<li><strong>Planning 模式</strong>：此模式用于生成详细的<strong>行动计划</strong>，非常适合在开始编写代码之前与 AI 进行沟通，<strong>清晰地分解任务</strong>，从而<strong>避免盲目操作导致的返工</strong>。您可以利用此模式<strong>规划新功能的实现步骤</strong>或<strong>讨论如何优化现有代码</strong>。</li>
<li><strong>Acting 模式</strong>：此模式负责根据 Planning 阶段的计划<strong>逐步执行任务</strong>。适用于在明确计划后，让 AI <strong>实际执行操作</strong>。例如，您在 Planning 模式中已确定了 API 调用的实现逻辑，然后可以切换到 Acting 模式，让 AI <strong>帮助您编写具体代码</strong>。</li>
</ul>
<p>此外，如果您希望为 Planning 和 Acting 模式<strong>分别使用不同的 AI 模型</strong>，可以勾选 <strong>“Use different models for Plan and Act modes”</strong> 选项。启用该选项后，您可以为 Planning 模式指定一个<strong>擅长分析和规划的 AI 模型</strong>，同时为 Acting 模式配置一个<strong>更适合执行操作的模型</strong>。这样，两个模式可以<strong>各司其职</strong>，提供更<strong>灵活和高效</strong>的智能辅助体验。</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250407031018487-1431680843.png" alt="" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250407031057303-502439388.png" alt="" loading="lazy"></p>
<p>为 <strong>Plan 模式</strong> 和 <strong>Act 模式</strong> 分别配置 <strong>OpenRouter 的 API Key</strong>。例如，您可以统一使用免费的 <strong>DeepSeek 模型</strong>，但后续可以根据自己的实际需求进行调整。在写代码时，可以为 <strong>Act 模式</strong> 配置 <strong>Claude 模型</strong>，而为 <strong>Plan 模式</strong> 配置 <strong>ChatGPT 模型</strong>。这样，您可以充分利用各个模型的优势，提高 <strong>工作效率</strong> 和 <strong>智能辅助体验</strong>。</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250407031122472-1602512428.png" alt="" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250407031148721-688294447.png" alt="" loading="lazy"></p>
<p><s>只需配置一次 <strong>OpenRouter 的 API Key</strong>，即可让两个模式共享该设置。</s></p>
<p>配置完成后，请点击 <strong>Save</strong> 以保存设置。</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250407031215516-1986560593.png" alt="" loading="lazy"></p>
<p>接下来，返回 <strong>Cline 的主界面</strong>，点击 <strong>New Task</strong> 开始测试。</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250407030434549-1039355737.png" alt="" loading="lazy"></p>
<p>选择 <strong>Act 模式</strong>，并勾选 <strong>Auto-append: Read, Browse</strong>。这是我之前的配置，供大家参考。</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250407030613854-851243668.png" alt="" loading="lazy"></p>
<p>发送 “你好”，查看输出效果：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250407031317885-111700563.png" alt="" loading="lazy"></p>
<p>此时 <strong>Cline 的配置已完成</strong>。</p>
<p>接下来，我们要安装 <strong>Node.js</strong>。</p>
<p>正如之前所述，<strong>MCP Server 本质上是运行在电脑上的一个 Node.js 程序</strong>，因此 <strong>Node.js 的运行环境必不可少</strong>。</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250408170016234-1815568563.png" alt="" loading="lazy"></p>
<p>安装 <strong>Node.js</strong> 可以参考 <a href="https://mp.weixin.qq.com/s/cHbR1GpIx_MUPw9WNo7kUA" target="_blank" rel="noopener nofollow">三种方式轻松搭建 Node.js</a>，至此所有准备工作就完成了。</p>
<p>接下来我们开始正式安装 MCP Server。</p>
<h1 id="第一个-mcp">第一个 MCP</h1>
<p>我们回到 <strong>Cline</strong>，点击这个 <strong>MCP Server</strong> 的小图标。</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250407222000426-1315004498.png" alt="" loading="lazy"></p>
<p>这是 <strong>Cline</strong> 新推出的 <strong>MCP Server 应用市场</strong>。</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250407222048547-1423510492.png" alt="" loading="lazy"></p>
<p>我们可以按照 <strong>星标数量（GitHub Stars）</strong> 进行排序。</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250407222123581-722155453.png" alt="" loading="lazy"></p>
<p>在这里找到非常受欢迎的 <strong>MCP 服务器</strong>。我们的第一个 <strong>MCP 服务</strong> 以这个 <strong>GitHub 项目</strong> 为例。请点击 <strong>“安装”（Install）</strong> 按钮进行安装。<img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250407222233537-1797281139.png" alt="" loading="lazy"></p>
<p>它会自动打开一个 <strong>AI 聊天窗口</strong>，您可以根据 <strong>AI 的指引</strong> 完成 <strong>MCP Server 的安装</strong>。</p>
<p>第一步是创建一个 <strong>空文件夹</strong>，用于安装的 <strong>目标位置</strong>：</p>
<pre><code class="language-json">mkdir E:\Document\Cline\MCP\github-server
</code></pre>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250407222440563-1988292504.png" alt="" loading="lazy"></p>
<p>这一步不是必需的，我将直接点击 <strong>“继续（Run Command）”按钮</strong>。</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250407222542606-192437018.png" alt="" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250407222647099-294493566.png" alt="" loading="lazy"></p>
<p>在 <strong>第二步</strong> 中，它要求我们填写一个 <strong>GitHub Token</strong>。请打开提供的 <strong>链接</strong>：<img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250407222959655-69595078.png" alt="" loading="lazy"></p>
<p>进入 <strong>GitHub 的设置页面</strong>，找到 <strong>Token 生成部分</strong>，然后点击 <strong>“创建一个新的 Token”</strong>。</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250407223101516-229473525.png" alt="" loading="lazy"></p>
<p>为 <strong>Token 命名</strong>，我这里选择 <strong>Cline</strong>。</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250407223418499-2106929976.png" alt="" loading="lazy"></p>
<p>在这里，我为它授予了 <strong>所有仓库的权限</strong>，选择了 <strong>所有仓库（</strong>All repositories<strong>）</strong>。<img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250407223517012-818556945.png" alt="" loading="lazy"></p>
<p>接下来，详细讨论一下 <strong>Repository permissions</strong>，其中包含一些 <strong>细致的权限控制选项</strong>。</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250407223635542-1014683565.png" alt="" loading="lazy"></p>
<p>这里我为他提供了创建仓库的权限，请将 <strong>Administration</strong> 权限设置为 <strong>Read and write</strong>。</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250407223717922-772225430.png" alt="" loading="lazy"></p>
<p>此外，还有 <strong>编写代码的权限</strong>，请将 <strong>Codespaces 权限</strong> 设置为 <strong>Read and write</strong>。</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250407223750679-1633075149.png" alt="" loading="lazy"></p>
<p>另外，还有一个查看仓库内容的权限，请将 <strong>Contents</strong> 权限设置为 <strong>Read and write</strong>。</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250407223848808-2036063311.png" alt="" loading="lazy"></p>
<p>你可以根据具体需求为其分配相应的 <strong>权限</strong>，设置完成后，点击 <strong>Generate token</strong> 按钮即可生成该 <strong>Token</strong>。<img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250407223940622-595954393.png" alt="" loading="lazy"></p>
<p>这样，我们的 <strong>GitHub Token</strong> 就创建完成了。请记得为令牌设置一个合适的 <strong>过期时间</strong>，否则 <strong>GitHub</strong> 会显示黄色警告 ⚠️（这里我操作得太快，没有截取对应的图片，也就不再回退了）。接下来，我们 <strong>复制生成的 Token</strong> 即可。</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250407224125099-1608211694.png" alt="" loading="lazy"></p>
<p>回到 <strong>Cline</strong>，粘贴 <strong>Token</strong> 后，点击 <strong>「发送（Send）」按钮</strong> 即可。</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250407224313479-656721062.png" alt="" loading="lazy"></p>
<p><strong>Cline</strong> 已经为我们创建好了 <strong>配置文件</strong>，点击 <strong>「Save」按钮</strong> 即可保存。</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250407224949525-163497046.png" alt="" loading="lazy"></p>
<p>Cline wants to use a tool on the GitHub MCP server，请点击 <strong>「Approve」按钮</strong>。</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250407225101870-1714877581.png" alt="" loading="lazy"></p>
<p>接下来，<strong>Cline</strong> 想使用 <strong>npx 命令</strong>，不过此步骤并非必需，我仍然点击 <strong>「继续（Run Command）」按钮</strong>。<img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250407225135448-1444494103.png" alt="" loading="lazy"></p>
<p>如果出现 <strong>「Proceed While Running（继续运行）」</strong> 提示，请点击 <strong>「Proceed While Running」按钮</strong>。</p>
<p>若您使用的是 <strong>Mac 系统</strong>，到此 <strong>安装步骤</strong> 便已完成。</p>
<p>但若您使用的是 <strong>Windows 系统</strong>，则还需额外进行一些 <strong>配置</strong>。</p>
<p>请注意，以下步骤非常重要，请务必仔细操作：</p>
<ol>
<li>打开配置文件 <code>cline_mcp_settings.json</code>，首先，将原本位于 <code>"command"</code> 中的 <code>npx</code> 移动到 <code>"args"</code> 数组中：</li>
</ol>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250407232333405-126932145.png" alt="" loading="lazy"></p>
<ol start="2">
<li>将 <code>"command"</code> 的值修改为 <code>cmd</code></li>
</ol>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250407232436886-226308933.png" alt="" loading="lazy"></p>
<ol start="3">
<li>在 <code>"args"</code> 数组中新增一行 <code>/c</code></li>
</ol>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250407232544063-1194749208.png" alt="" loading="lazy"></p>
<p>最终的 <strong>配置文件</strong> 参考如下：</p>
<pre><code class="language-json">{
  "mcpServers": {
    "github.com/modelcontextprotocol/servers/tree/main/src/github": {
      "command": "cmd",
      "args": [
        "/c",
        "npx",
        "-y",
        "@modelcontextprotocol/server-github"
      ],
      "env": {
        "GITHUB_PERSONAL_ACCESS_TOKEN": "脱敏处理",
      },
      "disabled": false,
      "autoApprove": []
    }
  }
}
</code></pre>
<p>保存 <strong>配置文件</strong> 后，回到 <strong>MCP Server</strong> 的 <strong>「Installed」选项卡</strong>，此时 <strong>GitHub MCP Server</strong> 已经显示为 <strong>绿色状态</strong>，表示安装成功。</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250407232744387-1748478789.png" alt="" loading="lazy"></p>
<p>至此，<strong>MCP Server</strong> 的 <strong>配置</strong> 已成功完成。实际上，配置 <strong>MCP Server</strong> 最核心的就是上述的 <strong>配置文件</strong>，前面的 <strong>图形界面步骤</strong> 并非必须，后续直接编辑 <strong>配置文件</strong> 也可以完成 <strong>MCP Server</strong> 的配置。</p>
<p>接下来，我们进行一次简单的 <strong>测试</strong>：</p>
<ol>
<li>点击界面上的 <strong>「Done」按钮</strong>：</li>
</ol>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250407232934822-1592579393.png" alt="" loading="lazy"></p>
<ol start="2">
<li>新建一个对话，点击 <strong>「New Task」按钮</strong>：</li>
</ol>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250407232948874-1334830529.png" alt="" loading="lazy"></p>
<ol start="3">
<li>向 <strong>AI</strong> 提问，例如：</li>
</ol>
<blockquote>
<p>我的名字是 BNTang，我在 GitHub 上有哪些仓库？</p>
</blockquote>
<p>回车发送问题：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250407233127728-1458712345.png" alt="" loading="lazy"></p>
<p>我们无需手动指定 <strong>MCP 服务</strong> 或 <strong>工具</strong>，<strong>AI</strong> 会自动智能地选择最合适的 <strong>工具</strong> 进行处理。在发送问题后，<strong>AI</strong> 请求调用名为 <strong><code>search_repositories</code></strong> 的 <strong>MCP 工具</strong>：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250407233414818-117022591.png" alt="" loading="lazy"></p>
<ol start="4">
<li>点击 <strong>「Approve」按钮</strong>，允许 <strong>工具</strong> 调用：</li>
</ol>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250407233353680-262083111.png" alt="" loading="lazy"></p>
<p>此时，<strong>Cline</strong> 会调用 <strong>MCP 工具</strong> 并获取数据：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250407233935635-936171695.png" alt="" loading="lazy"></p>
<ol start="5">
<li>最终，<strong>大模型</strong> 会将获取到的数据进行整理，并返回 <strong>最终结果</strong>：</li>
</ol>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250407234039040-1929684856.png" alt="" loading="lazy"></p>
<p>如图所示，<strong>AI</strong> 列举了我的 <strong>14 个公开仓库</strong>，说明 <strong>MCP Server</strong> 已成功配置并正常运行。</p>
<p>接下来，我们打开一个 <strong>Powershell</strong> 界面：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250408124013592-681760368.png" alt="" loading="lazy"></p>
<p>我们一起来探究一下 <strong>MCP</strong> 的本质究竟是什么。我先粘贴三行 <strong>命令</strong>：</p>
<pre><code class="language-bash">$json = '{"jsonrpc":"2.0","id":123,"method":"tools/call","params":{"name":"search_repositories","arguments":{"query":"user:BNTang"}}}'

$env:GITHUB_PERSONAL_ACCESS_TOKEN = "脱敏处理"

echo $json | npx -y @modelcontextprotocol/server-github
</code></pre>
<ul>
<li><strong>第一行</strong>定义了一个 <strong>JSON 字符串</strong>，它正是客户端（<strong>Cline</strong>）向 <strong>MCP Server</strong> 传递的参数。我们看到 <strong>JSON</strong> 中的 <strong>method</strong> 字段是 "<strong>tools/call</strong>"，表示调用工具；<strong>params</strong> 中的工具名为 "<strong>search_repositories</strong>"，即搜索仓库；<strong>query</strong> 则是具体的搜索参数，这里是查询 <strong>GitHub 用户</strong> "<strong>BNTang</strong>"。</li>
<li><strong>第二行</strong>设置了运行时的 <strong>环境变量</strong>，即 <strong>GitHub</strong> 的 <strong>个人访问令牌</strong>（已脱敏）。</li>
<li><strong>第三行</strong>则通过 <strong>管道符</strong>，将刚才定义的 <strong>JSON 参数</strong>传递给 <strong>MCP Server</strong>（一个基于 <strong>NodeJS</strong> 的程序）执行。</li>
</ul>
<p>现在我们 <strong>运行</strong> 一下上述 <strong>命令</strong>：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250408124943251-1989129400.png" alt="" loading="lazy"></p>
<p>可以看到，成功获取了 <strong>GitHub</strong> 上用户 "<strong>BNTang</strong>" 的 <strong>仓库信息</strong>。</p>
<p>通过这个例子，我们发现 <strong>MCP</strong> 本质上并没有什么神秘之处。它的核心原理，就是客户端通过 <strong>命令行</strong> 调用本地（或服务器上）的 <strong>NodeJS</strong> 或 <strong>Python</strong> 程序，执行特定操作后再返回结果。</p>
<p>接下来，我们再 <strong>测试</strong> 一个新的 <strong>任务</strong>：创建一个名为 "<strong>cline_test</strong>" 的 <strong>GitHub 仓库</strong>。</p>
<p>我在 <strong>Cline</strong> 的 <strong>问答输入框</strong> 中输入：</p>
<blockquote>
<p>请帮我创建一个 GitHub 仓库，名字叫做 cline_test</p>
</blockquote>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250408125323686-683244588.png" alt="" loading="lazy"></p>
<p>此时，<strong>Cline</strong> 会询问我是否允许它调用 <strong>MCP Server</strong>，我点击 <strong>Approve</strong>：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250408125402281-555526805.png" alt="" loading="lazy"></p>
<p>随后，<strong>Cline</strong> 显示 <strong>仓库创建成功</strong>，并返回了 <strong>仓库地址</strong>：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250408125433035-1518723153.png" alt="" loading="lazy"></p>
<p>点击 <strong>链接</strong>，我们跳转到 <strong>GitHub</strong> 查看一下：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250408125525381-1484367818.png" alt="" loading="lazy"></p>
<p><strong>确认</strong> 仓库已经 <strong>成功创建</strong>：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250408125544646-1952741677.png" alt="" loading="lazy"></p>
<p>我们注意到，单个 <strong>MCP Server</strong> <strong>工具</strong> 提供了多达 <strong>26 项强大的功能</strong>，其中包括但不限于：</p>
<ul>
<li><strong>创建或更新文件</strong> （<code>create_or_update_file</code>）</li>
<li><strong>搜索仓库</strong> （<code>search_repositories</code>）</li>
<li><strong>创建仓库</strong> （<code>create_repository</code>）</li>
<li><strong>获取文件内容</strong> （<code>get_file_contents</code>）</li>
<li><strong>推送文件</strong> （<code>push_files</code>）</li>
</ul>
<p>这些功能几乎涵盖了所有与 GitHub 交互的需求，一个 MCP 工具就可以轻松处理这些操作。</p>
<p>更重要的是，我们只需使用 <strong>自然语言</strong>，就能直接指挥 <strong>AI</strong> 完成这些工作，全程无需离开 <strong>VSCode</strong>，极大提升了我们的 <strong>工作效率</strong>。</p>
<p>通过以上示例，我们清晰地感受到了 <strong>MCP</strong> 的 <strong>强大</strong> 与 <strong>便捷</strong> 之处。</p>
<h1 id="cursor--mcp">Cursor + MCP</h1>
<p>接下来，我们来看如何 <strong>配置 Cursor</strong>。需要注意的是，<strong>低版本的 Cursor</strong> 是可以支持 <strong>MCP 服务</strong> 的，我使用的版本是 <strong>0.48.7</strong>。在 <strong>Cursor 的设置</strong>中，我首先将版本切换到 <strong>Early Access（抢先体验）版本</strong>。</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250408140631861-960275828.png" alt="" loading="lazy"></p>
<p>然后，通过点击 <strong>Check for Updates</strong> 来 <strong>升级 Cursor 到最新版本</strong>（<strong>版本号</strong>会随时间变化，因此这里不再说明具体版本号）。</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250408140854694-152300136.png" alt="" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250408140921096-104741393.png" alt="" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250408140940650-1139506683.png" alt="" loading="lazy"></p>
<p><strong>最新版本</strong>支持全新的 <strong>MCP 配置方式</strong>。本文将聚焦于 <strong>新的配置方法</strong>。首先，在 <strong>Cursor 设置</strong>的左侧，找到 <strong>MCP 配置选项</strong>。目前的 <strong>MCP 配置</strong>是通过 <strong>文件方式</strong>实现的：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250408141231595-1200743149.png" alt="" loading="lazy"></p>
<p>在 <strong>项目根目录</strong>下创建一个名为 <strong>.cursor</strong> 的 <strong>文件夹</strong>：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250408141325017-1921936722.png" alt="" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250408141435441-230797048.png" alt="" loading="lazy"></p>
<p>在 <strong>.cursor 文件夹</strong>中，右击选择 <strong>New File</strong>，创建文件 <strong>mcp.json</strong>：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250408141535906-1264999326.png" alt="" loading="lazy"></p>
<p>接下来，将之前在 <strong>Cline</strong> 中所配置的内容完整复制到 <strong>mcp.json</strong> 文件中：</p>
<pre><code class="language-json">{
  "mcpServers": {
    "github.com/modelcontextprotocol/servers/tree/main/src/github": {
      "command": "cmd",
      "args": [
        "/c",
        "npx",
        "-y",
        "@modelcontextprotocol/server-github"
      ],
      "env": {
        "GITHUB_PERSONAL_ACCESS_TOKEN": "脱敏处理"
      },
      "disabled": false,
      "autoApprove": []
    }
  }
}
</code></pre>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250408141723231-192267058.png" alt="" loading="lazy"></p>
<p>当你粘贴完成后，左下角会弹出一个 <strong>New MCP server detected</strong>（<strong>检测到新的 MCP 服务器</strong>）提示，点击 <strong>Enable</strong> 启用它：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250408141849831-531683653.png" alt="" loading="lazy"></p>
<p>之后，打开 <strong>Cursor</strong> 的 <strong>MCP 选项卡</strong>，检查 <strong>MCP Server</strong> 的 <strong>状态</strong>，确认它已经变为 <strong>绿色</strong>：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250408142110315-2077911495.png" alt="" loading="lazy"></p>
<p>⚠️ <strong>注意</strong>：如果弹出了 <strong>黑色窗口</strong>，请不要关闭它，只要确认 <strong>MCP Server</strong> 是 <strong>绿色</strong> 即可。</p>
<p>至此，<strong>Cursor 的配置已完成</strong>，说明当前的 <strong>Cursor 配置</strong>与 <strong>Cline 的设置</strong>是一致的。</p>
<p>接下来，我将演示如何添加 <strong>另一种 MCP Server</strong>。我们前往 <strong>MCP Servers GitHub 页面</strong>，找到官方提供的 <strong>自定义 Server</strong>。这次我将演示 <strong>file system（文件系统）</strong> 这个 <strong>Server</strong>：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250408142608956-677532614.png" alt="" loading="lazy"></p>
<p>点击 <strong>链接</strong> 后，向下滚动页面，你会看到 <strong>npx 的安装方式</strong>：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250408142715134-2138014859.png" alt="" loading="lazy"></p>
<p>我们将 <strong>file system</strong> 的配置添加到 <strong>Cursor</strong> 的 <strong>mcp.json 文件</strong>中。复制相应的段落配置，如下所示：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250408142807739-2037199742.png" alt="" loading="lazy"></p>
<p>在 <strong>mcp.json 文件</strong>中添加一个 <strong>逗号</strong>，并将复制的内容粘贴到 <strong>逗号后面</strong>，确保逗号位于 <strong>最后一行的末尾</strong>：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250408143021465-249734359.png" alt="" loading="lazy"></p>
<pre><code class="language-diff">{
  "mcpServers": {
    "github.com/modelcontextprotocol/servers/tree/main/src/github": {
      "command": "cmd",
      "args": [
        "/c",
        "npx",
        "-y",
        "@modelcontextprotocol/server-github"
      ],
      "env": {
        "GITHUB_PERSONAL_ACCESS_TOKEN": "脱敏处理"
      },
      "disabled": false,
      "autoApprove": []
    },
+   "filesystem": {
+     "command": "npx",
+     "args": [
+       "-y",
+       "@modelcontextprotocol/server-filesystem",
+       "/Users/username/Desktop",
+       "/path/to/other/allowed/dir"
+     ]
+   }
  }
}
</code></pre>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250408142952931-438548012.png" alt="" loading="lazy"></p>
<p>对于 <strong>Mac 系统</strong>，<strong>配置到此即可</strong>；对于 <strong>Windows 系统</strong>，需要将 <strong>npx</strong> 移动到 <strong>args 数组</strong>中，同时将 <strong>command</strong> 修改为 <strong>cmd</strong>，并新增一行 <strong>/c</strong>。</p>
<p>完成以上步骤后，还需调整 <strong>文件系统的配置</strong>如下：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250408143612265-1866216860.png" alt="" loading="lazy"></p>
<p>这里的配置定义了 <strong>file system</strong> 可操作的 <strong>目录</strong>。我将 <strong>电脑桌面的目录</strong> 添加到此列表中。<strong>Windows 系统路径</strong>记得使用 <strong>双反斜杠 \</strong>，例如：<strong>C:\\Users\\Public\\Desktop</strong>。</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250408144042081-543623509.png" alt="" loading="lazy"></p>
<p><strong>注意</strong>将 <strong>不需要的配置</strong>删除：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250408144114592-1733773357.png" alt="" loading="lazy"></p>
<p>完成 <strong>MCP 的添加</strong>后，保存并返回 <strong>Cursor 设置</strong>，进入 <strong>MCP 选项卡</strong>，启用 <strong>file system 这个 MCP Server</strong>，当前显示为 <strong>Disabled（禁用）</strong>，点击 <strong>Disable</strong> 变为 <strong>Enable（启用）</strong>：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250408144240948-520103662.png" alt="" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250408144341458-1613368050.png" alt="" loading="lazy"></p>
<p>启用后，点击 <strong>Refresh（刷新）</strong> 按钮：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250408144519469-204709314.png" alt="" loading="lazy"></p>
<p>这时可以看到 <strong>file system 的 MCP Server</strong> 已经变为 <strong>绿色的状态</strong>：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250408144543484-1593726115.png" alt="" loading="lazy"></p>
<p>如果打开了一个新的空白 <strong>命令行窗口</strong>，请不要关闭，不用理会，只需保证 <strong>MCP Server</strong> 为 <strong>绿色</strong> 即可。</p>
<p>最后，我们来测试 <strong>file system 这个 MCP Server</strong>。在 <strong>Cursor 的 AI 对话框</strong>中，务必将模式切换到 <strong>Agent 模式</strong>：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250408144735200-1230068521.png" alt="" loading="lazy"></p>
<p>在此模式下，我询问：</p>
<blockquote>
<p>C:\Users\Public\Desktop 这个文件夹里面有什么？</p>
</blockquote>
<p>也就是想了解桌面上都有什么文件。回车后，Cursor 将使用 MCP 工具，点击 <strong>Run Command</strong>：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250408145614154-272107224.png" alt="" loading="lazy"></p>
<p>Cursor 说输出似乎有些乱码，建议用另一种方式查看，继续点击 <strong>Run Command</strong>：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250408145653289-988333286.png" alt="" loading="lazy"></p>
<p>最终，成功列出了目录中的内容：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250408145837823-303990583.png" alt="" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250408150205653-2070814161.png" alt="" loading="lazy"></p>
<p>顺便提一句，如果希望 Cursor 自动使用 MCP 工具，而无需每次授权，可以在 Cursor 设置中进入 <strong>Features</strong> 选项卡，勾选 <strong>Enable auto-run mode</strong> 选项：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250408150028042-675482193.png" alt="" loading="lazy"></p>
<p>这样在使用 MCP 时就无需再次确认授权。我们同样可以将此配置文件直接复制到 Cline 中，使 Cline 也能使用 <strong>file system</strong> 这个 MCP Server。</p>
<p>全量复制 Cursor 的 <code>mcp.json</code> 内容，切换到 Cline，进入 <strong>MCP Servers</strong>，点击 <strong>Installed</strong> 选项卡，然后选择 <strong>Configure MCP Server</strong>：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250408150436873-1433985590.png" alt="" loading="lazy"></p>
<p>然后直接粘贴复制的内容：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250408150533991-1133704915.png" alt="" loading="lazy"></p>
<p>保存后，可以看到 <strong>file system</strong> 这个 MCP Server 也已经变为绿色状态：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250408150601810-1850582644.png" alt="" loading="lazy"></p>
<p>这样，无论是在 Cursor 还是 Cline，<strong>file system</strong> 这个 MCP Server 都可以顺利使用，两个工具之间的配置是可以互通的。</p>
<p>总结一下，我们介绍了两种设置 MCP 的方法：第一种是让 AI 自动帮助我们生成配置文件，第二种是利用 GitHub 上的示例手动粘贴配置。这两种方法均可轻松使用，用户可以根据需要选择其一。</p>
<h1 id="python-版">Python 版</h1>
<p>这里我们以一个特殊的 MCP Server <strong>time</strong> 为例，展示如何安装和配置使用 Python 编写的 MCP Server。</p>
<p>第一步：访问 MCP Server 的 GitHub 页面，在 MCP Server 列表中找到 <strong>time</strong>：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250408164845421-10796843.png" alt="" loading="lazy"></p>
<p>点击进入其 <a href="https://github.com/modelcontextprotocol/servers/tree/main/src/time" target="_blank" rel="noopener nofollow">GitHub 页面</a>：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250408164959953-949834246.png" alt="" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250408165102008-1111906324.png" alt="" loading="lazy"></p>
<p>第二步：安装 Python 环境（如已有可跳过）由于该 MCP Server 基于 Python 开发，因此需确保你的电脑已安装 Python 环境：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250408165316880-1385669999.png" alt="" loading="lazy"></p>
<p>如果尚未安装 Python，请参考：<a href="https://mp.weixin.qq.com/s/aKPqbJJS-HRrzrAx8shc1w" target="_blank" rel="noopener nofollow">Python 双版本 Windows 安装攻略</a>。</p>
<p>第三步：安装 MCP Server（time）复制如下命令：</p>
<pre><code class="language-bash">pip install mcp-server-time
</code></pre>
<p>打开 <strong>Powershell</strong> 粘贴并执行：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250408205446239-581722808.png" alt="" loading="lazy"></p>
<p>安装完成界面：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250408205654940-1813725550.png" alt="" loading="lazy"></p>
<p>第四步：配置 MCP Server 到 Cline，在 GitHub 页面找到 <strong>Configure for Claude.app</strong> 部分，展开 <strong>Using pip installation</strong>，复制以下 JSON 配置：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250408205828700-188043557.png" alt="" loading="lazy"></p>
<pre><code class="language-json">"time": {
  "command": "python",
  "args": ["-m", "mcp_server_time"]
}
</code></pre>
<p>打开 Cline 的 MCP 配置文件 <code>cline_mcp_settings.json</code>，将上述配置添加到 <code>"mcpServers"</code> 中，注意逗号：</p>
<pre><code class="language-diff">{
  "mcpServers": {
    "github.com/modelcontextprotocol/servers/tree/main/src/github": {
      "command": "cmd",
      "args": [
        "/c",
        "npx",
        "-y",
        "@modelcontextprotocol/server-github"
      ],
      "env": {
        "GITHUB_PERSONAL_ACCESS_TOKEN": "脱敏处理"
      },
      "disabled": false,
      "autoApprove": []
    },
    "filesystem": {
      "command": "cmd",
      "args": [
        "/c",
        "npx",
        "-y",
        "@modelcontextprotocol/server-filesystem",
        "C:\\Users\\Public\\Desktop"
      ]
    },
+   "time": {
+     "command": "python",
+     "args": ["-m", "mcp_server_time"]
+   }
  }
}
</code></pre>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250408210407160-511462304.png" alt="" loading="lazy"></p>
<p>第五步：配置本地时区，接下来，在刚才的 <code>"args"</code> 后面添加时区配置（这里以上海时区为例）：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250408210519511-71633793.png" alt="" loading="lazy"></p>
<pre><code class="language-json">"--local-timezone=Asia/Shanghai"
</code></pre>
<p>配置后效果：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250408210646830-976910502.png" alt="" loading="lazy"></p>
<p>保存配置文件。</p>
<p>第六步：验证 MCP Server 是否成功加载，回到 <strong>Cline</strong> 的 <strong>MCP Server</strong> 面板，切换到 <strong>Installed</strong> 选项卡，确认 <strong>time</strong> 已变为绿色状态：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250408210748616-1956489413.png" alt="" loading="lazy"></p>
<p>第七步：测试 MCP Server 功能，新建对话框，切换到 <strong>Act 模式</strong>，输入测试问题：</p>
<blockquote>
<p>When it’s 4 PM in New York, what time is it in London?</p>
</blockquote>
<p>首次使用时，Cline 将请求调用 MCP 权限。若想避免每次询问，可在 <strong>Cline 设置</strong> 中勾选：</p>
<ul>
<li><strong>Use MCP Server</strong></li>
<li>对应 MCP 工具的 <strong>Auto Approve</strong> 选项</li>
</ul>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250408211238371-143500435.png" alt="" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250408211258994-1818228172.png" alt="" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250408234626227-1751411728.png" alt="" loading="lazy"></p>
<p>点击 <strong>Approve</strong> 后，MCP Server 成功调用，并返回结果：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250408234743194-1350491036.png" alt="" loading="lazy"></p>
<p>最终效果：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250408234929487-1067676545.png" alt="" loading="lazy"></p>
<p>第八步：迁移配置到 Cursor（可选），同样的配置也可直接复制到 <strong>Cursor</strong> 的 <code>.cursor/mcp.json</code> 文件中，保存后点击 <strong>Refresh</strong> 即可加载：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250408235043601-1257947022.png" alt="" loading="lazy"></p>
<p>以上即为一个特殊 MCP Server（time）的完整安装、配置与使用过程。后续我们将继续介绍其他实用的 MCP 服务。</p>
<h1 id="broswer-tool">Broswer Tool</h1>
<p>我们来看一个前端开发必备的 MCP 工具，名为 <strong>Browser Tool</strong>。首先，在 Cline 中搜索 <strong>Browser Tool</strong>，点击进入其 GitHub 页面：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250409032149141-307225757.png" alt="" loading="lazy"></p>
<p>这个 MCP 工具可以让 AI 直接读取浏览器中的内容。要使用它，我们需要先安装一个 Chrome 插件：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250409032329787-45371852.png" alt="" loading="lazy"></p>
<p>插件下载地址：<a href="https://github.com/AgentDeskAI/browser-tools-mcp/releases/download/v1.2.0/BrowserTools-1.2.0-extension.zip" target="_blank" rel="noopener nofollow">https://github.com/AgentDeskAI/browser-tools-mcp/releases/download/v1.2.0/BrowserTools-1.2.0-extension.zip</a></p>
<p>我使用的是谷歌浏览器，这一步的主要目的是在浏览器中安装这个插件。下载完成后，进入浏览器的扩展程序管理页面：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250409032511656-2031082964.png" alt="" loading="lazy"></p>
<p>在页面右上角打开“开发者模式”：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250409032626882-1475243878.png" alt="" loading="lazy"></p>
<p>然后，将刚刚下载的插件解压到本地，进入解压后的文件夹，将其中的 chrome-extension 文件夹拖拽到浏览器的扩展程序页面中：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250409032754550-33399056.png" alt="" loading="lazy"></p>
<p>这样，BrowserTools MCP 插件就成功安装了：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250409032833205-641691254.png" alt="" loading="lazy"></p>
<p>插件安装完成后，我们正式安装 Browser Tool 这个 MCP 工具。这里我们依旧使用 npx 安装方式。我仿照之前的配置，在 Cline 中新建一个配置项，将之前的 file system 配置复制一份，并将名称修改为 browser-tool-mcp：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250409033036600-1206591919.png" alt="" loading="lazy"></p>
<p>接下来，我们回到 GitHub 页面，复制以 MCP 结尾的 npx 命令：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250409033524479-1204148918.png" alt="" loading="lazy"></p>
<pre><code class="language-bash">@agentdeskai/browser-tools-mcp@latest
</code></pre>
<p>将此命令粘贴到 args 中：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250409033613794-334470576.png" alt="" loading="lazy"></p>
<p>删除不需要的内容，例如 <code>"C:\\Users\\Public\\Desktop"</code>，最终配置如下：</p>
<pre><code class="language-json">"browser-tool-mcp": {
  "command": "cmd",
  "args": [
    "/c",
    "npx",
    "-y",
    "@agentdeskai/browser-tools-mcp@latest"
  ]
}
</code></pre>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250409035041896-1215445069.png" alt="" loading="lazy"></p>
<p>此时，我们查看 Cline 的 MCP Server 选项卡，发现 browser-tool-mcp 已经变成绿色，说明安装成功：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250409033805979-1452282409.png" alt="" loading="lazy"></p>
<p>但到这里还没有完全结束，我们还需要执行另一个命令：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250409033901358-14365758.png" alt="" loading="lazy"></p>
<pre><code class="language-bash">npx @agentdeskai/browser-tools-server@latest
</code></pre>
<p>在命令行中执行以 server 结尾的命令（我是在 Powershell 中执行的）：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250409034021693-39325699.png" alt="" loading="lazy"></p>
<p>接着，我们打开浏览器，按下 F12 打开开发者工具，此时浏览器会提示：“BrowserTools MCP 已经开始调试此浏览器”：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250409034734713-1538850344.png" alt="" loading="lazy"></p>
<p>我们再回顾一下，使用这个 MCP Server 需要启动的三个部分：</p>
<ol>
<li>浏览器中安装的插件：</li>
</ol>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250409034834332-696378822.png" alt="" loading="lazy"></p>
<ol start="2">
<li>命令行中执行的以 server 结尾的命令：</li>
</ol>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250409034859931-1946535500.png" alt="" loading="lazy"></p>
<ol start="3">
<li>Cline 中配置的以 MCP 结尾的命令：</li>
</ol>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250409035115736-809384420.png" alt="" loading="lazy"></p>
<p>只有同时启动这三个部分，我们才能真正实现浏览器与 AI 的完全打通。</p>
<p>现在，我让 AI 分析一下浏览器的网络面板：</p>
<blockquote>
<p>请分析一下浏览器的网络面板，并告诉我有哪些请求？中文回答我。</p>
</blockquote>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250409035324187-359132118.png" alt="" loading="lazy"></p>
<p>AI 给出的分析非常详细，大家可以看截图，我这里就不再赘述。</p>
<p>接下来，我返回浏览器网页，打开调试工具的 Element 选项卡，鼠标选中一个元素：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250409035501665-1448803456.png" alt="" loading="lazy"></p>
<p>然后我再让 AI 来解释一下浏览器中我选中的部分：</p>
<blockquote>
<p>浏览器我选中部分是什么，里面有何主要控件，请用中文回答我。</p>
</blockquote>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250409035635260-1269355817.png" alt="" loading="lazy"></p>
<p>AI 同样给出了清晰详细的解释，大家可以参考截图。</p>
<p>通过以上操作，我们成功实现了前端开发与 AI 之间的高效沟通。相比于过去我们手动从浏览器 Element 选项卡中复制 HTML 代码再与 AI 进行问答的方式，效率得到了极大的提升。</p>
<p>因此，使用 Browser Tool 这个 MCP Server 工具，可以显著提高我们前端开发的效率。</p>
<h1 id="mcp-工具大全">MCP 工具大全</h1>
<p>Smithery.ai 是一个 MCP 工具的聚合网站，目前已收录超过 4,219 种 MCP Server：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250409041232278-500301835.png" alt="" loading="lazy"></p>
<p>我们可以根据自己的需求，在这里找到最适合自己的 MCP 服务，比如搜索引擎相关、命令执行相关、数据库相关、网络爬虫相关等等。</p>
<p>下面我以 Smithery.ai 中的一个名为 Sequential Thinking 的 MCP Server 为例：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250409041959365-1832643846.png" alt="" loading="lazy"></p>
<p>Sequential Thinking 能够将普通的 AI 大模型转化为具备推理能力的模型。点击 Sequential Thinking 链接进入其详细介绍页面，接下来我们无需关注右侧的安装方式，直接进入其 GitHub 首页：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250409042135735-1096167794.png" alt="" loading="lazy"></p>
<p>按照惯例，找到包含 npx 命令的那一行，将其复制下来：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250409042220471-837807202.png" alt="" loading="lazy"></p>
<p>然后回到 Cline 中，在 mcpServers 中添加一个逗号后粘贴刚才复制的内容。如果你使用的是 MacOS，直接粘贴即可；如果你使用的是 Windows，则需要稍作修改：将 npx 移动到 args 中，command 改为 cmd，并在 args 中添加 /c：</p>
<pre><code class="language-json">"sequential-thinking": {
  "command": "cmd",
  "args": [
    "/c",
    "npx",
    "-y",
    "@modelcontextprotocol/server-sequential-thinking"
  ]
}
</code></pre>
<p>这样就完成了安装。此时在 Cline 的 MCP Server 选项卡中，sequential-thinking 会变成绿色，表示安装成功：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250409042514249-1626705844.png" alt="" loading="lazy"></p>
<p>熟练之后，安装一个 MCP 工具只需几秒钟。同样，我们也可以将上述配置文件复制到 Cursor 中，Cursor 也能使用该 MCP Server。</p>
<p>在 Cursor 的 MCP Server 配置中，最后一个 MCP Server 后面添加一个逗号，将配置内容粘贴进去，保存后点击 Refresh 刷新一下，sequential-thinking 同样会变成绿色：</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250409042706325-1123912288.png" alt="" loading="lazy"></p>
<p>好了，我突然意识到本文篇幅已经很长了，后续我会继续介绍更多 MCP 工具以及组合使用的方法，感兴趣的朋友可以关注我的公众号，后续会持续更新。</p>
<p>最后，我分享一些 MCP 聚合网站给大家：</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
<th>链接</th>
</tr>
</thead>
<tbody>
<tr>
<td>Smithery.ai (推荐)</td>
<td>Cline 插件 MCP 市场</td>
<td><a href="https://smithery.ai/?q=is:deployed" target="_blank" rel="noopener nofollow">https://smithery.ai/?q=is:deployed</a></td>
</tr>
<tr>
<td>MCP Store</td>
<td>英文版（集合全球3600+个 MCP Server，每天还在增长。）</td>
<td><a href="https://mcpstore.co/" target="_blank" rel="noopener nofollow">https://mcpstore.co/</a></td>
</tr>
<tr>
<td>MCP Market</td>
<td>中文版（集合全球3600+个 MCP Server，每天还在增长。）</td>
<td><a href="https://mcpmarket.cn/" target="_blank" rel="noopener nofollow">https://mcpmarket.cn/</a></td>
</tr>
<tr>
<td>MCP Servers Directory</td>
<td>Official servers directory</td>
<td><a href="https://mcpservers.org/" target="_blank" rel="noopener nofollow">https://mcpservers.org/</a></td>
</tr>
<tr>
<td>MCP.run</td>
<td>MCP servers collection</td>
<td><a href="https://www.mcp.run/" target="_blank" rel="noopener nofollow">https://www.mcp.run/</a></td>
</tr>
<tr>
<td>MCP.so</td>
<td>MCP servers repository</td>
<td><a href="https://mcp.so/" target="_blank" rel="noopener nofollow">https://mcp.so/</a></td>
</tr>
<tr>
<td>PulseMCP</td>
<td>MCP servers collection</td>
<td><a href="https://www.pulsemcp.com/servers" target="_blank" rel="noopener nofollow">https://www.pulsemcp.com/servers</a></td>
</tr>
<tr>
<td>Glama.ai</td>
<td>MCP servers directory</td>
<td><a href="https://glama.ai/mcp/servers" target="_blank" rel="noopener nofollow">https://glama.ai/mcp/servers</a></td>
</tr>
<tr>
<td>AIMCP.info</td>
<td>MCP servers directory (Chinese)</td>
<td><a href="https://www.aimcp.info/zh" target="_blank" rel="noopener nofollow">https://www.aimcp.info/zh</a></td>
</tr>
<tr>
<td>Awesome MCP Servers</td>
<td>Curated list of MCP servers</td>
<td><a href="https://github.com/punkpeye/awesome-mcp-servers" target="_blank" rel="noopener nofollow">https://github.com/punkpeye/awesome-mcp-servers</a></td>
</tr>
<tr>
<td>Awesome MCP Servers (Search)</td>
<td>Search functionality for MCP servers</td>
<td><a href="https://github.com/punkpeye/awesome-mcp-servers?tab=readme-ov-file#search" target="_blank" rel="noopener nofollow">https://github.com/punkpeye/awesome-mcp-servers?tab=readme-ov-file#search</a></td>
</tr>
<tr>
<td>Model Context Protocol</td>
<td>Official MCP servers repository</td>
<td><a href="https://github.com/modelcontextprotocol/servers" target="_blank" rel="noopener nofollow">https://github.com/modelcontextprotocol/servers</a></td>
</tr>
</tbody>
</table>
<h2 id="值得注意的独立-mcp-服务器">值得注意的独立 MCP 服务器</h2>
<table>
<thead>
<tr>
<th>服务器</th>
<th>描述</th>
<th>链接</th>
</tr>
</thead>
<tbody>
<tr>
<td>Time MCP Server</td>
<td>Provides current time information</td>
<td><a href="https://github.com/modelcontextprotocol/servers/tree/main/src/time" target="_blank" rel="noopener nofollow">https://github.com/modelcontextprotocol/servers/tree/main/src/time</a></td>
</tr>
<tr>
<td>Filesystem MCP Server</td>
<td>Provides filesystem access</td>
<td><a href="https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem" target="_blank" rel="noopener nofollow">https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem</a></td>
</tr>
<tr>
<td>Fetch MCP Server</td>
<td>Enables web content fetching</td>
<td><a href="https://github.com/modelcontextprotocol/servers/tree/main/src/fetch" target="_blank" rel="noopener nofollow">https://github.com/modelcontextprotocol/servers/tree/main/src/fetch</a></td>
</tr>
<tr>
<td>bioRxiv MCP Server</td>
<td>Specialized for bioRxiv papers</td>
<td><a href="https://github.com/JackKuo666/bioRxiv-MCP-Server" target="_blank" rel="noopener nofollow">https://github.com/JackKuo666/bioRxiv-MCP-Server</a></td>
</tr>
</tbody>
</table>
<p>MCP 虽然功能强大，并且拥有广泛的应用前景，但在实际使用过程中，务必注意安全问题。在允许模型操作本地文件之前，建议提前对 <strong>HOST</strong> 可访问的目录和文件范围进行严格限制，以防止敏感信息泄露，避免产生开盒、信息泄密等安全风险。</p>
<p>另外，模型必须支持 <strong>Function Calling（允许模型调用外部工具以增强自身能力）</strong> 才能正常使用 MCP 功能。</p>
<h1 id="常见问题解答faq">常见问题解答（FAQ）</h1>
<p><strong>Q：MCP 是否只能在 Claude 模型上使用？</strong></p>
<p><strong>A：不是。</strong> 只要模型支持 Function Calling 功能，就可以使用 MCP。</p>
<p><strong>Q：Perplexity 的 API 是否支持 MCP？</strong></p>
<p><strong>A：支持。</strong> Perplexity 的 API 本身即支持 Function Calling，因此也支持 MCP。</p>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250409030914429-28006256.gif" alt="" loading="lazy"></p>
<p>如果你对以下主题感兴趣，推荐你阅读以下文章：</p>
<ol>
<li>👉 <a href="https://mp.weixin.qq.com/s?__biz=MzI2NDg3OTkzOA==&amp;mid=2247486818&amp;idx=1&amp;sn=ce85fad517b183a934c038dc48a4f7b1&amp;scene=21#wechat_redirect" target="_blank" rel="noopener nofollow">使用 Cursor 进行项目开发的个人心得分享</a></li>
<li>👉 <a href="https://mp.weixin.qq.com/s?__biz=MzI2NDg3OTkzOA==&amp;mid=2247486783&amp;idx=1&amp;sn=c7d3c2c018b8ad7411e34e97566f5320&amp;scene=21#wechat_redirect" target="_blank" rel="noopener nofollow">Cursor 神器进阶：AI 提交信息生成 + Composer 黑科技</a></li>
<li>👉 <a href="https://mp.weixin.qq.com/s?__biz=MzI2NDg3OTkzOA==&amp;mid=2247486036&amp;idx=1&amp;sn=e53a282b5338bb69870bf609b7f7fea1&amp;scene=21#wechat_redirect" target="_blank" rel="noopener nofollow">Cursor 最稳定的自动更新禁用方案</a></li>
<li>👉<a href="https://mp.weixin.qq.com/s?__biz=MzI2NDg3OTkzOA==&amp;mid=2247485708&amp;idx=1&amp;sn=809ef281698d81e5299010a8f82915a8&amp;scene=21#wechat_redirect" target="_blank" rel="noopener nofollow">一些关于 Cursor 的使用技巧</a></li>
</ol>
<p><img src="https://img2023.cnblogs.com/blog/2105804/202504/2105804-20250401214834714-1684359036.png" alt="" loading="lazy"></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-04-09 09:30">2025-04-09 09:29</span>&nbsp;
<a href="https://www.cnblogs.com/BNTang">BNTang</a>&nbsp;
阅读(<span id="post_view_count">7662</span>)&nbsp;
评论(<span id="post_comment_count">18</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18815937);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18815937', targetLink: 'https://www.cnblogs.com/BNTang/p/18815937', title: '一文彻底搞懂 MCP：AI 大模型的标准化工具箱' })">举报</a>
</div>
        