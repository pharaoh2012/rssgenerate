
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/mingupupu/p/18772576" title="发布于 2025-03-14 18:01">
    <span role="heading" aria-level="2">使用C#创建一个MCP客户端</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="前言">前言</h2>
<p>网上使用Python创建一个MCP客户端的教程已经有很多了，而使用C#创建一个MCP客户端的教程还很少。</p>
<p>为什么要创建一个MCP客户端呢？</p>
<p>创建了一个MCP客户端之后，你就可以使用别人写好的一些MCP服务了。</p>
<h2 id="效果展示">效果展示</h2>
<p>为了方便大家复现，我没有使用WPF/Avalonia之类的做界面。只是一个简单的控制台程序，可以很容易看懂。</p>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202503/3288240-20250314180051342-1914108246.png" alt="image-20250314173410130" loading="lazy"></p>
<p>接入了fetch_mcp可以实现获取网页内容了，使用的模型只要具有tool use能力的应该都可以。</p>
<p>我使用的是Qwen/Qwen2.5-72B-Instruct。</p>
<h2 id="开始实践">开始实践</h2>
<p>主要使用的包如下所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202503/3288240-20250314180051271-1261574236.png" alt="image-20250314173634157" loading="lazy"></p>
<p>首先获取MCP服务器：</p>
<pre><code class="language-csharp"> private static async Task&lt;IMcpClient&gt; GetMcpClientAsync()
 {
     DotEnv.Load();
     var envVars = DotEnv.Read();
     McpClientOptions options = new()
     {
         ClientInfo = new() { Name = "SimpleToolsConsole", Version = "1.0.0" }
     };

     var config = new McpServerConfig
     {
         Id = "test",
         Name = "Test",
         TransportType = TransportTypes.StdIo,
         TransportOptions = new Dictionary&lt;string, string&gt;
         {
             ["command"] = envVars["MCPCommand"],
             ["arguments"] = envVars["MCPArguments"],
         }
     };

     var factory = new McpClientFactory(
         new[] { config },
         options,
         NullLoggerFactory.Instance
     );

     return await factory.GetClientAsync("test");
 }
</code></pre>
<p>写死的话就是这样写：</p>
<pre><code class="language-csharp"> private static async Task&lt;IMcpClient&gt; GetMcpClientAsync()
 {
     DotEnv.Load();
     var envVars = DotEnv.Read();
     McpClientOptions options = new()
     {
         ClientInfo = new() { Name = "SimpleToolsConsole", Version = "1.0.0" }
     };

     var config = new McpServerConfig
     {
         Id = "test",
         Name = "Test",
         TransportType = TransportTypes.StdIo,
         TransportOptions = new Dictionary&lt;string, string&gt;
         {
             ["command"] = node,
             ["arguments"] = D:/Learning/AI-related/fetch-mcp/dist/index.js,
         }
     };

     var factory = new McpClientFactory(
         new[] { config },
         options,
         NullLoggerFactory.Instance
     );

     return await factory.GetClientAsync("test");
 }
</code></pre>
<p>重点在：</p>
<pre><code class="language-csharp"> TransportOptions = new Dictionary&lt;string, string&gt;
         {
             ["command"] = node,
             ["arguments"] = D:/Learning/AI-related/fetch-mcp/dist/index.js,
         }
</code></pre>
<p>用于连接你想连接的MCP服务器。</p>
<p>如果能正确显示你连接mcp服务器提供的工具，说明连接成功。</p>
<pre><code class="language-csharp">  var listToolsResult = await client.ListToolsAsync();
  var mappedTools = listToolsResult.Tools.Select(t =&gt; t.ToAITool(client)).ToList();
  Console.WriteLine("Tools available:");
  foreach (var tool in mappedTools)
  {
      Console.WriteLine("  " + tool);
  }
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202503/3288240-20250314180051255-1439324815.png" alt="image-20250314174210161" loading="lazy"></p>
<p>开启一个聊天循环：</p>
<pre><code class="language-csharp">    Console.WriteLine("\nMCP Client Started!");
    Console.WriteLine("Type your queries or 'quit' to exit.");

    ChatDemo chatDemo = new ChatDemo();

    while (true)
    {
        try
        {
            Console.ForegroundColor = ConsoleColor.DarkYellow;
            Console.Write("\nQuery: ");
            string query = Console.ReadLine()?.Trim() ?? string.Empty;

            if (query.ToLower() == "quit")
                break;
            if (query.ToLower() == "clear")
            {
                Console.Clear();
                chatDemo.Messages.Clear();                    
            }
            else 
            {
                string response = await chatDemo.ProcessQueryAsync(query, mappedTools);
                Console.ForegroundColor = ConsoleColor.DarkYellow;
                Console.WriteLine($"AI回答：{response}");
                Console.ForegroundColor = ConsoleColor.White;
            }                      
        }
        catch (Exception ex)
        {
            Console.WriteLine($"\nError: {ex.Message}");
        }
    }
}
</code></pre>
<p>处理每次询问：</p>
<pre><code class="language-csharp"> public async Task&lt;string&gt; ProcessQueryAsync(string query, List&lt;AITool&gt; tools)
 {
     if(Messages.Count == 0)
     {
         Messages =
         [
          // Add a system message
         new(ChatRole.System, "You are a helpful assistant, helping us test MCP server functionality."),
         ];
     }
     
     // Add a user message
     Messages.Add(new(ChatRole.User, query));

     var response = await ChatClient.GetResponseAsync(
            Messages,
            new() { Tools = tools });
     Messages.AddMessages(response);
     var toolUseMessage = response.Messages.Where(m =&gt; m.Role == ChatRole.Tool);

     if (toolUseMessage.Count() &gt; 0)
     {
         var functionMessage = response.Messages.Where(m =&gt; m.Text == "").First();             
         var functionCall = (FunctionCallContent)functionMessage.Contents[1];
         Console.ForegroundColor = ConsoleColor.Green;
         string arguments = "";
         foreach (var arg in functionCall.Arguments)
         {
             arguments += $"{arg.Key}:{arg.Value};";
         }
         Console.WriteLine($"调用函数名:{functionCall.Name};参数信息：{arguments}");
         foreach (var message in toolUseMessage)
         {
             var functionResultContent = (FunctionResultContent)message.Contents[0];
             Console.WriteLine($"调用工具结果：{functionResultContent.Result}");
         }

         Console.ForegroundColor = ConsoleColor.White;
     }
     else
     {
         Console.ForegroundColor = ConsoleColor.Green;
         Console.WriteLine("本次没有调用工具");
         Console.ForegroundColor = ConsoleColor.White;
     }

     return response.Text;
 }
</code></pre>
<p>代码已经放到GitHub，地址：<a href="https://github.com/Ming-jiayou/mcp_demo%E3%80%82" target="_blank" rel="noopener nofollow">https://github.com/Ming-jiayou/mcp_demo。</a></p>
<p>将.env-example修改为.env应该就可以运行，如果报错，设置成嵌入的资源即可。</p>
<p>.env配置示例：</p>
<pre><code class="language-csharp">API_KEY=sk-xxx
BaseURL=https://api.siliconflow.cn/v1
ModelID=Qwen/Qwen2.5-72B-Instruct
MCPCommand=node
MCPArguments=D:/Learning/AI-related/fetch-mcp/dist/index.js
</code></pre>
<h2 id="最后">最后</h2>
<p>对C#使用MCP感兴趣的朋友可以关注这个项目：<a href="https://github.com/PederHP/mcpdotnet%E3%80%82" target="_blank" rel="noopener nofollow">https://github.com/PederHP/mcpdotnet。</a></p>
<p>有问题欢迎一起交流学习。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.5088696000185186" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-14 18:01">2025-03-14 18:01</span>&nbsp;
<a href="https://www.cnblogs.com/mingupupu">mingupupup</a>&nbsp;
阅读(<span id="post_view_count">150</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18772576" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18772576);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18772576', targetLink: 'https://www.cnblogs.com/mingupupu/p/18772576', title: '使用C#创建一个MCP客户端' })">举报</a>
</div>
        