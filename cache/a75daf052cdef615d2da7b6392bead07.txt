<!----> <meta itemprop="headline" content="后端：没空，先自己 mock 去"> <meta itemprop="keywords" content="前端"> <meta itemprop="datePublished" content="2025-01-16T01:44:10.000Z"> <meta itemprop="image" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-128.png~tplv-t2oaga2asx-image.image"> <div itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><meta itemprop="name" content="imoo"> <meta itemprop="url" content="https://juejin.cn/user/2682464104364766"></div> <div itemprop="publisher" itemscope="itemscope" itemtype="http://schema.org/Organization"><meta itemprop="name" content="掘金"> <div itemprop="logo" itemscope="itemscope" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-white-180.png~tplv-t2oaga2asx-image.image"> <meta itemprop="width" content="180"> <meta itemprop="height" content="180"></div></div> <h1 class="article-title" data-v-38a6c62f="">
            后端：没空，先自己 mock 去
            <!----> <!----></h1> <div class="author-info-block block-hidden" data-v-38a6c62f=""><div class="author-info-box" data-v-38a6c62f=""><div class="author-name" data-v-38a6c62f=""><a href="/user/2682464104364766/posts" target="_blank" rel="" class="jj-link username username ellipsis" data-v-65b50b51="" data-v-1800aadb="" data-v-38a6c62f=""><span class="name" style="max-width:160px;" data-v-65b50b51="" data-v-1800aadb="">
    imoo
  </span> <!----> <!----> <!----> </a></div> <div class="meta-box" data-v-38a6c62f=""><time datetime="2025-01-16T01:44:10.000Z" title="Thu Jan 16 2025 01:44:10 GMT+0000 (Coordinated Universal Time)" class="time" data-v-38a6c62f="">
                    2025-01-16
                  </time> <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" class="read-icon" data-v-38a6c62f=""><path d="M7.90078 2.80078C4.49278 2.80078 1.74745 6.11672 0.800781 7.77469C1.74745 9.58339 4.49278 13.2008 7.90078 13.2008C11.3088 13.2008 14.0541 9.58339 15.0008 7.77469C14.0541 6.11672 11.3088 2.80078 7.90078 2.80078Z" stroke="currentColor" data-v-38a6c62f=""></path><circle cx="7.89922" cy="8.00078" r="2.2" stroke="currentColor" data-v-38a6c62f=""></circle></svg> <span class="views-count" data-v-38a6c62f="">
                    10,670
                  </span> <span class="read-time" data-v-38a6c62f=""><svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" data-v-38a6c62f=""><rect width="16" height="16" fill="none" data-v-38a6c62f=""></rect><circle cx="8" cy="8" r="5.65625" stroke="#8A919F" data-v-38a6c62f=""></circle><path d="M7.69141 5.18652V8.30924H10.8141" stroke="#8A919F" stroke-linecap="round" stroke-linejoin="round" data-v-38a6c62f=""></path></svg>
                    阅读4分钟
                  </span> <!----></div></div> <div style="flex:1;" data-v-38a6c62f=""></div> <!----> <!----></div> <!----> <!----> <!----> <!----> <div id="article-root" itemprop="articleBody" class="main" data-v-38a6c62f=""><div class="article-viewer markdown-body cache result"><h2 data-id="heading-0">前言</h2>
<p>后端开发忙，不给你接口？</p>
<p>后端抱怨你在测试过程中，频繁的给脏数据？</p>
<p>后端修个接口很慢没法测试？</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/5b26cef310534821870c7c695b59ad5a~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgaW1vbw==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1744252842&amp;x-signature=3tlRV0H%2Br3DjEXKCrf%2F0hVyORxw%3D" alt="image.png" loading="lazy"></p>
<p>有了 mockjs ，这些问题将迎刃而解。不要 998，pnpm i 带回家！</p>
<h2 data-id="heading-1">真这么丝滑？</h2>
<p>请看我的使用方式：</p>
<p>当后端接口无法满足要求，且不能及时更改时。例如后端返回</p>
<pre><code class="hljs language-json" lang="json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">"err_no"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"err_msg"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"success"</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"data"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>
    <span class="hljs-punctuation">{</span>
      <span class="hljs-attr">"comment_id"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"7337487924836287242"</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">"user_info"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
        <span class="hljs-attr">"user_name"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"陈陈陈_"</span><span class="hljs-punctuation">,</span>
      <span class="hljs-punctuation">}</span>
    <span class="hljs-punctuation">}</span>
  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<p>但我此时希望增加一个 <code>user_type</code> 来确定页面的展示。</p>
<p>那我就直接起一个文件：<code>user.js</code>，把刚才的响应 copy 过来，并追加改动</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-title function_">myMock</span>(<span class="hljs-string">'/api/v1/user'</span>, <span class="hljs-string">'post'</span>, <span class="hljs-function">() =&gt;</span> {
  <span class="hljs-keyword">return</span> {
      <span class="hljs-string">"err_no"</span>: <span class="hljs-number">0</span>,
      <span class="hljs-string">"err_msg"</span>: <span class="hljs-string">"success"</span>,
      <span class="hljs-string">"data"</span>: [
        {
          <span class="hljs-string">"comment_id"</span>: <span class="hljs-string">"7337487924836287242"</span>,
          <span class="hljs-string">"user_info"</span>: {
            <span class="hljs-string">"user_name"</span>: <span class="hljs-string">"陈陈陈_"</span>,
            <span class="hljs-string">"user_type"</span>: <span class="hljs-string">"admin"</span>,
          }
        }
      ],
  }
});
</code></pre>
<p>如此一来，这个请求就被无缝替换为了我们的 mock，可以随便测试了。</p>
<h2 data-id="heading-2">如何接入 mockjs</h2>
<p>有的同学就要问了，主播主播，你的 mockjs 确实很方便，怎么接入比较好呀。别急，我们一步一步来</p>
<ol>
<li>安装 mockjs</li>
</ol>

<pre><code class="hljs language-css" lang="css">pnpm <span class="hljs-selector-tag">i</span> mockjs
</code></pre>
<blockquote>
<p>如果是使用 ts 的同学，可能需要额外安装 type 类型包：@types/mockjs</p>
</blockquote>
<ol start="2">
<li>新建一个 mock 文件夹，在 mock/index.ts 放入基本路径</li>
</ol>
<pre><code class="hljs language-js" lang="js"><span class="hljs-comment">// 各种 mock 的文件，视条件而定，我这里有俩文件就引入了俩</span>
<span class="hljs-keyword">import</span> <span class="hljs-string">'./login/user.js'</span>;
<span class="hljs-keyword">import</span> <span class="hljs-string">'./model/model.js'</span>;
</code></pre>
<p>并且在你的项目入口 ts 中引入 mock/index.ts</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-keyword">import</span> <span class="hljs-string">'./mock/index'</span>; <span class="hljs-comment">// 引入 mock 配置</span>
</code></pre>
<ol start="3">
<li>导出一个 myMock 方法，并追加一个 baseUrl 方便直接联动你的 axios</li>
</ol>
<pre><code class="hljs language-js" lang="js"><span class="hljs-keyword">import</span> { <span class="hljs-variable constant_">ENV_TEST</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'@/api/config/interceptor'</span>;
<span class="hljs-keyword">import</span> <span class="hljs-title class_">Mock</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'mockjs'</span>;

<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">myMock</span> = (<span class="hljs-params">
  path: string,
  method: <span class="hljs-string">'get'</span> | <span class="hljs-string">'post'</span>,
  callback: (options: any) =&gt; any
</span>) =&gt; {
  <span class="hljs-title class_">Mock</span>.<span class="hljs-title function_">mock</span>(<span class="hljs-string">`<span class="hljs-subst">${ENV_TEST}</span><span class="hljs-subst">${path}</span>`</span>, method, callback);
};
</code></pre>
<p>如此一来，你就可以在 mock 文件夹下去搞了，比如：</p>
<p>我想新增一个服务模块的各类接口的 mock，那么我就新增一个 service 文件夹，在其下增加一个 index.ts，并对对应路径进行 mock</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-title function_">myMock</span>(<span class="hljs-string">'/api/v1/service'</span>, <span class="hljs-string">'get'</span>, <span class="hljs-function">() =&gt;</span> {
  <span class="hljs-keyword">return</span> {
    <span class="hljs-attr">code</span>: <span class="hljs-number">0</span>,
    <span class="hljs-attr">msg</span>: <span class="hljs-string">'hello service'</span>,
    <span class="hljs-attr">data</span>: <span class="hljs-literal">null</span>,
  };
});
</code></pre>
<p><em>另外，别忘了在  mock/index.ts 引入文件</em></p>
<h2 data-id="heading-3">不显示在 network 中？</h2>
<p>需要说明的是，这样走 mock 是不会触发真正的请求的，相当于 xhr 直接被 mock 拦截了下来并给了你返回值。所以你无法在 network 中看到你的请求。</p>
<p>这是个痛点，目前比较好的解决方案还是起一个单独的服务来 mock。但这样也就意味着，需要另起一个项目来单独做 mock，太不优雅了。</p>
<p>有没有什么办法，<strong>既可以走上述简单的mock，又可以在需要的时候起一个服务来查看 network，并且不需要额外维护两套配置呢？</strong></p>
<p>有的兄弟，有的。</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-keyword">import</span> express <span class="hljs-keyword">from</span> <span class="hljs-string">'express'</span>;
<span class="hljs-keyword">import</span> bodyParser <span class="hljs-keyword">from</span> <span class="hljs-string">'body-parser'</span>;
<span class="hljs-keyword">import</span> <span class="hljs-title class_">Mock</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'mockjs'</span>;
<span class="hljs-keyword">import</span> <span class="hljs-string">'./login/user.js'</span>;
<span class="hljs-keyword">import</span> <span class="hljs-string">'./model/model.js'</span>;
<span class="hljs-keyword">import</span> { <span class="hljs-variable constant_">ENV_TEST</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'./utils/index.js'</span>;

<span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();
<span class="hljs-keyword">const</span> port = <span class="hljs-number">3010</span>;

<span class="hljs-comment">// 使用中间件处理请求体和CORS</span>
app.<span class="hljs-title function_">use</span>(bodyParser.<span class="hljs-title function_">json</span>());

<span class="hljs-comment">// 设置CORS头部</span>
app.<span class="hljs-title function_">use</span>(<span class="hljs-function">(<span class="hljs-params"> _ , res, next</span>) =&gt;</span> {
  res.<span class="hljs-title function_">header</span>(<span class="hljs-string">'Access-Control-Allow-Origin'</span>, <span class="hljs-string">'*'</span>);
  res.<span class="hljs-title function_">header</span>(<span class="hljs-string">'Access-Control-Allow-Methods'</span>, <span class="hljs-string">'GET, POST, PUT, DELETE, OPTIONS'</span>);
  res.<span class="hljs-title function_">header</span>(<span class="hljs-string">'Access-Control-Allow-Headers'</span>, <span class="hljs-string">'Content-Type, Authorization'</span>);
  <span class="hljs-title function_">next</span>();
});

<span class="hljs-comment">// 设置Mock路由的函数</span>
<span class="hljs-keyword">const</span> <span class="hljs-title function_">setupMockRoutes</span> = (<span class="hljs-params"></span>) =&gt; {
  <span class="hljs-keyword">const</span> mockApis = <span class="hljs-title class_">Mock</span>.<span class="hljs-property">_mocked</span> || {};

  <span class="hljs-comment">// 遍历每个Mock API，并生成对应的路由</span>
  <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(mockApis).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> {
    <span class="hljs-keyword">const</span> { rurl, rtype, template } = mockApis[key];
    <span class="hljs-keyword">const</span> route = rurl.<span class="hljs-title function_">replace</span>(<span class="hljs-variable constant_">ENV_TEST</span>, <span class="hljs-string">''</span>); <span class="hljs-comment">// 去掉环境前缀</span>

    <span class="hljs-comment">// 根据请求类型（GET, POST, 等）设置路由</span>
    app[rtype.<span class="hljs-title function_">toLowerCase</span>()](route, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> {
      <span class="hljs-keyword">const</span> data =
        <span class="hljs-keyword">typeof</span> template === <span class="hljs-string">'function'</span> ? <span class="hljs-title function_">template</span>(req.<span class="hljs-property">body</span> || {}) : template;
      res.<span class="hljs-title function_">json</span>(<span class="hljs-title class_">Mock</span>.<span class="hljs-title function_">mock</span>(data)); <span class="hljs-comment">// 返回模拟数据</span>
    });
  });
};

<span class="hljs-comment">// 设置Mock API路由</span>
<span class="hljs-title function_">setupMockRoutes</span>();

<span class="hljs-comment">// 启动服务器</span>
app.<span class="hljs-title function_">listen</span>(port, <span class="hljs-function">() =&gt;</span> {
  process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> = <span class="hljs-string">'mock'</span>; <span class="hljs-comment">// 设置环境变量</span>
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Mock 服务已启动，访问地址: http://localhost:<span class="hljs-subst">${port}</span>`</span>);
});
</code></pre>
<p>直接在 mock 文件夹下追加这个启动文件，当你需要看 network 的时候，将环境切换为 mock 环境即可。本质是利用了 <code>Mock._mocked</code> 可以拿到所有注册项，并用 express 起了一个后端服务响应这些注册项来实现的。</p>
<p>在拥有了这个能力的基础上，我们就可以调整我们的命令</p>
<pre><code class="hljs language-json" lang="json">  <span class="hljs-attr">"scripts"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">"dev"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"cross-env NODE_ENV=test vite"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"mock"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"cross-env NODE_ENV=mock vite &amp; node ./src/mock/app.js"</span>
  <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
</code></pre>
<p>顺便贴一下我的 env 配置：</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">ENV_TEST</span> = <span class="hljs-string">'https://api-ai.com/fuxi'</span>;
<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">ENV_MOCK</span> = <span class="hljs-string">'http://localhost:3010/'</span>;

<span class="hljs-keyword">let</span> <span class="hljs-attr">baseURL</span>: string = <span class="hljs-variable constant_">ENV_TEST</span>;

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">'目前环境为：'</span> + process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span>);
<span class="hljs-keyword">switch</span> (process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span>) {
  <span class="hljs-keyword">case</span> <span class="hljs-string">'mock'</span>:
    baseURL = <span class="hljs-variable constant_">ENV_MOCK</span>;
    <span class="hljs-keyword">break</span>;
  <span class="hljs-keyword">case</span> <span class="hljs-string">'test'</span>:
    baseURL = <span class="hljs-variable constant_">ENV_TEST</span>;
    <span class="hljs-keyword">break</span>;
  <span class="hljs-keyword">case</span> <span class="hljs-string">'production'</span>:
    <span class="hljs-keyword">break</span>;
  <span class="hljs-attr">default</span>:
    baseURL = <span class="hljs-variable constant_">ENV_TEST</span>;
    <span class="hljs-keyword">break</span>;
}

<span class="hljs-keyword">export</span> { baseURL };
</code></pre>
<p>这样一来，如果你需要看 network ，就 pnpm mock，如果不需要，就直接 pnpm dev，完全不需要其他心智负担。</p>
<p>三个字：</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/990f918d3b0a42a08a712e5679e1180a~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgaW1vbw==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1744252842&amp;x-signature=TkhmP8%2FM28l9kgmecjaejYCzGww%3D" alt="image.png" loading="lazy"></p>
<h2 data-id="heading-4">参数相关</h2>
<p>具体的 api 可查阅：<a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fnuysoft%2FMock%2Fwiki%2FSyntax-Specification" target="_blank" title="https://github.com/nuysoft/Mock/wiki/Syntax-Specification" ref="nofollow noopener noreferrer">github.com/nuysoft/Moc…</a>
相关的文章也非常多，就不展开说明了。</p>
<blockquote>
<p>如果这篇文章对你有帮助，不妨点个赞吧~</p>
</blockquote></div></div>