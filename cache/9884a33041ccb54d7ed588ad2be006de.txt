
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/meet/p/18758914" title="发布于 2025-03-08 09:05">
    <span role="heading" aria-level="2">无需6万激活码！GitHub神秘组织3小时极速复刻Manus，手把手教你使用OpenManus搭建本地AI Agent</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="一天价邀请码vs开源革命打工人今夜无眠">一、天价邀请码VS开源革命：打工人今夜无眠</h2>
<p>昨夜科技圈被两个关键词刷屏：​<strong>Manus激活码炒至5万元</strong><a href="@ref" target="_blank" rel="noopener nofollow">5,7</a>，​<strong>GitHub神秘项目OpenManus突然开源</strong><a href="@ref" target="_blank" rel="noopener nofollow">6,7</a>。这场戏剧性对决的背后，是一场关于「AI生产力特权」的终极博弈。</p>
<p><strong>▍Manus的火爆与困局</strong></p>
<ul>
<li>​<strong>现象级产品</strong>：演示视频中自主分析股票、筛选简历、规划旅行的能力，让Manus一夜封神<a href="@ref" target="_blank" rel="noopener nofollow">2,3</a></li>
<li>​<strong>特权准入</strong>：内测邀请码被黄牛炒至5万元，二手平台惊现「不接受砍价」的硬核卖家<a href="@ref" target="_blank" rel="noopener nofollow">1,5</a></li>
<li>​<strong>技术质疑</strong>：网友实测发现任务执行延迟严重，服务器频繁崩溃<a href="@ref" target="_blank" rel="noopener nofollow">3,8</a></li>
</ul>
<p><strong>▍开源闪电战</strong><br>
正当资本狂欢时，GitHub上悄然出现两个项目：</p>
<ol>
<li>​<strong>OpenManus</strong>：MetaGPT团队4人3小时复刻核心功能，支持SEO审计/报表生成<a href="@ref" target="_blank" rel="noopener nofollow">7</a></li>
<li>​<strong>OWL</strong>：CAMEL-AAI团队逆向工程拆解Manus六步工作流，性能反超原版<a href="@ref" target="_blank" rel="noopener nofollow">7</a><br>
👉 ​<strong>致命优势</strong>：完全免费/支持本地部署/可外挂任意工具链<a href="@ref" target="_blank" rel="noopener nofollow">6,7</a></li>
</ol>
<hr>
<h2 id="二如何使用这个openmanus">二、如何使用这个OpenManus？</h2>
<h3 id="官方地址">官方地址</h3>
<p>官方地址：</p>
<p><code>https://github.com/mannaandpoem/OpenManus</code></p>
<p>start趋势：2025-03-07这一天涨了8k。。。多恐怖啊</p>
<p><img src="https://fastly.jsdelivr.net/gh/bucketio/img18@main/2025/03/07/1741358375317-aef6bac7-ee22-4349-adc1-88e9496c3439.png" alt="" loading="lazy"></p>
<h3 id="安装虚拟环境">安装虚拟环境</h3>
<p>创建一个新的 conda 环境：</p>
<pre><code class="language-bash">conda create -n open_manus python=3.12
conda activate open_manus
</code></pre>
<p>克隆代码</p>
<pre><code class="language-bash">git clone https://github.com/mannaandpoem/OpenManus.git
cd OpenManus
</code></pre>
<p>安装依赖</p>
<pre><code class="language-bash">pip install -r requirements.txt
</code></pre>
<h3 id="配置">配置</h3>
<p>在config目录中创建一个config.toml文件（你可以从示例中复制）：</p>
<pre><code class="language-bash">cp config/config.example.toml config/config.toml
</code></pre>
<p>编辑config/config.toml以添加您的 API 密钥并自定义设置：</p>
<p><strong>配置这个llm模型的时候需要注意：</strong></p>
<ol>
<li>如果运行本地ollama的模型也可以，只不过一定要选择支持function call的模型</li>
</ol>
<pre><code class="language-bash"># Global LLM configuration
[llm]
model = "gpt-4o"
base_url = "https://api.openai.com/v1"
api_key = "sk-..."  # Replace with your actual API key
max_tokens = 4096
temperature = 0.0

# Optional configuration for specific LLM models
[llm.vision]
model = "gpt-4o"
base_url = "https://api.openai.com/v1"
api_key = "sk-..."  # Replace with your actual API key
</code></pre>
<p>这里我配置deepseek模型，先去官网API平台申请个api key</p>
<p><code>https://platform.deepseek.com/usage</code></p>
<p>然后根据情况配置即可了，很简单。我的配置如下，供参考，注意model需要是deepseek-chat，而不是deepseek-r1</p>
<pre><code class="language-python">[llm]
model = "deepseek-chat"
base_url = "https://api.deepseek.com"
api_key = "你自己申请的key"
max_tokens = 4096
temperature = 0.0

[llm.vision]
model = "deepseek-chat"
base_url = "https://api.deepseek.com"
api_key = "你自己申请的key"
</code></pre>
<p><strong>接下来安装playwright使用的chromium 内核浏览器</strong></p>
<p>如果不懂playwright是什么的，可以自行网上搜索或者问大模型，你去了解知道playwright是什么东西后，就大概猜到这个Manus的底层原理了。。</p>
<p>PS：因为这个Agent就类似个大号爬虫，所以借助playwright框架去打开chromium内核浏览器，访问网页，爬取数据，然后生成报告。</p>
<pre><code class="language-bash">playwright install chromium
</code></pre>
<p><img src="https://fastly.jsdelivr.net/gh/bucketio/img7@main/2025/03/07/1741354504226-13fe1ea3-d5fe-4508-82e1-d48f69e14b0a.png" alt="" loading="lazy"></p>
<h3 id="运行">运行</h3>
<p>运行OpenManus，直接运行main.py文件即可</p>
<pre><code class="language-bash">python main.py
</code></pre>
<h2 id="三重点说下运行的艰苦过程">三、重点说下运行的艰苦过程</h2>
<h3 id="运行一个股票分析的例子">运行一个股票分析的例子</h3>
<p>首先我也是参照官网例子，运行一个股票分析的例子</p>
<p><img src="https://fastly.jsdelivr.net/gh/bucketio/img1@main/2025/03/07/1741354597104-f46f64da-b801-4966-9e7e-438195185c70.png" alt="" loading="lazy"></p>
<p>运行过程中，看似一切正常，这个Agent总共30步（后来经过测试，不管你运行什么内容，都是30个步骤）</p>
<p><img src="https://fastly.jsdelivr.net/gh/bucketio/img5@main/2025/03/07/1741358974564-07c44d26-dca8-49ed-9e14-6e1ac4a9e05b.png" alt="" loading="lazy"></p>
<p>但是运行运行着就不对了</p>
<p><img src="https://fastly.jsdelivr.net/gh/bucketio/img3@main/2025/03/07/1741355339745-94843ade-273c-4d04-9ae2-7997a982d577.png" alt="" loading="lazy"></p>
<p>这一看就是触发反爬了，出来个滑块验证码，关键OpenManus并没有过去这个滑块验证码（看来爬虫过验证码都挺难受的，毕竟人家3个小时搞出来的程序，没时间写过验证码的代码）</p>
<p>然后我盯着屏幕半天，发现它并没有过验证码，我就手工滑动过去。</p>
<p>然后就出现了这个</p>
<p><img src="https://fastly.jsdelivr.net/gh/bucketio/img15@main/2025/03/07/1741355352357-bfd14294-e1f9-4034-bd6c-666294b4fc13.png" alt="" loading="lazy"></p>
<p>紧接着我不管怎么运行，到最后就开始报错</p>
<p><img src="https://fastly.jsdelivr.net/gh/bucketio/img14@main/2025/03/07/1741356460300-d9bb9347-6801-43bf-afe1-28a1315b9a0d.png" alt="" loading="lazy"></p>
<p>估计又是因为哪个网站被封了，所以API请求失败，最终，放弃！</p>
<h3 id="然后我又换我准备去北京旅游请为我做一份详细的旅游攻略这个提示词">然后我又换"我准备去北京旅游，请为我做一份详细的旅游攻略"这个提示词</h3>
<pre><code class="language-python">async def main():
    agent = Manus()
    while True:
        try:
            # prompt = input("Enter your prompt (or 'exit' to quit): ")
            # if prompt.lower() == "exit":
            #     logger.info("Goodbye!")
            #     break
            # logger.warning("Processing your request...")
            prompt = "我准备去北京旅游，请为我做一份详细的旅游攻略"
            await agent.run(prompt)
        except KeyboardInterrupt:
            logger.warning("Goodbye!")
            break
</code></pre>
<p>最终还是报错</p>
<p><img src="https://fastly.jsdelivr.net/gh/bucketio/img16@main/2025/03/07/1741359336746-117e628e-cf0d-4e55-843b-3c36758e245d.png" alt="" loading="lazy"></p>
<p>并且我发现，即使我换了新的提示词，它还是爬之前股票的那些网站。</p>
<p>百思不得其解，等抽时间再看看源码研究研究吧~~</p>
<h2 id="openmanus使用总结">OpenManus使用总结</h2>
<p>接下来做个总结</p>
<ol>
<li>OpenManus内部集成了很多tool，例如google_search、file_saver等等</li>
<li>因为是MetaGPT团队3个成员3个小时开发的，所以在搜索内容方面用的谷歌，所以运行OpenManus之前，你得有稳定的梯子</li>
<li>OpenManus内部打开浏览器是使用的playwright自动化工具，但是这个自动化工具没有解决指纹浏览器相关问题，导致爬虫很快被检测到，还容易被封</li>
<li>貌似每个提示词运行的步骤都是30步？我还没研究明白</li>
<li>虽然有很多问题，我也没完整运行起来一个例子，但是这种Agent的源码例子倒是一个不错的学习案例，可以参考这个代码自行改造，做成你专属的Agent</li>
</ol>
<hr>
<blockquote>
<p>如果哪位大佬有时间，可以参考源码，把google_search.py部分替换为国内搜索，相信国内用户使用起来会很顺畅~</p>
</blockquote>
<p>各位看官，如对你有帮助欢迎点赞，收藏，转发，关注公众号【Python魔法师】获取更多Python魔法~</p>
<p><img src="https://img2024.cnblogs.com/blog/527668/202503/527668-20250308090650224-124302745.png" alt="" loading="lazy"></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.7149273467870371" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-08 09:07">2025-03-08 09:05</span>&nbsp;
<a href="https://www.cnblogs.com/meet">Python魔法师</a>&nbsp;
阅读(<span id="post_view_count">509</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18758914" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18758914);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18758914', targetLink: 'https://www.cnblogs.com/meet/p/18758914', title: '无需6万激活码！GitHub神秘组织3小时极速复刻Manus，手把手教你使用OpenManus搭建本地AI Agent' })">举报</a>
</div>
        