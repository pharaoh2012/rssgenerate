
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/powertoolsteam/p/18945680" title="发布于 2025-06-24 09:47">
    <span role="heading" aria-level="2">使用 .NET Core+GcExcel，生成 Excel 文件</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="引言"><strong>引言</strong></h2>
<p>在当今数字化办公和数据处理的大环境下，在线生成 Excel 文件成为了许多企业和开发者的需求。.NET Core 作为一个跨平台的开源框架，具有高效、灵活等特点，而 GcExcel 是一款功能强大的 Excel 处理组件。将二者结合，可以方便地实现在线生成 Excel 文件的功能。本文将详细介绍如何利用 .NET Core 和 GcExcel 来生成在线 Excel，帮助开发者更好地应对数据处理和文件生成的需求。</p>
<h3 id="net-core-与-gcexcel-概述">.NET Core 与 GcExcel 概述</h3>
<h4 id="net-core-的特点与优势">.NET Core 的特点与优势</h4>
<p>.NET Core 是一个开源的、跨平台的 .NET 平台，它可以在 Windows、Linux 和 macOS 等多种操作系统上运行。具有高性能、可扩展性强等特点，支持多种开发语言，如 C#、Visual Basic 和 F# 等。开发者可以使用 .NET Core 构建各种类型的应用程序，包括 Web 应用、控制台应用、云服务等。其跨平台的特性使得开发者可以在不同的操作系统上进行开发和部署，提高了开发的灵活性和效率 。</p>
<h4 id="gcexcel-的功能与作用">GcExcel 的功能与作用</h4>
<p>GcExcel 是一款 Excel 处理组件，它提供了丰富的 API 接口，能够模拟 Excel 的各种操作，如创建工作表、设置单元格格式、进行数据计算等。使用 GcExcel，开发者无需安装 Microsoft Excel 软件，就可以在应用程序中生成、编辑和处理 Excel 文件。它支持多种文件格式，如 XLSX、XLS 等，并且能够保证生成的 Excel 文件与 Microsoft Excel 的兼容性 。</p>
<h3 id="环境搭建与准备工作">环境搭建与准备工作</h3>
<h4 id="安装-net-core">安装 .NET Core</h4>
<p>首先，需要从官方网站下载并安装 .NET Core SDK。安装完成后，可以在命令行中使用 <code>dotnet --version</code> 命令来验证安装是否成功。如果能够正确显示 .NET Core 的版本号，则说明安装成功。</p>
<h4 id="引入-gcexcel-组件">引入 GcExcel 组件</h4>
<p>在 .NET Core 项目中引入 GcExcel 组件，可以通过 NuGet 包管理器来完成。打开 Visual Studio 或者其他开发工具，在项目中右键点击 “管理 NuGet 包”，在搜索框中输入 “GcExcel”，然后选择合适的版本进行安装。安装完成后，项目中会自动引用 GcExcel 的相关程序集 。</p>
<h3 id="使用-net-core-和-gcexcel-生成在线-excel-的具体步骤">使用 .NET Core 和 GcExcel 生成在线 Excel 的具体步骤</h3>
<h4 id="创建-net-core-web-项目">创建 .NET Core Web 项目</h4>
<p>使用命令行工具或者开发工具创建一个新的 .NET Core Web 项目。在命令行中，可以使用以下命令创建一个新的 Web 项目：</p>
<pre><code class="language-Bash">dotnet new web -n ExcelGenerator
cd ExcelGenerator
</code></pre>
<h4 id="编写代码实现-excel-生成功能">编写代码实现 Excel 生成功能</h4>
<p>在项目中创建一个控制器类，用于处理生成 Excel 文件的请求。以下是一个简单的示例代码：</p>
<pre><code class="language-C#">using System.IO;using System.Threading.Tasks;using GrapeCity.Documents.Excel;using Microsoft.AspNetCore.Mvc;namespace ExcelGenerator.Controllers{[ApiController][Route("[controller]")]public class ExcelController : ControllerBase{[HttpGet]public async Task&lt;IActionResult&gt; GenerateExcel(){// 创建一个新的工作簿Workbook workbook = new Workbook();// 获取第一个工作表IWorksheet worksheet = workbook.Worksheets[0];// 设置单元格内容
            worksheet.Range["A1"].Value = "姓名";
            worksheet.Range["B1"].Value = "年龄";
            worksheet.Range["A2"].Value = "张三";
            worksheet.Range["B2"].Value = 25;
            worksheet.Range["A3"].Value = "李四";
            worksheet.Range["B3"].Value = 30;// 保存为 XLSX 文件using (MemoryStream stream = new MemoryStream()){
                workbook.Save(stream, SaveFileFormat.Xlsx);
                stream.Position = 0;// 返回文件流return File(stream, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "example.xlsx");}}}}
</code></pre>
<p>在上述代码中，首先创建了一个新的工作簿，然后获取第一个工作表，接着设置了单元格的内容。最后，将工作簿保存为 XLSX 文件，并通过 <code>File</code> 方法将文件流返回给客户端 。</p>
<h4 id="运行项目并测试">运行项目并测试</h4>
<p>在命令行中使用 <code>dotnet run</code> 命令启动项目。然后在浏览器中访问 <code>http://localhost:5000/Excel</code> （根据实际端口号进行调整），就可以看到浏览器会自动下载生成的 Excel 文件。打开下载的 Excel 文件，可以看到其中包含了我们设置的单元格内容 。</p>
<h3 id="高级应用与拓展功能">高级应用与拓展功能</h3>
<h4 id="数据绑定与动态生成">数据绑定与动态生成</h4>
<p>可以将数据库中的数据绑定到 GcExcel 生成的 Excel 文件中，实现动态生成 Excel 的功能。例如，可以使用 Entity Framework Core 等数据访问框架从数据库中获取数据，然后将数据填充到 Excel 工作表中。以下是一个简单的示例代码：</p>
<pre><code class="language-C#">using System.IO;using System.Threading.Tasks;using GrapeCity.Documents.Excel;using Microsoft.AspNetCore.Mvc;using Microsoft.EntityFrameworkCore;using YourNamespace.Data;using YourNamespace.Models;namespace ExcelGenerator.Controllers{[ApiController][Route("[controller]")]public class ExcelController : ControllerBase{private readonly YourDbContext _context;public ExcelController(YourDbContext context){
            _context = context;}[HttpGet]public async Task&lt;IActionResult&gt; GenerateExcel(){// 从数据库中获取数据var users = await _context.Users.ToListAsync();// 创建一个新的工作簿Workbook workbook = new Workbook();// 获取第一个工作表IWorksheet worksheet = workbook.Worksheets[0];// 设置表头
            worksheet.Range["A1"].Value = "姓名";
            worksheet.Range["B1"].Value = "年龄";// 填充数据for (int i = 0; i &lt; users.Count; i++){
                worksheet.Range[$"A{i + 2}"].Value = users[i].Name;
                worksheet.Range[$"B{i + 2}"].Value = users[i].Age;}// 保存为 XLSX 文件using (MemoryStream stream = new MemoryStream()){
                workbook.Save(stream, SaveFileFormat.Xlsx);
                stream.Position = 0;// 返回文件流return File(stream, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "users.xlsx");}}}}
</code></pre>
<h4 id="单元格格式设置与样式调整">单元格格式设置与样式调整</h4>
<p>GcExcel 提供了丰富的 API 接口，用于设置单元格的格式和样式。可以设置单元格的字体、颜色、边框、对齐方式等。以下是一个简单的示例代码：</p>
<pre><code class="language-C#">// 设置单元格字体
worksheet.Range["A1:B1"].Font.Name = "宋体";
worksheet.Range["A1:B1"].Font.Size = 14;
worksheet.Range["A1:B1"].Font.Bold = true;// 设置单元格背景颜色
worksheet.Range["A1:B1"].Interior.Color = Color.LightGray;// 设置单元格边框
worksheet.Range["A1:B1"].Borders.LineStyle = BorderLineStyle.Thin;
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/139239/202506/139239-20250624094734471-152444077.gif" alt="" loading="lazy"></p>
<h2 id="结论"><strong>结论</strong></h2>
<p>通过将 .NET Core 和 GcExcel 结合使用，开发者可以方便地在 .NET Core 应用程序中实现在线生成 Excel 文件的功能。.NET Core 提供了一个跨平台的开发环境，而 GcExcel 则提供了强大的 Excel 处理能力。通过本文介绍的环境搭建、具体步骤和高级应用等内容，开发者可以根据自己的需求进行定制和拓展，实现更加复杂和个性化的 Excel 生成功能。在实际应用中，这种技术可以广泛应用于数据报表生成、数据分析等领域，为企业和开发者提供了一种高效、便捷的解决方案 。</p>
<p><a href="https://demo.grapecity.com.cn/spread/services/" target="_blank" rel="noopener nofollow">体验地址</a></p>

</div>
<div id="MySignature" role="contentinfo">
    <hr>
<br>
<p style="font-size: 16px; font-family: 微软雅黑, 黑体, Arial; color: #000">本文是由葡萄城技术开发团队发布，转载请注明出处：<a href="https://www.grapecity.com.cn/" target="_blank">葡萄城官网</a></p>
<!--p style="font-size: 16px; font-family: 微软雅黑, 黑体, Arial; color: #000">了解企业级低代码开发平台，请前往<a href="https://www.grapecity.com.cn/solutions/huozige" target="_blank">活字格</a>
</p><p style="font-size: 16px; font-family: 微软雅黑, 黑体, Arial; color: #000">了解可嵌入您系统的在线 Excel，请前往<a href="https://www.grapecity.com.cn/developer/spreadjs" target="_blank">SpreadJS纯前端表格控件</a></p>
<p style="font-size: 16px; font-family: 微软雅黑, 黑体, Arial; color: #000">了解嵌入式的商业智能和报表软件，请前往<a href="https://www.grapecity.com.cn/solutions/wyn" target="_blank">Wyn Enterprise
</a></p-->

<br>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-06-24 09:48">2025-06-24 09:47</span>&nbsp;
<a href="https://www.cnblogs.com/powertoolsteam">葡萄城技术团队</a>&nbsp;
阅读(<span id="post_view_count">69</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18945680);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18945680', targetLink: 'https://www.cnblogs.com/powertoolsteam/p/18945680', title: '使用 .NET Core+GcExcel，生成 Excel 文件' })">举报</a>
</div>
        