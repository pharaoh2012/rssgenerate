
	<h1 class="postTitle"><a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/MikeZhang/p/18977575/winhttpExample20250710" title="发布于 2025-07-10 19:10">
    <span role="heading" aria-level="2">C++使用WinHTTP访问http/https服务</span>
    

</a>
</h1>
	<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p><span>环境： window10_x64 &amp; vs2022</span></p>
<p><span>python版本： 3.9.13</span></p>
<p><span>日常开发中，会遇到c/c++作为客户端访问http/https服务的情况，今天整理下windows10环境下c/c++使用winhttp访问http/https服务的笔记，并提供相关资源下载。</span></p>
<p><span>我将从以下几个方面展开：</span></p>
<ul class="list-paddingleft-1">
<li><span>http服务构建</span></li>
<li><span>https证书生成及服务构建</span></li>
<li><span>winhttp使用示例</span></li>
<li><span>资源下载</span></li>
</ul>
<h1><span><span>一、模拟http服务端</span></span></h1>
<h2><span><span>1、构建http服务</span></span></h2>
<p><span>这里使用tornado来构建http服务。</span></p>
<p><span>示例代码（httpServer1.py）：</span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">! /usr/bin/env python3</span><span style="color: rgba(0, 128, 0, 1)">
#</span><span style="color: rgba(0, 128, 0, 1)">-*- coding:utf-8 -*- </span>
<span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> tornado.ioloop
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> tornado.web
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> tornado.httpserver
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> json,time,datetime
settings </span>=<span style="color: rgba(0, 0, 0, 1)"> {
    </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">debug</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)"> : False ,    
}
</span><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> trace(reqType,reqBody):
    msg </span>= str(datetime.datetime.now()) + <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)"> , [</span><span style="color: rgba(128, 0, 0, 1)">"</span> + reqType + <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">] , </span><span style="color: rgba(128, 0, 0, 1)">"</span> +<span style="color: rgba(0, 0, 0, 1)"> str(reqBody)
    </span><span style="color: rgba(0, 0, 255, 1)">print</span><span style="color: rgba(0, 0, 0, 1)">(msg)
</span><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> MainHandler(tornado.web.RequestHandler):
    </span><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> get(self):
        trace(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">get</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,self.request.arguments)
        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">query = self.get_query_argument("query")</span>
        <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">print("query : %s" % query)</span>
        self.set_header(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">content-type</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">application/json</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)
        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">self.write(json.dumps({"result" : "test message"}))</span>
        self.finish(json.dumps({<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">result</span><span style="color: rgba(128, 0, 0, 1)">"</span> : <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">get message</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">}))
    </span><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> put(self):
        trace(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">put</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,self.request.body)
        self.finish(json.dumps({</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">result</span><span style="color: rgba(128, 0, 0, 1)">"</span> : <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">put message</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">}))

    </span><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> post(self):
        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">trace("post",self.request.arguments)</span>
        trace(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">post</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,self.request.body)
        self.set_header(</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Content-type</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">application/json</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)
        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">self.set_header('Transfer-Encoding', 'chunked')</span>
        self.finish(json.dumps({<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">result</span><span style="color: rgba(128, 0, 0, 1)">"</span> : <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">post message %d</span><span style="color: rgba(128, 0, 0, 1)">"</span> %<span style="color: rgba(0, 0, 0, 1)"> time.time()}))
</span><span style="color: rgba(0, 0, 255, 1)">if</span> <span style="color: rgba(128, 0, 128, 1)">__name__</span> == <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">__main__</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">:
    port </span>= 8093
    <span style="color: rgba(0, 0, 255, 1)">print</span>(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">listen on port %d</span><span style="color: rgba(128, 0, 0, 1)">"</span>%<span style="color: rgba(0, 0, 0, 1)">port)
    application </span>=<span style="color: rgba(0, 0, 0, 1)"> tornado.web.Application([
        (r</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">/.*</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, MainHandler),
    ],</span>**<span style="color: rgba(0, 0, 0, 1)">settings)

    application.listen(port)

    </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">http_server = tornado.httpserver.HTTPServer(application)</span>
    <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">http_server.bind(port,"0.0.0.0")</span>
    <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">http_server.start(num_processes=0) </span>
<span style="color: rgba(0, 0, 0, 1)">
    tornado.ioloop.IOLoop.instance().start()</span></pre>
</div>
<h2><span><span>2、服务运行效果</span></span></h2>
<p><span>curl测试命令如下：</span></p>
<div class="cnblogs_code">
<pre>curl -v  http://127.0.0.1:8093 &amp;&amp; echo <span style="color: rgba(128, 0, 0, 1)">""</span></pre>
</div>
<p><span>运行效果如下：</span></p>
<div>
<p><img src="https://img2024.cnblogs.com/blog/300959/202507/300959-20250710183127728-1945677228.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<h1>二、模拟https服务端</h1>
<p><span>构建https服务，需要使用证书，这里使用自签名证书来实现。</span></p>
<h2><span><span>1、生成证书</span></span></h2>
<p><span>生成自签名证书（genCertTest1.bat）：</span></p>
</div>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">goto start
</span><span style="color: rgba(0, 0, 255, 1)">cat</span> &gt; openssl.cnf &lt;&lt;<span style="color: rgba(0, 0, 0, 1)">EOF
[req]
distinguished_name </span>=<span style="color: rgba(0, 0, 0, 1)"> req_distinguished_name
x509_extensions </span>=<span style="color: rgba(0, 0, 0, 1)"> v3_req
prompt </span>=<span style="color: rgba(0, 0, 0, 1)"> no

[req_distinguished_name]
C </span>=<span style="color: rgba(0, 0, 0, 1)"> CN
ST </span>=<span style="color: rgba(0, 0, 0, 1)"> ShangHai
L </span>=<span style="color: rgba(0, 0, 0, 1)"> ShangHai
O </span>=<span style="color: rgba(0, 0, 0, 1)"> MyCompany
OU </span>=<span style="color: rgba(0, 0, 0, 1)"> Mike_Zhang@live.com
CN </span>=<span style="color: rgba(0, 0, 0, 1)"> localhost

[v3_req]
keyUsage </span>=<span style="color: rgba(0, 0, 0, 1)"> keyEncipherment, dataEncipherment
extendedKeyUsage </span>=<span style="color: rgba(0, 0, 0, 1)"> serverAuth
subjectAltName </span>=<span style="color: rgba(0, 0, 0, 1)"> @alt_names

[alt_names]
DNS.</span><span style="color: rgba(128, 0, 128, 1)">1</span> =<span style="color: rgba(0, 0, 0, 1)"> localhost
DNS.</span><span style="color: rgba(128, 0, 128, 1)">2</span> = <span style="color: rgba(128, 0, 128, 1)">127.0</span>.<span style="color: rgba(128, 0, 128, 1)">0.1</span><span style="color: rgba(0, 0, 0, 1)">
IP.</span><span style="color: rgba(128, 0, 128, 1)">1</span> = <span style="color: rgba(128, 0, 128, 1)">127.0</span>.<span style="color: rgba(128, 0, 128, 1)">0.1</span><span style="color: rgba(0, 0, 0, 1)">
EOF
:start

:: 生成包含SAN的证书
openssl req </span>-x509 -newkey rsa:<span style="color: rgba(128, 0, 128, 1)">4096</span>  -keyout server.key -out server.crt -days <span style="color: rgba(128, 0, 128, 1)">365</span> -nodes -config openssl.cnf -extensions v3_req</pre>
</div>
<p>openssl.cnf文件内容如下：</p>
<div class="cnblogs_Highlighter">
<pre class="brush:csharp;gutter:true;">[req]
distinguished_name = req_distinguished_name
x509_extensions = v3_req
prompt = no
[req_distinguished_name]
C = CN
ST = ShangHai
L = ShangHai
O = MyCompany
OU = Mike_Zhang@live.com
CN = localhost
[v3_req]
keyUsage = keyEncipherment, dataEncipherment
extendedKeyUsage = serverAuth
subjectAltName = @alt_names
[alt_names]
DNS.1 = localhost
DNS.2 = 127.0.0.1
IP.1 = 127.0.0.1
</pre>
</div>
<p>执行 genCertTest1.bat 脚本，会生产证书文件：</p>
<p><img src="https://img2024.cnblogs.com/blog/300959/202507/300959-20250710184719972-801713967.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<h1><span><span>2、构建https服务</span></span></h1>
<p><span>这里基于tornado来实现，添加ssl相关内容即可。</span></p>
<p><span>示例代码如下（httpsServer1.py）：</span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">! /usr/bin/env python3</span><span style="color: rgba(0, 128, 0, 1)">
#</span><span style="color: rgba(0, 128, 0, 1)">-*- coding:utf-8 -*- </span>
<span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> tornado.ioloop
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> tornado.web
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> tornado.httpserver
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> json,time,datetime
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> ssl
settings </span>=<span style="color: rgba(0, 0, 0, 1)"> {
    </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">debug</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)"> : False ,    
}
</span><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> trace(reqType,reqBody):
    msg </span>= str(datetime.datetime.now()) + <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)"> , [</span><span style="color: rgba(128, 0, 0, 1)">"</span> + reqType + <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">] , </span><span style="color: rgba(128, 0, 0, 1)">"</span> +<span style="color: rgba(0, 0, 0, 1)"> str(reqBody)
    </span><span style="color: rgba(0, 0, 255, 1)">print</span><span style="color: rgba(0, 0, 0, 1)">(msg)
</span><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> MainHandler(tornado.web.RequestHandler):
    </span><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> get(self):
        trace(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">get</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,self.request.arguments)
        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">query = self.get_query_argument("query")</span>
        <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">print("query : %s" % query)</span>
        self.set_header(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">content-type</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">application/json</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)
        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">self.write(json.dumps({"result" : "test message"}))</span>
        self.finish(json.dumps({<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">result</span><span style="color: rgba(128, 0, 0, 1)">"</span> : <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">get message</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">}))
    </span><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> put(self):
        trace(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">put</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,self.request.body)
        self.finish(json.dumps({</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">result</span><span style="color: rgba(128, 0, 0, 1)">"</span> : <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">put message</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">}))

    </span><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> post(self):
        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">trace("post",self.request.arguments)</span>
        trace(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">post</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,self.request.body)
        self.set_header(</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Content-type</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">application/json</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)
        self.finish(json.dumps({</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">result</span><span style="color: rgba(128, 0, 0, 1)">"</span> : <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">post message %d</span><span style="color: rgba(128, 0, 0, 1)">"</span> %<span style="color: rgba(0, 0, 0, 1)"> time.time()}))
</span><span style="color: rgba(0, 0, 255, 1)">if</span> <span style="color: rgba(128, 0, 128, 1)">__name__</span> == <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">__main__</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">:
    </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">ssl_ctx = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)</span>
    ssl_ctx =<span style="color: rgba(0, 0, 0, 1)"> ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)
    ssl_ctx.load_cert_chain(
        certfile</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">server.crt</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,  
        keyfile</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">server.key</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">    
    )
    ssl_ctx.options </span>|=<span style="color: rgba(0, 0, 0, 1)"> (
        ssl.OP_NO_SSLv2 </span>|<span style="color: rgba(0, 0, 0, 1)"> 
        ssl.OP_NO_SSLv3 </span>|<span style="color: rgba(0, 0, 0, 1)"> 
        ssl.OP_NO_TLSv1 </span>|<span style="color: rgba(0, 0, 0, 1)"> 
        ssl.OP_NO_TLSv1_1 </span>|<span style="color: rgba(0, 0, 0, 1)">
        ssl.OP_NO_COMPRESSION
    )

     </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 设置现代加密套件</span>
<span style="color: rgba(0, 0, 0, 1)">    ssl_ctx.set_ciphers(
        </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">ECDHE-ECDSA-AES256-GCM-SHA384:</span><span style="color: rgba(128, 0, 0, 1)">'</span>
        <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">ECDHE-RSA-AES256-GCM-SHA384:</span><span style="color: rgba(128, 0, 0, 1)">'</span>
        <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">ECDHE-ECDSA-CHACHA20-POLY1305:</span><span style="color: rgba(128, 0, 0, 1)">'</span>
        <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">ECDHE-RSA-CHACHA20-POLY1305:</span><span style="color: rgba(128, 0, 0, 1)">'</span>
        <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">DHE-RSA-AES256-GCM-SHA384</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">
    )

    </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 设置椭圆曲线    </span>
    ssl_ctx.set_ecdh_curve(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">prime256v1</span><span style="color: rgba(128, 0, 0, 1)">'</span>)  <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 必需的安全设置</span>
<span style="color: rgba(0, 0, 0, 1)">
    port </span>= 8443
    <span style="color: rgba(0, 0, 255, 1)">print</span>(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">listen on port %d</span><span style="color: rgba(128, 0, 0, 1)">"</span>%<span style="color: rgba(0, 0, 0, 1)">port)
    app </span>=<span style="color: rgba(0, 0, 0, 1)"> tornado.web.Application([
        (r</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">/.*</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, MainHandler),
    ],</span>**<span style="color: rgba(0, 0, 0, 1)">settings)


    http_server </span>= tornado.httpserver.HTTPServer(app, ssl_options=<span style="color: rgba(0, 0, 0, 1)">ssl_ctx)
    </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">http_server.listen(port)</span>
    http_server.bind(port,<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">0.0.0.0</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
    http_server.start() 

    tornado.ioloop.IOLoop.current().start()</span></pre>
</div>
<h2><span><span>3、服务运行效果</span></span></h2>
<p><span>curl测试命令如下（忽略证书）：</span></p>
<div class="cnblogs_code">
<pre>curl -vk  https://127.0.0.1:8443 &amp;&amp; echo <span style="color: rgba(128, 0, 0, 1)">""</span></pre>
</div>
<p><span>运行效果如下：</span></p>
<div>
<p><img src="https://img2024.cnblogs.com/blog/300959/202507/300959-20250710184839067-2143668536.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<h1><span><span>三、使用WinHTTP实现客户端</span></span></h1>
<h2><span><span>1、WinHTTP说明</span></span></h2>
<p>Microsoft Windows HTTP 服务 (WinHTTP) 提供 HTTP 客户端应用程序编程接口 (API)，以便通过 HTTP 协议将请求发送到其他 HTTP 服务器。</p>
<p>该服务提供 C/C++ 应用程序编程接口 (API) ，支持HTTPS协议。</p>
<p><span>文档地址：</span></p>
<p><a href="https://learn.microsoft.com/zh-cn/windows/win32/winhttp/winhttp-start-page" target="_blank" rel="noopener nofollow"><span><span>https://learn.microsoft.com/zh-cn/windows/win32/winhttp/winhttp-start-page</span></span></a></p>
<p><span>c/c++接口文档地址：</span></p>
<p><a href="https://learn.microsoft.com/zh-cn/windows/win32/winhttp/using-the-winhttp-c-c---api" target="_blank" rel="noopener nofollow"><span><span>https://learn.microsoft.com/zh-cn/windows/win32/winhttp/using-the-winhttp-c-c---api</span></span></a></p>
</div>
<p><img src="https://img2024.cnblogs.com/blog/300959/202507/300959-20250710184950002-45566932.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<h2><span><span>2、使用示例</span></span></h2>
<p><span>关键点：</span></p>
<p><span>1）使用 WinHttpConnect 函数创建连接；</span></p>
<p><span>2）使用WinHttpOpenRequest设置get/post方法、http/https协议等参数；</span></p>
<p><span>3）WinHttpAddRequestHeaders 设置http自定义请求头；</span></p>
<p><span>4）WinHttpSendRequest发送数据；</span></p>
<p><span>示例代码如下（winhttpTest1.cpp）：</span></p>
<p><img src="https://img2024.cnblogs.com/blog/300959/202507/300959-20250710190041967-990881857.png" alt="" loading="lazy"></p>
<p>&nbsp;完整代码可从如下渠道获取：</p>
<div>关注微信公众号（聊聊博文，文末可扫码）后回复 20250709 获取。</div>
<div>&nbsp;</div>
<div>
<div>运行效果如下：</div>
</div>
<div>
<p><img src="https://img2024.cnblogs.com/blog/300959/202507/300959-20250710190207576-1839293083.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<h1 id="nd0l-1752145368343">四、资源获取</h1>
<div>本文涉及资源可从如下渠道获取：</div>
<div>关注微信公众号（聊聊博文，文末可扫码）后回复 20250709 获取。</div>
</div>
<p><img src="https://img2024.cnblogs.com/blog/300959/202507/300959-20250710190556376-385017285.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
</div>
<div id="MySignature" role="contentinfo">
    如果你对该文章有疑问，可通过微信公众号（聊聊博文）向我提问：<br>
<a href="https://files.cnblogs.com/files/MikeZhang/201804weixingongzhong1.gif" target="_blank">
<img src="https://files.cnblogs.com/files/MikeZhang/201804weixingongzhong1.gif" width="170"></a><br>
转载请注明出处，谢谢！
</div>
<div class="clear"></div>

	<div class="postDesc">posted on 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-07-10 19:11">2025-07-10 19:10</span>&nbsp;
<a href="https://www.cnblogs.com/MikeZhang">Mike_Zhang</a>&nbsp;
阅读(<span id="post_view_count">76</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18977575);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18977575', targetLink: 'https://www.cnblogs.com/MikeZhang/p/18977575/winhttpExample20250710', title: 'C++使用WinHTTP访问http/https服务' })">举报</a>
</div>
