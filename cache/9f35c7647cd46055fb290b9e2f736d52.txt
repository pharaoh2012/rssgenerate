<!----> <meta itemprop="headline" content="🤡什么鬼？两行代码就能适应任何屏幕？"> <meta itemprop="keywords" content="前端"> <meta itemprop="datePublished" content="2025-04-28T03:26:48.000Z"> <meta itemprop="image" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-128.png~tplv-t2oaga2asx-image.image"> <div itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><meta itemprop="name" content="前端九哥"> <meta itemprop="url" content="https://juejin.cn/user/3659622444970574"></div> <div itemprop="publisher" itemscope="itemscope" itemtype="http://schema.org/Organization"><meta itemprop="name" content="掘金"> <div itemprop="logo" itemscope="itemscope" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-white-180.png~tplv-t2oaga2asx-image.image"> <meta itemprop="width" content="180"> <meta itemprop="height" content="180"></div></div> <h1 class="article-title" data-v-799d3073="">
            🤡什么鬼？两行代码就能适应任何屏幕？
            <!----> <!----></h1> <div class="author-info-block block-hidden" data-v-799d3073=""><div class="author-info-box" data-v-799d3073=""><div class="author-name" data-v-799d3073=""><a href="/user/3659622444970574/posts" target="_blank" rel="" class="jj-link username username ellipsis" data-v-65b50b51="" data-v-6a576a98="" data-v-799d3073=""><span class="name" style="max-width:160px;" data-v-65b50b51="" data-v-6a576a98="">
    前端九哥
  </span> <!----> <!----> <!----> </a></div> <div class="meta-box" data-v-799d3073=""><time datetime="2025-04-28T03:26:48.000Z" title="Mon Apr 28 2025 03:26:48 GMT+0000 (Coordinated Universal Time)" class="time" data-v-799d3073="">
                    2025-04-28
                  </time> <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" class="read-icon" data-v-799d3073=""><path d="M7.90078 2.80078C4.49278 2.80078 1.74745 6.11672 0.800781 7.77469C1.74745 9.58339 4.49278 13.2008 7.90078 13.2008C11.3088 13.2008 14.0541 9.58339 15.0008 7.77469C14.0541 6.11672 11.3088 2.80078 7.90078 2.80078Z" stroke="currentColor" data-v-799d3073=""></path><circle cx="7.89922" cy="8.00078" r="2.2" stroke="currentColor" data-v-799d3073=""></circle></svg> <span class="views-count" data-v-799d3073="">
                    17,287
                  </span> <span class="read-time" data-v-799d3073=""><svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" data-v-799d3073=""><rect width="16" height="16" fill="none" data-v-799d3073=""></rect><circle cx="8" cy="8" r="5.65625" stroke="#8A919F" data-v-799d3073=""></circle><path d="M7.69141 5.18652V8.30924H10.8141" stroke="#8A919F" stroke-linecap="round" stroke-linejoin="round" data-v-799d3073=""></path></svg>
                    阅读4分钟
                  </span> <!----></div></div> <div style="flex:1;" data-v-799d3073=""></div> <!----> <!----></div> <!----> <!----> <!----> <!----> <div id="article-root" itemprop="articleBody" class="main" data-v-799d3073=""><div class="article-viewer markdown-body cache result"><p>你可能想不到，只用<strong>两行 CSS</strong>，就能让你的卡片、图片、内容块<strong>自动适应</strong>各种屏幕宽度，彻底摆脱复杂的媒体查询！
秘诀就是 CSS Grid 的 <code>auto-fill</code> 和 <code>auto-fit</code>。</p>
<p><img src="https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/6dd3e1390a1f48c3b1d75f5f09d52020~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5YmN56uv5Lmd5ZOl:q75.awebp?rk3s=f64ab15b&amp;x-expires=1748308968&amp;x-signature=gzfmmquURfQ2qw2irXfrLAXW2t8%3D" alt="20250428112254_rec_.gif" loading="lazy"></p>
<p>马上教你用！✨</p>
<hr>
<h2 data-id="heading-0">🧩 基础概念</h2>
<p>假设你有这样一个需求：</p>
<ul>
<li>一排展示很多卡片</li>
<li>每个卡片最小宽度 200px，剩余空间平均分配</li>
<li>屏幕变窄时自动换行</li>
</ul>
<p>只需在父元素加两行 CSS 就能实现：</p>
<pre><code class="hljs language-css" lang="css"><span class="hljs-comment">/* 父元素 */</span>
<span class="hljs-selector-class">.grid</span> {
  <span class="hljs-attribute">display</span>: grid;
  <span class="hljs-attribute">grid-template-columns</span>: <span class="hljs-built_in">repeat</span>(auto-fit, <span class="hljs-built_in">minmax</span>(<span class="hljs-number">200px</span>, <span class="hljs-number">1</span>fr));
}

<span class="hljs-comment">/* 子元素 */</span>
<span class="hljs-selector-class">.item</span> {
  <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;
  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">141</span>, <span class="hljs-number">141</span>, <span class="hljs-number">255</span>);
  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>;
}
</code></pre>
<hr>
<p>下面详细解释这行代码的意思：</p>
<pre><code class="hljs language-css" lang="css"><span class="hljs-attribute">grid-template-columns</span>: <span class="hljs-built_in">repeat</span>(auto-fit, <span class="hljs-built_in">minmax</span>(<span class="hljs-number">200px</span>, <span class="hljs-number">1</span>fr));
</code></pre>
<p>这是 CSS Grid 布局里定义列宽的常用写法，逐个拆解如下：</p>
<h3 data-id="heading-1">1. <code>grid-template-columns</code></h3>
<ul>
<li>作用：定义<strong>网格容器</strong>里有多少列，以及每列的宽度。</li>
</ul>
<h3 data-id="heading-2">2. <code>repeat(auto-fit, ...)</code></h3>
<ul>
<li><code>repeat</code> 是个<strong>重复函数</strong>，表示后面的模式会被重复多次。</li>
<li><code>auto-fit</code> 是一个特殊值，意思是：<strong>自动根据容器宽度，能放下几个就放几个</strong>，每列都用后面的规则。
<ul>
<li>容器宽度足够时，能多放就多放，放不下就自动换行。</li>
</ul>
</li>
</ul>
<h3 data-id="heading-3">3. <code>minmax(200px, 1fr)</code></h3>
<ul>
<li><code>minmax</code> 也是一个函数，意思是：<strong>每列最小200px，最大可以占1fr（剩余空间的平分）</strong></li>
<li>具体来说：
<ul>
<li>当屏幕宽度很窄时，每列<strong>最小宽度是200px</strong>，再窄就会换行。</li>
<li>当屏幕宽度变宽，卡片会自动拉伸，每列<strong>最大可以占据剩余空间的等分</strong>（<code>1fr</code>），让内容填满整行。</li>
</ul>
</li>
</ul>
<h3 data-id="heading-4">4. 综合起来</h3>
<ul>
<li>这行代码的意思就是：
<ul>
<li>网格会自动生成多列，每列最小200px，最大可以平分一行的剩余空间。</li>
<li>屏幕宽了就多显示几列，屏幕窄了就少显示几列，自动换行，自适应各种屏幕！</li>
<li><strong>不需要媒体查询</strong>，布局就能灵活响应。</li>
</ul>
</li>
</ul>
<h4 data-id="heading-5">总结一句话：</h4>
<blockquote>
<p><code>grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));</code><br>
让你的网格卡片<strong>最小200px，最大自动填满一行</strong>，自动适应任何屏幕，布局永远美观！</p>
</blockquote>
<hr>
<h3 data-id="heading-6">这里还能填 <code>auto-fill</code>，和 <code>auto-fit</code> 有啥区别？</h3>
<hr>
<h2 data-id="heading-7">🥇 auto-fill 和 auto-fit 有啥区别？</h2>
<h3 data-id="heading-8">1. <code>auto-fill</code></h3>
<blockquote>
<p>🧱 <strong>尽可能多地填充列，即使没有内容也会“占位”</strong></p>
</blockquote>
<ul>
<li>会自动创建尽可能多的列轨道（包括空轨道），让网格尽量填满容器。</li>
<li>适合需要“列对齐”或“固定网格数”的场景。</li>
</ul>
<h3 data-id="heading-9">2. <code>auto-fit</code></h3>
<blockquote>
<p>🧱 <strong>自动适应内容，能合并多余空列，不占位</strong></p>
</blockquote>
<ul>
<li>会自动“折叠”没有内容的轨道，让现有的内容尽量拉伸占满空间。</li>
<li>适合希望内容自适应填满整行的场景。</li>
</ul>
<hr>
<h3 data-id="heading-10">👀 直观对比</h3>
<p>假设容器宽度能容纳 10 个 200px 的卡片，但你只放了 5 个卡片：</p>
<ul>
<li><code>auto-fill</code> 会保留 10 列宽度，5 个卡片在前五列，后面五列是“空轨道”。</li>
<li><code>auto-fit</code> 会折叠掉后面五列，让这 5 个卡片拉伸填满整行。</li>
</ul>
<p><img src="https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/7eb2bea6369c4677b2976db3b856ec2e~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5YmN56uv5Lmd5ZOl:q75.awebp?rk3s=f64ab15b&amp;x-expires=1748308968&amp;x-signature=M39%2Fyhx3vPnVokGHbTDly3BZJdc%3D" alt="20250428151427_rec_.gif" loading="lazy"></p>
<h4 data-id="heading-11">👇 Demo 代码：</h4>
<pre><code class="hljs language-html" lang="html"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>auto-fill<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"grid-fill"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>item1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>item2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>item3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>item4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>item5<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>auto-fit<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"grid-fit"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>item1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>item2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>item3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>item4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>item5<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
</code></pre>
<pre><code class="hljs language-css" lang="css"><span class="hljs-selector-class">.grid-fill</span> {
  <span class="hljs-attribute">display</span>: grid;
  <span class="hljs-attribute">grid-template-columns</span>: <span class="hljs-built_in">repeat</span>(auto-fill, <span class="hljs-built_in">minmax</span>(<span class="hljs-number">200px</span>, <span class="hljs-number">1</span>fr));
  <span class="hljs-attribute">gap</span>: <span class="hljs-number">16px</span>;
  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">40px</span>;
}
<span class="hljs-selector-class">.grid-fit</span> {
  <span class="hljs-attribute">display</span>: grid;
  <span class="hljs-attribute">grid-template-columns</span>: <span class="hljs-built_in">repeat</span>(auto-fit, <span class="hljs-built_in">minmax</span>(<span class="hljs-number">200px</span>, <span class="hljs-number">1</span>fr));
  <span class="hljs-attribute">gap</span>: <span class="hljs-number">16px</span>;
}
<span class="hljs-selector-class">.grid-fill</span> <span class="hljs-selector-tag">div</span> {
  <span class="hljs-attribute">background</span>: <span class="hljs-number">#08f700</span>;
}
<span class="hljs-selector-class">.grid-fit</span> <span class="hljs-selector-tag">div</span> {
  <span class="hljs-attribute">background</span>: <span class="hljs-number">#f7b500</span>;
}
<span class="hljs-selector-class">.grid-fill</span> <span class="hljs-selector-tag">div</span>,
<span class="hljs-selector-class">.grid-fit</span> <span class="hljs-selector-tag">div</span> {
  <span class="hljs-attribute">padding</span>: <span class="hljs-number">24px</span>;
  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>;
  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">8px</span>;
  <span class="hljs-attribute">text-align</span>: center;
}
</code></pre>
<h2 data-id="heading-12">兼容性</h2>
<p><a href="https://link.juejin.cn?target=https%3A%2F%2Fcaniuse.com%2F%3Fsearch%3Dauto-fill" target="_blank" title="https://caniuse.com/?search=auto-fill" ref="nofollow noopener noreferrer">caniuse.com/?search=aut…</a></p>
<p><img src="https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/29a8a48109784650b915031fd618576f~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5YmN56uv5Lmd5ZOl:q75.awebp?rk3s=f64ab15b&amp;x-expires=1748308968&amp;x-signature=6yirAsu4u6O3%2FnXclPlefXc%2B43o%3D" alt="image.png" loading="lazy"></p>
<hr>
<h2 data-id="heading-13">🎯 什么时候用 auto-fill，什么时候用 auto-fit？</h2>
<ul>
<li>
<p><strong>希望每行“有多少内容就撑多宽”，用 <code>auto-fit</code></strong><br>
适合卡片式布局、相册、响应式按钮等。</p>
</li>
<li>
<p><strong>希望“固定列数/有占位”，用 <code>auto-fill</code></strong><br>
比如表格、日历，或者你希望网格始终对齐，即使内容不满。</p>
</li>
</ul>
<hr>
<h2 data-id="heading-14">📝 总结</h2>























<table><thead><tr><th>属性</th><th>空轨道</th><th>内容拉伸</th><th>适用场景</th></tr></thead><tbody><tr><td>auto-fill</td><td>保留</td><td>否</td><td>固定列数、占位网格</td></tr><tr><td>auto-fit</td><td>折叠</td><td>是</td><td>流式布局、拉伸填充</td></tr></tbody></table>
<hr>
<h2 data-id="heading-15">🌟 小结</h2>
<ul>
<li><code>auto-fill</code> 更像“占位”，<code>auto-fit</code> 更像“自适应”</li>
<li>推荐大部分响应式卡片用 <code>auto-fit</code></li>
<li>善用 <code>minmax</code> 配合，让列宽自适应得更自然</li>
</ul>
<hr>
<p>只需两行代码，你的页面就能优雅适配各种屏幕！<br>
觉得有用就点赞收藏吧，更多前端干货持续更新中！🚀✨</p></div></div>