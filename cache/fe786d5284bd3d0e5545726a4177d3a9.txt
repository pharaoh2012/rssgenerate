
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/paw5zx/p/18764067" title="发布于 2025-03-11 02:58">
    <span role="heading" aria-level="2">SICK Ranger3源码分析——断线重连</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        简单分析Ranger3源码断线重连的实现
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="前言">前言</h1>
<p>本文可在<a href="https://paw5zx.github.io/SICK-Ranger3-source-code-analysis-01/" target="_blank" rel="noopener nofollow">https://paw5zx.github.io/SICK-Ranger3-source-code-analysis-01/</a>中阅读，体验更佳</p>
<p>简单分析一下SICK Ranger3源码中断线重连的实现，这一块算是比较容易的，先择出来分析一下。</p>
<p>代码示例仅贴出关键部分以便分析</p>
<p>使用SDK版本为3.4.2.6</p>
<p>断线重连官方例程：Demo_R3_callback_with_heartbeat.cpp</p>
<h1 id="断线检测">断线检测</h1>
<p>断线重连可以划分为两步，首先检测相机断线并通知，然后用户在收到通知后进行重连操作。我们先看SICK如何实现断线检测。</p>
<p>断线检测机制内置于SICK SDK中，由SICK SDK管理：</p>
<pre><code class="language-cpp">// file: Ranger.cpp
EXPORT_TO_DLL CAM_STATUS
Ranger3::connectCamera(CallbackEvent_HeartBeats pCallback, const uint32_t&amp; microSecond, void * any)
{
	try{
		auto e = connectCamera();
		if(e == CAM_STATUS::All_OK)
		{
            m_heartbeat_is_on = 1;
            ...
            // 开启心跳检测线程
			auto _thread = std::make_shared&lt;std::thread&gt;(&amp;Ranger3::_check_HeartBeats_run, this);
			_thread-&gt;detach();
		}
		return e;
	}
    ...
}

void
Ranger3::_check_HeartBeats_run()
{
    while (m_heartbeat_is_on==1)
    {
        __sleep1MS(m_heartbeat_interval);
        ...
        try {
            Str value("");
            // 设备在线，不抛异常，反之，抛出异常
            m_Param.getParameter(m_deviceNodeMap, "DeviceTemperature", value);
            ...
        }
        catch (...) {
            ...
        }
    }
}
</code></pre>
<p>可以看出，断线检测机制很简单，就是分离一个线程，循环访问相机寄存器（SICK的实现是通过定时获取设备温度访问相机寄存器），若访问不到（失败），就意味着相机已离线。</p>
<p>{% notel purple Paw5zx注： %}</p>
<p>{% endnotel %}</p>
<h1 id="断线通知">断线通知</h1>
<p>断线通知机制同样内置于SICK SDK中：在检测到设备离线后，调用注册好的回调函数（注册过程将在下文介绍）</p>
<pre><code class="language-cpp">// file: Ranger.cpp
void
Ranger3::_check_HeartBeats_run()
{
    while (m_heartbeat_is_on==1)
    {
        __sleep1MS(m_heartbeat_interval);
        ...
        try {
            Str value("");
            // 设备在线，不抛异常，反之，抛出异常
            m_Param.getParameter(m_deviceNodeMap, "DeviceTemperature", value);
            ...
        }
        catch (...) {
            // 一些资源释放操作
            ...
            // m_on_lost_function为注册好的回调函数对象
            // 设备离线，访问寄存器失败，捕获异常，调用m_on_lost_function
            auto _thread = std::make_shared&lt;std::thread&gt;(m_on_lost_function, &amp;m_DeviceName, &amp;m_DeviceIP, &amp;m_on_lost_mac, &amp;msg, m_on_lost_inputs);
			_thread-&gt;join();
            return;
        }
    }
}
</code></pre>
<h1 id="重连实现">重连实现</h1>
<p>重连机制的具体实现由用户进行。在例程<code>Demo_R3_callback_with_heartbeat.cpp</code>中，由用户自定义一个回调函数（在相机离线时会被调用），回调内循环对相机进行重连操作。用户在连接相机时注册这个回调</p>
<p>用户层代码：</p>
<pre><code class="language-cpp">// file: Demo_R3_callback_with_heartbeat.cpp

// 用户定义的回调函数，在相机断开连接时被调用
void SICK_CALLBACK
on_lost_device_Demo_R3_callback_with_heartbeat(std::string* name, std::string* ip, std::string* mac, std::string* msg, void * pR3)
{
    auto pCam = (SickCam::Ranger3*)pR3;
    while (true)
    {
        // 根据相机对象存储的设备信息对物理相机进行重连操作，不展开说明了
        auto ec = pCam-&gt;reconnectCamera();
        ...
        __sleep1MS(1000);
    }
}
// 连接相机时注册回调
auto err = pCam1-&gt;connectCamera(on_lost_device_Demo_R3_callback_with_heartbeat, 1000, pCam1.get());
</code></pre>
<p>在SICK SDK中，注册过程会：</p>
<ul>
<li>将用户注册的<code>on_lost_device_Demo_R3_callback_with_heartbeat</code>赋值给<code>m_on_lost_function</code></li>
<li>将用户传递上下文信息<code>any</code>赋值给<code>m_on_lost_inputs</code></li>
</ul>
<pre><code class="language-cpp">// file: Ranger3.h
typedef std::function&lt;void(std::string* name, std::string* ip, std::string* mac, std::string* msg, void* any)&gt;  CallbackEvent_HeartBeats;

// file: Ranger.cpp
/*
[in] – pCallback 当失去心跳时，将调用由用户定义的回调函数。相应的处理可以在此函数中执行。
[in] – microSecond 读取心跳的时间间隔，单位毫秒，推荐值为 10 000;
[in] – any 在失去心跳的响应函数（CallbackEvent_HeartBeats）中，该指针将作为输入参数，由用户定义。
*/
EXPORT_TO_DLL CAM_STATUS
Ranger3::connectCamera(CallbackEvent_HeartBeats pCallback, const uint32_t&amp; microSecond, void * any)
{
	try{
		auto e = connectCamera();
		if(e == CAM_STATUS::All_OK)
		{
			...
            m_on_lost_function = pCallback;
			m_on_lost_inputs = any;
			auto _thread = std::make_shared&lt;std::thread&gt;(&amp;Ranger3::_check_HeartBeats_run, this);
			_thread-&gt;detach();
		}
		return e;
	}
    ...
}
</code></pre>
<p>注册完毕后，当相机出现离线情况，就如<a href="./#%E6%96%AD%E7%BA%BF%E9%80%9A%E7%9F%A5" target="_blank" rel="noopener nofollow">上文所述</a>，SDK会调用注册的回调函数进行重连。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.04849108969907408" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-11 03:06">2025-03-11 02:58</span>&nbsp;
<a href="https://www.cnblogs.com/paw5zx">paw5zx</a>&nbsp;
阅读(<span id="post_view_count">2</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18764067" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18764067);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18764067', targetLink: 'https://www.cnblogs.com/paw5zx/p/18764067', title: 'SICK Ranger3源码分析——断线重连' })">举报</a>
</div>
        