
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/liyongqiang-cc/p/18631327" title="发布于 2025-01-12 11:27">
    <span role="heading" aria-level="2">中间件 vs 过滤器</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>在 ASP.NET Core 中，<strong>中间件（Middleware）</strong> 和 <strong>过滤器（Filters）</strong> 是两种不同的机制，用于处理请求和响应的管道。它们的作用和适用场景有所不同，以下是它们的对比和详细说明：</p>
<hr>
<h2 id="中间件middleware">中间件（Middleware）</h2>
<h3 id="定义"><strong>定义</strong></h3>
<p>中间件是 ASP.NET Core 请求处理管道中的组件，用于处理 HTTP 请求和响应。每个中间件可以对请求进行处理，并决定是否将请求传递给下一个中间件。</p>
<h3 id="特点"><strong>特点</strong></h3>
<ol>
<li><strong>全局性</strong>：中间件作用于整个应用程序的请求管道，适用于所有请求。</li>
<li><strong>顺序性</strong>：中间件的执行顺序由 <code>UseMiddleware</code> 或 <code>Use</code> 方法的调用顺序决定。</li>
<li><strong>灵活性</strong>：可以处理请求和响应，甚至可以终止请求管道（不调用下一个中间件）。</li>
<li><strong>低级别</strong>：中间件更接近底层，可以直接操作 <code>HttpContext</code>。</li>
</ol>
<h3 id="适用场景"><strong>适用场景</strong></h3>
<ul>
<li>全局的请求处理逻辑（如身份验证、日志记录、异常处理）。</li>
<li>修改请求或响应的内容（如添加自定义头、压缩响应）。</li>
<li>终止请求管道（如未授权的请求直接返回 401）。</li>
</ul>
<h3 id="示例"><strong>示例</strong></h3>
<pre><code>public&nbsp;class&nbsp;CustomMiddleware
{
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;readonly&nbsp;RequestDelegate&nbsp;_next;

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;CustomMiddleware(RequestDelegate&nbsp;next)
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_next&nbsp;=&nbsp;next;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;async&nbsp;Task&nbsp;InvokeAsync(HttpContext&nbsp;context)
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;处理请求
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;context.Response.Headers.Add("X-Custom-Header",&nbsp;"Middleware");

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;调用下一个中间件
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;await&nbsp;_next(context);
&nbsp;&nbsp;&nbsp;&nbsp;}
}

//&nbsp;注册中间件
app.UseMiddleware&lt;CustomMiddleware&gt;();
</code></pre>
<hr>
<h2 id="过滤器filters">过滤器（Filters）</h2>
<h3 id="定义-1"><strong>定义</strong></h3>
<p>过滤器是 ASP.NET Core MVC 或 Minimal API 中的一种机制，用于在特定的 MVC 操作（Action）或控制器（Controller）前后执行逻辑。过滤器是 MVC 框架的一部分，而不是请求管道的一部分。</p>
<h3 id="特点-1"><strong>特点</strong></h3>
<ol>
<li><strong>局部性</strong>：过滤器可以应用于特定的控制器或操作，而不是全局的。</li>
<li><strong>细粒度控制</strong>：可以在操作执行前、执行后或执行过程中插入逻辑。</li>
<li><strong>MVC 集成</strong>：过滤器与 MVC 框架紧密集成，可以访问 MVC 特定的上下文（如 <code>ActionExecutingContext</code>）。</li>
<li><strong>高级别</strong>：过滤器更关注 MVC 操作的行为，而不是底层的 HTTP 请求。</li>
</ol>
<h3 id="适用场景-1"><strong>适用场景</strong></h3>
<ul>
<li>控制器或操作级别的逻辑（如授权、模型验证、日志记录）。</li>
<li>修改操作的结果（如格式化响应、处理异常）。</li>
<li>在操作执行前后执行特定逻辑。</li>
</ul>
<h3 id="过滤器类型"><strong>过滤器类型</strong></h3>
<ol>
<li><strong>Authorization Filters</strong>：用于授权（如 <code>[Authorize]</code>）。</li>
<li><strong>Resource Filters</strong>：在操作执行前后执行逻辑（如缓存）。</li>
<li><strong>Action Filters</strong>：在操作执行前后执行逻辑（如日志记录）。</li>
<li><strong>Exception Filters</strong>：处理操作中的异常。</li>
<li><strong>Result Filters</strong>：在操作结果执行前后执行逻辑（如格式化响应）。</li>
</ol>
<h3 id="示例-1"><strong>示例</strong></h3>
<pre><code>public&nbsp;class&nbsp;CustomActionFilter&nbsp;:&nbsp;IActionFilter
{
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;OnActionExecuting(ActionExecutingContext&nbsp;context)
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;在操作执行前执行
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;context.HttpContext.Response.Headers.Add("X-Custom-Header",&nbsp;"ActionFilter");
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;OnActionExecuted(ActionExecutedContext&nbsp;context)
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;在操作执行后执行
&nbsp;&nbsp;&nbsp;&nbsp;}
}

//&nbsp;注册过滤器
[ServiceFilter(typeof(CustomActionFilter))]
public&nbsp;class&nbsp;HomeController&nbsp;:&nbsp;Controller
{
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;IActionResult&nbsp;Index()
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;View();
&nbsp;&nbsp;&nbsp;&nbsp;}
}
</code></pre>
<hr>
<h2 id="中间件-vs-过滤器的对比">中间件 vs 过滤器的对比</h2>
<table>
<thead>
<tr>
<th><strong>特性</strong></th>
<th><strong>中间件（Middleware）</strong></th>
<th><strong>过滤器（Filters）</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>作用范围</strong></td>
<td>全局（整个应用程序的请求管道）</td>
<td>局部（特定的控制器或操作）</td>
</tr>
<tr>
<td><strong>执行顺序</strong></td>
<td>在请求管道的早期执行</td>
<td>在 MVC 操作执行前后执行</td>
</tr>
<tr>
<td><strong>适用场景</strong></td>
<td>全局的请求处理逻辑（如日志、异常处理）</td>
<td>控制器或操作级别的逻辑（如授权、模型验证）</td>
</tr>
<tr>
<td><strong>访问上下文</strong></td>
<td>直接访问 <code>HttpContext</code></td>
<td>访问 MVC 特定的上下文（如 <code>ActionContext</code></td>
</tr>
<tr>
<td>）</td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>灵活性</strong></td>
<td>更灵活，可以终止请求管道</td>
<td>更专注于 MVC 操作的行为</td>
</tr>
<tr>
<td><strong>性能</strong></td>
<td>更轻量，适合底层操作</td>
<td>稍重，适合 MVC 特定的逻辑</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="如何选择">如何选择？</h2>
<ol>
<li><strong>使用中间件</strong>：
<ul>
<li>当你需要处理全局的请求逻辑时。</li>
<li>当你需要直接操作 <code>HttpContext</code> 时。</li>
<li>当你需要在 MVC 框架之外处理请求时。</li>
</ul>
</li>
<li><strong>使用过滤器</strong>：
<ul>
<li>当你需要处理特定控制器或操作的逻辑时。</li>
<li>当你需要与 MVC 框架紧密集成时（如授权、模型验证）。</li>
<li>当你需要在操作执行前后执行特定逻辑时。</li>
</ul>
</li>
</ol>
<hr>
<h2 id="结合使用">结合使用</h2>
<p>在实际项目中，中间件和过滤器可以结合使用。例如：</p>
<ul>
<li>使用中间件处理全局的日志记录和异常处理。</li>
<li>使用过滤器处理控制器或操作级别的授权和模型验证。</li>
</ul>
<p>通过合理使用中间件和过滤器，可以构建一个高效、灵活且易于维护的 ASP.NET Core 应用程序。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="3.03483946134375" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-12 11:28">2025-01-12 11:27</span>&nbsp;
<a href="https://www.cnblogs.com/liyongqiang-cc">代码拾光</a>&nbsp;
阅读(<span id="post_view_count">303</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18631327" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18631327);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18631327', targetLink: 'https://www.cnblogs.com/liyongqiang-cc/p/18631327', title: '中间件 vs 过滤器' })">举报</a>
</div>
        