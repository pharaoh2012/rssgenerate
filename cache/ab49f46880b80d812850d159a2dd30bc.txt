
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/xwz1024/p/19010306" title="发布于 2025-07-29 10:22">
    <span role="heading" aria-level="2">Django模型开发：模型字段、元数据与继承全方位讲解</span>
    

</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			    <div id="cnblogs_post_description" style="display: none">
        <img src="https://img2024.cnblogs.com/blog/1565852/202507/1565852-20250729102219984-680396855.png" alt="Django模型开发：模型字段、元数据与继承全方位讲解" class="desc_img">
        本文将全面介绍 Django 模型的关键知识点，包括模型字段类型、映射、常用配置选项以及模型继承等高级特性，帮助开发者快速掌握模型设计与使用技巧。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="一模型字段类型详解">一、模型字段类型详解</h2>
<p>在 Django 开发中，模型（Model）是连接应用程序与数据库的核心桥梁。</p>
<h3 id="django-与-mysql-字段类型映射">Django 与 MySQL 字段类型映射</h3>
<p>Django 模型的每个字段都是特定 Field 类的实例，它决定了数据库存储类型和表单验证规则。</p>
<table>
<thead>
<tr>
<th>Django 字段类型</th>
<th>MySQL 数据类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>CharField</code></td>
<td><code>VARCHAR</code></td>
<td>字符串类型，需指定 max_length</td>
</tr>
<tr>
<td><code>TextField</code></td>
<td><code>TEXT</code></td>
<td>长文本类型</td>
</tr>
<tr>
<td><code>IntegerField</code></td>
<td><code>INT</code></td>
<td>整数类型</td>
</tr>
<tr>
<td><code>BigIntegerField</code></td>
<td><code>BIGINT</code></td>
<td>长整数类型</td>
</tr>
<tr>
<td><code>BooleanField</code></td>
<td><code>TINYINT(1)</code></td>
<td>布尔类型（0=False，1=True）</td>
</tr>
<tr>
<td><code>DateTimeField</code></td>
<td><code>DATETIME</code></td>
<td>日期时间类型</td>
</tr>
<tr>
<td><code>SmallIntegerField</code></td>
<td><code>SMALLINT</code></td>
<td>小整数类型</td>
</tr>
</tbody>
</table>
<h3 id="整数类型深度对比">整数类型深度对比</h3>
<p><code>TINYINT</code>和<code>SMALLINT</code>是两种常用的整数类型，选择合适的类型能优化存储效率</p>
<table>
<thead>
<tr>
<th>维度</th>
<th>TINYINT</th>
<th>SMALLINT</th>
</tr>
</thead>
<tbody>
<tr>
<td>存储空间</td>
<td>1 字节（8 位）</td>
<td>2 字节（16 位）</td>
</tr>
<tr>
<td>有符号范围</td>
<td>-128 到 127</td>
<td>-32768 到 32767</td>
</tr>
<tr>
<td>无符号范围</td>
<td>0 到 255</td>
<td>0 到 65535</td>
</tr>
<tr>
<td>适用场景</td>
<td>布尔值、状态标记、年龄、枚举值等小范围数值</td>
<td>用户积分、订单数量等中等范围数值</td>
</tr>
<tr>
<td>示例</td>
<td>年龄（0-120）、月份（1-12）、星期（1-7）</td>
<td>用户积分（0-5000）、订单数量（0-30000）</td>
</tr>
</tbody>
</table>
<h2 id="二常用字段选项">二、常用字段选项</h2>
<p>字段选项用于配置字段的行为特性，以下是开发中最常用的选项</p>
<h3 id="null-与-blank-的区别">null 与 blank 的区别</h3>
<pre><code class="language-python"># null影响数据库存储，blank影响表单验证
field1 = models.CharField(max_length=100, null=True)  # 数据库可存NULL
field2 = models.CharField(max_length=100, blank=True)  # 表单可提交空值
field3 = models.CharField(max_length=100, null=True, blank=True)  # 两者皆可
</code></pre>
<ul>
<li><code>null=True</code>：允许数据库存储 NULL 值（默认 False）</li>
<li><code>blank=True</code>：允许表单提交空值（默认 False）</li>
<li>注意：前端提交<code>""</code>空字符串时，若<code>blank=False</code>会触发验证错误</li>
</ul>
<h3 id="注释与帮助文本">注释与帮助文本</h3>
<pre><code class="language-python">class Book(models.Model):
    title = models.CharField(
        max_length=100,
        help_text='Enter the book title',  # 表单帮助文本
        db_comment="图书标题"  # 数据库字段注释（Django4.2+）
    )
    
    class Meta:
        db_table_comment = 'This table stores information about books.'  # 数据库表注释
</code></pre>
<ul>
<li><code>help_text</code>：表单帮助文本</li>
<li><code>db_comment</code>： 数据库字段注释</li>
</ul>
<h3 id="默认值设置">默认值设置</h3>
<pre><code class="language-python"># 固定默认值
count = models.IntegerField(default=0)

# 可调用对象作为默认值
from datetime import date
birth_date = models.DateField(default=date.today)
</code></pre>
<ul>
<li><code>default</code> ： 该字段的默认值</li>
</ul>
<h3 id="日期时间特殊选项">日期时间特殊选项</h3>
<pre><code class="language-python">class BaseModel(models.Model):
    # 首次创建时自动设置当前时间
    created_at = models.DateTimeField(auto_now_add=True)
    # 每次save()时自动更新为当前时间
    updated_at = models.DateTimeField(auto_now=True)
</code></pre>
<p>注意：</p>
<ul>
<li>auto_now在QuerySet.update()时不会自动生效，需手动更新或使用save()</li>
<li>auto_now_add、auto_now 和 default 选项相互排斥，这些选项的任何组合都会导致报错</li>
</ul>
<pre><code class="language-python">class Article(models.Model):
    def save(self, *args, **kwargs):
        if not self.pk:  # 仅在首次创建时设置
            self.created_at = timezone.now()
        self.updated_at = timezone.now()
        super().save(*args, **kwargs)
</code></pre>
<ul>
<li>当需要复杂时间逻辑时，覆盖模型的 save() 方法</li>
</ul>
<h3 id="选项列表choices">选项列表（choices）</h3>
<p>使用<code>choices</code>定义字段的可选值范围</p>
<pre><code class="language-python"># 直接定义选项
class Person(models.Model):
    SHIRT_SIZES = [
        ("S", "Small"),
        ("M", "Medium"),
        ("L", "Large"),
    ]
    shirt_size = models.CharField(max_length=1, choices=SHIRT_SIZES)

# 枚举类定义选项（推荐）
from enum import Enum
class UserTypeEnum(Enum):
    MEMBER = 1  # 会员
    ADMIN = 2   # 管理员

class User(models.Model):
    user_type = models.SmallIntegerField(
        choices=[(item.value, item.name) for item in UserTypeEnum],
        default=UserTypeEnum.MEMBER.value
    )
</code></pre>
<h2 id="三模型元数据与方法">三、模型元数据与方法</h2>
<h3 id="模型-meta-类">模型 Meta 类</h3>
<p>通过内部<code>Meta</code>类定义模型的元数据，即 "非字段信息"</p>
<pre><code class="language-python">class User(models.Model):
    username = models.CharField(max_length=50)
    email = models.EmailField()
    
    class Meta:
        db_table = "system_users"  # 数据库表名
        db_table_comment = "用户信息表"  # 数据库表注释
        ordering = ['-id']  # 默认排序
        verbose_name = "用户"  # 单数显示名
        verbose_name_plural = "用户"  # 复数显示名
</code></pre>
<p><code>managed=False</code>适用于：</p>
<ul>
<li>与遗留数据库集成时</li>
<li>不希望 Django 自动修改表结构的场景</li>
</ul>
<h3 id="模型管理器manager">模型管理器（Manager）</h3>
<p>Manager 是模型与数据库交互的接口，默认名为<code>objects</code>。 模型管理器只能通过模型类来访问，一般用于“表级”操作</p>
<pre><code class="language-python"># 表级操作
all_users = User.objects.all()
active_users = User.objects.filter(is_active=True)
user = User.objects.get(id=1)
</code></pre>
<h3 id="自定义模型方法">自定义模型方法</h3>
<p>模型方法用于实现 "行级" 操作，可自定义业务逻辑</p>
<ul>
<li>重写 save() 方法：例如实现保存前后的处理</li>
<li>重写 delete() 方法：例如实现软删除</li>
<li>其它自定义方法：例如编写原生 SQL 语句</li>
</ul>
<pre><code class="language-python">class Blog(models.Model):
    name = models.CharField(max_length=100)
    tagline = models.TextField()
    
    def save(self, *args, **kwargs):
        # 保存前处理
        self.name = self.name.title()
        super().save(*args, **kwargs)  # 调用父类方法
        # 保存后操作
        self.clear_cache()
    
    def clear_cache(self):
        """自定义缓存清理方法"""
        cache.delete(f"blog_{self.id}")
</code></pre>
<p>注意：重写的模型方法不会在批量操作（例如<code>update()</code>）中调用</p>
<h2 id="四模型继承">四、模型继承</h2>
<h3 id="抽象基类">抽象基类</h3>
<p>将公共字段提取到抽象基类，避免代码重复</p>
<pre><code class="language-python">class CommonInfo(models.Model):
    """抽象基类：包含公共字段"""
    name = models.CharField(max_length=100)
    age = models.PositiveIntegerField()
    created_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        abstract = True  # 标记为抽象类，不生成数据表

# 继承抽象基类
class Student(CommonInfo):
    home_group = models.CharField(max_length=5)
    # 自动拥有name, age, created_at字段

class Teacher(CommonInfo):
    department = models.CharField(max_length=50)
    # 自动拥有name, age, created_at字段
</code></pre>
<h3 id="模型继承实战">模型继承实战</h3>
<p>实战场景：在一个Django+Vue 后台管理系统中，需要维护多个数据表。这些数据表中，一般需要记录创建者、创建时间、更新者和更新时间等信息。可将该部分公共字段提取到抽象基类，避免代码重复。</p>
<p>定义抽象基类<code>BaseModel</code></p>
<pre><code class="language-python">from django.db import models


class BaseModel(models.Model):
    creator = models.CharField(
        max_length=64, blank=True, null=True, default="", db_comment="创建者"
    )
    create_time = models.DateTimeField(auto_now_add=True, db_comment="创建时间")
    updater = models.CharField(
        max_length=64, blank=True, null=True, default="", db_comment="更新者"
    )
    update_time = models.DateTimeField(auto_now=True, db_comment="更新时间")

    class Meta:
        abstract = True
</code></pre>
<p>继承抽象基类：<a href="https://gitee.com/zhulj993/mars-mgn/blob/master/mysite/myapp_system/menu/models.py" target="_blank" rel="noopener nofollow">点击查看完整代码</a></p>
<p><img alt="image-20250729094647649" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1565852/202507/1565852-20250729102150668-2144788609.png" class="lazyload"></p>
<p>实现效果</p>
<p><img alt="image-20250729094846231" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1565852/202507/1565852-20250729102158559-828028075.png" class="lazyload"></p>
<hr>
<p>您正在阅读的是《<strong>Django从入门到实战</strong>》专栏！关注不迷路~</p>

</div>
<div class="clear"></div>

		</div>
		<div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-07-29 10:23">2025-07-29 10:22</span>&nbsp;
<a href="https://www.cnblogs.com/xwz1024">小王子1024</a>&nbsp;
阅读(<span id="post_view_count">112</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19010306);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19010306', targetLink: 'https://www.cnblogs.com/xwz1024/p/19010306', title: 'Django模型开发：模型字段、元数据与继承全方位讲解' })">举报</a>
</div>
	