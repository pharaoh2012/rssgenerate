
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/dayue-bc/p/18962591" title="发布于 2025-07-02 23:54">
    <span role="heading" aria-level="2">HTTP 协议深入理解</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        在 Web 服务与 API 设计中，HTTP 协议是客户端与服务器通信的基石。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<blockquote>
<p>在 Web 服务与 API 设计中，<strong>HTTP 协议</strong>是客户端与服务器通信的基石。本文从协议演进、核心机制、缓存策略、安全特性及面试高频问题五个维度，系统解析 HTTP 的底层原理与工程实践。</p>
</blockquote>
<h2 id="一http-协议演进与版本差异">一、HTTP 协议演进与版本差异</h2>
<h3 id="11-版本特性对比">1.1 版本特性对比</h3>
<table>
<thead>
<tr>
<th>版本</th>
<th>发布年份</th>
<th>核心改进</th>
<th>局限性</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>HTTP1.0</strong></td>
<td>1996</td>
<td>基础请求 - 响应模型，支持 GETPOSTHEAD 方法</td>
<td>无持久连接，每次请求需建立 TCP 连接</td>
</tr>
<tr>
<td><strong>HTTP1.1</strong></td>
<td>1999</td>
<td>持久连接（Connection: keep-alive）、管线化（Pipelining）、分块传输（Chunked Encoding）</td>
<td>队头阻塞（Head-of-Line Blocking）</td>
</tr>
<tr>
<td><strong>HTTP2.0</strong></td>
<td>2015</td>
<td>二进制帧、多路复用（Multiplexing）、服务器推送（Server Push）、头部压缩（HPACK）</td>
<td>仍依赖 TCP，存在队头阻塞隐患</td>
</tr>
<tr>
<td><strong>HTTP3.0</strong></td>
<td>2022</td>
<td>基于 QUIC 协议（UDP）、无队头阻塞、连接迁移（Connection Migration）</td>
<td>生态支持不完善，部分中间件兼容性差</td>
</tr>
</tbody>
</table>
<h3 id="12-关键演进节点解析">1.2 关键演进节点解析</h3>
<h4 id="1-持久连接http11">1. 持久连接（HTTP1.1）</h4>
<ul>
<li><strong>机制</strong>：通过<code>Connection: keep-alive</code>复用 TCP 连接，默认保持 300 秒（可通过<code>Keep-Alive: timeout=60</code>调整）。</li>
<li><strong>性能提升</strong>：减少 TCP 握手（3 次握手）和慢启动开销，页面加载速度提升 40%+。</li>
</ul>
<h4 id="2-多路复用http20">2. 多路复用（HTTP2.0）</h4>
<p><img alt="" loading="lazy" data-src="https://mmbiz.qpic.cn/mmbiz_png/hlIMsuItLicbLHs2c7ysK7gz2uhLvcTfPLzNDichicibdZYGyqDMc2wmtfsaawCkiaG9ibic1PMFt78v9iaddpRkvibxGEQ/640?wx_fmt=png&amp;from=appmsg" class="lazyload"></p>
<ul>
<li><strong>核心优势</strong>：多个请求  响应通过二进制帧并行传输，避免 HTTP1.1 的管线化队头阻塞。</li>
</ul>
<h4 id="3-quic-协议http30">3. QUIC 协议（HTTP3.0）</h4>
<ul>
<li><strong>基于 UDP</strong>：减少 TCP 三次握手耗时，支持 0-RTT 连接建立（首次连接 1-RTT，后续 0-RTT）。</li>
<li><strong>连接迁移</strong>：通过连接 ID 标识会话，解决 TCP 因 IP  端口变化导致的连接中断问题（如手机切换 Wi-Fi）。</li>
</ul>
<h2 id="二http-核心机制方法状态码与头字段">二、HTTP 核心机制：方法、状态码与头字段</h2>
<h3 id="21-方法语义与应用场景">2.1 方法语义与应用场景</h3>
<table>
<thead>
<tr>
<th>方法</th>
<th>安全（无状态修改）</th>
<th>幂等（多次调用结果一致）</th>
<th>核心应用场景</th>
</tr>
</thead>
<tbody>
<tr>
<td>GET</td>
<td>是</td>
<td>是</td>
<td>资源查询（如<code>GET users</code>）</td>
</tr>
<tr>
<td>HEAD</td>
<td>是</td>
<td>是</td>
<td>仅获取响应头（如检查资源是否存在）</td>
</tr>
<tr>
<td>POST</td>
<td>否</td>
<td>否</td>
<td>资源创建（如<code>POST orders</code>）</td>
</tr>
<tr>
<td>PUT</td>
<td>否</td>
<td>是</td>
<td>全量更新（如<code>PUT users1</code>）</td>
</tr>
<tr>
<td>PATCH</td>
<td>否</td>
<td>是</td>
<td>部分更新（如<code>PATCH users1</code>）</td>
</tr>
<tr>
<td>DELETE</td>
<td>否</td>
<td>是</td>
<td>资源删除（如<code>DELETE users1</code>）</td>
</tr>
<tr>
<td>OPTIONS</td>
<td>是</td>
<td>是</td>
<td>跨域预检（CORS）、获取支持的方法</td>
</tr>
</tbody>
</table>
<h4 id="关键区别get-与-post">关键区别：GET 与 POST</h4>
<table>
<thead>
<tr>
<th>维度</th>
<th>GET</th>
<th>POST</th>
</tr>
</thead>
<tbody>
<tr>
<td>数据位置</td>
<td>URL 查询参数（可见，有长度限制）</td>
<td>请求体（不可见，无长度限制）</td>
</tr>
<tr>
<td>缓存</td>
<td>可被缓存（如浏览器缓存）</td>
<td>默认不缓存</td>
</tr>
<tr>
<td>安全性</td>
<td>低（参数暴露）</td>
<td>高（数据在请求体）</td>
</tr>
<tr>
<td>幂等性</td>
<td>是</td>
<td>否</td>
</tr>
</tbody>
</table>
<h3 id="22-状态码分层与核心含义">2.2 状态码分层与核心含义</h3>
<h4 id="1-分类逻辑">1. 分类逻辑</h4>
<table>
<thead>
<tr>
<th>类别</th>
<th>范围</th>
<th>核心含义</th>
<th>典型场景</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>1xx</strong></td>
<td>100-199</td>
<td>信息性响应（临时状态）</td>
<td>100 Continue（客户端可继续发送请求）</td>
</tr>
<tr>
<td><strong>2xx</strong></td>
<td>200-299</td>
<td>成功响应</td>
<td>200 OK、201 Created</td>
</tr>
<tr>
<td><strong>3xx</strong></td>
<td>300-399</td>
<td>重定向（资源位置变更）</td>
<td>301 Moved Permanently、304 Not Modified</td>
</tr>
<tr>
<td><strong>4xx</strong></td>
<td>400-499</td>
<td>客户端错误（请求无效）</td>
<td>400 Bad Request、401 Unauthorized</td>
</tr>
<tr>
<td><strong>5xx</strong></td>
<td>500-599</td>
<td>服务器错误（处理失败）</td>
<td>500 Internal Server Error、503 Service Unavailable</td>
</tr>
</tbody>
</table>
<h4 id="2-易混淆状态码对比">2. 易混淆状态码对比</h4>
<table>
<thead>
<tr>
<th>状态码</th>
<th>含义</th>
<th>区别点</th>
</tr>
</thead>
<tbody>
<tr>
<td>301</td>
<td>永久重定向</td>
<td>搜索引擎会更新链接，缓存重定向关系</td>
</tr>
<tr>
<td>302</td>
<td>临时重定向（HTTP1.0）</td>
<td>搜索引擎不更新链接，禁止 POST→GET 转换</td>
</tr>
<tr>
<td>307</td>
<td>临时重定向（HTTP1.1）</td>
<td>严格遵循原方法（POST 保持 POST）</td>
</tr>
<tr>
<td>308</td>
<td>永久重定向（HTTP1.1）</td>
<td>严格遵循原方法（POST 保持 POST）</td>
</tr>
</tbody>
</table>
<h3 id="23-核心头字段解析">2.3 核心头字段解析</h3>
<h4 id="1-通用头请求--响应均可用">1. 通用头（请求  响应均可用）</h4>
<table>
<thead>
<tr>
<th>头字段</th>
<th>作用</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>Cache-Control</td>
<td>缓存控制（如<code>max-age=3600</code>、<code>no-cache</code>）</td>
<td><code>Cache-Control: public, max-age=86400</code></td>
</tr>
<tr>
<td>Connection</td>
<td>连接管理（如<code>keep-alive</code>、<code>close</code>）</td>
<td><code>Connection: keep-alive</code></td>
</tr>
<tr>
<td>Date</td>
<td>消息发送时间（GMT 格式）</td>
<td><code>Date: Tue, 15 Nov 2022 08:12:31 GMT</code></td>
</tr>
</tbody>
</table>
<h4 id="2-请求头">2. 请求头</h4>
<table>
<thead>
<tr>
<th>头字段</th>
<th>作用</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>Host</td>
<td>服务器域名（HTTP1.1 必需字段）</td>
<td><code>Host: api.example.com</code></td>
</tr>
<tr>
<td>User-Agent</td>
<td>客户端标识（浏览器  爬虫信息）</td>
<td><code>User-Agent: Mozilla5.0 (Windows NT 10.0; ...)</code></td>
</tr>
<tr>
<td>Accept</td>
<td>客户端可接受的媒体类型</td>
<td><code>Accept: applicationjson, textplain</code></td>
</tr>
<tr>
<td>Authorization</td>
<td>认证信息（如 Basic、Bearer Token）</td>
<td><code>Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...</code></td>
</tr>
</tbody>
</table>
<h4 id="3-响应头">3. 响应头</h4>
<table>
<thead>
<tr>
<th>头字段</th>
<th>作用</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>Content-Type</td>
<td>响应体媒体类型（MIME 类型）</td>
<td><code>Content-Type: applicationjson; charset=utf-8</code></td>
</tr>
<tr>
<td>ETag</td>
<td>资源唯一标识（协商缓存用）</td>
<td><code>ETag: "a1b2c3d4"</code></td>
</tr>
<tr>
<td>Location</td>
<td>重定向目标 URL（配合 3xx 状态码）</td>
<td><code>Location: https:example.comnew-path</code></td>
</tr>
<tr>
<td>Set-Cookie</td>
<td>服务器向客户端设置 Cookie</td>
<td><code>Set-Cookie: sessionId=abc123; HttpOnly; Secure</code></td>
</tr>
</tbody>
</table>
<h2 id="三http-缓存机制原理与实战">三、HTTP 缓存机制：原理与实战</h2>
<h3 id="31-缓存层级与流程">3.1 缓存层级与流程</h3>
<p><img alt="" loading="lazy" data-src="https://mmbiz.qpic.cn/mmbiz_png/hlIMsuItLicbLHs2c7ysK7gz2uhLvcTfPGnnjxxswpGdmXLImYuu4eWj6uHokvw5NnvefnUrEKuPatAcnibMlajg/640?wx_fmt=png&amp;from=appmsg" class="lazyload"></p>
<h3 id="32-强缓存客户端自主判断">3.2 强缓存（客户端自主判断）</h3>
<h4 id="1-核心字段">1. 核心字段</h4>
<ul>
<li><strong>Expires</strong>（HTTP1.0）：<br>
绝对时间（如<code>Expires: Wed, 21 Oct 2024 07:28:00 GMT</code>），受客户端时间影响。</li>
<li><strong>Cache-Control</strong>（HTTP1.1，优先级更高）：</li>
</ul>
<table>
<thead>
<tr>
<th>指令</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>max-age=3600</code></td>
<td>资源有效期为 3600 秒（相对时间）</td>
</tr>
<tr>
<td><code>public</code></td>
<td>允许任何缓存（如 CDN、代理服务器）存储</td>
</tr>
<tr>
<td><code>private</code></td>
<td>仅客户端可缓存（如用户个人数据）</td>
</tr>
<tr>
<td><code>no-cache</code></td>
<td>不使用强缓存，需协商缓存</td>
</tr>
<tr>
<td><code>no-store</code></td>
<td>禁止任何缓存（如敏感数据）</td>
</tr>
</tbody>
</table>
<h3 id="33-协商缓存服务器判断">3.3 协商缓存（服务器判断）</h3>
<h4 id="1-核心字段-1">1. 核心字段</h4>
<ul>
<li><strong>Last-Modified + If-Modified-Since</strong>：
<ul>
<li>服务器响应<code>Last-Modified: Tue, 15 Nov 2022 12:00:00 GMT</code>。</li>
<li>客户端下次请求携带<code>If-Modified-Since: 同上时间</code>，服务器对比资源修改时间。</li>
</ul>
</li>
<li><strong>ETag + If-None-Match</strong>（优先级更高）：
<ul>
<li>服务器响应<code>ETag: "v1.0"</code>（资源哈希或版本号）。</li>
<li>客户端下次请求携带<code>If-None-Match: "v1.0"</code>，服务器对比 ETag 是否匹配。</li>
</ul>
</li>
</ul>
<h4 id="2-适用场景">2. 适用场景</h4>
<ul>
<li><strong>Last-Modified</strong>：适合静态资源（如图片、CSS），精度到秒级。</li>
<li><strong>ETag</strong>：适合动态资源（如 API 响应），支持毫秒级精度和内容哈希比对。</li>
</ul>
<h3 id="34-缓存失效策略">3.4 缓存失效策略</h3>
<ol>
<li><strong>主动失效</strong>：</li>
</ol>
<ul>
<li>URL 加版本号（如<code>style.v2.css</code>），强制客户端请求新资源。</li>
<li>服务器设置<code>Cache-Control: no-cache</code>，跳过强缓存直接协商。</li>
</ul>
<ol>
<li><strong>被动失效</strong>：</li>
</ol>
<ul>
<li>强缓存过期（<code>max-age</code>超时）。</li>
<li>协商缓存未命中（资源修改，ETagLast-Modified 变更）。</li>
</ul>
<h2 id="四http-安全机制与-https">四、HTTP 安全机制与 HTTPS</h2>
<h3 id="41-https-加密原理tlsssl">4.1 HTTPS 加密原理（TLSSSL）</h3>
<h4 id="1-握手过程tls-13">1. 握手过程（TLS 1.3）</h4>
<p><img alt="" loading="lazy" data-src="https://mmbiz.qpic.cn/mmbiz_png/hlIMsuItLicbLHs2c7ysK7gz2uhLvcTfPVHYleCOjD8s5paF75xCpW8Wm8gxibkuco6NDDzNQorm38Y5icV9xHrTg/640?wx_fmt=png&amp;from=appmsg" class="lazyload"></p>
<h4 id="2-核心优势">2. 核心优势</h4>
<ul>
<li><strong>机密性</strong>：对称加密（AES）保护数据传输，防止窃听。</li>
<li><strong>完整性</strong>：哈希算法（SHA-256）校验数据，防止篡改。</li>
<li><strong>身份认证</strong>：数字证书（CA 签发）验证服务器身份，防止中间人攻击。</li>
</ul>
<h3 id="42-http-安全头配置">4.2 HTTP 安全头配置</h3>
<table>
<thead>
<tr>
<th>头字段</th>
<th>作用</th>
<th>示例配置</th>
</tr>
</thead>
<tbody>
<tr>
<td>Content-Security-Policy</td>
<td>限制资源加载源，防御 XSS</td>
<td><code>default-src 'self'; script-src 'trusted-cdn.com'</code></td>
</tr>
<tr>
<td>X-XSS-Protection</td>
<td>启用浏览器 XSS 过滤</td>
<td><code>X-XSS-Protection: 1; mode=block</code></td>
</tr>
<tr>
<td>X-Content-Type-Options</td>
<td>禁止 MIME 类型嗅探，防御恶意文件上传</td>
<td><code>X-Content-Type-Options: nosniff</code></td>
</tr>
<tr>
<td>Strict-Transport-Security</td>
<td>强制使用 HTTPS，防止降级攻击</td>
<td><code>Strict-Transport-Security: max-age=31536000; includeSubDomains</code></td>
</tr>
</tbody>
</table>
<h3 id="43-常见攻击与防御">4.3 常见攻击与防御</h3>
<table>
<thead>
<tr>
<th>攻击类型</th>
<th>原理</th>
<th>防御措施</th>
</tr>
</thead>
<tbody>
<tr>
<td>CSRF</td>
<td>伪造用户请求（利用 Cookie 自动携带）</td>
<td>验证码、CSRF Token、SameSite Cookie</td>
</tr>
<tr>
<td>XSS</td>
<td>注入恶意脚本（窃取 Cookie、篡改页面）</td>
<td>输入过滤、输出编码、CSP 头</td>
</tr>
<tr>
<td>中间人攻击</td>
<td>拦截并篡改通信数据</td>
<td>HTTPS、证书验证</td>
</tr>
<tr>
<td>重放攻击</td>
<td>重复发送有效请求（如重复支付）</td>
<td>时间戳 + Nonce、请求签名</td>
</tr>
</tbody>
</table>
<h2 id="五面试高频问题深度解析">五、面试高频问题深度解析</h2>
<h3 id="51-协议原理类问题">5.1 协议原理类问题</h3>
<p><strong>Q：HTTP1.1 的队头阻塞如何解决？HTTP2.0 和 3.0 分别做了哪些优化？</strong></p>
<p>A：</p>
<ul>
<li><strong>HTTP1.1 问题</strong>：管线化（Pipelining）允许并行发送请求，但需按顺序响应，前一个请求阻塞后续请求。</li>
<li><strong>HTTP2.0 优化</strong>：</li>
</ul>
<ol>
<li>二进制帧多路复用，多个请求  响应通过单一 TCP 连接并行传输。</li>
<li>服务器推送（Server Push），提前发送关联资源（如 HTML+CSS）。</li>
</ol>
<ul>
<li><strong>HTTP3.0 优化</strong>：</li>
</ul>
<ol>
<li>基于 QUIC（UDP），每个请求独立传输，彻底解决 TCP 队头阻塞。</li>
<li>0-RTT 连接建立，减少握手耗时。</li>
</ol>
<p><strong>Q：GET 和 POST 的本质区别是什么？为什么 POST 不能被缓存？</strong><br>
A：</p>
<ul>
<li><strong>本质区别</strong>：</li>
</ul>
<ol>
<li>语义：GET 用于查询（安全、幂等），POST 用于创建（非安全、非幂等）。</li>
<li>传输：GET 数据在 URL，POST 在请求体；GET 有长度限制，POST 无。</li>
</ol>
<ul>
<li>
<p><strong>POST 不可缓存原因</strong>：</p>
<p>POST 是非幂等的，重复请求可能产生不同结果（如重复下单），缓存会导致数据不一致，因此默认不缓存（需显式配置<code>Cache-Control</code>才缓存）。</p>
</li>
</ul>
<h3 id="52-缓存机制类问题">5.2 缓存机制类问题</h3>
<p><strong>Q：强缓存和协商缓存的区别？如何设计一个高效的缓存策略？</strong></p>
<p>A：</p>
<table>
<thead>
<tr>
<th>维度</th>
<th>强缓存</th>
<th>协商缓存</th>
</tr>
</thead>
<tbody>
<tr>
<td>判断主体</td>
<td>客户端（无需请求服务器）</td>
<td>服务器（需请求服务器）</td>
</tr>
<tr>
<td>字段</td>
<td>Expires、Cache-Control</td>
<td>Last-ModifiedIf-Modified-Since、ETagIf-None-Match</td>
</tr>
<tr>
<td>状态码</td>
<td>200 OK（from cache）</td>
<td>304 Not Modified</td>
</tr>
<tr>
<td><strong>高效策略</strong>：</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<ol>
<li>静态资源（图片、JSCSS）：</li>
</ol>
<ul>
<li>强缓存（<code>Cache-Control: public, max-age=31536000</code>）+ 版本号（<code>v1.0</code>）。</li>
</ul>
<ol>
<li>动态资源（API 响应）：</li>
</ol>
<ul>
<li>协商缓存（<code>ETag + Cache-Control: no-cache</code>），减少数据传输。<br>
<strong>Q：为什么 ETag 比 Last-Modified 更可靠？</strong></li>
</ul>
<p>A：</p>
<ol>
<li><strong>精度更高</strong>：ETag 基于内容哈希（如 MD5），支持毫秒级变更检测；Last-Modified 仅到秒级。</li>
<li><strong>覆盖场景更广</strong>：资源内容修改后恢复原状（如文件编辑后撤销），ETag 不变（命中缓存），Last-Modified 变更（误判为修改）。</li>
</ol>
<h3 id="53-安全类问题">5.3 安全类问题</h3>
<p><strong>Q：HTTPS 如何防止中间人攻击？TLS 握手的关键步骤是什么？</strong></p>
<p>A：</p>
<ul>
<li>
<p><strong>防中间人攻击</strong>：<br>
服务器证书由 CA 签发，客户端验证证书链有效性（确保证书未被篡改），中间人无法伪造有效证书。</p>
</li>
<li>
<p><strong>关键步骤</strong>：</p>
</li>
</ul>
<ol>
<li>客户端验证服务器证书（检查签名、有效期、域名匹配）。</li>
<li>客户端生成预主密钥，用服务器公钥加密传输（仅服务器私钥可解密）。</li>
<li>双方基于预主密钥生成会话密钥，后续通信用对称加密。</li>
</ol>
<p><strong>Q：如何防御 CSRF 攻击？SameSite Cookie 的作用是什么？</strong></p>
<p>A：</p>
<ul>
<li><strong>防御措施</strong>：</li>
</ul>
<ol>
<li>验证 RefererOrigin 头（检查请求来源）。</li>
<li>使用 CSRF Token（请求携带随机令牌，服务器验证）。</li>
<li>设置<code>SameSite=Strict</code>或<code>Lax</code>（限制跨站 Cookie 发送）。</li>
</ol>
<ul>
<li><strong>SameSite 作用</strong>：
<ul>
<li><code>Strict</code>：完全禁止跨站 Cookie（如 A 站请求 B 站，不携带 B 站 Cookie）。</li>
<li><code>Lax</code>：仅允许 GET 等安全方法跨站携带 Cookie，防御大部分 CSRF。</li>
</ul>
</li>
</ul>
<h2 id="总结http-协议的核心价值与面试应答策略">总结：HTTP 协议的核心价值与面试应答策略</h2>
<h3 id="61-核心价值">6.1 核心价值</h3>
<ul>
<li><strong>简单可扩展</strong>：文本协议易于调试，头字段支持灵活扩展（如自定义<code>X-</code>头）。</li>
<li><strong>无状态与缓存</strong>：无状态支持水平扩展，缓存机制大幅降低服务器负载。</li>
<li><strong>安全演进</strong>：从 HTTP 到 HTTPS，再到 HTTP3.0，持续优化性能与安全性。</li>
</ul>
<h3 id="面试应答策略">面试应答策略</h3>
<ul>
<li><strong>分层解析</strong>：回答协议问题时，按 “版本演进→核心机制→实战优化” 分层阐述（如 HTTP2.0 的多路复用需结合二进制帧和 TCP 队头阻塞问题）。</li>
<li><strong>场景结合</strong>：解释缓存机制时，结合具体业务（如静态资源用强缓存，API 用协商缓存）。</li>
<li><strong>对比记忆</strong>：通过表格对比易混淆概念（如 301302307，GETPOST，强缓存  协商缓存）。</li>
</ul>
<p>通过系统化掌握 HTTP 协议的底层原理与实战细节，既能应对 “HTTP3.0 的改进” 等深度问题，也能解决 “如何设计 API 缓存策略” 等工程问题，展现高级程序员对 Web 服务基础协议的全面理解。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.001388888888888889" data-date-updated="2025-07-02 23:56">2025-07-02 23:54</span>&nbsp;
<a href="https://www.cnblogs.com/dayue-bc">晴空月明</a>&nbsp;
阅读(<span id="post_view_count">10</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18962591);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18962591', targetLink: 'https://www.cnblogs.com/dayue-bc/p/18962591', title: 'HTTP 协议深入理解' })">举报</a>
</div>
        