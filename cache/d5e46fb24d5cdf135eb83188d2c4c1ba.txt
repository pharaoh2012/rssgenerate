
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/wang_yb/p/18808687" title="发布于 2025-04-04 09:45">
    <span role="heading" aria-level="2">不平衡样本数据的救星：数据再分配策略</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>在机器学习领域，数据是模型训练的基础，而数据的分布情况往往会对模型的性能产生重要影响。</p>
<p><strong>不平衡样本数据</strong>是我们在实际项目中经常会遇到的问题，它可能导致模型对多数类过度拟合，而对少数类的预测能力不足。</p>
<p>本文将详细介绍<strong>不平衡样本数据</strong>的常见场景、处理方法以及在实践中需要注意的问题，帮助你在模型训练前有效地进行数据再分配。</p>
<h1 id="1-常见场景">1. 常见场景</h1>
<p>不平衡样本数据是指在分类问题中，不同类别的样本数量存在显著差异的情况。</p>
<p>以下是一些常见的不平衡样本数据场景：</p>
<ol>
<li><strong>金融领域</strong>：在信用卡欺诈检测中，正常交易的数量远远超过欺诈交易的数量。正常交易可能占总交易的99%以上，而欺诈交易仅占1%左右。这种不平衡的数据分布使得模型容易偏向于预测正常交易，而忽略欺诈交易。</li>
<li><strong>医疗领域</strong>：在疾病诊断中，某些罕见疾病的患者数量远少于常见疾病的患者数量。例如，在癌症筛查中，正常人群的数量可能比癌症患者多几十倍甚至上百倍。如果直接使用不平衡的数据训练模型，可能导致模型对罕见疾病的诊断能力不足。</li>
<li><strong>网络安全领域</strong>：在入侵检测系统中，正常网络访问的流量通常远大于异常流量。正常流量可能占总流量的99%以上，而异常流量仅占1%左右。这种不平衡的数据分布使得模型容易偏向于预测正常流量，而忽略异常流量。</li>
<li><strong>电商领域</strong>：在客户流失预测中，大多数客户是活跃的，而流失的客户数量相对较少。如果直接使用不平衡的数据训练模型，可能导致模型对流失客户的预测能力不足。</li>
</ol>
<h1 id="2-应对策略">2. 应对策略</h1>
<p>在模型训练前，面对<strong>不平衡的样本数据</strong>，我们通常使用以下几种方法进行处理。</p>
<h2 id="21-欠采样undersampling">2.1. 欠采样（Undersampling）</h2>
<p><strong>欠采样</strong>是指从多数类中随机抽取部分样本，使得多数类和少数类的样本数量达到平衡。</p>
<p>这种方法的<strong>优点</strong>是简单易实现，<strong>缺点</strong>是可能会丢失一些重要的信息，尤其是当多数类的样本数量较多时。</p>
<p>当数据集较大且多数类的样本数量远多于少数类时，可以使用<strong>欠采样</strong>方法。</p>
<p>例如，在信用卡欺诈检测中，正常交易的数量远远超过欺诈交易的数量，可以通过欠采样减少正常交易的样本数量，使数据集达到平衡。</p>
<p>比如，下面的代码生成了一个数据集，其中包含了不平衡的两类数据：</p>
<pre><code class="language-python">from sklearn.datasets import make_classification
from imblearn.under_sampling import RandomUnderSampler

# 生成不平衡数据
X, y = make_classification(
    n_classes=2,
    class_sep=2,
    weights=[0.99, 0.01],
    n_informative=3,
    n_redundant=1,
    flip_y=0,
    n_features=20,
    n_clusters_per_class=1,
    n_samples=1000,
    random_state=10,
)

# 欠采样
rus = RandomUnderSampler(random_state=42)
X_resampled, y_resampled = rus.fit_resample(X, y)

print("原始数据中各类样本数量：", sum(y == 0), sum(y == 1))
print("欠采样后各类样本数量：", sum(y_resampled == 0), sum(y_resampled == 1))
</code></pre>
<p>欠采样之后，两类数据的数量都是<code>10</code>：</p>
<pre><code class="language-plain">原始数据中各类样本数量： 990 10
欠采样后各类样本数量： 10 10
</code></pre>
<h2 id="22-过采样oversampling">2.2. 过采样（Oversampling）</h2>
<p><strong>过采样</strong>是指通过复制少数类样本或生成新的少数类样本来增加少数类的样本数量，使多数类和少数类的样本数量达到平衡。</p>
<p>常见的过采样方法有<strong>随机过采样</strong>和<code>SMOTE</code>（合成少数类过采样技术）。</p>
<p>少数类样本数量较少且数据集较小或中等大小时，可以使用<strong>过采样</strong>方法。</p>
<p>例如，在医疗领域，某些罕见疾病的患者数量较少，可以通过过采样增加少数类样本数量，使数据集达到平衡。</p>
<p>下面的示例中，数据集仍然使用上一节中生成的测试数据，只是将采样方式做一个修改：</p>
<pre><code class="language-python">from imblearn.over_sampling import SMOTE

# 过采样
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

print("原始数据中各类样本数量：", sum(y == 0), sum(y == 1))
print("过采样后各类样本数量：", sum(y_resampled == 0), sum(y_resampled == 1))
</code></pre>
<p>运行之后，两类数据的数量都变成了<code>990</code>：</p>
<pre><code class="language-plain">原始数据中各类样本数量： 990 10
过采样后各类样本数量： 990 990
</code></pre>
<h2 id="23-混合采样hybrid-sampling">2.3. 混合采样（Hybrid Sampling）</h2>
<p><strong>混合采样</strong>是指同时使用欠采样和过采样方法来处理不平衡样本数据。</p>
<p>通常先对多数类进行欠采样，再对少数类进行过采样，以达到更好的平衡效果。</p>
<p>当数据集较大且多数类和少数类的样本数量差异较大时，可以使用<strong>混合采样</strong>方法。</p>
<p>例如，在网络安全领域，正常网络访问的流量远大于异常流量，可以通过混合采样方法使数据集达到平衡。</p>
<p>下面的示例结合了<strong>过采样</strong>与<strong>欠采样</strong>（<code>SMOTE+ENN</code>）</p>
<pre><code class="language-python">from imblearn.combine import SMOTEENN

# 混合采样
smoteen = SMOTEENN(random_state=42)
X_resampled, y_resampled = smoteen.fit_resample(X, y)

print("原始数据中各类样本数量：", sum(y == 0), sum(y == 1))
print("混合采样后各类样本数量：", sum(y_resampled == 0), sum(y_resampled == 1))
</code></pre>
<p>运行结果：</p>
<pre><code class="language-plain">原始数据中各类样本数量： 990 10
混合采样后各类样本数量： 878 990
</code></pre>
<h2 id="24-类别权重调整class-weight-adjustment">2.4. 类别权重调整（Class Weight Adjustment）</h2>
<p><strong>类别权重调整</strong>是指在模型训练过程中，为不同类别的样本分配不同的权重，使得模型在训练时更加关注少数类样本。</p>
<p>这种方法不需要对数据进行采样，而是通过调整权重来平衡类别之间的差异。</p>
<p>当数据集较大且不希望对数据进行采样时，可以使用<strong>类别权重调整</strong>方法。</p>
<p>例如，在电商领域，客户流失预测中，大多数客户是活跃的，而流失的客户数量较少，可以通过类别权重调整方法使模型更加关注流失客户。</p>
<p>代码示例：</p>
<pre><code class="language-python">from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from sklearn.datasets import make_classification

# 生成不平衡数据
X, y = make_classification(
    n_samples=1000,
    n_features=20,
    n_classes=2,
    weights=[0.9, 0.1],
    n_informative=3,
    n_redundant=1,
    flip_y=0,
    random_state=42,
)

# 划分训练集和测试集
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# 类别权重调整
weights = {0: 1, 1: 100}  # 为少数类分配更高的权重
clf = RandomForestClassifier(class_weight=weights, random_state=42)
clf.fit(X_train, y_train)

# 评估模型
y_pred = clf.predict(X_test)
print(classification_report(y_test, y_pred))
</code></pre>
<p>运行结果如下：</p>
<p><img src="https://img2024.cnblogs.com/blog/83005/202504/83005-20250404094521844-807076514.png" alt="" loading="lazy"></p>
<p><strong>类别权重调整</strong>方法可以不采样，直接训练，但是要给少数数据赋予更高的权重：<code>weights = {0: 1, 1: 100}</code>。</p>
<h2 id="25-其他方法">2.5. 其他方法</h2>
<p>除了上述方法外，还有一些其他方法可以处理<strong>不平衡样本数据</strong>，例如：</p>
<ul>
<li><strong>集成学习方法</strong>：如 <code>EasyEnsemble</code> 和 <code>BalanceCascade</code>，通过构建多个子数据集并训练多个模型来提高少数类的预测能力。</li>
<li><strong>异常检测方法</strong>：将少数类视为异常样本，使用异常检测算法进行建模。</li>
<li><strong>数据增强方法</strong>：通过对少数类样本进行数据增强（如图像旋转、缩放等）来增加少数类样本的数量。</li>
</ul>
<h1 id="3-注意事项">3. 注意事项</h1>
<p>在处理不平衡样本数据时，需要重点注意再分配数据时可能带来的问题。</p>
<p>使用<strong>欠采样方法</strong>时，可能会丢失一些重要的信息，尤其是当多数类的样本数量较多时。</p>
<p>因此，在使用欠采样方法时，需要谨慎选择采样比例，尽量保留重要的信息。</p>
<p>使用<strong>过采样方法</strong>可能会导致模型对少数类样本过拟合，尤其是在少数类样本数量较少时。</p>
<p>为了避免过拟合，可以结合交叉验证等方法对模型进行评估和调整。</p>
<p>此外，不同的模型对不平衡样本数据的敏感度不同。</p>
<p>例如，决策树模型对不平衡样本数据的敏感度较低，而逻辑回归模型对不平衡样本数据的敏感度较高。</p>
<p>在选择模型时，需要根据数据的特点和问题的需求进行选择。</p>
<p>最后，在评估模型性能时，不能仅仅使用准确率作为评估指标，因为准确率可能会受到不平衡样本数据的影响。</p>
<p>可以使用召回率、F1分数、ROC曲线下面积等指标来评估模型的性能。</p>
<h1 id="4-总结">4. 总结</h1>
<p>本文介绍了<strong>欠采样</strong>、<strong>过采样</strong>、<strong>混合采样</strong>、<strong>类别权重调整</strong>和<strong>其他</strong>几种处理不平衡样本数据的方法，并通过 <code>scikit-learn</code> 示例代码展示了这些方法的实现过程。</p>
<p>在处理<strong>不平衡样本数据</strong>时，还需要注意信息丢失、过拟合、模型选择和评估指标等问题。</p>
<p>希望本文能够帮助大家更好地理解和应用这些方法，提高模型的性能。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="1.0485327301909722" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-04 09:46">2025-04-04 09:45</span>&nbsp;
<a href="https://www.cnblogs.com/wang_yb">wang_yb</a>&nbsp;
阅读(<span id="post_view_count">71</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18808687" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18808687);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18808687', targetLink: 'https://www.cnblogs.com/wang_yb/p/18808687', title: '不平衡样本数据的救星：数据再分配策略' })">举报</a>
</div>
        