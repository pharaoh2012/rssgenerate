
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/lindexi/p/18674065" title="发布于 2025-01-16 07:16">
    <span role="heading" aria-level="2">dotnet C# 在不同的机器 CPU 型号上的基准性能测试</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        本文将记录我在多个不同的机器上，在不同的 CPU 型号上，执行相同的我编写的 dotnet 的 Benchmark 的代码，测试不同的 CPU 型号对 C# 系的优化程度。本文非严谨测试，数值只有相对意义
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>本文将记录我在多个不同的机器上，在不同的 CPU 型号上，执行相同的我编写的 dotnet 的 Benchmark 的代码，测试不同的 CPU 型号对 C# 系的优化程度。本文非严谨测试，数值只有相对意义</p>



<p>以下是我的测试结果，对应的测试代码放在 <a href="https://github.com/lindexi/lindexi_gd/tree/1e20b4c8ef64b17604e1ee92f41f7ac25ad08d26/BulowukaileFeanayjairwo" target="_blank" rel="noopener nofollow">github</a> 上，可以在本文末尾找到下载代码的方法</p>
<p>我十分推荐你自己拉取代码，在你自己的设备上跑一下，测试其性能。且在开始之前，期望你已经掌握了基础的性能测试知识，避免出现诡异的结论</p>
<p>本文的测试将围绕着尽可能多的覆盖基础 CPU 指令以及基础逻辑行为。基础的 CPU 指令的性能测试已经有许多前辈测试过了，我这里重点测试的是各个 C# 系的上层业务行为下，所调用的多个 CPU 指令的最终性能影响。额外的也覆盖 CPU 缓存，逻辑分支命中，方法参数堆栈传递等的性能。本文的测试重点不在于 C# 系的相同功能的多个不同实现之间的性能对比，重点在于相同的代码在不同的 CPU 型号、内存、系统上的性能差异，正如此需求所述，本文非严谨测试，测试结果的数值只有相对意义</p>
<h2 id="数组创建">数组创建</h2>
<h3 id="英特尔-13th-gen-intel-core-i7-13700k">英特尔 13th Gen Intel Core i7-13700K</h3>
<p>以下是在我开发机上跑的，我开了几百个进程，有比较多干扰，但是问题不大，因为 i7-13700K 依然性能遥遥领先。等后续找个空闲的机器，再跑一次比较准确的性能测试</p>
<pre><code>
BenchmarkDotNet v0.13.12, Windows 11 (10.0.22631.3447/23H2/2023Update/SunValley3)
13th Gen Intel Core i7-13700K, 1 CPU, 24 logical and 16 physical cores
.NET SDK 8.0.204
  [Host]     : .NET 8.0.4 (8.0.424.16909), X64 RyuJIT AVX2
  Job-AXOZTJ : .NET 8.0.4 (8.0.424.16909), X64 RyuJIT AVX2

RunStrategy=Throughput  

</code></pre>
<table>
<thead>
<tr>
<th>Method</th>
<th>ArraySize</th>
<th style="text-align: right">Mean</th>
<th style="text-align: right">Error</th>
<th style="text-align: right">StdDev</th>
<th style="text-align: right">Median</th>
<th style="text-align: right">Ratio</th>
<th style="text-align: right">RatioSD</th>
</tr>
</thead>
<tbody>
<tr>
<td>NewArray</td>
<td>10</td>
<td style="text-align: right">3.873 ns</td>
<td style="text-align: right">0.1146 ns</td>
<td style="text-align: right">0.2417 ns</td>
<td style="text-align: right">3.777 ns</td>
<td style="text-align: right">1.00</td>
<td style="text-align: right">0.00</td>
</tr>
<tr>
<td>GCZeroInitialized</td>
<td>10</td>
<td style="text-align: right">12.234 ns</td>
<td style="text-align: right">0.2815 ns</td>
<td style="text-align: right">0.4382 ns</td>
<td style="text-align: right">12.168 ns</td>
<td style="text-align: right">3.15</td>
<td style="text-align: right">0.21</td>
</tr>
<tr>
<td>GCZeroUninitialized</td>
<td>10</td>
<td style="text-align: right">4.470 ns</td>
<td style="text-align: right">0.1491 ns</td>
<td style="text-align: right">0.4056 ns</td>
<td style="text-align: right">4.354 ns</td>
<td style="text-align: right">1.14</td>
<td style="text-align: right">0.13</td>
</tr>
<tr>
<td>NewArrayWithRandomVisit</td>
<td>10</td>
<td style="text-align: right">12.012 ns</td>
<td style="text-align: right">0.2679 ns</td>
<td style="text-align: right">0.2506 ns</td>
<td style="text-align: right">11.941 ns</td>
<td style="text-align: right">3.09</td>
<td style="text-align: right">0.18</td>
</tr>
<tr>
<td>NewArrayWithOrdinalVisit</td>
<td>10</td>
<td style="text-align: right">9.839 ns</td>
<td style="text-align: right">0.3379 ns</td>
<td style="text-align: right">0.9803 ns</td>
<td style="text-align: right">9.635 ns</td>
<td style="text-align: right">2.58</td>
<td style="text-align: right">0.26</td>
</tr>
<tr>
<td></td>
<td></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
</tr>
<tr>
<td>NewArray</td>
<td>100</td>
<td style="text-align: right">11.875 ns</td>
<td style="text-align: right">0.1932 ns</td>
<td style="text-align: right">0.2444 ns</td>
<td style="text-align: right">11.813 ns</td>
<td style="text-align: right">1.00</td>
<td style="text-align: right">0.00</td>
</tr>
<tr>
<td>GCZeroInitialized</td>
<td>100</td>
<td style="text-align: right">21.980 ns</td>
<td style="text-align: right">0.4524 ns</td>
<td style="text-align: right">0.8931 ns</td>
<td style="text-align: right">21.820 ns</td>
<td style="text-align: right">1.88</td>
<td style="text-align: right">0.08</td>
</tr>
<tr>
<td>GCZeroUninitialized</td>
<td>100</td>
<td style="text-align: right">12.126 ns</td>
<td style="text-align: right">0.2769 ns</td>
<td style="text-align: right">0.5201 ns</td>
<td style="text-align: right">11.953 ns</td>
<td style="text-align: right">1.04</td>
<td style="text-align: right">0.05</td>
</tr>
<tr>
<td>NewArrayWithRandomVisit</td>
<td>100</td>
<td style="text-align: right">47.344 ns</td>
<td style="text-align: right">0.9635 ns</td>
<td style="text-align: right">2.1351 ns</td>
<td style="text-align: right">46.572 ns</td>
<td style="text-align: right">4.03</td>
<td style="text-align: right">0.24</td>
</tr>
<tr>
<td>NewArrayWithOrdinalVisit</td>
<td>100</td>
<td style="text-align: right">75.207 ns</td>
<td style="text-align: right">1.4285 ns</td>
<td style="text-align: right">1.3363 ns</td>
<td style="text-align: right">75.364 ns</td>
<td style="text-align: right">6.33</td>
<td style="text-align: right">0.15</td>
</tr>
<tr>
<td></td>
<td></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
</tr>
<tr>
<td>NewArray</td>
<td>1000</td>
<td style="text-align: right">110.197 ns</td>
<td style="text-align: right">2.1602 ns</td>
<td style="text-align: right">2.0206 ns</td>
<td style="text-align: right">109.619 ns</td>
<td style="text-align: right">1.00</td>
<td style="text-align: right">0.00</td>
</tr>
<tr>
<td>GCZeroInitialized</td>
<td>1000</td>
<td style="text-align: right">116.560 ns</td>
<td style="text-align: right">2.0796 ns</td>
<td style="text-align: right">1.8435 ns</td>
<td style="text-align: right">116.604 ns</td>
<td style="text-align: right">1.06</td>
<td style="text-align: right">0.03</td>
</tr>
<tr>
<td>GCZeroUninitialized</td>
<td>1000</td>
<td style="text-align: right">33.476 ns</td>
<td style="text-align: right">0.5921 ns</td>
<td style="text-align: right">0.5538 ns</td>
<td style="text-align: right">33.643 ns</td>
<td style="text-align: right">0.30</td>
<td style="text-align: right">0.01</td>
</tr>
<tr>
<td>NewArrayWithRandomVisit</td>
<td>1000</td>
<td style="text-align: right">208.835 ns</td>
<td style="text-align: right">4.1962 ns</td>
<td style="text-align: right">8.8512 ns</td>
<td style="text-align: right">205.699 ns</td>
<td style="text-align: right">1.92</td>
<td style="text-align: right">0.09</td>
</tr>
<tr>
<td>NewArrayWithOrdinalVisit</td>
<td>1000</td>
<td style="text-align: right">620.850 ns</td>
<td style="text-align: right">11.5406 ns</td>
<td style="text-align: right">10.7951 ns</td>
<td style="text-align: right">619.304 ns</td>
<td style="text-align: right">5.64</td>
<td style="text-align: right">0.15</td>
</tr>
<tr>
<td></td>
<td></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
</tr>
<tr>
<td>NewArray</td>
<td>10000</td>
<td style="text-align: right">996.853 ns</td>
<td style="text-align: right">21.9389 ns</td>
<td style="text-align: right">61.8790 ns</td>
<td style="text-align: right">970.393 ns</td>
<td style="text-align: right">1.00</td>
<td style="text-align: right">0.00</td>
</tr>
<tr>
<td>GCZeroInitialized</td>
<td>10000</td>
<td style="text-align: right">996.704 ns</td>
<td style="text-align: right">20.8764 ns</td>
<td style="text-align: right">58.5397 ns</td>
<td style="text-align: right">974.900 ns</td>
<td style="text-align: right">1.00</td>
<td style="text-align: right">0.08</td>
</tr>
<tr>
<td>GCZeroUninitialized</td>
<td>10000</td>
<td style="text-align: right">63.200 ns</td>
<td style="text-align: right">1.0544 ns</td>
<td style="text-align: right">0.9863 ns</td>
<td style="text-align: right">63.315 ns</td>
<td style="text-align: right">0.06</td>
<td style="text-align: right">0.00</td>
</tr>
<tr>
<td>NewArrayWithRandomVisit</td>
<td>10000</td>
<td style="text-align: right">1,242.151 ns</td>
<td style="text-align: right">24.2642 ns</td>
<td style="text-align: right">38.4856 ns</td>
<td style="text-align: right">1,233.944 ns</td>
<td style="text-align: right">1.21</td>
<td style="text-align: right">0.07</td>
</tr>
<tr>
<td>NewArrayWithOrdinalVisit</td>
<td>10000</td>
<td style="text-align: right">6,068.245 ns</td>
<td style="text-align: right">90.8508 ns</td>
<td style="text-align: right">84.9819 ns</td>
<td style="text-align: right">6,076.727 ns</td>
<td style="text-align: right">5.79</td>
<td style="text-align: right">0.34</td>
</tr>
<tr>
<td></td>
<td></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
</tr>
<tr>
<td>NewArray</td>
<td>100000</td>
<td style="text-align: right">7,381.046 ns</td>
<td style="text-align: right">137.9635 ns</td>
<td style="text-align: right">147.6194 ns</td>
<td style="text-align: right">7,372.520 ns</td>
<td style="text-align: right">1.00</td>
<td style="text-align: right">0.00</td>
</tr>
<tr>
<td>GCZeroInitialized</td>
<td>100000</td>
<td style="text-align: right">7,214.089 ns</td>
<td style="text-align: right">85.2068 ns</td>
<td style="text-align: right">71.1515 ns</td>
<td style="text-align: right">7,209.220 ns</td>
<td style="text-align: right">0.97</td>
<td style="text-align: right">0.02</td>
</tr>
<tr>
<td>GCZeroUninitialized</td>
<td>100000</td>
<td style="text-align: right">7,347.661 ns</td>
<td style="text-align: right">146.3643 ns</td>
<td style="text-align: right">174.2363 ns</td>
<td style="text-align: right">7,306.838 ns</td>
<td style="text-align: right">1.00</td>
<td style="text-align: right">0.03</td>
</tr>
<tr>
<td>NewArrayWithRandomVisit</td>
<td>100000</td>
<td style="text-align: right">8,456.669 ns</td>
<td style="text-align: right">164.5726 ns</td>
<td style="text-align: right">219.6997 ns</td>
<td style="text-align: right">8,517.366 ns</td>
<td style="text-align: right">1.14</td>
<td style="text-align: right">0.05</td>
</tr>
<tr>
<td>NewArrayWithOrdinalVisit</td>
<td>100000</td>
<td style="text-align: right">129,749.709 ns</td>
<td style="text-align: right">2,408.4302 ns</td>
<td style="text-align: right">2,773.5518 ns</td>
<td style="text-align: right">128,963.159 ns</td>
<td style="text-align: right">17.57</td>
<td style="text-align: right">0.55</td>
</tr>
<tr>
<td></td>
<td></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
</tr>
<tr>
<td>NewArray</td>
<td>1000000</td>
<td style="text-align: right">59,752.036 ns</td>
<td style="text-align: right">1,194.7579 ns</td>
<td style="text-align: right">1,929.3113 ns</td>
<td style="text-align: right">59,414.325 ns</td>
<td style="text-align: right">1.00</td>
<td style="text-align: right">0.00</td>
</tr>
<tr>
<td>GCZeroInitialized</td>
<td>1000000</td>
<td style="text-align: right">60,008.303 ns</td>
<td style="text-align: right">1,188.0164 ns</td>
<td style="text-align: right">1,778.1671 ns</td>
<td style="text-align: right">59,378.000 ns</td>
<td style="text-align: right">1.01</td>
<td style="text-align: right">0.04</td>
</tr>
<tr>
<td>GCZeroUninitialized</td>
<td>1000000</td>
<td style="text-align: right">58,868.279 ns</td>
<td style="text-align: right">1,023.4279 ns</td>
<td style="text-align: right">957.3151 ns</td>
<td style="text-align: right">58,724.731 ns</td>
<td style="text-align: right">0.97</td>
<td style="text-align: right">0.04</td>
</tr>
<tr>
<td>NewArrayWithRandomVisit</td>
<td>1000000</td>
<td style="text-align: right">56,399.609 ns</td>
<td style="text-align: right">1,068.5479 ns</td>
<td style="text-align: right">999.5204 ns</td>
<td style="text-align: right">56,296.948 ns</td>
<td style="text-align: right">0.93</td>
<td style="text-align: right">0.03</td>
</tr>
<tr>
<td>NewArrayWithOrdinalVisit</td>
<td>1000000</td>
<td style="text-align: right">1,314,841.960 ns</td>
<td style="text-align: right">26,155.6618 ns</td>
<td style="text-align: right">27,986.2651 ns</td>
<td style="text-align: right">1,313,674.414 ns</td>
<td style="text-align: right">21.92</td>
<td style="text-align: right">1.00</td>
</tr>
</tbody>
</table>
<h3 id="兆芯-zhaoxin-kaixian-kx-u6780a">兆芯 ZHAOXIN KaiXian KX-U6780A</h3>
<pre><code>
BenchmarkDotNet v0.13.12, UnionTech OS Desktop 20 E
ZHAOXIN KaiXian KX-U6780A2.7GHz (Max: 2.70GHz), 1 CPU, 8 logical and 8 physical cores
.NET SDK 8.0.204
  [Host]     : .NET 8.0.4 (8.0.424.16909), X64 RyuJIT AVX
  Job-YPUGMN : .NET 8.0.4 (8.0.424.16909), X64 RyuJIT AVX

RunStrategy=Throughput  

</code></pre>
<table>
<thead>
<tr>
<th>Method</th>
<th>ArraySize</th>
<th style="text-align: right">Mean</th>
<th style="text-align: right">Error</th>
<th style="text-align: right">StdDev</th>
<th style="text-align: right">Median</th>
<th style="text-align: right">Ratio</th>
<th style="text-align: right">RatioSD</th>
</tr>
</thead>
<tbody>
<tr>
<td>NewArray</td>
<td>10</td>
<td style="text-align: right">40.20 ns</td>
<td style="text-align: right">0.977 ns</td>
<td style="text-align: right">1.491 ns</td>
<td style="text-align: right">39.98 ns</td>
<td style="text-align: right">1.00</td>
<td style="text-align: right">0.00</td>
</tr>
<tr>
<td>GCZeroInitialized</td>
<td>10</td>
<td style="text-align: right">141.12 ns</td>
<td style="text-align: right">2.996 ns</td>
<td style="text-align: right">6.051 ns</td>
<td style="text-align: right">139.67 ns</td>
<td style="text-align: right">3.54</td>
<td style="text-align: right">0.18</td>
</tr>
<tr>
<td>GCZeroUninitialized</td>
<td>10</td>
<td style="text-align: right">48.72 ns</td>
<td style="text-align: right">0.849 ns</td>
<td style="text-align: right">0.663 ns</td>
<td style="text-align: right">48.91 ns</td>
<td style="text-align: right">1.19</td>
<td style="text-align: right">0.05</td>
</tr>
<tr>
<td>NewArrayWithRandomVisit</td>
<td>10</td>
<td style="text-align: right">195.75 ns</td>
<td style="text-align: right">1.082 ns</td>
<td style="text-align: right">0.845 ns</td>
<td style="text-align: right">195.65 ns</td>
<td style="text-align: right">4.77</td>
<td style="text-align: right">0.16</td>
</tr>
<tr>
<td>NewArrayWithOrdinalVisit</td>
<td>10</td>
<td style="text-align: right">72.42 ns</td>
<td style="text-align: right">1.513 ns</td>
<td style="text-align: right">2.400 ns</td>
<td style="text-align: right">72.45 ns</td>
<td style="text-align: right">1.80</td>
<td style="text-align: right">0.08</td>
</tr>
<tr>
<td></td>
<td></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
</tr>
<tr>
<td>NewArray</td>
<td>100</td>
<td style="text-align: right">135.07 ns</td>
<td style="text-align: right">2.892 ns</td>
<td style="text-align: right">6.100 ns</td>
<td style="text-align: right">135.41 ns</td>
<td style="text-align: right">1.00</td>
<td style="text-align: right">0.00</td>
</tr>
<tr>
<td>GCZeroInitialized</td>
<td>100</td>
<td style="text-align: right">228.42 ns</td>
<td style="text-align: right">4.662 ns</td>
<td style="text-align: right">10.135 ns</td>
<td style="text-align: right">228.83 ns</td>
<td style="text-align: right">1.70</td>
<td style="text-align: right">0.11</td>
</tr>
<tr>
<td>GCZeroUninitialized</td>
<td>100</td>
<td style="text-align: right">137.26 ns</td>
<td style="text-align: right">2.939 ns</td>
<td style="text-align: right">5.519 ns</td>
<td style="text-align: right">136.70 ns</td>
<td style="text-align: right">1.02</td>
<td style="text-align: right">0.06</td>
</tr>
<tr>
<td>NewArrayWithRandomVisit</td>
<td>100</td>
<td style="text-align: right">572.02 ns</td>
<td style="text-align: right">11.660 ns</td>
<td style="text-align: right">19.157 ns</td>
<td style="text-align: right">568.34 ns</td>
<td style="text-align: right">4.26</td>
<td style="text-align: right">0.27</td>
</tr>
<tr>
<td>NewArrayWithOrdinalVisit</td>
<td>100</td>
<td style="text-align: right">467.29 ns</td>
<td style="text-align: right">9.357 ns</td>
<td style="text-align: right">13.117 ns</td>
<td style="text-align: right">464.49 ns</td>
<td style="text-align: right">3.47</td>
<td style="text-align: right">0.21</td>
</tr>
<tr>
<td></td>
<td></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
</tr>
<tr>
<td>NewArray</td>
<td>1000</td>
<td style="text-align: right">1,037.70 ns</td>
<td style="text-align: right">20.377 ns</td>
<td style="text-align: right">54.742 ns</td>
<td style="text-align: right">1,031.50 ns</td>
<td style="text-align: right">1.00</td>
<td style="text-align: right">0.00</td>
</tr>
<tr>
<td>GCZeroInitialized</td>
<td>1000</td>
<td style="text-align: right">1,127.93 ns</td>
<td style="text-align: right">22.581 ns</td>
<td style="text-align: right">59.091 ns</td>
<td style="text-align: right">1,125.79 ns</td>
<td style="text-align: right">1.09</td>
<td style="text-align: right">0.07</td>
</tr>
<tr>
<td>GCZeroUninitialized</td>
<td>1000</td>
<td style="text-align: right">653.93 ns</td>
<td style="text-align: right">6.239 ns</td>
<td style="text-align: right">4.871 ns</td>
<td style="text-align: right">652.04 ns</td>
<td style="text-align: right">0.60</td>
<td style="text-align: right">0.02</td>
</tr>
<tr>
<td>NewArrayWithRandomVisit</td>
<td>1000</td>
<td style="text-align: right">2,375.21 ns</td>
<td style="text-align: right">47.088 ns</td>
<td style="text-align: right">100.349 ns</td>
<td style="text-align: right">2,352.11 ns</td>
<td style="text-align: right">2.27</td>
<td style="text-align: right">0.13</td>
</tr>
<tr>
<td>NewArrayWithOrdinalVisit</td>
<td>1000</td>
<td style="text-align: right">4,474.90 ns</td>
<td style="text-align: right">87.887 ns</td>
<td style="text-align: right">107.933 ns</td>
<td style="text-align: right">4,453.16 ns</td>
<td style="text-align: right">4.19</td>
<td style="text-align: right">0.28</td>
</tr>
<tr>
<td></td>
<td></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
</tr>
<tr>
<td>NewArray</td>
<td>10000</td>
<td style="text-align: right">9,586.62 ns</td>
<td style="text-align: right">189.501 ns</td>
<td style="text-align: right">369.608 ns</td>
<td style="text-align: right">9,657.74 ns</td>
<td style="text-align: right">1.00</td>
<td style="text-align: right">0.00</td>
</tr>
<tr>
<td>GCZeroInitialized</td>
<td>10000</td>
<td style="text-align: right">9,767.26 ns</td>
<td style="text-align: right">194.643 ns</td>
<td style="text-align: right">462.590 ns</td>
<td style="text-align: right">9,811.53 ns</td>
<td style="text-align: right">1.02</td>
<td style="text-align: right">0.07</td>
</tr>
<tr>
<td>GCZeroUninitialized</td>
<td>10000</td>
<td style="text-align: right">4,093.63 ns</td>
<td style="text-align: right">80.993 ns</td>
<td style="text-align: right">143.965 ns</td>
<td style="text-align: right">4,026.86 ns</td>
<td style="text-align: right">0.43</td>
<td style="text-align: right">0.02</td>
</tr>
<tr>
<td>NewArrayWithRandomVisit</td>
<td>10000</td>
<td style="text-align: right">13,908.10 ns</td>
<td style="text-align: right">202.573 ns</td>
<td style="text-align: right">169.158 ns</td>
<td style="text-align: right">13,928.15 ns</td>
<td style="text-align: right">1.47</td>
<td style="text-align: right">0.06</td>
</tr>
<tr>
<td>NewArrayWithOrdinalVisit</td>
<td>10000</td>
<td style="text-align: right">43,057.16 ns</td>
<td style="text-align: right">854.132 ns</td>
<td style="text-align: right">1,495.943 ns</td>
<td style="text-align: right">42,914.21 ns</td>
<td style="text-align: right">4.50</td>
<td style="text-align: right">0.25</td>
</tr>
<tr>
<td></td>
<td></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
</tr>
<tr>
<td>NewArray</td>
<td>100000</td>
<td style="text-align: right">63,542.13 ns</td>
<td style="text-align: right">576.256 ns</td>
<td style="text-align: right">510.836 ns</td>
<td style="text-align: right">63,519.28 ns</td>
<td style="text-align: right">1.00</td>
<td style="text-align: right">0.00</td>
</tr>
<tr>
<td>GCZeroInitialized</td>
<td>100000</td>
<td style="text-align: right">66,357.64 ns</td>
<td style="text-align: right">1,312.089 ns</td>
<td style="text-align: right">2,118.779 ns</td>
<td style="text-align: right">66,043.66 ns</td>
<td style="text-align: right">1.03</td>
<td style="text-align: right">0.03</td>
</tr>
<tr>
<td>GCZeroUninitialized</td>
<td>100000</td>
<td style="text-align: right">63,638.29 ns</td>
<td style="text-align: right">1,241.493 ns</td>
<td style="text-align: right">1,477.909 ns</td>
<td style="text-align: right">63,270.73 ns</td>
<td style="text-align: right">1.01</td>
<td style="text-align: right">0.03</td>
</tr>
<tr>
<td>NewArrayWithRandomVisit</td>
<td>100000</td>
<td style="text-align: right">76,609.50 ns</td>
<td style="text-align: right">1,501.442 ns</td>
<td style="text-align: right">1,729.063 ns</td>
<td style="text-align: right">75,958.21 ns</td>
<td style="text-align: right">1.21</td>
<td style="text-align: right">0.03</td>
</tr>
<tr>
<td>NewArrayWithOrdinalVisit</td>
<td>100000</td>
<td style="text-align: right">665,286.65 ns</td>
<td style="text-align: right">9,295.620 ns</td>
<td style="text-align: right">7,762.264 ns</td>
<td style="text-align: right">662,915.19 ns</td>
<td style="text-align: right">10.47</td>
<td style="text-align: right">0.16</td>
</tr>
<tr>
<td></td>
<td></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
</tr>
<tr>
<td>NewArray</td>
<td>1000000</td>
<td style="text-align: right">461,130.99 ns</td>
<td style="text-align: right">9,000.698 ns</td>
<td style="text-align: right">10,004.252 ns</td>
<td style="text-align: right">461,306.23 ns</td>
<td style="text-align: right">1.00</td>
<td style="text-align: right">0.00</td>
</tr>
<tr>
<td>GCZeroInitialized</td>
<td>1000000</td>
<td style="text-align: right">459,810.29 ns</td>
<td style="text-align: right">8,893.401 ns</td>
<td style="text-align: right">10,586.961 ns</td>
<td style="text-align: right">455,791.25 ns</td>
<td style="text-align: right">1.00</td>
<td style="text-align: right">0.03</td>
</tr>
<tr>
<td>GCZeroUninitialized</td>
<td>1000000</td>
<td style="text-align: right">456,245.03 ns</td>
<td style="text-align: right">8,819.606 ns</td>
<td style="text-align: right">12,363.856 ns</td>
<td style="text-align: right">452,252.89 ns</td>
<td style="text-align: right">0.99</td>
<td style="text-align: right">0.04</td>
</tr>
<tr>
<td>NewArrayWithRandomVisit</td>
<td>1000000</td>
<td style="text-align: right">497,132.01 ns</td>
<td style="text-align: right">9,841.562 ns</td>
<td style="text-align: right">12,796.810 ns</td>
<td style="text-align: right">490,990.22 ns</td>
<td style="text-align: right">1.08</td>
<td style="text-align: right">0.03</td>
</tr>
<tr>
<td>NewArrayWithOrdinalVisit</td>
<td>1000000</td>
<td style="text-align: right">6,742,537.03 ns</td>
<td style="text-align: right">48,986.470 ns</td>
<td style="text-align: right">38,245.414 ns</td>
<td style="text-align: right">6,732,321.64 ns</td>
<td style="text-align: right">14.51</td>
<td style="text-align: right">0.31</td>
</tr>
</tbody>
</table>
<h3 id="飞腾腾锐-phytium-d2000">飞腾腾锐 Phytium D2000</h3>
<pre><code>
BenchmarkDotNet v0.13.12, Kylin V10 SP1
Phytium,D2000/8 E8C, 8 logical cores
.NET SDK 8.0.204
  [Host]     : .NET 8.0.4 (8.0.424.16909), Arm64 RyuJIT AdvSIMD
  Job-NHRLJG : .NET 8.0.4 (8.0.424.16909), Arm64 RyuJIT AdvSIMD

RunStrategy=Throughput  

</code></pre>
<table>
<thead>
<tr>
<th>Method</th>
<th>ArraySize</th>
<th style="text-align: right">Mean</th>
<th style="text-align: right">Error</th>
<th style="text-align: right">StdDev</th>
<th style="text-align: right">Ratio</th>
<th style="text-align: right">RatioSD</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>NewArray</strong></td>
<td><strong>10</strong></td>
<td style="text-align: right"><strong>22.18 ns</strong></td>
<td style="text-align: right"><strong>0.149 ns</strong></td>
<td style="text-align: right"><strong>0.132 ns</strong></td>
<td style="text-align: right"><strong>1.00</strong></td>
<td style="text-align: right"><strong>0.00</strong></td>
</tr>
<tr>
<td>GCZeroInitialized</td>
<td>10</td>
<td style="text-align: right">92.43 ns</td>
<td style="text-align: right">0.564 ns</td>
<td style="text-align: right">0.440 ns</td>
<td style="text-align: right">4.17</td>
<td style="text-align: right">0.02</td>
</tr>
<tr>
<td>GCZeroUninitialized</td>
<td>10</td>
<td style="text-align: right">25.68 ns</td>
<td style="text-align: right">0.248 ns</td>
<td style="text-align: right">0.243 ns</td>
<td style="text-align: right">1.16</td>
<td style="text-align: right">0.01</td>
</tr>
<tr>
<td>NewArrayWithRandomVisit</td>
<td>10</td>
<td style="text-align: right">108.25 ns</td>
<td style="text-align: right">0.299 ns</td>
<td style="text-align: right">0.250 ns</td>
<td style="text-align: right">4.88</td>
<td style="text-align: right">0.03</td>
</tr>
<tr>
<td>NewArrayWithOrdinalVisit</td>
<td>10</td>
<td style="text-align: right">34.55 ns</td>
<td style="text-align: right">0.126 ns</td>
<td style="text-align: right">0.112 ns</td>
<td style="text-align: right">1.56</td>
<td style="text-align: right">0.01</td>
</tr>
<tr>
<td></td>
<td></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
</tr>
<tr>
<td><strong>NewArray</strong></td>
<td><strong>100</strong></td>
<td style="text-align: right"><strong>76.35 ns</strong></td>
<td style="text-align: right"><strong>0.941 ns</strong></td>
<td style="text-align: right"><strong>0.880 ns</strong></td>
<td style="text-align: right"><strong>1.00</strong></td>
<td style="text-align: right"><strong>0.00</strong></td>
</tr>
<tr>
<td>GCZeroInitialized</td>
<td>100</td>
<td style="text-align: right">163.69 ns</td>
<td style="text-align: right">0.952 ns</td>
<td style="text-align: right">0.743 ns</td>
<td style="text-align: right">2.14</td>
<td style="text-align: right">0.03</td>
</tr>
<tr>
<td>GCZeroUninitialized</td>
<td>100</td>
<td style="text-align: right">80.21 ns</td>
<td style="text-align: right">0.528 ns</td>
<td style="text-align: right">0.468 ns</td>
<td style="text-align: right">1.05</td>
<td style="text-align: right">0.02</td>
</tr>
<tr>
<td>NewArrayWithRandomVisit</td>
<td>100</td>
<td style="text-align: right">421.53 ns</td>
<td style="text-align: right">1.679 ns</td>
<td style="text-align: right">1.402 ns</td>
<td style="text-align: right">5.52</td>
<td style="text-align: right">0.06</td>
</tr>
<tr>
<td>NewArrayWithOrdinalVisit</td>
<td>100</td>
<td style="text-align: right">300.66 ns</td>
<td style="text-align: right">1.274 ns</td>
<td style="text-align: right">1.130 ns</td>
<td style="text-align: right">3.94</td>
<td style="text-align: right">0.05</td>
</tr>
<tr>
<td></td>
<td></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
</tr>
<tr>
<td><strong>NewArray</strong></td>
<td><strong>1000</strong></td>
<td style="text-align: right"><strong>640.11 ns</strong></td>
<td style="text-align: right"><strong>4.059 ns</strong></td>
<td style="text-align: right"><strong>3.598 ns</strong></td>
<td style="text-align: right"><strong>1.00</strong></td>
<td style="text-align: right"><strong>0.00</strong></td>
</tr>
<tr>
<td>GCZeroInitialized</td>
<td>1000</td>
<td style="text-align: right">672.06 ns</td>
<td style="text-align: right">3.242 ns</td>
<td style="text-align: right">3.032 ns</td>
<td style="text-align: right">1.05</td>
<td style="text-align: right">0.01</td>
</tr>
<tr>
<td>GCZeroUninitialized</td>
<td>1000</td>
<td style="text-align: right">483.70 ns</td>
<td style="text-align: right">2.202 ns</td>
<td style="text-align: right">1.952 ns</td>
<td style="text-align: right">0.76</td>
<td style="text-align: right">0.01</td>
</tr>
<tr>
<td>NewArrayWithRandomVisit</td>
<td>1000</td>
<td style="text-align: right">1,765.24 ns</td>
<td style="text-align: right">6.469 ns</td>
<td style="text-align: right">5.402 ns</td>
<td style="text-align: right">2.76</td>
<td style="text-align: right">0.02</td>
</tr>
<tr>
<td>NewArrayWithOrdinalVisit</td>
<td>1000</td>
<td style="text-align: right">2,850.39 ns</td>
<td style="text-align: right">12.971 ns</td>
<td style="text-align: right">12.133 ns</td>
<td style="text-align: right">4.45</td>
<td style="text-align: right">0.03</td>
</tr>
<tr>
<td></td>
<td></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
</tr>
<tr>
<td><strong>NewArray</strong></td>
<td><strong>10000</strong></td>
<td style="text-align: right"><strong>5,219.58 ns</strong></td>
<td style="text-align: right"><strong>36.810 ns</strong></td>
<td style="text-align: right"><strong>32.631 ns</strong></td>
<td style="text-align: right"><strong>1.00</strong></td>
<td style="text-align: right"><strong>0.00</strong></td>
</tr>
<tr>
<td>GCZeroInitialized</td>
<td>10000</td>
<td style="text-align: right">5,280.52 ns</td>
<td style="text-align: right">27.550 ns</td>
<td style="text-align: right">24.422 ns</td>
<td style="text-align: right">1.01</td>
<td style="text-align: right">0.01</td>
</tr>
<tr>
<td>GCZeroUninitialized</td>
<td>10000</td>
<td style="text-align: right">2,640.52 ns</td>
<td style="text-align: right">44.642 ns</td>
<td style="text-align: right">34.853 ns</td>
<td style="text-align: right">0.51</td>
<td style="text-align: right">0.01</td>
</tr>
<tr>
<td>NewArrayWithRandomVisit</td>
<td>10000</td>
<td style="text-align: right">8,992.89 ns</td>
<td style="text-align: right">20.367 ns</td>
<td style="text-align: right">19.052 ns</td>
<td style="text-align: right">1.72</td>
<td style="text-align: right">0.01</td>
</tr>
<tr>
<td>NewArrayWithOrdinalVisit</td>
<td>10000</td>
<td style="text-align: right">26,983.43 ns</td>
<td style="text-align: right">355.773 ns</td>
<td style="text-align: right">297.086 ns</td>
<td style="text-align: right">5.17</td>
<td style="text-align: right">0.05</td>
</tr>
<tr>
<td></td>
<td></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
</tr>
<tr>
<td><strong>NewArray</strong></td>
<td><strong>100000</strong></td>
<td style="text-align: right"><strong>45,506.61 ns</strong></td>
<td style="text-align: right"><strong>431.868 ns</strong></td>
<td style="text-align: right"><strong>403.970 ns</strong></td>
<td style="text-align: right"><strong>1.00</strong></td>
<td style="text-align: right"><strong>0.00</strong></td>
</tr>
<tr>
<td>GCZeroInitialized</td>
<td>100000</td>
<td style="text-align: right">45,543.14 ns</td>
<td style="text-align: right">432.449 ns</td>
<td style="text-align: right">404.513 ns</td>
<td style="text-align: right">1.00</td>
<td style="text-align: right">0.01</td>
</tr>
<tr>
<td>GCZeroUninitialized</td>
<td>100000</td>
<td style="text-align: right">44,461.84 ns</td>
<td style="text-align: right">331.168 ns</td>
<td style="text-align: right">309.775 ns</td>
<td style="text-align: right">0.98</td>
<td style="text-align: right">0.01</td>
</tr>
<tr>
<td>NewArrayWithRandomVisit</td>
<td>100000</td>
<td style="text-align: right">57,232.01 ns</td>
<td style="text-align: right">318.770 ns</td>
<td style="text-align: right">298.178 ns</td>
<td style="text-align: right">1.26</td>
<td style="text-align: right">0.01</td>
</tr>
<tr>
<td>NewArrayWithOrdinalVisit</td>
<td>100000</td>
<td style="text-align: right">445,380.51 ns</td>
<td style="text-align: right">2,904.888 ns</td>
<td style="text-align: right">2,425.713 ns</td>
<td style="text-align: right">9.78</td>
<td style="text-align: right">0.10</td>
</tr>
<tr>
<td></td>
<td></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
</tr>
<tr>
<td><strong>NewArray</strong></td>
<td><strong>1000000</strong></td>
<td style="text-align: right"><strong>318,862.16 ns</strong></td>
<td style="text-align: right"><strong>1,899.267 ns</strong></td>
<td style="text-align: right"><strong>1,683.651 ns</strong></td>
<td style="text-align: right"><strong>1.00</strong></td>
<td style="text-align: right"><strong>0.00</strong></td>
</tr>
<tr>
<td>GCZeroInitialized</td>
<td>1000000</td>
<td style="text-align: right">319,510.71 ns</td>
<td style="text-align: right">4,669.274 ns</td>
<td style="text-align: right">3,645.462 ns</td>
<td style="text-align: right">1.00</td>
<td style="text-align: right">0.01</td>
</tr>
<tr>
<td>GCZeroUninitialized</td>
<td>1000000</td>
<td style="text-align: right">314,884.17 ns</td>
<td style="text-align: right">5,637.859 ns</td>
<td style="text-align: right">4,401.669 ns</td>
<td style="text-align: right">0.99</td>
<td style="text-align: right">0.02</td>
</tr>
<tr>
<td>NewArrayWithRandomVisit</td>
<td>1000000</td>
<td style="text-align: right">357,843.40 ns</td>
<td style="text-align: right">3,063.527 ns</td>
<td style="text-align: right">2,865.625 ns</td>
<td style="text-align: right">1.12</td>
<td style="text-align: right">0.01</td>
</tr>
<tr>
<td>NewArrayWithOrdinalVisit</td>
<td>1000000</td>
<td style="text-align: right">4,547,465.54 ns</td>
<td style="text-align: right">15,355.309 ns</td>
<td style="text-align: right">12,822.379 ns</td>
<td style="text-align: right">14.28</td>
<td style="text-align: right">0.05</td>
</tr>
<tr>
<td></td>
<td></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
<td style="text-align: right"></td>
</tr>
<tr>
<td><strong>NewArray</strong></td>
<td><strong>1000000000</strong></td>
<td style="text-align: right"><strong>1,541,406,672.88 ns</strong></td>
<td style="text-align: right"><strong>35,733,853.844 ns</strong></td>
<td style="text-align: right"><strong>102,527,125.216 ns</strong></td>
<td style="text-align: right"><strong>1.000</strong></td>
<td style="text-align: right"><strong>0.00</strong></td>
</tr>
<tr>
<td>GCZeroInitialized</td>
<td>1000000000</td>
<td style="text-align: right">1,548,370,215.42 ns</td>
<td style="text-align: right">38,407,327.571 ns</td>
<td style="text-align: right">110,197,822.498 ns</td>
<td style="text-align: right">1.009</td>
<td style="text-align: right">0.10</td>
</tr>
<tr>
<td>GCZeroUninitialized</td>
<td>1000000000</td>
<td style="text-align: right">1,486,735.21 ns</td>
<td style="text-align: right">28,605.254 ns</td>
<td style="text-align: right">26,757.372 ns</td>
<td style="text-align: right">0.001</td>
<td style="text-align: right">0.00</td>
</tr>
<tr>
<td>NewArrayWithRandomVisit</td>
<td>1000000000</td>
<td style="text-align: right">1,590,271,119.60 ns</td>
<td style="text-align: right">33,473,585.461 ns</td>
<td style="text-align: right">96,041,991.522 ns</td>
<td style="text-align: right">1.036</td>
<td style="text-align: right">0.09</td>
</tr>
<tr>
<td>NewArrayWithOrdinalVisit</td>
<td>1000000000</td>
<td style="text-align: right">3,861,833,983.54 ns</td>
<td style="text-align: right">2,367,487.064 ns</td>
<td style="text-align: right">1,976,958.923 ns</td>
<td style="text-align: right">2.546</td>
<td style="text-align: right">0.16</td>
</tr>
</tbody>
</table>
<p>以上的飞腾腾锐 Phytium D2000 最后的测试数据预计是不正常的</p>
<h2 id="数组拷贝">数组拷贝</h2>
<h3 id="测试维度">测试维度</h3>
<p>参与测试的内容如下：</p>
<ul>
<li>CopyByFor ： 使用 for 循环进行拷贝数组</li>
<li>Memcpy  ： 使用标准 C 提供的 memcpy 函数进行拷贝，在 linux 下使用 libc.so.6 导出函数，在 windows 下使用 msvcrt.dll 导出函数。这处于非常裸露的方式，更具体请参阅下文的数据说明内容</li>
<li>CopyBlockUnaligned ： 使用 dotnet 自带的 <code>Unsafe.CopyBlockUnaligned</code> 方法进行数组拷贝</li>
</ul>
<h3 id="英特尔-13th-gen-intel-core-i7-13700k-1">英特尔 13th Gen Intel Core i7-13700K</h3>
<h4 id="数组较小">数组较小</h4>
<p>小于 1000 的数组时，存在较大 P/Invoke 干扰，于是决定最小设置为 1000 的值</p>
<pre><code>
BenchmarkDotNet v0.13.12, Windows 11 (10.0.22631.3447/23H2/2023Update/SunValley3)
13th Gen Intel Core i7-13700K, 1 CPU, 24 logical and 16 physical cores
.NET SDK 8.0.204
  [Host]     : .NET 8.0.4 (8.0.424.16909), X64 RyuJIT AVX2
  Job-GCHWHL : .NET 8.0.4 (8.0.424.16909), X64 RyuJIT AVX2

RunStrategy=Throughput  

</code></pre>
<table>
<thead>
<tr>
<th>Method</th>
<th>source</th>
<th>dest</th>
<th style="text-align: right">Mean</th>
<th style="text-align: right">Error</th>
<th style="text-align: right">StdDev</th>
<th style="text-align: right">Ratio</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>CopyByFor</strong></td>
<td><strong>Int32[10000]</strong></td>
<td><strong>Int32[10000]</strong></td>
<td style="text-align: right"><strong>1,958.98 ns</strong></td>
<td style="text-align: right"><strong>8.391 ns</strong></td>
<td style="text-align: right"><strong>7.007 ns</strong></td>
<td style="text-align: right"><strong>1.000</strong></td>
</tr>
<tr>
<td>Memcpy</td>
<td>Int32[10000]</td>
<td>Int32[10000]</td>
<td style="text-align: right">609.35 ns</td>
<td style="text-align: right">3.266 ns</td>
<td style="text-align: right">3.055 ns</td>
<td style="text-align: right">0.311</td>
</tr>
<tr>
<td>CopyBlockUnaligned</td>
<td>Int32[10000]</td>
<td>Int32[10000]</td>
<td style="text-align: right">577.84 ns</td>
<td style="text-align: right">1.391 ns</td>
<td style="text-align: right">1.301 ns</td>
<td style="text-align: right">0.295</td>
</tr>
<tr>
<td><strong>CopyByFor</strong></td>
<td><strong>Int32[1000]</strong></td>
<td><strong>Int32[1000]</strong></td>
<td style="text-align: right"><strong>202.09 ns</strong></td>
<td style="text-align: right"><strong>0.376 ns</strong></td>
<td style="text-align: right"><strong>0.352 ns</strong></td>
<td style="text-align: right"><strong>0.103</strong></td>
</tr>
<tr>
<td>Memcpy</td>
<td>Int32[1000]</td>
<td>Int32[1000]</td>
<td style="text-align: right">32.21 ns</td>
<td style="text-align: right">0.323 ns</td>
<td style="text-align: right">0.302 ns</td>
<td style="text-align: right">0.016</td>
</tr>
<tr>
<td>CopyBlockUnaligned</td>
<td>Int32[1000]</td>
<td>Int32[1000]</td>
<td style="text-align: right">19.19 ns</td>
<td style="text-align: right">0.067 ns</td>
<td style="text-align: right">0.059 ns</td>
<td style="text-align: right">0.010</td>
</tr>
</tbody>
</table>
<p>根据上述测试数据可以看到，即使在较小数据量情况下，依然 memcpy 和 Unsafe.CopyBlockUnaligned 比 for 速度快</p>
<h4 id="数组较大">数组较大</h4>
<pre><code>
BenchmarkDotNet v0.13.12, Windows 11 (10.0.22631.3447/23H2/2023Update/SunValley3)
13th Gen Intel Core i7-13700K, 1 CPU, 24 logical and 16 physical cores
.NET SDK 8.0.204
  [Host]     : .NET 8.0.4 (8.0.424.16909), X64 RyuJIT AVX2
  Job-DBDADP : .NET 8.0.4 (8.0.424.16909), X64 RyuJIT AVX2

RunStrategy=Throughput  

</code></pre>
<table>
<thead>
<tr>
<th>Method</th>
<th>source</th>
<th>dest</th>
<th style="text-align: right">Mean</th>
<th style="text-align: right">Error</th>
<th style="text-align: right">StdDev</th>
<th style="text-align: right">Median</th>
<th style="text-align: right">Ratio</th>
<th style="text-align: right">RatioSD</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>CopyByFor</strong></td>
<td><strong>Int32[100000000]</strong></td>
<td><strong>Int32[100000000]</strong></td>
<td style="text-align: right"><strong>41,348,684.32 ns</strong></td>
<td style="text-align: right"><strong>751,207.515 ns</strong></td>
<td style="text-align: right"><strong>1,028,261.326 ns</strong></td>
<td style="text-align: right"><strong>41,102,646.15 ns</strong></td>
<td style="text-align: right"><strong>1.000</strong></td>
<td style="text-align: right"><strong>0.00</strong></td>
</tr>
<tr>
<td>Memcpy</td>
<td>Int32[100000000]</td>
<td>Int32[100000000]</td>
<td style="text-align: right">27,086,427.67 ns</td>
<td style="text-align: right">738,121.867 ns</td>
<td style="text-align: right">2,057,588.736 ns</td>
<td style="text-align: right">26,318,143.75 ns</td>
<td style="text-align: right">0.675</td>
<td style="text-align: right">0.05</td>
</tr>
<tr>
<td>CopyBlockUnaligned</td>
<td>Int32[100000000]</td>
<td>Int32[100000000]</td>
<td style="text-align: right">24,020,801.37 ns</td>
<td style="text-align: right">467,035.642 ns</td>
<td style="text-align: right">458,691.448 ns</td>
<td style="text-align: right">23,894,810.94 ns</td>
<td style="text-align: right">0.579</td>
<td style="text-align: right">0.02</td>
</tr>
<tr>
<td><strong>CopyByFor</strong></td>
<td><strong>Int32[10000000]</strong></td>
<td><strong>Int32[10000000]</strong></td>
<td style="text-align: right"><strong>3,800,486.40 ns</strong></td>
<td style="text-align: right"><strong>69,523.151 ns</strong></td>
<td style="text-align: right"><strong>162,508.123 ns</strong></td>
<td style="text-align: right"><strong>3,748,857.23 ns</strong></td>
<td style="text-align: right"><strong>0.092</strong></td>
<td style="text-align: right"><strong>0.01</strong></td>
</tr>
<tr>
<td>Memcpy</td>
<td>Int32[10000000]</td>
<td>Int32[10000000]</td>
<td style="text-align: right">2,313,413.90 ns</td>
<td style="text-align: right">75,362.059 ns</td>
<td style="text-align: right">208,827.911 ns</td>
<td style="text-align: right">2,248,826.17 ns</td>
<td style="text-align: right">0.058</td>
<td style="text-align: right">0.01</td>
</tr>
<tr>
<td>CopyBlockUnaligned</td>
<td>Int32[10000000]</td>
<td>Int32[10000000]</td>
<td style="text-align: right">2,005,075.29 ns</td>
<td style="text-align: right">55,131.653 ns</td>
<td style="text-align: right">149,989.727 ns</td>
<td style="text-align: right">1,925,467.19 ns</td>
<td style="text-align: right">0.049</td>
<td style="text-align: right">0.00</td>
</tr>
<tr>
<td><strong>CopyByFor</strong></td>
<td><strong>Int32[1000000]</strong></td>
<td><strong>Int32[1000000]</strong></td>
<td style="text-align: right"><strong>201,416.81 ns</strong></td>
<td style="text-align: right"><strong>1,630.278 ns</strong></td>
<td style="text-align: right"><strong>1,524.963 ns</strong></td>
<td style="text-align: right"><strong>200,902.27 ns</strong></td>
<td style="text-align: right"><strong>0.005</strong></td>
<td style="text-align: right"><strong>0.00</strong></td>
</tr>
<tr>
<td>Memcpy</td>
<td>Int32[1000000]</td>
<td>Int32[1000000]</td>
<td style="text-align: right">104,570.31 ns</td>
<td style="text-align: right">3,304.068 ns</td>
<td style="text-align: right">9,319.184 ns</td>
<td style="text-align: right">100,412.65 ns</td>
<td style="text-align: right">0.003</td>
<td style="text-align: right">0.00</td>
</tr>
<tr>
<td>CopyBlockUnaligned</td>
<td>Int32[1000000]</td>
<td>Int32[1000000]</td>
<td style="text-align: right">99,385.15 ns</td>
<td style="text-align: right">1,824.888 ns</td>
<td style="text-align: right">1,617.716 ns</td>
<td style="text-align: right">99,135.09 ns</td>
<td style="text-align: right">0.002</td>
<td style="text-align: right">0.00</td>
</tr>
<tr>
<td><strong>CopyByFor</strong></td>
<td><strong>Int32[10000]</strong></td>
<td><strong>Int32[10000]</strong></td>
<td style="text-align: right"><strong>1,958.87 ns</strong></td>
<td style="text-align: right"><strong>4.267 ns</strong></td>
<td style="text-align: right"><strong>3.783 ns</strong></td>
<td style="text-align: right"><strong>1,959.42 ns</strong></td>
<td style="text-align: right"><strong>0.000</strong></td>
<td style="text-align: right"><strong>0.00</strong></td>
</tr>
<tr>
<td>Memcpy</td>
<td>Int32[10000]</td>
<td>Int32[10000]</td>
<td style="text-align: right">624.06 ns</td>
<td style="text-align: right">4.451 ns</td>
<td style="text-align: right">4.164 ns</td>
<td style="text-align: right">622.60 ns</td>
<td style="text-align: right">0.000</td>
<td style="text-align: right">0.00</td>
</tr>
<tr>
<td>CopyBlockUnaligned</td>
<td>Int32[10000]</td>
<td>Int32[10000]</td>
<td style="text-align: right">581.32 ns</td>
<td style="text-align: right">2.044 ns</td>
<td style="text-align: right">1.912 ns</td>
<td style="text-align: right">581.53 ns</td>
<td style="text-align: right">0.000</td>
<td style="text-align: right">0.00</td>
</tr>
<tr>
<td><strong>CopyByFor</strong></td>
<td><strong>Int32[1000]</strong></td>
<td><strong>Int32[1000]</strong></td>
<td style="text-align: right"><strong>201.05 ns</strong></td>
<td style="text-align: right"><strong>0.678 ns</strong></td>
<td style="text-align: right"><strong>0.635 ns</strong></td>
<td style="text-align: right"><strong>201.05 ns</strong></td>
<td style="text-align: right"><strong>0.000</strong></td>
<td style="text-align: right"><strong>0.00</strong></td>
</tr>
<tr>
<td>Memcpy</td>
<td>Int32[1000]</td>
<td>Int32[1000]</td>
<td style="text-align: right">32.12 ns</td>
<td style="text-align: right">0.638 ns</td>
<td style="text-align: right">0.683 ns</td>
<td style="text-align: right">32.10 ns</td>
<td style="text-align: right">0.000</td>
<td style="text-align: right">0.00</td>
</tr>
<tr>
<td>CopyBlockUnaligned</td>
<td>Int32[1000]</td>
<td>Int32[1000]</td>
<td style="text-align: right">21.02 ns</td>
<td style="text-align: right">0.090 ns</td>
<td style="text-align: right">0.085 ns</td>
<td style="text-align: right">21.04 ns</td>
<td style="text-align: right">0.000</td>
<td style="text-align: right">0.00</td>
</tr>
</tbody>
</table>
<h3 id="兆芯-zhaoxin-kaixian-kx-u6780a-1">兆芯 ZHAOXIN KaiXian KX-U6780A</h3>
<h4 id="数组较小-1">数组较小</h4>
<pre><code>
BenchmarkDotNet v0.13.12, UnionTech OS Desktop 20 E
ZHAOXIN KaiXian KX-U6780A2.7GHz (Max: 2.70GHz), 1 CPU, 8 logical and 8 physical cores
.NET SDK 8.0.204
  [Host]     : .NET 8.0.4 (8.0.424.16909), X64 RyuJIT AVX
  Job-SBDPDU : .NET 8.0.4 (8.0.424.16909), X64 RyuJIT AVX

RunStrategy=Throughput  

</code></pre>
<table>
<thead>
<tr>
<th>Method</th>
<th>source</th>
<th>dest</th>
<th style="text-align: right">Mean</th>
<th style="text-align: right">Error</th>
<th style="text-align: right">StdDev</th>
<th style="text-align: right">Median</th>
<th style="text-align: right">Ratio</th>
<th style="text-align: right">RatioSD</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>CopyByFor</strong></td>
<td><strong>Int32[10000]</strong></td>
<td><strong>Int32[10000]</strong></td>
<td style="text-align: right"><strong>14.814 us</strong></td>
<td style="text-align: right"><strong>0.1734 us</strong></td>
<td style="text-align: right"><strong>0.1537 us</strong></td>
<td style="text-align: right"><strong>14.785 us</strong></td>
<td style="text-align: right"><strong>1.00</strong></td>
<td style="text-align: right"><strong>0.00</strong></td>
</tr>
<tr>
<td>Memcpy</td>
<td>Int32[10000]</td>
<td>Int32[10000]</td>
<td style="text-align: right">15.329 us</td>
<td style="text-align: right">0.2950 us</td>
<td style="text-align: right">0.5167 us</td>
<td style="text-align: right">15.313 us</td>
<td style="text-align: right">1.04</td>
<td style="text-align: right">0.04</td>
</tr>
<tr>
<td>CopyBlockUnaligned</td>
<td>Int32[10000]</td>
<td>Int32[10000]</td>
<td style="text-align: right">13.125 us</td>
<td style="text-align: right">0.5590 us</td>
<td style="text-align: right">1.6482 us</td>
<td style="text-align: right">13.188 us</td>
<td style="text-align: right">0.94</td>
<td style="text-align: right">0.09</td>
</tr>
<tr>
<td><strong>CopyByFor</strong></td>
<td><strong>Int32[1000]</strong></td>
<td><strong>Int32[1000]</strong></td>
<td style="text-align: right"><strong>1.127 us</strong></td>
<td style="text-align: right"><strong>0.0226 us</strong></td>
<td style="text-align: right"><strong>0.0211 us</strong></td>
<td style="text-align: right"><strong>1.127 us</strong></td>
<td style="text-align: right"><strong>0.08</strong></td>
<td style="text-align: right"><strong>0.00</strong></td>
</tr>
<tr>
<td>Memcpy</td>
<td>Int32[1000]</td>
<td>Int32[1000]</td>
<td style="text-align: right">2.152 us</td>
<td style="text-align: right">0.0571 us</td>
<td style="text-align: right">0.1675 us</td>
<td style="text-align: right">2.197 us</td>
<td style="text-align: right">0.13</td>
<td style="text-align: right">0.02</td>
</tr>
<tr>
<td>CopyBlockUnaligned</td>
<td>Int32[1000]</td>
<td>Int32[1000]</td>
<td style="text-align: right">2.297 us</td>
<td style="text-align: right">0.0453 us</td>
<td style="text-align: right">0.0863 us</td>
<td style="text-align: right">2.279 us</td>
<td style="text-align: right">0.16</td>
<td style="text-align: right">0.01</td>
</tr>
</tbody>
</table>
<h4 id="数组较大-1">数组较大</h4>
<pre><code>
BenchmarkDotNet v0.13.12, UnionTech OS Desktop 20 E
ZHAOXIN KaiXian KX-U6780A2.7GHz (Max: 2.70GHz), 1 CPU, 8 logical and 8 physical cores
.NET SDK 8.0.204
  [Host]     : .NET 8.0.4 (8.0.424.16909), X64 RyuJIT AVX
  Job-KKBWNV : .NET 8.0.4 (8.0.424.16909), X64 RyuJIT AVX

RunStrategy=Throughput  

</code></pre>
<table>
<thead>
<tr>
<th>Method</th>
<th>source</th>
<th>dest</th>
<th style="text-align: right">Mean</th>
<th style="text-align: right">Error</th>
<th style="text-align: right">StdDev</th>
<th style="text-align: right">Median</th>
<th style="text-align: right">Ratio</th>
<th style="text-align: right">RatioSD</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>CopyByFor</strong></td>
<td><strong>Int32[100000000]</strong></td>
<td><strong>Int32[100000000]</strong></td>
<td style="text-align: right"><strong>334,741.708 μs</strong></td>
<td style="text-align: right"><strong>7,661.2780 μs</strong></td>
<td style="text-align: right"><strong>22,469.2022 μs</strong></td>
<td style="text-align: right"><strong>332,150.996 μs</strong></td>
<td style="text-align: right"><strong>1.000</strong></td>
<td style="text-align: right"><strong>0.00</strong></td>
</tr>
<tr>
<td>Memcpy</td>
<td>Int32[100000000]</td>
<td>Int32[100000000]</td>
<td style="text-align: right">164,233.004 μs</td>
<td style="text-align: right">3,256.7894 μs</td>
<td style="text-align: right">8,406.8134 μs</td>
<td style="text-align: right">161,660.880 μs</td>
<td style="text-align: right">0.493</td>
<td style="text-align: right">0.04</td>
</tr>
<tr>
<td>CopyBlockUnaligned</td>
<td>Int32[100000000]</td>
<td>Int32[100000000]</td>
<td style="text-align: right">164,128.312 μs</td>
<td style="text-align: right">3,671.9104 μs</td>
<td style="text-align: right">10,826.7108 μs</td>
<td style="text-align: right">162,440.250 μs</td>
<td style="text-align: right">0.492</td>
<td style="text-align: right">0.05</td>
</tr>
<tr>
<td><strong>CopyByFor</strong></td>
<td><strong>Int32[10000000]</strong></td>
<td><strong>Int32[10000000]</strong></td>
<td style="text-align: right"><strong>33,404.753 μs</strong></td>
<td style="text-align: right"><strong>663.0404 μs</strong></td>
<td style="text-align: right"><strong>1,687.6494 μs</strong></td>
<td style="text-align: right"><strong>32,963.932 μs</strong></td>
<td style="text-align: right"><strong>0.100</strong></td>
<td style="text-align: right"><strong>0.01</strong></td>
</tr>
<tr>
<td>Memcpy</td>
<td>Int32[10000000]</td>
<td>Int32[10000000]</td>
<td style="text-align: right">23,405.518 μs</td>
<td style="text-align: right">1,142.2886 μs</td>
<td style="text-align: right">3,350.1346 μs</td>
<td style="text-align: right">24,879.320 μs</td>
<td style="text-align: right">0.070</td>
<td style="text-align: right">0.01</td>
</tr>
<tr>
<td>CopyBlockUnaligned</td>
<td>Int32[10000000]</td>
<td>Int32[10000000]</td>
<td style="text-align: right">24,981.451 μs</td>
<td style="text-align: right">498.7301 μs</td>
<td style="text-align: right">899.3133 μs</td>
<td style="text-align: right">24,921.681 μs</td>
<td style="text-align: right">0.075</td>
<td style="text-align: right">0.00</td>
</tr>
<tr>
<td><strong>CopyByFor</strong></td>
<td><strong>Int32[1000000]</strong></td>
<td><strong>Int32[1000000]</strong></td>
<td style="text-align: right"><strong>5,036.027 μs</strong></td>
<td style="text-align: right"><strong>100.2153 μs</strong></td>
<td style="text-align: right"><strong>195.4623 μs</strong></td>
<td style="text-align: right"><strong>5,014.961 μs</strong></td>
<td style="text-align: right"><strong>0.015</strong></td>
<td style="text-align: right"><strong>0.00</strong></td>
</tr>
<tr>
<td>Memcpy</td>
<td>Int32[1000000]</td>
<td>Int32[1000000]</td>
<td style="text-align: right">2,585.947 μs</td>
<td style="text-align: right">51.0945 μs</td>
<td style="text-align: right">106.6533 μs</td>
<td style="text-align: right">2,601.145 μs</td>
<td style="text-align: right">0.008</td>
<td style="text-align: right">0.00</td>
</tr>
<tr>
<td>CopyBlockUnaligned</td>
<td>Int32[1000000]</td>
<td>Int32[1000000]</td>
<td style="text-align: right">2,529.769 μs</td>
<td style="text-align: right">50.4126 μs</td>
<td style="text-align: right">98.3259 μs</td>
<td style="text-align: right">2,516.467 μs</td>
<td style="text-align: right">0.008</td>
<td style="text-align: right">0.00</td>
</tr>
<tr>
<td><strong>CopyByFor</strong></td>
<td><strong>Int32[10000]</strong></td>
<td><strong>Int32[10000]</strong></td>
<td style="text-align: right"><strong>13.663 μs</strong></td>
<td style="text-align: right"><strong>0.2509 μs</strong></td>
<td style="text-align: right"><strong>0.2224 μs</strong></td>
<td style="text-align: right"><strong>13.680 μs</strong></td>
<td style="text-align: right"><strong>0.000</strong></td>
<td style="text-align: right"><strong>0.00</strong></td>
</tr>
<tr>
<td>Memcpy</td>
<td>Int32[10000]</td>
<td>Int32[10000]</td>
<td style="text-align: right">10.112 μs</td>
<td style="text-align: right">0.1976 μs</td>
<td style="text-align: right">0.2957 μs</td>
<td style="text-align: right">10.131 μs</td>
<td style="text-align: right">0.000</td>
<td style="text-align: right">0.00</td>
</tr>
<tr>
<td>CopyBlockUnaligned</td>
<td>Int32[10000]</td>
<td>Int32[10000]</td>
<td style="text-align: right">10.010 μs</td>
<td style="text-align: right">0.1742 μs</td>
<td style="text-align: right">0.1630 μs</td>
<td style="text-align: right">9.964 μs</td>
<td style="text-align: right">0.000</td>
<td style="text-align: right">0.00</td>
</tr>
<tr>
<td><strong>CopyByFor</strong></td>
<td><strong>Int32[1000]</strong></td>
<td><strong>Int32[1000]</strong></td>
<td style="text-align: right"><strong>1.088 μs</strong></td>
<td style="text-align: right"><strong>0.0058 μs</strong></td>
<td style="text-align: right"><strong>0.0045 μs</strong></td>
<td style="text-align: right"><strong>1.089 μs</strong></td>
<td style="text-align: right"><strong>0.000</strong></td>
<td style="text-align: right"><strong>0.00</strong></td>
</tr>
<tr>
<td>Memcpy</td>
<td>Int32[1000]</td>
<td>Int32[1000]</td>
<td style="text-align: right">1.358 μs</td>
<td style="text-align: right">0.0266 μs</td>
<td style="text-align: right">0.0364 μs</td>
<td style="text-align: right">1.355 μs</td>
<td style="text-align: right">0.000</td>
<td style="text-align: right">0.00</td>
</tr>
<tr>
<td>CopyBlockUnaligned</td>
<td>Int32[1000]</td>
<td>Int32[1000]</td>
<td style="text-align: right">1.349 μs</td>
<td style="text-align: right">0.0267 μs</td>
<td style="text-align: right">0.0461 μs</td>
<td style="text-align: right">1.334 μs</td>
<td style="text-align: right">0.000</td>
<td style="text-align: right">0.00</td>
</tr>
</tbody>
</table>
<h3 id="数据说明">数据说明</h3>
<p>通过数据对比 Intel 和 兆芯 以上测试数据，可以看到在 <code>Int32[10000]</code> 的测试数据集里面，轻松就可以看到 Intel 比 兆芯 快了 10 倍，如下图所示</p>

<p><img src="https://img2024.cnblogs.com/blog/1080237/202501/1080237-20250116090453074-35680083.jpg" alt="" loading="lazy"></p>
<p>在如下图的对比 Intel 和 兆芯 的对较大的数组进行拷贝的性能，可以看到 Intel 平台也的确能够比 兆芯 快出 10 倍的性能</p>

<p><img src="https://img2024.cnblogs.com/blog/1080237/202501/1080237-20250116090452653-252504170.jpg" alt="" loading="lazy"></p>
<p>具体的性能比较如下</p>

<p><img src="https://img2024.cnblogs.com/blog/1080237/202501/1080237-20250116090452714-1476998885.png" alt="" loading="lazy"></p>
<table>
<thead>
<tr>
<th>方法</th>
<th>数组长度</th>
<th>Intel</th>
<th>兆芯</th>
<th>Intel比兆芯</th>
<th>兆芯比Intel</th>
</tr>
</thead>
<tbody>
<tr>
<td>CopyByFor</td>
<td>Int32[100000000]</td>
<td>41,348,684.32</td>
<td>334,741,708.00</td>
<td>0.1235241481</td>
<td>8.095583052</td>
</tr>
<tr>
<td>Memcpy</td>
<td>Int32[100000000]</td>
<td>27,086,427.67</td>
<td>164,233,004.00</td>
<td>0.1649268235</td>
<td>6.063295094</td>
</tr>
<tr>
<td>CopyBlockUnaligned</td>
<td>Int32[100000000]</td>
<td>24,020,801.37</td>
<td>164,128,312.00</td>
<td>0.1463537953</td>
<td>6.832757553</td>
</tr>
<tr>
<td>CopyByFor</td>
<td>Int32[10000000]</td>
<td>3,800,486.40</td>
<td>33,404,753.00</td>
<td>0.1137708278</td>
<td>8.789599405</td>
</tr>
<tr>
<td>Memcpy</td>
<td>Int32[10000000]</td>
<td>2,313,413.90</td>
<td>23,405,518.00</td>
<td>0.0988405341</td>
<td>10.11730672</td>
</tr>
<tr>
<td>CopyBlockUnaligned</td>
<td>Int32[10000000]</td>
<td>2,005,075.29</td>
<td>24,981,451.00</td>
<td>0.0802625632</td>
<td>12.45910871</td>
</tr>
<tr>
<td>CopyByFor</td>
<td>Int32[1000000]</td>
<td>201,416.81</td>
<td>5,036,027.00</td>
<td>0.0399951807</td>
<td>25.00301241</td>
</tr>
<tr>
<td>Memcpy</td>
<td>Int32[1000000]</td>
<td>104,570.31</td>
<td>2,585,947.00</td>
<td>0.0404379169</td>
<td>24.72926589</td>
</tr>
<tr>
<td>CopyBlockUnaligned</td>
<td>Int32[1000000]</td>
<td>99,385.15</td>
<td>2,529,769.00</td>
<td>0.0392862550</td>
<td>25.45419512</td>
</tr>
<tr>
<td>CopyByFor</td>
<td>Int32[10000]</td>
<td>1,958.87</td>
<td>13,663.00</td>
<td>0.1433704165</td>
<td>6.974939634</td>
</tr>
<tr>
<td>Memcpy</td>
<td>Int32[10000]</td>
<td>624.06</td>
<td>10,112.00</td>
<td>0.0617147943</td>
<td>16.20357017</td>
</tr>
<tr>
<td>CopyBlockUnaligned</td>
<td>Int32[10000]</td>
<td>581.32</td>
<td>10,010.00</td>
<td>0.0580739261</td>
<td>17.21943164</td>
</tr>
<tr>
<td>CopyByFor</td>
<td>Int32[1000]</td>
<td>201.05</td>
<td>1,088.00</td>
<td>0.1847886029</td>
<td>5.411589157</td>
</tr>
<tr>
<td>Memcpy</td>
<td>Int32[1000]</td>
<td>32.12</td>
<td>1,358.00</td>
<td>0.0236524300</td>
<td>42.27895392</td>
</tr>
<tr>
<td>CopyBlockUnaligned</td>
<td>Int32[1000]</td>
<td>21.02</td>
<td>1,349.00</td>
<td>0.0155819125</td>
<td>64.17697431</td>
</tr>
</tbody>
</table>
<p>更具体的对 兆芯 的分析：在对较小的数组进行拷贝，使用 for 进行拷贝的速度比标准 C 的 memcpy 函数快，使用 for 循环进行拷贝与 dotnet 的 Unsafe.CopyBlockUnaligned 差不多。而在 Intel 平台下，无论是 标准 C 的 memcpy 还是 dotnet 的 Unsafe.CopyBlockUnaligned 都比 for 快几倍。这就意味着无论是 memcpy 还是 CopyBlockUnaligned 里面的指令优化，在 兆芯 下都是负优化</p>
<p>在更大的数据两情况下，可以看到 Intel 平台的 memcpy 和 CopyBlockUnaligned 对 for 循环的优化比率不断下跌，其数据情况如下</p>

<p><img src="https://img2024.cnblogs.com/blog/1080237/202501/1080237-20250116090452755-1746862264.jpg" alt="" loading="lazy"></p>
<table>
<thead>
<tr>
<th>数组长度</th>
<th>CopyByFor</th>
<th>Memcpy</th>
<th>CopyBlockUnaligned</th>
<th>CopyByFor与Memcpy比率</th>
<th>CopyByFor与CopyBlockUnaligned比率</th>
</tr>
</thead>
<tbody>
<tr>
<td>1000</td>
<td>201.05</td>
<td>32.12</td>
<td>21.02</td>
<td>6.259339975</td>
<td>9.564700285</td>
</tr>
<tr>
<td>10000</td>
<td>1,958.87</td>
<td>624.06</td>
<td>581.32</td>
<td>3.138912925</td>
<td>3.369693112</td>
</tr>
<tr>
<td>1000000</td>
<td>201,416.81</td>
<td>104,570.31</td>
<td>99,385.15</td>
<td>1.926137639</td>
<td>2.026628827</td>
</tr>
<tr>
<td>10000000</td>
<td>3,800,486.40</td>
<td>2,313,413.90</td>
<td>2,005,075.29</td>
<td>1.642804342</td>
<td>1.895433263</td>
</tr>
<tr>
<td>100000000</td>
<td>41,348,684.32</td>
<td>27,086,427.67</td>
<td>24,020,801.37</td>
<td>1.52654624</td>
<td>1.721369894</td>
</tr>
</tbody>
</table>
<p>我的猜测是随着数组长度增加，将逐渐超过了 Intel 的 CPU 的缓存，导致了比率的下降。但无论如何，使用 memcpy 和 CopyBlockUnaligned 在 Intel 下都有优化</p>
<p>这就是为什么在数组较大时，如在 100000000 长度时，相同的 Memcpy 方法下兆芯比Intel的耗时比例为 6.06 倍。相较于在 1000 长度时，兆芯比Intel的耗时比例为 42.27 倍小了非常多。如此可以看到其实也不能全怪兆芯，只是因为 Intel 的优化比较强，导致看起来差异比较大</p>
<p>在数组长度比较大的时候，在 兆芯 上也是 memcpy 会比 for 循环拷贝更快。且 memcpy 和 CopyBlockUnaligned 的性能也是基本持平的。也就是说在数据量比较大的时候，使用 dotnet 自带的 <code>Unsafe.CopyBlockUnaligned</code> 方法还是很有意义的，既速度快又相对安全。在数据量比较小的时候，使用 CopyBlockUnaligned 依然不会有较大的性能损失</p>

<h3 id="飞腾腾锐-phytium-d2000-1">飞腾腾锐 Phytium D2000</h3>
<h4 id="数组较大-2">数组较大</h4>
<p>BenchmarkDotNet v0.13.12, Kylin V10 SP1<br>
Phytium,D2000/8 E8C, 8 logical cores<br>
.NET SDK 8.0.204<br>
[Host]     : .NET 8.0.4 (8.0.424.16909), Arm64 RyuJIT AdvSIMD<br>
Job-QEJWOH : .NET 8.0.4 (8.0.424.16909), Arm64 RyuJIT AdvSIMD</p>
<p>RunStrategy=Throughput</p>
<table>
<thead>
<tr>
<th>Method</th>
<th>source</th>
<th>dest</th>
<th style="text-align: right">Mean</th>
<th style="text-align: right">Error</th>
<th style="text-align: right">StdDev</th>
<th style="text-align: right">Ratio</th>
</tr>
</thead>
<tbody>
<tr>
<td>CopyByFor</td>
<td>Int32[100000000]</td>
<td>Int32[100000000]</td>
<td style="text-align: right">161,848,301.3 ns</td>
<td style="text-align: right">275,376.77 ns</td>
<td style="text-align: right">229,952.07 ns</td>
<td style="text-align: right">1.000</td>
</tr>
<tr>
<td>Memcpy</td>
<td>Int32[100000000]</td>
<td>Int32[100000000]</td>
<td style="text-align: right">139,057,784.0 ns</td>
<td style="text-align: right">493,850.72 ns</td>
<td style="text-align: right">437,785.80 ns</td>
<td style="text-align: right">0.859</td>
</tr>
<tr>
<td>CopyBlockUnaligned</td>
<td>Int32[100000000]</td>
<td>Int32[100000000]</td>
<td style="text-align: right">137,746,376.7 ns</td>
<td style="text-align: right">740,242.45 ns</td>
<td style="text-align: right">618,135.97 ns</td>
<td style="text-align: right">0.851</td>
</tr>
<tr>
<td>CopyByFor</td>
<td>Int32[10000000]</td>
<td>Int32[10000000]</td>
<td style="text-align: right">15,514,977.7 ns</td>
<td style="text-align: right">33,694.59 ns</td>
<td style="text-align: right">29,869.38 ns</td>
<td style="text-align: right">0.096</td>
</tr>
<tr>
<td>Memcpy</td>
<td>Int32[10000000]</td>
<td>Int32[10000000]</td>
<td style="text-align: right">14,492,865.7 ns</td>
<td style="text-align: right">40,272.32 ns</td>
<td style="text-align: right">35,700.37 ns</td>
<td style="text-align: right">0.090</td>
</tr>
<tr>
<td>CopyBlockUnaligned</td>
<td>Int32[10000000]</td>
<td>Int32[10000000]</td>
<td style="text-align: right">14,497,063.8 ns</td>
<td style="text-align: right">38,595.84 ns</td>
<td style="text-align: right">30,133.09 ns</td>
<td style="text-align: right">0.090</td>
</tr>
<tr>
<td>CopyByFor</td>
<td>Int32[1000000]</td>
<td>Int32[1000000]</td>
<td style="text-align: right">1,240,798.0 ns</td>
<td style="text-align: right">15,140.32 ns</td>
<td style="text-align: right">14,162.26 ns</td>
<td style="text-align: right">0.008</td>
</tr>
<tr>
<td>Memcpy</td>
<td>Int32[1000000]</td>
<td>Int32[1000000]</td>
<td style="text-align: right">1,046,522.7 ns</td>
<td style="text-align: right">20,519.03 ns</td>
<td style="text-align: right">19,193.52 ns</td>
<td style="text-align: right">0.006</td>
</tr>
<tr>
<td>CopyBlockUnaligned</td>
<td>Int32[1000000]</td>
<td>Int32[1000000]</td>
<td style="text-align: right">1,032,201.1 ns</td>
<td style="text-align: right">19,159.44 ns</td>
<td style="text-align: right">17,921.75 ns</td>
<td style="text-align: right">0.006</td>
</tr>
<tr>
<td>CopyByFor</td>
<td>Int32[10000]</td>
<td>Int32[10000]</td>
<td style="text-align: right">8,930.6 ns</td>
<td style="text-align: right">9.04 ns</td>
<td style="text-align: right">8.02 ns</td>
<td style="text-align: right">0.000</td>
</tr>
<tr>
<td>Memcpy</td>
<td>Int32[10000]</td>
<td>Int32[10000]</td>
<td style="text-align: right">3,058.1 ns</td>
<td style="text-align: right">12.31 ns</td>
<td style="text-align: right">11.51 ns</td>
<td style="text-align: right">0.000</td>
</tr>
<tr>
<td>CopyBlockUnaligned</td>
<td>Int32[10000]</td>
<td>Int32[10000]</td>
<td style="text-align: right">3,199.1 ns</td>
<td style="text-align: right">16.51 ns</td>
<td style="text-align: right">12.89 ns</td>
<td style="text-align: right">0.000</td>
</tr>
<tr>
<td>CopyByFor</td>
<td>Int32[1000]</td>
<td>Int32[1000]</td>
<td style="text-align: right">886.8 ns</td>
<td style="text-align: right">0.66 ns</td>
<td style="text-align: right">0.59 ns</td>
<td style="text-align: right">0.000</td>
</tr>
<tr>
<td>Memcpy</td>
<td>Int32[1000]</td>
<td>Int32[1000]</td>
<td style="text-align: right">250.3 ns</td>
<td style="text-align: right">0.36 ns</td>
<td style="text-align: right">0.30 ns</td>
<td style="text-align: right">0.000</td>
</tr>
<tr>
<td>CopyBlockUnaligned</td>
<td>Int32[1000]</td>
<td>Int32[1000]</td>
<td style="text-align: right">235.8 ns</td>
<td style="text-align: right">0.29 ns</td>
<td style="text-align: right">0.25 ns</td>
<td style="text-align: right">0.000</td>
</tr>
</tbody>
</table>
<h4 id="数据说明和对比">数据说明和对比</h4>
<p>飞腾腾锐 Phytium,D2000/8 E8C, 8 logical cores 的跑分不高，与 Intel 最大差距在数组拷贝上能拉到 10 倍，均值性能差距是 4 倍左右。但在我的测试里面飞腾腾锐的性能比兆芯快，大概均值性能差距是 2 倍左右，如以下对比</p>

<p><img src="https://img2024.cnblogs.com/blog/1080237/202501/1080237-20250116090453141-1802578351.jpg" alt="" loading="lazy"></p>
<table>
<thead>
<tr>
<th>方法</th>
<th>数组长度</th>
<th>Intel</th>
<th>兆芯</th>
<th>飞腾腾锐</th>
<th>Intel比兆芯</th>
<th>兆芯比Intel</th>
<th>飞腾比Intel</th>
<th>兆芯比飞腾</th>
</tr>
</thead>
<tbody>
<tr>
<td>CopyByFor</td>
<td>Int32[100000000]</td>
<td>41,348,684.32</td>
<td>334,741,708.00</td>
<td>161,848,301.30</td>
<td>0.1235241481</td>
<td>8.0955830519</td>
<td>3.9142309837</td>
<td>2.0682435670</td>
</tr>
<tr>
<td>Memcpy</td>
<td>Int32[100000000]</td>
<td>27,086,427.67</td>
<td>164,233,004.00</td>
<td>139,057,784.00</td>
<td>0.1649268235</td>
<td>6.0632950938</td>
<td>5.1338547000</td>
<td>1.1810414295</td>
</tr>
<tr>
<td>CopyBlockUnaligned</td>
<td>Int32[100000000]</td>
<td>24,020,801.37</td>
<td>164,128,312.00</td>
<td>137,746,376.70</td>
<td>0.1463537953</td>
<td>6.8327575534</td>
<td>5.7344621679</td>
<td>1.1915254392</td>
</tr>
<tr>
<td>CopyByFor</td>
<td>Int32[10000000]</td>
<td>3,800,486.40</td>
<td>33,404,753.00</td>
<td>15,514,977.70</td>
<td>0.1137708278</td>
<td>8.7895994050</td>
<td>4.0823663255</td>
<td>2.1530648413</td>
</tr>
<tr>
<td>Memcpy</td>
<td>Int32[10000000]</td>
<td>2,313,413.90</td>
<td>23,405,518.00</td>
<td>14,492,865.70</td>
<td>0.0988405341</td>
<td>10.1173067215</td>
<td>6.2647093544</td>
<td>1.6149682530</td>
</tr>
<tr>
<td>CopyBlockUnaligned</td>
<td>Int32[10000000]</td>
<td>2,005,075.29</td>
<td>24,981,451.00</td>
<td>14,497,063.80</td>
<td>0.0802625632</td>
<td>12.4591087051</td>
<td>7.2301842591</td>
<td>1.7232076333</td>
</tr>
<tr>
<td>CopyByFor</td>
<td>Int32[1000000]</td>
<td>201,416.81</td>
<td>5,036,027.00</td>
<td>1,240,798.00</td>
<td>0.0399951807</td>
<td>25.0030124099</td>
<td>6.1603497742</td>
<td>4.0587001269</td>
</tr>
<tr>
<td>Memcpy</td>
<td>Int32[1000000]</td>
<td>104,570.31</td>
<td>2,585,947.00</td>
<td>1,046,522.70</td>
<td>0.0404379169</td>
<td>24.7292658882</td>
<td>10.0078377888</td>
<td>2.4709898791</td>
</tr>
<tr>
<td>CopyBlockUnaligned</td>
<td>Int32[1000000]</td>
<td>99,385.15</td>
<td>2,529,769.00</td>
<td>1,032,201.10</td>
<td>0.0392862550</td>
<td>25.4541951187</td>
<td>10.3858685125</td>
<td>2.4508489673</td>
</tr>
<tr>
<td>CopyByFor</td>
<td>Int32[10000]</td>
<td>1,958.87</td>
<td>13,663.00</td>
<td>8,930.60</td>
<td>0.1433704165</td>
<td>6.9749396336</td>
<td>4.5590570074</td>
<td>1.5299084048</td>
</tr>
<tr>
<td>Memcpy</td>
<td>Int32[10000]</td>
<td>624.06</td>
<td>10,112.00</td>
<td>3,058.10</td>
<td>0.0617147943</td>
<td>16.2035701695</td>
<td>4.9003300965</td>
<td>3.3066282986</td>
</tr>
<tr>
<td>CopyBlockUnaligned</td>
<td>Int32[10000]</td>
<td>581.32</td>
<td>10,010.00</td>
<td>3,199.10</td>
<td>0.0580739261</td>
<td>17.2194316383</td>
<td>5.5031652102</td>
<td>3.1290050327</td>
</tr>
<tr>
<td>CopyByFor</td>
<td>Int32[1000]</td>
<td>201.05</td>
<td>1,088.00</td>
<td>886.80</td>
<td>0.1847886029</td>
<td>5.4115891569</td>
<td>4.4108430739</td>
<td>1.2268831755</td>
</tr>
<tr>
<td>Memcpy</td>
<td>Int32[1000]</td>
<td>32.12</td>
<td>1,358.00</td>
<td>250.30</td>
<td>0.0236524300</td>
<td>42.2789539228</td>
<td>7.7926525529</td>
<td>5.4254894127</td>
</tr>
<tr>
<td>CopyBlockUnaligned</td>
<td>Int32[1000]</td>
<td>21.02</td>
<td>1,349.00</td>
<td>235.80</td>
<td>0.0155819125</td>
<td>64.1769743102</td>
<td>11.2178877260</td>
<td>5.7209499576</td>
</tr>
</tbody>
</table>
<h2 id="点的几何计算">点的几何计算</h2>
<h3 id="代码和性能测试的设计">代码和性能测试的设计</h3>
<p>以下代码用于测试密集的计算过程中的各个设备之间的性能差异，其性能测试核心代码如下</p>
<pre><code class="language-csharp">    [Benchmark()]
    [ArgumentsSource(nameof(GetArgument))]
    public void Test(Point[] source, double[] result)
    {
        for (int i = 1; i &lt; source.Length - 1; i++)
        {
            var a = source[i - 1];
            var b = source[i];
            var c = source[i + 1];

            var abx = b.X - a.X;
            var aby = b.Y - a.Y;

            var acx = c.X - a.X;
            var acy = c.Y - a.Y;

            var cross = abx * acy - aby * acx;
            var abs = Math.Abs(cross);

            var acl = Math.Sqrt(acx * acx + acy * acy);

            result[i] = abs / acl;
        }
    }
</code></pre>
<p>以上性能测试中传入的 <code>Point[] source</code> 为输入数据，而 <code>double[] result</code> 为存放的输出数据，输出数据只是为了让计算结果有的存放，让 JIT 开森而已</p>
<p>此性能测试中对代码逻辑的内存访问预测，即 CPU 缓存命中以及浮点计算要求较高。经过实际测试发现 Intel 在这方面的优化还是十分好的，但兆芯则有很大的优化空间</p>
<h3 id="英特尔-13th-gen-intel-core-i7-13700k-2">英特尔 13th Gen Intel Core i7-13700K</h3>
<pre><code>BenchmarkDotNet v0.13.12, Windows 11 (10.0.22631.3880/23H2/2023Update/SunValley3)
13th Gen Intel Core i7-13700K, 1 CPU, 24 logical and 16 physical cores
.NET SDK 9.0.100-preview.5.24307.3
  [Host]     : .NET 8.0.6 (8.0.624.26715), X64 RyuJIT AVX2
  Job-UGRNFG : .NET 8.0.6 (8.0.624.26715), X64 RyuJIT AVX2

RunStrategy=Throughput  
</code></pre>
<table>
<thead>
<tr>
<th>Method</th>
<th>source</th>
<th>result</th>
<th style="text-align: right">Mean</th>
<th style="text-align: right">Error</th>
<th style="text-align: right">StdDev</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>万点</strong></td>
<td><strong>Point[10000]</strong></td>
<td><strong>Double[10000]</strong></td>
<td style="text-align: right"><strong>19.622 μs</strong></td>
<td style="text-align: right"><strong>0.0914 μs</strong></td>
<td style="text-align: right"><strong>0.0810 μs</strong></td>
</tr>
<tr>
<td><strong>千点</strong></td>
<td><strong>Point[1000]</strong></td>
<td><strong>Double[1000]</strong></td>
<td style="text-align: right"><strong>1.974 μs</strong></td>
<td style="text-align: right"><strong>0.0108 μs</strong></td>
<td style="text-align: right"><strong>0.0101 μs</strong></td>
</tr>
</tbody>
</table>
<h3 id="兆芯-zhaoxin-kaixian-kx-u6780a-2">兆芯 ZHAOXIN KaiXian KX-U6780A</h3>
<pre><code>BenchmarkDotNet v0.13.12, UnionTech OS Desktop 20 E
ZHAOXIN KaiXian KX-U6780A2.7GHz (Max: 2.70GHz), 1 CPU, 8 logical and 8 physical cores
.NET SDK 8.0.204
  [Host]     : .NET 8.0.4 (8.0.424.16909), X64 RyuJIT AVX
  Job-BBRJWB : .NET 8.0.4 (8.0.424.16909), X64 RyuJIT AVX

RunStrategy=Throughput
</code></pre>
<table>
<thead>
<tr>
<th>Method</th>
<th>source</th>
<th>result</th>
<th style="text-align: right">Mean</th>
<th style="text-align: right">Error</th>
<th style="text-align: right">StdDev</th>
<th style="text-align: right">Median</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>万点</strong></td>
<td>Point[10000]</td>
<td>Double[10000]</td>
<td style="text-align: right">475.13 us</td>
<td style="text-align: right">8.295 us</td>
<td style="text-align: right">15.782 us</td>
<td style="text-align: right">467.05 us</td>
</tr>
<tr>
<td><strong>千点</strong></td>
<td>Point[1000]</td>
<td>Double[1000]</td>
<td style="text-align: right">50.89 us</td>
<td style="text-align: right">1.230 us</td>
<td style="text-align: right">3.626 us</td>
<td style="text-align: right">50.81 us</td>
</tr>
</tbody>
</table>
<h3 id="飞腾腾锐-phytium-d2000-2">飞腾腾锐 Phytium D2000</h3>
<p>BenchmarkDotNet v0.13.12, Kylin V10 SP1<br>
Phytium,D2000/8 E8C, 8 logical cores<br>
.NET SDK 8.0.204<br>
[Host]     : .NET 8.0.4 (8.0.424.16909), Arm64 RyuJIT AdvSIMD<br>
Job-JCFXCW : .NET 8.0.4 (8.0.424.16909), Arm64 RyuJIT AdvSIMD</p>
<p>RunStrategy=Throughput</p>
<table>
<thead>
<tr>
<th>Method</th>
<th>source</th>
<th>result</th>
<th style="text-align: right">Mean</th>
<th style="text-align: right">Error</th>
<th style="text-align: right">StdDev</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>万点</strong></td>
<td>Point[10000]</td>
<td>Double[10000]</td>
<td style="text-align: right">147.96 us</td>
<td style="text-align: right">0.015 us</td>
<td style="text-align: right">0.014 us</td>
</tr>
<tr>
<td><strong>千点</strong></td>
<td>Point[1000]</td>
<td>Double[1000]</td>
<td style="text-align: right">14.76 us</td>
<td style="text-align: right">0.004 us</td>
<td style="text-align: right">0.003 us</td>
</tr>
</tbody>
</table>
<h4 id="数据说明和对比-1">数据说明和对比</h4>
<p>性能对比如下表，可以看到兆芯比Intel能慢上25倍左右，兆芯比飞腾慢上3倍左右</p>
<table>
<thead>
<tr>
<th>Method</th>
<th>source</th>
<th>result</th>
<th>Intel</th>
<th>兆芯</th>
<th>飞腾腾锐</th>
<th>Intel比兆芯</th>
<th>兆芯比Intel</th>
<th>飞腾比Intel</th>
<th>兆芯比飞腾</th>
</tr>
</thead>
<tbody>
<tr>
<td>万点</td>
<td>Point[10000]</td>
<td>Double[10000]</td>
<td>19.622</td>
<td>475.13</td>
<td>147.96</td>
<td>0.041298171</td>
<td>24.21414739</td>
<td>7.540515748</td>
<td>3.211205731</td>
</tr>
<tr>
<td>千点</td>
<td>Point[1000]</td>
<td>Double[1000]</td>
<td>1.974</td>
<td>50.89</td>
<td>14.76</td>
<td>0.038789546</td>
<td>25.78014184</td>
<td>7.477203647</td>
<td>3.447831978</td>
</tr>
</tbody>
</table>

<p><img src="https://img2024.cnblogs.com/blog/1080237/202501/1080237-20250116090452780-174883412.jpg" alt="" loading="lazy"></p>
<p>通过上图可以看到，在进行基础的密集计算中，似乎兆芯做了负面优化</p>
<h2 id="代码">代码</h2>
<p>本文代码放在 <a href="https://github.com/lindexi/lindexi_gd/tree/1e20b4c8ef64b17604e1ee92f41f7ac25ad08d26/BulowukaileFeanayjairwo" target="_blank" rel="noopener nofollow">github</a> 和 <a href="https://gitee.com/lindexi/lindexi_gd/tree/1e20b4c8ef64b17604e1ee92f41f7ac25ad08d26/BulowukaileFeanayjairwo" target="_blank" rel="noopener nofollow">gitee</a> 上，可以使用如下命令行拉取代码</p>
<p>先创建一个空文件夹，接着使用命令行 cd 命令进入此空文件夹，在命令行里面输入以下代码，即可获取到本文的代码</p>
<pre><code>git init
git remote add origin https://gitee.com/lindexi/lindexi_gd.git
git pull origin 1e20b4c8ef64b17604e1ee92f41f7ac25ad08d26
</code></pre>
<p>以上使用的是 gitee 的源，如果 gitee 不能访问，请替换为 github 的源。请在命令行继续输入以下代码，将 gitee 源换成 github 源进行拉取代码</p>
<pre><code>git remote remove origin
git remote add origin https://github.com/lindexi/lindexi_gd.git
git pull origin 1e20b4c8ef64b17604e1ee92f41f7ac25ad08d26
</code></pre>
<p>获取代码之后，进入 BulowukaileFeanayjairwo 文件夹，即可获取到源代码</p>
<h2 id="特别感谢">特别感谢</h2>
<p>特别感谢 <a href="https://github.com/mjebrahimi/Performance-Wars-Benchmarking-CSharp" target="_blank" rel="noopener nofollow">https://github.com/mjebrahimi/Performance-Wars-Benchmarking-CSharp</a> 提供的代码</p>
<h2 id="参考文档">参考文档</h2>
<p><a href="https://blog.lindexi.com/post/C-%E6%A0%87%E5%87%86%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95.html" target="_blank" rel="noopener nofollow">C# 标准性能测试</a></p>
<p><a href="https://blog.lindexi.com/post/C-%E6%A0%87%E5%87%86%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95.html" target="_blank" rel="noopener nofollow">C# 标准性能测试高级用法</a></p>
<p><a href="https://blog.lindexi.com/post/dotnet-6-%E6%95%B0%E7%BB%84%E6%8B%B7%E8%B4%9D%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94.html" target="_blank" rel="noopener nofollow">dotnet 6 数组拷贝性能对比</a></p>
<h3 id="跑分系列">跑分系列</h3>
<h4 id="arm-phytiumd20008-e8c-8-core-2300-mhz">ARM Phytium,D2000/8 E8C 8 Core 2300 MHz</h4>
<p>D2000高效能桌面CPU 跑分：<a href="https://www.cpubenchmark.net/cpu.php?cpu=ARM+Phytium%2CD2000%2F8+E8C+8+Core+2300+MHz&amp;id=4862" target="_blank" rel="noopener nofollow">https://www.cpubenchmark.net/cpu.php?cpu=ARM+Phytium%2CD2000%2F8+E8C+8+Core+2300+MHz&amp;id=4862</a></p>
<p>和 Intel i7-13700K 对比：<a href="https://www.cpubenchmark.net/compare/4862vs5060/ARM-Phytium,D20008-E8C-8-Core-2300-MHz-vs-Intel-i7-13700K" target="_blank" rel="noopener nofollow">https://www.cpubenchmark.net/compare/4862vs5060/ARM-Phytium,D20008-E8C-8-Core-2300-MHz-vs-Intel-i7-13700K</a></p>
<p>另一个和 Intel i7-13700K 对比：<a href="https://openbenchmarking.org/vs/Processor/Phytium+D2000,Intel+Core+i7-13700K" target="_blank" rel="noopener nofollow">https://openbenchmarking.org/vs/Processor/Phytium+D2000,Intel+Core+i7-13700K</a></p>

</div>
<div id="MySignature" role="contentinfo">
    <p>博客园博客只做备份，博客发布就不再更新，如果想看最新博客，请访问 https://blog.lindexi.com/</p>

<p>如图片看不见，请在浏览器开启不安全http内容兼容</p>

<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/"><img alt="知识共享许可协议" style="border-width: 0" src="https://licensebuttons.net/l/by-nc-sa/4.0/88x31.png"></a><br>本作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。欢迎转载、使用、重新发布，但务必保留文章署名[林德熙](https://www.cnblogs.com/lindexi)(包含链接:https://www.cnblogs.com/lindexi )，不得用于商业目的，基于本文修改后的作品务必以相同的许可发布。如有任何疑问，请与我[联系](mailto:lindexi_gd@163.com)。
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="6.30235607440625" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-16 09:05">2025-01-16 07:16</span>&nbsp;
<a href="https://www.cnblogs.com/lindexi">lindexi</a>&nbsp;
阅读(<span id="post_view_count">188</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18674065" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18674065);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18674065', targetLink: 'https://www.cnblogs.com/lindexi/p/18674065', title: 'dotnet C# 在不同的机器 CPU 型号上的基准性能测试' })">举报</a>
</div>
        