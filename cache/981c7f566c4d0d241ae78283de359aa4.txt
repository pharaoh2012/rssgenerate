
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/kklldog/p/18654126/di-in-development" title="发布于 2025-01-05 23:01">
    <span role="heading" aria-level="2">在 Development 环境下依赖注入的行为可能有所不同</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="奇怪的问题">奇怪的问题</h2>
<p>本周被一个奇怪的问题困扰了一天。事情的起因是这样的：在某个 PR 合并后，我拉了最新代码，但是在我本地F5调试始终报错。示例代码如下：</p>
<pre><code>    public interface Interface1
    {
        void Method1();
    }

    public class MockSerivce
    {
        public MockSerivce(Interface1 interface1)
        {

        }
    }

builder.Services.AddSingleton&lt;MockSerivce&gt;();

</code></pre>
<p>报的错误呢也显而易见：</p>
<pre><code>Unable to resolve service for type 'DevelopmentTest.Interface1' while attempting to activate 'DevelopmentTest.MockSerivce'
</code></pre>
<p>我们没有注册 <code>Interface1</code> 到 DI 容器里，那自然实例化 MockSerivce 的时候就找不到依赖了。<br>
但是奇怪的是：我其他同事们都没有这个问题，他们在本地调试的时候都好好的，并不会报错。并且在这个分支编译后的代码在开发服务器上运行的都很完美。<br>
这个就有点冲击到我了，难道是我电脑有问题，VS 有问题，还是我人品有问题？</p>
<h2 id="寻找答案">寻找答案</h2>
<p>当然了代码是不会骗人的，造成以上问题一定不是我人品问题而是代码的问题。<br>
经过一番尝试，我发现这个问题跟系统运行在哪个环境有关系。只要我把 <code>launchSettings.json</code> 里的 <code>  ASPNETCORE_ENVIRONMENT</code> 从 <code>Development</code> 改成别的什么值，那么一切都运行正常了。正巧在我们组其他同事都维护一个自己的 appestings.username.json 然后运行在这个环境之下，也就是说他们都不运行在 <code>Development</code> 下。这就是为啥只有我会报错的原因了。<br>
事情到了这一步，那么我们很容易猜测： .NET DI 系统在 <code>Development</code> 下是有骚操作的。在 <code>Development</code> 下它会进行依赖分析，如果依赖关系有错误，那么直接会报错。但是在其他环境下就不会提交分析校验，只有在运行时真正尝试实例化对象的时候才会报错。<br>
当然靠猜测总是不太靠谱，干脆翻翻代码吧。很快就找到了：</p>
<pre><code>    internal static ServiceProviderOptions CreateDefaultServiceProviderOptions(HostBuilderContext context)
        {
            bool isDevelopment = context.HostingEnvironment.IsDevelopment();
            return new ServiceProviderOptions
            {
                ValidateScopes = isDevelopment,
                ValidateOnBuild = isDevelopment,
            };
        }
</code></pre>
<p>在 <code>HostingHostBuilderExtensions</code> 这个扩展类里很清楚的看到，只有在 <code>Development</code> 下 DefaultServiceProviderOptions 的 <code>ValidateScopes</code> 与 <code>ValidateOnBuild</code> 会被设置为 <code>True</code>。这就直接证明了上面的猜想。只有在 <code>Development</code> 下才会在启动的时候去校验依赖关系。</p>
<h2 id="强制校验">强制校验</h2>
<p>既然找到了答案，那么让我们来试一下：强制开启依赖关系的校验。</p>
<pre><code>var builder = WebApplication.CreateBuilder(args);

builder.Host.UseDefaultServiceProvider(op =&gt;
{
    op.ValidateOnBuild = true;
    op.ValidateScopes = true;
});
</code></pre>
<p>代码如上在 Host 上调用 <code>UseDefaultServiceProvider</code> 扩展方法，指定 <code>ValidateScopes</code> 与 <code>ValidateOnBuild</code> 都为 <code>True</code>。<br>
再次运行我们的项目，这个时候不管是在 <code>Development</code> 还是 <code>Production</code> 还是别的任何环境下，都会报错了。</p>
<pre><code>Unable to resolve service for type 'DevelopmentTest.Interface1' while attempting to activate 'DevelopmentTest.MockSerivce'
</code></pre>
<h2 id="总结">总结</h2>
<p>通过以上我们可以发现 .NET 的 DI 系统，在 <code>Development</code> 环境下跟其他环境的行为是不同的。在 <code>Development</code> 下会提交进行依赖关系的校验，如果有问题会提前报错。所以我们调试的时候请尽量选择在 <code>Development</code> 下进行或者手动强制开启校验。这个问题很容易被忽视，至少我没在其他博文里见有人提到过。其实在微软的官方文档上是提到了，但也确实就是提了一嘴而已。<br>
关于这个话题其实还没完，还有一个更有意思的问题：<code>Captive dependency</code> 可以聊一下。但是今天太晚了，改天吧。<br>
参考：<a href="https://learn.microsoft.com/en-us/dotnet/core/extensions/dependency-injection#scope-validation" target="_blank" rel="noopener nofollow">https://learn.microsoft.com/en-us/dotnet/core/extensions/dependency-injection#scope-validation</a></p>

</div>
<div id="MySignature" role="contentinfo">
    <div id="AllanboltSignature">        
<p id="PSignature" style="border-top: #e0e0e0 1px dashed; border-right: #e0e0e0 1px dashed; border-bottom: #e0e0e0 1px dashed; border-left: #e0e0e0 1px dashed; padding-top: 10px; padding-right: 10px; padding-bottom: 10px; padding-left: 10px; font-family: 微软雅黑; font-size: 11px">       
QQ群：1022985150 VX：kklldog 一起探讨学习.NET技术
<br>
作者：<a href="http://www.cnblogs.com/kklldog" target="_blank">Agile.Zhou(kklldog)</a>            
<br> 
出处：<a href="http://www.cnblogs.com/kklldog/" target="_blank">http://www.cnblogs.com/kklldog/</a>
<br>本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文连接，否则保留追究法律责任的权利。
 </p>  
</div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.6396791196909722" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-05 23:01">2025-01-05 23:01</span>&nbsp;
<a href="https://www.cnblogs.com/kklldog">Agile.Zhou</a>&nbsp;
阅读(<span id="post_view_count">66</span>)&nbsp;
评论(<span id="post_comment_count">1</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18654126" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18654126);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18654126', targetLink: 'https://www.cnblogs.com/kklldog/p/18654126/di-in-development', title: '在 Development 环境下依赖注入的行为可能有所不同' })">举报</a>
</div>
        