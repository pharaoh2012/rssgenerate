
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/fanfanfanlichun/p/18683668" title="发布于 2025-01-21 16:44">
    <span role="heading" aria-level="2">微信公众号-脚本简单实现，自动新建草稿并发布草稿文章，代码开源</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h1>介绍</h1>
<p>本来想写一个自动化发布微信公众号的小绿书的脚本。但是微信公众号官网没有小绿书的接口。</p>
<p>想着算了吧，写都写了，那就写一个微信普通文章的脚本吧。</p>
<p>写完了 就想着把脚本分享出来，给大家一起交流下。</p>
<p>水平有限，大佬轻喷。</p>
<p>&nbsp;</p>
<h1>思路</h1>
<p>1，获取百度热搜列表</p>
<p>2，给热搜图片加上文字标题</p>
<p>3，上传图片到微信公众号素材库</p>
<p>4，新建微信公众号草稿</p>
<p>5，发布草稿</p>
<p>&nbsp;</p>
<h1>前期准备</h1>
<p>1，<a href="https://mp.weixin.qq.com/" target="_blank" rel="noopener nofollow">注册微信公众号</a>，获取AppID和AppSecret</p>
<p><img src="https://img2024.cnblogs.com/blog/1257808/202501/1257808-20250121154007800-2087794243.png" alt="" width="802" height="400" loading="lazy"></p>
<p>&nbsp;</p>
<p>2，微信公众号接口文档（ <a href="https://developers.weixin.qq.com/doc/offiaccount/Getting_Started/Overview.html" target="_blank" rel="noopener nofollow">文档链接</a>），参照文档进行接口调用</p>
<p>3，微信公众号设置IP白名单</p>
<p>在服务器上面获取出口外网ip</p>
<div class="cnblogs_Highlighter">
<pre class="brush:bash;gutter:true;">curl -s https://ipinfo.io/ip
</pre>
</div>
<p>&nbsp;</p>
<h1>环境要求</h1>
<p>1，我使用的是python12</p>
<p>2，依赖就需要安装PIL库，其他库都是默认安装的</p>
<div class="cnblogs_code">
<pre>(py12-ai-django5) [root@gtp-test01-cyt wxmp]# python -V</pre>
<p><em id="__mceDel">Python 3.12.4</em></p>
<pre><br># </pre>
<div>
<div>import requests</div>
<div>import os</div>
<div>import time</div>
<div>import yaml</div>
<div>import json</div>
<div>import string</div>
<br>
<div>from PIL import Image, ImageDraw, ImageFont</div>
<div>&nbsp;</div>
<div># 安装PIL</div>
<div>pip install&nbsp;pillow==10.4.0</div>
<div>&nbsp;</div>
<div># 运行脚本wxmp.py 就行</div>
<div>python&nbsp;wxmp.py</div>
<div>&nbsp;</div>
<div># 输出</div>
<div>
<p>图片已保存到 hotimg/orgimg/2.png<br>图片已保存到 hotimg/orgimg/3.png<br>图片已保存到 hotimg/orgimg/4.png<br>图片已保存到 hotimg/orgimg/5.png<br>图片已保存到 hotimg/orgimg/6.jpg<br>图片已保存到 hotimg/orgimg/7.jpg<br>图片已保存到 hotimg/orgimg/8.png<br>图片已保存到 hotimg/orgimg/9.png<br>图片已保存到 hotimg/orgimg/10.jpg<br>图片已保存到 hotimg/orgimg/11.png<br>图片已加文字 hotimg/nowimg/2.png<br>图片已加文字 hotimg/nowimg/3.png<br>图片已加文字 hotimg/nowimg/4.png<br>图片已加文字 hotimg/nowimg/5.png<br>图片已加文字 hotimg/nowimg/6.jpg<br>图片已加文字 hotimg/nowimg/7.jpg<br>图片已加文字 hotimg/nowimg/8.png<br>图片已加文字 hotimg/nowimg/9.png<br>图片已加文字 hotimg/nowimg/10.jpg<br>图片已加文字 hotimg/nowimg/11.png<br>新建草稿成功--{'media_id': 'V4QdIouS1e-m5FaD0_0keQQMcEMKo0-3YjLoF_JqJohqywWC3Byyr81SXUi1TheO', 'item': []}<br>{'errcode': 0, 'errmsg': 'ok', 'publish_id': 2247483801, 'msg_data_id': 2247483801}</p>


</div>
<div>&nbsp;</div>



</div>


</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h1>&nbsp;获取接口token</h1>
<p>1，由于access_token的有效期只有2小时，故需要定时刷新。</p>
<p>2，这里使用app_token.yaml来保存获取到的token以及时间；token在时效内返回保存的token，超过时效会获取新的token</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> get_token(
        app_id</span>=<span style="color: rgba(128, 0, 0, 1)">''</span>,  <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 微信公众号AppID</span>
        app_secret=<span style="color: rgba(128, 0, 0, 1)">''</span>  <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 微信公众号AppSecret</span>
<span style="color: rgba(0, 0, 0, 1)">):
    </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">
    获取token
    :return:
    </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(0, 0, 0, 1)">
    url </span>= f<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid={app_id}&amp;secret={app_secret}</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">
    res </span>= requests.get(url=<span style="color: rgba(0, 0, 0, 1)">url)
    result </span>=<span style="color: rgba(0, 0, 0, 1)"> res.json()
    </span><span style="color: rgba(0, 0, 255, 1)">if</span> result.get(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">access_token</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">):
        token </span>= result[<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">access_token</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">]
        </span><span style="color: rgba(0, 0, 255, 1)">print</span>(f<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">获取token成功：{token[:14]}****</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> token
    </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">:
        </span><span style="color: rgba(0, 0, 255, 1)">print</span>(f<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">获取token失败--{result}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)


</span><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> refresh_token():
    </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">
    token刷新机制
    :return:
    </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(0, 0, 0, 1)">
    app_token_path </span>= os.path.dirname(os.path.abspath(<span style="color: rgba(128, 0, 128, 1)">__file__</span>)) + os.sep + <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">app_token.yaml</span><span style="color: rgba(128, 0, 0, 1)">'</span>
    <span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)">:
        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 读取时间和token</span>
        <span style="color: rgba(0, 0, 255, 1)">if</span> <span style="color: rgba(0, 0, 255, 1)">not</span><span style="color: rgba(0, 0, 0, 1)"> os.path.exists(app_token_path):
            with open(app_token_path, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">w+</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">) as f:
                f.write(</span><span style="color: rgba(128, 0, 0, 1)">''</span><span style="color: rgba(0, 0, 0, 1)">)
        cfg_token </span>=<span style="color: rgba(0, 0, 0, 1)"> yaml_read(app_token_path)
        t </span>= cfg_token[<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">time</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">]
        record_token </span>= cfg_token[<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">token</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">]
        cur_time </span>=<span style="color: rgba(0, 0, 0, 1)"> time.time()
        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> token时间在7200s之内，返回token</span>
        <span style="color: rgba(0, 0, 255, 1)">if</span> 0 &lt; cur_time - t &lt; 7200<span style="color: rgba(0, 0, 0, 1)">:
            </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> print(f"token时效内")</span>
            <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> record_token
        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> token过期，刷新时间和token</span>
        <span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">:
            </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> print('token已过期')</span>
            token =<span style="color: rgba(0, 0, 0, 1)"> get_token()
            </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> token:
                data </span>= {<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">time</span><span style="color: rgba(128, 0, 0, 1)">'</span>: time.time(), <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">token</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">: token}
                yaml_clear(app_token_path)
                yaml_write(data, app_token_path)
                </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> token
    </span><span style="color: rgba(0, 0, 255, 1)">except</span><span style="color: rgba(0, 0, 0, 1)"> TypeError:
        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 获取初始时间和token</span>
        <span style="color: rgba(0, 0, 255, 1)">print</span>(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">获取初始token</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)
        token </span>=<span style="color: rgba(0, 0, 0, 1)"> get_token()
        data </span>= {<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">time</span><span style="color: rgba(128, 0, 0, 1)">'</span>: time.time(), <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">token</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">: token}
        yaml_write(data, app_token_path)
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> token


</span><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> yaml_read(file):
    </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">
    yaml文件读取
    :param file:
    :return:
    </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(0, 0, 0, 1)">
    with open(file</span>=file, mode=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">r</span><span style="color: rgba(128, 0, 0, 1)">"</span>, encoding=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">utf-8</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">) as f:
        data </span>=<span style="color: rgba(0, 0, 0, 1)"> yaml.safe_load(f.read())
    </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> data


</span><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> yaml_write(data, file):
    </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">
    yaml文件写入
    :param data:
    :param file:
    :return:
    </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(0, 0, 0, 1)">
    with open(file, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">a</span><span style="color: rgba(128, 0, 0, 1)">'</span>, encoding=<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">utf-8</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">) as f:
        yaml.dump(
            data,
            stream</span>=<span style="color: rgba(0, 0, 0, 1)">f,
            allow_unicode</span>=True,  <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 避免unicode编码问题</span>
            sort_keys=False  <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 不自动排序</span>
<span style="color: rgba(0, 0, 0, 1)">        )


</span><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> yaml_clear(file):
    </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">
    yaml文件清空
    :param file:
    :return:
    </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(0, 0, 0, 1)">
    with open(file, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">w</span><span style="color: rgba(128, 0, 0, 1)">'</span>, encoding=<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">utf-8</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">) as f:
        f.truncate()</span></pre>
</div>
<p>&nbsp;</p>
<h1>获取热搜</h1>
<p>这里我是找的网上别人写好的接口。简单快速方便</p>
<div class="cnblogs_code">
<pre>https:<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">dabenshi.cn/other/api/hot.php?type=douyinhot </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 抖音热点</span>
https:<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">dabenshi.cn/other/api/hot.php?type=toutiaoHot </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 头条热榜</span>
https:<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">dabenshi.cn/other/api/hot.php?type=baidu </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 百度热搜</span></pre>
</div>
<p>我这里使用的是百度热搜。</p>
<p>&nbsp;</p>
<h2>获取热搜数据</h2>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 获取热搜数据</span>
<span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> get_hotdata():
    </span><span style="color: rgba(128, 0, 0, 1)">'''</span><span style="color: rgba(128, 0, 0, 1)">
    获取百度热搜的数据
    url网上找的: https://dabenshi.cn/other/api/hot.php?type=baidu
    </span><span style="color: rgba(128, 0, 0, 1)">'''</span><span style="color: rgba(0, 0, 0, 1)">
    url </span>= f<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">https://dabenshi.cn/other/api/hot.php?type=baidu</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
    hotdata </span>= [] <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 存储所有的热搜数据</span>
<span style="color: rgba(0, 0, 0, 1)">
    res </span>= requests.get(url=<span style="color: rgba(0, 0, 0, 1)">url)
    result </span>=<span style="color: rgba(0, 0, 0, 1)"> res.json()
    hotdata </span>= result[<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">data</span><span style="color: rgba(128, 0, 0, 1)">'</span>][1:11]    # 这里我只拿了10条数据<br><br><br># 数据就是一个打列表，里面有字典<br>hotdata =[</pre>
<pre><em id="__mceDel">        {
            "index": 2,
            "title": "外交部回应是否邀请特朗普访华",
            "desc": "1月21日，外交部就“中方是否邀请特朗普访华”一事做出回应：愿同美国新政府保持沟通，加强合作。",
            "pic": "https:\/\/fyb-2.cdn.bcebos.com\/hotboard_image\/4d0700b48e6c791e29f1e231e24af061",
            "url": "https:\/\/www.baidu.com\/s?wd=%E5%A4%96%E4%BA%A4%E9%83%A8%E5%9B%9E%E5%BA%94%E6%98%AF%E5%90%A6%E9%82%80%E8%AF%B7%E7%89%B9%E6%9C%97%E6%99%AE%E8%AE%BF%E5%8D%8E&amp;sa=fyb_news&amp;rsv_dl=fyb_news",
            "hot": "797.6万",
            "mobilUrl": "https:\/\/www.baidu.com\/s?wd=%E5%A4%96%E4%BA%A4%E9%83%A8%E5%9B%9E%E5%BA%94%E6%98%AF%E5%90%A6%E9%82%80%E8%AF%B7%E7%89%B9%E6%9C%97%E6%99%AE%E8%AE%BF%E5%8D%8E&amp;sa=fyb_news&amp;rsv_dl=fyb_news"
        }<br>]</em></pre>
</div>
<p>&nbsp;</p>
<h1>下载热搜图片</h1>
<p>其实就是把热搜数据里面的pic图片保存到了本地</p>
<p>这样一会就好给图片加上标题文字了</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> get_hotimg(hotdataall):
    </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">
    下载热搜图片
    hotdata: 所有数据
    </span><span style="color: rgba(128, 0, 0, 1)">"""</span>

    <span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> hotdataall:
        </span><span style="color: rgba(0, 0, 255, 1)">for</span> hotdata <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> hotdataall:
            </span><span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)">:
                </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 发送HTTP GET请求获取图片数据</span>
                response = requests.get(hotdata[<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">pic</span><span style="color: rgba(128, 0, 0, 1)">'</span>], timeout=10<span style="color: rgba(0, 0, 0, 1)">)
                </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 检查请求是否成功</span>
                <span style="color: rgba(0, 0, 255, 1)">if</span> response.status_code == 200<span style="color: rgba(0, 0, 0, 1)">:
                    </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 获取Content-Type头信息</span>
                    content_type = response.headers.get(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Content-Type</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)

                    </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 根据Content-Type判断图片类型</span>
                    image_extension =<span style="color: rgba(0, 0, 0, 1)"> None
                    </span><span style="color: rgba(0, 0, 255, 1)">if</span> content_type == <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">image/jpeg</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">:
                        image_extension </span>= <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">.jpg</span><span style="color: rgba(128, 0, 0, 1)">'</span>
                    <span style="color: rgba(0, 0, 255, 1)">elif</span> content_type == <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">image/png</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">:
                        image_extension </span>= <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">.png</span><span style="color: rgba(128, 0, 0, 1)">'</span>
                    <span style="color: rgba(0, 0, 255, 1)">elif</span> content_type == <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">image/gif</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">:
                        image_extension </span>= <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">.gif</span><span style="color: rgba(128, 0, 0, 1)">'</span>
                    <span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">:
                        </span><span style="color: rgba(0, 0, 255, 1)">raise</span> Exception(f<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Unsupported image type: {content_type}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)

                    </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 以二进制写模式打开文件，并将图片数据写入文件</span>
                    img_name = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">hotimg/orgimg/</span><span style="color: rgba(128, 0, 0, 1)">"</span> + str(hotdata[<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">index</span><span style="color: rgba(128, 0, 0, 1)">'</span>]) +<span style="color: rgba(0, 0, 0, 1)"> image_extension
                    img_name_new </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">hotimg/nowimg/</span><span style="color: rgba(128, 0, 0, 1)">"</span> + str(hotdata[<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">index</span><span style="color: rgba(128, 0, 0, 1)">'</span>]) +<span style="color: rgba(0, 0, 0, 1)"> image_extension
                    with open(img_name, </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">wb</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">) as file:
                        file.write(response.content)
                    </span><span style="color: rgba(0, 0, 255, 1)">print</span>(f<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">图片已保存到 {img_name}</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)

                    hotdata[</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">image_path</span><span style="color: rgba(128, 0, 0, 1)">'</span>] =<span style="color: rgba(0, 0, 0, 1)"> img_name
                    hotdata[</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">image_path_new</span><span style="color: rgba(128, 0, 0, 1)">'</span>] =<span style="color: rgba(0, 0, 0, 1)"> img_name_new
                </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">:
                    </span><span style="color: rgba(0, 0, 255, 1)">print</span>(f<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">下载图片失败，状态码: {response.status_code}</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)
            </span><span style="color: rgba(0, 0, 255, 1)">except</span><span style="color: rgba(0, 0, 0, 1)"> requests.RequestException as e:
                </span><span style="color: rgba(0, 0, 255, 1)">print</span>(f<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">请求出现异常: {e}</span><span style="color: rgba(128, 0, 0, 1)">'</span>)</pre>
</div>
<p>&nbsp;</p>
<h1>给图片加上标题文字</h1>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 给图片加上文字</span>
    <span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> hotdata:
        </span><span style="color: rgba(0, 0, 255, 1)">for</span> hotdata_in <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> hotdata:
            image_path </span>= hotdata_in[<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">image_path</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">]
            image_path_new </span>= hotdata_in[<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">image_path_new</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">]
            text </span>= hotdata_in[<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">title</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">]
            max_width </span>= 500<span style="color: rgba(0, 0, 0, 1)">

            add_text_to_image(image_path, image_path_new, text</span>=text, max_width=max_width)</pre>
</div>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">def</span> add_text_to_image(image_path, image_path_new, text=<span style="color: rgba(128, 0, 0, 1)">''</span>, max_width=500<span style="color: rgba(0, 0, 0, 1)">):
    </span><span style="color: rgba(128, 0, 0, 1)">'''</span><span style="color: rgba(128, 0, 0, 1)">
    给图片添加文字
    </span><span style="color: rgba(128, 0, 0, 1)">'''</span><span style="color: rgba(0, 0, 0, 1)">
    image </span>=<span style="color: rgba(0, 0, 0, 1)"> Image.open(image_path)
    draw </span>=<span style="color: rgba(0, 0, 0, 1)"> ImageDraw.Draw(image)
    width, height </span>=<span style="color: rgba(0, 0, 0, 1)"> image.size

    font_size </span>= max(30, int(width * 0.03<span style="color: rgba(0, 0, 0, 1)">))

    font </span>= ImageFont.truetype(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">ttf/feihuasongti.ttf</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, font_size)
    text_color </span>= (255, 255, 255)  <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 黑色字体</span>
    shadow_color = (0, 0, 0)  <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 黑色阴影</span>
    <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> text_width, text_height = draw.textsize(text, font=font)</span>
    <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 获取文本尺寸</span>
    bbox = draw.textbbox((0, 0), text, font=<span style="color: rgba(0, 0, 0, 1)">font)
    text_width </span>= bbox[2] -<span style="color: rgba(0, 0, 0, 1)"> bbox[0]
    text_height </span>= bbox[3] - bbox[1<span style="color: rgba(0, 0, 0, 1)">]

    </span><span style="color: rgba(0, 0, 255, 1)">while</span> text_width &gt; width - 30<span style="color: rgba(0, 0, 0, 1)">:
        font_size </span>-= 1<span style="color: rgba(0, 0, 0, 1)">
        font </span>= ImageFont.truetype(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">ttf/feihuasongti.ttf</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, font_size)
        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> text_width, text_height = draw.textsize(text, font=font)</span>
        <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 获取文本尺寸</span>
        bbox = draw.textbbox((0, 0), text, font=<span style="color: rgba(0, 0, 0, 1)">font)
        text_width </span>= bbox[2] -<span style="color: rgba(0, 0, 0, 1)"> bbox[0]
        text_height </span>= bbox[3] - bbox[1<span style="color: rgba(0, 0, 0, 1)">]

    </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 计算文本位置</span>
    x = width -<span style="color: rgba(0, 0, 0, 1)"> text_width
    y </span>= height - text_height - 30
    <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 绘制文本阴影</span>
    draw.text(((x/2) + 2, y + 2), text, font=font, fill=<span style="color: rgba(0, 0, 0, 1)">shadow_color)
    draw.text((x </span>/ 2, y), text, font=font, fill=<span style="color: rgba(0, 0, 0, 1)">text_color)

    image.save(image_path_new)
    </span><span style="color: rgba(0, 0, 255, 1)">print</span>(f<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">图片已加文字 {image_path_new}</span><span style="color: rgba(128, 0, 0, 1)">'</span>)</pre>
</div>
<p>类似这样，在图片底部加上文字</p>
<p><img src="https://img2024.cnblogs.com/blog/1257808/202501/1257808-20250121160053216-1827689939.png" alt="" width="494" height="277" loading="lazy"></p>
<p>&nbsp;</p>
<h1>上传图片素材</h1>
<p>这块会返回上传到素材url。这个url地址，可以在文章里面使用</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> add_media(hotdataall):
    </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">
    新增临时素材: https://api.weixin.qq.com/cgi-bin/media/upload?access_token=ACCESS_TOKEN&amp;type=TYPE
    上传图文消息内的图片获取URL, 新增永久素材: https://api.weixin.qq.com/cgi-bin/media/uploadimg?access_token=ACCESS_TOKEN
    新增其他类型永久素材, 新增永久素材: https://api.weixin.qq.com/cgi-bin/material/add_material?access_token=ACCESS_TOKEN&amp;type=TYPE
    </span><span style="color: rgba(128, 0, 0, 1)">"""</span>
    <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> url = f"https://api.weixin.qq.com/cgi-bin/media/upload?access_token={refresh_token()}&amp;type=image"</span>
    url = f<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">https://api.weixin.qq.com/cgi-bin/media/uploadimg?access_token={refresh_token()}</span><span style="color: rgba(128, 0, 0, 1)">"</span>

    <span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> hotdataall:
        </span><span style="color: rgba(0, 0, 255, 1)">for</span> hotdata <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> hotdataall:
            with open(hotdata[</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">image_path_new</span><span style="color: rgba(128, 0, 0, 1)">'</span>], <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">rb</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">) as fp:
                files </span>= {<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">media</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">: fp}
                res </span>= requests.post(url, files=<span style="color: rgba(0, 0, 0, 1)">files)
                res </span>= json.loads(str(res.content, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">utf8</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">))
                hotdata[</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">wx_img_url</span><span style="color: rgba(128, 0, 0, 1)">"</span>] = res[<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">url</span><span style="color: rgba(128, 0, 0, 1)">'</span>]</pre>
</div>
<p>&nbsp;</p>
<h1>新建草稿</h1>
<p>这里会返回草稿的ID</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> add_draft(hotdataall):
    </span><span style="color: rgba(128, 0, 0, 1)">'''</span><span style="color: rgba(128, 0, 0, 1)">
    新建草稿
    </span><span style="color: rgba(128, 0, 0, 1)">'''</span><span style="color: rgba(0, 0, 0, 1)">
    url </span>= f<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">https://api.weixin.qq.com/cgi-bin/draft/add?access_token={refresh_token()}</span><span style="color: rgba(128, 0, 0, 1)">'</span>

    <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> content = "&lt;img src='https://mmbiz.qpic.cn/sz_mmbiz_jpg/hY63os7Ee2Ro6WVkfj9nvfDdpONqLwr48J2eQEYXygs3cWibLvQTHAveYWNnXOOWHO3jZldO3fr7quVj6V0X5uA/0?wx_fmt=jpeg'/&gt;"</span>
    <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 读取文件html</span>
    <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 打开HTML文件并读取内容</span>
    with open(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">content.html</span><span style="color: rgba(128, 0, 0, 1)">'</span>, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">r</span><span style="color: rgba(128, 0, 0, 1)">'</span>, encoding=<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">utf-8</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">) as file:
        html_content_template </span>=<span style="color: rgba(0, 0, 0, 1)"> file.read()

    </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 动态生成草稿content内容全部，先定义一个变量</span>
    html_content = <span style="color: rgba(128, 0, 0, 1)">""</span>

    <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 动态生成草稿content内容片段</span>
    <span style="color: rgba(0, 0, 255, 1)">for</span> hotdata <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> hotdataall:
        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 判断热搜第一</span>
        <span style="color: rgba(0, 0, 255, 1)">if</span> hotdata[<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">index</span><span style="color: rgba(128, 0, 0, 1)">'</span>] == 2<span style="color: rgba(0, 0, 0, 1)">:
            title_color </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">red</span><span style="color: rgba(128, 0, 0, 1)">"</span>
        <span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">:
            title_color </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">black</span><span style="color: rgba(128, 0, 0, 1)">"</span>

        <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 定义变量</span>
        hot_context =<span style="color: rgba(0, 0, 0, 1)"> {
            </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">num</span><span style="color: rgba(128, 0, 0, 1)">'</span>: hotdata[<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">index</span><span style="color: rgba(128, 0, 0, 1)">'</span>] - 1<span style="color: rgba(0, 0, 0, 1)">,
            </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">url_img</span><span style="color: rgba(128, 0, 0, 1)">'</span>: hotdata[<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">wx_img_url</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">],
            </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">title_color</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">: title_color,
            </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">title_title</span><span style="color: rgba(128, 0, 0, 1)">'</span>: hotdata[<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">title</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">],
            </span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">describe</span><span style="color: rgba(128, 0, 0, 1)">'</span>: hotdata[<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">desc</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">],
        }

        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 替换变量</span>
        substitute_data =<span style="color: rgba(0, 0, 0, 1)"> string.Template(html_content_template)
        result </span>=<span style="color: rgba(0, 0, 0, 1)"> substitute_data.safe_substitute(hot_context)
        html_content </span>+=<span style="color: rgba(0, 0, 0, 1)"> result

    data </span>=<span style="color: rgba(0, 0, 0, 1)"> {
        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">articles</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">: [
            {
                </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">title</span><span style="color: rgba(128, 0, 0, 1)">"</span>:<span style="color: rgba(128, 0, 0, 1)">"标题</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
                </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">author</span><span style="color: rgba(128, 0, 0, 1)">"</span>:<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">作者</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
                </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">digest</span><span style="color: rgba(128, 0, 0, 1)">"</span>:<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">描述</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
                </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">content</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">:html_content,
                </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">thumb_media_id</span><span style="color: rgba(128, 0, 0, 1)">"</span>:<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">封面素材ID</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
                </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">need_open_comment</span><span style="color: rgba(128, 0, 0, 1)">"</span>:1<span style="color: rgba(0, 0, 0, 1)">,
                </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">only_fans_can_comment</span><span style="color: rgba(128, 0, 0, 1)">"</span>:1<span style="color: rgba(0, 0, 0, 1)">
            }
        ]
    }

    res </span>= requests.post(url=url, data=json.dumps(data, ensure_ascii=False).encode(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">utf-8</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">))

    </span><span style="color: rgba(0, 0, 255, 1)">if</span> res.status_code == 200<span style="color: rgba(0, 0, 0, 1)">:
        result </span>=<span style="color: rgba(0, 0, 0, 1)"> json.loads(res.content)
        </span><span style="color: rgba(0, 0, 255, 1)">if</span> result.get(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">media_id</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">):
            </span><span style="color: rgba(0, 0, 255, 1)">print</span>(f<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">新建草稿成功--{result}</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)
            </span><span style="color: rgba(0, 0, 255, 1)">return</span> result[<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">media_id</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">]
        </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">:
            </span><span style="color: rgba(0, 0, 255, 1)">print</span>(f<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">新建草稿失败--{result}</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)
    </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">:
        </span><span style="color: rgba(0, 0, 255, 1)">print</span>(f<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">新建草稿失败--{res.text}</span><span style="color: rgba(128, 0, 0, 1)">'</span>)</pre>
</div>
<p>&nbsp;</p>
<h1>发布草稿</h1>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> free_publish(media_id):
    </span><span style="color: rgba(128, 0, 0, 1)">'''</span><span style="color: rgba(128, 0, 0, 1)">
    发布草稿
    </span><span style="color: rgba(128, 0, 0, 1)">'''</span><span style="color: rgba(0, 0, 0, 1)">
    url </span>= f<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">https://api.weixin.qq.com/cgi-bin/freepublish/submit?access_token={refresh_token()}</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">

    data </span>=<span style="color: rgba(0, 0, 0, 1)"> {
        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">media_id</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">: media_id
    }

    res </span>= requests.post(url=url, json=<span style="color: rgba(0, 0, 0, 1)">data)
    res </span>= json.loads(str(res.content, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">utf8</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">))
    </span><span style="color: rgba(0, 0, 255, 1)">print</span>(res)</pre>
</div>
<p>&nbsp;</p>
<h1>源码</h1>
<p>gitee：<a href="https://gitee.com/ccsang/wxmp" target="_blank" rel="noopener nofollow">https://gitee.com/ccsang/wxmp</a></p>
<p>&nbsp;</p>
<h1>关注我的公众号</h1>
<p>这个公众号的文章就是这个脚本定时发送的。</p>
<p><img src="https://img2024.cnblogs.com/blog/1257808/202501/1257808-20250121164236782-1608543354.jpg" alt=""></p>
<p>希望这个脚本对你有用。欢迎交流</p>
<p>最近想弄些PRA，自动化弄下那些没有接口的应用的。有大佬指教吗。</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.23492122222569445" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-21 16:45">2025-01-21 16:44</span>&nbsp;
<a href="https://www.cnblogs.com/fanfanfanlichun">春寒知冬冷</a>&nbsp;
阅读(<span id="post_view_count">71</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18683668" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18683668);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18683668', targetLink: 'https://www.cnblogs.com/fanfanfanlichun/p/18683668', title: '微信公众号-脚本简单实现，自动新建草稿并发布草稿文章，代码开源' })">举报</a>
</div>
        