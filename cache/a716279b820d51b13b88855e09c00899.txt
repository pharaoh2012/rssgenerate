
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/vipsoft/p/18665897" title="发布于 2025-01-11 17:12">
    <span role="heading" aria-level="2">C#实现 Winform 程序在系统托盘显示图标 &amp; 开机自启动</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p></p><div class="toc"><div class="toc-container-header">目录</div><ul><li><a href="#添加控件拖拽方式" rel="noopener nofollow">添加控件(拖拽方式)</a></li><li><a href="#设置控件" rel="noopener nofollow">设置控件</a></li><li><a href="#添加主窗体事件" rel="noopener nofollow">添加主窗体事件</a></li><li><a href="#实现双击托盘打开主程序" rel="noopener nofollow">实现双击托盘打开主程序</a></li><li><a href="#代码方式添加" rel="noopener nofollow">代码方式添加</a></li><li><a href="#系统开机自启动应用程序" rel="noopener nofollow">系统开机自启动应用程序</a></li></ul></div><p></p>
<p>实现步骤</p>
<ul>
<li>创建 NotifyIcon 控件并设置属性；</li>
<li>编写 NotifyIcon 响应控制事件；</li>
<li>在主窗体的Load事件中将 NotifyIcon 添加到系统托盘；</li>
<li>程序退出时，移除系统托盘的 NotifyIcon；</li>
</ul>
<p>NotifyIcon 控件，通常用于在系统托盘中显示图标，通过使用它就可以我们想要的效果。</p>
<table width="578"><thead style="break-after: auto; background-color: rgba(248, 248, 248, 1)"><tr cid="n10" mdtype="table_row" style="break-after: auto; border: 1px solid rgba(223, 226, 229, 1)" class="firstRow"><th style="padding: 6px 13px; hyphens: auto; border-bottom: 0 none currentColor; border-top-color: rgba(223, 226, 229, 1); border-right-color: rgba(223, 226, 229, 1); border-left-color: rgba(223, 226, 229, 1); box-sizing: border-box !important"><span style="display: inline-block; min-width: 1ch; width: 166.463px; min-height: 10px">属性</span></th><th style="padding: 6px 13px; hyphens: auto; border-bottom: 0 none currentColor; border-top-color: rgba(223, 226, 229, 1); border-right-color: rgba(223, 226, 229, 1); border-left-color: rgba(223, 226, 229, 1); box-sizing: border-box !important"><span style="display: inline-block; min-width: 1ch; width: 578.835px; min-height: 10px">描述</span></th></tr></thead><tbody><tr cid="n13" mdtype="table_row" style="break-after: auto; border: 1px solid rgba(223, 226, 229, 1)"><td style="padding: 6px 13px; hyphens: auto; border-color: rgba(223, 226, 229, 1); min-width: 32px; box-sizing: border-box !important"><span style="display: inline-block; min-width: 1ch; width: 166.463px; min-height: 10px">Icon</span></td><td style="padding: 6px 13px; hyphens: auto; border-color: rgba(223, 226, 229, 1); min-width: 32px; box-sizing: border-box !important"><span style="display: inline-block; min-width: 1ch; width: 578.835px; min-height: 10px">在系统托盘中显示的图标</span></td></tr><tr cid="n16" mdtype="table_row" style="break-after: auto; border: 1px solid rgba(223, 226, 229, 1); background-color: rgba(248, 248, 248, 1)"><td style="padding: 6px 13px; hyphens: auto; border-color: rgba(223, 226, 229, 1); min-width: 32px; box-sizing: border-box !important"><span style="display: inline-block; min-width: 1ch; width: 166.463px; min-height: 10px">Text</span></td><td style="padding: 6px 13px; hyphens: auto; border-color: rgba(223, 226, 229, 1); min-width: 32px; box-sizing: border-box !important"><span style="display: inline-block; min-width: 1ch; width: 578.835px; min-height: 10px">鼠标悬停在图标时显示的文本</span></td></tr><tr cid="n19" mdtype="table_row" style="break-after: auto; border: 1px solid rgba(223, 226, 229, 1)"><td style="padding: 6px 13px; hyphens: auto; border-color: rgba(223, 226, 229, 1); min-width: 32px; box-sizing: border-box !important"><span style="display: inline-block; min-width: 1ch; width: 166.463px; min-height: 10px">Visible</span></td><td style="padding: 6px 13px; hyphens: auto; border-color: rgba(223, 226, 229, 1); min-width: 32px; box-sizing: border-box !important"><span style="display: inline-block; min-width: 1ch; width: 578.835px; min-height: 10px">指定是否可见</span></td></tr></tbody></table>
<p>常用方法</p>
<table width="578"><thead style="break-after: auto; background-color: rgba(248, 248, 248, 1)"><tr cid="n24" mdtype="table_row" style="break-after: auto; border: 1px solid rgba(223, 226, 229, 1)" class="firstRow"><th style="padding: 6px 13px; hyphens: auto; border-bottom: 0 none currentColor; border-top-color: rgba(223, 226, 229, 1); border-right-color: rgba(223, 226, 229, 1); border-left-color: rgba(223, 226, 229, 1); box-sizing: border-box !important"><span style="display: inline-block; min-width: 1ch; width: 252.088px; min-height: 10px">方法</span></th><th style="padding: 6px 13px; hyphens: auto; border-bottom: 0 none currentColor; border-top-color: rgba(223, 226, 229, 1); border-right-color: rgba(223, 226, 229, 1); border-left-color: rgba(223, 226, 229, 1); box-sizing: border-box !important"><span style="display: inline-block; min-width: 1ch; width: 493.21px; min-height: 10px">描述</span></th></tr></thead><tbody><tr cid="n27" mdtype="table_row" style="break-after: auto; border: 1px solid rgba(223, 226, 229, 1)"><td style="padding: 6px 13px; hyphens: auto; border-color: rgba(223, 226, 229, 1); min-width: 32px; box-sizing: border-box !important"><span style="display: inline-block; min-width: 1ch; width: 252.088px; min-height: 10px">ShowContextMenu</span></td><td style="padding: 6px 13px; hyphens: auto; border-color: rgba(223, 226, 229, 1); min-width: 32px; box-sizing: border-box !important"><span style="display: inline-block; min-width: 1ch; width: 493.21px; min-height: 10px">在系统托盘上下文菜单中显示指定的菜单</span></td></tr></tbody></table>
<h3 id="添加控件拖拽方式">添加控件(拖拽方式)</h3>
<p>将NotifyIcon和一个ContextMenuStrip控件。拖到主窗体中可以修改控件名称</p>
<ul>
<li>NotifyIcon 托盘图标</li>
<li>ContextMenuStrip 托盘图标右击弹出的菜单<br>
<img src="https://img2024.cnblogs.com/blog/80824/202501/80824-20250111171141249-733369592.png" alt="image" loading="lazy"></li>
</ul>
<h3 id="设置控件">设置控件</h3>
<p>点击 ContextMenuStrip 右上方的三角图标 -&gt; 编辑项，弹出项信合编辑器<br>
添加右健菜单信息<br>
<img src="https://img2024.cnblogs.com/blog/80824/202501/80824-20250111172130949-535417087.png" alt="image" loading="lazy"></p>
<h3 id="添加主窗体事件">添加主窗体事件</h3>
<p>在最小化或关闭主窗体时，显示在任务栏托盘区域,实现了单击关闭时，不真正关闭程序，而是将主界面隐藏HIDE掉，同时开始显示托盘菜单。<br>
<img src="https://img2024.cnblogs.com/blog/80824/202501/80824-20250111172547770-1547486908.png" alt="image" loading="lazy"></p>
<pre><code class="language-c#">//  只有Form_Closing事件中 e.Cancel可以用。
//  你的是Form_Closed事件。 Form_Closed事件时窗口已关了 ，Cancel没用了；
//  Form_Closing是窗口即将关闭时询问你是不是真的关闭才有Cancel事件

private void MainWindow_FormClosing(object sender, FormClosingEventArgs e)
{

    // 注意判断关闭事件reason来源于窗体按钮，否则用菜单退出时无法退出!
    if (e.CloseReason == CloseReason.UserClosing)
    {
        //取消"关闭窗口"事件
        e.Cancel = true; // 取消关闭窗体 

        //使关闭时窗口向右下角缩小的效果
        this.WindowState = FormWindowState.Minimized;
        this.mainNotifyIcon.Visible = true;
        //this.m_cartoonForm.CartoonClose();
        this.Hide();
        return;
    }
}
</code></pre>
<h3 id="实现双击托盘打开主程序">实现双击托盘打开主程序</h3>
<pre><code class="language-c#">//  添加托盘程序
//  版本更新自1.0.1
private void mainNotifyIcon_MouseDoubleClick(object sender, MouseEventArgs e)
{
    if (this.Visible)
    {
        this.WindowState = FormWindowState.Minimized;
        this.mainNotifyIcon.Visible = true;
        this.Hide();
    }
    else
    {
        this.Visible = true;
        this.WindowState = FormWindowState.Normal;
        this.Activate();
    }
}
</code></pre>
<pre><code class="language-c#">
//  添加托盘程序右键菜单项
//  版本更新自1.0.1
//  退出
//  添加日期 --  2015-07-29 21:44
private async void toolStripMenuItemQuit_Click(object sender, EventArgs e)
{
    if (MessageBox.Show("你确定要退出？", "系统提示", MessageBoxButtons.YesNo, MessageBoxIcon.Information, MessageBoxDefaultButton.Button1) == DialogResult.Yes)
    {

        this.mainNotifyIcon.Visible = false;
        this.Close();
        this.Dispose();
        System.Environment.Exit(System.Environment.ExitCode);   

    }
}
</code></pre>
<h3 id="代码方式添加">代码方式添加</h3>
<pre><code class="language-c#">using System;
using System.Windows.Forms;


namespace Fountain.WinForm.NotifyDemo
{
    public partial class FormMain : Form
    {
        /// &lt;summary&gt;
        /// 通知控件
        /// &lt;/summary&gt;
        private NotifyIcon notifyIcon = new NotifyIcon();
        /// &lt;summary&gt;
        /// 通知控件显示菜单
        /// &lt;/summary&gt;
        private ContextMenuStrip contextMenuStrip = new ContextMenuStrip();
        /// &lt;summary&gt;
        /// 构造方法
        /// &lt;/summary&gt;
        public FormMain()
        {
            InitializeComponent();
        }
        /// &lt;summary&gt;
        /// 窗体加载
        /// &lt;/summary&gt;
        /// &lt;param name="sender"&gt;&lt;/param&gt;
        /// &lt;param name="e"&gt;&lt;/param&gt;
        private void FormMain_Load(object sender, EventArgs e)
        {
            this.InitializeNotifyMenu();
            this.notifyIcon.Text = this.Text;
            this.notifyIcon.Visible = true;
            this.notifyIcon.Icon = this.Icon;
            this.notifyIcon.ContextMenuStrip = this.contextMenuStrip;
            this.notifyIcon.DoubleClick += notifyIcon_DoubleClick;
        }
        /// &lt;summary&gt;
        /// 托盘菜单
        /// &lt;/summary&gt;
        private void InitializeNotifyMenu()
        {
            try
            {
                contextMenuStrip.Items.Clear();
                ToolStripMenuItem showMenuItem = new ToolStripMenuItem("显示界面");
                showMenuItem.Tag = "显示";
                showMenuItem.Click += new EventHandler(ShowMenuItem_Click);
                contextMenuStrip.Items.Add(showMenuItem);


                ToolStripMenuItem sboutMenuItem = new ToolStripMenuItem("关于");
                sboutMenuItem.Tag = "关于";
                sboutMenuItem.Click += new EventHandler(AboutMenuItem_Click);
                contextMenuStrip.Items.Add(sboutMenuItem);


                ToolStripMenuItem exitMenuItem = new ToolStripMenuItem("退出");
                exitMenuItem.Tag = "退出";
                exitMenuItem.Click += new EventHandler(ExistMenuItem_Click);
                contextMenuStrip.Items.Add(exitMenuItem);
            }
            catch(Exception exception) 
            {
                throw new Exception(exception.Message);
            }
        }
        /// &lt;summary&gt;
        /// 右击任务栏图标
        /// &lt;/summary&gt;
        /// &lt;param name="sender"&gt;&lt;/param&gt;
        /// &lt;param name="e"&gt;&lt;/param&gt;
        private void notifyIcon_DoubleClick(object sender, EventArgs e)
        {
            try
            {
                if (this.WindowState == FormWindowState.Normal)
                {
                    this.WindowState = FormWindowState.Minimized;
                    this.Hide();
                }
                else if (this.WindowState == FormWindowState.Minimized)
                {
                    this.Show();
                    this.WindowState = FormWindowState.Normal;
                    this.Activate();
                }
            }
            catch (Exception objException)
            {
                throw new Exception(objException.Message);
            }
        }
        /// &lt;summary&gt;
        /// 显示
        /// &lt;/summary&gt;
        /// &lt;param name="sender"&gt;&lt;/param&gt;
        /// &lt;param name="e"&gt;&lt;/param&gt;
        private void ShowMenuItem_Click(object sender, EventArgs e)
        {
            try
            {
                this.Show();
                this.WindowState = FormWindowState.Normal;
                this.Activate();
            }
            catch (Exception objException)
            {
                throw new Exception(objException.Message);
            }
        }
        /// &lt;summary&gt;
        /// 关于
        /// &lt;/summary&gt;
        /// &lt;param name="sender"&gt;&lt;/param&gt;
        /// &lt;param name="e"&gt;&lt;/param&gt;
        private void AboutMenuItem_Click(object sender, EventArgs e)
        {
            try
            {
            }
            catch (Exception objException)
            {
                MessageBox.Show(objException.Message);
            }
        }
        /// &lt;summary&gt;
        /// 退出
        /// &lt;/summary&gt;
        /// &lt;param name="sender"&gt;&lt;/param&gt;
        /// &lt;param name="e"&gt;&lt;/param&gt;
        private void ExistMenuItem_Click(object sender, EventArgs e)
        {
            try
            {
                if (MessageBox.Show("你确定要退出程序吗？","提示", MessageBoxButtons.OKCancel, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.OK)
                {
                    this.notifyIcon.Visible = false;
                    this.notifyIcon.Dispose();
                    this.Dispose();
                    Application.Exit();
                }
            }
            catch (Exception objException)
            {
                MessageBox.Show(objException.Message);
            }
        }
        /// &lt;summary&gt;
        /// 主窗体关闭
        /// &lt;/summary&gt;
        /// &lt;param name="sender"&gt;&lt;/param&gt;
        /// &lt;param name="e"&gt;&lt;/param&gt;
        private void FormMain_FormClosing(object sender, FormClosingEventArgs e)
        {
            try
            {
                e.Cancel = true;
                this.Hide();
                this.notifyIcon.Dispose();
            }
            catch (Exception objException)
            {
                MessageBox.Show(objException.Message);
            }
        }
        /// &lt;summary&gt;
        /// 窗体大小变化
        /// &lt;/summary&gt;
        /// &lt;param name="sender"&gt;&lt;/param&gt;
        /// &lt;param name="e"&gt;&lt;/param&gt;
        private void FormMain_Resize(object sender, EventArgs e)
        {
            if (this.WindowState == FormWindowState.Minimized)
            {
                this.ShowInTaskbar = false;
                this.Hide();
                this.notifyIcon.Visible = true;
            }
        }
    }
}
</code></pre>
<h3 id="系统开机自启动应用程序">系统开机自启动应用程序</h3>
<pre><code class="language-c#">using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.Windows.Forms;


namespace Fountain.WinForm.NotifyDemo
{
    public partial class FormMain : Form
    {
        /// &lt;summary&gt;
        /// 构造方法
        /// &lt;/summary&gt;
        public FormMain()
        {
            InitializeComponent();
        }
        /// &lt;summary&gt;
        /// 窗体加载
        /// &lt;/summary&gt;
        /// &lt;param name="sender"&gt;&lt;/param&gt;
        /// &lt;param name="e"&gt;&lt;/param&gt;
        private void FormMain_Load(object sender, EventArgs e)
        { 
            //一般不会放这个事件里去设置，而且设置时需要看下注册表要有没有写入成功有的话可以不用调了，偷懒多调一次也没事
            string applictionName = Process.GetCurrentProcess().MainModule.ModuleName;
            string applictionPath = Process.GetCurrentProcess().MainModule.FileName;
            #region 当前登陆用户的注册表启动项
            RegistryKey registryKey = Registry.CurrentUser.CreateSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Run");
            registryKey.SetValue(applictionName, applictionPath);
            #endregion
            #region 所有用户的注册表启动项
            //RegistryKey registryKey = Registry.LocalMachine.CreateSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Run");
            //registryKey.SetValue(applictionName, applictionPath);
            #endregion
        }
    }
}
</code></pre>

</div>
<div id="MySignature" role="contentinfo">
    <p>本文来自博客园，作者：<a href="https://www.cnblogs.com/vipsoft/" target="_blank">VipSoft</a>  转载请注明原文链接：<a href="https://www.cnblogs.com/vipsoft/p/18665897" target="_blank">https://www.cnblogs.com/vipsoft/p/18665897</a></p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="1.0028301167164353" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-11 18:10">2025-01-11 17:12</span>&nbsp;
<a href="https://www.cnblogs.com/vipsoft">VipSoft</a>&nbsp;
阅读(<span id="post_view_count">170</span>)&nbsp;
评论(<span id="post_comment_count">2</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18665897" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18665897);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18665897', targetLink: 'https://www.cnblogs.com/vipsoft/p/18665897', title: 'C#实现 Winform 程序在系统托盘显示图标 &amp;amp; 开机自启动' })">举报</a>
</div>
        