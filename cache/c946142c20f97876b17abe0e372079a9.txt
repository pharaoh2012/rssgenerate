
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/test-gang/p/18704216" title="发布于 2025-02-09 15:48">
    <span role="heading" aria-level="2">SQL注入之时间盲注</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="sql注入之时间盲注">SQL注入之时间盲注</h1>
<h2 id="一时间盲注原理">一、时间盲注原理</h2>
<p>时间盲注技术的核心在于巧妙地运用数据库中的时间延迟函数（例如 <code>MySQL</code> 的 <code>SLEEP()</code> 函数或 <code>PostgreSQL</code> 的 <code>PG_SLEEP()</code> 函数）来验证注入条件的有效性。当注入条件成立时，数据库会执行这些延迟函数，从而导致页面响应时间显著增加；反之，若条件不成立，则不会产生延迟效果。这项技术之所以被称为“盲注”，原因在于它并不能直接将查询结果反馈到页面或接口返回值中，而是依赖于SQL语句执行所产生的时间延迟来间接推断数据内容。</p>
<h2 id="二时间盲注方法">二、时间盲注方法</h2>
<p>时间盲注的方法主要是利用 <code>if(booleans, true_value, false_value)</code> 函数 和 <code>sleep(seconds)</code> 函数组合来获取数据库内容。<br>
<strong>常见语句</strong></p>
<pre><code class="language-sql">SELECT IF(SUBSTRING((SELECT DATABASE()), 1, 1) = 'a', SLEEP(5), 1)
</code></pre>
<pre><code class="language-sql">SELECT IF(ASCII(SUBSTRING((SELECT DATABASE()), 1, 1)) &lt; 100, SLEEP(5), 1)
</code></pre>
<p><strong>解析</strong></p>
<p><code>IF(booleans, true_value, false_value)</code> 函数：</p>
<ul>
<li><code>booleans</code>：这是一个布尔表达式，用于确定要返回哪个值。如果条件为真（非零和非 <code>NULL</code>），则返回 <code>true_value</code>。</li>
<li><code>true_value</code>：如果条件为真，则 <code>IF</code> 函数返回这个值。</li>
<li><code>false_value</code>：如果条件为假（零或 <code>NULL</code>），则 <code>IF</code> 函数返回这个值。</li>
</ul>
<p><code>SUBSTRING(string, start, length)</code> 函数：</p>
<ul>
<li><code>string</code>：要从中提取子字符串的原始字符串。</li>
<li><code>start</code>：子字符串的起始位置。在SQL中，这个位置通常是从1开始的。如果<code>start</code>为负数，则表示从字符串的尾部开始计数。</li>
<li><code>length</code>：要提取的字符数。这是一个可选参数。如果省略此参数，则将从起始位置提取到字符串的末尾。</li>
</ul>
<p><code>SLEEP(seconds)</code> 函数：</p>
<ul>
<li><code>seconds</code>：数据库暂停秒数。</li>
</ul>
<p><code>ASCII(char)</code> 函数：</p>
<ul>
<li><code>char</code>： 想要转换为ASCII码的单个字符。</li>
</ul>
<p>通过对这两条语句的解析，我们可以得出以下结论：</p>
<ul>
<li><strong>第一条语句</strong>：判断数据库名称的第一个字符是否为 <code>a</code>。如果是，则数据库会暂停5秒；如果不是，则返回数据 <code>1</code>。</li>
<li><strong>第二条语句</strong>：判断数据库名称第一个字符的ASCII码是否小于100（字符 <code>a</code> 的ASCII码为97）。如果是，则数据库会暂停5秒；如果不是，则返回数据 <code>1</code>。</li>
</ul>
<p>相比之下，作者更倾向于使用第二种方法，因为通过ASCII码结合二分查找法，可以更高效地定位目标字符。二分查找的时间复杂度为 <code>O(log n)</code>，而传统的遍历法时间复杂度为 <code>O(n)</code>，前者在效率上具有明显优势。<br>
<img src="https://img2024.cnblogs.com/blog/2972727/202502/2972727-20250208173903996-227845971.png" alt="image" loading="lazy"></p>
<h2 id="三时间盲注实例">三、时间盲注实例</h2>
<p>在Pikachu平台上进行实践时，我们在输入框内输入了特定的SQL注入测试字符串：<code>' and sleep(5) #</code>。</p>
<p><img src="https://img2024.cnblogs.com/blog/2972727/202502/2972727-20250208163332354-92058207.png" alt="image" loading="lazy"></p>
<p>发现接口35秒多才返回，与平常的检索时间多了35秒。虽然查询语句延时了，但不是我们规定的5秒，而是35秒，这是为什么呢？</p>
<p>为了探究原因，我们对生成的SQL语句进行了深入分析：</p>
<pre><code class="language-sql">SELECT id, username, email FROM member WHERE username LIKE '%' AND SLEEP(5) #%'
</code></pre>
<p>在 <code>WHERE</code> 子句中，多个表达式通过 <code>AND</code> 连接时，数据库通常会采用短路逻辑（Short-Circuit Evaluation）来优化计算：<br>
如果某个表达式为 <code>FALSE</code>，则后续的表达式无需再计算，因为整个条件已经确定为 <code>FALSE</code>。</p>
<p>基于这一逻辑，我们推断出接口响应延迟35秒的原因：在数据库中，满足<code>username LIKE '%'</code>条件的数据记录多达7条。为了验证这一推断，我们直接连接数据库进行了查询，结果确实发现了7条匹配记录。<br>
<img src="https://img2024.cnblogs.com/blog/2972727/202502/2972727-20250208171319791-1532702094.png" alt="image" loading="lazy"></p>
<p>接下来，我们决定继续进行时间盲注攻击，但为了提高效率，我们需要调整策略，确保<code>username LIKE '%'</code>表达式能够精确匹配到唯一一条记录。例如，我们可以将表达式修改为<code>username LIKE '%vince'</code>，即在输入框中输入：<code>vince' and sleep(5) #</code>。</p>
<p><img src="https://img2024.cnblogs.com/blog/2972727/202502/2972727-20250208171657154-1590398699.png" alt="image" loading="lazy"></p>
<p>此时，接口的响应时间终于恢复到了我们预期的5秒多。</p>
<p>随后，我们利用<code>if()</code>函数来尝试获取数据库中的信息。在输入框中，我们输入了如下字符串：<code>vince' and IF(SUBSTRING((SELECT DATABASE()), 1, 1) = 'p', SLEEP(5), 1) #</code><br>
<img src="https://img2024.cnblogs.com/blog/2972727/202502/2972727-20250208174213382-1173224560.png" alt="image" loading="lazy"></p>
<p>这条语句用于判断数据库名称的首位字符是否为'p'。如果判断为真，则接口响应会延迟5秒；否则，响应将立即返回。通过这种方法，我们可以逐步推断出数据库名称的每一位字符。至于后续如何获取数据库第二位及更多位字符的操作，原理相同，此处不再赘述。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.018683683538194443" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-09 15:49">2025-02-09 15:48</span>&nbsp;
<a href="https://www.cnblogs.com/test-gang">测试小罡</a>&nbsp;
阅读(<span id="post_view_count">2</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18704216" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18704216);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18704216', targetLink: 'https://www.cnblogs.com/test-gang/p/18704216', title: 'SQL注入之时间盲注' })">举报</a>
</div>
        