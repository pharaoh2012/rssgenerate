
        <h2>
            <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/shengzhang/p/18822433" title="发布于 2025-04-12 18:48">
    <span role="heading" aria-level="2">Sa-Token v1.42.0 发布 🚀，新增 API Key、TOTP 验证码、RefreshToken 反查等能力</span>
    

</a>

        </h2>
        <div class="postbody">
            <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>Sa-Token 是一款 <strong>免费</strong>、<strong>开源</strong> 的轻量级 Java 权限认证框架，主要解决：<strong>登录认证</strong>、<strong>权限认证</strong>、<strong>单点登录</strong>、<strong>OAuth2.0</strong>、<strong>微服务网关鉴权</strong> 等一系列权限相关问题。🔐</p>
<p><strong>目前最新版本 <code>v1.42.0</code> 已推送至 <code>Maven</code> 中央仓库</strong> 🎉，大家可以通过如下方式引入：</p>
<pre><code class="language-xml">&lt;!-- Sa-Token 权限认证 --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;cn.dev33&lt;/groupId&gt;
    &lt;artifactId&gt;sa-token-spring-boot-starter&lt;/artifactId&gt;
    &lt;version&gt;1.42.0&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<p>该版本包含大量 ⛏️️️新增特性、⛏️底层重构、⛏️️️代码优化 等，下面容我列举几条比较重要的更新内容供大家参阅：</p>
<h3 id="️-更新点1新增-api-key-模块">🗝️ 更新点1：新增 API Key 模块</h3>
<p>如果你曾经对接过 ChatGPT、DeepSeek 等大模型平台的开放接口，那你一定对 API Key 不陌生。🤝</p>
<p>API Key 是一种接口调用密钥，类似于会话 token ，但比会话 token 具有更灵活的权限控制。🔑</p>
<p>本次更新带来了 API Key 的全流程管理，支持为指定账号签发、校验、禁用、删除 API Key 。<br>
同时每个 API Key 都可以单独设置不同的 scope 权限，以便在不同的场景下使用不同的 API Key，做到秘钥相互隔离，最小化授权。🛡️</p>
<p>为了更好的展示此模块的能力，我们专门制作了一个 demo 示例：</p>
<p><img src="https://oss.dev33.cn/sa-token/blog/2025-4/sa-api-key.png" alt="sa-api-key" loading="lazy"></p>
<p>示例仓库地址：<a href="https://gitee.com/dromara/sa-token/tree/master/sa-token-demo/sa-token-demo-apikey" target="_blank" rel="noopener nofollow">sa-token-demo-apikey</a> 🔗</p>
<p>在这个示例中，你可以登录测试不同的账号，并为它们签发 API Key，设置 scope 权限，并使用不同的 API Key 测试调用接口，观察响应结果。 🧪</p>
<p>框架默认将所有 API Key 信息保存在缓存中，这可以称之为“缓存模式”，在这种模式下，重启缓存库后，数据将会丢失。⚠️</p>
<p>框架预留了 SaApiKeyDataLoader 接口，以便你将数据的加载切换为 “数据库模式”，做到数据长久有效保存。 💾</p>
<p>在线文档直达地址：<a href="https://sa-token.cc/doc.html#/plugin/api-key" target="_blank" rel="noopener nofollow">API Key 接口调用秘钥</a> 🔗</p>
<h3 id="-更新点2重构-temptoken-模块新增-value-反查机制">🔍 更新点2：重构 TempToken 模块新增 value 反查机制</h3>
<p>在 Sa-Token 文档中有一段这样的示例：📚</p>
<p><img src="https://oss.dev33.cn/sa-token/blog/2025-4/sa-refresh-token.png" alt="sa-refresh-token" loading="lazy"></p>
<p>该示例演示了如何通过临时 Token 认证模块，创建 <code>RefreshToken</code> 为登录会话做到双 Token 的效果。🔄</p>
<p>但是有一天我在官网 sa-token 小助手接收到一位用户的咨询： 💬</p>
<p><img src="https://oss.dev33.cn/sa-token/blog/2025-4/sa-refresh-token-wnglian-zixun.png" alt="sa-refresh-token-wnglian-zixun" loading="lazy"></p>
<p>该用户指出，是否可以为 <code>RefreshToken</code> 提供反查机制，以便获取某个账号历史签发的 全部 <code>RefreshToken</code>。</p>
<p>必须安排！💪🏆</p>
<p>此次版本更新，允许程序在创建 refresh-token 时，指定第三个参数，该参数表示是否允许框架记录 Token 索引信息：</p>
<pre><code class="language-java">SaTempUtil.createToken("10001", 2592000, true);
</code></pre>
<p>指定为 false 代表不记录索引，只生成 token，指定为 true 代表记录索引信息，以便日后可以通过 value 反查历史签发的所有 token。🔍</p>
<p>例如我们可以通过 <code>SaTempUtil.getTempTokenList("xxx")</code> 方法获取指定账号所有历史签发的 <code>RefreshToken</code> 记录：</p>
<pre><code class="language-java">List&lt;String&gt; refreshTokenList = SaTempUtil.getTempTokenList("10001");
</code></pre>
<p>在线文档直达地址：<a href="https://sa-token.cc/doc.html#/plugin/temp-token" target="_blank" rel="noopener nofollow">临时 Token 令牌认证</a> 🔗</p>
<h3 id="️-更新点3新增-totp-算法实现">⏱️ 更新点3：新增 TOTP 算法实现</h3>
<p>TOTP 是一种动态密码算法，用于生成短暂有效的数字验证码（通常6-8位）️。它的核心原理是：结合密钥与当前时间，通过哈希运算生成一次性密码。⏱</p>
<p>TOTP 一般有以下应用场景：</p>
<ul>
<li>1、登录时的双因子认证：用户输入账号密码后还需要再输入 TOTP 验证码才可以登录成功。 🔐</li>
<li>2、敏感操作的二次认证：用户在进行一些高危敏感操作时，需要输入 TOTP 验证码才可以继续操作。🛡️</li>
<li>3、替代短信验证码：TOTP 验证码无需网络，可离线计算生成，一定程度上可以替代短信验证码验证身份。📴</li>
</ul>
<p>本次版本新增了 TOTP 验证码的生成与校验功能，这将方便大家为自己的系统添加双因子认证能力。🚀</p>
<h3 id="️-更新点4重构升级-satokencontext-上下文读写策略">⚙️ 更新点4：重构升级 <code>SaTokenContext</code> 上下文读写策略</h3>
<p>这可能是近几个版本中最底层的一次重构，几乎完全推翻了之前上下文模块的设计。💥</p>
<p>在之前的版本中，Sa-Token 对接不同的 Web 框架需要利用这些 Web 框架的原生上下文能力来构建 Sa-Token 的上下文。 🌐</p>
<p>本次更新 Sa-Token 利用 ThreadLocal 实现了自己的上下文存储机制，这将带来以下好处：</p>
<ul>
<li>1、可以更方便、更简单的对接更多的 Web 框架。</li>
<li>2、可在异步场景中临时 Mock 一个上下文，调用 Sa-Token 框架同步 API。</li>
<li>3、彻底删除了二级上下文模块，做到了 Web 请求与 RPC 请求的上下文统一。</li>
<li>4、在防火墙 hook 里也可以调用 Sa-Token 同步 API 了。</li>
</ul>
<h3 id="-更新点5新增-cors-跨域策略处理函数提供不同架构下统一的跨域处理方案">🌐 更新点5：新增 <code>CORS</code> 跨域策略处理函数，提供不同架构下统一的跨域处理方案</h3>
<p>在之前的版本中，跨域处理总是要写在全局鉴权过滤器中，属于“鉴权之下的额外补充操作”。⏳</p>
<p>新版本专门提供了一个 CORS 跨域处理策略组件，以后再也不用仅仅为了跨域就书写一个长长的鉴权过滤器组件了。🚀</p>
<pre><code class="language-java">/**
 * CORS 跨域处理
 */
@Bean
public SaCorsHandleFunction corsHandle() {
	return (req, res, sto) -&gt; {
		res.
				// 允许指定域访问跨域资源
				setHeader("Access-Control-Allow-Origin", "*")
				// 允许所有请求方式
				.setHeader("Access-Control-Allow-Methods", "POST, GET, OPTIONS, DELETE")
				// 有效时间
				.setHeader("Access-Control-Max-Age", "3600")
				// 允许的header参数
				.setHeader("Access-Control-Allow-Headers", "*");

		// 如果是预检请求，则立即返回到前端
		SaRouter.match(SaHttpMethod.OPTIONS)
				.free(r -&gt; System.out.println("--------OPTIONS预检请求，不做处理"))
				.back();
	};
}
</code></pre>
<p>开源仓库示例：<a href="https://gitee.com/sa-tokens/sa-token-demo-cross" target="_blank" rel="noopener nofollow">sa-token-demo-cross</a> 🔗</p>
<h3 id="-更新点6sa-token-quick-login-插件支持-http-basic-方式通过认证">🔑 更新点6：<code>sa-token-quick-login</code> 插件支持 <code>Http Basic</code> 方式通过认证</h3>
<p><code>sa-token-quick-login</code> 可以快速、方便的为项目注入一个登录页面，当我们引入依赖后：</p>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;cn.dev33&lt;/groupId&gt;
    &lt;artifactId&gt;sa-token-quick-login&lt;/artifactId&gt;
    &lt;version&gt;1.42.0&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<p>启动类：</p>
<pre><code class="language-java">@SpringBootApplication
public class SaTokenQuickDemoApplication {
    public static void main(String[] args) {
        SpringApplication.run(SaTokenQuickDemoApplication.class, args);
        
        System.out.println("\n------ 启动成功 ------");
        System.out.println("name: " + SaQuickManager.getConfig().getName());
        System.out.println("pwd:  " + SaQuickManager.getConfig().getPwd());
    }
}
</code></pre>
<p>测试 Controller</p>
<pre><code class="language-java">@RestController
public class TestController {
    @RequestMapping({"/", "/index"})
    public String index() {
        String str = "&lt;br /&gt;"
                + "&lt;h1 style='text-align: center;'&gt;资源页 （登录后才可进入本页面） &lt;/h1&gt;"
                + "&lt;hr/&gt;"
                + "&lt;p style='text-align: center;'&gt; Sa-Token " + SaTokenConsts.VERSION_NO + " &lt;/p&gt;";
        return str;
    }
}

</code></pre>
<p>启动项目，使用浏览器访问：<code>http://localhost:8081</code>，首次访问时，由于处于未登录状态，会被强制进入登录页面 🚪：</p>
<p><img src="https://oss.dev33.cn/sa-token/blog/2025-4/sa-quick-login.png" alt="登录" loading="lazy"></p>
<p>使用默认账号：<code>sa / 123456</code>进行登录，会看到资源页面</p>
<p><img src="https://oss.dev33.cn/sa-token/blog/2025-4/sa-quick-login-index.png" alt="登录" loading="lazy"></p>
<p>新版本中更新了通过 Http Basic 的方式直接进行认证的能力：</p>
<pre><code class="language-url">http://sa:123456@localhost:8081/
</code></pre>
<p>这将非常有助于大家在专门的 API 测试工具下进行 quick-login 相关资源接口的测试。🧪</p>
<h3 id="-完整更新日志">📜 完整更新日志</h3>
<p>除了以上提到的几点以外，还有更多更新点无法逐一详细介绍，下面是 v1.42.0 版本的完整更新日志：</p>
<ul>
<li>core:
<ul>
<li>新增: 新增 <code>API Key</code> 模块。   <strong>[重要]</strong></li>
<li>新增: 新增 <code>TOTP</code> 实现。   <strong>[重要]</strong></li>
<li>重构：重构 <code>TempToken</code> 模块，新增 value 反查 token 机制。   <strong>[重要]</strong></li>
<li>升级: 重构升级 <code>SaTokenContext</code> 上下文读写策略。   <strong>[重要]</strong></li>
<li>新增: 新增 Mock 上下文模块。   <strong>[重要]</strong></li>
<li>删除: 删除二级上下文模块。</li>
<li>新增: 新增异步场景使用 demo。   <strong>[重要]</strong></li>
<li>新增: 新增 <code>Base32</code> 编码工具类。</li>
<li>新增：新增 <code>CORS</code> 跨域策略处理函数，提供不同架构下统一的跨域处理方案。</li>
<li>新增：<code>renewTimeout</code> 续期方法增加 token 终端信息有效性校验。</li>
<li>新增: 全局配置项 <code>cookieAutoFillPrefix</code>：cookie 模式是否自动填充 token 前缀。</li>
<li>新增: 全局配置项 <code>rightNowCreateTokenSession</code>：在登录时，是否立即创建对应的 <code>Token-Session</code>。</li>
<li>优化：优化 <code>Token-Session</code> 获取算法，减少缓存读取次数。</li>
<li>新增：<code>SaLoginParameter</code> 支持配置 <code>SaCookieConfig</code>，以配置 Cookie 相关参数。</li>
<li>修改：防火墙校验过滤器的注册顺序 修改为 -102。</li>
<li>新增：防火墙 <code>hook</code> 注册新增 <code>registerHookToFirst</code>、<code>registerHookToSecond</code> 方法，以便更灵活的控制 hook 顺序。</li>
</ul>
</li>
<li>插件：
<ul>
<li>新增: <code>sa-token-quick-login</code> 插件支持 <code>Http Basic</code> 方式通过认证。</li>
</ul>
</li>
<li>单元测试：
<ul>
<li>补全：补全 <code>Temp Token</code> 模块单元测试。</li>
</ul>
</li>
<li>文档：
<ul>
<li>补全：补全赞助者名单。</li>
<li>修复：修复 <code>Thymeleaf</code> 集成文档不正确的依赖示例说明。</li>
<li>修复：修复 <code>unionid</code> 章节错误描述。</li>
<li>优化：采用更细致的描述优化SSO模式三单点注销步骤。</li>
<li>新增：登录认证文档添加 Cookie 查看步骤演示图。</li>
<li>新增：多账号模式新增注意点：运行时不可更改 <code>LoginType</code>。</li>
<li>新增: 多账号模式QA：在一个接口里获取是哪个体系的账号正在登录。</li>
<li>新增：新增QA：解决低版本 <code>SpringBoot (&lt;2.2.0)</code> 引入 Sa-Token 报错的问题。</li>
<li>新增：新增QA：前后端一体项目下，在拦截未登录进入登录页面时，如何登录完成后原路返回？</li>
<li>新增：新增QA：Sa-Token 集成 Redis 如何集群？</li>
<li>新增：新增QA：如何自定义框架读取 token 的方式？</li>
<li>新增：新增QA：修改 <code>hosts</code> 文件无效可能原因排查。</li>
<li>新增：新增QA：如何防止 CSRF 攻击。</li>
<li>新增: “异步 &amp; Mock 上下文” 章节。</li>
<li>升级：升级“自定义 SaTokenContext 指南”章节文档。</li>
</ul>
</li>
</ul>
<p>更新日志在线文档直达链接：<a href="https://sa-token.cc/doc.html#/more/update-log" target="_blank" rel="noopener nofollow">https://sa-token.cc/doc.html#/more/update-log</a></p>
<h3 id="-其它">🌟 其它</h3>
<p>代码仓库地址：<a href="https://gitee.com/dromara/sa-token" target="_blank" rel="noopener nofollow">https://gitee.com/dromara/sa-token</a></p>
<p>框架功能结构图：</p>
<p><img src="https://oss.dev33.cn/sa-token/art/sa-token-js4.png" alt="js" loading="lazy"></p>

</div>
<div class="clear"></div>

        </div>
        <p class="postfoot">
            posted on 
<span id="post-date" data-last-update-days="0.3128496229675926" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-12 18:49">2025-04-12 18:48</span>&nbsp;
<a href="https://www.cnblogs.com/shengzhang">孔明click33</a>&nbsp;
阅读(<span id="post_view_count">15</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18822433);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18822433', targetLink: 'https://www.cnblogs.com/shengzhang/p/18822433', title: 'Sa-Token v1.42.0 发布 &amp;#128640;，新增 API Key、TOTP 验证码、RefreshToken 反查等能力' })">举报</a>

        </p>
    