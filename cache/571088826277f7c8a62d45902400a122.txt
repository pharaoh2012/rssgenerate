<!----> <meta itemprop="headline" content="那个让我熬夜到两点的数字滚动效果，原来是这样实现的！"> <meta itemprop="keywords" content="前端,JavaScript,Vue.js"> <meta itemprop="datePublished" content="2025-05-13T07:23:43.000Z"> <meta itemprop="image" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-128.png~tplv-t2oaga2asx-image.image"> <div itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><meta itemprop="name" content="三个木base"> <meta itemprop="url" content="https://juejin.cn/user/4068606580101006"></div> <div itemprop="publisher" itemscope="itemscope" itemtype="http://schema.org/Organization"><meta itemprop="name" content="掘金"> <div itemprop="logo" itemscope="itemscope" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-white-180.png~tplv-t2oaga2asx-image.image"> <meta itemprop="width" content="180"> <meta itemprop="height" content="180"></div></div> <h1 class="article-title" data-v-61fb5e44="">
            那个让我熬夜到两点的数字滚动效果，原来是这样实现的！
            <!----> <!----></h1> <div class="author-info-block block-hidden" data-v-61fb5e44=""><div class="author-info-box" data-v-61fb5e44=""><div class="author-name" data-v-61fb5e44=""><a href="/user/4068606580101006/posts" target="_blank" rel="" class="jj-link username username ellipsis" data-v-65b50b51="" data-v-292f6e48="" data-v-61fb5e44=""><span class="name" style="max-width:160px;" data-v-65b50b51="" data-v-292f6e48="">
    三个木base
  </span> <!----> <!----> <!----> </a></div> <div class="meta-box" data-v-61fb5e44=""><time datetime="2025-05-13T07:23:43.000Z" title="Tue May 13 2025 07:23:43 GMT+0000 (Coordinated Universal Time)" class="time" data-v-61fb5e44="">
                    2025-05-13
                  </time> <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" class="read-icon" data-v-61fb5e44=""><path d="M7.90078 2.80078C4.49278 2.80078 1.74745 6.11672 0.800781 7.77469C1.74745 9.58339 4.49278 13.2008 7.90078 13.2008C11.3088 13.2008 14.0541 9.58339 15.0008 7.77469C14.0541 6.11672 11.3088 2.80078 7.90078 2.80078Z" stroke="currentColor" data-v-61fb5e44=""></path><circle cx="7.89922" cy="8.00078" r="2.2" stroke="currentColor" data-v-61fb5e44=""></circle></svg> <span class="views-count" data-v-61fb5e44="">
                    6,971
                  </span> <span class="read-time" data-v-61fb5e44=""><svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" data-v-61fb5e44=""><rect width="16" height="16" fill="none" data-v-61fb5e44=""></rect><circle cx="8" cy="8" r="5.65625" stroke="#8A919F" data-v-61fb5e44=""></circle><path d="M7.69141 5.18652V8.30924H10.8141" stroke="#8A919F" stroke-linecap="round" stroke-linejoin="round" data-v-61fb5e44=""></path></svg>
                    阅读3分钟
                  </span> <!----></div></div> <div style="flex:1;" data-v-61fb5e44=""></div> <!----> <!----></div> <!----> <!----> <!----> <!----> <div id="article-root" itemprop="articleBody" class="main" data-v-61fb5e44=""><div class="article-viewer markdown-body result"><h2 data-id="heading-0">那个让我熬夜到两点的数字滚动效果，原来是这样实现的！</h2>
<h3 data-id="heading-1">缘起：被某度首页种草的计数器</h3>
<p>昨晚刷着手机，突然看到某度首页那个酷炫的AI调用次数计数器——数字像滚筒洗衣机一样唰唰滚动，最后稳稳停在目标数值。作为一个前端小菜鸟，我眼睛"叮"地亮了起来："这个效果！我一定要自己实现出来！"</p>
<h3 data-id="heading-2">踩坑之路：从"简单"到"真香"</h3>
<h4 data-id="heading-3">第一版尝试：CSS关键帧硬刚</h4>
<pre><code class="hljs language-css" lang="css"><span class="hljs-comment">/* 天真的初始方案 */</span>
<span class="hljs-keyword">@keyframes</span> roll {
  <span class="hljs-number">0%</span> { <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(<span class="hljs-number">0</span>); }
  <span class="hljs-number">100%</span> { <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(-<span class="hljs-number">600px</span>); }
}
</code></pre>
<p>结果数字像跳楼一样直上直下，完全没有丝滑的滚动感。这时候我才意识到，某度那个效果的精髓在于<strong>模拟真实物理运动的惯性</strong>。</p>
<h4 data-id="heading-4">凌晨一点的顿悟时刻</h4>
<p>当我打开开发者工具仔细分析某度实现时，发现了三个关键点：</p>
<ol>
<li>每个数字位的滚动速度不同，像水流一样依次启动</li>
<li>数字到达目标后还会轻微回弹，就像刹车时的惯性</li>
<li>滚动轨迹不是匀速，而是先快后慢的缓动效果</li>
</ol>
<h3 data-id="heading-5">核心实现：物理惯性模拟的奥秘</h3>
<h4 data-id="heading-6">灵魂参数表（调了整整一下午！）</h4>
<pre><code class="hljs language-arduino" lang="arduino"><span class="hljs-type">const</span> CONFIG = {
  DURATION: <span class="hljs-number">2000</span>,       <span class="hljs-comment">// 总动画时长（手抖调成200会鬼畜）</span>
  ROLL_COUNT: <span class="hljs-number">2</span>,        <span class="hljs-comment">// 额外空转圈数（像洗衣机甩干）</span>
  DELAY_BETWEEN_DIGITS: <span class="hljs-number">40</span>, <span class="hljs-comment">// 数字间延迟（制造波浪感）</span>
  DIGIT_HEIGHT: <span class="hljs-number">60</span>,     <span class="hljs-comment">// 单个数字高度（改这个要老命）</span>
};
</code></pre>
<h4 data-id="heading-7">让我掉了一把头发的核心算法</h4>
<pre><code class="hljs language-scss" lang="scss"><span class="hljs-comment">// 这个公式我对着墙壁比划了半小时才理解</span>
const targetY = <span class="hljs-built_in">-</span>(CONFIG.ROLL_COUNT * <span class="hljs-number">10</span> + targetDigit) * CONFIG<span class="hljs-selector-class">.DIGIT_HEIGHT</span>;

<span class="hljs-comment">// 举个例子：要显示数字7，实际要滚动(2圈*10 +7)=27个数字的高度</span>
<span class="hljs-comment">// 这样就有"先转两圈再慢慢停到7"的效果！</span>
</code></pre>
<h4 data-id="heading-8">最终折腾出来的DOM结构</h4>
<pre><code class="hljs language-xml" lang="xml"><span class="hljs-comment">&lt;!-- 每个数字位都是独立滚筒 --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"digit-container"</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"digit-list"</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"transition: transform 1.8s ease-out"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"digit"</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"digit"</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    ...（此处省略20个数字）
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"digit"</span>&gt;</span>9<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
</code></pre>
<h3 data-id="heading-9">🌟完整源码（含详细注释版）</h3>
<pre><code class="hljs language-xml" lang="xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"zh-CN"</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>数字滚动计数器效果<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">
      <span class="hljs-selector-tag">body</span> {
        <span class="hljs-attribute">font-family</span>: Arial, sans-serif;
        <span class="hljs-attribute">display</span>: flex;
        <span class="hljs-attribute">justify-content</span>: center;
        <span class="hljs-attribute">align-items</span>: center;
        <span class="hljs-attribute">height</span>: <span class="hljs-number">100vh</span>;
        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;
        <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f5f5f5</span>;
      }

      <span class="hljs-selector-class">.counter-container</span> {
        <span class="hljs-attribute">display</span>: flex;
        <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fff</span>;
        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">8px</span>;
        <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;
        <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">4px</span> <span class="hljs-number">12px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.1</span>);
      }

      <span class="hljs-selector-class">.digit-container</span> {
        <span class="hljs-attribute">width</span>: <span class="hljs-number">40px</span>;
        <span class="hljs-attribute">height</span>: <span class="hljs-number">60px</span>;
        <span class="hljs-attribute">overflow</span>: hidden;
        <span class="hljs-attribute">position</span>: relative;
        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">2px</span>;
      }

      <span class="hljs-selector-class">.digit-list</span> {
        <span class="hljs-attribute">position</span>: absolute;
        <span class="hljs-attribute">transition</span>: transform <span class="hljs-number">2s</span> ease-in-out;
        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(<span class="hljs-number">0</span>);
      }

      <span class="hljs-selector-class">.digit</span> {
        <span class="hljs-attribute">display</span>: flex;
        <span class="hljs-attribute">justify-content</span>: center;
        <span class="hljs-attribute">align-items</span>: center;
        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">36px</span>;
        <span class="hljs-attribute">height</span>: <span class="hljs-number">60px</span>;
        <span class="hljs-attribute">font-weight</span>: bold;
      }

      <span class="hljs-selector-class">.prefix</span>,
      <span class="hljs-selector-class">.suffix</span> {
        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">24px</span>;
        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">10px</span>;
        <span class="hljs-attribute">align-self</span>: center;
      }

      <span class="hljs-selector-id">#counter</span> {
        <span class="hljs-attribute">display</span>: flex;
      }
    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"counter-container"</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"prefix"</span>&gt;</span>今日已解决<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"counter"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"suffix"</span>&gt;</span>个问题<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">
      <span class="hljs-comment">// 配置参数</span>
      <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">CONFIG</span> = {
        <span class="hljs-attr">DURATION</span>: <span class="hljs-number">2000</span>, <span class="hljs-comment">// 动画持续时间（毫秒）</span>
        <span class="hljs-attr">ROLL_COUNT</span>: <span class="hljs-number">2</span>, <span class="hljs-comment">// 数字滚动的额外循环次数</span>
        <span class="hljs-attr">DELAY_BETWEEN_DIGITS</span>: <span class="hljs-number">40</span>, <span class="hljs-comment">// 数字之间的延迟时间（毫秒）</span>
        <span class="hljs-attr">DIGIT_HEIGHT</span>: <span class="hljs-number">60</span>, <span class="hljs-comment">// 数字高度（像素）</span>
        <span class="hljs-attr">TARGET_NUMBER</span>: <span class="hljs-number">7140909</span>, <span class="hljs-comment">// 目标数字</span>
      };

      <span class="hljs-keyword">function</span> <span class="hljs-title function_">createCounter</span>(<span class="hljs-params">targetNumber</span>) {
        <span class="hljs-keyword">const</span> counterEl = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">"counter"</span>);
        <span class="hljs-keyword">const</span> digits = targetNumber.<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">split</span>(<span class="hljs-string">""</span>);

        <span class="hljs-comment">// 为每个数字创建容器和滚动效果</span>
        digits.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">digit, index</span>) =&gt;</span> {
          <span class="hljs-keyword">const</span> digitContainer = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">"div"</span>);
          digitContainer.<span class="hljs-property">className</span> = <span class="hljs-string">"digit-container"</span>;

          <span class="hljs-keyword">const</span> digitList = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">"div"</span>);
          digitList.<span class="hljs-property">className</span> = <span class="hljs-string">"digit-list"</span>;

          <span class="hljs-comment">// 设置动画延迟，从左到右依次延迟</span>
          <span class="hljs-keyword">const</span> delay =
            (digits.<span class="hljs-property">length</span> - index - <span class="hljs-number">1</span>) * <span class="hljs-variable constant_">CONFIG</span>.<span class="hljs-property">DELAY_BETWEEN_DIGITS</span>;
          digitList.<span class="hljs-property">style</span>.<span class="hljs-property">transition</span> = <span class="hljs-string">`transform <span class="hljs-subst">${
            CONFIG.DURATION - delay
          }</span>ms ease-in-out`</span>;

          <span class="hljs-comment">// 创建滚动序列（0-9 重复多次）</span>
          <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-variable constant_">CONFIG</span>.<span class="hljs-property">ROLL_COUNT</span>; i++) {
            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">10</span>; j++) {
              <span class="hljs-keyword">const</span> digitEl = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">"div"</span>);
              digitEl.<span class="hljs-property">className</span> = <span class="hljs-string">"digit"</span>;
              digitEl.<span class="hljs-property">textContent</span> = j;
              digitList.<span class="hljs-title function_">appendChild</span>(digitEl);
            }
          }

          digitContainer.<span class="hljs-title function_">appendChild</span>(digitList);
          counterEl.<span class="hljs-title function_">appendChild</span>(digitContainer);
        });

        <span class="hljs-comment">// 开始动画</span>
        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {
          <span class="hljs-title function_">animateToTarget</span>(targetNumber);
        }, <span class="hljs-number">100</span>);
      }
      <span class="hljs-comment">// 启动动画</span>
      <span class="hljs-keyword">function</span> <span class="hljs-title function_">animateToTarget</span>(<span class="hljs-params">targetNumber</span>) {
        <span class="hljs-keyword">const</span> digits = targetNumber.<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">split</span>(<span class="hljs-string">""</span>);
        <span class="hljs-keyword">const</span> digitLists = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">".digit-list"</span>);
      
        digitLists.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">list, i</span>) =&gt;</span> {
          <span class="hljs-keyword">const</span> targetDigit = <span class="hljs-built_in">parseInt</span>(digits[i], <span class="hljs-number">10</span>);
          <span class="hljs-comment">//关键计算公式！（总滚动距离 = 惯性圈数*10 + 目标数字）</span>
          <span class="hljs-keyword">const</span> extraRolls = <span class="hljs-variable constant_">CONFIG</span>.<span class="hljs-property">ROLL_COUNT</span> * <span class="hljs-number">10</span>;
          <span class="hljs-keyword">const</span> targetY = -(extraRolls + targetDigit) * <span class="hljs-variable constant_">CONFIG</span>.<span class="hljs-property">DIGIT_HEIGHT</span>;

          list.<span class="hljs-property">style</span>.<span class="hljs-property">transform</span> = <span class="hljs-string">`translateY(<span class="hljs-subst">${targetY}</span>px)`</span>;
        });
      }

      <span class="hljs-comment">// 初始化计数器</span>
      <span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {
        <span class="hljs-title function_">createCounter</span>(<span class="hljs-variable constant_">CONFIG</span>.<span class="hljs-property">TARGET_NUMBER</span>);
      };
    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span>
</code></pre>
<h3 data-id="heading-10">效果：🎉🎉</h3>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/626e7ec924734b6785c22543616366ca~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5LiJ5Liq5pyoYmFzZQ==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1755585138&amp;x-signature=HsX%2FG0FUIFNYTYsziQiXUX1yVHc%3D" alt="2025-05-2709.58.28-ezgif.com-video-to-gif-converter.gif" loading="lazy"></p>
<h3 data-id="heading-11">后记：向某度工程师致敬</h3>
<p>当我终于复现出这个效果时，已经是凌晨两点半。看着屏幕上流畅滚动的数字，突然想起《月亮与六便士》里的一句话："美是难的"。这个看似简单的效果，背后是对用户体验的极致追求——<strong>多一圈则浮夸，少一圈则生硬</strong>的微妙平衡。</p>
<p>或许这就是前端的魅力所在：用逻辑雕琢美感，让理性的数字跳起感性的芭蕾。如果这个实现过程对你有启发，欢迎点赞+关注+转发，也欢迎在评论区留下你的优化方案~</p></div></div>