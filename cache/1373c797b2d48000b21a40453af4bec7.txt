
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/isyues/p/18794821" title="发布于 2025-03-27 18:55">
    <span role="heading" aria-level="2">通俗易懂分布式事务之2PC、3PC、Seata AT模式、Seata TCC模式</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="通俗易懂分布式事务之2pc3pcattcc">通俗易懂分布式事务之2PC、3PC、AT、TCC</h1>
<p>单机服务事务提交回滚操作是需要拿到Connection对象，调用提交commit方法或者rollback方法回滚的，例如下面操作</p>
<pre><code class="language-java">Connection conn = DriverManager.getConnection(...);
try{
  con.setAutoCommit(false);
  Statement stmt = con.createStatement();
  //1 or more queries or updates
  con.commit();
}catch(Exception e){
  con.rollback();
}finally{
  con.close();
}
</code></pre>
<p>要想提交或者回滚，必须拥有Connection对象，然而在分布式环境，jvm都是不同的，自然就拿不到其他服务的Connection对象，所以在分布式环境，我们无法保证原子性。因此分布式事务就需要另寻出路。</p>
<h2 id="1-术语">1. 术语</h2>
<ul>
<li>全局事务：分布式环境，操作涉及很多服务，全局事务能保证这些服务的原子性，要提交就全部服务都会提交，要回滚全部服务都会回滚</li>
<li>分支事务：分支事务建立在全局事务当中，是属于单个服务的事务</li>
</ul>
<h2 id="2-2pc">2. 2PC</h2>
<p>2PC 即两阶段提交协议，是将整个事务流程分为两个阶段，准备阶段（Prepare phase）、提交阶段（commit phase）<br>
与本地事务的区别就是 会加入一个事务协调者的角色，这个事务协调者控制整体的事务提交</p>
<h3 id="21-流程">2.1 流程</h3>
<ol>
<li>PreCommit阶段<br>
事务协调者开启全局事务，参与者向事务协调者注册分支事务，然后走自己的业务代码，在这过程中如果发生了异常参与者会发送信息到事务协调者我异常了，需要全部回滚。如果一切正常，告诉事务协调者我可以提交了，等待事务协调者发送commit指令</li>
<li>Commit阶段<br>
事务协调者向所有分支事务发送commit指令，释放数据库资源</li>
</ol>
<p>在这里举个具体的例子<br>
我们有两个服务：订单服务、库存服务<br>
用户需要买东西，首先要创建订单，创建订单前需要去锁定库存，然后再去创建订单。</p>
<pre><code>1. 事务协调者开启全局事务
2. 库存服务开启事务，向事务协调者注册一个分支事务
3. 库存服务锁定库存
4. 订单服务开启事务，向事务协调者注册一个分支事务
5. 订单服务创建订单
6. 事务协调者进行全局提交事务
7. 库存服务提交事务
8. 订单服务提交事务
9. 全局事务完成
</code></pre>
<p>在任何一个流程中异常，事务协调者都会发起全局回滚事务，这种方式，在全局事务完成前，Connection对象都不会释放，因为你释放了你就无法控制了，缺点很明显，如果订单服务需要处理很久，库存服务Connection对象都不会释放，一直占用着，这种是强原子性的很浪费资源</p>
<h3 id="22-实现2pc">2.2 实现2PC</h3>
<p>XA协议，是X/Open组织提出的跨异构技术实现2PC的接口标准。<br>
使用XA协议首先前提就是，需要关系型数据库支持，目前主流数据库：</p>
<ul>
<li>MySQL: InnoDB 引擎支持 XA 事务，并实现了 XA 接口。</li>
<li>PostgreSQL: 从版本 8.0 开始支持 XA 事务，通过插件接口实现。</li>
<li>Oracle: 支持 XA 事务，使用 OracleXADataSource 提供 XA 接口。</li>
<li>SQL Server: 支持 XA 事务，使用 MSDTC 提供 XA 接口。</li>
<li>DB2: 支持 XA 事务，使用 DB2 Universal JDBC 驱动器提供 XA 接口。</li>
<li>Sybase ASE: 支持 XA 事务，使用 JConnect 提供 XA 接口。</li>
</ul>
<h4 id="221-mysql实现流程">2.2.1 MySQL实现流程：</h4>
<ol>
<li>START</li>
</ol>
<p>第一步开启XA事务<br>
库存DB:</p>
<pre><code class="language-shell">XA START 'xid'
UPDATE  product SET num = num - 1 where id = 100
XA END 'xid'
</code></pre>
<p>订单DB:</p>
<pre><code class="language-shell">XA START 'xid'
INSERT INTO order values(xxx)
XA END 'xid'
</code></pre>
<ol start="2">
<li>PREPARE</li>
</ol>
<p>第二步，准备就绪，等待事务协调者同意我提交<br>
库存DB:</p>
<pre><code class="language-shell">XA PREPARE 'xid'
</code></pre>
<p>订单DB:</p>
<pre><code class="language-shell">XA PREPARE 'xid'
</code></pre>
<ol start="3">
<li>commit</li>
</ol>
<p>全部提交<br>
库存DB</p>
<pre><code class="language-shell">XA COMMIT 'xid'
</code></pre>
<p>订单DB:</p>
<pre><code class="language-shell">XA COMMIT 'xid'
</code></pre>
<h4 id="223-seata支持xa">2.2.3 seata支持XA</h4>
<p>XA协议JDK接口定义：<code>javax.sql.XADataSource</code><br>
seata框架支持XA协议，seataXA模式文档：<a href="https://seata.apache.org/zh-cn/docs/v1.6/dev/mode/xa-mode/" target="_blank" rel="noopener nofollow">https://seata.apache.org/zh-cn/docs/v1.6/dev/mode/xa-mode/</a><br>
seata官方XA模式demo：<br>
<a href="https://github.com/apache/incubator-seata-samples/tree/master/xa-sample/springboot-feign-seata-xa" target="_blank" rel="noopener nofollow">https://github.com/apache/incubator-seata-samples/tree/master/xa-sample/springboot-feign-seata-xa</a></p>
<h3 id="23-2pc缺陷">2.3 2PC缺陷</h3>
<ul>
<li>强一致性，每个分支事务得等待所有分支事务都准备好，才能提交释放</li>
<li>协调者发生故障。分支事务会一直阻塞下去。</li>
</ul>
<h2 id="3-3pc">3. 3PC</h2>
<p>三阶段提交协议（3PC）主要是为了解决两阶段提交协议的阻塞问题，2pc存在的问题是当协作者崩溃时，参与者一直阻塞。<br>
与两阶段提交不同的是</p>
<ol>
<li>引入超时机制</li>
<li>在最前面引入CanCommit阶段，为了防止参与者服务不可用，询问各个服务能不能开启事务</li>
</ol>
<h3 id="31-流程">3.1 流程：</h3>
<ol>
<li>CanCommit阶段<br>
事务询问阶段，协调者向参与者发送CanCommit请求，询问是否可以执行事务提交操作。如果有参与者返回NO，就不进行下一步操作了</li>
<li>PreCommit阶段<br>
进入PreCommit后就和2PC一样了，区别就是有超时机制</li>
<li>Commit阶段<br>
提交，释放数据库资源，与2PC一样</li>
</ol>
<h3 id="32-缺点">3.2 缺点</h3>
<p>还是要等到全局事务完毕资源才释放，占用资源大</p>
<h2 id="4-seata-at模式">4. Seata AT模式</h2>
<p>Seata AT模式文档：<a href="https://seata.apache.org/zh-cn/docs/v1.6/dev/mode/at-mode" target="_blank" rel="noopener nofollow">https://seata.apache.org/zh-cn/docs/v1.6/dev/mode/at-mode</a><br>
Seata AT模式的核心是对业务无侵入，是一种改进后的2PC</p>
<p>主要的实现是，在每个服务的数据库中新建一张undo_log表，结构如下：<br>
<img src="https://img2024.cnblogs.com/blog/2467620/202503/2467620-20250326220556246-1311131903.png" alt="image" loading="lazy"><br>
<img src="https://img2024.cnblogs.com/blog/2467620/202503/2467620-20250326220856635-921119633.png" alt="image" loading="lazy"></p>
<blockquote>
<p>content: 更改后的内容，<br>
rollback_info: 回滚的内容</p>
</blockquote>
<p>每个分支事务执行SQL都会解析SQL，保存content，rollback_info，插入到undo_log表中。如果全局事务通知需要回滚，去通过对比content和解析rollback_info，执行sql达到回滚的效果，如果全局事务通知全局事务成功，异步删除undo_log的记录。<br>
这种方式不需要等待全局事务的提交才提交，能解决2PC、3PC资源占用的问题，实际就是异常就去补偿的思想</p>
<h3 id="41-流程">4.1 流程</h3>
<ol>
<li>事务入口会开启全局事务</li>
<li>分支事务执行SQL之前会解析SQL，生成前置镜像</li>
<li>解析出SQL如果是更新修改数据这种情况，seata会锁住更新修改的数据，另一个全局事务进来想要更改更新修改的数据就需要等待全局事务结束才能进行更改对应着seata的lock_table表<br>
<img src="https://img2024.cnblogs.com/blog/2467620/202503/2467620-20250327171808559-1081209803.png" alt="image" loading="lazy"></li>
<li>执行SQL</li>
<li>根据SQL生成后置镜像，如果到时候需要回滚，直接执行后置镜像</li>
<li>插入数据到undo_log表</li>
<li>分支事务注册事务（非入口事务通过传递xid来判断是加入哪个事务）</li>
<li>提交本地事务</li>
<li>如果所有分支事务都是正常的，就释放锁，然后异步删除所有的分支事务undo_log的记录</li>
<li>如果发生异常，所有事务都对前置镜像进行解析，生成SQL，执行回滚操作</li>
<li>如果发生异常，需要回滚，后置镜像当中的值，不等于当前值，代表有其他业务一样的更改了这行数据，这时候就需要人工去处理了（往往如果设置了数据库字段update_time自动更新时间会很容易导致这个情况出现，不能用数据库的自动更新时间，自动更新时间得去到业务代码实现里）<br>
<img src="https://img2024.cnblogs.com/blog/2467620/202503/2467620-20250327202159611-30575530.png" alt="image" loading="lazy"></li>
</ol>
<h3 id="42-缺点">4.2 缺点</h3>
<p>seata AT模式，事务是软状态需要考虑数据最终一致性，性能相对来说不是那么高，得去加锁，得动态去解析SQL插入数据库增加了和数据库的交互</p>
<h2 id="5-seata-tcc模式">5. Seata TCC模式</h2>
<p>Seata  TCC模式文档：<a href="https://seata.apache.org/zh-cn/docs/v1.6/dev/mode/tcc-mode" target="_blank" rel="noopener nofollow">https://seata.apache.org/zh-cn/docs/v1.6/dev/mode/tcc-mode</a></p>
<p>TCC 是分布式事务中的二阶段提交协议，它的全称为 Try-Confirm-Cancel，即资源预留（Try）、确认操作（Confirm）、取消操作（Cancel），TCC模式对代码的入侵很大，但它的性能很好，还可以便捷的解决、空回滚、幂等、悬挂问题。</p>
<blockquote>
<p>空回滚：没有执行try却执行了cancel。参与者分支注册完成之后会执行参与者一阶段try RPC 方法发送rpc时候网络延迟抖动，事务协调者全局回滚，参与者没有执行try却进入cancel</p>
</blockquote>
<blockquote>
<p>幂等：多次进入try。执行完二阶段之后，由于网络抖动或者宕机问题，会造成事务协调者收不到参与者执行confirm的返回结果，事务协调者会重复发起调用，直到二阶段执行结果成功</p>
</blockquote>
<blockquote>
<p>悬挂：执行了cancel又进入try。进入try 方法时，出现网路拥堵，由于 seata 全局事务有超时限制，执行 try 方法超时后，进行全局回滚，回滚完成后如果此时 RPC 请求才到达参与者 ，执行 try 方法进行资源预留，从而造成悬挂。</p>
</blockquote>
<p>Seata社区这个博客写的挺好 <a href="https://seata.apache.org/zh-cn/blog/seata-tcc/" target="_blank" rel="noopener nofollow">https://seata.apache.org/zh-cn/blog/seata-tcc/</a> 解释了seata是怎么样处理解决、空回滚、幂等、悬挂问题。</p>
<h3 id="51-流程">5.1 流程</h3>
<p>假设一个转账需求，A给B转100，一般做法是判断够不够钱，如果够钱A-100，B+100<br>
在TCC模式下把这个需求拆分为 Try-Confirm-Cancel</p>
<ol>
<li>try 阶段（预留资源），查询A够不够钱，够的话冻结A 100块钱</li>
<li>confirm阶段（确认操作），执行业务代码，预先给B + 100</li>
<li>如果一切正常，执行A-100，B + 100</li>
<li>Cancel阶段（预留资源的取消，使资源回到初始状态），如果有异常，执行try的回滚逻辑，A解除冻结的100<br>
<img src="https://img2024.cnblogs.com/blog/2467620/202503/2467620-20250327202327283-1759101731.png" alt="image" loading="lazy"></li>
</ol>
<h3 id="52-缺点">5.2 缺点</h3>
<p>TCC模式有代码侵入，需要把一个业务拆分为三个方法，事务具有软状态，确认和取消操作都可能出现问题，需要考虑如何处理失败情况以保证最终一致性</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.6237231745416667" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-27 21:22">2025-03-27 18:55</span>&nbsp;
<a href="https://www.cnblogs.com/isyues">isyues</a>&nbsp;
阅读(<span id="post_view_count">63</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18794821" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18794821);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18794821', targetLink: 'https://www.cnblogs.com/isyues/p/18794821', title: '通俗易懂分布式事务之2PC、3PC、Seata AT模式、Seata TCC模式' })">举报</a>
</div>
        