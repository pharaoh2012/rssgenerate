
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/666-777-eto/p/18644535" title="发布于 2024-12-31 17:41">
    <span role="heading" aria-level="2">从零开始的Python世界生活——语法基础先导篇（Python小白零基础光速入门上手）</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        本文适合Python初学者阅读学习，整体内容循序渐进，介绍了搭建基础开发环境，注释使用，输出函数，变量，数学运算，字符串处理，条件语句，循环语句。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="从零开始的python世界生活语法基础先导篇python小白零基础光速入门上手">从零开始的Python世界生活——语法基础先导篇（Python小白零基础光速入门上手）</h1>
<h2 id="1-准备阶段">1. 准备阶段</h2>
<h3 id="11-下载并安装python">1.1 下载并安装Python</h3>
<h4 id="111-下载步骤">1.1.1 下载步骤：</h4>
<ol>
<li>访问Python官方网站：<a href="https://www.python.org/downloads/" target="_blank" rel="noopener nofollow">点击这里下载Python</a></li>
<li>在页面上，选择适合你操作系统的Python版本（Windows、macOS或Linux）。</li>
<li>点击下载按钮，开始下载安装程序。</li>
</ol>
<h4 id="112-安装步骤">1.1.2 安装步骤：</h4>
<ol>
<li><strong>运行安装程序</strong>：
<ul>
<li>找到刚刚下载的文件，通常在你的“下载”文件夹中，文件名可能类似于<code>python-3.x.x.exe</code>（Windows）或<code>python-3.x.x-macos11.pkg</code>（macOS）。</li>
<li>双击文件以启动安装程序。</li>
</ul>
</li>
<li><strong>重要设置</strong>：
<ul>
<li>在安装向导的第一个界面，<strong>勾选“Add Python to PATH”</strong>选项。这一步非常重要，它允许你在命令行中直接运行Python。</li>
</ul>
</li>
<li><strong>选择安装类型</strong>：
<ul>
<li>选择“Install Now”以进行默认安装。这将安装所有推荐的设置。</li>
<li>如果你希望自定义安装选项，可以选择“Customize Installation”，根据提示选择特定的组件。</li>
</ul>
</li>
<li><strong>完成安装</strong>：
<ul>
<li>等待安装程序完成所有操作，屏幕上会显示安装成功的消息。</li>
<li>点击“Close”退出安装向导。</li>
</ul>
</li>
</ol>
<h3 id="12-下载并安装pycharm">1.2 下载并安装PyCharm</h3>
<h4 id="121-下载步骤">1.2.1 下载步骤：</h4>
<ol>
<li>访问PyCharm官网下载：<a href="https://www.jetbrains.com.cn/en-us/pycharm/download/?section=windows" target="_blank" rel="noopener nofollow">点击这里下载PyCharm</a></li>
<li>页面上会显示PyCharm Professional（专业版）和PyCharm Community Edition（社区版）。</li>
<li>向下滚动，找到黑色部分的<strong>PyCharm Community Edition</strong>，点击<strong>Download</strong>以开始下载（非Windows用户请选择对应的操作系统）。</li>
</ol>
<h4 id="122-安装步骤">1.2.2 安装步骤：</h4>
<p><strong>运行安装程序</strong>：</p>
<ul>
<li>找到下载的安装文件（通常在“下载”文件夹），文件名可能是 <code>pycharm-community-xxxx.x.exe</code>（Windows）或 <code>pycharm-community-xxxx.x.dmg</code>（macOS）。</li>
<li>双击文件以启动安装程序。</li>
</ul>
<p><strong>安装设置</strong>：</p>
<ul>
<li><strong>Windows用户</strong>：
<ul>
<li>初始界面中，会询问是否接受许可协议，选择“接受”。</li>
<li>选择安装位置（默认即可），点击“Next”。</li>
<li>选择安装选项，如果不确定，可以保持默认设置，点击“Next”。</li>
</ul>
</li>
<li><strong>macOS用户</strong>：
<ul>
<li>拖动PyCharm图标到“应用程序”文件夹中，等待复制完成。</li>
</ul>
</li>
</ul>
<p><strong>完成安装</strong>：</p>
<ul>
<li><strong>Windows用户</strong>：点击“Install”开始安装，等待完成后点击“Finish”。</li>
<li><strong>macOS用户</strong>：完成后，可以在“应用程序”中找到PyCharm，双击启动。</li>
</ul>
<p><strong>初始设置</strong>：</p>
<ul>
<li>启动PyCharm后，会显示欢迎界面。你可以选择导入对之前版本的设置，或者直接选择“无设置”开始。</li>
<li>选择所需主题（白色或黑色）并设置其他偏好，然后点击“下一步”直到完成。</li>
</ul>
<p><strong>创建新项目</strong>：</p>
<ul>
<li>从欢迎界面点击“新建项目”，选择一个目录，并为你的项目命名。选择Python的解释器（可以使用默认选择），然后点击“创建”。</li>
</ul>
<p><strong>确认成功</strong>：</p>
<ul>
<li>新项目创建完成后，PyCharm会打开一个编辑器窗口，显示你已准备好进行Python编程。</li>
</ul>
<p>通过这些准备步骤，你将能够顺利开始你的Python学习之旅。。(如果准备顺利的话。。。)</p>
<h2 id="2开始编程之旅">2.开始编程之旅</h2>
<p>试试运行你的第一段代码</p>
<pre><code class="language-python">print("Python是世界上最好的语言")
</code></pre>
<p>让我们实际试一下：</p>
<ol>
<li>打开PyCharm</li>
<li>在编辑器中输入这行代码</li>
<li>点击右键，选择"Run"（运行）</li>
</ol>
<p>你应该能看到输出窗口显示：</p>
<pre><code>Python是世界上最好的语言  
</code></pre>
<p>很简单对吧？这就是你的第一个Python程序！</p>
<h2 id="3在python代码中写注释">3.在Python代码中写注释</h2>
<p>​		假如你在读一本书，有时候会在书的旁边写一些笔记，这些笔记是给你自己看的，帮助你理解书的内容，但不会影响书的原文。在Python中，注释就是这样的"笔记"中有两种写"笔记"（注释）的方式：</p>
<ol>
<li>单行注释：用 <code>#</code> 开头</li>
</ol>
<pre><code class="language-python"># 这是一个注释，电脑会忽略这一行  
print("这行代码会被执行") # 这也是注释，可以写在代码后面  
</code></pre>
<ol>
<li>多行注释：用三个引号 <code>"""</code> 包起来</li>
</ol>
<pre><code class="language-python">"""  
这是多行注释  
可以写很多行  
电脑都会忽略这些内容  
"""  
print("这行代码会被执行")  
</code></pre>
<p>为什么要写注释？</p>
<ul>
<li>就像写笔记一样，帮助你记住代码是做什么用的</li>
<li>当其他人看你的代码时，可以更容易理解</li>
<li>当你几个月后再看自己的代码时，也能快速想起来这段代码的用途</li>
</ul>
<p>让我们来个实际的例子：</p>
<pre><code class="language-python"># 这是一个简单的计算器程序  
print("2 + 2 = 4")  # 显示一个简单的加法算式  
</code></pre>
<p><code>要点</code>：</p>
<p>1.<code>#</code> 后面的内容都是注释，电脑不会执行</p>
<p>2.注释是写给人看的，不是给电脑看的</p>
<p>3.好的注释就像好的笔记一样，简单清晰地解释代码的用途</p>
<h2 id="4python的输出函数print">4.Python的输出函数print()</h2>
<p>你要和一个朋友聊天</p>
<p>当你想说话时，你会直接开口说话</p>
<p>在Python中，<code>print()</code> 就像是"开口说话"</p>
<p>引号里的内容 <code>"Python是世界上最好的语言"</code> 就是你要说的话</p>
<p>所以 <code>print("Python是世界上最好的语言")</code> 就相当于告诉电脑："把这句话说出来！"</p>
<p>试试运行这些代码</p>
<pre><code class="language-python"># 试试打印一些表情符号  
print("😊 你好，Python！")  

# 或者打印多行文字  
print("""  
我是第一行  
我是第二行  
我是第三行  
""")
</code></pre>
<p><code>要点</code></p>
<ol>
<li>Python中的 <code>print()</code> 可以打印任何放在引号中的文字</li>
<li>可以用单引号 <code>'</code> 或双引号 <code>"</code></li>
<li>三个引号 <code>"""</code> 可以打印多行文字</li>
</ol>
<h2 id="5-python中的变量">5. Python中的变量</h2>
<p>​		Python中的变量就像一个带标签的盒子，盒子可以存放任何东西（数字、文字、表情等），标签就是变量的名字，你随时可以更换盒子里的内容。</p>
<p>在Python中创建变量</p>
<pre><code class="language-python"># 创建一个名叫"message"的盒子，里面放入"你好"
message = "你好"
print(message)  # 看看盒子里有什么

# 我们可以随时更换盒子里的内容
message = "Python真有趣"
print(message)  # 再看看盒子里现在有什么
</code></pre>
<h3 id="51-变量的命名规则">5.1 变量的命名规则</h3>
<p>就像给盒子贴标签，变量名符合规则：</p>
<pre><code class="language-python"># 好的变量名示例
zen_of_python = "简单胜于复杂"  
python_version = 3.13  
is_pythonic = True  
PYTHON_BIRTH_YEAR = 1991  # 常量通常用大写  

# 错误的变量名 - 这些都不够Pythonic  
3rd_version = "Python 3"    # 错误：不能用数字开头  
python-version = 3.13        # 错误：不能用减号  
python version = 3.13        # 错误：不能有空格  
class = "Python教程"        # 错误：class是Python关键字  
</code></pre>
<h3 id="52-变量的类型">5.2 变量的类型</h3>
<p>盒子里可以放不同类型的东西：</p>
<pre><code class="language-python"># 放入文字（字符串）
name = "蟒蛇"

# 放入整数
age = 33

# 放入小数（浮点数）
weight = 2.5

# 放入是/否（布尔值）
is_cute = True

# 查看盒子里装的是什么类型
print(type(name))    # &lt;class 'str'&gt;
print(type(age))     # &lt;class 'int'&gt;
print(type(weight))  # &lt;class 'float'&gt;
print(type(is_cute)) # &lt;class 'bool'&gt;
</code></pre>
<h3 id="53-使用变量做计算">5.3 使用变量做计算</h3>
<p>变量不仅可以存储，还能参与运算：</p>
<pre><code class="language-python"># 数字运算
price = 10
number = 3
total = price * number
print(f"总价是：{total}元")  # f-string格式化输出

# 字符串拼接
first_name = "蟒"
last_name = "蛇"
full_name = first_name + last_name
print(full_name)  # 输出：蟒蛇
</code></pre>
<p><code>要点</code></p>
<ol>
<li>变量名可以包含字母、数字和下划线，但不能以数字开头</li>
<li>Python中的变量不需要提前声明类型</li>
<li>变量的值可以随时改变</li>
</ol>
<h2 id="6-python中的数学运算">6. Python中的数学运算</h2>
<p>Python提供了所有基本的数学运算功能</p>
<h3 id="61-基本运算符">6.1 基本运算符</h3>
<pre><code class="language-python">python# 加法（+）  
rice = 25        # 大米25元  
egg = 15         # 鸡蛋15元  
total = rice + egg  
print(f"总共花费：{total}元")    # 输出：总共花费：40元  

# 减法（-）  
money = 100      # 身上带了100元  
cost = 40        # 花费40元  
left = money - cost  
print(f"还剩：{left}元")        # 输出：还剩：60元  

# 乘法（*）  
price = 5        # 每个苹果5元  
number = 3       # 买3个  
pay = price * number  
print(f"需要支付：{pay}元")     # 输出：需要支付：15元  

# 除法（/）- 结果是小数  
money = 100  
people = 3  
each = money / people  
print(f"每人分得：{each}元")    # 输出：每人分得：33.333...元  

# 整除（//）- 结果是整数  
money = 100  
people = 3  
each = money // people  
print(f"每人分得：{each}元")    # 输出：每人分得：33元  

# 取余（%）- 得到除法后的余数  
money = 100  
people = 3  
left = money % people  
print(f"分完后剩：{left}元")    # 输出：分完后剩：1元  

# 幂运算（**）- 次方计算  
side = 2         # 正方形边长2米  
area = side ** 2 # 2的平方  
print(f"正方形面积：{area}平方米")  # 输出：正方形面积：4平方米  
</code></pre>
<p><code>要点</code>：</p>
<ol>
<li><code>+</code> 加法</li>
<li><code>-</code> 减法</li>
<li><code>*</code> 乘法</li>
<li><code>/</code> 除法（结果有小数）</li>
<li><code>//</code> 整除（结果只保留整数）</li>
<li><code>%</code> 取余（得到除法后的余数）</li>
<li><code>**</code> 幂运算（计算次方）</li>
</ol>
<h2 id="7-python中的字符串处理">7. Python中的字符串处理</h2>
<h3 id="71-创建字符串">7.1 创建字符串</h3>
<pre><code class="language-python"># 创建字符串的几种方式  
name = "python"              # 双引号  
message = '你好'           # 单引号  
story = """               # 三引号（可以写多行）  
从前有座山，  
山上有座庙。  
"""  
# 打印看看结果  
print(name)  
print(message)  
print(story)  
</code></pre>
<h3 id="72-字符串拼接">7.2 字符串拼接</h3>
<p>就像把几段文字组合在一起：</p>
<pre><code class="language-python"># 使用加号（+）拼接  
first_name = "蟒"  
last_name = "蛇"  
full_name = first_name + last_name  
print(full_name)  # 输出：蟒蛇

# 使用f-string（推荐的方式）  
age = 33
intro = f"我叫{full_name}，今年{age}岁"  
print(intro)  # 输出：我叫蟒蛇，今年33岁  

# 重复字符串  
star = "★"  
stars = star * 5  
print(stars)  # 输出：★★★★★  
</code></pre>
<h3 id="73-字符串常用操作">7.3 字符串常用操作</h3>
<pre><code class="language-python"># 获取字符串长度  
text = "Python很有趣"  
length = len(text)  
print(f"字符串长度：{length}")  # 输出：字符串长度：6  

# 大小写转换（对英文有效）  
eng_text = "Hello Python"  
print(eng_text.upper())    # 转大写：HELLO PYTHON  
print(eng_text.lower())    # 转小写：hello python  

# 去除空格  
text = "  Python  "  
print(text.strip())        # 去除两边空格：Python  
print(text.lstrip())       # 去除左边空格：Python  
print(text.rstrip())       # 去除右边空格：  Python  

# 替换内容  
text = "我喜欢吃苹果"  
new_text = text.replace("苹果", "香蕉")  
print(new_text)           # 输出：我喜欢吃香蕉  

# 查找内容  
text = "Python是最好的编程语言"  
position = text.find("最好")  
print(f"'最好'的位置：{position}")  # 输出：'最好'的位置：6  
</code></pre>
<p><code>要点</code>：</p>
<ol>
<li>字符串可以用单引号<code>'</code>、双引号<code>"</code>或三引号<code>"""</code>创建</li>
<li>f-string是最方便的字符串格式化方式</li>
<li>字符串可以用加号（+）拼接，用乘号（*）重复</li>
<li>len()函数可以获取字符串长度</li>
</ol>
<h2 id="8-python中的条件语句if语句">8. Python中的条件语句（if语句）</h2>
<h3 id="81-基本的if语句">8.1 基本的if语句</h3>
<p>如果今天下雨，我就带伞</p>
<pre><code class="language-python"># 最简单的if语句
is_raining = True

if is_raining:
    print("记得带伞！")    # 注意：这里要缩进

    print("大雨还在下！")  # 同一个if下的多行语句都要缩进
</code></pre>
<h3 id="82-if-else语句">8.2 if-else语句</h3>
<p>有时候需要"如果...否则..."：</p>
<pre><code class="language-python"># 判断小明是否可以看电影
age = 15
if age &gt;= 18:
    print("您可以观看电影")
else:
    print("对不起，您的年龄不够")
</code></pre>
<h3 id="83-if-elif-else语句">8.3 if-elif-else语句</h3>
<p>处理多个条件：</p>
<pre><code class="language-python"># 判断今天是否适合运动
temperature = 25
is_raining = False

if temperature &gt; 30:
    print("太热了，不适合运动")
elif temperature &lt; 10:
    print("太冷了，不适合运动")
elif is_raining:
    print("下雨了，不适合运动")
else:
    print("天气很好，也不适合运动！")
</code></pre>
<h3 id="84-条件组合">8.4 条件组合</h3>
<p>使用and（且）和or（或）组合多个条件：</p>
<pre><code class="language-python"># 使用and：两个条件都必须为True
age = 20
has_ticket = True

if age &gt;= 18 and has_ticket:
    print("可以进入电影院")
else:
    print("不能进入电影院")

# 使用or：一个条件为True就可以
is_holiday = False
is_weekend = True

if is_holiday or is_weekend:
    print("不可以休息")
else:
    print("要工作")
</code></pre>
<p><code>要点</code>：</p>
<ol>
<li>if语句后面要加冒号<code>:</code></li>
<li>if语句块内的代码必须缩进（通常用4个空格）</li>
<li>elif可以有多个，else最多一个</li>
<li>and表示"且"，两个条件都为True才执行</li>
<li>or表示"或"，一个条件为True就执行</li>
</ol>
<h2 id="9-python中的循环语句">9. Python中的循环语句</h2>
<h3 id="91-for循环">9.1 for循环</h3>
<pre><code class="language-python"># 基本的for循环
for i in range(5):    # 从0数到4
    print(f"数到：{i}")

# 遍历字符串
name = "Python"
for char in name:
    print(char)

# 带步长的循环
for i in range(0, 10, 2): # 从0到9，每次加2
    print(i)  # 输出：0, 2, 4, 6, 8
</code></pre>
<h3 id="92-while循环">9.2 while循环</h3>
<p>当某个条件成立时，一直重复：</p>
<pre><code class="language-python"># 基本的while循环
count = 0
while count &lt; 5:
    print(f"现在是第{count}次")
    count += 1    # 别忘了增加计数，否则会无限循环

# 猜数字游戏
secret = 7
guess = 0
while guess != secret:
    guess = int(input("猜一个数字（1-10）："))
    if guess &gt; secret:
        print("猜大了！")
    elif guess &lt; secret:
        print("猜小了！")
print("恭喜，猜对了！")
</code></pre>
<h3 id="93-循环控制">9.3 循环控制</h3>
<pre><code class="language-python"># break：立即结束整个循环
for i in range(1, 11):
    if i == 5:
        break           # 到5就结束
    print(i)
print("循环结束")

# continue：跳过当前循环，继续下一次
for i in range(1, 6):
    if i == 3:
        continue        # 跳过3
    print(i)

</code></pre>
<h3 id="94-嵌套循环">9.4 嵌套循环</h3>
<p>循环中还可以包含循环：</p>
<pre><code class="language-python"># 打印乘法表
for i in range(1, 10):
    for j in range(1, i + 1):
        print(f"{j}×{i}={i*j}\t", end="")
    print()  # 换行
</code></pre>
<p><code>要点</code>：</p>
<ol>
<li>
<p>for循环适合知道循环次数的情况</p>
</li>
<li>
<p>while循环适合不知道具体循环次数的情况</p>
</li>
<li>
<p>break用于立即结束整个循环</p>
</li>
<li>
<p>continue用于跳过当前循环</p>
</li>
<li>
<p>range()函数可以生成数字序列</p>
</li>
<li>
<p>循环体内的代码必须缩进</p>
</li>
</ol>
<h2 id="总结">总结</h2>
<p>上面的内容，简单介绍了Python语言的部分简单语法。</p>
<blockquote>
<p>入门之道，就在其中</p>
</blockquote>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.01760893616898148" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2024-12-31 17:50">2024-12-31 17:41</span>&nbsp;
<a href="https://www.cnblogs.com/666-777-eto">MPyGF</a>&nbsp;
阅读(<span id="post_view_count">18</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18644535" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18644535);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18644535', targetLink: 'https://www.cnblogs.com/666-777-eto/p/18644535', title: '从零开始的Python世界生活——语法基础先导篇（Python小白零基础光速入门上手）' })">举报</a>
</div>
        