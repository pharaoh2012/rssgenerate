
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/guoxiaoyu/p/18755970" title="发布于 2025-03-10 09:50">
    <span role="heading" aria-level="2">（附体验地址）大模型知识引擎：AI 助手能否助力销售技能提升？</span>
    

</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			    <div id="cnblogs_post_description" style="display: none">
        
        腾讯云的大模型知识引擎本身定位于为企业客户及合作伙伴提供服务，因此我在探索如何最佳利用其现有功能与特点时，专注于实际应用场景的挖掘。为此，今天我搭建出了一个卖车销售话术练习助手，旨在帮助销售人员更高效地提升其销售技能。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>体验地址：<a href="https://lke.cloud.tencent.com/webim_exp/#/chat/FAIMcM" target="_blank" rel="noopener nofollow">https://lke.cloud.tencent.com/webim_exp/#/chat/FAIMcM</a></p>
<p>腾讯云的大模型知识引擎本身定位于为企业客户及合作伙伴提供服务，因此我在探索如何最佳利用其现有功能与特点时，专注于实际应用场景的挖掘。为此，今天我搭建出了一个卖车销售话术练习助手，旨在帮助销售人员更高效地提升其销售技能。</p>
<p>虽然每个人都能尝试当销售，但并不是每个人都能成为一名出色的销售人员。因此，我的目标是通过智能助手帮助销售人员优化话术，并针对性地提供总结与建议，从而帮助他们快速进入工作状态并提升销售业绩。</p>
<h1 id="助手分析">助手分析</h1>
<p>先看下助手的功能，助手同样是基于腾讯云的大模型知识引擎构建，采用工作流模式进行优化和提升，整个过程被细分为几个关键环节：</p>
<p><img src="https://img2024.cnblogs.com/blog/1423484/202503/1423484-20250306172551974-1527623455.png" alt="image" loading="lazy"></p>
<p>第一步：当输入开始时，系统立即进入对话模式。在此阶段，助手首先提供一个随机匹配的客户特征，模拟可能的客户需求。接着，大模型会根据历史数据进行思考和生成一个与客户沟通的初始对话。用户在接收到这一内容后，可继续进行对话互动。</p>
<p>在对话过程中，如果大模型识别到销售人员的话术可能导致客户失去沟通兴趣，它会自动判断并挂断对话。同时，大模型将生成一份针对本次对话的优化建议，帮助销售人员提高沟通策略。</p>
<p>此外，销售人员也可以随时在对话过程中输入“结束”命令，主动结束当前对话。如果销售人员认为对话已无进一步价值或者进展困难时，选择结束对话不仅能节省时间，还能基于对话数据生成合理的反馈总结。</p>
<p>通过这个智能化的流程，系统不仅可以自动化地优化对话内容，还能够通过实时反馈帮助销售人员改进和提升其话术技巧，从而有效提升客户沟通的效率和成功率。</p>
<h1 id="工作流模式">工作流模式</h1>
<p>首先，为了确保我的助手能够严格遵循我设定的游戏规则，我决定将助手配置为单一工作流模式，以此确保每个步骤和操作都能按照我的要求进行。如图所示，这是我所采取的设置方式。</p>
<p><img src="https://img2024.cnblogs.com/blog/1423484/202503/1423484-20250306172557640-395138601.png" alt="image" loading="lazy"></p>
<p>这里我们也必须制定一个工作流，我们去新建一个即可。</p>
<h2 id="逻辑判断">逻辑判断</h2>
<h3 id="条件判断">条件判断</h3>
<p>首先，规则中不可或缺的一项就是条件判断。我们需要根据用户的选择来判断其是希望开始操作还是结束操作。因此，我在流程中加入了两个关键的判断条件，如下图所示。</p>
<p><img src="https://img2024.cnblogs.com/blog/1423484/202503/1423484-20250306172603638-2051447586.png" alt="image" loading="lazy"></p>
<h3 id="意图识别">意图识别</h3>
<p>在与客户沟通的真实场景中，事实上，大部分情况下都是用户主动结束通话。因此，为了更加贴合实际情况，我在系统中加入了一项意图识别功能，我将其称之为“高级判断”。该功能的主要目的是判断用户是否仍然有意愿继续与销售人员进行进一步的沟通与交流。如图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1423484/202503/1423484-20250306172609603-1699098011.png" alt="image" loading="lazy"></p>
<p>这里提到的意图1和意图2并不是由我们手动配置的，而是在使用模板时，系统通过自动识别和分析客户的行为及语言模式来确定的。如下我的demo示例：</p>
<p><img src="https://img2024.cnblogs.com/blog/1423484/202503/1423484-20250306172613729-1019127501.png" alt="image" loading="lazy"></p>
<p>通过这种方式，整体上可以有效地模拟和满足真实场景中的话术沟通需求。</p>
<h2 id="随机匹配客户">随机匹配客户</h2>
<p>在我们的日常工作中，往往会接触到各种各样的人，面对不同的需求和情境。为了更好地应对这些复杂多变的场景，我事先根据实际情况设置了一些客户特征，并通过代码节点配置来实现这些特征的随机匹配，以便能够快速、灵活地处理不同类型的客户和需求。</p>
<h3 id="代码节点">代码节点</h3>
<p>简单来看一下代码节点的实现，除了由于第三方依赖无法直接添加的限制外，对于系统内置的依赖包，我们可以自由地进行调用和使用。这使得我们在编写代码时，能够更加灵活地选择合适的工具和库，以满足不同的功能需求。以下是相关代码的展示：</p>
<pre><code class="language-python">import random

# 请保存函数名为main,输入输出均为dict；最终结果会以json字符串方式返回，请勿直接返回不支持json.dumps的对象
def main(params: dict) -&gt; dict:
    age = ['年轻','中年','老年']
    person = ['男性','女性']
    piqi = ['急躁', '暴躁', '温和', '宽容', '冷静', '固执', '敏感', '冲动', '沉默', '乐观', '自制力强', '冷漠', '焦虑', '嫉妒', '内向', '外向']
    cars = ['宝马 X5', '宝马 3系', '宝马 X7', '宝马 M5'] 
    return {
        'age': random.choice(age),
        'person':random.choice(person),
        'piqi':random.choice(piqi),
        'car':random.choice(cars),
    }

</code></pre>
<p>这些返回结果中的各个字段，如果你希望在后续的操作中使用它们，就需要将它们明确地输出到 <code>output</code> 中进行相应的设置。如图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1423484/202503/1423484-20250306172622304-1418612708.png" alt="image" loading="lazy"></p>
<h2 id="伪客户大模型">伪客户（大模型）</h2>
<p>为了实现与用户的有效交互，自然需要借助大模型的强大能力进行介入。在此过程中，我们会根据我们提供的客户特征，提前让大模型生成一段历史对话。这段历史对话将为销售人员提供一个预设的沟通框架，使得他们能够更快速、更精准地与客户进行交流，如下所示：</p>
<pre><code class="language-python">帮我生成一通购车询问的通话记录，通话跟进记录要严格按照购买人群和人物性格进行模拟对话，并生成前2条销售顾问与客户之间的聊天，最后一句话为用户的回答或者询问，以下是客户的特征：

年龄特征：age
人物特征：person
脾气特征：piqi
意向车辆：car

对话生成格式为：
顾问回答：您好，张先生！感谢接听电话，我是XX宝马店的顾问小李。看到您之前关注过宝马X7，想了解一下您对配置或性能方面有没有特别的需求？
用户回答：你好。配置我看过官网了，主要想确认3.0T顶配的现车情况，还有你们说的“M运动套件”具体包含什么。
</code></pre>
<h3 id="入参">入参</h3>
<p>如果希望大模型能够根据我们生成的客户特征进行推理和生成答案，那么必须使用入参。这些入参实际上是动态生成的变量，只有在正确引用这些变量的情况下，大模型才能够基于这些信息生成与上下文相关的答案。如果不进行引用，大模型生成的答案将无法与当前上下文产生有效关联。如下图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1423484/202503/1423484-20250306172629799-658937357.png" alt="image" loading="lazy"></p>
<h2 id="回复">回复</h2>
<p>可以看到，我们选择的思考模型是DeepSeek-R1，其最大的特点便是需要较长时间的思考链进行推理和分析。为了避免用户在等待过程中产生焦虑感或感到无所适从，我们需要在适当时机给予用户友好的提示和反馈。</p>
<p>因此，在设计交互时，回复节点就显得尤为重要。如图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1423484/202503/1423484-20250306172635442-1000567817.png" alt="image" loading="lazy"></p>
<p>当然，你完全可以在回复中上传图片，因为图文并茂的展示方式比单纯的文字描述更加直观和易于理解。看下我的效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/1423484/202503/1423484-20250306172640186-1557122915.png" alt="image" loading="lazy"></p>
<blockquote>
<p>请注意，当上传图片时，Markdown语法将无法生效。只有在没有图片的情况下，Markdown语法才能正常呈现。</p>
</blockquote>
<h2 id="总结及建议">总结及建议</h2>
<p>在所有对话结束之后，最为关键的一点是务必借助大模型的能力，帮助我们对整个通话过程中的销售话术进行全面总结和分析，找出其中可能存在的问题和不足之处，并清晰明确地反馈给销售顾问。</p>
<p>通过这种方式，不仅能够帮助销售顾问认识到自身话术的缺陷，还能提供具体的改进建议，指导他们如何有效地提升沟通技巧。只有这样，销售顾问才能在日常工作中更好地进行自我学习和进步</p>
<h3 id="系统变量">系统变量</h3>
<p>总结的话，我们必须依赖于系统变量这一关键参数，即 SYS.ChatHistory，来实现相关功能或优化操作。</p>
<p><img src="https://img2024.cnblogs.com/blog/1423484/202503/1423484-20250306172646702-443995106.png" alt="image" loading="lazy"></p>
<p>然而，需要注意的是，尽管 SYS.ChatHistory 是一个重要的参数，它实际上是一个字符串，而非数组。这一点在实际操作中必须特别留意。为了更好地理解它的结构和内容，我们可以通过打印输出的方式查看其具体形式，如图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1423484/202503/1423484-20250306172651115-1500012710.png" alt="image" loading="lazy"></p>
<p>在我们的系统中，用户输入的内容和助手的回答可以视作一种客服对话模式。然而，有一个问题需要考虑：如果上下文历史特别长，如何处理呢？如果每次都要进行全量的上下文总结，那么所需的token数量可能会非常庞大，甚至达到上万token，这会带来不小的负担。</p>
<p>事实上，我们可以通过调整相关的参数或变量来控制上下文的使用方式。接下来，我们引用一个具体的变量来演示如何解决这个问题，如下图所示。</p>
<p><img src="https://img2024.cnblogs.com/blog/1423484/202503/1423484-20250306172657699-1248249729.png" alt="image" loading="lazy"></p>
<p>虽然它本身是一个字符串，但实际上在后台它仍然以数组的形式存在，只是被平台进行了一定的封装处理。这种封装并不会影响我们对话轮数的调节，因此我们依然能够正常操作和控制对话的进程。</p>
<h2 id="封装">封装</h2>
<p>如果你的业务中有多个场景涉及到类似的需求，那么完全可以将这个工作流引入到其他工作流中进行复用。这也是为什么在开始节点中需要设置一些参数的原因。尽管这些带有参数的工作流无法直接被助手引用并执行，因为在这种情况下会导致直接报错，原因是助手并不会主动为这些参数赋值。如图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1423484/202503/1423484-20250306172703448-1915619855.png" alt="image" loading="lazy"></p>
<p>这里面我已经为一些输入变量进行了设置。如果将这些变量直接引入到助手中进行调用，助手会立即提示报错。如图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1423484/202503/1423484-20250306172708744-271599661.png" alt="image" loading="lazy"></p>
<p>但如果我的工作流所需要的参数能够从上游系统获取，并且上游可以直接提供给我，那么这些参数是完全可以直接嵌套使用的。例如，以下这种方式：</p>
<p><img src="https://img2024.cnblogs.com/blog/1423484/202503/1423484-20250306172714074-714324795.png" alt="image" loading="lazy"></p>
<p>填入必要的参数即可，如图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1423484/202503/1423484-20250306172720104-181740425.png" alt="image" loading="lazy"></p>
<h2 id="欢迎语">欢迎语</h2>
<p>这段欢迎语非常重要，必不可少。我写的内容较为简洁，主要是为了清楚地说明本助手的使用规则。正如图中所展示的那样，它为用户提供了一个清晰的指南，帮助大家快速理解和掌握如何高效使用本助手。</p>
<p><img src="https://img2024.cnblogs.com/blog/1423484/202503/1423484-20250306172726099-1535665287.png" alt="image" loading="lazy"></p>
<p>欢迎语必须具备明确的引导作用，避免无关的废话和冗余内容。不过，适当地引入一些表情包或幽默元素，可以有效地调节气氛，增加用户的参与感和愉悦感，使整体体验更加轻松和有趣。</p>
<h1 id="效果展示">效果展示</h1>
<p>为了减少演示的时间，我在与助手沟通时只是简短地说了两句话，随后迅速改变了我的态度，主动采取了较为消极的态度，从而诱导并触发了挂断电话的行为。当然，直接输入“结束”命令也能实现同样的效果。</p>
<p><img src="https://img2024.cnblogs.com/blog/1423484/202503/1423484-20250306172745478-1871761426.gif" alt="image" loading="lazy"></p>
<h1 id="小结">小结</h1>
<p>今天的分享到此结束。通过对分析助手工作流模式的深入剖析，我们可以清晰地看到，从最初的客户匹配、对话模拟，到最后的总结反馈，每一个环节都经过了精心的设计与优化。大模型强大的计算与判断能力，使得助手不仅能对实时对话进行优化，还能够根据不同的实际情境，灵活生成个性化的销售话术。最终，助手的作用是帮助销售人员在不断的实践过程中提升其沟通技巧，实现更高效的销售业绩。</p>
<p>虽然目前并没有覆盖所有节点，但我们已成功实现了最小粒度的销售话术助手的开发。希望这个工具能为其他有类似业务需求的企业提供一些启示，帮助他们更好地让员工接触并利用AI的优势，提升员工的工作能力，从而实现更高效的企业运作与业绩增长。</p>
<hr>
<p>我是努力的小雨，一个正经的 Java 东北服务端开发，整天琢磨着 AI 技术这块儿的奥秘。特爱跟人交流技术，喜欢把自己的心得和大家分享。还当上了腾讯云创作之星，阿里云专家博主，华为云云享专家，掘金优秀作者。各种征文、开源比赛的牌子也拿了。</p>
<p>💡 想把我在技术路上走过的弯路和经验全都分享出来，给你们的学习和成长带来点启发，帮一把。</p>
<p>🌟 欢迎关注努力的小雨，咱一块儿进步！🌟</p>

</div>
<div class="clear"></div>

		</div>
		<div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.1290183862349537" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-10 11:13">2025-03-10 09:50</span>&nbsp;
<a href="https://www.cnblogs.com/guoxiaoyu">努力的小雨</a>&nbsp;
阅读(<span id="post_view_count">48</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18755970" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18755970);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18755970', targetLink: 'https://www.cnblogs.com/guoxiaoyu/p/18755970', title: '（附体验地址）大模型知识引擎：AI 助手能否助力销售技能提升？' })">举报</a>
</div>
	