
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/cnxpr/p/19043390" title="发布于 2025-08-17 16:29">
    <span role="heading" aria-level="2">状压DP 详解教程 简单易学(bushi</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="状压dp补档">状压DP补档</h1>
<h1 id="一基本概念">一、基本概念</h1>
<ol>
<li>什么是状压DP</li>
</ol>
<p>状态压缩动态规划<code>（State Compression Dynamic Programming）</code>是一种通过二进制或其他紧凑表示方式来优化状态空间的动态规划方法。它通常用于解决状态可以表示为集合或排列的问题。</p>
<ol start="2">
<li>适用场景<br>
状态可以表示为集合（如选/不选某些元素）</li>
</ol>
<p>状态维度较高但每个维度状态较少（如棋盘覆盖问题）</p>
<p>需要记录访问历史或选择历史的问题</p>
<ol start="3">
<li>核心思想<br>
用二进制数表示状态（0/1表示存在/不存在）</li>
</ol>
<p>通过位运算高效地进行状态转移</p>
<p>将指数级的状态空间压缩为多项式级</p>
<h1 id="二常用位运算技巧">二、常用位运算技巧</h1>
<ol>
<li>基本操作</li>
</ol>
<pre><code class="language-cpp">// 设置第i位为1
mask |= (1 &lt;&lt; i);

// 设置第i位为0
mask &amp;= ~(1 &lt;&lt; i);

// 切换第i位
mask ^= (1 &lt;&lt; i);

// 检查第i位是否为1
if (mask &amp; (1 &lt;&lt; i)) {...}

// 获取最低位的1
lowbit = mask &amp; -mask;

// 清除最低位的1
mask &amp;= (mask - 1);
2. 高级操作

// 遍历所有子集
for (int subset = mask; subset; subset = (subset - 1) &amp; mask) {
    // 处理subset
}

// 检查mask是否是全1
if (mask == (1 &lt;&lt; n) - 1) {...}

// 计算二进制中1的个数
int count = __builtin_popcount(mask); // GCC内置函数

</code></pre>
<h2 id="三经典问题模型">三、经典问题模型</h2>
<h3 id="1-旅行商问题tsp">1. 旅行商问题（TSP）</h3>
<p><strong>状态表示</strong>：</p>
<ul>
<li><code>DP[M][U]</code>：已经访问过M表示的城市集合，当前位于城市U的最短路径</li>
</ul>
<p><strong>状态转移</strong>：</p>
<pre><code class="language-cpp">DP[M][U] = min(DP[M][U], DP[M^(1&lt;&lt;U)][V] + D[V][U])
</code></pre>
<h3 id="2-棋盘覆盖问题">2. 棋盘覆盖问题</h3>
<p><strong>状态表示</strong>：</p>
<ul>
<li>用二进制表示一行的覆盖状态</li>
<li>可能需要多行状态共同表示</li>
</ul>
<h2 id="四解题模板">四、解题模板</h2>
<h3 id="1-基本框架allman风格">1. 基本框架（ALLman风格）</h3>
<pre><code class="language-cpp">int DP[1 &lt;&lt; N][...]; // 状态数组
memset(DP, INF, sizeof(DP)); // 初始化

// 初始状态
DP[INIT_M][...] = INIT_VAL;

// 状态转移
for (int M = 0; M &lt; (1 &lt;&lt; N); ++M)
{
    for (int I = 0; I &lt; N; ++I)
    {
        if (!(M &amp; (1 &lt;&lt; I))) // 如果第I位未被选中
        {
            int NEW_M = M | (1 &lt;&lt; I);
            DP[NEW_M][...] = UPDATE(DP[M][...], ...);
        }
    }
}

// 结果通常是DP[FULL_M][...]
</code></pre>
<h3 id="2-位运算操作allman风格">2. 位运算操作（ALLman风格）</h3>
<pre><code class="language-cpp">// 设置第I位为1
M |= (1 &lt;&lt; I);

// 设置第I位为0
M &amp;= ~(1 &lt;&lt; I);

// 切换第I位
M ^= (1 &lt;&lt; I);

// 检查第I位是否为1
if (M &amp; (1 &lt;&lt; I)))
{
    ...
}

// 获取最低位的1
LB = M &amp; -M;

// 清除最低位的1
M &amp;= (M - 1);
</code></pre>
<h2 id="五例题精选">五、例题精选</h2>
<h3 id="1-leetcode-464-我能赢吗">1. Leetcode 464. 我能赢吗</h3>
<pre><code class="language-cpp">bool CAN_I_WIN(int MAX_CHOOSE, int TARGET)
{
    if (MAX_CHOOSE &gt;= TARGET)
    {
        return true;
    }
    if (MAX_CHOOSE * (MAX_CHOOSE + 1) / 2 &lt; TARGET)
    {
        return false;
    }
    
    unordered_map&lt;int, bool&gt; MEMO;
    return DFS(0, 0, MAX_CHOOSE, TARGET, MEMO);
}

bool DFS(int USED, int SUM, int MAX_CHOOSE, int TARGET, unordered_map&lt;int, bool&gt;&amp; MEMO)
{
    if (MEMO.count(USED))
    {
        return MEMO[USED];
    }
    
    for (int I = 1; I &lt;= MAX_CHOOSE; ++I)
    {
        if (!(USED &amp; (1 &lt;&lt; I)))
        {
            if (SUM + I &gt;= TARGET || !DFS(USED | (1 &lt;&lt; I), SUM + I, MAX_CHOOSE, TARGET, MEMO))
            {
                return MEMO[USED] = true;
            }
        }
    }
    
    return MEMO[USED] = false;
}
</code></pre>
<h3 id="2-leetcode-691-贴纸拼词">2. Leetcode 691. 贴纸拼词</h3>
<pre><code class="language-cpp">int MIN_STICKERS(vector&lt;string&gt;&amp; STICKERS, string TARGET)
{
    int N = TARGET.size();
    vector&lt;int&gt; DP(1 &lt;&lt; N, -1);
    DP[0] = 0;
    
    for (int M = 0; M &lt; (1 &lt;&lt; N); ++M)
    {
        if (DP[M] == -1)
        {
            continue;
        }
        
        for (string&amp; S : STICKERS)
        {
            int CUR = M;
            for (char C : S)
            {
                for (int I = 0; I &lt; N; ++I)
                {
                    if (!(CUR &amp; (1 &lt;&lt; I)) &amp;&amp; C == TARGET[I])
                    {
                        CUR |= (1 &lt;&lt; I);
                        break;
                    }
                }
            }
            
            if (DP[CUR] == -1 || DP[CUR] &gt; DP[M] + 1)
            {
                DP[CUR] = DP[M] + 1;
            }
        }
    }
    
    return DP[(1 &lt;&lt; N) - 1];
}
</code></pre>
<h3 id="3-leetcode-1434-戴帽子">3. Leetcode 1434. 戴帽子</h3>
<pre><code class="language-cpp">int NUMBER_WAYS(vector&lt;vector&lt;int&gt;&gt;&amp; HATS)
{
    const int MOD = 1e9 + 7;
    int N = HATS.size();
    vector&lt;vector&lt;int&gt;&gt; DP(41, vector&lt;int&gt;(1 &lt;&lt; N, 0));
    DP[0][0] = 1;
    
    for (int I = 1; I &lt;= 40; ++I)
    {
        for (int M = 0; M &lt; (1 &lt;&lt; N); ++M)
        {
            DP[I][M] = DP[I - 1][M];
        }
        
        for (int P = 0; P &lt; N; ++P)
        {
            if (find(HATS[P].begin(), HATS[P].end(), I) != HATS[P].end())
            {
                for (int M = 0; M &lt; (1 &lt;&lt; N); ++M)
                {
                    if (!(M &amp; (1 &lt;&lt; P)))
                    {
                        int NEW_M = M | (1 &lt;&lt; P);
                        DP[I][NEW_M] = (DP[I][NEW_M] + DP[I - 1][M]) % MOD;
                    }
                }
            }
        }
    }
    
    return DP[40][(1 &lt;&lt; N) - 1];
}
</code></pre>
<p>886</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-08-17 16:29">2025-08-17 16:29</span>&nbsp;
<a href="https://www.cnblogs.com/cnxpr">cn_xpr</a>&nbsp;
阅读(<span id="post_view_count">69</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19043390);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19043390', targetLink: 'https://www.cnblogs.com/cnxpr/p/19043390', title: '状压DP 详解教程 简单易学(bushi' })">举报</a>
</div>
        