
        <h2>
            <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/shengzhang/p/18888262" title="发布于 2025-05-21 09:11">
    <span role="heading" aria-level="2">Sa-Token v1.43.0 发布 🚀，新增 SSO 单设备注销、消息推送，多 Access-Token 并存能力</span>
    

</a>

        </h2>
        <div class="postbody">
            <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>Sa-Token 是一款 <strong>免费</strong>、<strong>开源</strong> 的轻量级 Java 权限认证框架，主要解决：<strong>登录认证</strong>、<strong>权限认证</strong>、<strong>单点登录</strong>、<strong>OAuth2.0</strong>、<strong>微服务网关鉴权</strong> 等一系列权限相关问题。🔐</p>
<p><img src="https://oss.dev33.cn/sa-token/doc/home/sa-token-jss--tran.png" alt="sa-token-jss--tran" loading="lazy"></p>
<p><strong>目前最新版本 <code>v1.43.0</code> 已推送至 <code>Maven</code> 中央仓库</strong> 🎉，大家可以通过如下方式引入：</p>
<pre><code class="language-xml">&lt;!-- Sa-Token 权限认证 --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;cn.dev33&lt;/groupId&gt;
    &lt;artifactId&gt;sa-token-spring-boot-starter&lt;/artifactId&gt;
    &lt;version&gt;1.43.0&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<p>该版本包含大量 ⛏️️️新增特性、⛏️底层重构、⛏️️️代码优化 等，下面容我列举几条比较重要的更新内容供大家参阅：</p>
<h3 id="️️️️-更新点1单点登录模块新增单设备注销模式">⛏️️️️ 更新点1：单点登录模块新增“单设备注销”模式</h3>
<p>有单点登录就必然要有单点注销，目前 SSO 单点登录模块包含：单应用注销、单设备注销、全端注销 三种模式，怎么理解三者的差异呢？</p>
<p>举个例子，用户在 Chrome 浏览器 登录了 应用A、应用B、应用C，又在 Firefox 浏览器登录了应用A、应用B，那么此时他：</p>
<ul>
<li>点击“单应用注销”后：他只会在应用A注销下线，其它应用依然会保持登录状态。</li>
<li>点击“单设备注销”后：他在 Chrome 浏览器登录的所有应用会一起下线，但是 Firefox 浏览器登录的应用不受影响。</li>
<li>点击“全端注销”后：用户在所有浏览器登录的所以会话一起注销下线。</li>
</ul>
<p>以上几种注销方式仅需通过一行代码或者调用一个接口即可实现，详细可参考在线文档：<a href="https://sa-token.cc/doc.html#/sso/signout" target="_blank" rel="noopener nofollow">Sa-Token SSO 单点注销</a>。</p>
<h3 id="️️️️-更新点2单点登录模块新增消息推送机制">⛏️️️️ 更新点2：单点登录模块新增消息推送机制</h3>
<p>此提案来源于社区交流群中的一位开发者咨询：</p>
<p><img src="https://oss.dev33.cn/sa-token/blog/2025-5/sa-sso-message-push-tian.png" alt="sa-sso-message-push-tian.png" loading="lazy"></p>
<p>该开发者指出是否可以在 SSO 模块增加各个系统互相通知 token 续期的功能，以便做到系统之间会话有效期的强同步。</p>
<p>本次更新没有直接增加这两个 API，而是从底层构建了一套消息推送体系，允许 sso-client 端按照特点格式构建一个 http 请求，调用 sso-server 端的 /sso/pushS 接口，sso-server 接收到消息后做出处理回应 sso-client 端。</p>
<p>消息推送是相互的，sso-server 端也可以构建 http 请求，调用 sso-client 端的 /sso/pushC 接口。</p>
<p>消息推送机制是应用与认证中心相互沟通的桥梁，ticket 校验、单点注销等行为都是依赖消息推送机制来实现的。</p>
<p>当然你也可以通过自定义消息处理器的方式，来扩展消息推送能力，这将非常有助于你完成一些应用与认证中心的自定义数据交互。</p>
<p>假设我们现在有如下需求：在 sso-client 获取 sso-server 端指定账号 id 的昵称、头像等信息，即：用户资料的拉取。</p>
<p>首先，我们需要在 sso-server 实现一个消息处理器：</p>
<pre><code class="language-java">@RestController
public class SsoServerController {

	// 配置SSO相关参数 
	@Autowired
	private void configSso(SaSsoServerTemplate ssoServerTemplate) {

		// 添加消息处理器：userinfo (获取用户资料) （用于为 client 端开放拉取数据的接口）
		ssoServerTemplate.messageHolder.addHandle("userinfo", (ssoTemplate, message) -&gt; {
			System.out.println("收到消息：" + message);

			// 自定义返回结果（模拟）
			return SaResult.ok()
					.set("id", message.get("loginId"))
					.set("name", "LinXiaoLin")
					.set("sex", "女")
					.set("age", 18);
		});

	}

}
</code></pre>
<p>在 sso-client 端配置文件里要配置上消息推送的具体地址</p>
<pre><code class="language-yaml"># sa-token配置 
sa-token:
    # sso-client 相关配置
    sso-client:
        # 应用标识
        client: sso-client3
        # sso-server 端推送消息地址
        push-url: http://sa-sso-server.com:9000/sso/pushS
        # API 接口调用秘钥
        secret-key: SSO-C3-kQwIOrYvnXmSDkwEiFngrKidMcdrgKor
</code></pre>
<p>然后在需要拉取资料的地方：</p>
<pre><code class="language-java">// 查询我的账号信息：sso-client 前端 -&gt; sso-center 后端 -&gt; sso-server 后端
@RequestMapping("/sso/myInfo")
public Object myInfo() {
	// 如果尚未登录
	if( ! StpUtil.isLogin()) {
		return "尚未登录，无法获取";
	}

	// 获取本地 loginId
	Object loginId = StpUtil.getLoginId();

	// 构建消息对象 
	SaSsoMessage message = new SaSsoMessage();
	message.setType("userinfo");
	message.set("loginId", loginId);
	
	// 推送至 sso-server，并接收响应数据 
	SaResult result = SaSsoClientUtil.pushMessageAsSaResult(message);

	// 返回给前端
	return result;
}
</code></pre>
<p>详细可参考在线文档：<a href="https://sa-token.cc/doc.html#/sso/message-push" target="_blank" rel="noopener nofollow">Sa-Token SSO 消息推送机制</a> 。</p>
<h3 id="️️️️-更新点3单点登录新增-resdk-对接模式">⛏️️️️ 更新点3：单点登录新增 resdk 对接模式</h3>
<p>Sa-Token SSO 模块一直是支持非 Sa-Token 技术栈、甚至非 java 项目对接的，在之前版本给出的对接方式是 NoSdk 模式。</p>
<p>NoSdk 模式就是指不集成 Sa-Token，直接通过 http 工具类调用接口的方式来对接 SSO-Server。</p>
<p>参考 demo：<a href="https://gitee.com/dromara/sa-token/tree/master/sa-token-demo/sa-token-demo-sso/sa-token-demo-sso3-client-nosdk" target="_blank" rel="noopener nofollow">sa-token-demo-sso3-client-nosdk</a></p>
<p>该 demo 假设应用端没有使用任何“权限认证框架”，使用最基础的 ServletAPI 进行会话管理，模拟了 <code>/sso/login</code>、 <code>/sso/logout</code>、 <code>/sso/logoutCall</code> 三个接口的处理逻辑。</p>
<p>但是基于以下原因，NoSdk 示例将不再维护：</p>
<ul>
<li>1、NoSdk demo 相当于通过 http 工具类再次重写了一遍 Sa-Token SSO 模块代码，繁琐且冗余。</li>
<li>2、重写的代码无法拥有 Sa-Token SSO 模块全部能力，仅能完成基本对接，算是一个简化版 SDK。</li>
</ul>
<p>最新版我们推荐使用 ReSdk 方式进行对接：ReSdk 模式（重写SDK部分方法）：通过重写框架关键步骤点，来对接 SSO-Server。</p>
<p>参考 demo：<a href="https://gitee.com/dromara/sa-token/tree/master/sa-token-demo/sa-token-demo-sso/sa-token-demo-sso3-client-resdk" target="_blank" rel="noopener nofollow">sa-token-demo-sso3-client-resdk</a></p>
<p>ReSdk 模式优点：</p>
<p>1、依然支持客户端使用任意技术栈。<br>
2、仅重写少量部分关键代码，即可完成对接。几乎可以得到 Sa-Token SSO 模块全量能力。</p>
<h3 id="️️️️-更新点4oauth2新增多-access-token-并存能力">⛏️️️️ 更新点4：OAuth2新增多 Access-Token 并存能力。</h3>
<p>点击非常高的一个提案：<code>OAuth2 模块每次生成新的 access_token 时能否保留旧 access_token 依然有效</code>。</p>
<p>fix issues: <a href="https://gitee.com/dromara/sa-token/issues/IBHFD1" target="_blank" rel="noopener nofollow">#IBHFD1</a> 、 <a href="https://gitee.com/dromara/sa-token/issues/IBLL4Q" target="_blank" rel="noopener nofollow">#IBLL4Q</a> 、<a href="https://github.com/dromara/Sa-Token/issues/724" target="_blank" rel="noopener nofollow">#724</a></p>
<p><img src="https://oss.dev33.cn/sa-token/blog/2025-5/sa-many-access-token-issue1.png" alt="sa-many-access-token-issue1" loading="lazy"></p>
<p><img src="https://oss.dev33.cn/sa-token/blog/2025-5/sa-many-access-token-issue2.png" alt="sa-many-access-token-issue2" loading="lazy"></p>
<p><img src="https://oss.dev33.cn/sa-token/blog/2025-5/sa-many-access-token-issue3.png" alt="sa-many-access-token-issue3" loading="lazy"></p>
<p>在之前的版本中，因索引数据结构设计所限，每次申请 <code>access_token</code> 时会导致旧 <code>access_token</code> 立即失效，新版本重构了索引数据结构，增加了多 <code>Access-Token</code> 并存能力。</p>
<p>相关 API 展示：</p>
<pre><code class="language-java">// 获取 AccessTokenModel，无效的 AccessToken 会返回 null
SaOAuth2Util.getAccessToken(accessToken);

// 校验 Access-Token，成功返回 AccessTokenModel，失败则抛出异常
SaOAuth2Util.checkAccessToken(accessToken);

// 获取 Access-Token 列表：此应用下 对 某个用户 签发的所有 Access-token
SaOAuth2Util.getAccessTokenValueList(clientId, loginId);

// 判断：指定 Access-Token 是否具有指定 Scope 列表，返回 true 或 false
SaOAuth2Util.hasAccessTokenScope(accessToken, ...scopes);

// 校验：指定 Access-Token 是否具有指定 Scope 列表，如果不具备则抛出异常
SaOAuth2Util.checkAccessTokenScope(accessToken, ...scopes);

// 获取 Access-Token 所代表的LoginId
SaOAuth2Util.getLoginIdByAccessToken(accessToken);

// 获取 Access-Token 所代表的 clientId
SaOAuth2Util.getClientIdByAccessToken(accessToken);

// 回收一个 Access-Token
SaOAuth2Util.revokeAccessToken(accessToken);

// 回收全部 Access-Token：指定应用下 指定用户 的全部 Access-Token
SaOAuth2Util.revokeAccessTokenByIndex(clientId, loginId);
</code></pre>
<p>在线文档相关章节：<a href="https://sa-token.cc/doc.html#/oauth2/oauth2-dev" target="_blank" rel="noopener nofollow">Sa-Token-OAuth2 常用方法</a></p>
<h3 id="️️️️-更新点5简化-core-核心包功能模块进行拆包">⛏️️️️ 更新点5：简化 core 核心包功能模块，进行拆包</h3>
<p>在社区群聊中有同学提到目前 sa-token-core 核心包功能过于拥挤复杂。应要求本次将部分功能模块进行删减，转移到了 plugin 包下：</p>
<ul>
<li>拆分：API Key 模块拆分独立插件包：<code>sa-token-apikey</code>。</li>
<li>拆分：API Sign 模块拆分独立插件包：<code>sa-token-sign</code>。</li>
</ul>
<p>并且本次更新新增了以下插件包：</p>
<ul>
<li>新增：新增 <code>sa-token-forest</code> 插件，用于在 Http 请求处理器模块整合 Forest。</li>
<li>新增：新增 <code>sa-token-okhttps</code> 插件，用于在 Http 请求处理器模块整合 OkHttps。</li>
</ul>
<h3 id="-完整更新日志">📜 完整更新日志</h3>
<p>除了以上提到的几点以外，还有更多更新点无法逐一详细介绍，下面是 v1.43.0 版本的完整更新日志：</p>
<ul>
<li>core:
<ul>
<li>新增：<code>SaLogoutParameter</code> 新增 <code>deviceId</code> 参数，用于控制指定设备 id 的注销。  <strong>[重要]</strong></li>
<li>新增：新增 <code>SaHttpTemplate</code> 请求处理器模块。</li>
<li>新增：TOTP 增加 <code>issuer</code> 字段。  merge: <a href="https://gitee.com/dromara/sa-token/pulls/329" target="_blank" rel="noopener nofollow">pr 329</a></li>
<li>修复：修复 <code>Http Digest</code> 认证时 url 上带有查询参数时认证无法通过的问题。merge: <a href="https://gitee.com/dromara/sa-token/pulls/334" target="_blank" rel="noopener nofollow">pr 334</a></li>
<li>新增：@SaCheckOr 注解添加 <code>append</code> 字段，用于抓取未预先定义的注解类型进行批量注解鉴权。</li>
<li>新增：侦听器 <code>doRenewTimeout</code> 方法添加 loginType 参数。</li>
<li>新增：<code>SaInterceptor</code> 新增 <code>beforeAuth</code> 认证前置函数。</li>
</ul>
</li>
<li>SSO：
<ul>
<li>新增：单点注销支持单设备注销。   <strong>[重要]</strong>  fix: <a href="https://gitee.com/dromara/sa-token/issues/IA6ZK0" target="_blank" rel="noopener nofollow">#IA6ZK0</a> 、<a href="https://github.com/dromara/Sa-Token/issues/747" target="_blank" rel="noopener nofollow">#747</a></li>
<li>新增：新增消息推送机制。  <strong>[重要]</strong>   fix: <a href="https://gitee.com/dromara/sa-token/issues/IBGXA7" target="_blank" rel="noopener nofollow">#IBGXA7</a></li>
<li>新增：配置项 clients 用于单独配置每个 client 的授权信息。  <strong>[重要]</strong></li>
<li>新增：配置项 <code>allowAnonClient</code> 决定是否启用匿名 client。</li>
<li>新增：SSO 模块新增配置文件方式启用“不同 client 不同秘钥”能力。</li>
<li>重构：sso-client 封装化获取 client 标识值。</li>
<li>新增：新增 SSO Strategy 策略类。</li>
<li>新增：sso-client 新增 <code>convertCenterIdToLoginId</code>、<code>convertLoginIdToCenterId</code> 策略函数，用于描述本地 LoginId 与认证中心 loginId 的转换规则。</li>
<li>新增：sso-server 新增 <code>jumpToRedirectUrlNotice</code> 策略，用于授权重定向跳转之前的通知。</li>
<li>优化：调整整体 SSO 示例代码。</li>
<li>新增：新增 ReSdk 模式对接示例：<code>sa-token-demo-sso3-client-resdk</code>。  <strong>[重要]</strong></li>
<li>新增：新增匿名应用模式对接示例：<code>sa-token-demo-sso3-client-anon</code>。  <strong>[重要]</strong></li>
</ul>
</li>
<li>OAuth2：
<ul>
<li>新增：<code>SaClientModel</code> 新增 <code>isAutoConfirm</code> 配置项，用于决定是否允许应用可以自动确认授权。 <strong>[重要]</strong></li>
<li>新增：多 <code>Access-Token</code> 并存、多 <code>Refresh-Token</code> 并存、多 <code>Client-Token</code> 并存能力。 <strong>[重要]</strong>  fix: <a href="https://gitee.com/dromara/sa-token/issues/IBHFD1" target="_blank" rel="noopener nofollow">#IBHFD1</a> 、 <a href="https://gitee.com/dromara/sa-token/issues/IBLL4Q" target="_blank" rel="noopener nofollow">#IBLL4Q</a> 、<a href="https://github.com/dromara/Sa-Token/issues/724" target="_blank" rel="noopener nofollow">#724</a></li>
<li>新增：Scope 分割符支持加号。merge: <a href="https://gitee.com/dromara/sa-token/pulls/333" target="_blank" rel="noopener nofollow">pr 333</a></li>
<li>修复：修复 oidc 协议下，当用户数据变动后，id_token 仍是旧信息的问题。</li>
<li>优化：对 <code>OAuth2 Password</code> 认证模式需要重写处理器添加强提醒。</li>
<li>优化：将认证流程回调从 <code>SaOAuth2ServerConfig</code> 转移到 <code>SaOAuth2Strategy</code>。</li>
<li>新增：新增 <code>SaOAuth2Strategy.instance.userAuthorizeClientCheck</code> 策略，用于检查指定用户是否可以授权指定应用。fix: <a href="https://github.com/dromara/Sa-Token/issues/553" target="_blank" rel="noopener nofollow">#553</a></li>
<li>优化：优化调整 <code>sa-token-oauth2</code> 模块代码结构及注释。</li>
<li>新增：<code>currentAccessToken()</code>、<code>currentClientToken()</code>，简化读取 <code>access_token</code>、<code>client_token</code> 步骤</li>
</ul>
</li>
<li>插件：
<ul>
<li>新增：新增 <code>sa-token-forest</code> 插件，用于在 Http 请求处理器模块整合 Forest。</li>
<li>新增：新增 <code>sa-token-okhttps</code> 插件，用于在 Http 请求处理器模块整合 OkHttps。</li>
<li>拆分：API Key 模块拆分独立插件包：<code>sa-token-apikey</code>。</li>
<li>拆分：API Sign 模块拆分独立插件包：<code>sa-token-sign</code>。</li>
<li>修复：修复 <code>sa-token-dubbo</code> 插件部分场景上下文控制出错的问题。</li>
<li>修复：修复 <code>sa-token-sanck3</code> <code>SaSessionForSnack3Customized:getModel</code> 接收 map 值时会出错的问题。 merge: <a href="https://gitee.com/dromara/sa-token/pulls/330" target="_blank" rel="noopener nofollow">pr 330</a></li>
<li>修复：修复使用 <code>sa-token-redis-template-jdk-serializer</code> 时反序列化错误。merge: <a href="https://gitee.com/dromara/sa-token/pulls/331" target="_blank" rel="noopener nofollow">pr 331</a></li>
<li>修复：<code>sa-token-snack3</code> 优化 <code>objectToJson</code> 序列化处理（增加类名，但不增加根类名）。</li>
<li>重构：重构 <code>sa-token-redis-template</code>、<code>sa-token-redis-template-jdk-serializer</code> 插件中 update 方法 ttl 获取方式改为毫秒，以减少 update 时的 ttl 计算误差。  <strong>[重要]</strong></li>
</ul>
</li>
<li>示例：
<ul>
<li>新增：新增 SSE 鉴权示例。</li>
</ul>
</li>
<li>文档：
<ul>
<li>新增：新增文档离线版下载。</li>
<li>新增：新增框架功能列表插图。</li>
<li>新增：新增示例：如何在响应式环境下的 Filter 里调用 Sa-Token 同步 API。</li>
<li>新增：新增 QA：在 idea 导入源码，运行报错：java: 程序包cn.dev33.satoken.oauth2不存在。</li>
<li>新增：新增 QA：新增QA：报错：SaTokenContext 上下文尚未初始化。</li>
<li>新增：新增 QA：在 idea 导入源码，运行报错：java: 程序包cn.dev33.satoken.oauth2不存在。</li>
<li>新增：重写路由匹配算法修正为最新写法。</li>
<li>新增：修复 OAuth2 UnionId 章节相关不正确描述。</li>
<li>优化：完善 QA：访问了一个不存在的路由，报错：SaTokenContext 上下文尚未初始化。   fix: <a href="https://github.com/dromara/Sa-Token/issues/771" target="_blank" rel="noopener nofollow">#771</a></li>
<li>优化：补充 sso 模块遗漏的配置字段介绍。</li>
<li>优化：OAuth2-Server 示例添加真正表单。</li>
<li>新增：文档新增重写 <code>PasswordGrantTypeHandler</code> 处理器示例。</li>
<li>新增：sso 章节和 oauth2 章节文档增加可重写策略说明。</li>
</ul>
</li>
<li>其它：
<ul>
<li>新增：readme 新增框架功能介绍图。</li>
<li>新增：SSO 模块新增思维导图说明。</li>
<li>新增：readme 新增 Forest 的友情链接。</li>
</ul>
</li>
</ul>
<p>更新日志在线文档直达链接：<a href="https://sa-token.cc/doc.html#/more/update-log" target="_blank" rel="noopener nofollow">https://sa-token.cc/doc.html#/more/update-log</a></p>
<h3 id="-其它">🌟 其它</h3>
<p>代码仓库地址：<a href="https://gitee.com/dromara/sa-token" target="_blank" rel="noopener nofollow">https://gitee.com/dromara/sa-token</a></p>

</div>
<div class="clear"></div>

        </div>
        <p class="postfoot">
            posted on 
<span id="post-date" data-last-update-days="0.08281140543287037" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-21 09:11">2025-05-21 09:11</span>&nbsp;
<a href="https://www.cnblogs.com/shengzhang">孔明click33</a>&nbsp;
阅读(<span id="post_view_count">95</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18888262);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18888262', targetLink: 'https://www.cnblogs.com/shengzhang/p/18888262', title: 'Sa-Token v1.43.0 发布 &amp;#128640;，新增 SSO 单设备注销、消息推送，多 Access-Token 并存能力' })">举报</a>

        </p>
    