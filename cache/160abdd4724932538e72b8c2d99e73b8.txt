<!----> <meta itemprop="headline" content="看完前端各种风骚操作，我眼睛被亮瞎了！"> <meta itemprop="keywords" content="前端,JavaScript"> <meta itemprop="datePublished" content="2024-12-28T15:37:44.000Z"> <meta itemprop="image" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-128.png~tplv-t2oaga2asx-image.image"> <div itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><meta itemprop="name" content="程序员小寒"> <meta itemprop="url" content="https://juejin.cn/user/694547078987287"></div> <div itemprop="publisher" itemscope="itemscope" itemtype="http://schema.org/Organization"><meta itemprop="name" content="掘金"> <div itemprop="logo" itemscope="itemscope" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-white-180.png~tplv-t2oaga2asx-image.image"> <meta itemprop="width" content="180"> <meta itemprop="height" content="180"></div></div> <h1 class="article-title" data-v-fcbde74a="">
            看完前端各种风骚操作，我眼睛被亮瞎了！
            <!----> <!----></h1> <div class="author-info-block block-hidden" data-v-fcbde74a=""><div class="author-info-box" data-v-fcbde74a=""><div class="author-name" data-v-fcbde74a=""><a href="/user/694547078987287/posts" target="_blank" rel="" class="jj-link username username ellipsis" data-v-65b50b51="" data-v-1800aadb="" data-v-fcbde74a=""><span class="name" style="max-width:160px;" data-v-65b50b51="" data-v-1800aadb="">
    程序员小寒
  </span> <!----> <!----> <!----> </a></div> <div class="meta-box" data-v-fcbde74a=""><time datetime="2024-12-28T15:37:44.000Z" title="Sat Dec 28 2024 15:37:44 GMT+0000 (Coordinated Universal Time)" class="time" data-v-fcbde74a="">
                    2024-12-28
                  </time> <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" class="read-icon" data-v-fcbde74a=""><path d="M7.90078 2.80078C4.49278 2.80078 1.74745 6.11672 0.800781 7.77469C1.74745 9.58339 4.49278 13.2008 7.90078 13.2008C11.3088 13.2008 14.0541 9.58339 15.0008 7.77469C14.0541 6.11672 11.3088 2.80078 7.90078 2.80078Z" stroke="currentColor" data-v-fcbde74a=""></path><circle cx="7.89922" cy="8.00078" r="2.2" stroke="currentColor" data-v-fcbde74a=""></circle></svg> <span class="views-count" data-v-fcbde74a="">
                    6,308
                  </span> <span class="read-time" data-v-fcbde74a=""><svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" data-v-fcbde74a=""><rect width="16" height="16" fill="none" data-v-fcbde74a=""></rect><circle cx="8" cy="8" r="5.65625" stroke="#8A919F" data-v-fcbde74a=""></circle><path d="M7.69141 5.18652V8.30924H10.8141" stroke="#8A919F" stroke-linecap="round" stroke-linejoin="round" data-v-fcbde74a=""></path></svg>
                    阅读3分钟
                  </span> <!----></div></div> <div style="flex:1;" data-v-fcbde74a=""></div> <!----> <!----></div> <!----> <!----> <!----> <div id="article-root" itemprop="articleBody" class="main" data-v-fcbde74a=""><div class="article-viewer markdown-body cache result"><h2 data-id="heading-0">一、实现一个快速评分组件</h2>
<pre><code class="hljs language-js" lang="js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">getRate</span> = rate =&gt; <span class="hljs-string">"★★★★★☆☆☆☆☆"</span>.<span class="hljs-title function_">slice</span>(<span class="hljs-number">5</span> - rate, <span class="hljs-number">10</span> - rate);
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">getRate</span>(<span class="hljs-number">0</span>)); <span class="hljs-comment">// ☆☆☆☆☆</span>
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">getRate</span>(<span class="hljs-number">1</span>)); <span class="hljs-comment">// ★☆☆☆☆</span>
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">getRate</span>(<span class="hljs-number">2</span>)); <span class="hljs-comment">// ★★☆☆☆</span>
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">getRate</span>(<span class="hljs-number">3</span>)); <span class="hljs-comment">// ★★★☆☆</span>
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">getRate</span>(<span class="hljs-number">4</span>)); <span class="hljs-comment">// ★★★★☆</span>
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">getRate</span>(<span class="hljs-number">5</span>)); <span class="hljs-comment">// ★★★★★</span>
</code></pre>
<p>这个都不用多解释了，简直写的太妙了！</p>
<h2 data-id="heading-1">二、巧用位运算</h2>
<p>用位运算可以实现很多功能，比如乘2、除2（或者2的倍数），向下取整这些计算操作，而且性能很高！</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-keyword">let</span> num = <span class="hljs-number">3.14159</span>;
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(~~ num);  <span class="hljs-comment">// 向下取整，输出3</span>
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span> &gt;&gt; <span class="hljs-number">1</span>); <span class="hljs-comment">// &gt;&gt;表示右移运算符，除2，输出1</span>
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span> &lt;&lt; <span class="hljs-number">1</span>); <span class="hljs-comment">// &lt;&lt;表示左3移运算符，乘2，输出4</span>
</code></pre>
<p>并且，利用<code>~符</code>,即按<code>位取反运算符（NOT operator）</code>，还可以和字符串的<code>indeOf</code>方法配合使用。</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-keyword">const</span> str = <span class="hljs-string">'acdafadfa'</span>
<span class="hljs-keyword">if</span> (~str.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">'ac'</span>)) {
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">'包含'</span>)
}
</code></pre>
<p>其实原理很简单，举几个例子大家就明白了：</p>
<ul>
<li><code>~-1</code>的结果是<code>0</code>。</li>
<li><code>~0</code>的结果是<code>-1</code>。</li>
<li><code>~1</code>的结果是<code>-2</code>，<code>~2</code>的结果是<code>-3</code>。</li>
</ul>
<h2 data-id="heading-2">三、漂亮随机码</h2>
<pre><code class="hljs language-js" lang="js"><span class="hljs-keyword">const</span> str = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>().<span class="hljs-title function_">toString</span>(<span class="hljs-number">36</span>).<span class="hljs-title function_">substring</span>(<span class="hljs-number">2</span>, <span class="hljs-number">10</span>)
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str); <span class="hljs-comment">// 随机输出8位随机码</span>
</code></pre>
<p>这个在要为每个用户生成一个随机码的时候特别好用，具体随机码多少位可以自己控制，如果要的随机码位数特别长，可以把这个函数多调用一次，然后把结果进行字符串拼接。</p>
<h2 data-id="heading-3">四、史上最NB的报错处理</h2>
<pre><code class="hljs language-js" lang="js"><span class="hljs-keyword">try</span> {
  <span class="hljs-keyword">const</span> str = <span class="hljs-string">''</span>;
  str.<span class="hljs-title function_">map</span>(); <span class="hljs-comment">// Uncaught TypeError: str.map is not a function</span>
} <span class="hljs-keyword">catch</span>(e) {
  <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">open</span>(<span class="hljs-string">"https://stackoverflow.com/search?q=js+"</span> + e.<span class="hljs-property">message</span>);
}
</code></pre>
<p>这应该是史上最NB的报错处理了，一般来说，抛出错误时应该打印日志并上报，这里直接带着报错信息给人家重定向到<code>stackoverflow</code>去了，顺便<code>stackoverflow</code>搜索了下这个报错，直接搜一波错误解决方案，而且这个网站是全英文的，顺便还能学一波英语，对于开发者来说，这简直太妙了！不过记得上线的时候，记得在跳转前加一个<code>if(process.env.NODE_ENV === 'development')</code>，不然上到线上一旦报错可就惨了!</p>
<h2 data-id="heading-4">五、倒序排序的简写</h2>
<pre><code class="hljs language-js" lang="js"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];
<span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = arr.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr[i]);      
}
</code></pre>
<p>可简写为：</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];
<span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = arr.<span class="hljs-property">length</span>; i--;) {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr[i]);
}
</code></pre>
<p>代码解释：</p>
<p>先来回顾下for循环的书写结构，即<code>for (初始化表达式; 条件表达式; 递增表达式)</code>,初始化表达式只会执行一次，而条件表达式和递增表达式在每次循环时都会执行一次，而正好这个倒序循环的终止执行条件为<code>i==0</code>，所以就可以把<code>条件表达式</code>和<code>递增表达式</code>合而为一了，主打的就是一个简洁。</p>
<h2 data-id="heading-5">六、在控制台输出一个键盘图形</h2>
<pre><code class="hljs language-js" lang="js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>((<span class="hljs-function"><span class="hljs-params">_</span>=&gt;</span>[...<span class="hljs-string">"`1234567890-=~~QWERTYUIOP[]\\~ASDFGHJKL;'~~ZXCVBNM,./~"</span>].<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">x</span>=&gt;</span>(o+=<span class="hljs-string">`/<span class="hljs-subst">${b=<span class="hljs-string">'_'</span>.repeat(w=x&lt;y?<span class="hljs-number">2</span>:<span class="hljs-string">' 667699'</span>[x=[<span class="hljs-string">"BS"</span>,<span class="hljs-string">"TAB"</span>,<span class="hljs-string">"CAPS"</span>,<span class="hljs-string">"ENTER"</span>][p++]||<span class="hljs-string">'SHIFT'</span>,p])}</span>\\|`</span>,m+=y+(x+<span class="hljs-string">'    '</span>).<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>,w)+y+y,n+=y+b+y+y,l+=<span class="hljs-string">' __'</span>+b)[<span class="hljs-number">73</span>]&amp;&amp;(k.<span class="hljs-title function_">push</span>(l,m,n,o),l=<span class="hljs-string">''</span>,m=n=o=y),m=n=o=y=<span class="hljs-string">'|'</span>,p=l=k=[])&amp;&amp;k.<span class="hljs-property">join</span><span class="hljs-string">`
    `</span>)())
</code></pre>
<p>这段代码会在浏览器控制台中打印出一个键盘图形，不得不说写出这段代码的人真的太有才了！</p>
<p><img src="https://p6-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/74cd71766fb440a287150bc43bf4dec5~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg56iL5bqP5ZGY5bCP5a-S:q75.awebp?rk3s=f64ab15b&amp;x-expires=1742166241&amp;x-signature=YZSrEnuo6HCo5g44oXfduu86sg8%3D" alt="" loading="lazy"></p>
<p>以上就是我总结的一些前端代码的风骚操作，大家有没有更风骚的操作呢？欢迎大家留言分享！</p></div></div>