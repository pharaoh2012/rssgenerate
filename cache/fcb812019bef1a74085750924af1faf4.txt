
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/MrVolleyball/p/19012569" title="发布于 2025-08-01 10:09">
    <span role="heading" aria-level="2">重剑无锋--从零开始建设k8s监控之总结（八）</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="前言">前言</h2>
<p>在前文中，prometheus基本的用法都简单的描述一遍，最后本文来讨论一下prometheus高可用的问题</p>
<h2 id="环境准备">环境准备</h2>
<table>
<thead>
<tr>
<th>组件</th>
<th>版本</th>
</tr>
</thead>
<tbody>
<tr>
<td>操作系统</td>
<td>Ubuntu 22.04.4 LTS</td>
</tr>
<tr>
<td>docker</td>
<td>24.0.7</td>
</tr>
<tr>
<td>thanos</td>
<td>0.36.1</td>
</tr>
</tbody>
</table>
<h2 id="1-双prometheus架构">1. 双prometheus架构</h2>
<p><img alt="prometheus_8_1" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1416773/202507/1416773-20250730112733733-1543477880.png" class="lazyload"></p>
<ul>
<li>2个prometheus采集同一份metrics，一旦有一个出问题，另外一个补上去就行了</li>
<li>该架构保证了prometheus服务的可用性以及数据的可用性</li>
<li>但是会有数据冗余，始终采集了一份数据作为备用，并且prometheus单点压力过大</li>
</ul>
<h2 id="2-做横向拆分的多prometheus架构">2. 做横向拆分的多prometheus架构</h2>
<p><img alt="prometheus_8_2" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1416773/202507/1416773-20250730112741461-335309309.png" class="lazyload"></p>
<ul>
<li>将数据拆分组，并且有不同的prometheus采集，并且prometheus也进行拆分，减少单点的压力</li>
<li>该架构既保证了prometheus服务可用性和数据可用性，又减少了prometheus单点压力</li>
<li>数据依然有冗余，始终采集了一份数据作为备用，并且数据入口很分散，分组越多，会导致数据入口越分散</li>
</ul>
<h2 id="3-多prometheus数据统一查询架构">3. 多prometheus+数据统一查询架构</h2>
<p><img alt="prometheus_8_3" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1416773/202507/1416773-20250730112750009-1751563088.png" class="lazyload"></p>
<ul>
<li>有了统一的数据查询入口，使得web可以实时查询任一时刻的监控数据，如果数据已经超出了prometheus保留期，那也可以去外部存储上获取历史数据</li>
<li>该架构继承了架构2的优点，并且解决了：1）查询入口分散的问题；2）查询历史数据的问题</li>
<li>该架构的配置复杂度与日常的维护成本就很高了</li>
</ul>
<h2 id="4-更复杂的架构">4. 更复杂的架构</h2>
<p>以下思考纯属个人观点，抛砖引玉而已</p>
<p>监控的本质问题，就在于准确获取metrics，并且对其进行分析，所有的架构都是围绕着这个目标来进行的，小到单点，大到多区域多中心，都不例外</p>
<p>对于获取metrics，比较关注获取速度、数据准确度以及覆盖范围</p>
<ul>
<li>获取速度，需要考虑：内网采集？跨公网vpn隧道采集？直接公共网络采集？</li>
<li>数据准确度，需要考虑：多机器的时间是否统一？采集资源是否充足？</li>
<li>覆盖范围，需要考虑：所选的exporter是否准确？</li>
</ul>
<p>对于分析metrics，比较关注数据持久性、数据安全、分析实时性</p>
<ul>
<li>数据持久性，需要考虑：历史数据要保存多久？新鲜数据和老数据分别去什么地方获取？</li>
<li>数据安全，需要考虑：数据是否是敏感数据？怎么防止数据泄露？</li>
<li>分析实时性，需要考虑：多中心部署下怎么保证数据获取速度？多备份下采用哪一个备份的数据是最合理的？</li>
</ul>
<h2 id="小结">小结</h2>
<p>至此，k8s prometheus监控系列结束，期待下一个系列见，谢谢大家</p>
<h2 id="联系我">联系我</h2>
<ul>
<li>联系我，做深入的交流<br>
<img alt="" width="500" height="200" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1416773/202411/1416773-20241121135740959-1907948957.png#" class="lazyload"></li>
</ul>
<hr>
<p>至此，本文结束<br>
在下才疏学浅，有撒汤漏水的，请各位不吝赐教...</p>

</div>
<div id="MySignature" role="contentinfo">
    <p>本文来自博客园，作者：<a href="https://www.cnblogs.com/MrVolleyball/" target="_blank">it排球君</a>，转载请注明原文链接：<a href="https://www.cnblogs.com/MrVolleyball/p/19012569" target="_blank">https://www.cnblogs.com/MrVolleyball/p/19012569</a></p>
<div>本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须在文章页面给出原文连接，否则保留追究法律责任的权利。 </div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-08-01 10:10">2025-08-01 10:09</span>&nbsp;
<a href="https://www.cnblogs.com/MrVolleyball">it排球君</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19012569);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19012569', targetLink: 'https://www.cnblogs.com/MrVolleyball/p/19012569', title: '重剑无锋--从零开始建设k8s监控之总结（八）' })">举报</a>
</div>
        