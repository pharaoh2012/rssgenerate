
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/eanojiang/p/19017846" title="发布于 2025-08-02 01:23">
    <span role="heading" aria-level="2">第三人称——骑马系统以及交互动画</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="骑马系统">骑马系统</h2>
<h3 id="人物在马上的脚本">人物在马上的脚本</h3>
<pre><code class="language-csharp">using MalbersAnimations;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class ThirdPersonRidingHorse : MonoBehaviour
{
    [Header("骑马参数")]
    public GameObject horse;
    public bool isOnHorse;

    //void OnInteract()
    //{
    //    var thirdPersonMove = GetComponent&lt;ThirdPersonMove&gt;();
    //    thirdPersonMove.enabled = false;
    //    var pos = horse.transform.Find("Pos_UpToHorse");

    //}

    CharacterController characterController;
    Animator animator;
    ThirdPersonMove thirdPersonMove;

    private void Awake()
    {
        characterController = GetComponent&lt;CharacterController&gt;();
        animator = GetComponent&lt;Animator&gt;();
        thirdPersonMove = GetComponent&lt;ThirdPersonMove&gt;();
    }

    private void Update()
    {
        if (isOnHorse)
        {
            var axisX = Input.GetAxis("Horizontal");
            var axisY = Input.GetAxis("Vertical");
            animator.SetFloat("AxisX", axisX);
            animator.SetFloat("AxisY", axisY);
        }
        Ride();
    }

    void Ride()
    {
        //上马
        if (!isOnHorse)
        {
            if (Input.GetKeyDown(KeyCode.F))
            {
                isOnHorse = true;
                transform.rotation = horse.transform.rotation;
                transform.position = horse.transform.position;
                //将角色放到马上
                var playerPoint = horse.transform.Find("PlayerPoint");
                transform.SetParent(playerPoint);
                transform.localPosition = Vector3.zero;
                //在马上禁用角色的characterController和move
                characterController.enabled = false;
                thirdPersonMove.enabled = false;
                //开启马的输入控制脚本
                horse.GetComponent&lt;MalbersInput&gt;().enabled = true;

                //切换马上动作状态,即权重从0到1
                animator.SetLayerWeight(2, 1f);
            }
        }
        //下马
        else
        {
            if (Input.GetKeyDown(KeyCode.F))
            {
                isOnHorse = false;
                if (horse != null)
                {
                    //删除马之前设置角色位置
                    transform.SetParent(null);
                    transform.position = horse.transform.position;
                    transform.rotation = horse.transform.rotation;
                    //下马后恢复角色的characterController和move
                    characterController.enabled = true;
                    thirdPersonMove.enabled = true;
                    //关闭马的输入控制脚本
                    horse.GetComponent&lt;MalbersInput&gt;().enabled = false;
                    //关闭马上动作层
                    animator.SetLayerWeight(2, 0f);

                }
            }
        }

    }
}

</code></pre>
<h3 id="马的部分用的是插件里的马预制体horse-animset-pro-riding-system-401unitypackage">马的部分——用的是插件里的马预制体：Horse Animset Pro Riding System 4.0.1.unitypackage</h3>
<p><img src="https://img2024.cnblogs.com/blog/3614909/202508/3614909-20250802012154247-290405492.png" alt="1754068895025" loading="lazy"></p>
<h3 id="人在马上的状态机设置">人在马上的状态机设置</h3>
<p><img src="https://img2024.cnblogs.com/blog/3614909/202508/3614909-20250802160322449-777150024.png" alt="1754120821831" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/3614909/202508/3614909-20250802160322856-1889032785.png" alt="1754120652248" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/3614909/202508/3614909-20250802160323146-1523851706.png" alt="1754120659929" loading="lazy"></p>
<p>效果如下：</p>
<p><img src="https://img2024.cnblogs.com/blog/3614909/202508/3614909-20250802160338276-1932519797.gif" alt="1754121777384" loading="lazy"></p>
<p>在马上的部分做好了</p>
<h2 id="先学习怎么做场景交互">先学习怎么做场景交互</h2>
<p>以常见的开宝箱交互为例：</p>
<p>1）先建一个可开盖宝箱的模型</p>
<p><img src="https://img2024.cnblogs.com/blog/3614909/202508/3614909-20250802011752543-636589963.png" alt="1754062960628" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/3614909/202508/3614909-20250802011753097-482647576.png" alt="1754063029492" loading="lazy"></p>
<p>2）在Box的子级中建立一个空的GameObject，当作角色开始播放交互动画的位置</p>
<p><img src="https://img2024.cnblogs.com/blog/3614909/202508/3614909-20250802011753294-771446913.png" alt="1754062978661" loading="lazy"></p>
<p>3）在Box的animation窗口中建立动画——Box的开盖动画</p>
<p><img src="https://img2024.cnblogs.com/blog/3614909/202508/3614909-20250802011753525-1191992771.png" alt="1754063145644" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/3614909/202508/3614909-20250802011756497-271632361.gif" alt="1754063426945" loading="lazy"></p>
<p>4）这里需要把开盖动画的Loop Time给取消勾选</p>
<p><img src="https://img2024.cnblogs.com/blog/3614909/202508/3614909-20250802011757007-33812290.png" alt="1754063484600" loading="lazy"></p>
<p>5）来到Timeline窗口，新建一个Box的Timeline，把Box的开盖动画和角色交互的动画拖进去</p>
<p><img src="https://img2024.cnblogs.com/blog/3614909/202508/3614909-20250802011757252-443098983.png" alt="1754063758536" loading="lazy"></p>
<blockquote>
<p>注：角色动画是mixamo里找的</p>
</blockquote>
<p><img src="https://img2024.cnblogs.com/blog/3614909/202508/3614909-20250802011757471-1337877485.png" alt="1754063830643" loading="lazy"></p>
<p><strong>角色的Track在k帧的时候选上 角色的animator，在k完之后就记得要取消勾选animator</strong></p>
<p><img src="https://img2024.cnblogs.com/blog/3614909/202508/3614909-20250802011757695-1525186467.png" alt="1754064357709" loading="lazy"></p>
<p><strong>也要记得修改该动画的名字，后面脚本会用到</strong></p>
<p><img src="https://img2024.cnblogs.com/blog/3614909/202508/3614909-20250802011757925-980342267.png" alt="1754065815065" loading="lazy"></p>
<p>为了保证开盖动画在人物动画播完后仍然还在播，点开开盖动画的Animation Track，设置为continue</p>
<p><img src="https://img2024.cnblogs.com/blog/3614909/202508/3614909-20250802011758170-1065893499.png" alt="1754063621486" loading="lazy"></p>
<p>6）把人物移到和PlayerStandPosition同一个位置，追求完美可以k一下开盖动画和角色动画的匹配度，并加上过渡动画(这里我就懒得弄了，因为只是学习怎么做动画交互系统)</p>
<p>7）为Box加上Tag-Box</p>
<p><img src="https://img2024.cnblogs.com/blog/3614909/202508/3614909-20250802011758370-2032621116.png" alt="1754064496681" loading="lazy"></p>
<p>8）为Box加上Trigger碰撞体</p>
<p><img src="https://img2024.cnblogs.com/blog/3614909/202508/3614909-20250802011758596-1031536355.png" alt="1754064627861" loading="lazy"></p>
<p>9）取消勾选Play On Awake，不然还没触发就开始播动画了</p>
<p><img src="https://img2024.cnblogs.com/blog/3614909/202508/3614909-20250802011758853-970720840.png" alt="1754065712494" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/3614909/202508/3614909-20250802011759360-2003593355.png" alt="1754064639759" loading="lazy"></p>
<p>OK，交互动画匹配好了，下面写脚本控制角色到达一个Box周围的Trigger碰撞体区域，按下交互的Input按键才触发动画</p>
<p>脚本逻辑：</p>
<p>在碰撞体区域按下按键-&gt;开始找tag为Box的GameObject，找到的对象就是Box-&gt;在Box的子级中找名为PlayerStandPosition的对象-&gt;更新角色位置、朝向-&gt;在Box的playerableAsset中找到PlayerTrack，播放相应的BoxTimeline</p>
<p>脚本如下：</p>
<p>PlayerOpenBox.cs</p>
<pre><code class="language-csharp">using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Playables;
using UnityEngine.InputSystem;

public class PlayerOpenBox : MonoBehaviour
{
    bool isPlaying = false;

    IEnumerator OnInteract()
    {
        if (list.Count &gt; 0 &amp;&amp; isPlaying == false)
        {
            isPlaying = true;

            var thirdPersonMove = GetComponent&lt;ThirdPersonMove&gt;();
            thirdPersonMove.enabled = false;
            var thirdPersonJump = GetComponent&lt;ThirdPersonJump&gt;();
            thirdPersonJump.enabled = false;
            var thirdPersonRoll = GetComponent&lt;ThirdPersonRoll&gt;();
            thirdPersonRoll.enabled = false;

            var director = list[0];
            list.RemoveAt(0);
            var pos = director.transform.Find("PlayerStandPosition");
            transform.position = pos.position;
            //Debug.Log(pos.position);
            transform.rotation = pos.rotation;
            var animator = GetComponent&lt;Animator&gt;();
            foreach (var output in director.playableAsset.outputs)
            {
                if (output.streamName == "PlayerTrack")
                {
                    director.SetGenericBinding(output.sourceObject, animator);
                    break;
                }
            }
            director.Play();
            while(director.state == PlayState.Playing)
            {
                yield return null;
            }
            thirdPersonMove.enabled = true;
            thirdPersonJump.enabled = true;
            thirdPersonRoll.enabled = true;
            isPlaying = false;
        }
    }
  
    List&lt;PlayableDirector&gt; list = new List&lt;PlayableDirector&gt;();
    private void OnTriggerEnter(Collider other)
    {
        if (other.gameObject.tag == "Box")
        {
            var director = other.gameObject.GetComponent&lt;PlayableDirector&gt;();
            if (director != null &amp;&amp; !list.Contains(director))
            {
                list.Add(director);
            }
            //Debug.Log(transform.position);
        }
    }
  
    private void OnTriggerExit(Collider other)
    {
        if (other.gameObject.tag == "Box")
        {
            var director = other.gameObject.GetComponent&lt;PlayableDirector&gt;();
            if (director != null &amp;&amp; list.Contains(director))
            {
                list.Remove(director);
            }
        }
    }
  
}

</code></pre>
<p>脚本挂在角色身上</p>
<p>效果如下：</p>
<p><img src="https://img2024.cnblogs.com/blog/3614909/202508/3614909-20250802011808055-1351134665.gif" alt="1754068660289" loading="lazy"></p>
<h2 id="上下马交互系统">上下马交互系统</h2>
<p>这个留到后面做</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.6770833333333334" data-date-updated="2025-08-02 17:38">2025-08-02 01:23</span>&nbsp;
<a href="https://www.cnblogs.com/eanojiang">EanoJiang</a>&nbsp;
阅读(<span id="post_view_count">135</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19017846);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19017846', targetLink: 'https://www.cnblogs.com/eanojiang/p/19017846', title: '第三人称——骑马系统以及交互动画' })">举报</a>
</div>
        