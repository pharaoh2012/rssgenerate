
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/HarmonyOSSDK/p/18798282" title="发布于 2025-03-28 16:15">
    <span role="heading" aria-level="2">聚焦应用常用功能，提升用户体验与分发效率</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>随着HarmonyOS应用的持续发展，应用的功能将越来越丰富，实际上80%的用户使用时长都会集中在20%的特性上，其余的功能可能也仅仅是面向部分用户。<br>
用户在下载应用时，如果应用包含大量的功能和资源，可能会导致下载时间过长；应用如果包含许多不常用或特定用户群体才需要的功能，这些功能会占用用户设备的存储空间；如果应用体积庞大，启动和运行速度可能会受到影响。</p>
<p>为了避免用户首次下载应用耗时过长，及过多占用用户空间，HarmonyOS SDK <a href="https://developer.huawei.com/consumer/cn/sdk/store-kit/?ha_source=hms1" title="应用市场服务" target="_blank" rel="noopener nofollow">应用市场服务</a>（Store Kit）提供 <a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/store-moduleinstall-V5?ha_source=hms1" title="产品特性按需分发" target="_blank" rel="noopener nofollow">产品特性按需分发</a>的能力，能够提供动态分发和资源拆分，支持用户按需动态下载自己所需的增强特性，减少开发者应用的分发成本，将精力放在维护和分发用户实际需要的功能模块，帮助提高分发效率。</p>
<h3 id="基本概念">基本概念</h3>
<p><strong>按需分发</strong>：一个应用程序被打包成多个安装包，安装包包含了所有的应用程序代码和静态资源。用户从应用市场下载的应用只包含基本功能的安装包，当用户需要使用增强功能时，相应安装包将会从服务器下载到设备上。</p>
<h3 id="开发步骤">开发步骤</h3>
<h4 id="获取模块安装信息">获取模块安装信息</h4>
<p>1.导入moduleInstallManager模块及相关公共模块。</p>
<pre><code>import { moduleInstallManager } from '@kit.StoreKit';
</code></pre>
<p>2.构造参数。</p>
<p>入参为需要查询的模块名称。</p>
<pre><code>const moduleName: string = 'AModule';
</code></pre>
<p>3.调用getInstalledModule方法，将步骤2中构造的参数传入模块中的getInstalledModule方法。</p>
<pre><code>const moduleInfo: moduleInstallManager.InstalledModule = moduleInstallManager.getInstalledModule(moduleName);
</code></pre>
<h4 id="创建按需加载的请求实例">创建按需加载的请求实例</h4>
<p>1.导入moduleInstallManager模块及相关公共模块。</p>
<pre><code>import { moduleInstallManager } from '@kit.StoreKit';
import type { common } from '@kit.AbilityKit';
</code></pre>
<p>2.构造参数。</p>
<p>入参为当前应用的上下文context，只支持UIAbilityContext和ExtensionContext类型的上下文，其中UIAbilityContext类型的上下文是要校验当前应用是否在前台，如果不在前台，则会被拒绝调用。</p>
<pre><code>const context: common.UIAbilityContext | common.ExtensionContext = getContext(this) as common.UIAbilityContext;
</code></pre>
<p>3.调用createModuleInstallRequest方法，将步骤2中构造的参数依次传入模块中的createModuleInstallRequest方法。</p>
<pre><code>const myModuleInstallProvider: moduleInstallManager.ModuleInstallProvider = new moduleInstallManager.ModuleInstallProvider();
const myModuleInstallRequest: moduleInstallManager.ModuleInstallRequest = myModuleInstallProvider.createModuleInstallRequest(context);
</code></pre>
<h4 id="请求按需加载的接口">请求按需加载的接口</h4>
<p>1.导入moduleInstallManager模块及相关公共模块。</p>
<pre><code>import type { common } from '@kit.AbilityKit';
import { hilog } from '@kit.PerformanceAnalysisKit';
import { moduleInstallManager } from '@kit.StoreKit';
</code></pre>
<p>2.构造参数。</p>
<p>入参为当前要按需加载的模块名。</p>
<pre><code>const moduleNameA: string = 'AModule';
const moduleNameB: string = 'BModule';
</code></pre>
<p>3.调用ModuleInstallRequest中的addModule方法，将步骤2中构造的参数依次传入模块中的addModule方法。</p>
<pre><code>let myModuleInstallRequest: moduleInstallManager.ModuleInstallRequest;
try {
  const myModuleInstallProvider: moduleInstallManager.ModuleInstallProvider = new moduleInstallManager.ModuleInstallProvider();
  const context: common.UIAbilityContext | common.ExtensionContext = getContext(this) as common.UIAbilityContext;
  myModuleInstallRequest = myModuleInstallProvider.createModuleInstallRequest(context);
  const aResult: moduleInstallManager.ReturnCode = myModuleInstallRequest.addModule(moduleNameA);
  const bResult: moduleInstallManager.ReturnCode = myModuleInstallRequest.addModule(moduleNameB);
  hilog.info(0, 'TAG', 'aResult:' + aResult + ' bResult:' + bResult);
} catch (error) {
  hilog.error(0, 'TAG', `addModule onError.code is ${error.code}, message is ${error.message}`);
}
</code></pre>
<p>4.调用fetchModules方法，将步骤三中的myModuleInstallRequest传入模块中的fetchModules方法。</p>
<pre><code>try {
  moduleInstallManager.fetchModules(myModuleInstallRequest)
    .then((data: moduleInstallManager.ModuleInstallSessionState) =&amp;gt; {
      hilog.info(0, 'TAG', 'Succeeded in fetching Modules data.');
    })
} catch (error) {
  hilog.error(0, 'TAG', `fetching Modules onError.code is ${error.code}, message is ${error.message}`);
}
</code></pre>
<h4 id="使用动态模块">使用动态模块</h4>
<p>假如应用A由entry.hap、AModulelib.hsp两个包组成，其中entry是基础包，AModulelib扩展是功能包（创建方式请参考<a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/hap-package-V5?ha_source=hms1" title="应用程序包开发与使用" target="_blank" rel="noopener nofollow">应用程序包开发与使用</a>）。通过应用市场下载安装只会下载安装entry包，在entry包里面可以通过fetchModules接口动态下载AModulelib包，并使用<a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/arkts-dynamic-import-V5?ha_source=hms1" title="动态import" target="_blank" rel="noopener nofollow">动态import</a>技术调用AModulelib里的方法和组件。</p>
<p>AModulelib中主要实现如下：</p>
<ul>
<li>在动态模块AModulelib中定义add方法和DateComponent组件。其中add方法用于计算加法，DateComponent用于显示文本。</li>
</ul>
<p>Calc.ets定义如下：</p>
<pre><code>export function add(a:number, b:number) {
  return a + b;
}
</code></pre>
<p>DateComponent.ets定义如下：</p>
<pre><code>@Component
struct DateComponent {
  build() {
    Column() {
      Text('我是AModulelib中的组件')
        .margin(10);
    }
    .width(300).backgroundColor(Color.Yellow);
  }
}


@Builder
export function showDateComponent() {
  DateComponent()
}
</code></pre>
<ul>
<li>在AModulelib的AModulelib/Index.ets中导出add方法和showDateComponent方法。</li>
</ul>
<pre><code>export { add } from './src/main/ets/utils/Calc';
export { showDateComponent } from './src/main/ets/components/DateComponent';
</code></pre>
<p>entry中主要实现如下：</p>
<ul>
<li>在entry基础模块中，增加动态依赖配置。entry的oh-package.json5中使用dynamicDependencies来动态依赖AModulelib模块。</li>
</ul>
<pre><code>{
  "dynamicDependencies": {
    "AModulelib": "file:../AModulelib"
  }
}
</code></pre>
<ul>
<li>在entry中使用动态模块AModulelib模块里面的方法和组件。在调用AModulelib中的功能前需要判断AModulelib是否已经加载，未加载时请参考<a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/store-moduleinstall-V5?ha_source=hms1#section16173174645416" title="请求按需加载的接口" target="_blank" rel="noopener nofollow">请求按需加载的接口</a>完成加载。</li>
</ul>
<pre><code>import { moduleInstallManager } from '@kit.StoreKit';
import { hilog } from '@kit.PerformanceAnalysisKit';
import { BusinessError, Callback } from '@kit.BasicServicesKit';
import { common } from '@kit.AbilityKit';
import { promptAction } from '@kit.ArkUI';

const TAG: string = 'TAG';

@Entry
@Component
struct Index {
  @BuilderParam AModulelibComponent: Function;
  @State countTotal: number = 0;
  @State isShow: boolean = false;

  build() {
    Row() {
      Column() {
        Button(`调用增量模块中的add功能:3+6`)
          .onClick(() =&amp;gt; {
            this.initAModulelib(() =&amp;gt; {
              import('AModulelib').then((ns: ESObject) =&amp;gt; {
                this.countTotal = ns.add(3, 6);
              }).catch((error: BusinessError) =&amp;gt; {
                hilog.error(0, 'TAG', `add onError.code is ${error.code}, message is ${error.message}`);
              })
            })
          });
        Text('计算结果：' + this.countTotal)
          .margin(10);
        Button(`调用增量模块中的showDateComponent功能`)
          .onClick(() =&amp;gt; {
            this.initAModulelib(() =&amp;gt; {
              import('AModulelib').then((ns: ESObject) =&amp;gt; {
                this.AModulelibComponent = ns.showDateComponent;
                this.isShow = true;
              }).catch((error: BusinessError) =&amp;gt; {
                hilog.error(0, 'TAG', `showDateComponent onError.code is ${error.code}, message is ${error.message}`);
              })
            })
          }).margin({
          top: 10, bottom: 10
        });
        if (this.isShow) {
          this.AModulelibComponent()
        }
      }
      .width('100%')
    }
    .height('100%')
  }

  private showToastInfo(msg: string) {
    promptAction.showToast({
      message: msg,
      duration: 2000
    });
  }

  /**
   * 检查是否已加载AModulelib包
   *
   * @param successCallBack 回调
   */
  private initAModulelib(successCallBack: Callback&lt;void&gt;): void {
    try {
      const result: moduleInstallManager.InstalledModule = moduleInstallManager.getInstalledModule('AModulelib');
      if (result?.installStatus === moduleInstallManager.InstallStatus.INSTALLED) {
        hilog.info(0, TAG, 'AModulelib installed');
        successCallBack &amp;amp;&amp;amp; successCallBack();
      } else {
        // AModulelib模块未安装, 需要调用fetchModules下载AModulelib模块。
        hilog.info(0, TAG, 'AModulelib not installed');
        this.fetchModule('AModulelib', successCallBack)
      }
    } catch (error) {
      hilog.error(0, 'TAG', `getInstalledModule onError.code is ${error.code}, message is ${error.message}`);
    }
  }

  /**
   * 添加监听事件
   *
   * @param successCallBack 回调
   */
  private onListenEvents(successCallBack: Callback&lt;void&gt;): void {
    const timeout = 3 * 60; //单位秒， 默认最大监听时间为30min（即30*60秒）
    moduleInstallManager.on('moduleInstallStatus', (data: moduleInstallManager.ModuleInstallSessionState) =&amp;gt; {
      // 返回成功
      if (data.taskStatus === moduleInstallManager.TaskStatus.INSTALL_SUCCESSFUL) {
        successCallBack &amp;amp;&amp;amp; successCallBack();
        this.showToastInfo('install success');
      }
    }, timeout)
  }

  /**
   * 加载指定包
   *
   * @param moduleName 需要加载的安装包名称
   * @param successCallBack 回调
   */
  private fetchModule(moduleName: string, successCallBack: Callback&lt;void&gt;) {
    try {
      hilog.info(0, TAG, 'handleFetchModules start');
      const context = getContext(this) as common.UIAbilityContext;
      const moduleInstallProvider: moduleInstallManager.ModuleInstallProvider =
        new moduleInstallManager.ModuleInstallProvider();
      const moduleInstallRequest: moduleInstallManager.ModuleInstallRequest =
        moduleInstallProvider.createModuleInstallRequest(context);
      if (!moduleInstallRequest) {
        hilog.warn(0, TAG, 'moduleInstallRequest is empty');
        return;
      }
      moduleInstallRequest.addModule(moduleName);
      moduleInstallManager.fetchModules(moduleInstallRequest)
        .then((data: moduleInstallManager.ModuleInstallSessionState) =&amp;gt; {
          hilog.info(0, TAG, 'Succeeded in fetching Modules result.');
          if (data.code === moduleInstallManager.RequestErrorCode.SUCCESS) {
            this.onListenEvents(successCallBack)
          } else {
            hilog.info(0, TAG, 'fetchModules failure');
          }
        })
        .catch((error: BusinessError) =&amp;gt; {
          hilog.error(0, 'TAG', `fetchModules onError.code is ${error.code}, message is ${error.message}`);
        })
    } catch (error) {
      hilog.error(0, 'TAG', `handleFetchModules onError.code is ${error.code}, message is ${error.message}`);
    }
  }
}
</code></pre>
<p><strong>了解更多详情&gt;&gt;</strong></p>
<p>访问<a href="https://developer.huawei.com/consumer/cn/sdk/store-kit/?ha_source=hms1" title="应用市场服务联盟官网" target="_blank" rel="noopener nofollow">应用市场服务联盟官网</a></p>
<p>获取<a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/store-moduleinstall-V5?ha_source=hms1" title="产品特性按需分发开发指导文档" target="_blank" rel="noopener nofollow">产品特性按需分发开发指导文档</a></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.2504297523923611" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-28 16:15">2025-03-28 16:15</span>&nbsp;
<a href="https://www.cnblogs.com/HarmonyOSSDK">HarmonyOS_SDK</a>&nbsp;
阅读(<span id="post_view_count">16</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18798282" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18798282);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18798282', targetLink: 'https://www.cnblogs.com/HarmonyOSSDK/p/18798282', title: '聚焦应用常用功能，提升用户体验与分发效率' })">举报</a>
</div>
        