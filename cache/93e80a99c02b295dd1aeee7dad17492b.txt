
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/ypSharing/p/18818613" title="发布于 2025-04-10 15:15">
    <span role="heading" aria-level="2">惊爆！10 分钟用 Svelte+Vite+TS+Melt - UI 搭好框架</span>
    

</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			    <div id="cnblogs_post_description" style="display: none">
        
        svelte项目框架包含了路由：svelte-spa-router 样式：less tailwind 国际化：svelte-i18n 接口请求：axios 环境变量配置:.env 组件库：melt-ui 图标库：iconfont 轮播图：swiper node:20.18.1 npm 10.8.2
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<blockquote>
<p><strong>框架太“重”了</strong>：通常一个小型项目只由少数几个简单页面构成，如果使用 Vue 或者 React 这些框架来研发的话，有点“大材小用”了。构建的产物中包含了不少框架运行时代码(虚拟 DOM、响应式、状态管理等)，这些代码对于小型项目而言是冗余的，它们影响了包体大小，进而影响页面的启动速度和执行性能。<br>
<strong>打包太慢了</strong>：以 Vue CLI 为例，它的底层基于 Webpack，虽然 Webpack 具备更强大的功能和灵活性，但相比于 Vite、Esbuild 这些以速度为标杆的构建工具来说，它的速度确实慢了一些，影响了研发效率。</p>
</blockquote>
<p>@</p><div class="toc"><div class="toc-container-header">目录</div><ul><li><a href="#一-创建基本项目" rel="noopener nofollow">一、 创建基本项目</a><ul><li><a href="#11-全局安装-vite" rel="noopener nofollow">1.1 全局安装 Vite</a></li><li><a href="#12-创建-svelte-项目" rel="noopener nofollow">1.2 创建 Svelte 项目</a></li></ul></li><li><a href="#二目录结构" rel="noopener nofollow">二、目录结构</a></li><li><a href="#三svelte路由配置" rel="noopener nofollow">三、svelte路由配置</a><ul><li><a href="#31-npm安装" rel="noopener nofollow">3.1 npm安装</a></li><li><a href="#32-定义router" rel="noopener nofollow">3.2 定义router</a><ul><li><a href="#321-动态导入组件" rel="noopener nofollow">3.2.1 动态导入组件</a></li><li><a href="#322-在页面之间导航" rel="noopener nofollow">3.2.2 在页面之间导航</a></li></ul></li><li><a href="#33-使用路由" rel="noopener nofollow">3.3 使用路由</a></li></ul></li><li><a href="#四svelte-css预处理器" rel="noopener nofollow">四、svelte CSS预处理器</a><ul><li><a href="#41-less的使用" rel="noopener nofollow">4.1 less的使用</a><ul><li><a href="#411-npm安装" rel="noopener nofollow">4.1.1 npm安装</a></li></ul></li><li><a href="#42-tailwind-css的使用" rel="noopener nofollow">4.2 Tailwind CSS的使用</a></li></ul></li><li><a href="#五svelte环境变量配置" rel="noopener nofollow">五、svelte环境变量配置</a><ul><li><a href="#51-环境变量命名规则" rel="noopener nofollow">5.1 环境变量命名规则</a></li><li><a href="#52-env文件的使用" rel="noopener nofollow">5.2 .env文件的使用</a></li><li><a href="#53-在代码中使用环境变量" rel="noopener nofollow">5.3 在代码中使用环境变量</a></li><li><a href="#54-配置运行与打包环境" rel="noopener nofollow">5.4 配置运行与打包环境</a></li></ul></li><li><a href="#六svelte国际化" rel="noopener nofollow">六、svelte国际化</a><ul><li><a href="#61-安装-svelte-i18n" rel="noopener nofollow">6.1 安装 <code>svelte-i18n</code></a></li><li><a href="#62-初始化-svelte-i18n" rel="noopener nofollow">6.2 初始化 <code>svelte-i18n</code></a></li><li><a href="#63-创建语言文件" rel="noopener nofollow">6.3 创建语言文件</a></li><li><a href="#64-在-svelte-组件中使用-svelte-i18n" rel="noopener nofollow">6.4 在 Svelte 组件中使用 <code>svelte-i18n</code></a></li><li><a href="#65-切换语言" rel="noopener nofollow">6.5 切换语言</a></li><li><a href="#66-在-appsvelte-中引入-i18njs" rel="noopener nofollow">6.6 在 <code>App.svelte</code> 中引入 <code>i18n.js</code></a></li><li><a href="#67-运行项目" rel="noopener nofollow">6.7 运行项目</a></li><li><a href="#68-构建项目" rel="noopener nofollow">6.8 构建项目</a></li><li><a href="#69-预览项目" rel="noopener nofollow">6.9 预览项目</a></li><li><a href="#610-检查项目" rel="noopener nofollow">6.10 检查项目</a></li></ul></li><li><a href="#七svelte接口请求" rel="noopener nofollow">七、svelte接口请求</a><ul><li><a href="#71-安装-axios" rel="noopener nofollow">7.1 安装 <code>axios</code></a></li><li><a href="#72-创建-axios-实例" rel="noopener nofollow">7.2 创建 <code>axios</code> 实例</a></li><li><a href="#73-在-svelte-组件中使用-axios" rel="noopener nofollow">7.3 在 Svelte 组件中使用 <code>axios</code></a></li><li><a href="#74-处理请求和响应拦截器" rel="noopener nofollow">7.4 处理请求和响应拦截器</a></li><li><a href="#75-在-appsvelte-中使用-axios" rel="noopener nofollow">7.5 在 <code>App.svelte</code> 中使用 <code>axios</code></a></li><li><a href="#76-处理错误" rel="noopener nofollow">7.6 处理错误</a></li></ul></li><li><a href="#八svelte组件库" rel="noopener nofollow">八、svelte组件库</a></li><li><a href="#九svelte阿里图标库" rel="noopener nofollow">九、svelte阿里图标库</a><ul><li><a href="#91-获取阿里图标" rel="noopener nofollow">9.1 获取阿里图标</a></li><li><a href="#92-将图标文件放入项目" rel="noopener nofollow">9.2 将图标文件放入项目</a></li><li><a href="#93-引入图标文件" rel="noopener nofollow">9.3 引入图标文件</a></li><li><a href="#94-使用图标" rel="noopener nofollow">9.4 使用图标</a></li><li><a href="#95-动态切换图标" rel="noopener nofollow">9.5 动态切换图标</a></li><li><a href="#96-使用-symbol-方式可选" rel="noopener nofollow">9.6 使用 Symbol 方式（可选）</a></li><li><a href="#97-样式调整可选" rel="noopener nofollow">9.7 样式调整（可选）</a></li><li><a href="#98-示例代码" rel="noopener nofollow">9.8 示例代码</a></li></ul></li><li><a href="#十svelte轮播图" rel="noopener nofollow">十、svelte轮播图</a></li><li><a href="#十一store数据共享" rel="noopener nofollow">十一、store数据共享</a><ul><li><a href="#1-创建-store-模块" rel="noopener nofollow">1. 创建 <code>store</code> 模块</a></li><li><a href="#2-创建全局-store" rel="noopener nofollow">2. 创建全局 <code>store</code></a></li><li><a href="#3-在组件中使用-store" rel="noopener nofollow">3. 在组件中使用 <code>store</code></a></li><li><a href="#4-封装-store-的优势" rel="noopener nofollow">4. 封装 <code>store</code> 的优势</a></li><li><a href="#5-示例aboutsvelte-中使用-store" rel="noopener nofollow">5. 示例：<code>about.svelte</code> 中使用 <code>store</code></a></li></ul></li><li><a href="#十二扩展内容" rel="noopener nofollow">十二、扩展内容</a></li><li><a href="#十三框架git地址" rel="noopener nofollow">十三、框架git地址</a></li></ul></div><p></p>
<h2 id="一-创建基本项目">一、 创建基本项目</h2>
<h3 id="11-全局安装-vite">1.1 全局安装 Vite</h3>
<p>通过 npm 全局安装 Vite</p>
<pre><code>npm install vite 
</code></pre>
<h3 id="12-创建-svelte-项目">1.2 创建 Svelte 项目</h3>
<p>Vite 原生支持直接通过脚手架创建 Svelte 项目，执行以下命令</p>
<pre><code>npm create vite@latest
</code></pre>
<p>输入命令后选择如下</p>
<pre><code>✔ Project name: vite-svelte

? Select a framework: › - Use arrow-keys. Return to submit.
    Vanilla
    Vue
    React
    Preact
    Lit
❯   Svelte
    Solid
    Qwik
    Others

? Select a variant: › - Use arrow-keys. Return to submit.
    TypeScript
❯   JavaScript
    SvelteKit
</code></pre>
<p><strong>基本项目创建完成</strong></p>
<h2 id="二目录结构">二、目录结构</h2>
<p>根据上一步创建项目，项目的基本结构栓是完成了，但这样还是不够的，接下来介绍一下完整的项目目录<br>
<img src="https://i-blog.csdnimg.cn/direct/faa1d82a4f50487caa9e5c9baa137743.png" alt="在这里插入图片描述" loading="lazy"></p>
<h2 id="三svelte路由配置">三、svelte路由配置</h2>
<h3 id="31-npm安装">3.1 npm安装</h3>
<p>项目中安装svelte-spa-router</p>
<pre><code>npm install svelte-spa-router
</code></pre>
<h3 id="32-定义router">3.2 定义router</h3>
<ul>
<li>每条路由都是一个普通的Svelte组件，包含标记、脚本、绑定等。任何Svelte组件都可以是路由。</li>
<li>路由定义只是一个JavaScript字典（对象），其中键是一个带有路径（包括参数等）的字符串，值是路由对象。</li>
</ul>
<pre><code>import Home from './routes/Home.svelte'
import Author from './routes/Author.svelte'
import Book from './routes/Book.svelte'
import NotFound from './routes/NotFound.svelte'

const routes = {
    // Exact path
    '/': Home,

    // Using named parameters, with last being optional
    '/author/:first/:last?': Author,

    // Wildcard parameter
    '/book/*': Book,

    // Catch-all
    // This is optional, but if present it must be the last
    '*': NotFound,
}
</code></pre>
<h4 id="321-动态导入组件">3.2.1 动态导入组件</h4>
<p>使用动态导入的优点是，如果您的打包器支持，您可以启用代码拆分并减小发送给用户的捆绑包的大小。这已经用包括Rollup和Webpack在内的捆绑器进行了测试</p>
<ol>
<li>要使用动态导入的组件，您需要利用包装方法（根据路线包装文档，该方法可用于各种操作）。首先，导入wrap方法：</li>
</ol>
<pre><code>import {wrap} from 'svelte-spa-router/wrap'
</code></pre>
<ol start="2">
<li>然后，在路由定义中，使用wrap方法包装路由，将一个函数传递给asyncComponent属性，该函数将动态导入的组件返回给asyncComponent：</li>
</ol>
<pre><code>wrap({
    asyncComponent: () =&gt; import('./Foo.svelte')
})
</code></pre>
<p>案例：</p>
<pre><code>// Import the wrap method
import {wrap} from 'svelte-spa-router/wrap'

// Note that Author and Book are not imported here anymore, so they can be imported at runtime
import Home from './routes/Home.svelte'
import NotFound from './routes/NotFound.svelte'

const routes = {
    '/': Home,

    // Wrapping the Author component
    '/author/:first/:last?': wrap({
        asyncComponent: () =&gt; import('./routes/Author.svelte')
    }),

    // Wrapping the Book component
    '/book/*': wrap({
        asyncComponent: () =&gt; import('./routes/Book.svelte')
    }),

    // Catch-all route last
    '*': NotFound,
}
</code></pre>
<h4 id="322-在页面之间导航">3.2.2 在页面之间导航</h4>
<ol>
<li>锚点导航</li>
</ol>
<pre><code>&lt;a href="#/book/123"&gt;Thus Spoke Zarathustra&lt;/a&gt;
</code></pre>
<ol start="2">
<li>use:link导航（可以使用use：link操作，而不必在每个链接前键入#）</li>
</ol>
<pre><code>&lt;script&gt;
import {link} from 'svelte-spa-router'
&lt;/script&gt;
&lt;a href="/book/321" use:link&gt;The Little Prince&lt;/a&gt;
</code></pre>
<h3 id="33-使用路由">3.3 使用路由</h3>
<p>在app.svelte中全局调用</p>
<pre><code>import Router from 'svelte-spa-router'
</code></pre>
<p>然后，通过将组件放置在标记中，将路由器显示在您想要的任何位置</p>
<pre><code>&lt;body&gt;
    &lt;Router {routes}/&gt;
&lt;/body&gt;
</code></pre>
<h2 id="四svelte-css预处理器">四、svelte CSS预处理器</h2>
<h3 id="41-less的使用">4.1 less的使用</h3>
<h4 id="411-npm安装">4.1.1 npm安装</h4>
<p>安装less与svelte-preprocess-less依赖</p>
<pre><code>npm install --save-dev svelte-preprocess-less less
</code></pre>
<p>在vite.config.js进行配置</p>
<pre><code>import { less } from 'svelte-preprocess-less'
export default defineConfig({
    plugins: [svelte({
        preprocess: {
          style: less(),
        },
      })],
})
</code></pre>
<h3 id="42-tailwind-css的使用">4.2 Tailwind CSS的使用</h3>
<p>通过npx安装直接配置完 tailwindcss</p>
<pre><code>npx sv add tailwindcss
</code></pre>
<h2 id="五svelte环境变量配置">五、svelte环境变量配置</h2>
<p>‌Vite中使用环境变量主要通过.env文件来配置，这些文件根据不同的环境（开发、测试、生产等）有不同的命名规则和使用方式。</p>
<h3 id="51-环境变量命名规则">5.1 环境变量命名规则</h3>
<p>所有环境变量必须以VITE_为前缀</p>
<pre><code>VITE_API_URL=https://api.example.com
VITE_APP_TITLE=My Vite App
</code></pre>
<h3 id="52-env文件的使用">5.2 .env文件的使用</h3>
<p>1‌.  <strong>通用环境变量‌</strong>：在项目的根目录下创建.env文件，用于定义所有环境通用的变量。<br>
2‌.  <strong>特定环境变量‌</strong>：根据不同的环境需求，可以创建以下类型的.env文件：<br>
.env.devt：仅在开发环境中使用。<br>
.env.pro：仅在生产环境中使用。<br>
.env.local：通用的本地配置文件，通常不提交到版本控制系统中。<br>
.env.development.local：开发环境的本地配置文件。<br>
.env.production.local：生产环境的本地配置文件‌</p>
<h3 id="53-在代码中使用环境变量">5.3 在代码中使用环境变量</h3>
<pre><code>console.log(import.meta.env.VITE_API_URL);

</code></pre>
<h3 id="54-配置运行与打包环境">5.4 配置运行与打包环境</h3>
<pre><code>  "scripts": {
    "dev": "vite --mode dev",//运行dev环境
    "dev-pro": "vite --mode pro",//运行pro环境
    "build": "vite build",
    "preview": "vite preview",
    "check": "svelte-check --tsconfig ./tsconfig.app.json &amp;&amp; tsc -p tsconfig.node.json"
  },
</code></pre>
<h2 id="六svelte国际化">六、svelte国际化</h2>
<p><code>svelte-i18n</code> 是一个用于 Svelte 应用的国际化（i18n）库，它可以帮助你轻松地管理和切换应用中的多语言内容。以下是如何在 Svelte 项目中使用 <code>svelte-i18n</code> 的基本步骤：</p>
<h3 id="61-安装-svelte-i18n">6.1 安装 <code>svelte-i18n</code></h3>
<p>首先，确保你已经安装了 <code>svelte-i18n</code>。根据你的 <code>package.json</code> 文件，它已经存在于 <code>dependencies</code> 中。</p>
<pre><code class="language-bash">npm install svelte-i18n
</code></pre>
<h3 id="62-初始化-svelte-i18n">6.2 初始化 <code>svelte-i18n</code></h3>
<p>在你的 Svelte 项目中，通常会在 <code>src</code> 目录下创建一个 <code>i18n.js</code> 或 <code>i18n.ts</code> 文件来初始化 <code>svelte-i18n</code>。</p>
<pre><code class="language-javascript">// src/i18n.js
import { init, register, locale } from 'svelte-i18n';

// 注册默认语言
register('en', () =&gt; import('./locales/en.json'));
register('zh', () =&gt; import('./locales/zh.json'));

// 初始化并设置默认语言
init({
  fallbackLocale: 'en',
  initialLocale: 'en',
});
</code></pre>
<h3 id="63-创建语言文件">6.3 创建语言文件</h3>
<p>在 <code>src/locales</code> 目录下创建语言文件，例如 <code>en.json</code> 和 <code>zh.json</code>。</p>
<pre><code class="language-json">// src/locales/en.json
{
  "welcome": "Welcome to Svelte App",
  "greeting": "Hello, {name}!"
}
</code></pre>
<pre><code class="language-json">// src/locales/zh.json
{
  "welcome": "欢迎使用 Svelte 应用",
  "greeting": "你好, {name}!"
}
</code></pre>
<h3 id="64-在-svelte-组件中使用-svelte-i18n">6.4 在 Svelte 组件中使用 <code>svelte-i18n</code></h3>
<p>你可以在 Svelte 组件中使用 <code>$t</code> 函数来获取翻译内容。</p>
<pre><code class="language-svelte">&lt;script&gt;
  import { t } from 'svelte-i18n';
&lt;/script&gt;

&lt;h1&gt;{$t('welcome')}&lt;/h1&gt;
&lt;p&gt;{$t('greeting', { name: 'John' })}&lt;/p&gt;
</code></pre>
<h3 id="65-切换语言">6.5 切换语言</h3>
<p>你可以通过 <code>locale.set</code> 方法来动态切换语言。</p>
<pre><code class="language-svelte">&lt;script&gt;
  import { locale } from 'svelte-i18n';
&lt;/script&gt;

&lt;button on:click={() =&gt; locale.set('en')}&gt;English&lt;/button&gt;
&lt;button on:click={() =&gt; locale.set('zh')}&gt;中文&lt;/button&gt;
</code></pre>
<h3 id="66-在-appsvelte-中引入-i18njs">6.6 在 <code>App.svelte</code> 中引入 <code>i18n.js</code></h3>
<ol>
<li>确保在 <code>App.svelte</code> 或你的主入口文件中引入 <code>i18n.js</code>。</li>
</ol>
<pre><code class="language-svelte">&lt;script&gt;
  import './i18n.js';
&lt;/script&gt;
</code></pre>
<ol start="2">
<li>确保加载完i18n后在加载页面</li>
</ol>
<pre><code class="language-App.svelte">&lt;script&gt;
  import { locale } from "svelte-i18n";
  import Router from "@/router/Router.svelte";
&lt;/script&gt;
{#if $locale}
  &lt;Layout&gt;
    &lt;Router /&gt;
  &lt;/Layout&gt;
{/if}
</code></pre>
<h3 id="67-运行项目">6.7 运行项目</h3>
<p>使用 <code>npm run dev</code> 运行你的项目，你应该能够看到国际化内容并根据按钮切换语言。</p>
<h3 id="68-构建项目">6.8 构建项目</h3>
<p>当你准备好发布项目时，使用 <code>npm run build</code> 来构建项目。</p>
<pre><code class="language-bash">npm run build
</code></pre>
<h3 id="69-预览项目">6.9 预览项目</h3>
<p>使用 <code>npm run preview</code> 来预览构建后的项目。</p>
<pre><code class="language-bash">npm run preview
</code></pre>
<h3 id="610-检查项目">6.10 检查项目</h3>
<p>使用 <code>npm run check</code> 来检查 Svelte 和 TypeScript 的类型。</p>
<pre><code class="language-bash">npm run check
</code></pre>
<p>通过以上步骤，你应该能够在 Svelte 项目中成功使用 <code>svelte-i18n</code> 来实现国际化功能。</p>
<h2 id="七svelte接口请求">七、svelte接口请求</h2>
<p>在 Svelte 项目中使用 <code>axios</code> 进行 HTTP 请求是非常常见的操作。以下是如何在 Svelte 项目中集成和使用 <code>axios</code> 的步骤：</p>
<h3 id="71-安装-axios">7.1 安装 <code>axios</code></h3>
<p>首先，确保你已经安装了 <code>axios</code>。根据你的 <code>package.json</code> 文件，它已经存在于 <code>dependencies</code> 中。</p>
<pre><code class="language-bash">npm install axios
</code></pre>
<h3 id="72-创建-axios-实例">7.2 创建 <code>axios</code> 实例</h3>
<p>为了更好的管理和配置 <code>axios</code>，通常会在 <code>src/utils</code> 目录下创建一个 <code>api.ts</code> 或 <code>api.js</code> 文件来创建 <code>axios</code> 实例。</p>
<pre><code class="language-typescript">// src/utils/api.ts
import axios from 'axios';

const api = axios.create({
  baseURL: 'https://api.example.com', // 你的 API 基础 URL
  timeout: 10000, // 请求超时时间
  headers: {
    'Content-Type': 'application/json',
  },
});

export default api;
</code></pre>
<h3 id="73-在-svelte-组件中使用-axios">7.3 在 Svelte 组件中使用 <code>axios</code></h3>
<p>你可以在 Svelte 组件中导入并使用 <code>axios</code> 实例来发送 HTTP 请求。</p>
<pre><code class="language-svelte">&lt;script lang="ts"&gt;
  import api from '@/utils/api';
  import { onMount } from 'svelte';

  let data: any;

  onMount(async () =&gt; {
    try {
      const response = await api.get('/endpoint');
      data = response.data;
    } catch (error) {
      console.error('Error fetching data:', error);
    }
  });
&lt;/script&gt;

{#if data}
  &lt;div&gt;
    &lt;h1&gt;{data.title}&lt;/h1&gt;
    &lt;p&gt;{data.description}&lt;/p&gt;
  &lt;/div&gt;
{/if}
</code></pre>
<h3 id="74-处理请求和响应拦截器">7.4 处理请求和响应拦截器</h3>
<p>你可以在 <code>axios</code> 实例中添加请求和响应拦截器，以便在请求发送前或响应到达后进行一些处理。</p>
<pre><code class="language-typescript">// src/utils/api.ts
import axios from 'axios';

const api = axios.create({
  baseURL: 'https://api.example.com',
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json',
  },
});

// 请求拦截器
api.interceptors.request.use(
  (config) =&gt; {
    // 在请求发送之前做一些处理，例如添加 token
    const token = localStorage.getItem('token');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) =&gt; {
    return Promise.reject(error);
  }
);

// 响应拦截器
api.interceptors.response.use(
  (response) =&gt; {
    // 对响应数据做一些处理
    return response;
  },
  (error) =&gt; {
    // 对响应错误做一些处理
    return Promise.reject(error);
  }
);

export default api;
</code></pre>
<h3 id="75-在-appsvelte-中使用-axios">7.5 在 <code>App.svelte</code> 中使用 <code>axios</code></h3>
<p>你可以在 <code>App.svelte</code> 中使用 <code>axios</code> 来获取数据或执行其他 HTTP 操作。</p>
<pre><code class="language-svelte">&lt;script lang="ts"&gt;
  import api from '@/utils/api';
  import { onMount } from 'svelte';

  let userData: any;

  onMount(async () =&gt; {
    try {
      const response = await api.get('/user');
      userData = response.data;
    } catch (error) {
      console.error('Error fetching user data:', error);
    }
  });
&lt;/script&gt;

{#if userData}
  &lt;div&gt;
    &lt;h1&gt;Welcome, {userData.name}!&lt;/h1&gt;
    &lt;p&gt;Email: {userData.email}&lt;/p&gt;
  &lt;/div&gt;
{/if}
</code></pre>
<h3 id="76-处理错误">7.6 处理错误</h3>
<p>在使用 <code>axios</code> 时，确保你处理了可能的错误，例如网络错误或服务器错误。</p>
<pre><code class="language-svelte">&lt;script lang="ts"&gt;
  import api from '@/utils/api';
  import { onMount } from 'svelte';

  let userData: any;
  let errorMessage: string | null = null;

  onMount(async () =&gt; {
    try {
      const response = await api.get('/user');
      userData = response.data;
    } catch (error) {
      errorMessage = 'Failed to fetch user data. Please try again later.';
      console.error('Error fetching user data:', error);
    }
  });
&lt;/script&gt;

{#if userData}
  &lt;div&gt;
    &lt;h1&gt;Welcome, {userData.name}!&lt;/h1&gt;
    &lt;p&gt;Email: {userData.email}&lt;/p&gt;
  &lt;/div&gt;
{:else if errorMessage}
  &lt;p style="color: red;"&gt;{errorMessage}&lt;/p&gt;
{/if}
</code></pre>
<p>通过以上步骤，你应该能够在 Svelte 项目中成功使用 <code>axios</code> 来进行 HTTP 请求。</p>
<h2 id="八svelte组件库">八、svelte组件库</h2>
<p>这里用的是melt-ui，访问地址是：<a href="https://www.melt-ui.com/docs/introduction" target="_blank" rel="noopener nofollow">https://www.melt-ui.com/docs/introduction</a><br>
一键配置</p>
<pre><code>npx @melt-ui/cli@latest init
</code></pre>
<h2 id="九svelte阿里图标库">九、svelte阿里图标库</h2>
<p>在 Svelte 项目中使用阿里图标（如 <a href="https://www.iconfont.cn/" target="_blank" rel="noopener nofollow">iconfont</a>）可以通过以下步骤实现：</p>
<hr>
<h3 id="91-获取阿里图标">9.1 获取阿里图标</h3>
<ol>
<li>访问 <a href="https://www.iconfont.cn/" target="_blank" rel="noopener nofollow">iconfont</a> 并登录。</li>
<li>创建一个项目，将需要的图标添加到项目中。</li>
<li>选择 <code>Font class</code> 或 <code>Symbol</code> 方式生成代码。</li>
<li>点击 <code>下载至本地</code>，解压后得到图标文件。</li>
</ol>
<hr>
<h3 id="92-将图标文件放入项目">9.2 将图标文件放入项目</h3>
<p>将下载的图标文件（如 <code>iconfont.css</code> 和字体文件）放入项目的 <code>public</code> 或 <code>src/assets</code> 目录中。</p>
<p>例如：</p>
<pre><code>public/
  iconfont/
    iconfont.css
    iconfont.ttf
    iconfont.woff
    iconfont.woff2
</code></pre>
<hr>
<h3 id="93-引入图标文件">9.3 引入图标文件</h3>
<p>在 <code>App.svelte</code> 或 <code>main.ts</code> 中引入 <code>iconfont.css</code> 文件。</p>
<pre><code class="language-svelte">&lt;script lang="ts"&gt;
  import "./app.css";
  import Layout from "@/layout/Layout.svelte";
  import Router from "@/router/Router.svelte";
  import { locale } from "svelte-i18n";
  import Toast from "./components/Toast.svelte";
  import { toast } from "@/utils/toastService";

  // 引入阿里图标
  import '../public/iconfont/iconfont.css';
&lt;/script&gt;
</code></pre>
<hr>
<h3 id="94-使用图标">9.4 使用图标</h3>
<p>在 Svelte 组件中使用阿里图标，直接通过 <code>class</code> 引用图标类名。</p>
<pre><code class="language-svelte">&lt;div&gt;
  &lt;i class="iconfont icon-home"&gt;&lt;/i&gt; &lt;!-- icon-home 是图标类名 --&gt;
  &lt;i class="iconfont icon-user"&gt;&lt;/i&gt; &lt;!-- icon-user 是图标类名 --&gt;
&lt;/div&gt;
</code></pre>
<hr>
<h3 id="95-动态切换图标">9.5 动态切换图标</h3>
<p>如果需要动态切换图标，可以将图标类名绑定到变量。</p>
<pre><code class="language-svelte">&lt;script lang="ts"&gt;
  let iconClass = 'icon-home';
&lt;/script&gt;

&lt;div&gt;
  &lt;i class={`iconfont ${iconClass}`}&gt;&lt;/i&gt;
  &lt;button on:click={() =&gt; iconClass = 'icon-user'}&gt;切换图标&lt;/button&gt;
&lt;/div&gt;
</code></pre>
<hr>
<h3 id="96-使用-symbol-方式可选">9.6 使用 Symbol 方式（可选）</h3>
<p>如果选择 <code>Symbol</code> 方式，需要引入 <code>iconfont.js</code> 文件，并使用 <code>&lt;svg&gt;</code> 标签。</p>
<pre><code class="language-svelte">&lt;script lang="ts"&gt;
  import '../public/iconfont/iconfont.js';
&lt;/script&gt;

&lt;svg class="icon" aria-hidden="true"&gt;
  &lt;use xlink:href="#icon-home"&gt;&lt;/use&gt; &lt;!-- #icon-home 是图标 ID --&gt;
&lt;/svg&gt;
</code></pre>
<hr>
<h3 id="97-样式调整可选">9.7 样式调整（可选）</h3>
<p>如果需要调整图标大小或颜色，可以通过 CSS 设置。</p>
<pre><code class="language-svelte">&lt;style lang="less"&gt;
  .iconfont {
    font-size: 24px;
    color: #333;
  }
&lt;/style&gt;
</code></pre>
<hr>
<h3 id="98-示例代码">9.8 示例代码</h3>
<p>以下是一个完整的示例：</p>
<pre><code class="language-svelte">&lt;script lang="ts"&gt;
  import "./app.css";
  import Layout from "@/layout/Layout.svelte";
  import Router from "@/router/Router.svelte";
  import { locale } from "svelte-i18n";
  import Toast from "./components/Toast.svelte";
  import { toast } from "@/utils/toastService";

  // 引入阿里图标
  import '../public/iconfont/iconfont.css';

  let iconClass = 'icon-home';
&lt;/script&gt;

{#if $locale}
  &lt;Layout&gt;
    &lt;Router /&gt;
  &lt;/Layout&gt;
  {#if $toast.visible}
    &lt;Toast message={$toast.message} /&gt;
  {/if}
{/if}

&lt;div&gt;
  &lt;i class={`iconfont ${iconClass}`}&gt;&lt;/i&gt;
  &lt;button on:click={() =&gt; iconClass = 'icon-user'}&gt;切换图标&lt;/button&gt;
&lt;/div&gt;

&lt;style lang="less"&gt;
  .iconfont {
    font-size: 24px;
    color: #333;
  }
&lt;/style&gt;
</code></pre>
<hr>
<p>通过以上步骤，你可以在 Svelte 项目中成功使用阿里图标。如果需要更多定制化功能，可以参考 <a href="https://www.iconfont.cn/help/detail?spm=a313x.7781069.1998910419.d8d11a391&amp;helptype=code" target="_blank" rel="noopener nofollow">iconfont 官方文档</a>。</p>
<h2 id="十svelte轮播图">十、svelte轮播图</h2>
<p>这里用的是https://3.swiper.com.cn/<br>
下载引入相关css与js即可<br>
demo如下</p>
<pre><code>&lt;script&gt;
    import { onMount } from 'svelte';
    import  '@/utils/swiper/swiper.min.js';
    import '@/utils/swiper/swiper.min.css';
    let swiperInstance;
    onMount(() =&gt; {
      // 初始化 Swiper
      swiperInstance = new Swiper('.swiper-container', {
        pagination: '.swiper-pagination',
        paginationClickable: true,
        autoplay:2500,
        loop:true
      });
    });
  &lt;/script&gt;
  
  &lt;style&gt;
   html, body {
        position: relative;
        height: 100%;
    }
    body {
        background: #eee;
        font-family: Helvetica Neue, Helvetica, Arial, sans-serif;
        font-size: 14px;
        color:#000;
        margin: 0;
        padding: 0;
    }
    .swiper-container {
        width: 100%;
        height: 350px;
    }
    .swiper-slide {
        text-align: center;
        font-size: 18px;
        background: #fff;

        /* Center slide text vertically */
        display: -webkit-box;
        display: -ms-flexbox;
        display: -webkit-flex;
        display: flex;
        -webkit-box-pack: center;
        -ms-flex-pack: center;
        -webkit-justify-content: center;
        justify-content: center;
        -webkit-box-align: center;
        -ms-flex-align: center;
        -webkit-align-items: center;
        align-items: center;
    }
  &lt;/style&gt;
  
 &lt;!-- Swiper --&gt;
 &lt;div class="swiper-container"&gt;
  &lt;div class="swiper-wrapper"&gt;
      &lt;div class="swiper-slide"&gt;Slide 1&lt;/div&gt;
      &lt;div class="swiper-slide"&gt;Slide 2&lt;/div&gt;
  &lt;/div&gt;
  &lt;!-- Add Pagination --&gt;
  &lt;div class="swiper-pagination"&gt;&lt;/div&gt;
&lt;/div&gt;

</code></pre>
<h2 id="十一store数据共享">十一、store数据共享</h2>
<p>在 Svelte 中，<code>store</code> 是一个核心概念，用于管理应用的状态。为了更好地组织代码，可以将 <code>store</code> 封装为模块，包括 <code>state</code>、<code>actions</code>、<code>getters</code> 和 <code>mutations</code>，类似于 Vuex 或 Redux 的设计模式。以下是如何封装 <code>store</code> 的示例：</p>
<hr>
<h3 id="1-创建-store-模块">1. 创建 <code>store</code> 模块</h3>
<p>在 <code>src/store</code> 目录下创建一个模块，例如 <code>centerStore.ts</code>，用于管理特定模块的状态和逻辑。</p>
<pre><code class="language-typescript">// src/store/centerStore.ts
import { writable, derived } from 'svelte/store';

// State
const state = writable({
  userData: null,
  loading: false,
  error: null,
});

// Actions
const actions = {
  async getUserData(params: { onlyMakeTheSame: boolean }) {
    try {
      state.update((s) =&gt; ({ ...s, loading: true, error: null }));
      // 模拟 API 调用
      const response = await fetch('/api/user', { method: 'GET' });
      const data = await response.json();
      state.update((s) =&gt; ({ ...s, userData: data, loading: false }));
    } catch (error) {
      state.update((s) =&gt; ({ ...s, error: error.message, loading: false }));
    }
  },
};

// Getters
const getters = {
  userData: derived(state, ($state) =&gt; $state.userData),
  isLoading: derived(state, ($state) =&gt; $state.loading),
  error: derived(state, ($state) =&gt; $state.error),
};

// Mutations (可选)
const mutations = {
  setUserData(userData: any) {
    state.update((s) =&gt; ({ ...s, userData }));
  },
};

// 导出模块
export const centerStore = {
  state,
  actions,
  getters,
  mutations,
};
</code></pre>
<hr>
<h3 id="2-创建全局-store">2. 创建全局 <code>store</code></h3>
<p>在 <code>src/store/index.ts</code> 中整合所有模块，创建一个全局 <code>store</code>。</p>
<pre><code class="language-typescript">// src/store/index.ts
import { centerStore } from './centerStore';

export const store = {
  center: centerStore,
};
</code></pre>
<hr>
<h3 id="3-在组件中使用-store">3. 在组件中使用 <code>store</code></h3>
<p>在 Svelte 组件中导入并使用 <code>store</code>。</p>
<pre><code class="language-svelte">&lt;script lang="ts"&gt;
  import { store } from '@/store/index';
  import { onMount } from 'svelte';

  // 获取 state 和 getters
  const { state, getters } = store.center;

  // 调用 action
  function fetchData() {
    store.center.actions.getUserData({ onlyMakeTheSame: false });
  }

  onMount(() =&gt; {
    fetchData();
  });
&lt;/script&gt;

{#if $getters.isLoading}
  &lt;p&gt;Loading...&lt;/p&gt;
{:else if $getters.error}
  &lt;p style="color: red;"&gt;Error: {$getters.error}&lt;/p&gt;
{:else if $getters.userData}
  &lt;div&gt;
    &lt;h1&gt;User Data&lt;/h1&gt;
    &lt;pre&gt;{JSON.stringify($getters.userData, null, 2)}&lt;/pre&gt;
  &lt;/div&gt;
{/if}

&lt;button on:click={fetchData}&gt;Refresh Data&lt;/button&gt;
</code></pre>
<hr>
<h3 id="4-封装-store-的优势">4. 封装 <code>store</code> 的优势</h3>
<ul>
<li><strong>模块化</strong>：将状态和逻辑按模块划分，便于维护和扩展。</li>
<li><strong>复用性</strong>：<code>actions</code> 和 <code>getters</code> 可以在多个组件中复用。</li>
<li><strong>可测试性</strong>：<code>actions</code> 和 <code>mutations</code> 可以单独测试。</li>
<li><strong>清晰性</strong>：<code>state</code>、<code>actions</code>、<code>getters</code> 和 <code>mutations</code> 分离，代码结构更清晰。</li>
</ul>
<hr>
<h3 id="5-示例aboutsvelte-中使用-store">5. 示例：<code>about.svelte</code> 中使用 <code>store</code></h3>
<p>根据你的 <code>about.svelte</code> 文件，可以这样使用 <code>store</code>：</p>
<pre><code class="language-svelte">&lt;script lang="ts"&gt;
  import { t, locale } from "svelte-i18n";
  import { toast } from '@/utils/toastService';
  import { store } from '@/store/index';

  function getData() {
    store.center.actions.getUserData({ onlyMakeTheSame: false });
  }
&lt;/script&gt;

&lt;h1&gt;{$t("welcome")}&lt;/h1&gt;
&lt;p&gt;{$t("about")}&lt;/p&gt;

&lt;button on:click={getData}&gt;获取接口数据&lt;/button&gt;

{#if $store.center.getters.isLoading}
  &lt;p&gt;Loading...&lt;/p&gt;
{:else if $store.center.getters.error}
  &lt;p style="color: red;"&gt;Error: {$store.center.getters.error}&lt;/p&gt;
{:else if $store.center.getters.userData}
  &lt;div&gt;
    &lt;h1&gt;User Data&lt;/h1&gt;
    &lt;pre&gt;{JSON.stringify($store.center.getters.userData, null, 2)}&lt;/pre&gt;
  &lt;/div&gt;
{/if}
</code></pre>
<hr>
<p>通过以上步骤，你可以在 Svelte 项目中封装 <code>store</code>，并实现 <code>state</code>、<code>actions</code>、<code>getters</code> 和 <code>mutations</code> 的分离，使代码更易于维护和扩展。</p>
<h2 id="十二扩展内容">十二、扩展内容</h2>
<p>这里由于使用的melt-ui没有toast提示于是做了一个全局组建toas.svelte</p>
<ol>
<li>组建创建</li>
</ol>
<pre><code>&lt;script&gt;
  import { fade } from "svelte/transition";
  export let message = "";
  export let duration = 3000; // 持续时间，单位毫秒

  let visible = false;

  const showToast = () =&gt; {
    visible = true;
    setTimeout(() =&gt; {
      visible = false;
    }, duration);
  };

  showToast(); // 显示Toast
&lt;/script&gt;

{#if visible}
  &lt;div class="toast" transition:fade&gt;
    {message}
  &lt;/div&gt;
{/if}

&lt;style&gt;
  .toast {
    position: fixed;
    top: 300px;
    left: 50%;
    transform: translateX(-50%);
    padding: 10px 20px;
    background-color: #333;
    color: white;
    border-radius: 5px;
    z-index: 1000;
  }
&lt;/style&gt;

</code></pre>
<ol start="2">
<li>toastService封装</li>
</ol>
<pre><code>import { writable } from 'svelte/store';
function createToast() {
  const { subscribe, set, update } = writable({ message: '', visible: false });
 
  function show(message, duration = 3000) {
    set({ message, visible: true });
    setTimeout(() =&gt; {
      update(current =&gt; ({ ...current, visible: false }));
    }, duration);
  }
 
  return {
    subscribe,
    show, // 公开show方法供外部调用
  };
}
 
export const toast = createToast(); // 创建并导出toast服务实例
</code></pre>
<ol start="3">
<li>全局调用app.svelte</li>
</ol>
<pre><code>&lt;script lang="ts"&gt;

  import Toast from "./components/Toast.svelte";
  import { toast } from "@/utils/toastService";
&lt;/script&gt;
  {#if $toast.visible}
    &lt;!-- 使用$来访问store的值 --&gt;
    &lt;Toast message={$toast.message} /&gt;
    &lt;!-- 将消息传递给Toast组件 --&gt;
  {/if}
</code></pre>
<ol start="4">
<li>使用</li>
</ol>
<pre><code>  import { toast } from '@/utils/toastService';
  toast.show('Hello, this is a toast!')
</code></pre>
<h2 id="十三框架git地址">十三、框架git地址</h2>
<p><a href="https://gitee.com/cyp926/svelte-vite" target="_blank" rel="noopener nofollow">https://gitee.com/cyp926/svelte-vite</a></p>

</div>
<div class="clear"></div>

		</div>
		<div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.4245592084513889" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-10 18:05">2025-04-10 15:15</span>&nbsp;
<a href="https://www.cnblogs.com/ypSharing">久宇诗</a>&nbsp;
阅读(<span id="post_view_count">56</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18818613" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18818613);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18818613', targetLink: 'https://www.cnblogs.com/ypSharing/p/18818613', title: '惊爆！10 分钟用 Svelte+Vite+TS+Melt - UI 搭好框架' })">举报</a>
</div>
	