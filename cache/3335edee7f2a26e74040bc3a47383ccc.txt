
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/wpfdeveloper/p/18838610" title="发布于 2025-04-21 15:16">
    <span role="heading" aria-level="2">VTK 入门系列之二：为三维场景添加坐标轴</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="一引言">一、引言</h2>
<p>在进行三维可视化开发时，我们常常希望能够清晰了解<strong>模型在空间中的位置、方向与比例关系</strong>。而最直观的辅助工具就是三维坐标轴（Axes）。在 VTK 中，<code>vtkAxesActor</code> 提供了一种开箱即用的方式来将 X、Y、Z 三个方向的坐标轴渲染到场景中，增强空间感知。</p>
<p>本篇我们将通过一个完整的 C++ 示例，逐步分析如何使用 VTK 构建一个包含：</p>
<ul>
<li>一个球体模型；</li>
<li>一组平移后的三维坐标轴；</li>
<li>基本的摄像机旋转与视图设置；<br>
的基础渲染场景。</li>
</ul>
<hr>
<h2 id="二工程代码一览">二、工程代码一览</h2>
<p>以下是完整的 C++ 示例代码，使用 VTK 官方推荐的 <code>vtkNew&lt;&gt;</code> 智能指针风格：</p>
<pre><code class="language-cpp">#include &lt;vtkActor.h&gt;
#include &lt;vtkAxesActor.h&gt;
#include &lt;vtkCamera.h&gt;
#include &lt;vtkCaptionActor2D.h&gt;
#include &lt;vtkNamedColors.h&gt;
#include &lt;vtkNew.h&gt;
#include &lt;vtkPolyDataMapper.h&gt;
#include &lt;vtkRenderWindow.h&gt;
#include &lt;vtkRenderWindowInteractor.h&gt;
#include &lt;vtkRenderer.h&gt;
#include &lt;vtkSphereSource.h&gt;
#include &lt;vtkTextProperty.h&gt;
#include &lt;vtkTransform.h&gt;
</code></pre>
<p>主函数部分：</p>
<pre><code class="language-cpp">int main()
{
    // 1. 配色工具
    vtkNew&lt;vtkNamedColors&gt; colors;

    // 2. 球体模型源
    vtkNew&lt;vtkSphereSource&gt; sphereSource;
    sphereSource-&gt;SetRadius(0.5);
    sphereSource-&gt;SetCenter(0.0, 0.0, 0.0);

    // 3. 几何映射器
    vtkNew&lt;vtkPolyDataMapper&gt; sphereMapper;
    sphereMapper-&gt;SetInputConnection(sphereSource-&gt;GetOutputPort());

    // 4. 渲染实体（Actor）
    vtkNew&lt;vtkActor&gt; sphereActor;
    sphereActor-&gt;SetMapper(sphereMapper);

    // 5. 渲染器设置
    vtkNew&lt;vtkRenderer&gt; renderer;

    // 6. 渲染窗口
    vtkNew&lt;vtkRenderWindow&gt; renderWindow;
    renderWindow-&gt;SetWindowName("Axes");
    renderWindow-&gt;AddRenderer(renderer);
    renderWindow-&gt;SetSize(600, 600);

    // 7. 交互器
    vtkNew&lt;vtkRenderWindowInteractor&gt; renderWindowInteractor;
    renderWindowInteractor-&gt;SetRenderWindow(renderWindow);

    // 8. 添加球体到场景
    renderer-&gt;AddActor(sphereActor);
    renderer-&gt;SetBackground(colors-&gt;GetColor3d("CadetBlue").GetData());

    // 9. 添加三维坐标轴 + 位移
    vtkNew&lt;vtkTransform&gt; transform;
    transform-&gt;Translate(1.0, 0.0, 0.0);  // 坐标轴右移 1 个单位

    vtkNew&lt;vtkAxesActor&gt; axes;
    axes-&gt;SetUserTransform(transform);  // 应用变换
    renderer-&gt;AddActor(axes);

    // 10. 调整相机角度
    renderer-&gt;GetActiveCamera()-&gt;Azimuth(50);
    renderer-&gt;GetActiveCamera()-&gt;Elevation(-30);
    renderer-&gt;ResetCamera();

    // 11. 启动渲染
    renderWindow-&gt;Render();
    renderWindowInteractor-&gt;Start();

    return 0;
}
</code></pre>
<hr>
<h2 id="三关键组件详解">三、关键组件详解</h2>
<h3 id="1️⃣-vtkspheresource几何体数据源">1️⃣ <code>vtkSphereSource</code>：几何体数据源</h3>
<p><code>vtkSphereSource</code> 用于生成球体模型，它是 VTK 所有可视化的起点之一，输出一个标准的 <code>vtkPolyData</code> 数据集。</p>
<ul>
<li><code>SetRadius(double)</code> 设置球的半径；</li>
<li><code>SetCenter(x, y, z)</code> 设置球心位置。</li>
</ul>
<pre><code class="language-cpp">sphereSource-&gt;SetRadius(0.5);
sphereSource-&gt;SetCenter(0.0, 0.0, 0.0);
</code></pre>
<hr>
<h3 id="2️⃣-vtkaxesactor三维坐标轴">2️⃣ <code>vtkAxesActor</code>：三维坐标轴</h3>
<p><code>vtkAxesActor</code> 是 VTK 中专门用于展示三维坐标轴的 Actor，它默认显示：</p>
<ul>
<li>红色 X 轴、绿色 Y 轴、蓝色 Z 轴；</li>
<li>带箭头；</li>
<li>自动加粗与缩放；</li>
<li>显示 X/Y/Z 标签。</li>
</ul>
<pre><code class="language-cpp">vtkNew&lt;vtkAxesActor&gt; axes;
axes-&gt;SetUserTransform(transform); // 应用平移变换
</code></pre>
<p>如果不使用 <code>SetUserTransform()</code>，坐标轴将默认出现在场景原点。</p>
<p>可选配置项包括：</p>
<pre><code class="language-cpp">axes-&gt;SetTotalLength(1.0, 1.0, 1.0);     // 设置轴长
axes-&gt;SetShaftTypeToCylinder();         // 轴样式：Cylinder / Line / Tube
axes-&gt;SetAxisLabels(1);                 // 是否显示 X/Y/Z 标签
axes-&gt;SetCylinderRadius(0.02);          // 粗细设置
</code></pre>
<hr>
<h3 id="3️⃣-vtktransform变换控制">3️⃣ <code>vtkTransform</code>：变换控制</h3>
<p>VTK 中通过 <code>vtkTransform</code> 控制 Actor 的位置、旋转与缩放。它支持：</p>
<ul>
<li>平移：<code>Translate(x, y, z)</code></li>
<li>旋转：<code>RotateX(angle)</code> / <code>RotateY(angle)</code> / <code>RotateZ(angle)</code></li>
<li>缩放：<code>Scale(x, y, z)</code></li>
</ul>
<p>这些变换可以用来控制 <code>vtkAxesActor</code>、<code>vtkActor</code> 等在场景中的最终位置。</p>
<hr>
<h3 id="4️⃣-渲染管线简介">4️⃣ 渲染管线简介</h3>
<p>这是一个典型的 VTK 可视化管线结构：</p>
<pre><code>[数据源] → [Mapper] → [Actor] → [Renderer] → [RenderWindow]
</code></pre>
<p>在本例中：</p>
<ul>
<li><code>vtkSphereSource</code> 是数据源；</li>
<li><code>vtkPolyDataMapper</code> 负责几何数据 → 图元 → GPU；</li>
<li><code>vtkActor</code> 作为场景中的实体节点；</li>
<li><code>vtkRenderer</code> 管理场景和相机；</li>
<li><code>vtkRenderWindow</code> 是输出窗口；</li>
<li><code>vtkRenderWindowInteractor</code> 提供交互能力。</li>
</ul>
<hr>
<h2 id="四运行效果示意图概念图">四、运行效果示意图（概念图）</h2>
<p><img src="https://img2024.cnblogs.com/blog/3619031/202504/3619031-20250421151530609-378135721.png" alt="" loading="lazy"></p>
<p>你将在窗口中看到一个淡蓝背景下的球体和一组 RGB 三维坐标轴，坐标轴出现在球体右侧，并有箭头和字母标识方向。</p>
<hr>
<h2 id="五进阶拓展建议">五、进阶拓展建议</h2>
<table>
<thead>
<tr>
<th>功能</th>
<th>类名</th>
<th>简介</th>
</tr>
</thead>
<tbody>
<tr>
<td>显示多个模型</td>
<td><code>vtkAppendPolyData</code></td>
<td>合并多个几何对象</td>
</tr>
<tr>
<td>场景交互标尺</td>
<td><code>vtkOrientationMarkerWidget</code></td>
<td>显示一个固定角落坐标轴</td>
</tr>
<tr>
<td>精细轴控制</td>
<td><code>vtkAnnotatedCubeActor</code></td>
<td>创建可标注的方向方块</td>
</tr>
<tr>
<td>GUI 集成</td>
<td>Qt + VTK</td>
<td>可嵌入 Qt 窗口构建完整应用</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="六总结">六、总结</h2>
<p>在本文中，我们构建了一个基础的 VTK 可视化程序，展示了以下核心技能：</p>
<ul>
<li>使用 <code>vtkSphereSource</code> 构建几何体；</li>
<li>使用 <code>vtkAxesActor</code> 添加坐标轴辅助信息；</li>
<li>使用 <code>vtkTransform</code> 控制坐标轴位置；</li>
<li>使用摄像机控制展示角度；</li>
<li>构建完整的 VTK 渲染管线。</li>
</ul>
<p>📌 <strong>坐标轴是三维场景中不可或缺的空间参考工具，也是后续可视化操作（如配准、交互、测量）的基础。</strong></p>
<hr>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.04757330311574074" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-21 15:17">2025-04-21 15:16</span>&nbsp;
<a href="https://www.cnblogs.com/wpfdeveloper">智研定制助手</a>&nbsp;
阅读(<span id="post_view_count">7</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18838610);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18838610', targetLink: 'https://www.cnblogs.com/wpfdeveloper/p/18838610', title: 'VTK 入门系列之二：为三维场景添加坐标轴' })">举报</a>
</div>
        