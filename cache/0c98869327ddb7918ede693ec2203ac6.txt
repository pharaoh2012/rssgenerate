
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/weiyuanzhang/p/18894564" title="发布于 2025-05-24 18:03">
    <span role="heading" aria-level="2">X86C++反汇编01.IDA和提取签名</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p><a href="https://bbs.kanxue.com/elink@260K9s2c8@1M7s2y4Q4x3@1q4Q4x3V1k6Q4x3V1k6T1M7s2y4W2L8X3c8Q4x3X3g2F1k6i4c8Q4x3V1k6@1K9s2u0W2j5h3c8Q4x3X3b7@1x3e0g2Q4x3X3b7I4i4K6u0V1x3g2)9J5k6h3S2@1L8h3H3%60." rel="noopener nofollow">https://bpsend.net/thread-415-1-1.html</a></p>
<p>用VC6.0新建一个控制台工程</p>
<p><img src="https://bbs.kanxue.com/upload/attach/202505/865778_KEYZATDYSPMJZB5.jpg" alt="img" class="div_message_boxShadow"></p>
<p><img src="https://bbs.kanxue.com/upload/attach/202505/865778_TKP677J4JDGA8SZ.jpg" alt="img" class="div_message_boxShadow"></p>
<p>编译成 debug 和 Release 2个版本</p>
<p>应ida分别查看2种版本的程序</p>
<p>高版本ida 可能会直接定位到函数入口,正常情况下,我们需要先调试找到关键,找到关键以后点再通过调试设置api断点,读写断点等,找到程序的关键点,我们再来逆向,很少有把函数从main函数开始从头逆向到尾的,通常是卡一处关键点,看一出关键功能,看关键功能怎么处理的, 因此需要先调试在用ida打开</p>
<p>ida 可以通过快捷键&nbsp;G&nbsp;输入地址点回车,跳到该地址, 按&nbsp;ESC&nbsp;键 可以退回原来的地址</p>
<h2 id="msg_header_h2_0">找函数入口</h2>
<p>必须是低版本的adi,高版本会自动帮你找到</p>
<p>用vs2019 建一个控制台程序</p>
<h3 id="msg_header_h3_0">Release</h3>
<p><img src="https://bbs.kanxue.com/upload/attach/202505/865778_EKR2A2ZZW87C8XK.jpg" alt="img" class="div_message_boxShadow"></p>
<p>点击第二个jmp 然后往下找,找到 3 个push 在一起,下面是个call 的,说明那个call就是到main函数,双击改call即可找到main函数</p>
<p><img src="https://bbs.kanxue.com/upload/attach/202505/865778_4SGD54JCB3SRG35.jpg" alt="img" class="div_message_boxShadow"></p>
<h3 id="msg_header_h3_1">Debug</h3>
<p>右键选择代码视图</p>
<p><img src="https://bbs.kanxue.com/upload/attach/202505/865778_FDXJAQZV7WMHWK7.jpg" alt="img" class="div_message_boxShadow"></p>
<p>debug那么是2个call,第二个call就类似与Release 版的jmp</p>
<p>双击过去后往下找</p>
<p><img src="https://bbs.kanxue.com/upload/attach/202505/865778_MJSNHF8TD94ZB3J.jpg" alt="img" class="div_message_boxShadow"></p>
<p>找mian 函数主要要卡关键点</p>
<p>一般exit 上面就是main函数</p>
<p><img src="https://bbs.kanxue.com/upload/attach/202505/865778_DJHABFZBC9JAY9R.jpg" alt="img" class="div_message_boxShadow"></p>
<p>exit上2个call 就是main函数</p>
<p><img src="https://bbs.kanxue.com/upload/attach/202505/865778_VSQRBQ33ZFG86E2.jpg" alt="img" class="div_message_boxShadow"></p>
<p>还有1种方法就是找分支结构,分支结构结束就是</p>
<p><img src="https://bbs.kanxue.com/upload/attach/202505/865778_TQT2NX4RHM3N8FQ.jpg" alt="img" class="div_message_boxShadow"></p>
<p>3个push</p>
<p><img src="https://bbs.kanxue.com/upload/attach/202505/865778_UUMEU4H2Y56ESBN.jpg" alt="img" class="div_message_boxShadow"></p>
<p>快捷键&nbsp;n&nbsp;可以对函数名重新命名</p>
<p><img src="https://bbs.kanxue.com/upload/attach/202505/865778_SG5QQNWCVQB7YVT.jpg" alt="img" class="div_message_boxShadow"></p>
<h2 id="msg_header_h2_1">IDA的使用</h2>
<hr><ol>
<li>IDA对Debug版本和Release版本可执行文件有所区别，一般Debug可执行可以识别符号，Release版本则识别不了。</li>
<li>.idb文件：IDA生成的文件，里面存储了注释等信息</li>
<li>IDA分析后有自己的一套命名规则，如下：</li>
</ol>
<ul>
<li>子程序 sub_地址</li>
<li>标号：loc_标号</li>
<li>局部变量：</li>
<ul>
<li>sub：子程序</li>
<li>loc：标号</li>
<li>arg：参数</li>
<li>lpMem：内存首地址</li>
<li>var：局部变量</li>
<li>byte等类型：全局变量</li>
</ul>
</ul>
<h3 id="msg_header_h3_2">IDA常用快捷键</h3>
<ul>
<li>Ctrl + "+" --&gt; 展开代码</li>
<li>N --&gt; 修改名字，修改一处，其他地方也会跟随改变</li>
<li>D --&gt; 修改数据类型定义</li>
<li>Alt + D --&gt; 新增数据类型定义</li>
<li>C --&gt; 按代码解析</li>
<li>A --&gt; 按ASCII字符串解析，如需解析为其它类型字符串，在Edit→String中设置</li>
<li>; --&gt; 添加注释</li>
<li>shift + F5（:View→Open subviews→Signatures）：添加新签名 -- 右键"Apply new Signatures"→选择新签名.sig文件</li>
</ul>
<h4>规避花指令</h4>
<p>D 和 C 键配合</p>
<pre>int&nbsp;main(int&nbsp;argc,&nbsp;char*&nbsp;argv[])
{
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;n&nbsp;=&nbsp;6;
&nbsp;&nbsp;&nbsp;&nbsp;scanf("%d",&amp;n);
&nbsp;&nbsp;&nbsp;&nbsp;__asm{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jnp&nbsp;NEXT
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jp&nbsp;NEXT
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_emit&nbsp;0xe9&nbsp;&nbsp;&nbsp;//&nbsp;_emit&nbsp;相当于&nbsp;db

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NEXT:&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;printf("Hello&nbsp;World!&nbsp;%d\n",n);
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;0;
}</pre>
<p>VC 不支持 db</p>
<p><img src="https://bbs.kanxue.com/upload/attach/202505/865778_MPFQKDNFYJ2QZGN.jpg" alt="img" class="div_message_boxShadow"></p>
<p>上面代码明显看出不合理, 跳转到到 +1的位置,相当于指令中间 所以肯定是有花指令</p>
<p>选中 401010 按d键,强制解释为数据</p>
<p><img src="https://bbs.kanxue.com/upload/attach/202505/865778_HFSVNEW9BSSRYX2.jpg" alt="img" class="div_message_boxShadow"></p>
<p>选中 40101E 按 c 键,强制解释为代码 相当于跳过了 10101d这行代码</p>
<h4>代码解读</h4>
<p><img src="https://bbs.kanxue.com/upload/attach/202505/865778_RCF6PETAJCHV5W9.jpg" alt="img" class="div_message_boxShadow"></p>
<p>安全选项是防止溢出的 就是 main函数的 { } 返回地址前面有一个 类似于校验值的全局变量,它的值 跟线程id,进程id,<a href="https://bbs.kanxue.com/elink@e3fK9s2c8@1M7s2y4Q4x3@1q4Q4x3V1k6Q4x3V1k6T1M7s2y4W2L8X3c8Q4x3X3g2F1k6i4c8Q4x3V1k6X3L8%4u0#2L8g2)9J5k6o6g2Q4x3X3b7I4i4K6u0W2K9s2c8E0L8l9%60.%60." rel="noopener nofollow">内核</a>数量,系统时间相关它的值是 刚进函数就设置的</p>
<p><img src="https://bbs.kanxue.com/upload/attach/202505/865778_STES4T4NJUNWYFX.jpg" alt="img" class="div_message_boxShadow"></p>
<h3 id="msg_header_h3_3">IDA窗口</h3>
<p><img src="https://bbs.kanxue.com/upload/attach/202505/865778_42ETE4YFNQHUKWV.jpg" alt="img" class="div_message_boxShadow"></p>
<p>名字窗口 d表示数据 f 表示函数 i 表示导入 a开头表示字符串 41</p>
<p><img src="https://bbs.kanxue.com/upload/attach/202505/865778_M3NPADYBA53BDFW.jpg" alt="img" class="div_message_boxShadow"></p>
<h2 id="msg_header_h2_2">IDA函数名称识别</h2>
<p><img src="https://bbs.kanxue.com/upload/attach/202505/865778_CVP52KTKV36QKSS.jpg" alt="img" class="div_message_boxShadow"></p>
<p>通过ida 可以一看到部分信息被识别出来了,但是部分信息并没有被识别出来</p>
<p>下面的点击进去有经验的可以发现是一个 printf 函数,没经验的可以通过ida的签名功能来自动识别</p>
<p><img src="https://bbs.kanxue.com/upload/attach/202505/865778_EX8V9FPN8AE9SA9.jpg" alt="img" class="div_message_boxShadow"></p>
<hr>
<h4>签名简介</h4>
<ul>
<li>IDA可以识别函数名以及参数等信息，IDA是用过SIG文件识别已知函数信息。在安装IDA的时候，已经将常用的库制作为SIG文件，放置在安装目录的SIG文件夹下。</li>
<li>函数签名：SIG文件也成为签名文件</li>
<li>作用：利用此功能可识别第三方提供的库函数，从而简化分析流程</li>
</ul>
<p>以低版本C库函数为例</p>
<h4>1. 低版本库函数实现位置：</h4>
<p>以VC6.0为例：../VC98/Lib</p>
<ul>
<li>各种C库函数的实现，缩写规则：</li>
<ul>
<li>无缩写 - 静态库原始版本</li>
<li>D - Debug调试版</li>
<li>I - 该实现在动态链接库中，msvcrt.dll，实现在DLL里</li>
<li>MT - 多线程版，IDA查看可发现新增了临界区的处理，Enterlock....</li>
<li>P -&nbsp;<a href="https://bbs.kanxue.com/elink@2d5K9s2c8@1M7s2y4Q4x3@1q4Q4x3V1k6Q4x3V1k6T1M7s2y4W2L8X3c8Q4x3X3g2F1k6i4c8Q4x3V1k6X3L8%4u0#2L8g2)9J5k6o6u0Q4x3X3b7I4i4K6u0W2K9s2c8E0L8l9%60.%60." rel="noopener nofollow">C++</a>版本</li>
</ul>
</ul>
<p>lib的本质：多个.obj的组合</p>
<p>查看lib有多少obj 的 link选项：&nbsp;link -lib /list libc.lib</p>
<p>注意: 如果main函数前面有 _mtinit 被调用,说明是多线程</p>
<h4>2. link中 -lib链接选项</h4>
<ul>
<li>-lib命令针对静态库版本，常用命令选项：</li>
<ul>
<li>list：可查看指定lib包含的obj。</li>
<li>用例：link -lib /list libc.lib。</li>
<li>extract：从指定lib中进行提取函数.obj。</li>
</ul>
<ul>
<li>用例：link -lib /extract:build\intel\st_obj\xxx.obj libc.lib（会提取生成xxx.obj文件）。</li>
</ul>
</ul>
<p>用ida 打开 libc.lib,找到 printf的实现</p>
<p><img src="https://bbs.kanxue.com/upload/attach/202505/865778_CJQ46H9NXFVWVYM.jpg" alt="img" class="div_message_boxShadow"></p>
<h3 id="msg_header_h3_4">&nbsp;</h3>
<h3 id="msg_header_h3_5">（1）IDA签名手动制作</h3>
<p>通过cmd实现提取 obj</p>
<p>link -lib 查看对应的指令</p>
<p>link -lib /list libc.lib 查看 libc.lib 里面的所有 .obj信息</p>
<p>找到 printf.obj 的完整路径</p>
<p>link -lib /EXTRACT:build\intel\st_obj\printf.obj libc.lib 提取obj文件</p>
<p><img src="https://bbs.kanxue.com/upload/attach/202505/865778_6X7S4BNMZ4RV43F.jpg" alt="img" class="div_message_boxShadow"></p>
<p>用 ida 打开 printf.obj</p>
<p><img src="https://bbs.kanxue.com/upload/attach/202505/865778_A223E64QSGWAPJQ.jpg" alt="img" class="div_message_boxShadow"></p>
<p><img src="https://bbs.kanxue.com/upload/attach/202505/865778_8Y76WHZC2UPVPWY.jpg" alt="img" class="div_message_boxShadow"></p>
<p>转成了机器码,+号代表没显示完,一般显示5字节或8字节,取决于你屏幕宽度</p>
<p><img src="https://bbs.kanxue.com/upload/attach/202505/865778_SBXDNYC3VTVM9D4.jpg" alt="img" class="div_message_boxShadow"></p>
<p>换成5字节 ,提特征要提机器代码序列,且与地址无关, 因此下面 53,56,be........固定的机器指令等可以作为特征码, 6c 00 00 00 ...这类地址的就不行,因为,因为环境一旦发生改变,地址就会变,因此要用通配符....., 人工提太累,因此需要借助工具</p>
<p><img src="https://bbs.kanxue.com/upload/attach/202505/865778_RHQC29PG5RHQ897.jpg" alt="img" class="div_message_boxShadow"></p>
<hr>
<ul>
<li>签名：IDA并不认识特征码所对应的文本文件，IDA的签名文件格式为.sig。IDA将一直常用的特征码汇至sig文件夹（D:\IDA_Pro_v7.5_Portable\sig），签名就是为满足特征描述的指令进行标记。</li>
</ul>
<h4>1. 需要的工具</h4>
<ul>
<li>pcf.exe ：提取特征码</li>
<ul>
<li>命令：pcf.exe 【lib文件内部的obj路径】 待提取的lib文件</li>
<li>原理：对二进制提取特征码，重定位的数据使用通配符代替。</li>
</ul>
<li>sigmake.exe：对.pat特征文件执着sig签名文件</li>
<li>注意：两个工具的使用都需要添加环境变量。</li>
</ul>
<h4>2. 提取特征及签名</h4>
<ul>
<li>特征码：</li>
<ul>
<li>可以作为特征码的例子：固定机器码。</li>
<li>不可作为特征码的例子：偏移值。</li>
<li>通配符：不指定长度 =&nbsp;（..两个点表1个）；1:1长度 = ?。</li>
</ul>
<li>提取特征工具：pcf.exe（D:\idapro75\Flair\binn） 需要将该路径配置到环境变量</li>
</ul>
<p><img src="https://bbs.kanxue.com/upload/attach/202505/865778_Q36Q262TGGUU969.jpg" alt="img" class="div_message_boxShadow"></p>
<ul>
<li>提取特征步骤：</li>
<ul>
<li>1.cmd提取特征：pcf xxx.obj（会生成xxx.pat文件）；</li>
<li>2.将.pat文件发送到文本编辑器中：pcf xxx.obj（会生成xxx.pat文件）；</li>
</ul>
</ul>
<p><img src="https://bbs.kanxue.com/upload/attach/202505/865778_RYPWTTQZJ5BZ9PM.jpg" alt="img" class="div_message_boxShadow"></p>
<p><img src="https://bbs.kanxue.com/upload/attach/202505/865778_RQV43QXF2JSG8CX.jpg" alt="img" class="div_message_boxShadow"></p>
<ul>
<li>签名步骤：</li>
<ul>
<li>sigmake -n"MyPrintf" printf.pat printf.sig</li>
<li>（会生成xxx.sig文件）；</li>
<li>sigmake -n"mysig for printf" *.pat allsigname.sig（将当前目录下所有.pat打包成1个.sig）；</li>
<li>将xxx.sig文件复制至IDA→sig→pc目录下。</li>
<li>IDA中添加签名，表头 #func项表示此签名被使用了几次。</li>
</ul>
</ul>
<p><img src="https://bbs.kanxue.com/upload/attach/202505/865778_4ZP7MJPWR97PDQW.jpg" alt="img" class="div_message_boxShadow"></p>
<p><img src="https://bbs.kanxue.com/upload/attach/202505/865778_GUBDM7REM79HVFX.jpg" alt="img" class="div_message_boxShadow"></p>
<p>把 .sig文件复制到指定位置</p>
<p><img src="https://bbs.kanxue.com/upload/attach/202505/865778_782TQMP3BBB47YC.jpg" alt="img" class="div_message_boxShadow"></p>
<p><img src="https://bbs.kanxue.com/upload/attach/202505/865778_E72DCE9XX7UK4D9.jpg" alt="img" class="div_message_boxShadow"></p>
<p><img src="https://bbs.kanxue.com/upload/attach/202505/865778_KBFRD2H888M8T8Q.jpg" alt="img" class="div_message_boxShadow"></p>
<p><img src="https://bbs.kanxue.com/upload/attach/202505/865778_HNP5S8VYYJA2V9N.jpg" alt="img" class="div_message_boxShadow"></p>
<p><img src="https://bbs.kanxue.com/upload/attach/202505/865778_RDYXPH2UD8NAP5M.jpg" alt="img" class="div_message_boxShadow"></p>
<ul>
<li>printf 函数示例：</li>
</ul>
<p><img src="https://bbs.kanxue.com/upload/attach/202505/865778_KFFNXTEUJSJZXQU.jpg" alt="img" class="div_message_boxShadow"></p>
<p><img src="https://bbs.kanxue.com/upload/attach/202505/865778_PQZ7BXMDQ6F54EQ.jpg" alt="img" class="div_message_boxShadow"></p>
<ul>
<li>注意：高版本的IDA 能够直接提取制作lib中的所有特征码和签名。</li>
</ul>
<h4>a.高版本IDA工具制作lib签名</h4>
<pre>高版本可以直接制作lib的签名
指令：pcf&nbsp;[lib名].lib&nbsp;
原因：pcf自动识别是否为lib，如果为lib则调用plb.exe

忽略名字命令：
sigmake&nbsp;-r&nbsp;[pat签名].pat&nbsp;[sig签名名字].sig</pre>
<h3 id="msg_header_h3_6">（2）IDA签名自动制作</h3>
<ul>
<li>采用脚本语言</li>
<li>lib2sig.bat 用例：cmd命令--lib2sig libc</li>
</ul>
<pre>md&nbsp;%1_objs&nbsp;&nbsp;//&nbsp;创建文件夹
cd&nbsp;%1_objs&nbsp;&nbsp;//&nbsp;进入文件夹

//找这个目录下的所有文件&nbsp;每一个文件名替换掉&nbsp;%1,
//然后执行指令&nbsp;&nbsp;link&nbsp;-lib&nbsp;/extract:%%1&nbsp;&nbsp;文件名.lib,&nbsp;提取obj文件
for&nbsp;/f&nbsp;%%i&nbsp;in&nbsp;('link&nbsp;-lib&nbsp;/list&nbsp;%1.lib')&nbsp;do&nbsp;link&nbsp;-lib&nbsp;/extract:%%i&nbsp;%1.lib
//&nbsp;pause&nbsp;&nbsp;&nbsp;&nbsp;//暂停
//找到这个文件下的所有.obj文件&nbsp;执行&nbsp;&nbsp;pcf&nbsp;&nbsp;文件名&nbsp;提取特征码生成文件
for&nbsp;%%i&nbsp;in&nbsp;(*.obj)&nbsp;do&nbsp;pcf&nbsp;%%i

//生成sig文件,备注名就是库的名称,把当前目录的所有.pat文件打包生成一个.sig
sigmake&nbsp;-n"%1.lib"&nbsp;*.pat&nbsp;%1.sig

//如果存在拓展名为&nbsp;.exc的文件,Name把内容重定向到&nbsp;abc.exc
if&nbsp;exist&nbsp;%1.exc&nbsp;for&nbsp;%%i&nbsp;in&nbsp;(%1.exc)&nbsp;do&nbsp;find&nbsp;/v&nbsp;";"&nbsp;%%i&nbsp;&gt;&nbsp;abc.exc&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;删除;
//把abc.esc文件内容前四行删除
if&nbsp;exist&nbsp;%1.exc&nbsp;for&nbsp;%%i&nbsp;in&nbsp;(%1.exc)&nbsp;do&nbsp;&gt;&nbsp;abc.exc&nbsp;more&nbsp;+2&nbsp;"%%i"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;删除;

//把abc.exc&nbsp;文件内容拷贝到指定文件&nbsp;
copy&nbsp;abc.exc&nbsp;%1.exc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;复制文件
//删除abc.exc文件&nbsp;&nbsp;
del&nbsp;abc.exc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;删除制文件
//再次执行指令&nbsp;&nbsp;
sigmake&nbsp;-n"%1.lib"&nbsp;*.pat&nbsp;%1.sig
//将.sig文件拷贝到上级目录区&nbsp;&nbsp;
copy&nbsp;%1.sig&nbsp;..\%1.sig
//返回上级目录&nbsp;&nbsp;
cd&nbsp;..
//删除&nbsp;_objs文件夹目录里面的所有文件&nbsp;&nbsp;
del&nbsp;%1_objs&nbsp;/s&nbsp;/q
//删除&nbsp;_objs文件夹
rd&nbsp;%1_objs</pre>
<p>如果失败. libc用全路径</p>
<p>运行中出现下面问题,那是因为该函数非32位的,按回车跳过就可以</p>
<p><img src="https://bbs.kanxue.com/upload/attach/202505/865778_6ERAN9R5ADRHS5U.jpg" alt="img" class="div_message_boxShadow"></p>
<ul>
<li>run.bat 用例：cmd命令 -- run libc</li>
</ul>
<pre>md&nbsp;%1_objs
cd&nbsp;%1_objs
for&nbsp;/f&nbsp;%%i&nbsp;in&nbsp;('link&nbsp;-lib&nbsp;/list&nbsp;%1.lib')&nbsp;do&nbsp;link&nbsp;-lib&nbsp;/extract:%%i&nbsp;%1.lib
for&nbsp;%%i&nbsp;in&nbsp;(*.obj)&nbsp;do&nbsp;pcf&nbsp;%%i
sigmake&nbsp;-n"%1.lib"&nbsp;*.pat&nbsp;%1.sig</pre>
<p>导出签名主要不是用于库函数,而是商业分析</p>
<h3 id="msg_header_h3_7">PCF.exe脱壳</h3>
<p>esp脱壳 32位程序在32位系统下脱壳,64位程序在64位系统下脱壳</p>
<h4>方法1</h4>
<p>保存环境</p>
<p><img src="https://bbs.kanxue.com/upload/attach/202505/865778_9JGNXTGXU7RNN73.jpg" alt="img" class="div_message_boxShadow"></p>
<p>那么到入口点的时候肯定会恢复环境</p>
<p><img src="https://bbs.kanxue.com/upload/attach/202505/865778_8SCM8DEPY5U7RAS.jpg" alt="img" class="div_message_boxShadow"></p>
<p>恢复环境肯定会访问这块数据,下个数据访问断点就可以了</p>
<p><img src="https://bbs.kanxue.com/upload/attach/202505/865778_UUGD6DBJQNS449A.jpg" alt="img" class="div_message_boxShadow"></p>
<p><img src="https://bbs.kanxue.com/upload/attach/202505/865778_ERB98GS3G7TP96W.jpg" alt="img" class="div_message_boxShadow"></p>
<p>原入口 入口前有2可retn.可以看出这是一个 aspack的壳<img src="https://bbs.kanxue.com/upload/attach/202505/865778_78Q3M7XG5PJ4Q9T.jpg" alt="img" class="div_message_boxShadow"></p>
<p>从原入口环境看环境看该程序是 bc++ 写的,因为 开始 jmp 跳走,跳过的是一组字符串</p>
<p><img src="https://bbs.kanxue.com/upload/attach/202505/865778_VCKNNAMXR2EER5K.jpg" alt="img" class="div_message_boxShadow"></p>
<h4>方法二:</h4>
<p>因为是 aspack 的壳,可以直接往下找,找到2个ret,</p>
<p><img src="https://bbs.kanxue.com/upload/attach/202505/865778_S95PA3CKU7R9K4V.jpg" alt="img" class="div_message_boxShadow"></p>
<p>不确定是哪个,2个都下断点,运行看断到了哪个</p>
<p><img src="https://bbs.kanxue.com/upload/attach/202505/865778_P5YBRJTXHTMVMJ5.jpg" alt="img" class="div_message_boxShadow"></p>
<p>断下来的这个就是</p>
<p><img src="https://bbs.kanxue.com/upload/attach/202505/865778_77NKFXB9NNQP3QE.jpg" alt="img" class="div_message_boxShadow"></p>
<p>到了入口点直接脱壳</p>
<p>模拟装载只要模拟的像,很多保护系统都会失效,(节区属性恢复,环境恢复),把目标可执行文件二进制数据放到装载器里面,装载器不读文件直接读大数组,就是一个壳</p>
<p><img src="https://bbs.kanxue.com/upload/attach/202505/865778_GWTGNY4YV62PZJF.jpg" alt="img" class="div_message_boxShadow"></p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="1.0071465044467593" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-24 18:04">2025-05-24 18:03</span>&nbsp;
<a href="https://www.cnblogs.com/weiyuanzhang">断点社区bpsend_net</a>&nbsp;
阅读(<span id="post_view_count">49</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18894564);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18894564', targetLink: 'https://www.cnblogs.com/weiyuanzhang/p/18894564', title: 'X86C++反汇编01.IDA和提取签名' })">举报</a>
</div>
        