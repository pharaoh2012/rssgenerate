
		<div class="posthead">
			<h2>
				<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/proer-blog/p/18719122" title="发布于 2025-02-16 23:23">
    <span role="heading" aria-level="2">Vue3 基础概念与环境搭建</span>
    

</a>

			</h2>
 			Posted on 
<span id="post-date" data-last-update-days="0.039691339539351854" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-16 23:23">2025-02-16 23:23</span>&nbsp;
<a href="https://www.cnblogs.com/proer-blog">Code_Cracke</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18719122" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18719122);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18719122', targetLink: 'https://www.cnblogs.com/proer-blog/p/18719122', title: 'Vue3 基础概念与环境搭建' })">举报</a>

			
			
		</div>
		<div class="postbody">    <div id="cnblogs_post_description" style="display: none">
        
        这篇文章介绍了 Vue3 的核心特性，如基于 Proxy 的响应式系统、组合式 API 和 TypeScript 支持，并详细指导了如何通过 Vite 快速搭建 Vue3 开发环境。内容清晰易懂，适合初学者入门，为后续深入学习 Vue3 打下基础。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<blockquote>
<p><strong>前言</strong><br>
首先需要提醒大家的是，Vue2 已经在2023年停止维护，为了能更好地适应前端开发的发展趋势以及获得更好的性能和功能，我们将从这篇文章开始进入Vue3的阶段。如果对Vue2有想了解的小伙伴可以自行查询学习。本文将带你了解 Vue3 的基础概念，并手把手教你完成环境搭建，为后续的阶段打下坚实的基础。</p>
</blockquote>
<h2 id="一vue3-简介">一、Vue3 简介</h2>
<p>Vue3 是 Vue.js 的最新主要版本，于 2020 年 9 月正式发布。它在性能、可维护性和开发体验方面都有了显著的改进。相比 Vue2，Vue3 的主要特点包括：</p>
<ol>
<li>
<p><strong>更高效的响应式系统</strong>：使用 <code>Proxy </code>替代了 <code>Object.defineProperty</code>，解决了数组和深层嵌套对象监听的问题。</p>
</li>
<li>
<p><strong>组合式 API（Composition API）</strong> ：提供了更灵活的方式来组织组件逻辑，尤其适合复杂场景下的代码复用。</p>
</li>
<li>
<p><strong>更好的 TypeScript 支持</strong>：Vue3 内置对 TypeScript 的友好支持，使得类型推导更加准确。</p>
</li>
<li>
<p><strong>体积更小，性能更高</strong> ：通过 Tree-shaking 和优化核心库，Vue3 的体积更小，运行效率更高。</p>
</li>
</ol>
<h2 id="二vue3-基础概念">二、Vue3 基础概念</h2>
<h3 id="一响应式系统的改进">（一）响应式系统的改进</h3>
<p>Vue3 的响应式系统是其最重要的改进之一。在 Vue2 中，响应式依赖于 Object.defineProperty，这种方式存在以下问题：</p>
<ul>
<li>
<p>无法监听对象属性的动态添加或删除。</p>
</li>
<li>
<p>对数组的操作支持有限。</p>
</li>
</ul>
<p>Vue3 使用了 ES6 的 <code>Proxy</code> 来实现响应式，解决了这些问题。例如：</p>
<pre><code class="language-javascript">const handler = {
  get(target, key, receiver) {
    console.log(`获取属性: ${key}`);
    return Reflect.get(target, key, receiver);
  },
  set(target, key, value, receiver) {
    console.log(`设置属性: ${key} = ${value}`);
    return Reflect.set(target, key, value, receiver);
  }
};

const state = new Proxy({ count: 0 }, handler);

state.count++; // 输出：获取属性: count，设置属性: count = 1

</code></pre>
<p>通过<code>Proxy</code>，Vue3 能够全面监听对象和数组的变化，从而提升性能和开发体验。</p>
<h3 id="二组合式-api">（二）组合式 API</h3>
<p>组合式 API 是 Vue3 引入的一项重要特性，旨在解决 Vue2 中选项式 API 在复杂组件中逻辑分散的问题。它的核心思想是将相关的逻辑组合在一起，而不是按照选项（如 <code>data</code>、<code>methods</code>）来组织。</p>
<p><strong>示例代码</strong></p>
<pre><code class="language-javascript">import { ref, computed } from 'vue';

export default {
  setup() {
    const count = ref(0); // 定义一个响应式变量
    const doubleCount = computed(() =&gt; count.value * 2); // 计算属性

    function increment() {
      count.value++;
    }

    return {
      count,
      doubleCount,
      increment
    };
  }
};
</code></pre>
<p>在这个例子中，所有与计数相关的逻辑都被集中到 <code>setup</code> 函数中，代码更加清晰易读</p>
<h3 id="三更好的类型推导">（三）更好的类型推导</h3>
<p>Vue3 内置了对 TypeScript 的深度支持，开发者可以直接在组件中使用类型声明，减少类型错误的发生。例如：</p>
<pre><code class="language-typescript">import { defineComponent, ref } from 'vue';

interface User {
  name: string;
  age: number;
}

export default defineComponent({
  setup() {
    const user = ref&lt;User&gt;({ name: 'Alice', age: 25 });

    function updateAge(newAge: number) {
      user.value.age = newAge;
    }

    return { user, updateAge };
  }
});
</code></pre>
<p>通过 TypeScript，我们可以确保数据类型的正确性，提高代码的健壮性。</p>
<h2 id="三环境搭建">三、环境搭建</h2>
<h3 id="一安装-nodejs">（一）安装 Node.js</h3>
<p>在搭建 Vue3 开发环境之前，我们需要先安装 Node.js。Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行时环境，它允许我们在服务器端运行 JavaScript。</p>
<ol>
<li>
<p>访问 <a href="https://nodejs.org/zh-cn" target="_blank" rel="noopener nofollow">Node.js 官方网站</a> 。</p>
</li>
<li>
<p>根据您的操作系统（Windows、macOS 或 Linux），选择对应的安装包并下载。</p>
</li>
<li>
<p>安装完成后，可以通过以下命令检查是否安装成功：</p>
</li>
</ol>
<pre><code class="language-bash">node -v
npm -v
</code></pre>
<p>如果能够正确输出版本号，则说明安装成功。</p>
<h3 id="二使用-vite-创建-vue3-项目">（二）使用 Vite 创建 Vue3 项目</h3>
<p>相比于传统的 Vue CLI，<code>Vite</code> 是一个更现代化的构建工具，具有更快的冷启动速度和热更新能力。接下来，我们将使用 <code>Vite </code>来创建一个 Vue3 项目。</p>
<ol>
<li><strong>全局安装 <code>create-vue</code></strong></li>
</ol>
<p>打开终端或命令提示符，运行以下命令以全局安装 <code>create-vue</code>：</p>
<pre><code class="language-bash">npm install -g create-vue
</code></pre>
<ol start="2">
<li><strong>创建 Vue3 项目</strong></li>
</ol>
<p>使用以下命令创建一个新的 Vue3 项目：</p>
<pre><code class="language-bash">create-vue my-vue3-project
</code></pre>
<p>在创建过程中，系统会提示您选择一些配置选项，例如：</p>
<ul>
<li>
<p>是否使用 TypeScript？</p>
</li>
<li>
<p>是否使用 Pinia（Vuex 的替代方案）？</p>
</li>
<li>
<p>是否启用测试工具（如 Vitest 和 Cypress）？</p>
</li>
</ul>
<p>您可以根据实际需求进行选择。如果不确定，可以选择默认配置。</p>
<ol start="3">
<li><strong>进入项目目录并安装依赖</strong></li>
</ol>
<p>创建完成后，进入项目目录并安装依赖：</p>
<pre><code class="language-bash">cd my-vue3-project
npm install
</code></pre>
<ol start="4">
<li><strong>启动开发服务器</strong></li>
</ol>
<p>安装完成后，运行以下命令启动开发服务器：</p>
<pre><code class="language-bash">npm run dev
</code></pre>
<p>启动成功后，终端会显示一个本地访问地址（通常是 <code>http://localhost:5173</code>）。打开浏览器访问该地址，即可看到项目运行效果。</p>
<h2 id="四项目结构解析">四、项目结构解析</h2>
<p>创建好项目后，我们来看一下 Vue3 项目的基本结构（以默认配置为例）：</p>
<pre><code class="language-plaintext">my-vue3-project
├── node_modules/        # 项目依赖的模块
├── public/              # 静态资源，如 favicon.ico 等
├── src/                 # 项目的源代码 
│   ├── assets/          # 图片、样式等资源
│   ├── components/      # 自定义组件
│   ├── views/           # 页面视图
│   ├── App.vue          # 根组件
│   ├── main.ts          # 入口文件（TypeScript）
├── .gitignore           # Git 忽略配置
├── index.html           # 页面模板
├── package.json         # 项目依赖和脚本配置
├── tsconfig.json        # TypeScript 配置（如果选择使用 TypeScript）
└── vite.config.ts       # Vite 配置文件
</code></pre>
<h3 id="关键文件说明">关键文件说明</h3>
<ol>
<li><strong><code>index.html</code></strong></li>
</ol>
<p>项目的基础 HTML 文件，所有的内容都会被注入到这个文件中。</p>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;Vite + Vue3&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div id="app"&gt;&lt;/div&gt;
  &lt;script type="module" src="/src/main.ts"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<ol start="2">
<li><strong><code>main.ts</code></strong></li>
</ol>
<p>项目的入口文件，负责初始化 Vue 应用并挂载到 DOM 上。</p>
<pre><code class="language-typescript">import { createApp } from 'vue';
import App from './App.vue';

createApp(App).mount('#app');
</code></pre>
<ol start="3">
<li><strong><code>App.vue</code></strong></li>
</ol>
<p>根组件，定义了应用的整体结构。</p>
<pre><code class="language-html">&lt;template&gt;
  &lt;div id="app"&gt;
    &lt;h1&gt;Hello Vue3 with Vite&lt;/h1&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script lang="ts"&gt;
export default {
  name: 'App'
};
&lt;/script&gt;

&lt;style&gt;
#app {
  text-align: center;
  color: #2c3e50;
}
&lt;/style&gt;
</code></pre>
<h2 id="五总结">五、总结</h2>
<p>在本篇文章中，我们了解了 Vue3 的基础概念，并通过<code>Vite</code>成功搭建了开发环境。相比于传统的 Vue CLI，<code>Vite</code> 提供了更快的开发体验，特别适合现代前端项目的需求。接下来，我们将深入学习 Vue3 的更多特性和功能，逐步提升我们的开发能力。</p>
<blockquote>
<p><strong>写在最后</strong><br>
哈喽！大家好呀，我是 Code_Cracke，一名热爱编程的小伙伴。在这里，我将分享一些实用的开发技巧和经验心得。如果你也对编程充满热情，欢迎关注并一起交流学习！</p>
<p>如果你对这篇文章有任何疑问、建议或者独特的见解，欢迎在评论区留言。无论是探讨技术细节，还是分享项目经验，都能让我们共同进步。</p>
</blockquote>

</div>
<div id="MySignature" role="contentinfo">
    <p>本文来自博客园，作者：<a href="https://www.cnblogs.com/proer-blog/" target="_blank">Code_Cracke</a>，转载请注明原文链接：<a href="https://www.cnblogs.com/proer-blog/p/18719122" target="_blank">https://www.cnblogs.com/proer-blog/p/18719122</a></p>
</div>
<div class="clear"></div>
</div>
	