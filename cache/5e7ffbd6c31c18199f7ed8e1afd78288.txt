
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/vipstone/p/18723865" title="发布于 2025-02-19 12:37">
    <span role="heading" aria-level="2">面试官：说说你项目中JWT的执行流程？</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>JWT 在目前的项目开发中使用到的频率是非常高的，因此它也是面试常问的一类问题，所以今天我们就来看看“项目中 JWT 的执行流程？”这个问题。</p>
<h2 id="1什么是-jwt">1.什么是 JWT？</h2>
<p>JWT（JSON Web Token） 是一种开放标准（RFC 7519），用于在网络应用间安全传输信息，通常用于身份验证和信息交换。其核心特点是通过紧凑且自包含的 JSON 对象传递数据，无需服务端存储会话状态。</p>
<h2 id="2jwt组成">2.JWT组成</h2>
<p>JWT 是由三部分组成的：</p>
<p><img src="https://cdn.nlark.com/yuque/0/2025/png/92791/1739938276091-7e9fdb3a-33a2-4d62-b5dd-13c01ea3955d.png" alt="" loading="lazy"></p>
<ul>
<li><strong>Header（头部）</strong>：通常由以下两部分组成：
<ul>
<li><strong>Token 类型</strong>：通常是 JWT。</li>
<li><strong>加密算法</strong>：例如 HS256（HMAC SHA-256）、RS256（RSA SHA-256）等。</li>
</ul>
</li>
<li><strong>Payload（载荷）</strong> ：JWT 的主体部分，通常为以下三类：
<ul>
<li><strong>标准声明（Registered Claims）</strong>：预定义的字段，如 iss（发行者）、exp （过期时间）、sub（主题）等。</li>
<li><strong>公共声明（Public Claims）</strong>：用户自定义的字段，例如用户 ID、用户名、角色等。</li>
<li><strong>私有声明（Private Claims）</strong>：在特定场景下使用的字段，通常用于内部系统。</li>
</ul>
</li>
<li><strong>Signature（签名）</strong>：用于验证 Token 的完整性和防止篡改。</li>
</ul>
<p>它们之间用点“.”分隔，形成一个字符串（Token）。</p>
<h2 id="3执行流程">3.执行流程</h2>
<p>JWT 执行流程如下：</p>
<p><img src="https://cdn.nlark.com/yuque/0/2025/png/92791/1739938276134-6525b703-041c-44b5-a847-4feadd8c6090.png" alt="" loading="lazy"></p>
<p>在 Spring Boot 项目中，JWT 的执行流程主要分为以下步骤：</p>
<h3 id="1-用户登录与令牌生成">1. 用户登录与令牌生成</h3>
<ul>
<li>用户通过用户名和密码发起登录请求。</li>
<li>服务端验证用户凭证，若验证成功，则使用 JWT 工具类生成令牌：
<ul>
<li>Header：指定算法（如 HS256）和令牌类型（JWT）。</li>
<li>Payload：包含用户信息（如用户 ID、角色）和声明（如过期时间 exp）。</li>
<li>Signature：使用密钥对 Header 和 Payload 进行签名，确保令牌不可篡改。</li>
</ul>
</li>
</ul>
<h3 id="2-客户端存储令牌">2. 客户端存储令牌</h3>
<ul>
<li>服务端将生成的 JWT 返回给客户端（通常通过响应体或 Header）。</li>
<li>客户端（如浏览器或移动端）将令牌存储在本地（如 LocalStorage 或 Cookie）。</li>
</ul>
<h3 id="3-请求携带令牌">3. 请求携带令牌</h3>
<ul>
<li>客户端在后续请求的 Authorization Header 中以 Bearer <token> 格式携带 JWT。</token></li>
</ul>
<h3 id="4-服务端验证令牌">4. 服务端验证令牌</h3>
<ul>
<li>拦截器/过滤器：Spring Boot 通过自定义拦截器或 Spring Security 过滤器链拦截请求，提取并验证 JWT：
<ul>
<li>签名验证：使用密钥校验签名是否有效。</li>
<li>过期检查：检查 exp 字段是否过期。</li>
<li>用户信息提取：解析 Payload 中的用户信息（如用户 ID），用于后续权限控制。</li>
</ul>
</li>
</ul>
<h3 id="5-授权与响应">5. 授权与响应</h3>
<ul>
<li>若验证通过，服务端处理请求并返回数据。</li>
<li>若验证失败（如令牌过期或签名错误），返回 401 状态码或自定义错误信息。</li>
</ul>
<h2 id="4jwt核心实现代码">4.JWT核心实现代码</h2>
<pre><code class="language-java">// 生成 JWT（示例）|SECRET_KEY 为服务保存的密钥。
public String generateToken(UserDetails user) {
return Jwts.builder()
.setSubject(user.getUsername())
.setExpiration(new Date(System.currentTimeMillis() + 3600 * 1000))
.signWith(SignatureAlgorithm.HS256, SECRET_KEY)
.compact();
}

// 验证 JWT（示例）
public boolean validateToken(String token) {
    try {
        Jwts.parser().setSigningKey(SECRET_KEY).parseClaimsJws(token);
        return true;
    } catch (Exception e) {
        return false;
    }
}
</code></pre>
<h4 id="注意事项">注意事项</h4>
<ul>
<li><strong>密钥安全</strong>：签名密钥需妥善保管，并定期修改，避免泄露。</li>
<li><strong>无状态性</strong>：JWT 无需服务端存储会话信息，适合分布式系统。</li>
</ul>
<h2 id="5jwt-优点分析">5.JWT 优点分析</h2>
<p>JWT 相较于传统的基于会话（Session）的认证机制，具有以下优势：</p>
<ol>
<li><strong>无需服务器存储状态</strong>：传统的基于会话的认证机制需要服务器在会话中存储用户的状态信息，包括用户的登录状态、权限等。而使用 JWT，服务器无需存储任何会话状态信息，所有的认证和授权信息都包含在 JWT 中，使得系统可以更容易地进行水平扩展。</li>
<li><strong>跨域支持</strong>：由于 JWT 包含了完整的认证和授权信息，因此可以轻松地在多个域之间进行传递和使用，实现跨域授权。</li>
<li><strong>适应微服务架构</strong>：在微服务架构中，很多服务是独立部署并且可以横向扩展的，这就需要保证认证和授权的无状态性。使用 JWT 可以满足这种需求，每次请求携带 JWT 即可实现认证和授权。</li>
<li><strong>自包含</strong>：JWT 包含了认证和授权信息，以及其他自定义的声明，这些信息都被编码在 JWT 中，在服务端解码后使用。JWT 的自包含性减少了对服务端资源的依赖，并提供了统一的安全机制。</li>
<li><strong>扩展性</strong>：JWT 可以被扩展和定制，可以按照需求添加自定义的声明和数据，灵活性更高。</li>
</ol>
<h2 id="小结">小结</h2>
<p>JWT 是一种用于身份验证的开放标准，由 Header、Payload、Signature 组成。它的执行流程是：用户登录后生成加密令牌、客户端存储并在请求头携带、服务端验证签名和过期时间后授权。它的优点包括无状态、跨域支持、自包含性，适用于分布式系统和微服务架构，通过签名确保数据安全。</p>
<p><strong>课后思考</strong>：JWT 过期后会怎样？如何实现自动续期？</p>
<blockquote>
<p>本文已收录到我的面试小站 <a href="https://www.javacn.site" target="_blank" rel="noopener nofollow">www.javacn.site</a>，其中包含的内容有：场景题、并发编程、MySQL、Redis、Spring、Spring MVC、Spring Boot、Spring Cloud、MyBatis、JVM、设计模式、消息队列等模块。</p>
</blockquote>

</div>
<div id="MySignature" role="contentinfo">
    <div style="text-align: center; color: red">
关注下面二维码，订阅更多精彩内容。
<br>
<img style="margin-left: 0px" src="https://images.cnblogs.com/cnblogs_com/vipstone/848916/o_211225130402_gognzhonghao.jpg">
</div>

<div style="display: none">
    <img src="http://icdn.apigo.cn/gitchat/rabbitmq.png?imageView2/0/w/500/h/400">
</div>
<div style="margin-bottom: 50px; display: none">

<img title="微信打赏" src="http://icdn.apigo.cn/myinfo/wchat-pay.png" alt="微信打赏">
<br>

<div style="display: none">
<span style="display: block; position: absolute; height: 40px; top: 50%; margin-top: -20px">关注公众号（加好友）：</span>

<img style="margin-left: 144px" src="http://icdn.apigo.cn/gongzhonghao2.png?imageView2/0/w/120/h/120">
</div>
<p></p>

<div id="AllanboltSignature">
    <p style="border-top: #e0e0e0 1px dashed; border-right: #e0e0e0 1px dashed; border-bottom: #e0e0e0 1px dashed; border-left: #e0e0e0 1px dashed; padding-top: 10px; padding-right: 10px; padding-bottom: 10px; padding-left: 60px; background: url(&quot;https://images.cnblogs.com/cnblogs_com/lloydsheng/239039/o_copyright.gif&quot;) #e5f1f4 no-repeat 1% 50%; font-family: 微软雅黑; font-size: 11px" id="PSignature">
        <br> 作者：
        <a href="http://vipstone.cnblogs.com/" target="_blank">王磊的博客</a>
        <br> 出处：
        <a href="http://vipstone.cnblogs.com/" target="_blank">http://vipstone.cnblogs.com/</a>
        <br>
    </p>
</div></div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.23576144835879628" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-19 12:37">2025-02-19 12:37</span>&nbsp;
<a href="https://www.cnblogs.com/vipstone">磊哥|www.javacn.site</a>&nbsp;
阅读(<span id="post_view_count">83</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18723865" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18723865);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18723865', targetLink: 'https://www.cnblogs.com/vipstone/p/18723865', title: '面试官：说说你项目中JWT的执行流程？' })">举报</a>
</div>
        