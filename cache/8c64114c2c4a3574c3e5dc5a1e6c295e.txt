
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/wrinkle-of-silicon/p/18893608" title="发布于 2025-05-23 18:35">
    <span role="heading" aria-level="2">MySQL的表空间释放</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        <img src="https://img2024.cnblogs.com/blog/518429/202505/518429-20250523175118541-282084657.png" alt="MySQL的表空间释放" class="desc_img">
        最近为了对 MySQL 数据库磁盘占用瘦身，对一张近100GB表的历史数据进行了 delete，删除后发现该表占用的空间并未减少，这里介绍一下如何通过整理磁盘碎片解决这个问题，以及 Online DDL 背后的运行机制。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="概述">概述</h1>
<p>最近为了对 MySQL 数据库磁盘占用瘦身，对一张近100GB表的历史数据进行了 delete 删除，删除了约2/3的数据，删除后发现该表占用的空间并未减少。通过下面语句查看该表的磁盘占用情况：</p>
<pre><code class="language-SQL">SELECT
    TABLE_NAME&nbsp;AS&nbsp;`表名`,
    ROUND(DATA_LENGTH&nbsp;/&nbsp;1024&nbsp;/&nbsp;1024&nbsp;/&nbsp;1024,&nbsp;2)&nbsp;AS&nbsp;`数据大小(GB)`,
    ROUND(INDEX_LENGTH&nbsp;/&nbsp;1024&nbsp;/&nbsp;1024&nbsp;/&nbsp;1024,&nbsp;2)&nbsp;AS&nbsp;`索引大小(GB)`,
    ROUND(DATA_FREE&nbsp;/&nbsp;1024&nbsp;/&nbsp;1024&nbsp;/&nbsp;1024,&nbsp;2)&nbsp;AS&nbsp;`碎片空间(GB)`,
    ROUND((DATA_LENGTH&nbsp;+&nbsp;INDEX_LENGTH&nbsp;+&nbsp;DATA_FREE) /&nbsp;1024&nbsp;/&nbsp;1024&nbsp;/&nbsp;1024,&nbsp;2)&nbsp;AS&nbsp;`预估总占用(GB)`
FROM
    information_schema.TABLES
WHERE
    TABLE_SCHEMA&nbsp;=&nbsp;'mp_limitation_global'
ORDER&nbsp;BY
    (DATA_LENGTH&nbsp;+&nbsp;INDEX_LENGTH)
DESC;
</code></pre>
<p>发现总的空间并没有发生变化，只是表数据空间减小，而碎片空间大幅上升：<br>
<img src="https://img2024.cnblogs.com/blog/518429/202505/518429-20250523175509774-723926179.png" alt="image" loading="lazy"></p>
<p>所以，为什么数据删除了，表占用的磁盘空间却没有释放？</p>
<p>这里先交代一下全文 MySQL 相关的论述的基础：MySQL 版本为5.7.36，存储引擎为 InnoDB，参数innodb_file_per_table=ON。</p>
<hr>
<h1 id="为什么删除数据表空间未释放">为什么删除数据表空间未释放？</h1>
<p><img src="https://img2024.cnblogs.com/blog/518429/202505/518429-20250523180643607-23104568.webp" alt="MySQL数据行和索引示意图" loading="lazy"></p>
<p>为了解释这个问题，先探究一下 MySQL 数据删除的过程。</p>
<p>如上图，现在要删掉 R7 这个记录，InnoDB 引擎只会把 R7 这个记录标记为删除，以待后续复用，但磁盘文件的大小并不会缩小。由于 InnoDB 的数据是按页存储的，那么如果删掉了一个数据页上的所有记录，整个数据页就也是可以被复用的。</p>
<p>然而，数据页的复用跟记录的复用是不同的。</p>
<p><strong>记录的复用，只限于符合范围条件的数据</strong>：比如上面的假设，R7 这条记录被删除后，如果插入一个 ID 是 008 的行，那么可以直接复用这个空间；但如果插入的是一个 ID 是 012 的行，就不可以复用这个位置了。</p>
<p><strong>数据页的复用，是当整个页从 B+ 树里面删掉以后，可以复用任何位置</strong>：以上图为例，如果将数据页 page A 上的所有记录被删除以后，page A 就会被标记为可复用，但是磁盘上的文件不会变小。</p>
<p>所以，delete 命令其实只是把记录的位置或数据页标记为了「可复用」，但不会改变磁盘文件的大小，即只通过 delete 是不能释放表空间的。这些可以复用，而又没有归还给操作系统的空间，看起来就像是“干净的地板上散落的碎片”。</p>
<p>如果能把这些碎片清理干净，那么就达到释放表空间的目的。</p>
<hr>
<h1 id="如何释放碎片占用的空间">如何释放碎片占用的空间？</h1>
<p>查阅 MySQL 官方文档-<a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-file-defragmenting.html" title="Defragmenting a Table" target="_blank" rel="noopener nofollow">Defragmenting a Table</a>，发现可以使用如下语句整理碎片：</p>
<pre><code class="language-SQL">ALTER&nbsp;TABLE&nbsp;tbl_name ENGINE=INNODB;
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/518429/202505/518429-20250523180948757-1627671752.png" alt="image" loading="lazy"></p>
<p>当然也可以使用下面的的语句整理碎片：</p>
<pre><code class="language-SQL">ALTER&nbsp;TABLE&nbsp;tbl_name FORCE;
</code></pre>
<p>这两种操作都使用到了在线 DDL 来重建表。那在线 DDL 又是什么？</p>
<h1 id="在线-ddl-重建表的流程是什么">在线 DDL 重建表的流程是什么？</h1>
<p>使用ALTER 语句重新表的在线 DDL 机制大致如下：</p>
<ol>
<li>
<p>ALTER语句在初始化启动的时候需要获取 MDL 写锁；</p>
</li>
<li>
<p>MDL写锁在真正拷贝数据之前就退化成读锁，MDL 读锁不会阻塞增删改等 DML 操作，InnoDB把这些操作记入 ROW_LOG；</p>
</li>
<li>
<p>最后完成存量数据相关拷贝，MDL 升级为独占锁，重放 ROW_LOG以写入增量数据。</p>
</li>
</ol>
<p>而整个 DDL 最耗时的过程就是拷贝目标表数据到中间表文件的过程，这个过程中又可以增删改数据，而相对于整个 DDL 过程来说，锁的时间非常短，所以对业务来说，就可以认为是没有中断且在线的，这就是称为在线 DDL 的缘由，官方称之为 Online DDL。</p>
<p><img src="https://img2024.cnblogs.com/blog/518429/202505/518429-20250523181046190-1360036506.png" alt="image" loading="lazy"></p>
<p>在 Online DDL 过程中哪些操作可以触发重建表，哪些操作是“原地”或称“就地”操作，官方给出了<a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-online-ddl-operations.html" title="详细说明" target="_blank" rel="noopener nofollow">详细说明</a>，这里罗列一些开发中常见的一些操作：<br>
<img src="https://img2024.cnblogs.com/blog/518429/202505/518429-20250523181234506-2012845417.png" alt="image" loading="lazy"><br>
<img src="https://img2024.cnblogs.com/blog/518429/202505/518429-20250523181241764-1040993186.png" alt="image" loading="lazy"><br>
<img src="https://img2024.cnblogs.com/blog/518429/202505/518429-20250523181251822-1845067133.png" alt="image" loading="lazy"></p>
<p>Online DDL 过程中会产生临时文件，而这些临时文件也需要占用磁盘空间，对应的磁盘空间要求，官方也出了<a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-online-ddl-space-requirements.html" title="明确描述" target="_blank" rel="noopener nofollow">明确描述</a>：<br>
<img src="https://img2024.cnblogs.com/blog/518429/202505/518429-20250523181334363-918578369.png" alt="image" loading="lazy"></p>
<p>上面的 ALTER 语句在 MySQL 5.7下隐含的意思其实是：</p>
<pre><code class="language-SQL">ALTER&nbsp;TABLE&nbsp;tbl_name engine=innodb,ALGORITHM=INPLACE;
</code></pre>
<p>同时整个过程不需要经过服务层搬运数据，整个过程是在 InnoDB 内部完成的，是一个“原地”、“就地”操作，这就是称为“inplace”的来源。</p>
<p>跟 INPLACE 相对应的就是拷贝表：</p>
<pre><code class="language-SQL">ALTER&nbsp;TABLE&nbsp;tbl_name engine=innodb,ALGORITHM=COPY;
</code></pre>
<p>当使用 ALGORITHM=COPY 的时候，表示的是强制拷贝表，这是 MySQL5.6版本以前的重建表流程：</p>
<ol>
<li>
<p>MySQL服务层触发创建临时表，对源表加MDL锁，阻塞DML写而不阻塞DML读；</p>
</li>
<li>
<p>MySQL服务层从目标表中逐行读取数据，写入到临时表；</p>
</li>
<li>
<p>数据拷贝完成后，禁止读写，删除目标表，把临时表重命名为目标表。</p>
</li>
</ol>
<p>上面的流程大致如下图：<br>
<img src="https://img2024.cnblogs.com/blog/518429/202505/518429-20250523181355619-1020420356.png" alt="image" loading="lazy"></p>
<h1 id="如何理解-inplace-和-copy">如何理解 INPLACE 和 COPY</h1>
<p>想象一个堆着货物又杂乱无章的仓库，现在要进行整理，以充分利用仓库内的空间：</p>
<p><code>INPLACE </code>就是在仓库内部整理，货物不用搬出仓库，货物按照编号摆放到货架。在这个过程中，可能要从货架临时取出一些货物，把它们放到仓库内指定的某处，以腾出空间排放正确编号的货物，所以仓库要有足够的空间，来临时堆放那些从货架临时取出的货物；</p>
<p><code>COPY </code>就是把仓库里的货物从货架取出，然后全部搬到仓库外面指定的某个场地（这个场地的空间需要足够大，以容纳所有货物），然后再按照编号顺序一件一件的搬回仓库，放到货架。</p>
<h1 id="操作注意事项">操作注意事项</h1>
<ul>
<li>
<p>由于通过 Online DDL 方式整理碎片的过程中会产生和原数据表空间大小几乎规模相当的临时文件，所以执行前一定要确认 MySQL 磁盘剩余可用空间是否足够；</p>
</li>
<li>
<p>Online DDL在ALTER表过程中，会通过过 ROW_LOG 临时文件记录当时的并发 DML 操作，这个临时文件的大小上限由参数innodb_online_alter_log_max_size决定（默认大小128MB），所以要在业务低峰期操作碎片整理，保证没有大量 DML 操作，或者调整innodb_online_alter_log_max_size大小；</p>
</li>
<li>
<p>在碎片整理过程中，可以通过以下方式来监控整理过程：</p>
</li>
</ul>
<pre><code class="language-SQL">-- 监控磁盘临时文件
SHOW&nbsp;STATUS&nbsp;LIKE&nbsp;'Created_tmp_disk_tables';
SHOW&nbsp;STATUS&nbsp;LIKE&nbsp;'Created_tmp_files';

-- 查看正在进行的 DDL 操作
SELECT&nbsp;*&nbsp;FROM&nbsp;information_schema.INNODB_TRX;
</code></pre>
<hr>
<p><strong>附录：</strong><br>
<a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-online-ddl.html" title="Online DDL 参考文档" target="_blank" rel="noopener nofollow">Online DDL 参考文档</a></p>
<hr>
<ul>
<li>
<p><strong>如果你觉得我的工作对你有帮助，可以通过分享这篇文字或者关注同名公众号来支持我，你的支持是我持续创作的动力：</strong><br>
<img src="https://img2024.cnblogs.com/blog/518429/202505/518429-20250523174930019-1027432186.png" alt="image" loading="lazy"></p>
</li>
<li>
<p><strong>转载以及引用请注明原文链接</strong>：<a href="https://www.cnblogs.com/wrinkle-of-silicon/p/18893608" target="_blank">https://www.cnblogs.com/wrinkle-of-silicon/p/18893608</a></p>
</li>
<li>
<p>本博客所有文章除特别声明外，均采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh-hans" title="CC 署名-非商业使用-相同方式共享" target="_blank" rel="noopener nofollow">CC 署名-非商业使用-相同方式共享</a> 许可协议。</p>
</li>
</ul>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.3616097985115741" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-24 00:27">2025-05-23 18:35</span>&nbsp;
<a href="https://www.cnblogs.com/wrinkle-of-silicon">Asanwos</a>&nbsp;
阅读(<span id="post_view_count">108</span>)&nbsp;
评论(<span id="post_comment_count">3</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18893608);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18893608', targetLink: 'https://www.cnblogs.com/wrinkle-of-silicon/p/18893608', title: 'MySQL的表空间释放' })">举报</a>
</div>
        