
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/du-hong/p/18670838" title="发布于 2025-05-20 10:59">
    <span role="heading" aria-level="2">PC端自动化测试实战教程-6-pywinauto 打印和保存控件菜单树结构之ElementNotFoundError（详细教程）</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h3>1.简介</h3>
<p>其实前边的文章宏哥已经在控制台打印过控件菜单树结构，只是没有将其保存到文件中。只需要一个方法即可。在pywinauto中可以使用&nbsp;<code>print_control_identifiers()</code>&nbsp;方法打印控件菜单树结构，这对我们查找控件非常方便。宏哥今天将其单独拎出来是因为Windows10系统和Windows11系统会有一个坑，而且宏哥掉里边了，查了好多资料都没有找到解决办法，最后还好通过自己各种尝试将坑填平，成功爬出来了。其实前边已经遇到了打开记事本最后替换成了notepad++。今天跟随宏哥一步步入坑，然后再一步步填坑，最后成功解决。</p>
<h3>2.控件操作</h3>
<p>程序窗口中的内容，把它称之为控件，我们要对这个窗口的内容进行操作，就需要选择到对应的控件，获取所有控件我们可以通过print_control_identifiers()这个方法，来获取这个窗口下的直接子控件。因此我们为了清楚可以将控件的菜单结构树打印出来，一目了然。</p>
<h3>3.起因</h3>
<p>宏哥的台式电脑是Windows10系统的，但是宏哥的笔记本却是Windows11系统的。宏哥在学习和演示打印控件菜单树结构的时候，宏哥首先是在台式电脑（Win10系统）上操作和演示（打印记事本控件结构树）的，但是文章就写了一半，没有写完。这时候刚好由于出差宏哥只能被迫背上笔记本电脑（Win11系统），于是宏哥想要完成剩下的文章就继续将Windows10系统运行成功的代码，直接在Windows11系统上拷贝运行演示操作，结果报错了。。。。运行失败了，一时很懵，不知道如何解决，查了好多资料发现好多人都遇到同样的问题，但是就是没有给出解决办法，有的是提一句如何如何做，宏哥都一一试过了，都不行。就是这样就调入坑中了，要是一直在Windows10系统上操作演示或许就不会有这一篇文章，这一回事了。一切都是命啊，万般不由人，但是臣妾做到了。由于宏哥写文章的时候，手头还是没有Windows10，就网上找了一台免费微软提供类似win10系统，然后简单的搭建了一个环境给小伙伴或者童鞋们进行演示，有兴趣的自己可以试一下：<a href="https://learn.microsoft.com/zh-cn/training/modules/implement-common-integration-features-finance-ops/10-exercise-1" rel="noopener nofollow">实验 - 使用 Microsoft Office 集成 - Training | Microsoft Learn</a></p>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202501/1232840-20250116115313877-919123972.png" alt="" loading="lazy"></p>
<h3>4.Windows10系统</h3>
<h4>4.1代码设计</h4>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202501/1232840-20250116115419006-669168566.png" alt="" loading="lazy"></p>
<h4>4.2参考代码</h4>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> -*- coding:utf-8 -*-</span>

<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 1.先设置编码，utf-8可支持中英文，如上，一般放在第一行</span>

<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 2.注释：包括记录创建时间，创建人，项目名称。</span>
<span style="color: rgba(128, 0, 0, 1)">'''</span><span style="color: rgba(128, 0, 0, 1)">
Created on 2025-02-12
@author: 北京-宏哥
北京宏哥（微信搜索：北京宏哥，关注宏哥，提前解锁更多测试干货！）
Project: PC端自动化测试实战教程-6-pywinauto打印和保存控件菜单树结构（详细教程）
</span><span style="color: rgba(128, 0, 0, 1)">'''</span>

<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 3.导入模块</span>
<span style="color: rgba(0, 0, 255, 1)">from</span> pywinauto <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> Application
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> time

</span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 通过窗口打开</span>
app = Application(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">uia</span><span style="color: rgba(128, 0, 0, 1)">'</span>).start(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">notepad.exe</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
win </span>= app[<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Untitled - Notepad</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">]
</span><span style="color: rgba(0, 0, 255, 1)">print</span><span style="color: rgba(0, 0, 0, 1)">(win)
</span><span style="color: rgba(0, 0, 255, 1)">print</span><span style="color: rgba(0, 0, 0, 1)">(app.process)
win.print_control_identifiers()</span></pre>
</div>
<h4>4.3运行代码</h4>
<p>1.运行代码，右键Run'Test'，就可以看到控制台输出，如下图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202501/1232840-20250116115947692-993402893.png" alt="" loading="lazy"></p>
<p>2.运行代码后电脑端的动作（启动记事本）。如下图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202501/1232840-20250116115855475-1747918691.gif" alt="" loading="lazy"></p>
<h3>5.Windows11系统</h3>
<p>1.宏哥出差了，然后想也没想就将上边在Windows10系统运行成功的代码拷贝到笔记本Windows11系统上的Pycharm中进行运行，结果报错了：<strong>pywinauto.findwindows.ElementNotFoundError: {'best_match': 'Untitled - Notepad', 'backend': 'uia', 'process': 31680}</strong></p>
<h4>5.1运行代码</h4>
<p>1.运行代码，右键Run'Test'，就可以看到控制台输出，如下图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202501/1232840-20250116131807221-1369221699.png" alt="" loading="lazy"></p>
<p>2.运行代码后电脑端的动作（启动记事本）。如下图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202501/1232840-20250116131722723-992221606.gif" alt="" loading="lazy"></p>
<h4>5.2报错分析</h4>
<p>1.宏哥眼睁睁地看记事本启动了，报错却告诉我找不到元素。这不是前后矛盾啊。因为代码中宏哥打印了启动记事本进程号是：28192，如下图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202501/1232840-20250116132334673-444186133.png" alt="" loading="lazy"></p>
<p>2.然后宏哥查看笔记本电脑的任务管理器的记事本的进程号是：24196 ，如下图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202501/1232840-20250116132255080-2124995272.png" alt="" loading="lazy"></p>
<p>&nbsp;3.宏哥再次用工具查看，进程号是：24196，如下图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202501/1232840-20250116132711515-2126521643.gif" alt="" loading="lazy"></p>
<p>总结：工具查看和任务管理器查看的进程号（24196）相同，但是代码运行启动的进程号（28192）与它们的进程号（24196）不一样，所有才会报错找不到元素，这就可以说通了为啥报这个错。</p>
<h3>6.填坑实践</h3>
<h4>6.1加等待</h4>
<p>1.开始填坑，查了好多资料网上说，可能是由于代码运行的快，而PC端程序启动慢导致的，需要加等待，换句话说：应用程序可能需要一段时间才能完全初始化其窗口和UI元素。即便<code>start()</code>方法在内部尝试连接，但如果UI还未完全加载，后续立即进行窗口或控件查找可能失败。于是宏哥就加了等待的代码。</p>
<h5>6.1.1代码设计</h5>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202501/1232840-20250116134515255-378232525.png" alt="" loading="lazy"></p>
<h5>6.1.2参考代码</h5>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> -*- coding:utf-8 -*-</span>

<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 1.先设置编码，utf-8可支持中英文，如上，一般放在第一行</span>

<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 2.注释：包括记录创建时间，创建人，项目名称。</span>
<span style="color: rgba(128, 0, 0, 1)">'''</span><span style="color: rgba(128, 0, 0, 1)">
Created on 2025-02-12
@author: 北京-宏哥
北京宏哥（微信搜索：北京宏哥，关注宏哥，提前解锁更多测试干货！）
Project: PC端自动化测试实战教程-6-pywinauto 打印和保存控件菜单树结构（详细教程）
</span><span style="color: rgba(128, 0, 0, 1)">'''</span>

<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 3.导入模块</span>
<span style="color: rgba(0, 0, 255, 1)">from</span> pywinauto <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> Application
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> time

</span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 通过窗口打开</span>
app = Application(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">uia</span><span style="color: rgba(128, 0, 0, 1)">'</span>).start(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">notepad.exe</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
time.sleep(</span>3<span style="color: rgba(0, 0, 0, 1)">)
win </span>= app[<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">无标题 - Notepad</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">]
</span><span style="color: rgba(0, 0, 255, 1)">print</span><span style="color: rgba(0, 0, 0, 1)">(win)
</span><span style="color: rgba(0, 0, 255, 1)">print</span><span style="color: rgba(0, 0, 0, 1)">(app.process)
win.print_control_identifiers()</span></pre>
</div>
<h5>6.1.3运行代码</h5>
<p>1.运行代码，右键Run'Test'，就可以看到控制台输出，如下图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202501/1232840-20250116134549391-362426719.png" alt="" loading="lazy"></p>
<p>2.运行代码后电脑端的动作（启动记事本）。如下图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202501/1232840-20250116134730718-639241422.gif" alt="" loading="lazy"></p>
<h4>6.2改路径</h4>
<p>1.从上边看到我们失败了，然后宏哥继续查资料，又发现说是将start括号里写成路径的格式就可以。结果仍然是报一样的错误。如下图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202501/1232840-20250116135206339-2094692251.png" alt="" loading="lazy"></p>
<h5>6.2.1参考代码</h5>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> -*- coding:utf-8 -*-</span>

<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 1.先设置编码，utf-8可支持中英文，如上，一般放在第一行</span>

<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 2.注释：包括记录创建时间，创建人，项目名称。</span>
<span style="color: rgba(128, 0, 0, 1)">'''</span><span style="color: rgba(128, 0, 0, 1)">
Created on 2025-02-12
@author: 北京-宏哥
北京宏哥（微信搜索：北京宏哥，关注宏哥，提前解锁更多测试干货！）
Project: PC端自动化测试实战教程-6-pywinauto 打印和保存控件菜单树结构（详细教程）
</span><span style="color: rgba(128, 0, 0, 1)">'''</span>

<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 3.导入模块</span>
<span style="color: rgba(0, 0, 255, 1)">from</span> pywinauto <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> Application
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> time

</span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 通过窗口打开</span>
app = Application(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">uia</span><span style="color: rgba(128, 0, 0, 1)">'</span>).start(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">C:/Windows/notepad.exe</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
time.sleep(</span>3<span style="color: rgba(0, 0, 0, 1)">)
win </span>= app[<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">无标题 - Notepad</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">]
</span><span style="color: rgba(0, 0, 255, 1)">print</span><span style="color: rgba(0, 0, 0, 1)">(win)
</span><span style="color: rgba(0, 0, 255, 1)">print</span><span style="color: rgba(0, 0, 0, 1)">(app.process)
win.print_control_identifiers()</span></pre>
</div>
<h4>6.3 connect()</h4>
<p>手动调用<code>connect()</code>给予额外的时间缓冲，可能恰好让UI准备就绪。结果仍然是报一样的错误。</p>
<h5>6.3.1参考代码</h5>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> -*- coding:utf-8 -*-</span>

<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 1.先设置编码，utf-8可支持中英文，如上，一般放在第一行</span>

<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 2.注释：包括记录创建时间，创建人，项目名称。</span>
<span style="color: rgba(128, 0, 0, 1)">'''</span><span style="color: rgba(128, 0, 0, 1)">
Created on 2025-02-12
@author: 北京-宏哥
北京宏哥（微信搜索：北京宏哥，关注宏哥，提前解锁更多测试干货！）
Project: PC端自动化测试实战教程-6-pywinauto 打印和保存控件菜单树结构（详细教程）
</span><span style="color: rgba(128, 0, 0, 1)">'''</span>

<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 3.导入模块</span>
<span style="color: rgba(0, 0, 255, 1)">from</span> pywinauto <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> Application
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> time

</span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 通过窗口打开</span>
app = Application(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">uia</span><span style="color: rgba(128, 0, 0, 1)">'</span>).start(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">notepad.exe</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)

app </span>= Application(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">uia</span><span style="color: rgba(128, 0, 0, 1)">'</span>).connect(class_name=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Notepad</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
win </span>= app[<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">无标题 - Notepad</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">]
</span><span style="color: rgba(0, 0, 255, 1)">print</span><span style="color: rgba(0, 0, 0, 1)">(win)
</span><span style="color: rgba(0, 0, 255, 1)">print</span><span style="color: rgba(0, 0, 0, 1)">(app.process)
win.print_control_identifiers()</span></pre>
</div>
<h4>6.4 connect()和visible_only参数</h4>
<p>手动调用<code>connect()</code>给予额外的时间缓冲，然后加上<code>visible_only</code>参数，这是宏哥自己想到的，因为在上边的报错中宏哥看到了<code>visible_only</code>参数，于是宏哥决定加上参数试一下。如下图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202501/1232840-20250116142223963-770942397.png" alt="" loading="lazy"></p>
<h5>6.4.1代码设计</h5>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202501/1232840-20250116142846719-433487921.png" alt="" loading="lazy"></p>
<h5>6.4.2参考代码</h5>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> -*- coding:utf-8 -*-</span>

<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 1.先设置编码，utf-8可支持中英文，如上，一般放在第一行</span>

<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 2.注释：包括记录创建时间，创建人，项目名称。</span>
<span style="color: rgba(128, 0, 0, 1)">'''</span><span style="color: rgba(128, 0, 0, 1)">
Created on 2025-02-12
@author: 北京-宏哥
北京宏哥（微信搜索：北京宏哥，关注宏哥，提前解锁更多测试干货！）
Project: PC端自动化测试实战教程-6-pywinauto 打印和保存控件菜单树结构（详细教程）
</span><span style="color: rgba(128, 0, 0, 1)">'''</span>

<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 3.导入模块</span>
<span style="color: rgba(0, 0, 255, 1)">from</span> pywinauto <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> Application
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> time

</span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 通过窗口打开</span>
app = Application(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">uia</span><span style="color: rgba(128, 0, 0, 1)">'</span>).start(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">notepad.exe</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)

app </span>= Application(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">uia</span><span style="color: rgba(128, 0, 0, 1)">'</span>).connect(class_name=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Notepad</span><span style="color: rgba(128, 0, 0, 1)">"</span>,visible_only=<span style="color: rgba(0, 0, 0, 1)">False)
win </span>= app[<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">无标题 - Notepad</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">]
</span><span style="color: rgba(0, 0, 255, 1)">print</span><span style="color: rgba(0, 0, 0, 1)">(win)
</span><span style="color: rgba(0, 0, 255, 1)">print</span><span style="color: rgba(0, 0, 0, 1)">(app.process)
win.print_control_identifiers()</span></pre>
</div>
<h5>6.4.3运行代码</h5>
<p>1.运行代码，右键Run'Test'，就可以看到控制台输出，如下图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202501/1232840-20250116143117950-164599164.png" alt="" loading="lazy"></p>
<p>2.运行代码后电脑端的动作（启动记事本）。如下图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202501/1232840-20250116143251185-415028154.gif" alt="" loading="lazy"></p>
<h4>6.5 connect()和等待</h4>
<p>这个也是宏哥在一次偶然运行代码中发现的，因为宏哥忘记将等待的代码段注释掉，结果运行代码成功！哈哈~~，坑一下子就这样跳出来了，要问宏哥是什么原因，宏哥也是一脸懵，一头问号，反正不管怎么说，问题就这样得到解决了。</p>
<h5>6.5.1代码设计</h5>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202501/1232840-20250116150618500-1440984202.png" alt="" loading="lazy"></p>
<h5>6.5.2参考代码</h5>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> -*- coding:utf-8 -*-</span>

<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 1.先设置编码，utf-8可支持中英文，如上，一般放在第一行</span>

<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 2.注释：包括记录创建时间，创建人，项目名称。</span>
<span style="color: rgba(128, 0, 0, 1)">'''</span><span style="color: rgba(128, 0, 0, 1)">
Created on 2025-02-12
@author: 北京-宏哥
北京宏哥（微信搜索：北京宏哥，关注宏哥，提前解锁更多测试干货！）
Project: PC端自动化测试实战教程-6-pywinauto 打印和保存控件菜单树结构（详细教程）
</span><span style="color: rgba(128, 0, 0, 1)">'''</span>

<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 3.导入模块</span>
<span style="color: rgba(0, 0, 255, 1)">from</span> pywinauto <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> Application
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> time

</span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 通过窗口打开</span>
app = Application(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">uia</span><span style="color: rgba(128, 0, 0, 1)">'</span>).start(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">notepad.exe</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
time.sleep(</span>3<span style="color: rgba(0, 0, 0, 1)">)
app </span>= Application(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">uia</span><span style="color: rgba(128, 0, 0, 1)">'</span>).connect(class_name=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Notepad</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
win </span>= app[<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">无标题 - Notepad</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">]
</span><span style="color: rgba(0, 0, 255, 1)">print</span><span style="color: rgba(0, 0, 0, 1)">(win)
</span><span style="color: rgba(0, 0, 255, 1)">print</span><span style="color: rgba(0, 0, 0, 1)">(app.process)
win.print_control_identifiers()</span></pre>
</div>
<h5>6.5.3运行代码</h5>
<p>1.运行代码，右键Run'Test'，就可以看到控制台输出，如下图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202501/1232840-20250116150511585-71321992.png" alt="" loading="lazy"></p>
<p>2.运行代码后电脑端的动作（启动记事本）。如下图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202501/1232840-20250116150535326-130072482.gif" alt="" loading="lazy"></p>
<p>好了到此打印控件菜单结构树，就大功告成了，下一步我们只需要将其保存就可以了，灰常简单哦！！！</p>
<h3>7.保存控件菜单结构树</h3>
<h4>7.1print_control_identifiers()源码</h4>
<p>忙着解决问题，都没有来得及查看一下print_control_identifiers()的源码，如下：</p>
<div class="cnblogs_code">
<pre>    <span style="color: rgba(0, 0, 255, 1)">def</span> print_control_identifiers(self, depth=None, filename=<span style="color: rgba(0, 0, 0, 1)">None):
        </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">
        Prints the 'identifiers'

        Prints identifiers for the control and for its descendants to
        a depth of **depth** (the whole subtree if **None**).

        .. note:: The identifiers printed by this method have been made
               unique. So if you have 2 edit boxes, they won't both have "Edit"
               listed in their identifiers. In fact the first one can be
               referred to as "Edit", "Edit0", "Edit1" and the 2nd should be
               referred to as "Edit2".
        </span><span style="color: rgba(128, 0, 0, 1)">"""</span>
        <span style="color: rgba(0, 0, 255, 1)">if</span> depth <span style="color: rgba(0, 0, 255, 1)">is</span><span style="color: rgba(0, 0, 0, 1)"> None:
            depth </span>=<span style="color: rgba(0, 0, 0, 1)"> sys.maxsize
        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> Wrap this control</span>
        this_ctrl = self.<span style="color: rgba(128, 0, 128, 1)">__resolve_control</span>(self.criteria)[-1<span style="color: rgba(0, 0, 0, 1)">]

        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> Create a list of this control and all its descendants</span>
        all_ctrls = [this_ctrl, ] +<span style="color: rgba(0, 0, 0, 1)"> this_ctrl.descendants()

        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> Create a list of all visible text controls</span>
        txt_ctrls = [ctrl <span style="color: rgba(0, 0, 255, 1)">for</span> ctrl <span style="color: rgba(0, 0, 255, 1)">in</span> all_ctrls <span style="color: rgba(0, 0, 255, 1)">if</span> ctrl.can_be_label <span style="color: rgba(0, 0, 255, 1)">and</span> ctrl.is_visible() <span style="color: rgba(0, 0, 255, 1)">and</span><span style="color: rgba(0, 0, 0, 1)"> ctrl.window_text()]

        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> Build a dictionary of disambiguated list of control names</span>
        name_ctrl_id_map =<span style="color: rgba(0, 0, 0, 1)"> findbestmatch.UniqueDict()
        </span><span style="color: rgba(0, 0, 255, 1)">for</span> index, ctrl <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> enumerate(all_ctrls):
            ctrl_names </span>=<span style="color: rgba(0, 0, 0, 1)"> findbestmatch.get_control_names(ctrl, all_ctrls, txt_ctrls)
            </span><span style="color: rgba(0, 0, 255, 1)">for</span> name <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> ctrl_names:
                name_ctrl_id_map[name] </span>=<span style="color: rgba(0, 0, 0, 1)"> index

        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> Swap it around so that we are mapped off the control indices</span>
        ctrl_id_name_map =<span style="color: rgba(0, 0, 0, 1)"> {}
        </span><span style="color: rgba(0, 0, 255, 1)">for</span> name, index <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> name_ctrl_id_map.items():
            ctrl_id_name_map.setdefault(index, []).append(name)

        </span><span style="color: rgba(0, 0, 255, 1)">def</span> print_identifiers(ctrls, current_depth=1, log_func=<span style="color: rgba(0, 0, 255, 1)">print</span><span style="color: rgba(0, 0, 0, 1)">):
            </span><span style="color: rgba(128, 0, 0, 1)">"""</span><span style="color: rgba(128, 0, 0, 1)">Recursively print ids for ctrls and their descendants in a tree-like format</span><span style="color: rgba(128, 0, 0, 1)">"""</span>
            <span style="color: rgba(0, 0, 255, 1)">if</span> len(ctrls) == 0 <span style="color: rgba(0, 0, 255, 1)">or</span> current_depth &gt;<span style="color: rgba(0, 0, 0, 1)"> depth:
                </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)">

            indent </span>= (current_depth - 1) * u<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">   | </span><span style="color: rgba(128, 0, 0, 1)">"</span>
            <span style="color: rgba(0, 0, 255, 1)">for</span> ctrl <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> ctrls:
                </span><span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)">:
                    ctrl_id </span>=<span style="color: rgba(0, 0, 0, 1)"> all_ctrls.index(ctrl)
                </span><span style="color: rgba(0, 0, 255, 1)">except</span><span style="color: rgba(0, 0, 0, 1)"> ValueError:
                    </span><span style="color: rgba(0, 0, 255, 1)">continue</span><span style="color: rgba(0, 0, 0, 1)">
                ctrl_text </span>=<span style="color: rgba(0, 0, 0, 1)"> ctrl.window_text()
                </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> ctrl_text:
                    </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> transform multi-line text to one liner</span>
                    ctrl_text = ctrl_text.replace(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">\n</span><span style="color: rgba(128, 0, 0, 1)">'</span>, r<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">\n</span><span style="color: rgba(128, 0, 0, 1)">'</span>).replace(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">\r</span><span style="color: rgba(128, 0, 0, 1)">'</span>, r<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">\r</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)

                output </span>= indent + u<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">\n</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">
                output </span>+= indent + u<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">{class_name} - '{text}'    {rect}\n</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">\
                    </span><span style="color: rgba(128, 0, 0, 1)">""</span>.format(class_name=<span style="color: rgba(0, 0, 0, 1)">ctrl.friendly_class_name(),
                              text</span>=<span style="color: rgba(0, 0, 0, 1)">ctrl_text,
                              rect</span>=<span style="color: rgba(0, 0, 0, 1)">ctrl.rectangle())
                output </span>+= indent + u<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">{}</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">.format(ctrl_id_name_map[ctrl_id])

                title </span>=<span style="color: rgba(0, 0, 0, 1)"> ctrl_text
                class_name </span>=<span style="color: rgba(0, 0, 0, 1)"> ctrl.class_name()
                auto_id </span>=<span style="color: rgba(0, 0, 0, 1)"> None
                control_type </span>=<span style="color: rgba(0, 0, 0, 1)"> None
                </span><span style="color: rgba(0, 0, 255, 1)">if</span> hasattr(ctrl.element_info, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">automation_id</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">):
                    auto_id </span>=<span style="color: rgba(0, 0, 0, 1)"> ctrl.element_info.automation_id
                </span><span style="color: rgba(0, 0, 255, 1)">if</span> hasattr(ctrl.element_info, <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">control_type</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">):
                    control_type </span>=<span style="color: rgba(0, 0, 0, 1)"> ctrl.element_info.control_type
                    </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> control_type:
                        class_name </span>= None  <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> no need for class_name if control_type exists</span>
                    <span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">:
                        control_type </span>= None <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> if control_type is empty, still use class_name instead</span>
                criteria_texts =<span style="color: rgba(0, 0, 0, 1)"> []
                </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> title:
                    criteria_texts.append(u</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">title="{}"</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">.format(title))
                </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> class_name:
                    criteria_texts.append(u</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">class_name="{}"</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">.format(class_name))
                </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> auto_id:
                    criteria_texts.append(u</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">auto_id="{}"</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">.format(auto_id))
                </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> control_type:
                    criteria_texts.append(u</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">control_type="{}"</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">.format(control_type))
                </span><span style="color: rgba(0, 0, 255, 1)">if</span> title <span style="color: rgba(0, 0, 255, 1)">or</span> class_name <span style="color: rgba(0, 0, 255, 1)">or</span><span style="color: rgba(0, 0, 0, 1)"> auto_id:
                    output </span>+= u<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">\n</span><span style="color: rgba(128, 0, 0, 1)">'</span> + indent + u<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">child_window(</span><span style="color: rgba(128, 0, 0, 1)">'</span> + u<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">, </span><span style="color: rgba(128, 0, 0, 1)">'</span>.join(criteria_texts) + u<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">)</span><span style="color: rgba(128, 0, 0, 1)">'</span>

                <span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> six.PY3:
                    log_func(output)
                </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">:
                    log_func(output.encode(locale.getpreferredencoding(), errors</span>=<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">backslashreplace</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">))

                print_identifiers(ctrl.children(), current_depth </span>+ 1<span style="color: rgba(0, 0, 0, 1)">, log_func)

        </span><span style="color: rgba(0, 0, 255, 1)">if</span> filename <span style="color: rgba(0, 0, 255, 1)">is</span><span style="color: rgba(0, 0, 0, 1)"> None:
            </span><span style="color: rgba(0, 0, 255, 1)">print</span>(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Control Identifiers:</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
            print_identifiers([this_ctrl, ])
        </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">:
            log_file </span>= codecs.open(filename, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">w</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, locale.getpreferredencoding())

            </span><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> log_func(msg):
                log_file.write(str(msg) </span>+<span style="color: rgba(0, 0, 0, 1)"> os.linesep)
            log_func(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Control Identifiers:</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
            print_identifiers([this_ctrl, ], log_func</span>=<span style="color: rgba(0, 0, 0, 1)">log_func)
            log_file.close()

    print_ctrl_ids </span>=<span style="color: rgba(0, 0, 0, 1)"> print_control_identifiers
    dump_tree </span>= print_control_identifiers</pre>
</div>
<p>print_ctrl_ids 和 dump_tree 实现的功能与print_control_identifiers等价，都是调用的print_control_identifiers 方法。<br>用2个参数：</p>
<ul>
<ul>
<li>depth 查找框架深度，默认全部查找</li>
<li>filename 保存本地文件名称</li>



</ul>


</ul>
<h4>7.2保存到本地文件</h4>
<p>1.我们把打印的控件结构树内容保存到本地txt，这样查看更方便，直接CTRL+F查找即可。</p>
<h5>7.2.1代码设计</h5>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202501/1232840-20250116152221155-794737415.png" alt="" loading="lazy"></p>
<h5>7.2.2参考代码</h5>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> -*- coding:utf-8 -*-</span>

<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 1.先设置编码，utf-8可支持中英文，如上，一般放在第一行</span>

<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 2.注释：包括记录创建时间，创建人，项目名称。</span>
<span style="color: rgba(128, 0, 0, 1)">'''</span><span style="color: rgba(128, 0, 0, 1)">
Created on 2025-02-12
@author: 北京-宏哥
北京宏哥（微信搜索：北京宏哥，关注宏哥，提前解锁更多测试干货！）
Project: PC端自动化测试实战教程-6-pywinauto 打印和保存控件菜单树结构（详细教程）
</span><span style="color: rgba(128, 0, 0, 1)">'''</span>

<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 3.导入模块</span>
<span style="color: rgba(0, 0, 255, 1)">from</span> pywinauto <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> Application
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> time

</span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 通过窗口打开</span>
app = Application(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">uia</span><span style="color: rgba(128, 0, 0, 1)">'</span>).start(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">notepad.exe</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
time.sleep(</span>3<span style="color: rgba(0, 0, 0, 1)">)
app </span>= Application(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">uia</span><span style="color: rgba(128, 0, 0, 1)">'</span>).connect(class_name=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Notepad</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
win </span>= app[<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">无标题 - Notepad</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">]
</span><span style="color: rgba(0, 0, 255, 1)">print</span><span style="color: rgba(0, 0, 0, 1)">(win)
</span><span style="color: rgba(0, 0, 255, 1)">print</span><span style="color: rgba(0, 0, 0, 1)">(app.process)
win.print_control_identifiers()
win.print_ctrl_ids(filename</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">bjhg.txt</span><span style="color: rgba(128, 0, 0, 1)">"</span>)</pre>
</div>
<h5>7.2.3运行代码</h5>
<p>1.运行代码，右键Run'Test'，就可以看到控制台输出，如下图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202501/1232840-20250116152245986-190524865.png" alt="" loading="lazy"></p>
<p>2.运行代码后电脑端的动作（启动记事本）。如下图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202501/1232840-20250116152433293-315197943.gif" alt="" loading="lazy"></p>
<p>3.在windows上运行后文件写入的中文内容有乱码，如下图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202501/1232840-20250116151947877-915333808.png" alt="" loading="lazy"></p>
<p>4.重新设保存文件默认编码可以解决此问题。</p>
<h5>7.2.4代码设计</h5>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202501/1232840-20250116152913546-964915499.png" alt="" loading="lazy"></p>
<h5>7.2.5参考代码</h5>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> -*- coding:utf-8 -*-</span>

<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 1.先设置编码，utf-8可支持中英文，如上，一般放在第一行</span>

<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 2.注释：包括记录创建时间，创建人，项目名称。</span>
<span style="color: rgba(128, 0, 0, 1)">'''</span><span style="color: rgba(128, 0, 0, 1)">
Created on 2025-02-12
@author: 北京-宏哥
北京宏哥（微信搜索：北京宏哥，关注宏哥，提前解锁更多测试干货！）
Project: PC端自动化测试实战教程-6-pywinauto 打印和保存控件菜单树结构（详细教程）
</span><span style="color: rgba(128, 0, 0, 1)">'''</span>

<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 3.导入模块</span>
<span style="color: rgba(0, 0, 255, 1)">from</span> pywinauto <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> Application
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> time
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> locale


</span><span style="color: rgba(0, 0, 255, 1)">def</span> getpreferredencoding(do_setlocale =<span style="color: rgba(0, 0, 0, 1)"> True):
    </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">utf-8</span><span style="color: rgba(128, 0, 0, 1)">"</span>


<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 设置保存文件编码 "utf-8"</span>
locale.getpreferredencoding =<span style="color: rgba(0, 0, 0, 1)"> getpreferredencoding
</span><span style="color: rgba(0, 0, 255, 1)">print</span><span style="color: rgba(0, 0, 0, 1)">(locale.getpreferredencoding())

</span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 通过窗口打开</span>
app = Application(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">uia</span><span style="color: rgba(128, 0, 0, 1)">'</span>).start(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">notepad.exe</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
time.sleep(</span>3<span style="color: rgba(0, 0, 0, 1)">)
app </span>= Application(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">uia</span><span style="color: rgba(128, 0, 0, 1)">'</span>).connect(class_name=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Notepad</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
win </span>= app[<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">无标题 - Notepad</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">]
</span><span style="color: rgba(0, 0, 255, 1)">print</span><span style="color: rgba(0, 0, 0, 1)">(win)
</span><span style="color: rgba(0, 0, 255, 1)">print</span><span style="color: rgba(0, 0, 0, 1)">(app.process)
win.print_control_identifiers()
win.print_ctrl_ids(filename</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">bjhg.txt</span><span style="color: rgba(128, 0, 0, 1)">"</span>)</pre>
</div>
<h5>7.2.6运行代码</h5>
<p>1.运行代码，右键Run'Test'，就可以看到控制台输出，如下图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202501/1232840-20250116152820498-1281241857.png" alt="" loading="lazy"></p>
<p>2.运行代码后电脑端的动作（启动记事本）。如下图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202501/1232840-20250116152836536-353796202.gif" alt="" loading="lazy"></p>
<h3>8.小结</h3>
<p>&nbsp;今天主要讲解和分享的是打印控件菜单结构树的方法：print_control_identifiers()在Windows10系统和Windows11系统上遇到的问题：<strong>pywinauto.findwindows.ElementNotFoundError: {'best_match': 'Untitled - Notepad', 'backend': 'uia', 'process': 31680}&nbsp;</strong>，如何遇到，然后宏哥是怎么一步一步解决的，但是其中的原理宏哥还是有点懵，好在是问题暂时解决了。其实回过头来看走过的路，其中有一些走弯路了，当时由于宏哥急于解决问题，没有仔细思考，第一步已经发现进程号都不一样了，什么等待啊、改路径等等全是白扯，根本解决不了问题。现在问题解决了，按照解决问题思路宏哥倒退一下是原理：PC端程序启动后，慢慢在后台加载界面程序，这时宏哥加了等待，然后等待程序加载完成，宏哥然后连接这个加载好的应用程序，这样就确保PC端启动的程序和连接的程序一样（进程号一致），然后执行控件结构树的打印，就不会找不到了。因此等待和连接二者缺一不可，前边宏哥也将而这分开实践了，解决不了问题，仍然报错。二者结合问题解决。</p>
<p>好了，关于打印和保存控件菜单结构树以及不同操作系统遇到的问题，都得到完美解决，仅供参考学习，小伙伴或者童鞋们，有其他更好的解决办法可以给宏哥留言评论哈！时间不早了今天就分享到这里，感谢你耐心地阅读！</p>
</div>
<div id="MySignature" role="contentinfo">
    <div id="MySignature" style="display: block">
	<div style="font-size: 13px; border: 1px dashed rgb(45, 161, 45); padding: 10px 15px; background-color: rgb(248, 248, 248)">
		<label style="font-weight: bold">
			&nbsp;&nbsp;&nbsp;&nbsp;为了方便大家在移动端也能看到我分享的博文，现已注册个人微信公众号，扫描左下方二维码即可，欢迎大家关注，提前解锁更多测试干货！有时间会及时分享相关技术博文。
		</label>
		<br>
		<label style="font-weight: bold">
			&nbsp;&nbsp;&nbsp;&nbsp;为了方便大家互动讨论相关技术问题，刚刚建立了咱们的专门的微信群交流互动群，群内会分享交流测试领域前沿知识。  请您扫描中间的微信二维码进群 
		</label>
		<br>
		<label style="font-weight: bold">
			&nbsp;&nbsp;&nbsp;&nbsp;为了方便大家互动讨论相关技术问题，现已组建专门的微信群，由于微信群满100，请您扫描右下方宏哥个人微信二维码拉你进群
			<label style="font-weight: bold; color: red; font-size: 15px">
				（请务必备注：已关注公众号进群）平时上班忙（和你一样），所以加好友不及时，请稍安勿躁~
			</label>
			，欢迎大家加入这个大家庭，我们一起畅游知识的海洋。
		</label>
		<br>
		&nbsp;&nbsp;&nbsp;&nbsp;感谢您花时间阅读此篇文章,如果您觉得这篇文章你学到了东西也是为了犒劳下博主的码字不易不妨打赏一下吧，让博主能喝上一杯咖啡，在此谢过了！
		<br>
		&nbsp;&nbsp;&nbsp;&nbsp;如果您觉得阅读本文对您有帮助，请点一下左下角
		<a id="recommend" style="font-weight: bold; color: red; font-size: 15px; text-decoration: underline">
			“推荐”
		</a>
		按钮，您的
		<label style="font-weight: bold; color: red; font-size: 15px">
			“推荐”
		</label>
		将是我最大的写作动力！另外您也可以选择
		<a id="follow_me_btn" style="cursor: pointer; color: blue; text-decoration: underline">
			【
			<strong>
				关注我
			</strong>
			】
		</a>
		，可以很方便找到我！
		<br>
		&nbsp;&nbsp;&nbsp;&nbsp;本文版权归作者和博客园共有，来源网址：
		<a href="https://www.cnblogs.com/du-hong" style="color: red; text-decoration: underline" target="_blank">
			https://www.cnblogs.com/du-hong
		</a>
		欢迎各位转载，但是未经作者本人同意，转载文章之后必须在文章页面明显位置给出作者和原文连接，否则保留追究法律责任的权利！
	</div>
	<div style="text-align: center; margin-top: 10px">
		<p style=" font-weight: bolder; color: red; ">
			公众号(关注宏哥)&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			微信群(扫码进群) &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;客服微信
		</p>
		<img style="width: 200px;padding-right: 50px;" alt="个人微信公众号" src="https://img2018.cnblogs.com/common/1741949/201911/1741949-20191119095948011-608816619.png">
		<img style="width: 200px;padding-right: 65px;" alt="微信群" src="https://img2024.cnblogs.com/blog/1232840/202505/1232840-20250519113647633-1511311445.png">
		<img style="width: 200px" alt="个人微信" src="https://img2018.cnblogs.com/common/1741949/201911/1741949-20191106101257091-849954564.png">
	</div>
</div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.007900814752314815" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-20 10:59">2025-05-20 10:59</span>&nbsp;
<a href="https://www.cnblogs.com/du-hong">北京-宏哥</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18670838);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18670838', targetLink: 'https://www.cnblogs.com/du-hong/p/18670838', title: 'PC端自动化测试实战教程-6-pywinauto 打印和保存控件菜单树结构之ElementNotFoundError（详细教程）' })">举报</a>
</div>
        