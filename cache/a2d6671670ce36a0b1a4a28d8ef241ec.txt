
<table cellspacing="0" cellpadding="0"><tbody><tr><td class="t_f" id="postmessage_53661799">
<i class="pstatus"> 本帖最后由 zwb83925462 于 2025-8-15 15:43 编辑 </i><br>
<br>
鉴于帖子https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=2052017的评论区很多人都说操作太复杂,<br>
故在此处提供一个简化步骤,会用到一些第三方工具,比如nodejs,还有浏览器扩展油猴脚本或者脚本猫,<br>
本教程提供的文件没有加入恶意代码,请放心使用,里面的cbox.exe和dll文件都是大佬的原版文件,并未修改过一个字节,运行库则是微软带签名的原版.<br>
步骤主体分为两个部分,第一步是在浏览器上下载好加密视频文件,以.ts结尾;第二步是利用批处理文件在命令行执行解密指令<br>
首先是<font size="5">第一步</font>的准备工作:在浏览器(只在Chrome浏览器的136版本下测试过)安装可以执行油猴脚本的扩展,比如<font size="4">TamperMonkey</font>或者<font size="4">脚本猫</font>,然后新建脚本并将以下代码覆盖到脚本窗口<br>
<div style="padding:15px 0;"><div style="font-size:12px;">[JavaScript] <em class="viewsource" style="cursor:pointer;font-size:12px;color:#369 !important;">纯文本查看</em> <em class="copycode" style="cursor:pointer;font-size:12px;color:#369 !important;">复制代码</em></div><pre class="brush: javascript; gutter: true">// ==UserScript==
// @name:en-US         CCTV-HLS-Client
// @name               CCTV客户端视频解析
// @description:en-US  parse cctv video to hls url.
// @description        将CCTV视频解析成HLS地址.
// @namespace          https://greasyfork.org/users/135090
// @version            1.4.4
// @author             [ZWB](https://greasyfork.org/zh-CN/users/863179)
// @license            CC
// @grant              none
// @run-at             document-end
// @match              https://*.cctv.com/2*/VID*.shtml*
// @match              https://*.cctv.cn/2*/VID*.shtml*
// @match              https://vdn.apps.cntv.cn/api/getHttpVideoInfo*
// @icon               https://tv.cctv.cn/favicon.ico
// ==/UserScript==

(function () {
    if (location.hostname.indexOf(".cctv.com") &gt; 0 || location.hostname.indexOf(".cctv.cn") &gt; 0) {
        var base = "https://vdn.apps.cntv.cn";
        var apiUrl = base + `/api/getHttpVideoInfo.do?client=flash&amp;im=0&amp;pid=${guid}`;
        location.href = (apiUrl);
    }

    if (location.hostname.indexOf("vdn.apps.cntv.cn") &gt; -1) {
        var data = JSON.parse(document.body.textContent);
        var title = data?.title;
        var hlsUrl = data?.manifest?.hls_enc2_url.replaceAll("main", "2000");
        if (data?.play_channel.indexOf("4K") &gt; 0) {
            hlsUrl = data?.hls_url.replaceAll("main", "4000");
        }
        var tsnlen = hlsUrl.split("/").length - 2;
        var tsn = hlsUrl.split("/")[tsnlen];
        document.body.textContent = hlsUrl;
        document.title = tsn || title;
        var txtctt = document.createElement("h2");
        txtctt.textContent = title;
        document.body.appendChild(txtctt);
        //参数里的document.title改成title可以让下载的文件名变成视频标题
        downloadM3U8Video(hlsUrl, document.title + '.ts', {
            onProgress: (current, total) =&gt; {
                var cotp = `${Math.round((current / total) * 100)}`;
                txtctt.textContent = title + "---下载进程" + cotp + "%";
                console.info(`Progress: ${current}/${total} (${cotp}%)`);
            }
        });
    }

    async function downloadM3U8Video(m3u8Url, outputFilename = 'video.m2ts', options = {}) {
        try {
            // 1. 获取并解析M3U8文件
            // void (alert('开始')); //提示开始
            const response = await fetch(m3u8Url);
            if (!response.ok) throw new Error(`Failed to fetch M3U8: ${response.status}`);

            const m3u8Content = await response.text();
            const lines = m3u8Content.split('\n');
            const baseUrl = m3u8Url.substring(0, m3u8Url.lastIndexOf("/") + 1);
            const segments = [];

            // 解析TS分片URL
            for (const line of lines) {
                if (line &amp;&amp; !line.startsWith('#') &amp;&amp; (line.endsWith('.ts') || line.match(/\.ts\?/))) {
                    const segmentUrl = line.startsWith('http') ? line : new URL(line, baseUrl).href;
                    segments.push(segmentUrl);
                    // return; //此行代码功能:解析完第一个分片地址之后停止执行
                }
            }

            if (segments.length === 0) throw new Error('No TS segments found in the M3U8 file');
            console.log(`Found ${segments.length} TS segments`);

            // 2. 下载所有分片
            console.log('Downloading segments...');
            const blobs = [];
            const { onProgress } = options;

            for (let i = 0; i &lt; segments.length; i++) {
                try {
                    const segmentResponse = await fetch(segments[i]);
                    if (!segmentResponse.ok) throw new Error(`Failed to fetch segment: ${segmentResponse.status}`);

                    const blob = await segmentResponse.blob();
                    blobs.push(blob);

                    // 调用进度回调
                    if (typeof onProgress === 'function') {
                        onProgress(i + 1, segments.length);
                    }
                } catch (error) {
                    console.error(`Error downloading segment ${segments[i]}:`, error);
                    throw error; // 可以选择继续或抛出错误
                }
            }

            // 3. 合并并下载
            console.log('Merging and downloading...');
            const mergedBlob = new Blob(blobs, { type: 'video/mp2t' });
            const url = URL.createObjectURL(mergedBlob);

            const a = document.createElement('a');
            a.href = url;
            a.download = outputFilename;
            document.body.appendChild(a);
            a.click();

            // 清理
            setTimeout(() =&gt; {
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
            }, 100);

            console.log('Download completed!');
            return true;
        } catch (error) {
            console.error('Error downloading M3U8 video:', error);
            throw error;
        }
    }
})();
</pre></div><br>
此代码实现了在浏览到CCTV视频页时自动跳转到API页面并提示开始下载加密版视频,如果嫌提示烦把void (alert('开始'));这行删除或注释即可,安装好后下次下载加密版视频将变得轻松惬意,<br>
因为cbox暂时不支持解密4K频道的视频,所以4K频道暂时用未加密的源,所以4K频道的视频暂时用不到第二步.不过由于mime类型是video/mp2t,所以需要mp4的只能自行转码.<br>
<font size="4"><u>第一步的准备工作结束</u></font>,接下来是<font size="5">真正的操作步骤</font>,在浏览器访问CCTV视频播放页,如果支持,则会自动跳转到API页,并开始下载,页面上会显示进度.<br>
且API页面还会出现M3U8地址,不喜欢在浏览器下载视频的也能够复制m3u8地址去cbox里下载,所以建议暂时不要关闭这个API页,因为第二步还有用.<br>
<br>
<br>
接下来是<font face="黑体"><font size="5">第二步</font></font><font face="Arial"><font size="3">的准备工作:用批处理或者图形化界面基于大佬提供的cbox执行解密操作,鉴于大佬提供的文件比较分散,我整合了一下,做成了一个自解压包,解压时需要在目标文件夹选择一个新建的空文件夹：</font></font><br>
<font face="Arial"><font size="3">链接: https://pan.baidu.com/s/1f7M2eu2m3gYvj5JtdarS1Q?pwd=52pj</font></font><br>
<font face="Arial"><font size="3">如果会直接用cbox的可以将nodejs相关的文件和+Run.cmd文件删除,如果嫌手搓命令行麻烦的则需要自行下载node.exe放入</font></font><font face="Arial"><font size="3">+Run.cmd</font></font><font face="Arial"><font size="3">所在的文件夹,然后运行+Run.cmd按提示操作</font></font><br>
<font face="Arial"><font size="3">node.exe文件64位的地址样式</font></font><font face="Arial"><font size="3">https://registry.npmmirror.com/-/binary/node</font></font><font face="Arial"><font size="3">/.../win-x64/node.exe,</font></font><br>
<font face="Arial"><font size="3">node.exe文件32位的地址样式</font></font><font face="Arial"><font size="3">https://registry.npmmirror.com/-/binary/node</font></font><font face="Arial"><font size="3">/.../win-x86/node.exe</font></font><font face="Arial"><font size="3">,</font></font><br>
<font face="Arial"><font size="3">...表示版本号,请在 https://registry.npmmirror.com/binary.html?path=node/&nbsp;&nbsp;中自行选择下载的版本,</font></font><font face="Arial"><font size="3">如果系统版本比较低的则需要下载适合的低版本.</font></font><br>
<br>
<font face="Arial"><font size="4"><u>第二步的准备工作结束</u></font></font><font face="Arial"><font size="3">后就是</font></font><font face="Arial"><font size="5">真正的操作步骤</font></font><font face="Arial"><font size="3">.</font></font><font face="Arial"><font size="3">确保node.exe支持自己的系统.</font></font><br>
<font face="Arial"><font size="3">运行+Run.cmd会提示"</font></font><font face="Arial"><font size="3">请输入TS文件路径或HLS地址</font></font><font face="Arial"><font size="3">",这时可以去把网页上的m3u8复制粘贴上去,也可以去下载目录下把要解密的文件拖到命令行窗口,</font></font><br>
<font face="Arial"><font size="3">然后按下回车等待命令执行完毕.</font></font><font face="Arial"><font size="3">"由于大佬的cbox的参数只支持ascii字符,</font></font><font face="Arial"><font size="3">所以转换后的文件名默认为节目的pid,以避免文件名重复."</font></font><br>
<font face="Arial"><font size="3">到此一个文件的解密已经结束,命令行窗口会提示让你输入下一个需要解密的视频文件地址.</font></font><br>
<br>
<br>
<font face="Arial"><font size="3">下次再用就只需要执行真正的操作步骤即可,祝您使用愉快.暂时只有百度网盘的账号,其他网盘就看有没有人愿意转存了</font></font></td></tr></tbody></table>


