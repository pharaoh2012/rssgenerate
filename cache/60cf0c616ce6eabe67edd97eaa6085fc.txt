
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/vipstone/p/18912587" title="发布于 2025-06-05 16:18">
    <span role="heading" aria-level="2">超实用！Dify调用Java的3种实现方式！</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>在一些复杂的业务中，我们可能需要使用 Dify 调用外部程序（如 Java 程序），因为这样才能满足业务的特殊需求。</p>
<p>例如，当我们使用 Dify 实现“AI 简历自动筛选器”的时候，我们首先会使用 AI 筛选出符合招聘要求的简历，然后再将简历存放到公司的“人才库”系统中，完成后续流程的招聘需要（预约面试、面试评价、发送 Offer 等操作），这个时候就需要让 Dify 调用 Java 程序了。</p>
<p>那么问题来了，使用 Dify 调用 Java 程序的实现方式有哪些呢？今天我们就来盘点一下。</p>
<h2 id="1解决方案概述">1.解决方案概述</h2>
<p>Dify 调用 Java 程序的解决方案有以下几种：</p>
<ol>
<li>通过 <strong>“HTTP 请求”</strong> 的方式调用 Java 程序。</li>
<li>通过 <strong>“自定义工具”</strong> 的方式调用 Java 程序。</li>
<li>通过 <strong>MCP</strong> 的方式调用 Java 程序。</li>
</ol>
<p>接下来，我们分别来看。</p>
<h2 id="2http请求">2.HTTP请求</h2>
<p>HTTP 请求允许通过 HTTP 协议发送服务器请求，适用于获取外部数据、webhook、生成图片、下载文件等情景。它让你能够向指定的网络地址发送定制化的 HTTP 请求，实现与各种外部服务的互联互通。</p>
<p>它的使用也很简单，我们只需要在 Dify 的工作流中添加“HTTP 请求”节点即可，如下图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/172074/202506/172074-20250605161700314-454704092.png" alt="" loading="lazy"></p>
<p>它的参数配置包含以下这些：</p>
<p><img src="https://img2024.cnblogs.com/blog/172074/202506/172074-20250605161715820-1576457676.png" alt="" loading="lazy"></p>
<p>当然，我们也可以利用它来发送文件给 Java 程序，并且可以自定义失败重试配置和错误异常配置。</p>
<p>对于被调用方 Java 来说，只需要提供一个 HTTP 接口即可，当然生成环境要考虑添加 APIKey 以保证调用的安全性，这里提供一个简单的 Java 服务接口：</p>
<pre><code class="language-java">import com.ai.difyhttpserver.entity.User;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/it")
public class InterviewController {
    @RequestMapping("/add")
    public boolean add(User user) {
        // 执行数据库添加操作
        System.out.println(user.toString());
        return true;
    }
}
</code></pre>
<h2 id="3自定义工具">3.自定义工具</h2>
<p>自定义工具的调用方式，需要先把 Java 程序发不成 Dify 中的自定义工具，才能正常调用，如下图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/172074/202506/172074-20250605161723518-2089012991.png" alt="" loading="lazy"></p>
<p>配置的 Schema 需要满足 OpenAPI 协议，配置如下：</p>
<pre><code class="language-json">{
  "openapi": "3.1.0",
  "info": {
    "title": "html to image tools",
    "description": "Generate image files based on HTML code",
    "version": "v1.0.0"
  },
  "servers": [
    {
      "url": "http://192.168.3.94:8080"
    }
  ],
  "paths": {
    "/html2img/gen": {
      "get": {
        "description": "Generate image files based on HTML code",
        "operationId": "html2image",
        "parameters": [
          {
            "name": "html",
            "in": "query",
            "description": "HTML code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "deprecated": false
      }
    }
  },
  "components": {
    "schemas": {

    }
  }
}
</code></pre>
<p>同样，Java 服务器端只需要提供一个可以使用 HTTP 协议访问的接口即可。</p>
<h2 id="4mcp通讯">4.MCP通讯</h2>
<p>这种通讯方式实现最麻烦，有点大炮打蚊子的感觉，但也可以实现 Dify 调用 Java 程序，此时要求先试用 Java 程序，例如 Spring AI 实现一个 MCP 服务器端，然后再使用 Dify 添加支持 MCP 调用的 Agent 策略，来调用 Java 的 MCP 服务，如下图所示：</p>
<p>安装 Agent 策略（支持 MCP 工具）如下图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/172074/202506/172074-20250605161732837-1865299634.png" alt="" loading="lazy"></p>
<blockquote>
<p>MCP SSE 选装，非必须，可以为后续 Agent 提供 MCP 工具列表，方便 LLM 正确理解和调用工具。</p>
</blockquote>
<h3 id="配置mcp服务地址">配置MCP服务地址</h3>
<p>Dify 只支持 HTTP 协议的 MCP 服务调用，它的配置格式如下：</p>
<pre><code class="language-json">{
  "server_name1": {
    "transport": "sse",
    "url": "http://127.0.0.1:8000/sse",
    "headers": {},
    "timeout": 50,
    "sse_read_timeout": 50
  },
  "server_name2": {
    "transport": "sse",
    "url": "http://127.0.0.1:8001/sse"
  },
  "server_name3": {
    "transport": "streamable_http",
    "url": "http://127.0.0.1:8002/mcp",
    "headers": {},
    "timeout": 50
  },
  "server_name4": {
    "transport": "streamable_http",
    "url": "http://127.0.0.1:8003/mcp"
  }
}
</code></pre>
<p>支持配置多个 MCP 服务，或者是以下 JSON 格式也支持：</p>
<pre><code class="language-json">{
  "mcpServers": {
      "server_name1": {
        "transport": "sse",
        "url": "http://127.0.0.1:8000/sse",
        "headers": {},
        "timeout": 50,
        "sse_read_timeout": 50
      },
      "server_name2": {
        "transport": "sse",
        "url": "http://127.0.0.1:8001/sse"
      },
      "server_name3": {
        "transport": "streamable_http",
        "url": "http://127.0.0.1:8002/mcp",
        "headers": {},
        "timeout": 50
      },
      "server_name4": {
        "transport": "streamable_http",
        "url": "http://127.0.0.1:8003/mcp"
      }
    }
}
</code></pre>
<h3 id="配置agent">配置Agent</h3>
<p>Agent 需要配置的项目比较多，首先是 Agent 策略：</p>
<p><img src="https://img2024.cnblogs.com/blog/172074/202506/172074-20250605161742505-151073531.png" alt="" loading="lazy"></p>
<p>然后是 LLM，选择合适的大模型即可，之后配置 MCP 工具和 HTTP 地址，如下图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/172074/202506/172074-20250605161748468-599235865.png" alt="" loading="lazy"></p>
<p>之后配置指令和查询问题：</p>
<p><img src="https://img2024.cnblogs.com/blog/172074/202506/172074-20250605161754276-1577982802.png" alt="" loading="lazy"></p>
<h3 id="测试mcp调用">测试MCP调用</h3>
<p>我们创建的是一个 ChatFlow，执行效果如下：</p>
<p><img src="https://img2024.cnblogs.com/blog/172074/202506/172074-20250605161800761-1937458771.png" alt="" loading="lazy"></p>
<p>执行符合预期。</p>
<blockquote>
<p>Spring AI 实现 MCP 服务器端参考我之前发的文章，这里就不再赘述。</p>
</blockquote>
<h2 id="小结">小结</h2>
<p>Dify 调用 Java 程序的实现方式有 3 种：HTTP 请求、自定义工具、MCP 通讯方式。<strong>其中最简单、最灵活的实现方式为 HTTP 请求方式</strong>；自定义工具适合偏工具性质（而非业务性质）的调用；MCP 适合一次性注入多个工具方法给 Dify 使用的场景。</p>
<blockquote>
<p>本文已收录到我的技术小站 <a href="https://www.javacn.site" target="_blank" rel="noopener nofollow">www.javacn.site</a>，其中包含的内容有：Spring AI、LangChain4j、Dify、AI Agent、MCP、Function Call、RAG、向量数据库、Prompt、多模态、向量数据库、嵌入模型等内容。</p>
</blockquote>

</div>
<div id="MySignature" role="contentinfo">
    <div style="text-align: center; color: red">
关注下面二维码，订阅更多精彩内容。
<br>
<img style="margin-left: 0px" src="https://images.cnblogs.com/cnblogs_com/vipstone/848916/o_211225130402_gognzhonghao.jpg">
</div>

<div style="display: none">
    <img src="http://icdn.apigo.cn/gitchat/rabbitmq.png?imageView2/0/w/500/h/400">
</div>
<div style="margin-bottom: 50px; display: none">

<img title="微信打赏" src="http://icdn.apigo.cn/myinfo/wchat-pay.png" alt="微信打赏">
<br>

<div style="display: none">
<span style="display: block; position: absolute; height: 40px; top: 50%; margin-top: -20px">关注公众号（加好友）：</span>

<img style="margin-left: 144px" src="http://icdn.apigo.cn/gongzhonghao2.png?imageView2/0/w/120/h/120">
</div>
<p></p>

<div id="AllanboltSignature">
    <p style="border-top: #e0e0e0 1px dashed; border-right: #e0e0e0 1px dashed; border-bottom: #e0e0e0 1px dashed; border-left: #e0e0e0 1px dashed; padding-top: 10px; padding-right: 10px; padding-bottom: 10px; padding-left: 60px; background: url(&quot;https://images.cnblogs.com/cnblogs_com/lloydsheng/239039/o_copyright.gif&quot;) #e5f1f4 no-repeat 1% 50%; font-family: 微软雅黑; font-size: 11px" id="PSignature">
        <br> 作者：
        <a href="http://vipstone.cnblogs.com/" target="_blank">王磊的博客</a>
        <br> 出处：
        <a href="http://vipstone.cnblogs.com/" target="_blank">http://vipstone.cnblogs.com/</a>
        <br>
    </p>
</div></div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.7900335184606482" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-06-05 16:18">2025-06-05 16:18</span>&nbsp;
<a href="https://www.cnblogs.com/vipstone">磊哥|www.javacn.site</a>&nbsp;
阅读(<span id="post_view_count">98</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18912587);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18912587', targetLink: 'https://www.cnblogs.com/vipstone/p/18912587', title: '超实用！Dify调用Java的3种实现方式！' })">举报</a>
</div>
        