
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/lymblog/p/18938072" title="发布于 2025-06-20 11:46">
    <span role="heading" aria-level="2">AEM 与 ActiveMQ 集成方案详解</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<div class="auto-hide-last-sibling-br paragraph-Oc488D paragraph-element br-paragraph-space">Adobe Experience Manager (AEM) 与 ActiveMQ 的集成可实现系统间的解耦和异步通信，以下是详细的集成步骤与代码实现：</div>
<h3 class="header-OdWb_u auto-hide-last-sibling-br">一、环境准备</h3>
<ol class="auto-hide-last-sibling-br">
<li>AEM 环境：AEM 6.5+ 或 AEM as a Cloud Service</li>
<li>ActiveMQ：版本 5.15+（推荐 5.17.x）</li>
<li>Maven 项目：用于开发 AEM 组件和配置</li>
</ol>
<h3 class="header-OdWb_u auto-hide-last-sibling-br">二、ActiveMQ 配置</h3>
<h4 class="header-OdWb_u auto-hide-last-sibling-br">1. 启用 JMS 连接</h4>
<div class="auto-hide-last-sibling-br paragraph-Oc488D paragraph-element br-paragraph-space">修改 ActiveMQ 的&nbsp;<code>conf/activemq.xml</code>，确保支持 OpenWire 协议：</div>
<div class="auto-hide-last-sibling-br paragraph-Oc488D paragraph-element br-paragraph-space">
<div class="cnblogs_code">
<pre>&lt;transportConnectors&gt;
    &lt;transportConnector name=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">openwire</span><span style="color: rgba(128, 0, 0, 1)">"</span> uri=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">tcp://0.0.0.0:61616?maximumConnections=1000&amp;amp;wireFormat.maxFrameSize=104857600</span><span style="color: rgba(128, 0, 0, 1)">"</span>/&gt;
&lt;/transportConnectors&gt;</pre>
</div>
<h4 class="header-OdWb_u auto-hide-last-sibling-br">2. 创建 JMS 用户（可选）</h4>
<div class="auto-hide-last-sibling-br paragraph-Oc488D paragraph-element br-paragraph-space">修改&nbsp;<code>conf/users.properties</code>&nbsp;添加专用用户：</div>
<div class="auto-hide-last-sibling-br paragraph-Oc488D paragraph-element br-paragraph-space">
<div class="cnblogs_code">
<pre>jmsuser=jms password,users</pre>
</div>
<h3 class="header-OdWb_u auto-hide-last-sibling-br">三、AEM 集成步骤</h3>
<h4 class="header-OdWb_u auto-hide-last-sibling-br">1. 添加 ActiveMQ 依赖</h4>
<div class="auto-hide-last-sibling-br paragraph-Oc488D paragraph-element br-paragraph-space">在 AEM 项目的&nbsp;<code>pom.xml</code>&nbsp;中添加依赖：</div>
<div class="auto-hide-last-sibling-br paragraph-Oc488D paragraph-element br-paragraph-space">
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">dependency</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
    <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">groupId</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>org.apache.activemq<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">groupId</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
    <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">artifactId</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>activemq-client<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">artifactId</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
    <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">version</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>5.17.10<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">version</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">dependency</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
<span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">dependency</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
    <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">groupId</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>org.slf4j<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">groupId</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
    <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">artifactId</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>slf4j-api<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">artifactId</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
    <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">version</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>1.7.36<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">version</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">dependency</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span></pre>
</div>
<h4 class="header-OdWb_u auto-hide-last-sibling-br">2. 创建 OSGi 配置</h4>
<div class="auto-hide-last-sibling-br paragraph-Oc488D paragraph-element br-paragraph-space">定义 ActiveMQ 连接工厂配置：</div>
<div class="auto-hide-last-sibling-br paragraph-Oc488D paragraph-element br-paragraph-space">
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.osgi.service.metatype.annotations.AttributeDefinition;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.osgi.service.metatype.annotations.ObjectClassDefinition;

@ObjectClassDefinition(name </span>= "ActiveMQ Connection Factory Configuration"<span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 0, 255, 1)">public</span> @<span style="color: rgba(0, 0, 255, 1)">interface</span><span style="color: rgba(0, 0, 0, 1)"> ActiveMQConfig {
    @AttributeDefinition(name </span>= "Broker URL", description = "ActiveMQ Broker URL"<span style="color: rgba(0, 0, 0, 1)">)
    String brokerUrl() </span><span style="color: rgba(0, 0, 255, 1)">default</span> "tcp://localhost:61616"<span style="color: rgba(0, 0, 0, 1)">;
    
    @AttributeDefinition(name </span>= "Username", description = "ActiveMQ Username"<span style="color: rgba(0, 0, 0, 1)">)
    String username() </span><span style="color: rgba(0, 0, 255, 1)">default</span> "admin"<span style="color: rgba(0, 0, 0, 1)">;
    
    @AttributeDefinition(name </span>= "Password", description = "ActiveMQ Password"<span style="color: rgba(0, 0, 0, 1)">)
    String password() </span><span style="color: rgba(0, 0, 255, 1)">default</span> "admin"<span style="color: rgba(0, 0, 0, 1)">;
}</span></pre>
</div>
<h4 class="header-OdWb_u auto-hide-last-sibling-br">3. 实现 JMS 连接工厂服务</h4>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> javax.jms.ConnectionFactory;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.apache.activemq.ActiveMQConnectionFactory;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.osgi.service.component.annotations.Activate;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.osgi.service.component.annotations.Component;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.osgi.service.component.annotations.Modified;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.osgi.service.metatype.annotations.Designate;

@Component(service </span>= ActiveMQService.<span style="color: rgba(0, 0, 255, 1)">class</span>, immediate = <span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">)
@Designate(ocd </span>= ActiveMQConfig.<span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> ActiveMQService {
    </span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> ConnectionFactory connectionFactory;
    </span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> ActiveMQConfig config;

    @Activate
    @Modified
    </span><span style="color: rgba(0, 0, 255, 1)">protected</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> activate(ActiveMQConfig config) {
        </span><span style="color: rgba(0, 0, 255, 1)">this</span>.config =<span style="color: rgba(0, 0, 0, 1)"> config;
        initConnectionFactory();
    }

    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> initConnectionFactory() {
        ActiveMQConnectionFactory factory </span>= <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> ActiveMQConnectionFactory(
            config.username(), 
            config.password(), 
            config.brokerUrl()
        );
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 配置选项（可选）</span>
        factory.setTrustAllPackages(<span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">);
        </span><span style="color: rgba(0, 0, 255, 1)">this</span>.connectionFactory =<span style="color: rgba(0, 0, 0, 1)"> factory;
    }

    </span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> ConnectionFactory getConnectionFactory() {
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> connectionFactory;
    }
}</span></pre>
</div>
<h4 class="header-OdWb_u auto-hide-last-sibling-br">4. 实现 JMS 消息生产者</h4>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">import</span> javax.jms.*<span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.osgi.service.component.annotations.Component;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.osgi.service.component.annotations.Reference;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.slf4j.Logger;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.slf4j.LoggerFactory;

@Component(service </span>= JmsMessageProducer.<span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> JmsMessageProducer {
    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">final</span> Logger LOG = LoggerFactory.getLogger(JmsMessageProducer.<span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)">);
    
    @Reference
    </span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> ActiveMQService activeMQService;

    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> sendMessage(String queueName, String messageContent) {
        Connection connection </span>= <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">;
        Session session </span>= <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">;
        MessageProducer producer </span>= <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">;
        
        </span><span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)"> {
            ConnectionFactory factory </span>=<span style="color: rgba(0, 0, 0, 1)"> activeMQService.getConnectionFactory();
            connection </span>=<span style="color: rgba(0, 0, 0, 1)"> factory.createConnection();
            connection.start();
            
            session </span>= connection.createSession(<span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">, Session.AUTO_ACKNOWLEDGE);
            Destination destination </span>=<span style="color: rgba(0, 0, 0, 1)"> session.createQueue(queueName);
            producer </span>=<span style="color: rgba(0, 0, 0, 1)"> session.createProducer(destination);
            
            TextMessage message </span>=<span style="color: rgba(0, 0, 0, 1)"> session.createTextMessage(messageContent);
            producer.send(message);
            LOG.info(</span>"Message sent to queue: {}"<span style="color: rgba(0, 0, 0, 1)">, queueName);
            
        } </span><span style="color: rgba(0, 0, 255, 1)">catch</span><span style="color: rgba(0, 0, 0, 1)"> (JMSException e) {
            LOG.error(</span>"Failed to send message"<span style="color: rgba(0, 0, 0, 1)">, e);
        } </span><span style="color: rgba(0, 0, 255, 1)">finally</span><span style="color: rgba(0, 0, 0, 1)"> {
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 关闭资源</span>
<span style="color: rgba(0, 0, 0, 1)">            closeQuietly(producer);
            closeQuietly(session);
            closeQuietly(connection);
        }
    }
    
    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> closeQuietly(AutoCloseable closeable) {
        </span><span style="color: rgba(0, 0, 255, 1)">if</span> (closeable != <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">) {
            </span><span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)"> {
                closeable.close();
            } </span><span style="color: rgba(0, 0, 255, 1)">catch</span><span style="color: rgba(0, 0, 0, 1)"> (Exception e) {
                LOG.warn(</span>"Error closing resource"<span style="color: rgba(0, 0, 0, 1)">, e);
            }
        }
    }
}</span></pre>
</div>
<h4 class="header-OdWb_u auto-hide-last-sibling-br">5. 实现 JMS 消息消费者（Sling Model）</h4>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">import</span> javax.jms.*<span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.apache.sling.api.SlingHttpServletRequest;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.apache.sling.models.annotations.Model;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.osgi.service.component.annotations.Reference;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.slf4j.Logger;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.slf4j.LoggerFactory;

@Model(adaptables </span>= SlingHttpServletRequest.<span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> JmsMessageConsumer {
    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">final</span> Logger LOG = LoggerFactory.getLogger(JmsMessageConsumer.<span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)">);
    
    @Reference
    </span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> ActiveMQService activeMQService;

    </span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> String receiveMessage(String queueName) {
        Connection connection </span>= <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">;
        Session session </span>= <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">;
        MessageConsumer consumer </span>= <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">;
        
        </span><span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)"> {
            ConnectionFactory factory </span>=<span style="color: rgba(0, 0, 0, 1)"> activeMQService.getConnectionFactory();
            connection </span>=<span style="color: rgba(0, 0, 0, 1)"> factory.createConnection();
            connection.start();
            
            session </span>= connection.createSession(<span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">, Session.AUTO_ACKNOWLEDGE);
            Destination destination </span>=<span style="color: rgba(0, 0, 0, 1)"> session.createQueue(queueName);
            consumer </span>=<span style="color: rgba(0, 0, 0, 1)"> session.createConsumer(destination);
            
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 同步接收消息（超时时间 5 秒）</span>
            Message message = consumer.receive(5000<span style="color: rgba(0, 0, 0, 1)">);
            </span><span style="color: rgba(0, 0, 255, 1)">if</span> (message <span style="color: rgba(0, 0, 255, 1)">instanceof</span><span style="color: rgba(0, 0, 0, 1)"> TextMessage) {
                </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> ((TextMessage) message).getText();
            }
        } </span><span style="color: rgba(0, 0, 255, 1)">catch</span><span style="color: rgba(0, 0, 0, 1)"> (JMSException e) {
            LOG.error(</span>"Failed to receive message"<span style="color: rgba(0, 0, 0, 1)">, e);
        } </span><span style="color: rgba(0, 0, 255, 1)">finally</span><span style="color: rgba(0, 0, 0, 1)"> {
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 关闭资源</span>
<span style="color: rgba(0, 0, 0, 1)">            closeQuietly(consumer);
            closeQuietly(session);
            closeQuietly(connection);
        }
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">;
    }
    
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 省略 closeQuietly 方法（同上）</span>
}</pre>
</div>
<h3 class="header-OdWb_u auto-hide-last-sibling-br">四、AEM 组件集成示例</h3>
<h4 class="header-OdWb_u auto-hide-last-sibling-br">1. 创建 Sling Model 调用生产者</h4>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.apache.sling.api.SlingHttpServletRequest;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.apache.sling.models.annotations.Model;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.osgi.service.component.annotations.Reference;

@Model(adaptables </span>= SlingHttpServletRequest.<span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> AemMessageSender {
    @Reference
    </span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> JmsMessageProducer messageProducer;

    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> sendAemContent(String content) {
        messageProducer.sendMessage(</span>"aem.content.queue"<span style="color: rgba(0, 0, 0, 1)">, content);
    }
}</span></pre>
</div>
<h4 class="header-OdWb_u auto-hide-last-sibling-br">2. 创建 HTL 模板触发消息发送</h4>
<div class="cnblogs_code">
<pre>&lt;sly data-sly-use.model="com.example.models.AemMessageSender"&gt;
    &lt;button onclick="sendContent()"&gt;Send Content to ActiveMQ&lt;/button&gt;
    &lt;script&gt;<span style="color: rgba(0, 0, 0, 1)">
        function sendContent() {
            fetch(</span>'/bin/sendMessage', { method: 'POST'<span style="color: rgba(0, 0, 0, 1)"> })
                .then(response </span>=&gt;<span style="color: rgba(0, 0, 0, 1)"> response.text())
                .then(data </span>=&gt;<span style="color: rgba(0, 0, 0, 1)"> console.log(data));
        }
    </span>&lt;/script&gt;
&lt;/sly&gt;</pre>
</div>
<h4 class="header-OdWb_u auto-hide-last-sibling-br">3. 创建 Sling Servlet 处理消息发送请求</h4>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.apache.sling.api.SlingHttpServletRequest;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.apache.sling.api.SlingHttpServletResponse;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.apache.sling.api.servlets.SlingAllMethodsServlet;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.osgi.service.component.annotations.Component;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.osgi.service.component.annotations.Reference;

</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> javax.servlet.Servlet;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> java.io.IOException;

@Component(service </span>= Servlet.<span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)">,
    property </span>=<span style="color: rgba(0, 0, 0, 1)"> {
        </span>"sling.servlet.paths=/bin/sendMessage"<span style="color: rgba(0, 0, 0, 1)">,
        </span>"sling.servlet.methods=POST"<span style="color: rgba(0, 0, 0, 1)">
    }
)
</span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span> MessageSendServlet <span style="color: rgba(0, 0, 255, 1)">extends</span><span style="color: rgba(0, 0, 0, 1)"> SlingAllMethodsServlet {
    @Reference
    </span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> AemMessageSender messageSender;

    @Override
    </span><span style="color: rgba(0, 0, 255, 1)">protected</span> <span style="color: rgba(0, 0, 255, 1)">void</span> doPost(SlingHttpServletRequest request, SlingHttpServletResponse response) <span style="color: rgba(0, 0, 255, 1)">throws</span><span style="color: rgba(0, 0, 0, 1)"> IOException {
        String content </span>= request.getParameter("content"<span style="color: rgba(0, 0, 0, 1)">);
        messageSender.sendAemContent(content);
        response.getWriter().write(</span>"Message sent successfully"<span style="color: rgba(0, 0, 0, 1)">);
    }
}</span></pre>
</div>
<h3 class="header-OdWb_u auto-hide-last-sibling-br">五、高级配置（可选）</h3>
<h4 class="header-OdWb_u auto-hide-last-sibling-br">1. 配置 JMS 持久化</h4>
<div class="auto-hide-last-sibling-br paragraph-Oc488D paragraph-element br-paragraph-space">修改&nbsp;<code>activemq.xml</code>&nbsp;启用持久化：</div>
<div class="auto-hide-last-sibling-br paragraph-Oc488D paragraph-element br-paragraph-space">
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">persistenceAdapter</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
    <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">kahaDB </span><span style="color: rgba(255, 0, 0, 1)">directory</span><span style="color: rgba(0, 0, 255, 1)">="${activemq.data}/kahadb"</span><span style="color: rgba(0, 0, 255, 1)">/&gt;</span>
<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">persistenceAdapter</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span></pre>
</div>
<h4 class="header-OdWb_u auto-hide-last-sibling-br">2. 配置消息监听器（异步消费）</h4>
<div class="cnblogs_code">
<pre>@Component(service = MessageListener.<span style="color: rgba(0, 0, 255, 1)">class</span>, immediate = <span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span> AemMessageListener <span style="color: rgba(0, 0, 255, 1)">implements</span><span style="color: rgba(0, 0, 0, 1)"> MessageListener {
    @Activate
    </span><span style="color: rgba(0, 0, 255, 1)">protected</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> activate() {
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 初始化 JMS 连接并注册监听器
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 代码略（类似消费者实现）</span>
<span style="color: rgba(0, 0, 0, 1)">    }

    @Override
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> onMessage(Message message) {
        </span><span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)"> {
            </span><span style="color: rgba(0, 0, 255, 1)">if</span> (message <span style="color: rgba(0, 0, 255, 1)">instanceof</span><span style="color: rgba(0, 0, 0, 1)"> TextMessage) {
                String content </span>=<span style="color: rgba(0, 0, 0, 1)"> ((TextMessage) message).getText();
                </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 处理接收到的消息（如更新 AEM 内容）</span>
<span style="color: rgba(0, 0, 0, 1)">                processAemContent(content);
            }
        } </span><span style="color: rgba(0, 0, 255, 1)">catch</span><span style="color: rgba(0, 0, 0, 1)"> (JMSException e) {
            LOG.error(</span>"Error processing message"<span style="color: rgba(0, 0, 0, 1)">, e);
        }
    }

    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> processAemContent(String content) {
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 实现 AEM 内容处理逻辑</span>
<span style="color: rgba(0, 0, 0, 1)">    }
}</span></pre>
</div>
<h3 class="header-OdWb_u auto-hide-last-sibling-br">六、验证集成效果</h3>
<ol class="auto-hide-last-sibling-br">
<li>
<div class="auto-hide-last-sibling-br paragraph-Oc488D paragraph-element br-paragraph-space">启动 ActiveMQ：</div>
</li>
</ol>
<div class="cnblogs_code">
<pre>bin/activemq start</pre>
</div>
<ol class="auto-hide-last-sibling-br">
<li>
<div class="auto-hide-last-sibling-br paragraph-Oc488D paragraph-element br-paragraph-space">部署 AEM 包：将开发的 OSGi 组件打包部署到 AEM。</div>
</li>
<li>
<div class="auto-hide-last-sibling-br paragraph-Oc488D paragraph-element br-paragraph-space">测试消息发送：</div>
<ul class="auto-hide-last-sibling-br">
<li>通过 AEM 页面触发消息发送</li>
<li>查看 ActiveMQ 控制台（<a class="link-U03S2y" href="http://localhost:8161/admin/queues.jsp" target="_blank" rel="noopener nofollow">http://localhost:8161/admin/queues.jsp</a>）确认消息入队</li>
</ul>
</li>
<li>
<div class="auto-hide-last-sibling-br paragraph-Oc488D paragraph-element br-paragraph-space">测试消息接收：</div>
<ul class="auto-hide-last-sibling-br">
<li>实现消息消费者服务</li>
<li>验证消息是否正确处理</li>
</ul>
</li>
</ol>
<h3 class="header-OdWb_u auto-hide-last-sibling-br">七、常见问题与解决方案</h3>
<ol class="auto-hide-last-sibling-br">
<li>
<div class="auto-hide-last-sibling-br paragraph-Oc488D paragraph-element br-paragraph-space">连接失败</div>
<ul class="auto-hide-last-sibling-br">
<li>检查 ActiveMQ 地址和端口</li>
<li>确认防火墙未阻止通信（默认 61616 端口）</li>
</ul>
</li>
<li>
<div class="auto-hide-last-sibling-br paragraph-Oc488D paragraph-element br-paragraph-space">消息丢失</div>
<ul class="auto-hide-last-sibling-br">
<li>确保使用&nbsp;<code>DeliveryMode.PERSISTENT</code></li>
<li>检查 ActiveMQ 持久化配置</li>
</ul>
</li>
<li>
<div class="auto-hide-last-sibling-br paragraph-Oc488D paragraph-element br-paragraph-space">AEM 组件无法访问 JMS 服务</div>
<ul class="auto-hide-last-sibling-br">
<li>检查 OSGi 配置是否正确</li>
<li>确认依赖包已正确导入</li>
</ul>
</li>
</ol>
<p>&nbsp;</p>
<div class="auto-hide-last-sibling-br paragraph-Oc488D paragraph-element br-paragraph-space">通过以上步骤，你可以实现 AEM 与 ActiveMQ 的完整集成，实现系统间的异步通信和解耦。根据实际需求，你还可以进一步优化配置，如使用 JNDI 管理连接工厂、配置集群模式提高可用性等。</div>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
</div>
</div>
</div>
</div>
<div class="auto-hide-last-sibling-br paragraph-Oc488D paragraph-element br-paragraph-space">&nbsp;</div>
<div class="auto-hide-last-sibling-br paragraph-Oc488D paragraph-element br-paragraph-space">&nbsp;</div>
<div class="auto-hide-last-sibling-br paragraph-Oc488D paragraph-element br-paragraph-space">&nbsp;</div>
<div class="auto-hide-last-sibling-br paragraph-Oc488D paragraph-element br-paragraph-space">&nbsp;</div>
<div class="auto-hide-last-sibling-br paragraph-Oc488D paragraph-element br-paragraph-space">&nbsp;</div>
<div class="auto-hide-last-sibling-br paragraph-Oc488D paragraph-element br-paragraph-space">&nbsp;</div>
<div class="auto-hide-last-sibling-br paragraph-Oc488D paragraph-element br-paragraph-space">&nbsp;</div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-06-20 11:46">2025-06-20 11:46</span>&nbsp;
<a href="https://www.cnblogs.com/lymblog">名曰大神</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18938072);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18938072', targetLink: 'https://www.cnblogs.com/lymblog/p/18938072', title: 'AEM 与 ActiveMQ 集成方案详解' })">举报</a>
</div>
        