
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/noear/p/19059587" title="发布于 2025-08-26 19:15">
    <span role="heading" aria-level="2">老码农教你 Solon Web Context-Path 的两种配置方式</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        context-path是web应用的路径前缀，可隔离应用。Solon支持两种配置：普通配置（/test-service/）允许原路径访问，强制配置（!/test-service/）则禁止原路径访问。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>context-path 概念早期可能是出现在 servelt 容器。比如 tomcat 在部署应用（或模块）时，每个应用（或模块）会配置一个 context-path，起到隔离和避免路径冲突的效果。</p>
<p>对 solon 而言，相当于一个 webapp 的“路径前缀”（与友商的配置略有不同）。</p>
<h3 id="1所谓路径前缀">1、所谓路径前缀</h3>
<p>比如果有应用地址（未配置 context-path 时）：<code>http://xxx/test/get</code>。</p>
<p>当配置了context-path <code>/demo/</code> 后就需要用 <code>http://xxx/demo/test/get</code> 发起请求（在域名之后，多了段前缀）。</p>
<h3 id="2关于-context-path-的两种配置基于-pathnew-的变化实现">2、关于 context-path 的两种配置（基于 pathNew 的变化实现）</h3>
<table>
<thead>
<tr>
<th>配置</th>
<th>差别</th>
<th>差别说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>server.contextPath: "/test-service/"</code></td>
<td></td>
<td>原路径仍能访问（v1.11.2 后支持）</td>
</tr>
<tr>
<td><code>server.contextPath: "!/test-service/"</code></td>
<td><code>!</code> 开头</td>
<td>强制，原路径不可访问（v2.6.3 后支持）</td>
</tr>
</tbody>
</table>
<p>当有 <code>context-path</code> 配置时</p>
<table>
<thead>
<tr>
<th>接口</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ctx.path()</code></td>
<td>是原始请求路径</td>
</tr>
<tr>
<td><code>ctx.pathNew()</code></td>
<td>是去掉 <code>context-path</code> 后的请求路径</td>
</tr>
</tbody>
</table>
<h3 id="3两种配置效果示例说明">3、两种配置效果示例说明</h3>
<p>比如有原始地址：<code>http://xxx/test</code>，使用不同配置的效果：</p>
<table>
<thead>
<tr>
<th>请求地址</th>
<th><code>"/test-service/"</code></th>
<th><code>"!/test-service/"</code></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>http://xxx/test</code></td>
<td>（原路径）可访问</td>
<td>（原路径）404 错误</td>
</tr>
<tr>
<td><code>http://xxx/test-service/test</code></td>
<td>可访问</td>
<td>可访问</td>
</tr>
</tbody>
</table>
<p>提醒：一般情况使用，添加 <code>!</code> （表示强制）才是大多数人的预期效果。</p>
<h3 id="4为什么要有两种配置">4、为什么要有两种配置？</h3>
<p>在集群环境（比如微服务）做内部的 http rpc （或者 http call）请求时。如果 server 加了 context-path（或者变更），client 就必须要修改请求路径。没办法作到一套代码到处可用。</p>
<p>所以有了 “原路径仍能访问” 的配置策略。可以实现外部如何变化，内部请求都可不变！</p>
<h3 id="5为什么默认不是强制的策略">5、为什么默认不是“强制”的策略？</h3>
<p>在生产部署时，当遇见有 context-path 需求的场景。一般会有 nginx 或 tomcat 等，本身就有 path 前缀配置，相当于已经起到了过滤的效果，应用只需要支持有前缀的需求。</p>
<p>所以默认不采用“强制”方式，可以同时兼容两种应用需求。（但有些场景下，确实需要强制）</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-08-26 19:15">2025-08-26 19:15</span>&nbsp;
<a href="https://www.cnblogs.com/noear">带刺的坐椅</a>&nbsp;
阅读(<span id="post_view_count">13</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19059587);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19059587', targetLink: 'https://www.cnblogs.com/noear/p/19059587', title: '老码农教你 Solon Web Context-Path 的两种配置方式' })">举报</a>
</div>
        