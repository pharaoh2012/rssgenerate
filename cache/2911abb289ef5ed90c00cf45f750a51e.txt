
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/xiezhr/p/19060223" title="发布于 2025-08-27 08:20">
    <span role="heading" aria-level="2">Git提交错了，别慌！还有后悔药</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>大家好，我是晓凡。</p>
<p>引子<br>
写代码就像炒菜，锅铲一抖盐放多了还能加水，Git 提交错了也能“回锅”。</p>
<p>但回锅方法不对，可能把整锅菜都糊掉。</p>
<p>今天咱们就掰开揉碎聊聊：到底有哪些“提交错了”的场景？</p>
<p>每种场景到底该怎么优雅地撤回？全部给你配好命令、画好流程，照着抄就行。</p>
<h3 id="一先分清锅在哪儿">一、先分清“锅”在哪儿</h3>
<blockquote>
<p>首先我们得分清“锅”在哪儿，本地还是远程？</p>
</blockquote>
<p>Git 把仓库分成三大块：</p>
<ol>
<li>工作区（Working Directory）：你电脑上看得见的文件夹。</li>
<li>暂存区（Index / Stage）：git add 之后放东西的地方。</li>
<li>本地仓库（Local Repo）：git commit 之后放东西的地方。</li>
<li>远程仓库（Remote Repo）：GitHub、GitLab、gitee 等远端服务器。</li>
</ol>
<p>搞错一次提交，先问自己一句：<br>
“锅”现在停留在哪一层？</p>
<ul>
<li>只在工作区？</li>
<li>只在暂存区？</li>
<li>已经 commit 但还没 push？</li>
<li>已经 push？</li>
<li>甚至 push 完别人已经拉下来继续开发了？</li>
</ul>
<p>不同位置，撤回姿势完全不同。下面分场景，逐个拆招。</p>
<h3 id="二场景-1">二、场景 1</h3>
<blockquote>
<p>add 错了，还没 commit</p>
</blockquote>
<p><strong>症状</strong><br>
git add 了不该 add 的文件，比如把 node_modules 也扔进去了，但还没 commit。</p>
<p><strong>解决</strong><br>
把东西从暂存区踢回工作区即可：</p>
<pre><code class="language-bash"># 全部撤回
git reset HEAD .

# 只撤回某个文件
git reset HEAD package-lock.json
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2381533/202508/2381533-20250827081854502-2086845188.png" alt="add 错了，还没 commit " loading="lazy"></p>
<h3 id="三场景-2">三、场景 2</h3>
<blockquote>
<p>commit 写错信息，或忘了加文件</p>
</blockquote>
<p>A. 只想改 commit message</p>
<pre><code class="language-bash">git commit --amend -m "新的提交说明"
</code></pre>
<p>B. 漏了文件</p>
<pre><code class="language-bash">git add forgotten.java
git commit --amend --no-edit   # 不改动 message
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2381533/202508/2381533-20250827081854516-1733425471.png" alt="commit 写错信息，或忘了加文件" loading="lazy"></p>
<p>注意：amend 会生成新的 commit-id，如果已经 push 过，就属于“改写历史”，需要强制推送（见后文）。</p>
<h3 id="四场景-3">四、场景 3</h3>
<blockquote>
<p>commit 错了，但还没 push</p>
</blockquote>
<ol>
<li>最后一次 commit 想直接作废</li>
</ol>
<pre><code class="language-bash"># 撤回 commit，改动保留在工作区
git reset --soft HEAD~1
# 或者
git reset --mixed HEAD~1   # 默认模式，改动回到工作区
</code></pre>
<ol start="2">
<li>连改动都不要，彻底删除</li>
</ol>
<pre><code class="language-bash">git reset --hard HEAD~1
</code></pre>
<ol start="3">
<li>倒数第 N 次提交都错了</li>
</ol>
<pre><code class="language-bash"># 回退 3 个提交
git reset --hard HEAD~3
</code></pre>
<p>流程图</p>
<p><img src="https://img2024.cnblogs.com/blog/2381533/202508/2381533-20250827081854541-292465652.png" alt="ommit 错了，但还没 push" loading="lazy"></p>
<p>注意：--hard 会丢改动，先确认没重要代码。</p>
<h3 id="五场景-4">五、场景 4</h3>
<blockquote>
<p>已经 push，但没人基于它开发</p>
</blockquote>
<p>思路：先本地回退，再强制推送。</p>
<p>步骤<br>
1）本地回退</p>
<pre><code class="language-bash">git reset --hard &lt;回退到的commit-id&gt;
</code></pre>
<p>2）强制覆盖远端</p>
<pre><code class="language-bash">git push --force-with-lease origin main
</code></pre>
<p>为什么用 <code>--force-with-lease</code> 而不是 <code>--force</code>？<br>
前者会检查远端有没有人比你先 push，避免把同事的 commit 冲掉，更安全。</p>
<p><img src="https://img2024.cnblogs.com/blog/2381533/202508/2381533-20250827081854494-1397136528.png" alt="已经 push，但没人基于它开发" loading="lazy"></p>
<h3 id="六场景-5">六、场景 5</h3>
<blockquote>
<p>已经 push，且同事已拉取并继续开发</p>
</blockquote>
<p>此时“改写历史”会让同事陷入混乱，禁止 reset + force push。<br>
正确姿势：用“反转提交”(revert)。</p>
<p>示例</p>
<pre><code class="language-bash"># 生成一个新的 commit，把错误提交的内容“反着做一遍”
git revert &lt;错误commit-id&gt;
git push origin main
</code></pre>
<p>如果一次 revert 不够，可以连续 revert：</p>
<pre><code class="language-bash">git revert OLDEST_COMMIT^..NEWEST_COMMIT
</code></pre>
<p>流程图<br>
main: A-B-C-D-E(错误)<br>
revert 后：A-B-C-D-E-F(撤销E)</p>
<p><img src="https://img2024.cnblogs.com/blog/2381533/202508/2381533-20250827081854509-913194376.png" alt="已经 push，且同事已拉取并继续开发" loading="lazy"></p>
<p>优点：历史干净、无冲突风险；缺点：会多一个 commit，强迫症可能不爽。</p>
<h3 id="七场景-6">七、场景 6</h3>
<blockquote>
<p>merge 错了，还没 push</p>
</blockquote>
<p>A. 刚 merge，发现合错分支</p>
<pre><code class="language-bash">git reset --hard HEAD~1   # 直接回到 merge 前
</code></pre>
<p>B. merge 了很久，已产生大量后续 commit<br>
思路：用 <code>git revert -m</code> 反转 merge commit。</p>
<pre><code class="language-bash">git revert -m 1 &lt;merge-commit-id&gt;
</code></pre>
<p>-m 1 表示保留 merge 的第一个父分支（通常是 main）。</p>
<p><img src="https://img2024.cnblogs.com/blog/2381533/202508/2381533-20250827081854468-1751615089.png" alt="merge 错了，还没 push" loading="lazy"></p>
<h3 id="八场景-7">八、场景 7</h3>
<blockquote>
<p>rebase 错了，想反悔</p>
</blockquote>
<p>rebase 过程中冲突太多，想直接放弃：</p>
<pre><code class="language-bash">git rebase --abort
</code></pre>
<p>已经 rebase 完但后悔了：</p>
<pre><code class="language-bash"># 查看 reflog 找到 rebase 前的 HEAD
git reflog
git reset --hard HEAD@{2}
</code></pre>
<h3 id="九场景-8">九、场景 8</h3>
<blockquote>
<p>cherry-pick 错了</p>
</blockquote>
<pre><code class="language-bash"># 撤销刚 cherry-pick 的 commit
git cherry-pick --abort
</code></pre>
<p>如果已经 commit，可用 revert 回滚单个 cherry-pick 的 commit。</p>
<p><img src="https://img2024.cnblogs.com/blog/2381533/202508/2381533-20250827081854480-1264618755.png" alt="cherry-pick 错了  " loading="lazy"></p>
<h3 id="十万能后悔药reflog">十、万能后悔药：reflog</h3>
<p>Git 在本地会记录每一次 HEAD 的移动。<br>
不管 reset、rebase、merge 玩得多花，只要没 gc，都能找到“案发前”的位置。</p>
<pre><code class="language-bash">git reflog
# 找到想回去的 id
git reset --hard 9f3e2a1
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2381533/202508/2381533-20250827081854455-361349279.png" alt="image" loading="lazy"></p>
<h3 id="十一一张总览流程图">十一、一张总览流程图</h3>
<p><img src="https://img2024.cnblogs.com/blog/2381533/202508/2381533-20250827081854495-184154738.png" alt="记住一图就行" loading="lazy"></p>
<h3 id="十二踩坑小贴士">十二、踩坑小贴士</h3>
<ol>
<li>任何 reset --hard 前，先 stash 或备份分支：<code>git branch backup</code>。</li>
<li>多人协作时，默认“不能强推”，可在服务端开启保护分支。</li>
<li>强制推送后，通知团队所有人执行 <code>git pull --rebase</code> 同步。</li>
<li>重要操作前，用 <code>git log --oneline --graph</code> 看一眼历史，心中有数。</li>
<li>养成 commit 粒度细、消息清晰的习惯，能减少 80% 回滚需求。</li>
</ol>
<h3 id="十三记住这一句话">十三、记住这一句话</h3>
<p>add 错了 reset</p>
<p>commit 错了 amend/reset</p>
<p>push 错了先问队友，没人用就 force，有人用就 revert。</p>
<p>实在搞不清，reflog 带你穿越回过去。</p>
<p>祝你再也不用“删库跑路”，回滚也能优雅如风。</p>
<p>我是晓凡，再小的帆也能远航</p>
<p>本期内容就到这儿</p>
<p>我们下期再见ヾ(•ω•`)o (●'◡'●)</p>

</div>
<div id="MySignature" role="contentinfo">
    <p>本文来自博客园，作者：<a href="https://www.cnblogs.com/xiezhr/" target="_blank">程序员晓凡</a>，转载请注明原文链接：<a href="https://www.cnblogs.com/xiezhr/p/19060223" target="_blank">https://www.cnblogs.com/xiezhr/p/19060223</a></p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-08-27 08:20">2025-08-27 08:20</span>&nbsp;
<a href="https://www.cnblogs.com/xiezhr">程序员晓凡</a>&nbsp;
阅读(<span id="post_view_count">589</span>)&nbsp;
评论(<span id="post_comment_count">4</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19060223);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19060223', targetLink: 'https://www.cnblogs.com/xiezhr/p/19060223', title: 'Git提交错了，别慌！还有后悔药' })">举报</a>
</div>
        