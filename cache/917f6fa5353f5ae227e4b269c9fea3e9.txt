<!----> <meta itemprop="headline" content="用了这些 Vite 配置技巧，同事都以为我开挂了！(5000 字干货，建议收藏)"> <meta itemprop="keywords" content="前端,Vue.js"> <meta itemprop="datePublished" content="2024-11-26T02:13:54.000Z"> <meta itemprop="image" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-128.png~tplv-t2oaga2asx-image.image"> <div itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><meta itemprop="name" content="十五丶"> <meta itemprop="url" content="https://juejin.cn/user/343495027727229"></div> <div itemprop="publisher" itemscope="itemscope" itemtype="http://schema.org/Organization"><meta itemprop="name" content="掘金"> <div itemprop="logo" itemscope="itemscope" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-white-180.png~tplv-t2oaga2asx-image.image"> <meta itemprop="width" content="180"> <meta itemprop="height" content="180"></div></div> <h1 class="article-title" data-v-7cdd11fb="">
            用了这些 Vite 配置技巧，同事都以为我开挂了！(5000 字干货，建议收藏)
            <!----> <!----></h1> <div class="author-info-block block-hidden" data-v-7cdd11fb=""><div class="author-info-box" data-v-7cdd11fb=""><div class="author-name" data-v-7cdd11fb=""><a href="/user/343495027727229/posts" target="_blank" rel="" class="jj-link username username ellipsis" data-v-65b50b51="" data-v-1800aadb="" data-v-7cdd11fb=""><span class="name" style="max-width:160px;" data-v-65b50b51="" data-v-1800aadb="">
    十五丶
  </span> <!----> <!----> <!----> </a></div> <div class="meta-box" data-v-7cdd11fb=""><time datetime="2024-11-26T02:13:54.000Z" title="Tue Nov 26 2024 02:13:54 GMT+0000 (Coordinated Universal Time)" class="time" data-v-7cdd11fb="">
                    2024-11-26
                  </time> <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" class="read-icon" data-v-7cdd11fb=""><path d="M7.90078 2.80078C4.49278 2.80078 1.74745 6.11672 0.800781 7.77469C1.74745 9.58339 4.49278 13.2008 7.90078 13.2008C11.3088 13.2008 14.0541 9.58339 15.0008 7.77469C14.0541 6.11672 11.3088 2.80078 7.90078 2.80078Z" stroke="currentColor" data-v-7cdd11fb=""></path><circle cx="7.89922" cy="8.00078" r="2.2" stroke="currentColor" data-v-7cdd11fb=""></circle></svg> <span class="views-count" data-v-7cdd11fb="">
                    9,248
                  </span> <span class="read-time" data-v-7cdd11fb=""><svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" data-v-7cdd11fb=""><rect width="16" height="16" fill="none" data-v-7cdd11fb=""></rect><circle cx="8" cy="8" r="5.65625" stroke="#8A919F" data-v-7cdd11fb=""></circle><path d="M7.69141 5.18652V8.30924H10.8141" stroke="#8A919F" stroke-linecap="round" stroke-linejoin="round" data-v-7cdd11fb=""></path></svg>
                    阅读15分钟
                  </span> <!----></div></div> <div style="flex:1;" data-v-7cdd11fb=""></div> <!----> <!----></div> <!----> <!----> <!----> <div id="article-root" itemprop="articleBody" class="main" data-v-7cdd11fb=""><div class="article-viewer markdown-body result"><h2 data-id="heading-0">前言</h2>
<p>本篇文章主要讲解如何配置 Vite</p>
<blockquote>
<p>长文警告！本篇文章约5千字，满满都是干货，看完你应该会有所收获</p>
<p>本文也是<a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2FQFifteen%2FBlog%3Ftab%3Dreadme-ov-file%23%25E9%2580%259A%25E4%25BF%2597%25E6%2598%2593%25E6%2587%2582%25E7%259A%2584%25E4%25B8%25AD%25E5%2590%258E%25E5%258F%25B0%25E7%25B3%25BB%25E7%25BB%259F%25E5%25BB%25BA%25E8%25AE%25BE%25E6%258C%2587%25E5%258D%2597%25E4%25B8%2593%25E6%25A0%258F" target="_blank" title="https://github.com/QFifteen/Blog?tab=readme-ov-file#%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82%E7%9A%84%E4%B8%AD%E5%90%8E%E5%8F%B0%E7%B3%BB%E7%BB%9F%E5%BB%BA%E8%AE%BE%E6%8C%87%E5%8D%97%E4%B8%93%E6%A0%8F" ref="nofollow noopener noreferrer">《通俗易懂的中后台系统建设指南》</a>系列的第三篇文章，该系列旨在告诉你如何来构建一个优秀的中后台管理系统</p>
</blockquote>
<h2 data-id="heading-1">写在前面</h2>
<p>如<a href="https://link.juejin.cn?target=https%3A%2F%2Fcn.vitejs.dev%2Fguide%2F" target="_blank" title="https://cn.vitejs.dev/guide/" ref="nofollow noopener noreferrer">官网</a>所说，Vite 是一种新型前端构建工具，能够显著提升前端开发体验，它主要由两部分组成：</p>
<ul>
<li>一个开发服务器，它基于&nbsp;<a href="https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FGuide%2FModules" target="_blank" title="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules" ref="nofollow noopener noreferrer">原生 ES 模块</a>&nbsp;提供了&nbsp;<a href="https://link.juejin.cn?target=https%3A%2F%2Fcn.vitejs.dev%2Fguide%2Ffeatures.html" target="_blank" title="https://cn.vitejs.dev/guide/features.html" ref="nofollow noopener noreferrer">丰富的内建功能</a>，如速度快到惊人的&nbsp;<a href="https://link.juejin.cn?target=https%3A%2F%2Fcn.vitejs.dev%2Fguide%2Ffeatures.html%23hot-module-replacement" target="_blank" title="https://cn.vitejs.dev/guide/features.html#hot-module-replacement" ref="nofollow noopener noreferrer">模块热替换（HMR）</a>。</li>
<li>一套构建指令，它使用&nbsp;<a href="https://link.juejin.cn?target=https%3A%2F%2Frollupjs.org%2F" target="_blank" title="https://rollupjs.org/" ref="nofollow noopener noreferrer">Rollup</a>&nbsp;打包你的代码，并且它是预配置的，可输出用于生产环境的高度优化过的静态资源。</li>
</ul>
<p>首先第一步，推荐先通篇阅读一遍 Vite 的文档：<a href="https://link.juejin.cn?target=https%3A%2F%2Fcn.vitejs.dev%2F" target="_blank" title="https://cn.vitejs.dev/" ref="nofollow noopener noreferrer">传送门</a></p>
<p>主要了解 Vite 在项目中扮演的角色，以及了解 Vite 能够帮你做什么事</p>
<p>如果你是跟着本专栏来拉起的项目，那么你的项目根目录下也会拥有一个 <code>vite.config.ts</code> 文件，这是 Vite 的配置文件，下面的配置内容都离不开这个文件</p>
<h2 data-id="heading-2">vite 配置别名</h2>
<p><a href="https://link.juejin.cn?target=https%3A%2F%2Fcn.vitejs.dev%2Fconfig%2Fshared-options%23resolve-alias" target="_blank" title="https://cn.vitejs.dev/config/shared-options#resolve-alias" ref="nofollow noopener noreferrer">官方介绍</a></p>
<p>首先安装为 Node.js 提供类型定义的包，也是解决 "<strong>找不到模块 path 或其相对应的类型声明</strong>" 问题</p>
<pre><code class="hljs language-bash" lang="bash">pnpm add @types/node --save-dev
</code></pre>
<p>在 <code>vite.config.ts</code> 中配置 <code>resolve.alias</code> ，使用 <code>@</code> 符号代表 <code>src</code></p>
<pre><code class="hljs language-ts" lang="ts"><span class="hljs-keyword">import</span> { defineConfig } <span class="hljs-keyword">from</span> <span class="hljs-string">"vite"</span>;
<span class="hljs-keyword">import</span> vue <span class="hljs-keyword">from</span> <span class="hljs-string">"@vitejs/plugin-vue"</span>;
<span class="hljs-keyword">import</span> { resolve } <span class="hljs-keyword">from</span> <span class="hljs-string">"path"</span>;

<span class="hljs-comment">// https://vitejs.dev/config/</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>({
  <span class="hljs-attr">plugins</span>: [<span class="hljs-title function_">vue</span>()],
  <span class="hljs-attr">resolve</span>: {
    <span class="hljs-attr">alias</span>: {
      <span class="hljs-string">"@"</span>: <span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">"src"</span>),
    },
  },
});
</code></pre>
<p>也可以是这样的：</p>
<pre><code class="hljs language-ts" lang="ts"><span class="hljs-keyword">import</span> { defineConfig } <span class="hljs-keyword">from</span> <span class="hljs-string">'vite'</span>
<span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> { <span class="hljs-title class_">UserConfig</span>, <span class="hljs-title class_">ConfigEnv</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">"vite"</span>;
<span class="hljs-keyword">import</span> vue <span class="hljs-keyword">from</span> <span class="hljs-string">"@vitejs/plugin-vue"</span>;
<span class="hljs-keyword">import</span> { resolve } <span class="hljs-keyword">from</span> <span class="hljs-string">"path"</span>;

<span class="hljs-comment">// https://vitejs.dev/config/</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> ({ mode }: <span class="hljs-title class_">ConfigEnv</span>): <span class="hljs-function"><span class="hljs-params">UserConfig</span> =&gt;</span> {

  <span class="hljs-keyword">const</span> <span class="hljs-attr">root</span>: <span class="hljs-built_in">string</span> = process.<span class="hljs-title function_">cwd</span>(); <span class="hljs-comment">//获取当前工作目录的路径</span>
  <span class="hljs-keyword">const</span> pathResolve = (<span class="hljs-attr">dir</span>: <span class="hljs-built_in">string</span>): <span class="hljs-function"><span class="hljs-params">string</span> =&gt;</span> {
    <span class="hljs-keyword">return</span> <span class="hljs-title function_">resolve</span>(root, <span class="hljs-string">"."</span>, dir);
  };
  
  <span class="hljs-keyword">return</span> {
    <span class="hljs-attr">plugins</span>: [<span class="hljs-title function_">vue</span>()],
    <span class="hljs-attr">resolve</span>: {
      <span class="hljs-attr">alias</span>: {
        <span class="hljs-string">"@"</span>: <span class="hljs-title function_">pathResolve</span>(<span class="hljs-string">"src"</span>),
      },
    },
  };
};
</code></pre>
<p>如果使用了 TypeScript 的话，需要在 <code>tsconfig.json</code> 中配置：</p>
<pre><code class="hljs language-json" lang="json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">"compilerOptions"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">"baseUrl"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"."</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">//使用相对路径，当前根目录</span>
    <span class="hljs-attr">"paths"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
      <span class="hljs-attr">"@/*"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">"src/*"</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>
    <span class="hljs-punctuation">}</span>
  <span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<h2 data-id="heading-3">省略拓展名列表</h2>
<blockquote>
<p>不建议忽略自定义导入类型的扩展名 <code>.vue</code> ，会影响 IDE 和类型支持</p>
</blockquote>
<pre><code class="hljs language-ts" lang="ts"><span class="hljs-keyword">import</span> { defineConfig } <span class="hljs-keyword">from</span> <span class="hljs-string">"vite"</span>;
<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>({
  <span class="hljs-attr">resolve</span>: {
    <span class="hljs-comment">//导入文件时省略的扩展名列表</span>
    <span class="hljs-attr">extensions</span>: [
      <span class="hljs-string">".mjs"</span>,
      <span class="hljs-string">".js"</span>,
      <span class="hljs-string">".ts"</span>,
      <span class="hljs-string">".jsx"</span>,
      <span class="hljs-string">".tsx"</span>,
      <span class="hljs-string">".json"</span>,
    ],
  },
});
</code></pre>
<h2 data-id="heading-4">vite 插件</h2>
<p>在 <code>plugins</code> 中可以添加你的插件，它是一个数组</p>
<p>一些插件：</p>
<ul>
<li><code>@vitejs/plugin-vue-jsx</code> JSX、TSX 语法支持</li>
<li><code>vite-plugin-mock</code> Mock 支持</li>
<li><code>vite-plugin-svg-icons</code> svg 图标</li>
<li><code>unplugin-auto-import/vite</code> 按需自动导入</li>
<li><code>unplugin-vue-components/vite</code> 按需组件自动导入</li>
<li><code>unocss/vite</code> 原子化 css</li>
<li>...</li>
</ul>
<p><a href="https://link.juejin.cn?target=https%3A%2F%2Fcn.vitejs.dev%2Fplugins%2F" target="_blank" title="https://cn.vitejs.dev/plugins/" ref="nofollow noopener noreferrer">官方插件列表</a></p>
<p><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fvitejs%2Fawesome-vite%23plugins" target="_blank" title="https://github.com/vitejs/awesome-vite#plugins" ref="nofollow noopener noreferrer">社区插件列表</a></p>
<p>下面是一些示例：</p>
<h3 data-id="heading-5"><code>gzip</code> 压缩打包</h3>
<p>GitHub 地址：<a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fvbenjs%2Fvite-plugin-compression" target="_blank" title="https://github.com/vbenjs/vite-plugin-compression" ref="nofollow noopener noreferrer">vite-plugin-compression</a></p>
<p>安装 <code>vite-plugin-compression</code></p>
<pre><code class="hljs language-bash" lang="bash">pnpm add vite-plugin-compression -D
</code></pre>
<pre><code class="hljs language-ts" lang="ts"><span class="hljs-comment">//vite.config.ts</span>
<span class="hljs-keyword">import</span> viteCompression <span class="hljs-keyword">from</span> <span class="hljs-string">"vite-plugin-compression"</span>;

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>({
  <span class="hljs-attr">plugins</span>: [
    <span class="hljs-title function_">vue</span>(),
    <span class="hljs-comment">//默认压缩gzip，生产.gz文件</span>
    <span class="hljs-title function_">viteCompression</span>({
      <span class="hljs-attr">deleteOriginFile</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">//压缩后是否删除源文件</span>
    }),
  ],
});
</code></pre>
<p>运行 <code>pnpm build</code> 命令，查看 <code>dist</code> 的 <code>assets</code> 目录：</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/724829d81fa84d31963b4011db795392~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5Y2B5LqU5Li2:q75.awebp?rk3s=f64ab15b&amp;x-expires=1738795261&amp;x-signature=Gp%2B88qcVYZ3EoSoPyDQXQEinoCw%3D" alt="image.png" loading="lazy"></p>
<blockquote>
<p>一般来说，真正想使用 <code>gzip</code> 压缩来优化项目，还需要在 <code>nginx</code> 中开启 <code>gzip</code> 并进行相关配置，这一步交给后端来处理。请自行百度</p>
</blockquote>
<h3 data-id="heading-6">打包分析可视化</h3>
<p>GitHub 地址：<a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fbtd%2Frollup-plugin-visualizer" target="_blank" title="https://github.com/btd/rollup-plugin-visualizer" ref="nofollow noopener noreferrer">rollup-plugin-visualize</a></p>
<p>安装 <code>rollup-plugin-visualizer</code></p>
<pre><code class="hljs language-bash" lang="bash">pnpm add rollup-plugin-visualizer -D
</code></pre>
<pre><code class="hljs language-ts" lang="ts"><span class="hljs-keyword">import</span> { defineConfig } <span class="hljs-keyword">from</span> <span class="hljs-string">"vite"</span>;
<span class="hljs-keyword">import</span> vue <span class="hljs-keyword">from</span> <span class="hljs-string">"@vitejs/plugin-vue"</span>;
<span class="hljs-keyword">import</span> { visualizer } <span class="hljs-keyword">from</span> <span class="hljs-string">"rollup-plugin-visualizer"</span>;

<span class="hljs-comment">// https://vitejs.dev/config/</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>({
  <span class="hljs-attr">plugins</span>: [
    <span class="hljs-title function_">vue</span>(),
    <span class="hljs-title function_">visualizer</span>({
      <span class="hljs-attr">open</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//build后，是否自动打开分析页面，默认false</span>
      <span class="hljs-attr">gzipSize</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//是否分析gzip大小</span>
      <span class="hljs-attr">brotliSize</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//是否分析brotli大小</span>
      <span class="hljs-comment">//filename: 'stats.html'//分析文件命名</span>
    }),
  ],
});
</code></pre>
<p>使用命令 <code>pnpm build</code> 后，分析图 html 文件会在根目录下生成，默认命名为 <code>stats.html</code>
<img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/4d7a8f1e95f744b9ad2620d93014dd15~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5Y2B5LqU5Li2:q75.awebp?rk3s=f64ab15b&amp;x-expires=1738795261&amp;x-signature=NPl8tosMORtNKz6SoJTAbtwh%2B34%3D" alt="image.png" loading="lazy">
把分析文件加入 <code>.gitignore</code> ，不提交到 <code>git</code> 仓库中</p>
<pre><code class="hljs language-gitignore" lang="gitignore">stats.html
</code></pre>
<h3 data-id="heading-7">集成按需引入配置</h3>
<p>首先，需要先引入 <a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Funplugin%2Funplugin-vue-components" target="_blank" title="https://github.com/unplugin/unplugin-vue-components" ref="nofollow noopener noreferrer"><code>unplugin-vue-components</code></a> 和 <a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Funplugin%2Funplugin-auto-import" target="_blank" title="https://github.com/unplugin/unplugin-auto-import" ref="nofollow noopener noreferrer"><code>unplugin-auto-import</code></a></p>
<pre><code class="hljs language-bash" lang="bash">pnpm add -D unplugin-vue-components unplugin-auto-import
</code></pre>
<p>这里以 <code>ElementPlus</code> 组件库为例子，在 <code>vite.config.ts</code> 中配置如下：</p>
<blockquote>
<p>请先确保你已安装了 <code>ElementPlus</code> 组件库：<a href="https://link.juejin.cn?target=https%3A%2F%2Felement-plus.org%2Fzh-CN%2Fguide%2Finstallation.html%23%25E4%25BD%25BF%25E7%2594%25A8%25E5%258C%2585%25E7%25AE%25A1%25E7%2590%2586%25E5%2599%25A8" target="_blank" title="https://element-plus.org/zh-CN/guide/installation.html#%E4%BD%BF%E7%94%A8%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8" ref="nofollow noopener noreferrer">传送门</a>
<code>ant-design-vue</code> 组件库同理，<a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.antdv.com%2Fdocs%2Fvue%2Fgetting-started-cn%23_2-%25E4%25BD%25BF%25E7%2594%25A8%25E7%25BB%2584%25E4%25BB%25B6" target="_blank" title="https://www.antdv.com/docs/vue/getting-started-cn#_2-%E4%BD%BF%E7%94%A8%E7%BB%84%E4%BB%B6" ref="nofollow noopener noreferrer">传送门</a></p>
</blockquote>
<pre><code class="hljs language-ts" lang="ts"><span class="hljs-keyword">import</span> { defineConfig } <span class="hljs-keyword">from</span> <span class="hljs-string">"vite"</span>;
<span class="hljs-keyword">import</span> vue <span class="hljs-keyword">from</span> <span class="hljs-string">"@vitejs/plugin-vue"</span>;
<span class="hljs-keyword">import</span> <span class="hljs-title class_">Components</span> <span class="hljs-keyword">from</span> <span class="hljs-string">"unplugin-vue-components/vite"</span>;
<span class="hljs-keyword">import</span> {
  <span class="hljs-title class_">AntDesignVueResolver</span>,
  <span class="hljs-title class_">ElementPlusResolver</span>,
} <span class="hljs-keyword">from</span> <span class="hljs-string">"unplugin-vue-components/resolvers"</span>;
<span class="hljs-keyword">import</span> <span class="hljs-title class_">AutoImport</span> <span class="hljs-keyword">from</span> <span class="hljs-string">"unplugin-auto-import/vite"</span>;

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>({
  <span class="hljs-attr">plugins</span>: [
    <span class="hljs-title function_">vue</span>(),
    <span class="hljs-title class_">Components</span>({
      <span class="hljs-attr">resolvers</span>: [
        <span class="hljs-comment">//AntDesignVueResolver({ importStyle: "less" }),</span>
        <span class="hljs-title class_">ElementPlusResolver</span>({ <span class="hljs-attr">importStyle</span>: <span class="hljs-string">"sass"</span> }),
      ],
      <span class="hljs-attr">dts</span>: <span class="hljs-string">"src/typings/components.d.ts"</span>, <span class="hljs-comment">//自定义生成 components.d.ts 路径</span>
    }),
    <span class="hljs-title class_">AutoImport</span>({
      <span class="hljs-attr">imports</span>: [
        <span class="hljs-string">"vue"</span>,
        <span class="hljs-string">"vue-router"</span>,
        <span class="hljs-comment">//一些全局注册的hook等，无需局部引入</span>
        {
          <span class="hljs-comment">// "@/hooks/useMessage": ["useMessage"],</span>
        },
      ], 
      <span class="hljs-attr">resolvers</span>: [<span class="hljs-title class_">ElementPlusResolver</span>()], <span class="hljs-comment">//AntDesignVueResolver()</span>
      <span class="hljs-attr">dts</span>: <span class="hljs-string">"src/typings/auto-imports.d.ts"</span>, <span class="hljs-comment">//自定义生成 auto-imports.d.ts 路径</span>
    }),
  ],
});
</code></pre>
<p><code>AntDesignVue</code> 组件库同理设置</p>
<p>通过以上配置：</p>
<ul>
<li><code>unplugin-vue-components</code> 会在 <code>src/typings</code> 文件夹下生成 <code>components.d.ts</code> 类型文件</li>
<li><code>unplugin-auto-import</code> 会在 <code>src/typings</code> 文件夹下生成 <code>auto-imports.d.ts</code> 类型文件</li>
</ul>
<p><code>unplugin-vue-components</code> 插件会自动引入 UI 组件及 src 文件夹下的 components 组件，规则是 <code>src/components/*.{vue}</code></p>
<blockquote>
<p>请确保你的项目中拥有 <code>src/typings</code> 文件夹，或者更改上述配置项的 <code>dts</code> 路径</p>
</blockquote>
<p><strong>TS 类型</strong></p>
<p>使用按需引入的话，不要忘了在 <code>tsconfig.json</code> 中引入组件库的类型声明文件</p>
<pre><code class="hljs language-json" lang="json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">"compilerOptions"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">"baseUrl"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"."</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"types"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">"node"</span><span class="hljs-punctuation">,</span> <span class="hljs-string">"vite/client"</span><span class="hljs-punctuation">,</span> <span class="hljs-string">"element-plus/global"</span><span class="hljs-punctuation">]</span>
  <span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<p>如果你使用的是 <code>AntDesignVue</code> 组件库，将  <code>"element-plus/global"</code> 替换成 <code>"ant-design-vue/typings/global"</code> 即可</p>
<pre><code class="hljs language-json" lang="json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">"compilerOptions"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">"baseUrl"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"."</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"types"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">"node"</span><span class="hljs-punctuation">,</span> <span class="hljs-string">"vite/client"</span><span class="hljs-punctuation">,</span> <span class="hljs-string">"ant-design-vue/typings/global"</span><span class="hljs-punctuation">]</span>
  <span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<h2 data-id="heading-8">环境变量</h2>
<h3 data-id="heading-9">基础配置</h3>
<p>环境变量。顾名思义，在不同环境下呈现不同的变量值</p>
<p>Vite 在一个特殊的 &nbsp;<strong><code>import.meta.env</code></strong>&nbsp; 对象上暴露环境变量，这些变量在构建时会被静态地替换掉。这里有一些在所有情况下都可以使用的内建变量：</p>
<ul>
<li><strong><code>import.meta.env.MODE</code></strong>: {string} 应用运行的<a href="https://link.juejin.cn?target=https%3A%2F%2Fcn.vitejs.dev%2Fguide%2Fenv-and-mode%23modes" target="_blank" title="https://cn.vitejs.dev/guide/env-and-mode#modes" ref="nofollow noopener noreferrer">模式</a>。</li>
<li><strong><code>import.meta.env.BASE_URL</code></strong>: {string} 部署应用时的基本 URL。他由<a href="https://link.juejin.cn?target=https%3A%2F%2Fcn.vitejs.dev%2Fconfig%2Fshared-options.html%23base" target="_blank" title="https://cn.vitejs.dev/config/shared-options.html#base" ref="nofollow noopener noreferrer"><code>base</code>&nbsp; 配置项</a>决定。</li>
<li><strong><code>import.meta.env.PROD</code></strong>: {boolean} 应用是否运行在生产环境（使用 &nbsp;<code>NODE_ENV='production'</code>&nbsp; 运行开发服务器或构建应用时使用 &nbsp;<code>NODE_ENV='production'</code>&nbsp;）。</li>
<li><strong><code>import.meta.env.DEV</code></strong>: {boolean} 应用是否运行在开发环境 (永远与 &nbsp;<code>import.meta.env.PROD</code>相反)。</li>
<li><strong><code>import.meta.env.SSR</code></strong>: {boolean} 应用是否运行在 &nbsp;<a href="https://link.juejin.cn?target=https%3A%2F%2Fcn.vitejs.dev%2Fguide%2Fssr.html%23conditional-logic" target="_blank" title="https://cn.vitejs.dev/guide/ssr.html#conditional-logic" ref="nofollow noopener noreferrer">server</a>&nbsp; 上。</li>
</ul>
<p>也可以打印 <code>import.meta.env</code> 对象查看拥有的属性</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/42e62652017e49cd85b5c140d3c02563~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5Y2B5LqU5Li2:q75.awebp?rk3s=f64ab15b&amp;x-expires=1738795261&amp;x-signature=Yap2gxzSQywonIEt85slQUmP2jY%3D" alt="image.png" loading="lazy"></p>
<ul>
<li><code>BASE_URL</code>：应用程序的基本 URL 路径，默认为 <code>/</code></li>
<li><code>DEV</code>：当前是否处于开发模式，在生产环境，这个值为 <code>false</code></li>
<li><code>MODE</code>：当前的运行模式，<code>development</code> 表示开发模式，生产环境，是 <code>production</code></li>
<li><code>prod</code>：与 <code>DEV</code> 相反，表示是否处于生产模式，在生产环境，这个值是 <code>true</code></li>
<li><code>SSR</code>：当前是否运行在服务器端渲染环境，如果使用 SSR，服务器端运行时这个值是 <code>true</code></li>
</ul>
<h3 data-id="heading-10">配置文件</h3>
<p>在 Vite 中，只有以 <code>VITE_</code> 为前缀的变量才会交给 Vite 来处理，比如</p>
<pre><code class="hljs language-ts" lang="ts"><span class="hljs-variable constant_">VITE_KEY</span> = <span class="hljs-number">123</span>;
</code></pre>
<p>如果要改前缀的话，在 <code>vite.config.ts</code> 中设置 <a href="https://link.juejin.cn?target=https%3A%2F%2Fcn.vitejs.dev%2Fconfig%2Fshared-options.html%23envprefix" target="_blank" title="https://cn.vitejs.dev/config/shared-options.html#envprefix" ref="nofollow noopener noreferrer"><code>envPrefix</code></a> ，它可以是一个字符串或者字符串数组</p>
<p>定义环境变量，首先先创建几个环境变量存放的文件，一般是放在根目录下：</p>
<blockquote>
<p>Vite 也提供了 <a href="https://link.juejin.cn?target=https%3A%2F%2Fcn.vitejs.dev%2Fconfig%2Fshared-options.html%23envdir" target="_blank" title="https://cn.vitejs.dev/config/shared-options.html#envdir" ref="nofollow noopener noreferrer"><code>envDir</code></a> 用来自定义环境文件存放目录</p>
</blockquote>
<p>新建 <code>.env</code> 文件，表示通用的环境变量，优先级较低，会被其他环境文件覆盖</p>
<p>新建 <code>.env.development</code> 文件，表示开发环境下的环境变量</p>
<p>新建 <code>.env.production</code> 文件，表示生产环境下的环境变量</p>
<p>需要的话，你可以加入更多的环境，比如 预发布环境 <code>.env.staging</code> (它的配置一般与生产环境无异，只是 url 变化) 和 测试环境 <code>.env.testing</code></p>
<p><code>.env</code> 文件：</p>
<pre><code class="hljs language-ini" lang="ini"><span class="hljs-comment"># 网站标题</span>
<span class="hljs-attr">VITE_GLOB_APP_TITLE</span> = clean Admin

<span class="hljs-comment"># 在本地打开时的端口号</span>
<span class="hljs-attr">VITE_PROT</span> = <span class="hljs-number">8888</span>
</code></pre>
<p><code>.env.development</code> 文件：</p>
<pre><code class="hljs language-ini" lang="ini"><span class="hljs-comment"># 本地环境</span>

<span class="hljs-comment"># API 请求URL</span>
<span class="hljs-attr">VITE_API_URL</span> = <span class="hljs-string">""</span>
</code></pre>
<p><code>.env.production</code> 文件：</p>
<pre><code class="hljs language-ini" lang="ini"><span class="hljs-comment"># 生产环境</span>

<span class="hljs-comment"># API 请求URL</span>
<span class="hljs-attr">VITE_API_URL</span> = <span class="hljs-string">""</span>
</code></pre>
<p>在默认情况下，运行的脚本 <code>dev</code> 命令(<code>pnpm dev</code>)是会加载 <code>.env.developmen</code> 中的环境变量
而脚本 <code>build</code> 命令是加载 <code>.env.production</code> 中的环境变量
了解更多请参阅<a href="https://link.juejin.cn?target=https%3A%2F%2Fcn.vitejs.dev%2Fguide%2Fenv-and-mode%23modes" target="_blank" title="https://cn.vitejs.dev/guide/env-and-mode#modes" ref="nofollow noopener noreferrer">这里</a></p>
<p>最常见的业务场景就是，前端与后端的接口联调，本地开发环境与线上环境用的接口地址不同，这时只需要定义不同环境文件的相同变量即可</p>
<p>也可以通过在 <code>package.json</code> 中改写脚本命令来自定义加载你想要的环境文件，关键词是 <code>--mode</code></p>
<pre><code class="hljs language-json" lang="json"><span class="hljs-comment">//package.json</span>
<span class="hljs-punctuation">{</span>
    <span class="hljs-attr">"scripts"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">"dev"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"vite --mode production"</span>
    <span class="hljs-attr">"build"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"vue-tsc -b &amp;&amp; vite build"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"build:dev"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"vue-tsc -b &amp;&amp; vite build --mode development"</span><span class="hljs-punctuation">,</span>
  <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<h3 data-id="heading-11">TS 智能提示</h3>
<p>如果项目中用上了 TS，那么可以为环境变量提供智能提示，详见<a href="https://link.juejin.cn?target=https%3A%2F%2Fcn.vitejs.dev%2Fguide%2Fenv-and-mode.html%23intellisense" target="_blank" title="https://cn.vitejs.dev/guide/env-and-mode.html#intellisense" ref="nofollow noopener noreferrer">官方文档</a></p>
<p>在 <code>src/typings</code> 目录下新建一个 <code>env.d.ts</code>，写入以下内容</p>
<pre><code class="hljs language-ts" lang="ts"><span class="hljs-comment">//环境变量-类型提示</span>
<span class="hljs-keyword">interface</span> <span class="hljs-title class_">ImportMetaEnv</span> {
   <span class="hljs-comment">/** 全局标题 */</span>
   <span class="hljs-keyword">readonly</span> <span class="hljs-attr">VITE_APP_TITLE</span>: <span class="hljs-built_in">string</span>;
   <span class="hljs-comment">/** 本地开发-端口号 */</span>
   <span class="hljs-keyword">readonly</span> <span class="hljs-attr">VITE_DEV_PORT</span>: <span class="hljs-built_in">number</span>;
   <span class="hljs-comment">//加入更多环境变量...</span>
  }
  
<span class="hljs-keyword">interface</span> <span class="hljs-title class_">ImportMeta</span> {
    <span class="hljs-keyword">readonly</span> <span class="hljs-attr">env</span>: <span class="hljs-title class_">ImportMetaEnv</span>
}
</code></pre>
<p>即可得到类型提示，鼠标停留在变量上也会显示注释</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/a4de26682b9d47e8987818ed8ad3f447~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5Y2B5LqU5Li2:q75.awebp?rk3s=f64ab15b&amp;x-expires=1738795261&amp;x-signature=Eav6uW9N8LZZPui65seml7%2BA6Lw%3D" alt="image.png" loading="lazy"></p>
<blockquote>
<p>记得在 <code>tsconfig</code> 文件中配置 <code>include</code> 引入类型声明文件，<code>typings</code> 代表你的类型文件目录名称</p>
</blockquote>
<pre><code class="hljs language-ts" lang="ts">{
  <span class="hljs-comment">// "compilerOptions": {},</span>
  <span class="hljs-string">"include"</span>: [<span class="hljs-string">"typings/**/*.d.ts"</span>,<span class="hljs-string">"typings/**/*.ts"</span>]
}
</code></pre>
<h3 data-id="heading-12"><code>.env</code> 文件折叠(可选)</h3>
<p>在根目录下新建一个 <code>.vscode</code> 文件夹，在此文件夹中新增 <code>settings.json</code> 文件，写入以下配置：</p>
<pre><code class="hljs language-json" lang="json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">"explorer.fileNesting.enabled"</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"explorer.fileNesting.expand"</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"explorer.fileNesting.patterns"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">"*.env"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">".env.*"</span>
  <span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<ul>
<li><code>explorer.fileNesting.enabled</code> 是否开启文件嵌套，默认 <code>false</code></li>
<li><code>explorer.fileNesting.expand</code> 是否默认展开</li>
<li><code>explorer.fileNesting.patterns</code> 文件嵌套规则</li>
</ul>
<h3 data-id="heading-13">在 <code>vite.config.ts</code> 中使用环境变量</h3>
<p><a href="https://link.juejin.cn?target=https%3A%2F%2Fcn.vitejs.dev%2Fconfig%2F%23using-environment-variables-in-config" target="_blank" title="https://cn.vitejs.dev/config/#using-environment-variables-in-config" ref="nofollow noopener noreferrer">官方文档</a></p>
<pre><code class="hljs language-ts" lang="ts"><span class="hljs-keyword">import</span> { loadEnv } <span class="hljs-keyword">from</span> <span class="hljs-string">"vite"</span>;
<span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> { <span class="hljs-title class_">UserConfig</span>, <span class="hljs-title class_">ConfigEnv</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">"vite"</span>;
<span class="hljs-keyword">import</span> vue <span class="hljs-keyword">from</span> <span class="hljs-string">"@vitejs/plugin-vue"</span>;

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> ({ mode }: <span class="hljs-title class_">ConfigEnv</span>): <span class="hljs-function"><span class="hljs-params">UserConfig</span> =&gt;</span> {
  <span class="hljs-keyword">const</span> <span class="hljs-attr">root</span>: <span class="hljs-built_in">string</span> = process.<span class="hljs-title function_">cwd</span>();
  <span class="hljs-keyword">const</span> env = <span class="hljs-title function_">loadEnv</span>(mode, root);
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(env);
  <span class="hljs-keyword">return</span> {
    <span class="hljs-attr">plugins</span>: [<span class="hljs-title function_">vue</span>()],
  };
};
</code></pre>
<p>我们这里重点关注 <code>const env = loadEnv(mode, root)</code></p>
<p><code>loadEnv</code> 函数是用来加载&nbsp;<code>envDir</code>&nbsp;中的&nbsp;<code>.env</code>&nbsp;文件(一般是放在根目录下)，</p>
<p><code>loadEnv</code> 接受三个参数：</p>
<ul>
<li><code>mode</code>：当前环境模式，开发环境、生产环境等</li>
<li><code>envDir</code>：<code>env</code> 文件目录地址</li>
<li><code>prefixes</code>：环境变量前缀，默认是<code>VITE_</code></li>
</ul>
<p>并且返回一个对象，键值对都是字符串类型，TS类型是 <code>Record&lt;string, string&gt;</code></p>
<p>我们通过 <code>console.log(env)</code> 把这个 <code>env</code> 变量打印在终端查看输出，这个对象是这样的：</p>
<blockquote>
<p>记得启动项目 <code>pnpm dev</code>，或者在项目运行情况下重新保存 <code>vite.config.ts</code> 文件</p>
</blockquote>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/944f3be9770a453cbe7b6954bff17633~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5Y2B5LqU5Li2:q75.awebp?rk3s=f64ab15b&amp;x-expires=1738795261&amp;x-signature=SPf%2FiMhTFUb8oiq3kL3EoxjCVQo%3D" alt="image.png" loading="lazy"></p>
<p>在这个对象里，值全部是字符串类型，有时我们需要通过环境变量来控制 Vite 中的配置项，比如 <a href="https://link.juejin.cn?target=https%3A%2F%2Fcn.vitejs.dev%2Fconfig%2Fserver-options.html%23server-port" target="_blank" title="https://cn.vitejs.dev/config/server-options.html#server-port" ref="nofollow noopener noreferrer">server.port​</a> 需要一个 <code>number</code> 类型的值而不是一个 <code>string</code>，针对这种情况，我们可以写个工具函数，来将值统一调整回该有的类型，先定义一个 <code>processEnv</code> 函数：</p>
<blockquote>
<p>核心思路就是将对象的 value 转换类型</p>
</blockquote>
<pre><code class="hljs language-ts" lang="ts"><span class="hljs-comment">/**
 * 处理环境变量的值类型
 * <span class="hljs-doctag">@param</span> env 环境变量对象
 * <span class="hljs-doctag">@returns</span> 返回一个类型正确的环境变量
 */</span>
<span class="hljs-keyword">const</span> processEnv = (<span class="hljs-attr">env</span>: <span class="hljs-title class_">RecordType</span>&lt;<span class="hljs-built_in">string</span>&gt;): <span class="hljs-function"><span class="hljs-params">ImportMetaEnv</span> =&gt;</span> {
  <span class="hljs-keyword">const</span> <span class="hljs-attr">metaEnv</span>: <span class="hljs-built_in">any</span> = {};
  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> env) {
    <span class="hljs-keyword">const</span> wrapValue = env[key].<span class="hljs-title function_">trim</span>().<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\\n/g</span>, <span class="hljs-string">'\n'</span>);
    metaEnv[key] = env[key];

    <span class="hljs-keyword">if</span> (wrapValue === <span class="hljs-string">'true'</span> || wrapValue === <span class="hljs-string">'false'</span>) metaEnv[key] = wrapValue === <span class="hljs-string">'true'</span>;
    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">isNaN</span>(<span class="hljs-title class_">Number</span>(wrapValue)) &amp;&amp; wrapValue !== <span class="hljs-string">''</span>) metaEnv[key] = <span class="hljs-title class_">Number</span>(wrapValue);
  }
  <span class="hljs-keyword">return</span> metaEnv;
};
</code></pre>
<p>那么，刚刚的配置项我们可以写成这样：</p>
<pre><code class="hljs language-ts" lang="ts"><span class="hljs-keyword">import</span> { loadEnv } <span class="hljs-keyword">from</span> <span class="hljs-string">"vite"</span>;
<span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> { <span class="hljs-title class_">UserConfig</span>, <span class="hljs-title class_">ConfigEnv</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">"vite"</span>;
<span class="hljs-keyword">import</span> vue <span class="hljs-keyword">from</span> <span class="hljs-string">"@vitejs/plugin-vue"</span>;
<span class="hljs-keyword">import</span> { processEnv } <span class="hljs-keyword">from</span> <span class="hljs-string">'./build/utils'</span>;

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> ({ mode }: <span class="hljs-title class_">ConfigEnv</span>): <span class="hljs-function"><span class="hljs-params">UserConfig</span> =&gt;</span> {
  <span class="hljs-keyword">const</span> <span class="hljs-attr">root</span>: <span class="hljs-built_in">string</span> = process.<span class="hljs-title function_">cwd</span>();
  <span class="hljs-keyword">const</span> env = <span class="hljs-title function_">processEnv</span>(<span class="hljs-title function_">loadEnv</span>(mode, root));
  <span class="hljs-keyword">const</span> { <span class="hljs-variable constant_">VITE_DEV_PORT</span> } = env;
  <span class="hljs-keyword">return</span> {
    <span class="hljs-attr">plugins</span>: [<span class="hljs-title function_">vue</span>()],
    <span class="hljs-attr">server</span>: {
      <span class="hljs-attr">port</span>: <span class="hljs-variable constant_">VITE_DEV_PORT</span>, <span class="hljs-comment">// 端口号</span>
    },
  };
};
</code></pre>
<p>注意，我这里将 <code>processEnv</code> 函数放在 <code>build/utils</code> 里，你可以自由调整路径</p>
<p>上述中的 <code>processEnv</code> 方法是进一步封装的方案，如果你不想折腾太多，那么这样做也是可以：</p>
<pre><code class="hljs language-ts" lang="ts">    <span class="hljs-attr">server</span>: {
	  <span class="hljs-comment">// 假设你有一个 VITE_BROWSER_OPEN 环境变量</span>
      <span class="hljs-attr">open</span>: <span class="hljs-variable constant_">VITE_BROWSER_OPEN</span> === <span class="hljs-string">"true"</span>, <span class="hljs-comment">// 项目启动时是否自动在浏览器中打开应用程序</span>
    },
</code></pre>
<h2 data-id="heading-14">CSS 配置</h2>
<p>在有些情况下，我们需要让 css 变量可以在全局的样式中通用，</p>
<p>比如在文件夹 <code>styles/variables.less</code> 存在着一些变量：</p>
<pre><code class="hljs language-less" lang="less"><span class="hljs-variable">@while:</span> <span class="hljs-number">#fff</span>;
<span class="hljs-variable">@menu-bg-color:</span> <span class="hljs-number">#001529</span>;
@<span class="hljs-variable">@header-height:</span> <span class="hljs-number">64px</span>;
</code></pre>
<p>在 <code>main.ts</code> 中引入这个 <code>variables.less</code> 文件，是无效的，会报 <code>[less] variable @变量名 is undefined</code> 即变量未定义问题</p>
<p>Vite 提供了一个 <code>css.preprocessorOptions</code> 选项，用来指定传递给 CSS 预处理器选项：<a href="https://link.juejin.cn?target=https%3A%2F%2Fcn.vitejs.dev%2Fconfig%2Fshared-options%23css-preprocessoroptions" target="_blank" title="https://cn.vitejs.dev/config/shared-options#css-preprocessoroptions" ref="nofollow noopener noreferrer">css-preprocessoroptions</a></p>
<pre><code class="hljs language-typescript" lang="typescript"><span class="hljs-keyword">import</span> { defineConfig } <span class="hljs-keyword">from</span> <span class="hljs-string">"vite"</span>;
<span class="hljs-keyword">import</span> vue <span class="hljs-keyword">from</span> <span class="hljs-string">"@vitejs/plugin-vue"</span>;
<span class="hljs-keyword">import</span> { resolve } <span class="hljs-keyword">from</span> <span class="hljs-string">"path"</span>;

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>({
  <span class="hljs-attr">plugins</span>: [<span class="hljs-title function_">vue</span>()],
  <span class="hljs-attr">resolve</span>: {
    <span class="hljs-attr">alias</span>: {
      <span class="hljs-string">"@"</span>: <span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">"src"</span>),
    },
  },
  <span class="hljs-attr">css</span>: {
    <span class="hljs-comment">// 预处理器配置项</span>
    <span class="hljs-attr">preprocessorOptions</span>: {
      <span class="hljs-comment">//less: {</span>
	  <span class="hljs-comment">//  additionalData: '@import "@/styles/variable.less";',</span>
      <span class="hljs-comment">//  javascriptEnabled: true,</span>
      <span class="hljs-comment">//},</span>
      <span class="hljs-attr">scss</span>: {
	    <span class="hljs-attr">api</span>: <span class="hljs-string">'modern-compiler'</span>,
        <span class="hljs-attr">additionalData</span>: <span class="hljs-string">`@use "@/styles/variables.scss" as *;`</span>,
        <span class="hljs-attr">javascriptEnabled</span>: <span class="hljs-literal">true</span>
      },
    },
  },
});
</code></pre>
<h2 data-id="heading-15">依赖预构建配置</h2>
<h3 data-id="heading-16">什么是预构建</h3>
<p>在 Vite 中，依赖预构建是指将第三方依赖预先编译和优化，以便在开发过程中更快地构建和加载这些依赖。这种预构建的方式有助于减少开发服务器在启动和重新加载时的延迟，并且可以利用现代浏览器的 ES 模块支持来更高效地加载模块</p>
<p>这种方式带来几个显著的优势：</p>
<ul>
<li>更快的开发启动时间</li>
<li>更快的热更新</li>
<li>现代浏览器的 ES 模块支持</li>
</ul>
<h3 data-id="heading-17">预构建的目的</h3>
<ol>
<li><strong>CommonJS 和 UMD 兼容性:</strong>&nbsp; 在开发阶段中，Vite 的开发服务器将所有代码视为原生 ES 模块。因此，Vite 必须先将以 CommonJS 或 UMD 形式提供的依赖项转换为 ES 模块。通俗易懂就是要将非 &nbsp;<code>ESM</code>&nbsp; 规范的代码转换为符合 &nbsp;<code>ESM</code>&nbsp; 规范的代码</li>
<li><strong>性能：</strong>&nbsp; 为了提高后续页面的加载性能，Vite 将那些具有许多内部模块的 ESM 依赖项转换为单个模块。</li>
</ol>
<blockquote>
<p>默认情况下，<code>预构建</code>结果会保存到 &nbsp;<code>node_modules</code>&nbsp; 的 &nbsp;<code>.vite</code>&nbsp; 目录下。</p>
</blockquote>
<h3 data-id="heading-18">自定义构建行为</h3>
<p>有时候，Vite 的依赖预构建算法并不是那么准确理想的，比如一些动态的 <code>import</code> 导入，常常无法进行预构建，而是会触发二次预构建，严重拖慢程序速度
<img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/9b0bf43b44bf43379d6a822885c68e74~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5Y2B5LqU5Li2:q75.awebp?rk3s=f64ab15b&amp;x-expires=1738795261&amp;x-signature=j%2B5y7a0GHkS1W3iauLceiyu%2FS6Q%3D" alt="image.png" loading="lazy">
二次预构建完成后，会通知浏览器进行 <code>reload</code> ，即重新加载页面，这样频繁的刷新页面，对于我们的开发来说简直是不能忍受！</p>
<p>Vite 提供了 <code>optimizeDeps</code> 配置项允许我们自定义预构建的配置，<a href="https://link.juejin.cn?target=https%3A%2F%2Fcn.vitejs.dev%2Fconfig%2Fdep-optimization-options.html%23dep-optimization-options" target="_blank" title="https://cn.vitejs.dev/config/dep-optimization-options.html#dep-optimization-options" ref="nofollow noopener noreferrer">依赖优化选项</a></p>
<p>在这里，我们着重关注两个属性：</p>
<ul>
<li><code>optimizeDeps.include</code>：强制预构建链接的包</li>
<li><code>optimizeDeps.exclude</code> ：在预构建中强制排除的依赖项</li>
</ul>
<p>例如：</p>
<pre><code class="hljs language-ts" lang="ts"><span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> { <span class="hljs-title class_">UserConfig</span>, <span class="hljs-title class_">ConfigEnv</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">"vite"</span>;
<span class="hljs-keyword">import</span> vue <span class="hljs-keyword">from</span> <span class="hljs-string">"@vitejs/plugin-vue"</span>;

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> ({ mode }: <span class="hljs-title class_">ConfigEnv</span>): <span class="hljs-function"><span class="hljs-params">UserConfig</span> =&gt;</span> {
  <span class="hljs-keyword">return</span> {
    <span class="hljs-attr">plugins</span>: [<span class="hljs-title function_">vue</span>()],
    <span class="hljs-attr">optimizeDeps</span>: {
      <span class="hljs-attr">include</span>: [
        <span class="hljs-string">"qs"</span>,
        <span class="hljs-string">"echarts"</span>,
        <span class="hljs-string">"@vueuse/core"</span>,
        <span class="hljs-string">"nprogress"</span>,
        <span class="hljs-string">"lodash-es"</span>,
        <span class="hljs-string">"dayjs"</span>,
      ],
      <span class="hljs-attr">exclude</span>: [],
    },
  };
};
</code></pre>
<h3 data-id="heading-19">注意点</h3>
<p>Vite 将预构建的依赖项缓存到 &nbsp;<code>node_modules/.vite</code>&nbsp; 中，如果你想强制重建预构建缓存：</p>
<ul>
<li>在 <code>package.json</code> 的 <code>scripts</code> 中脚本命令指定 <code>--force</code></li>
<li>删除 <code>node_modules</code> 目录下的 <code>.vite</code> 缓存文件夹</li>
</ul>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/aadf4d1a99074d31bd35537f67d72596~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5Y2B5LqU5Li2:q75.awebp?rk3s=f64ab15b&amp;x-expires=1738795261&amp;x-signature=n6gHnPAYyS796dx1%2FqW1MDlzYCk%3D" alt="image.png" loading="lazy"></p>
<h3 data-id="heading-20">了解更多？</h3>
<p>这里有一些参考资料</p>
<ul>
<li><a href="https://juejin.cn/post/7128212841064038414?searchId=20240704155624C50214123832C4A9E115" target="_blank" title="https://juejin.cn/post/7128212841064038414?searchId=20240704155624C50214123832C4A9E115">聊一聊 Vite 的预构建和二次预构建 </a></li>
<li><a href="https://juejin.cn/post/7129160452377935903" target="_blank" title="https://juejin.cn/post/7129160452377935903">五千字深度解读 Vite 的依赖扫描</a></li>
<li><a href="https://juejin.cn/post/7064853960636989454" target="_blank" title="https://juejin.cn/post/7064853960636989454">深入理解 Vite 核心原理</a></li>
</ul>
<h2 data-id="heading-21">打包配置</h2>
<h3 data-id="heading-22">生产环境去除 <code>console.log</code>、<code>debugger</code>(esbuild 模式)</h3>
<pre><code class="hljs language-ts" lang="ts"><span class="hljs-comment">//vite.config.ts</span>
<span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> { <span class="hljs-title class_">UserConfig</span>, <span class="hljs-title class_">ConfigEnv</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">"vite"</span>;
<span class="hljs-keyword">import</span> vue <span class="hljs-keyword">from</span> <span class="hljs-string">"@vitejs/plugin-vue"</span>;

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> ({ mode }: <span class="hljs-title class_">ConfigEnv</span>): <span class="hljs-function"><span class="hljs-params">UserConfig</span> =&gt;</span> {
  <span class="hljs-keyword">return</span> {
    <span class="hljs-attr">plugins</span>: [<span class="hljs-title function_">vue</span>()],

    <span class="hljs-attr">esbuild</span>: {
      <span class="hljs-attr">drop</span>: [<span class="hljs-string">"debugger"</span>],
      <span class="hljs-attr">pure</span>: [<span class="hljs-string">"console.log"</span>],
    },
  };
};
</code></pre>
<h2 data-id="heading-23">分包策略</h2>
<h3 data-id="heading-24">什么是分包策略</h3>
<p>分包策略，就是根据不同的规则和逻辑来分割成大大小小的包，把一些固定，常规不更新的文件，进行分割切包处理</p>
<h3 data-id="heading-25">分包的作用</h3>
<p>分包是一种优化程序加载速度，性能的策略和操作</p>
<p>试想一下，你有一个安装了多个依赖包的项目，当你进行打包时，这些代码都打包成了一个 js 文件，当你修改了其中的一些文件时要重新打包上线，浏览器会重新加载你的这个 js 文件，可是，你只修改了项目其中一部分，却要把整个文件都重新加载一边，是否合理呢？特别是当项目越来越大时，你就会发现页面的加载速度越来越慢</p>
<p>所以，分包策略的作用在于：</p>
<ul>
<li><strong>减少代码体积和加载时间</strong>: 当你的项目包含多个模块或者依赖项时，将它们分割成多个包可以减少单个包的体积。并且只重新加载修改的文件，减少加载时间</li>
<li><strong>提高缓存利用率</strong>:处理部分包而不是全部，分包可以提高浏览器的缓存命中率，从而减少不必要的网络请求，加快页面加载速度</li>
<li><strong>优化资源结构</strong>: 对于大型项目或者复杂的应用程序，通过合理划分功能模块和依赖项，有利于管理项目的整理结构和维护</li>
</ul>
<h3 data-id="heading-26">分包策略的建议</h3>
<p>分包策略根据项目不同，会呈现出不同的策略，这里提供一些通用的思路</p>
<ul>
<li>按功能或模块分包</li>
<li>按页面或路由分包</li>
<li>按第三方依赖分包</li>
<li>公共代码分包</li>
<li>按环境分包</li>
</ul>
<blockquote>
<p>项目体量越大，分包效果越明显</p>
</blockquote>
<h3 data-id="heading-27">在 Vite 中的示例分包</h3>
<p><a href="https://link.juejin.cn?target=https%3A%2F%2Fcn.vitejs.dev%2Fconfig%2Fbuild-options.html%23build-rollupoptions" target="_blank" title="https://cn.vitejs.dev/config/build-options.html#build-rollupoptions" ref="nofollow noopener noreferrer">官方文档</a></p>
<p>这一部分会需要一定的前端工程化及性能优化知识，参阅 <a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.rollupjs.com%2F" target="_blank" title="https://www.rollupjs.com/" ref="nofollow noopener noreferrer"><code>Rollup</code></a></p>
<p>在 <code>Vite.config.ts</code> 中的简单分包：</p>
<pre><code class="hljs language-ts" lang="ts"><span class="hljs-comment">//vite.config.ts</span>
<span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> { <span class="hljs-title class_">UserConfig</span>, <span class="hljs-title class_">ConfigEnv</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">"vite"</span>;
<span class="hljs-keyword">import</span> vue <span class="hljs-keyword">from</span> <span class="hljs-string">"@vitejs/plugin-vue"</span>;

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> ({ mode }: <span class="hljs-title class_">ConfigEnv</span>): <span class="hljs-function"><span class="hljs-params">UserConfig</span> =&gt;</span> {
  <span class="hljs-comment">/**颗粒度更细的分包 */</span>
  <span class="hljs-keyword">const</span> <span class="hljs-title function_">manualChunks</span> = (<span class="hljs-params">id: <span class="hljs-built_in">string</span></span>) =&gt; {
    <span class="hljs-keyword">if</span> (id.<span class="hljs-title function_">includes</span>(<span class="hljs-string">'node_modules'</span>)) {
      <span class="hljs-keyword">if</span> (id.<span class="hljs-title function_">includes</span>(<span class="hljs-string">'lodash-es'</span>)) {
        <span class="hljs-keyword">return</span> <span class="hljs-string">'lodash-vendor'</span>;
      }
      <span class="hljs-keyword">if</span> (id.<span class="hljs-title function_">includes</span>(<span class="hljs-string">'element-plus'</span>)) {
        <span class="hljs-keyword">return</span> <span class="hljs-string">'el-vendor'</span>;
      }
      <span class="hljs-keyword">if</span> (id.<span class="hljs-title function_">includes</span>(<span class="hljs-string">'@vue'</span>) || id.<span class="hljs-title function_">includes</span>(<span class="hljs-string">'vue'</span>)) {
        <span class="hljs-keyword">return</span> <span class="hljs-string">'vue-vendor'</span>;
      }
      <span class="hljs-keyword">return</span> <span class="hljs-string">'vendor'</span>;
    }
  };

  <span class="hljs-keyword">return</span> {
    <span class="hljs-attr">plugins</span>: [<span class="hljs-title function_">vue</span>()],
    <span class="hljs-attr">build</span>: {
      <span class="hljs-attr">chunkSizeWarningLimit</span>: <span class="hljs-number">1500</span>, <span class="hljs-comment">//超出 chunk 大小警告阈值，默认500kb</span>
      <span class="hljs-comment">//Rollup 打包配置</span>
      <span class="hljs-attr">rollupOptions</span>: {
        <span class="hljs-attr">output</span>: {
          <span class="hljs-attr">entryFileNames</span>: <span class="hljs-string">"assets/js/[name]-[hash:8].js"</span>, <span class="hljs-comment">//入口文件名称</span>
          <span class="hljs-attr">chunkFileNames</span>: <span class="hljs-string">"assets/js/[name]-[hash:8].js"</span>, <span class="hljs-comment">//引入文件名名称</span>
          <span class="hljs-attr">assetFileNames</span>: <span class="hljs-string">"assets/[ext]/[name]-[hash:8][extname]"</span>, <span class="hljs-comment">//静态资源名称</span>
          manualChunks,
        },
      },
    },
  };
};
</code></pre>
<p><code>id</code>：依赖项详细信息</p>
<p>一般来说，<code>node_modules</code> 中的第三方依赖项是不会去更改其源码的，我们只是使用而非修改，所以，可以通过配置 <code>manualChunks</code> 来将其分出去</p>
<p>效果图：</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/f406b3dfb8414ea496e236f00662220d~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5Y2B5LqU5Li2:q75.awebp?rk3s=f64ab15b&amp;x-expires=1738795261&amp;x-signature=UubdDY43Abu7m9wqUAuDr1AhJGc%3D" alt="image.png" loading="lazy"></p>
<p>这样的分包颗粒度还是比较粗的，且 manualChunks 逻辑简单粗暴，可能存在循环依赖的隐患，这里推荐一个 Vite 插件 <a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fsanyuan0704%2Fvite-plugin-chunk-split" target="_blank" title="https://github.com/sanyuan0704/vite-plugin-chunk-split" ref="nofollow noopener noreferrer">vite-plugin-chunk-split</a></p>
<p>参考文章：<a href="https://link.juejin.cn?target=https%3A%2F%2Fblog.csdn.net%2FTyro_java%2Farticle%2Fdetails%2F140050644" target="_blank" title="https://blog.csdn.net/Tyro_java/article/details/140050644" ref="nofollow noopener noreferrer">Vite 代码分割与拆包</a></p>
<h2 data-id="heading-28">参考资料</h2>
<ul>
<li><a href="https://juejin.cn/post/7170843707217412126" target="_blank" title="https://juejin.cn/post/7170843707217412126">Vite 配置篇：日常开发掌握这些配置就够了</a></li>
<li><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fstaven630%2Fvite-config" target="_blank" title="https://github.com/staven630/vite-config" ref="nofollow noopener noreferrer">Vite 的常用配置 vite.config.js</a></li>
<li><a href="https://juejin.cn/post/7241057752070799416" target="_blank" title="https://juejin.cn/post/7241057752070799416">Vite 配置</a></li>
</ul>
<h2 data-id="heading-29">了解更多</h2>
<p>系列专栏地址：<a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2FQFifteen%2FBlog%3Ftab%3Dreadme-ov-file%23%25E9%2580%259A%25E4%25BF%2597%25E6%2598%2593%25E6%2587%2582%25E7%259A%2584%25E4%25B8%25AD%25E5%2590%258E%25E5%258F%25B0%25E7%25B3%25BB%25E7%25BB%259F%25E5%25BB%25BA%25E8%25AE%25BE%25E6%258C%2587%25E5%258D%2597%25E4%25B8%2593%25E6%25A0%258F" target="_blank" title="https://github.com/QFifteen/Blog?tab=readme-ov-file#%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82%E7%9A%84%E4%B8%AD%E5%90%8E%E5%8F%B0%E7%B3%BB%E7%BB%9F%E5%BB%BA%E8%AE%BE%E6%8C%87%E5%8D%97%E4%B8%93%E6%A0%8F" ref="nofollow noopener noreferrer">GitHub</a> | <a href="https://juejin.cn/column/7437267529330901026" target="_blank" title="https://juejin.cn/column/7437267529330901026">掘金专栏</a> | <a href="https://link.juejin.cn?target=https%3A%2F%2Fsegmentfault.com%2Fblog%2Fadmin_guide" target="_blank" title="https://segmentfault.com/blog/admin_guide" ref="nofollow noopener noreferrer">思否专栏</a></p>
<p>实战项目：<a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2FQFifteen%2Fvue-clean-admin" target="_blank" title="https://github.com/QFifteen/vue-clean-admin" ref="nofollow noopener noreferrer">vue-clean-admin</a></p>
<p>专栏往期回顾：</p>
<ol>
<li><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2FQFifteen%2FBlog%2Fissues%2F1" target="_blank" title="https://github.com/QFifteen/Blog/issues/1" ref="nofollow noopener noreferrer">收下这份 Vue + TS + Vite 中后台系统搭建指南，从此不再害怕建项目</a></li>
<li><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2FQFifteen%2FBlog%2Fissues%2F2" target="_blank" title="https://github.com/QFifteen/Blog/issues/2" ref="nofollow noopener noreferrer">中后台开发必修课：Vue 项目中 Pinia 与 Router 完全攻略</a></li>
</ol>
<h2 data-id="heading-30">交流讨论</h2>
<p>文章如有错误或需要改进之处，欢迎指正</p></div></div>