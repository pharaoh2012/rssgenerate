
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/ProsperousEnding/p/18778447" title="发布于 2025-03-18 10:36">
    <span role="heading" aria-level="2">Mqtt集成与设计</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        - **MQTT配置（MqttConfig）**：管理MQTT连接的配置信息
- **基础MQTT客户端（BaseMqttClient）**：提供MQTT客户端的基础功能
- **设备端MQTT客户端（DeviceMqttClient）**：面向设备的MQTT客户端实现
- **服务器端MQTT客户端（ServerMqttClient）**：面向服务器的MQTT客户端实现
- **设备池（DevicePool）**：管理所有已连接设备的信息
- **MQTT服务（MqttService）**：作为托管服务整合MQTT功能
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="mqtt集成">Mqtt集成</h1>
<p>集成mqtt，我们首先得明白什么是mqtt:</p>
<blockquote>
<p>MQTT（Message Queuing Telemetry Transport）是一种轻量级、基于发布-订阅模式的消息传输协议，适用于资源受限的设备和低带宽、高延迟或不稳定的网络环境。适用于物联网（IoT）和设备通信场景，能够实现传感器、执行器和其它设备之间的高效通信。</p>
</blockquote>
<p>了解几个概念：</p>
<p><strong>MQTT 客户端、MQTT Broker、发布-订阅模式、主题、QoS</strong></p>
<p>正片开始：</p>
<h3 id="1--系统架构">1.  系统架构：</h3>
<p><img src="https://img2024.cnblogs.com/blog/2426827/202503/2426827-20250318105516119-1521288311.svg" alt="image" loading="lazy"></p>
<h3 id="2-组件">2. 组件：</h3>
<ul>
<li><strong>MQTT配置（MqttConfig）</strong>：管理MQTT连接的配置信息</li>
<li><strong>基础MQTT客户端（BaseMqttClient）</strong>：提供MQTT客户端的基础功能</li>
<li><strong>设备端MQTT客户端（DeviceMqttClient）</strong>：面向设备的MQTT客户端实现</li>
<li><strong>服务器端MQTT客户端（ServerMqttClient）</strong>：面向服务器的MQTT客户端实现</li>
<li><strong>设备池（DevicePool）</strong>：管理所有已连接设备的信息</li>
<li><strong>MQTT服务（MqttService）</strong>：作为托管服务整合MQTT功能</li>
</ul>
<h3 id="3-主题topic设计">3. <strong>主题（Topic）设计</strong></h3>
<ul>
<li>
<p><strong>设备相关</strong>：</p>
<ul>
<li><code>device/{deviceId}/info</code>：设备信息</li>
<li><code>device/{deviceId}/status</code>：设备状态</li>
<li><code>device/{deviceId}/heartbeat</code>：设备心跳</li>
<li><code>device/{deviceId}/command</code>：设备命令</li>
<li><code>device/{deviceId}/command/response</code>：设备命令响应</li>
</ul>
</li>
<li>
<p><strong>会议相关</strong>：</p>
<ul>
<li><code>meeting/broadcast</code>：会议广播</li>
</ul>
</li>
<li>
<p><strong>公告相关</strong>：</p>
<ul>
<li><code>announcement/broadcast</code>：公告广播</li>
</ul>
</li>
</ul>
<h3 id="4-数据模型">4. 数据模型</h3>
<h4 id="41-设备信息deviceinfo">4.1 设备信息（DeviceInfo）</h4>
<p>设备的基本信息，包括：</p>
<ul>
<li>设备ID（DeviceId）</li>
<li>设备名称（DeviceName）</li>
<li>设备类型（DeviceType）</li>
<li>IP地址（IpAddress）</li>
<li>MAC地址（MacAddress）</li>
<li>软件版本（SoftwareVersion）</li>
<li>硬件版本（HardwareVersion）</li>
<li>设备状态（Status）</li>
<li>最后在线时间（LastOnlineTime）</li>
<li>最后心跳时间（LastHeartbeatTime）</li>
<li>描述（Description）</li>
<li>位置（Location）</li>
<li>额外属性（Properties）</li>
</ul>
<h4 id="42-设备状态devicestatus">4.2 设备状态（DeviceStatus）</h4>
<p>设备可能的状态包括：</p>
<ul>
<li>离线（Offline）</li>
<li>在线（Online）</li>
<li>忙碌（Busy）</li>
<li>其他自定义状态</li>
</ul>
<h4 id="43-设备命令devicecommand">4.3 设备命令（DeviceCommand）</h4>
<p>发送给设备的命令，包括：</p>
<ul>
<li>命令ID（CommandId）</li>
<li>设备ID（DeviceId）</li>
<li>命令类型（CommandType）</li>
<li>命令参数（Parameters）</li>
<li>超时时间（Timeout）</li>
<li>创建时间（CreateTime）</li>
</ul>
<h4 id="44-会议信息meetinginfo">4.4 会议信息（MeetingInfo）</h4>
<p>会议相关信息，用于会议通知。</p>
<h4 id="45-公告信息announcementinfo">4.5 公告信息（AnnouncementInfo）</h4>
<p>系统公告信息，用于广播通知。</p>
<h3 id="5-工作流程">5. 工作流程：</h3>
<h4 id="51-服务启动流程">5.1 服务启动流程</h4>
<ol>
<li>
<p>程序启动时，通过依赖注入注册MQTT相关服务：</p>
<pre><code class="language-csharp">// 注册MQTT服务
service.AddSingleton&lt;MqttConfig&gt;();
service.AddSingleton&lt;DevicePool&gt;();
service.AddSingleton&lt;MqttService&gt;();
service.AddHostedService(provider =&gt; provider.GetRequiredService&lt;MqttService&gt;());
</code></pre>
</li>
<li>
<p><code>MqttService</code>作为<code>IHostedService</code>启动：</p>
<ul>
<li>加载MQTT配置</li>
<li>创建服务器端MQTT客户端</li>
<li>注册各种事件处理器</li>
<li>连接到MQTT服务器</li>
<li>启动心跳检查定时器</li>
<li>启动设备清理定时器</li>
</ul>
</li>
</ol>
<h4 id="52-设备连接流程">5.2 设备连接流程</h4>
<ol>
<li>设备通过<code>DeviceMqttClient</code>连接到MQTT代理</li>
<li>连接成功后，设备发布自身信息到<code>device/{deviceId}/info</code>主题</li>
<li>服务器的<code>ServerMqttClient</code>收到设备信息，将设备添加到<code>DevicePool</code></li>
<li>触发设备上线事件，执行相关业务逻辑</li>
</ol>
<h4 id="53-设备心跳流程">5.3 设备心跳流程</h4>
<ol>
<li>设备定期发送心跳消息到<code>device/{deviceId}/heartbeat</code>主题</li>
<li>服务器接收心跳消息，更新设备的最后心跳时间</li>
<li>服务器的心跳检查定时器定期检查设备心跳超时情况</li>
<li>对于心跳超时的设备，将其状态更新为离线，并触发设备离线事件</li>
</ol>
<h4 id="54-命令发送流程">5.4 命令发送流程</h4>
<ol>
<li>应用程序通过<code>MqttService.SendCommandAsync()</code>发送命令</li>
<li>命令通过<code>ServerMqttClient</code>发布到<code>device/{deviceId}/command</code>主题</li>
<li>设备接收命令，执行相应操作</li>
<li>设备将命令执行结果发布到<code>device/{deviceId}/command/response</code>主题</li>
<li>服务器接收命令响应，触发命令响应事件</li>
</ol>
<h4 id="55-会议和公告广播流程">5.5 会议和公告广播流程</h4>
<ol>
<li>应用程序通过<code>MqttService</code>发布会议或公告信息</li>
<li>信息通过<code>ServerMqttClient</code>发布到对应广播主题</li>
<li>设备接收广播信息，触发相应事件进行处理</li>
</ol>
<h4 id="56-设备清理流程">5.6 设备清理流程</h4>
<ol>
<li>设备清理定时器定期执行清理任务（默认每天凌晨2点）</li>
<li>清理长时间离线（默认24小时以上）的设备记录</li>
</ol>
<h3 id="6-错误处理与重连机制">6. 错误处理与重连机制</h3>
<ol>
<li>MQTT客户端断开连接后，自动启动重连定时器</li>
<li>根据配置的重连间隔进行重连尝试</li>
<li>如果配置了最大重连次数，达到次数后停止重连；如果设置为0，则无限重连</li>
<li>所有通信操作都包含错误处理和日志记录</li>
</ol>
<p>MQTT配置选项包括：</p>
<ul>
<li>服务器地址（ServerAddress）：默认为"localhost"</li>
<li>服务器端口（Port）：默认为1883</li>
<li>客户端ID（ClientId）：默认自动生成</li>
<li>用户名（Username）和密码（Password）：用于认证</li>
<li>是否使用TLS/SSL（UseTls）：默认为false</li>
<li>连接超时时间（ConnectionTimeout）：默认为10秒</li>
<li>心跳间隔（KeepAliveInterval）：默认为60秒</li>
<li>重连间隔（ReconnectInterval）：默认为5秒</li>
<li>最大重连次数（MaxReconnectAttempts）：默认为0（无限重连）</li>
</ul>
<blockquote>
<p>设计思路讲完了，下面一篇文章讲解实现方式（以C#为例）</p>
</blockquote>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.0006900339525462963" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-18 10:57">2025-03-18 10:36</span>&nbsp;
<a href="https://www.cnblogs.com/ProsperousEnding">ProsperousEnding</a>&nbsp;
阅读(<span id="post_view_count">15</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18778447" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18778447);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18778447', targetLink: 'https://www.cnblogs.com/ProsperousEnding/p/18778447', title: 'Mqtt集成与设计' })">举报</a>
</div>
        