
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/12lisu/p/18663607" title="发布于 2025-01-10 11:02">
    <span role="heading" aria-level="2">MyBatis中的 10 个宝藏技巧！</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="前言">前言</h2>
<p>说到 MyBatis，很多小伙伴都会用，但未必用得“惊艳”。</p>
<p>实际上，这个轻量级的持久层框架还有很多隐藏的“宝藏技巧”。</p>
<p>如果你能掌握这些技巧，不但能让开发更高效，还能避免掉入一些常见的“坑”。</p>
<p>今天就从浅入深，分享 10 个让人眼前一亮的 MyBatis 开发技巧，每一个都配上具体的场景和代码示例，务求通俗易懂，希望对你会有所帮助。</p>
<p>(我最近开源了一个基于 SpringBoot+Vue+uniapp 的商城项目，欢迎访问和star。)[<a href="https://gitee.com/dvsusan/susan_mall" target="_blank" rel="noopener nofollow">https://gitee.com/dvsusan/susan_mall</a>]</p>
<h2 id="1-灵活使用动态-sql">1. 灵活使用动态 SQL</h2>
<p>很多小伙伴在写 SQL 的时候，喜欢直接用拼接字符串的方式，比如：</p>
<pre><code class="language-java">String sql = "SELECT * FROM user WHERE 1=1";
if (name != null) {
    sql += " AND name = '" + name + "'";
}
</code></pre>
<p>这种写法不仅麻烦，而且安全性很差（容易引发 SQL 注入）。</p>
<p>MyBatis 的动态 SQL 是专门为解决这种问题设计的，你可以用 <code>if</code>、<code>choose</code>、<code>foreach</code> 等标签来动态构造 SQL。</p>
<p><strong>示例：动态条件查询</strong></p>
<pre><code class="language-xml">&lt;select id="findUser" resultType="User"&gt;
    SELECT * FROM user
    WHERE 1=1
    &lt;if test="name != null and name != ''"&gt;
        AND name = #{name}
    &lt;/if&gt;
    &lt;if test="age != null"&gt;
        AND age = #{age}
    &lt;/if&gt;
&lt;/select&gt;
</code></pre>
<p>这个代码的好处是，SQL 逻辑清晰，不会因为某个参数为空就导致整个 SQL 报错。</p>
<h2 id="2-善用-resultmap-自定义结果映射">2. 善用 <code>resultMap</code> 自定义结果映射</h2>
<p>有些小伙伴会遇到这样的问题：数据库表字段是下划线命名，但 Java 对象是驼峰命名。比如 <code>user_name</code> 对应 <code>userName</code>。如果直接用默认的 <code>resultType</code>，MyBatis 是无法自动映射的。</p>
<p>这个时候，用 <code>resultMap</code> 就能完美解决。</p>
<p><strong>示例：自定义结果映射</strong></p>
<pre><code class="language-xml">&lt;resultMap id="userResultMap" type="User"&gt;
    &lt;id column="id" property="id"/&gt;
    &lt;result column="user_name" property="userName"/&gt;
    &lt;result column="age" property="age"/&gt;
&lt;/resultMap&gt;

&lt;select id="getUserById" resultMap="userResultMap"&gt;
    SELECT id, user_name, age FROM user WHERE id = #{id}
&lt;/select&gt;
</code></pre>
<p>有了 <code>resultMap</code>，再复杂的字段映射都可以轻松搞定。</p>
<h2 id="3-利用-foreach-实现批量操作">3. 利用 <code>foreach</code> 实现批量操作</h2>
<p>有些小伙伴可能会遇到这种需求：传入一个 ID 列表，查询所有匹配的用户信息。如果用拼接字符串的方式生成 <code>IN</code> 条件，不但代码丑，还容易踩坑。</p>
<p>MyBatis 提供了 <code>foreach</code> 标签，可以优雅地处理这种场景。</p>
<p><strong>示例：批量查询</strong></p>
<pre><code class="language-xml">&lt;select id="findUsersByIds" resultType="User"&gt;
    SELECT * FROM user WHERE id IN
    &lt;foreach item="id" collection="idList" open="(" separator="," close=")"&gt;
        #{id}
    &lt;/foreach&gt;
&lt;/select&gt;
</code></pre>
<p>传入的 <code>idList</code> 是一个 <code>List</code> 或数组，MyBatis 会自动帮你展开为 <code>IN (1, 2, 3)</code> 这样的格式，完全不用担心语法问题。</p>
<h2 id="4-mybatis-plus-的分页功能">4. MyBatis-Plus 的分页功能</h2>
<p>很多小伙伴在做分页的时候，习惯自己写 <code>LIMIT</code> 的 SQL，这样不仅麻烦，还容易出错。</p>
<p>其实，用 MyBatis-Plus 的分页插件能省不少事。</p>
<p><strong>示例：MyBatis-Plus 分页功能</strong></p>
<pre><code class="language-java">Page&lt;User&gt; page = new Page&lt;&gt;(1, 10); // 第 1 页，每页 10 条
IPage&lt;User&gt; userPage = userMapper.selectPage(page, null);
System.out.println("总记录数：" + userPage.getTotal());
System.out.println("当前页数据：" + userPage.getRecords());
</code></pre>
<p>只需引入分页插件，就能轻松完成分页操作，简直不要太爽。</p>
<h2 id="5-使用-mapper的接口代理">5. 使用 <code>@Mapper</code>的接口代理</h2>
<p>有些小伙伴觉得 XML 文件太多太麻烦，其实 MyBatis 支持纯注解的开发模式，尤其是对于简单的 SQL，非常方便。</p>
<p><strong>示例：注解方式查询</strong></p>
<pre><code class="language-java">@Mapper
public interface UserMapper {

    @Select("SELECT * FROM user WHERE id = #{id}")
    User getUserById(int id);

    @Insert("INSERT INTO user(name, age) VALUES(#{name}, #{age})")
    void addUser(User user);
}
</code></pre>
<p>用这种方式，可以完全省掉 XML 配置，代码更加简洁。</p>
<h2 id="6-二级缓存">6. 二级缓存</h2>
<p>MyBatis 内置了一级缓存（SqlSession 范围内），但对于多次查询的场景，可以开启二级缓存来提升性能。</p>
<p><strong>示例：开启二级缓存</strong></p>
<pre><code class="language-xml">&lt;configuration&gt;
    &lt;settings&gt;
        &lt;setting name="cacheEnabled" value="true"/&gt;
    &lt;/settings&gt;
&lt;/configuration&gt;

&lt;mapper namespace="com.example.mapper.UserMapper"&gt;
    &lt;cache/&gt;
    &lt;select id="getUserById" resultType="User"&gt;
        SELECT * FROM user WHERE id = #{id}
    &lt;/select&gt;
&lt;/mapper&gt;
</code></pre>
<p>开启二级缓存后，同一个 Mapper 下的查询会自动命中缓存，大幅提高性能。</p>
<h2 id="7-动态表名切换">7. 动态表名切换</h2>
<p>有些多租户系统需要在运行时切换表名，比如按租户分表。这种情况下，可以用 MyBatis 的动态 SQL 特性来实现。</p>
<p><strong>示例：动态表名</strong></p>
<pre><code class="language-xml">&lt;select id="getDataFromDynamicTable" resultType="Map"&gt;
    SELECT * FROM ${tableName} WHERE id = #{id}
&lt;/select&gt;
</code></pre>
<p>在调用时传入 <code>tableName</code> 参数，MyBatis 会动态替换表名。</p>
<h2 id="8-用-typehandler-自定义类型处理">8. 用 <code>typeHandler</code> 自定义类型处理</h2>
<p>有些小伙伴可能遇到过这种场景：数据库存的是 <code>1/0</code>，但在代码里想用 <code>true/false</code> 表示。</p>
<p>这种情况可以通过自定义 <code>typeHandler</code> 来实现。</p>
<p><strong>示例：自定义 TypeHandler</strong></p>
<pre><code class="language-java">@MappedTypes(Boolean.class)
@MappedJdbcTypes(JdbcType.INTEGER)
public class BooleanTypeHandler extends BaseTypeHandler&lt;Boolean&gt; {

    @Override
    public void setNonNullParameter(PreparedStatement ps, int i, Boolean parameter, JdbcType jdbcType) throws SQLException {
        ps.setInt(i, parameter ? 1 : 0);
    }

    @Override
    public Boolean getNullableResult(ResultSet rs, String columnName) throws SQLException {
        return rs.getInt(columnName) == 1;
    }
}
</code></pre>
<p>在 MyBatis 配置中注册这个 <code>typeHandler</code>，就可以实现自动类型转换了。</p>
<h2 id="9-日志调试快速排查问题">9. 日志调试，快速排查问题</h2>
<p>开发中经常需要排查 SQL 执行的问题，这时 MyBatis 的日志功能非常好用。</p>
<p>通过配置，可以轻松打印出完整的 SQL 和参数。</p>
<p><strong>示例：开启日志</strong></p>
<pre><code class="language-xml">&lt;configuration&gt;
    &lt;settings&gt;
        &lt;setting name="logImpl" value="STDOUT_LOGGING"/&gt;
    &lt;/settings&gt;
&lt;/configuration&gt;
</code></pre>
<p>日志会输出类似下面的内容：</p>
<pre><code>==&gt;  Preparing: SELECT * FROM user WHERE id = ?
==&gt; Parameters: 1(Integer)
&lt;==      Total: 1
</code></pre>
<p>有了这些日志，排查问题再也不头疼了。</p>
<h2 id="10-多数据源支持">10. 多数据源支持</h2>
<p>当系统需要连接多个数据库时，可以通过 MyBatis 的多数据源配置轻松搞定。</p>
<p><strong>示例：配置多数据源</strong></p>
<pre><code class="language-java">@Configuration
@MapperScan(basePackages = "com.example.mapper", sqlSessionTemplateRef = "sqlSessionTemplate1")
public class DataSourceConfig1 {
    @Bean(name = "dataSource1")
    public DataSource dataSource() {
        return DataSourceBuilder.create().build();
    }

    @Bean(name = "sqlSessionFactory1")
    public SqlSessionFactory sqlSessionFactory(@Qualifier("dataSource1") DataSource dataSource) throws Exception {
        SqlSessionFactoryBean bean = new SqlSessionFactoryBean();
        bean.setDataSource(dataSource);
        return bean.getObject();
    }

    @Bean(name = "sqlSessionTemplate1")
    public SqlSessionTemplate sqlSessionTemplate(@Qualifier("sqlSessionFactory1") SqlSessionFactory sqlSessionFactory) {
        return new SqlSessionTemplate(sqlSessionFactory);
    }
}
</code></pre>
<p>通过类似的配置，就可以轻松切换多个数据源。</p>
<h2 id="总结">总结</h2>
<p>MyBatis 的魅力在于简单、高效，但很多时候我们用得太“基础”，没有发挥它的全部潜力。</p>
<p>希望这 10 个技巧能帮你更高效地使用 MyBatis，也让你的代码看起来更“惊艳”。</p>
<p>如果觉得有帮助，记得收藏分享！</p>
<h2 id="最后说一句求关注别白嫖我">最后说一句(求关注，别白嫖我)</h2>
<p>如果这篇文章对您有所帮助，或者有所启发的话，帮忙关注一下我的同名公众号：苏三说技术，您的支持是我坚持写作最大的动力。</p>
<p><img src="https://img2024.cnblogs.com/blog/2238006/202501/2238006-20250110110205598-1778300774.png" alt="" loading="lazy"></p>
<p>求一键三连：点赞、转发、在看。</p>
<p>关注公众号：【苏三说技术】，在公众号中回复：进大厂，可以免费获取我最近整理的10万字的面试宝典，好多小伙伴靠这个宝典拿到了多家大厂的offer。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.3019428181828704" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-10 11:02">2025-01-10 11:02</span>&nbsp;
<a href="https://www.cnblogs.com/12lisu">苏三说技术</a>&nbsp;
阅读(<span id="post_view_count">268</span>)&nbsp;
评论(<span id="post_comment_count">3</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18663607" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18663607);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18663607', targetLink: 'https://www.cnblogs.com/12lisu/p/18663607', title: 'MyBatis中的 10 个宝藏技巧！' })">举报</a>
</div>
        