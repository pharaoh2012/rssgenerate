
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/chopper-poet/p/18760260" title="发布于 2025-03-09 09:19">
    <span role="heading" aria-level="2">代码照进现实：对公司管理策略的技术性解构</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p><img src="https://img2024.cnblogs.com/blog/846817/202503/846817-20250309091615653-406233123.png" alt="" loading="lazy"></p>
<div style="text-align: right">&nbsp;春节期间拍摄于南京</div>
<div style="text-align: right">&nbsp;</div>
<div style="text-align: left">上学的时候觉得计算机专业的一些理论晦涩难懂，跟现实世界的关联太少，每当遇到一些精妙的设计时都会发出一种感叹：究竟是什么脑袋才能想出这么有意思的东西。</div>
<div style="text-align: left">&nbsp;</div>
<p><span><span>一晃工作十年，阅历渐丰，隐约发现其实社会中的一些现象其实和软件工程的一些理念有异曲同工之妙，今天就先拿笔者听闻的一些公司管理策略（套路）来简单说说。</span></span>&nbsp;</p>
<h2><span>事件1-<span data-pm-slice="1 1 [&quot;para&quot;,{&quot;tagName&quot;:&quot;h3&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;font-weight: var(--ds-font-weight-strong);line-height: 1.5;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;}]">系统吞吐量困境</span></span></h2>
<p><span style="color: rgba(153, 153, 153, 1)">这两年部门走了不少人，但是活似乎没有减少，那如何维持产出不变呢？</span></p>
<p><span>&nbsp;</span></p>
<p><span><span>拿软件行业常说的吞吐量、延迟、容量这三个概念来类比一翻。<span><span>吞吐量指的是单位时间内能处理的任务数，比如我们常说的qps、tps，简称<span><strong>T</strong><span>，延迟指的是完成单个任务所需要的时间，比如接口的响应时间是1s，简称<span><strong>L</strong><span>，容量指的是硬件资源，比如我们说的4核8g，简称<span><strong>C</strong><span>，三者之间的大致关系是：<span><span><strong>T=C/L</strong><span>，从这个公式来看要提高T有种办法，增加C或者减小L。</span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>&nbsp;</p>
<p><span><span>回到现实世界来看，在不可能加人的情况下（<span><strong>增加容量</strong><span>）那就只能提高工作效率了（<span><strong>减小延迟</strong><span>），牛马可怜兮兮的跟领导说：我的键盘已经敲的冒火星，真的再不能加活了，领导淡淡的回复：加把劲，克服一下。</span></span></span></span></span></span></p>
<p>&nbsp;</p>
<p><span><span>牛马想破脑袋，终于做出了一个艰难的决策：一切从简，单测省去、注释不写、基本可用，通过这些简化延迟确实小了。</span></span></p>
<p>&nbsp;</p>
<p><span><span>不幸的是领导很快发现了这一切，将牛马召集在一起意味深长的对大家说：我知道大家都很忙，但是我们也要保证质量，单测要做，Code Review也要加强，几个00后的牛马情绪激动的说：真的没时间啊，领导简单的回复：加把劲，克服一下。</span></span></p>
<p><span>&nbsp;</span></p>
<p><span><span>牛马黔驴技穷，减小L遇到了瓶颈，那就只能想办法<span><strong>增加容量</strong><span>（加班）来维持这脆弱的平衡，<span data-pm-slice="1 1 [&quot;para&quot;,{&quot;tagName&quot;:&quot;p&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;font-size: var(--ds-md-font-size);line-height: var(--ds-md-line-height);&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;}]"><span>完美复刻了互联网公司「既要压工期又要零故障」的经典<span><strong>死锁</strong><span>。</span></span></span></span></span></span></span></span></p>
<h2><span>事件2-<span data-pm-slice="1 1 [&quot;para&quot;,{&quot;tagName&quot;:&quot;h3&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;font-weight: var(--ds-font-weight-strong);line-height: 1.5;&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;}]">年薪包的资源超卖算法</span></span></h2>
<p><span style="color: rgba(153, 153, 153, 1)">如今大多数公司的薪酬都是年薪包制度，月薪可能只有1万，但是年薪包可以达到20万，刚入行的时候一直不解：为什么问了我期望年薪还要问我期望base，直接年薪除12不就得了。</span></p>
<p>&nbsp;</p>
<p><span><span>出一个思考题，公司的年利润只有35万但是招聘两个年薪包20万的人干活，最后公司能盈利吗？</span></span></p>
<p><span>&nbsp;</span></p>
<p><span><span>在学习k8s时有些文章提到为了资源利用最大化，我们可以将request设置为容器运行所需的最小资源，这样集群中就可以运行更多的容器<span>（<span data-pm-slice="1 1 [&quot;para&quot;,{&quot;tagName&quot;:&quot;p&quot;,&quot;attributes&quot;:{&quot;style&quot;:&quot;font-size: var(--ds-md-font-size);line-height: var(--ds-md-line-height);&quot;},&quot;namespaceURI&quot;:&quot;http://www.w3.org/1999/xhtml&quot;}]"><span><strong>正如企业将年薪包拆解为底薪+不确定年终奖，利用人员流动的统计规律实现人力成本超卖</strong>）<span><span>，但是带来的问题是可能会存在超卖，如果在同一时间点大量容器都开始申请request外的资源，就会引起资源争抢、OOMKill等风险，然而大多数情况是由于业务特性的不同，这种同一时刻申请资源的情况不多。</span></span></span></span></span></span></span></p>
<p><span>&nbsp;</span></p>
<p><span><span>回到刚才的思考题，公司利润只有35万，员工支出要40万，似乎不能盈利，但如果有以下情况呢：</span></span></p>
<p><span><span>1.中途有人离职（提前释放资源），即使后来有人接替，不满一年好多没有年终奖（业务特性不同，不会同一时刻申请资源）；</span></span></p>
<p><span><span>2.两个人都坚持到了最后，降薪（减小request和limit）或者末尾淘汰（OOMKill)。</span></span></p>
<p>&nbsp;</p>
<p><span style="color: rgba(136, 136, 136, 1)">周末的早晨闲来无事，天马行空的写点乱七八糟的。</span></p>
<p><img src="https://img2024.cnblogs.com/blog/846817/202503/846817-20250309091249782-2024938577.png" alt="" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p>&nbsp;</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.0495437568587963" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-09 09:20">2025-03-09 09:19</span>&nbsp;
<a href="https://www.cnblogs.com/chopper-poet">踩刀诗人</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18760260" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18760260);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18760260', targetLink: 'https://www.cnblogs.com/chopper-poet/p/18760260', title: '代码照进现实：对公司管理策略的技术性解构' })">举报</a>
</div>
        