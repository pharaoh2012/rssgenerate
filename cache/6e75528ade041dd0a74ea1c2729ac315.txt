
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/taotaonihao/p/19017026" title="发布于 2025-08-01 17:05">
    <span role="heading" aria-level="2">S32K148+LAN8720+lwip移植+modbus-tcpip调试</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p>计划一个月写一篇技术博客的，七月份又忘了，最近忙着调试新的硬件平台和移植新的功能，今天把七月份内容补上。</p>
<p>主要内容：S32K148+LAN8720+lwip移植+modbus调试</p>
<p>本次调试难点：</p>
<p>1）基于S32K148芯片调试lwip内容网上资料特别少，大部分底层知识需要自己查资料，看datasheet，查官方论坛；</p>
<p>2）S32K148+LAN8720这种组合更少，网上资料90%内容都是STM32+LAN8720，但是这部分内容需要参考学习，对于新平台有很大的帮助；</p>
<p>3）需要了解lwip硬件实施架构，phy电路，lwip协议栈知识以及软件移植；</p>
<p>4）modbus-tcpip协议基础知识</p>
<p>其中第3点和第4点，我觉得可以找到很详细的资料学习，第1点和第2点更多涉及硬件电路，需要较强的能力和经验，也是本次调试耗时最长的部分。</p>
<p>接下来我从硬件电路和软件移植两个大方面总结记录整个过程。</p>
<p>1 S32K148硬件电路</p>
<p>这部分主要定义好ENET的引脚资源，主要包括RMII接口或MII接口、SMI接口，这里需要注意一个引脚RMII_REF_CLK，这个引脚我找了好久在datasheet上一个角落发现，它把RMII_TX_CLK复用为RMII_REF_CLK</p>
<p>其实这部分电路也涉及到PHY电路，因为tcpip通信有一个重要信号就是时钟信号，这个时钟信号和RMII/MII接口，100M/10M网速有关，也和PHY芯片有关。本次时钟信号采用的PHY信号输出到S32K148，并把它作为RMII_REF_CLK。</p>
<p>2 LAN8720电路</p>
<p>　　　　　　　　<img alt="1754037252494" width="561" height="222" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1437179/202508/1437179-20250801163418971-671157638.png" class="lazyload"></p>
<p>&nbsp;</p>
<p>2.1 RMII接口；</p>
<p>　　根据引脚引脚定义分别连接S32K148和LAN8720</p>
<p>2.2 电源部分主要包含3.3V和1.2V</p>
<p>　　3.3V电源都是常规电路，主电源LDO输出一个3.3V给LAN8720，</p>
<p>　　1.2V电源非常重要，涉及到你是采用外部1.2V，还是内部1.2V，绝大多数设计都是采取8720本身自带的1内部1.2V稳压。这里面就涉及到如果采用内部1.2V，8720的LED1引脚需要下拉接地，注意VDDCR可以直接悬空</p>
<p>2.3 时钟信号+晶振电路</p>
<p>RMII接口输出100M数据信号需要一个50M的时钟信号，8720本身可以通过25M晶振倍频到50M，然后在输出给S32K148，这部分可参考别的资料。</p>
<p>2.4 LED电路</p>
<p>　　LED1引脚下拉接地或上拉接电源，涉及1.2V电源使用选择，我们直接拉地</p>
<p>　　LED2引脚下拉接地或上拉接电源，涉及CLK_IN_mode和CLK_OUT_mode，我们直接拉地</p>
<p>2.5 SMI接口</p>
<p>　　MDC和MDIO按照引脚连接</p>
<p>2.6 RJ45接口</p>
<p>　　根据项目需求，选好RJ45插座</p>
<p>2.7 硬件复位</p>
<p>　　复位引脚连到S32K148的一个gpio</p>
<p>2.8 PHY地址</p>
<p>&nbsp;&nbsp;　　　　　　<img alt="1754036707020" width="607" height="61" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1437179/202508/1437179-20250801162511424-447539987.png" class="lazyload"></p>
<p>3 软件准备</p>
<p>3.1 开发环境　　</p>
<p>　　S32DS for ARM</p>
<p>3.2 基础配置</p>
<p>　　3.2.1引脚</p>
<p>　　　　　　　　<img alt="1754035673971" width="357" height="313" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1437179/202508/1437179-20250801160757605-1167648488.png" class="lazyload"></p>
<p>　　3.2.2时钟</p>
<p>　　　　　　　　<img alt="1754037131341" width="679" height="348" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1437179/202508/1437179-20250801163215919-1214229875.png" class="lazyload"></p>
<p>3.2 lwip移植</p>
<p>　　S32K148使用S32DS for ARM开发环境可以直接配置外设，其中包括配置ENET和TCPIP中间件，</p>
<p>　　3.2.1 ENET配置跟着官方教程即可</p>
<p>　　3.2.2 tcpip配置</p>
<p>　　　　本次调试使用裸机配置，删除FreeRTOS组件即可切换成裸机配置，后续Datalink、IP Network、Transport都可参考官方例程，IP层有一个ICMP协议需要打勾，后续调试ping的原理就是根据ICMP协议自动收发的</p>
<p>　　　　　　　　<img alt="1754037432492" width="516" height="234" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1437179/202508/1437179-20250801163721590-1802750243.png" class="lazyload"></p>
<p>　　　　　　　　<img alt="1754038655971" width="577" height="171" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1437179/202508/1437179-20250801165739384-2010299428.png" class="lazyload"></p>
<p>　　　　　　　　<img alt="1754038683279" width="581" height="373" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1437179/202508/1437179-20250801165806954-1882203736.png" class="lazyload"></p>
<p>　　　　　　　　<img alt="1754038716095" width="615" height="227" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1437179/202508/1437179-20250801165839762-1542222467.png" class="lazyload"></p>
<p>&nbsp;　　app中你可以选择UDP_ECHO(UDP回环)，或者TCP_ECHO</p>
<p>　　3.3初始化</p>
<p>　　初次调试，可直接参考官方test.c文件，学习里面初始化过程，调用哪些函数（需要具备lwip基础知识才能看懂），后续再根据自己实际项目，重新做一个初始化函数</p>
<p>　　重点函数netif_add()；enet_ethernetif_init();enetif_low_level_init();</p>
<p>　　SMI介质接口管理主要就是读取PHY寄存器和写入PHY寄存器，这部分很简单</p>
<p>　　3.4 调用函数</p>
<p>　　本次可以直接调用官方例程函数，先调试通，后续博客章节我在慢慢梳理这部分内容，包括初始化函数、tcpip服务器模式、tcpip客户端模式</p>
<p>　　3.5 lwip测试</p>
<p>　　根据你的IP地址，ping 192.168.100</p>
<p>　　　　　　　　<img alt="1754038577452" width="322" height="278" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1437179/202508/1437179-20250801165633530-120115814.png" class="lazyload"></p>
<p>　　　　　　　　<img alt="1754038505260" width="692" height="362" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1437179/202508/1437179-20250801165510750-445294214.png" class="lazyload"></p>
<p>　4 modbus协议</p>
<p>　　其实熟悉modbus-rtu协议之后，调试modbus-tcpip会非常简单，之前博客我写过modbus-rtu的移植过程，但是此次modbus-tcpip我会换一种思路</p>
<p>　　我用modbus-poll做的测试，右下角就是IP地址和modbus-tcpip的端口</p>
<p><img alt="1754038902295" width="956" height="504" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1437179/202508/1437179-20250801170148503-1282354573.png" class="lazyload"></p>
<p>&nbsp;</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.001388888888888889" data-date-updated="2025-08-01 17:07">2025-08-01 17:05</span>&nbsp;
<a href="https://www.cnblogs.com/taotaonihao">涛哥nihao</a>&nbsp;
阅读(<span id="post_view_count">95</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19017026);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19017026', targetLink: 'https://www.cnblogs.com/taotaonihao/p/19017026', title: 'S32K148+LAN8720+lwip移植+modbus-tcpip调试' })">举报</a>
</div>
        