
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/mrye/p/18856880" title="发布于 2025-05-01 20:28">
    <span role="heading" aria-level="2">领域驱动的事实与谬误 一 DDD 与 MVC</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p>本文有以下几个目的：</p>
<ol>
<li>让新手少交智商税，少浪费时间看一些软文。</li>
<li>普及一个基本概念：了解一项观点的提出年代和最初初衷，才能更好地掌握其精粹。</li>
<li>我想指出市场上一些误人子弟的软文。</li>
</ol>
<blockquote>
<p>首先说明：文中所说的谬误并非原书的谬误，而是很多网上水军写的软文在不断误人子弟、传播错误认知。</p>
</blockquote>
<h3 id="mvc到底在说什么">MVC到底在说什么</h3>
<p>  MVC（Model-View-Controller）架构由挪威计算机科学家<strong>Trygve Mikkjel Heyerdahl Reenskaug</strong>于1979年在施乐帕克研究中心（Xerox PARC）访问期间提出。这一架构最初是为Smalltalk编程语言设计的，旨在解决图形用户界面（GUI）开发中数据管理与用户交互的复杂性问题。当时Smalltalk的GUI需要支持动态交互（如用户操作实时更新数据），传统单体架构难以维护，MVC通过解耦输入-处理-输出流程，首次实现了界面与逻辑的分离。</p>
<p>  Reenskaug认为，GUI应用需要将不同功能模块解耦，以应对数据复杂性和用户交互的动态性。他提出将软件系统划分为三个核心组件：</p>
<ul>
<li><strong>模型（Model）</strong>&nbsp;：封装数据和<strong>业务逻辑</strong>，独立于界面展示，例如数据库结构或业务规则。</li>
<li><strong>视图（View）</strong>：负责用户界面的呈现，直接与用户交互，例如窗口、按钮等可视化元素。</li>
<li><strong>控制器（Controller）</strong>：协调模型与视图的交互，处理用户输入并更新模型状态，例如按钮点击后的逻辑判断。</li>
</ul>
<p>  MVC的Model本身包含基础业务逻辑（如数据验证），但复杂业务场景下需独立的应用逻辑层（如Service层）来组织流程，这与DDD的领域建模形成互补。因此，四层架构（Model-View-Controller-Service）的出现是企业级开发的演进，而非MVC原生缺陷。</p>
<h3 id="ddd到底在说什么">DDD到底在说什么</h3>
<p>  DDD由<strong>Eric Evans</strong>&nbsp;在2003年出版的经典著作《领域驱动设计：软件核心复杂性应对之道》中系统提出。其诞生源于对<strong>复杂业务系统开发困境</strong>的反思：</p>
<ol>
<li>
<p><strong>传统开发的痛点</strong>：</p>
<ul>
<li>软件模型与真实业务领域脱节，导致需求频繁变更时难以维护；</li>
<li>技术团队与领域专家（如业务分析师、行业专家）沟通低效，术语不统一，模型设计偏离实际业务逻辑；</li>
<li>当业务复杂度高（如金融、供应链、医疗等领域）时，传统开发方法（如数据驱动设计、贫血模型）无法有效管理复杂性，代码逐渐沦为"意大利面条"。</li>
</ul>
</li>
<li>
<p><strong>核心目标</strong>&nbsp;：</p>
<p>Evans认为，应对复杂业务系统的关键在于将<strong>领域知识作为设计的核心</strong>，通过建立清晰、准确的领域模型，让技术实现紧密贴合业务本质，从而提升系统的可维护性和扩展性。</p>
</li>
</ol>
<ul>
<li style="list-style-type: none">
<ul>
<li><strong>战略设计</strong>：通过限界上下文（Bounded Context）划分业务边界，明确领域模型的适用范围（如电商中的"订单域"与"支付域"），解决业务与技术对齐问题；</li>
<li><strong>战术设计</strong>：通过实体、值对象、聚合根等工具实现领域模型，确保业务规则封装在代码中。</li>
</ul>
</li>
</ul>
<h3 id="ddd与mvc并不冲突">DDD与MVC并不冲突</h3>
<p>  在传统MVC架构下，解决GUI问题时，我们会设计GUI层面的技术模型，再根据模型渲染界面。同理，解决业务逻辑问题时，也可以设计一个领域模型，再基于模型开发业务逻辑。</p>
<p><img src="https://img2024.cnblogs.com/blog/395759/202505/395759-20250501202409739-520809316.png" alt="" class="medium-zoom-image" height="357" width="865"></p>
<p>  从图中不难看出：<strong>领域驱动设计的核心是教你如何设计业务逻辑</strong>, 注意，是"业务逻辑设计"，而非技术分层设计。原因很简单：DDD原书明确指出，这不是一本教你写代码的书，而是教你如何应对复杂软件的方法论。</p>
<p>  无论哪个层面的技术开发，都可以<strong>先建模，再基于模型开发</strong>, 这是几乎所有行业都在使用的通用手段。</p>
<h3 id="ddd本来就不存在统一的代码规范原书也未给出具体实现手段">DDD本来就不存在统一的代码规范，原书也未给出具体实现手段</h3>
<p>  回到上图，你会发现：任何一个技术维度的修改，都不需要其他维度的直接支持，甚至可以单独调整某个维度------这正是DDD在战术设计上想表达的理念。但这部分内容被放在原书的最后章节，不仅因为前面的章节是前提，更因为代码架构并非DDD的核心。</p>
<p><strong>DDD的核心是什么？</strong></p>
<ul>
<li><strong>统一语言</strong>：团队（包括业务专家）使用一致的术语描述业务规则（如"订单已支付"对应领域事件）；</li>
<li><strong>领域模型</strong>：围绕业务概念设计代码，而非围绕数据库或技术框架；</li>
<li><strong>解耦思想</strong>：通过聚合根、仓储等模式隔离业务逻辑与技术细节。</li>
</ul>
<p><strong>代码规范的真相</strong>&nbsp;：</p>
<p>  DDD不强制规定具体代码结构和命名，但业界基于实践形成了通用分层原则（如四层架构：表现层、应用层、领域层、基础设施层）。例如：</p>
<ul>
<li>领域层（Domain Layer）封装核心业务逻辑，包含实体、值对象、聚合根；</li>
<li>应用层（Application Layer）协调领域对象，处理事务和权限；</li>
<li>基础设施层（Infrastructure Layer）处理数据库、消息队列等技术细节。</li>
</ul>
<p><strong>争议与选择</strong>&nbsp;：</p>
<p>  业界关于代码结构的最大争议是<strong>按功能分包 vs 按技术层分包</strong>：</p>
<ul>
<li>按功能分包（如<code>order/</code>&nbsp;<code>user/</code>）利于业务模块隔离，适合大型复杂系统；</li>
<li>按技术层分包（如<code>controller/</code>&nbsp;<code>service/</code>）便于技术栈管理，适合中小型项目。 两者无绝对优劣，需结合团队规模和业务复杂度选择, 但是无论如何每一个项目团队都应该做的，就是对业务进行建模分析，对团队开发形成整齐划一的技术规范。</li>
</ul>
<h3 id="附录一些可以参考的代码和技术文章">附录一些可以参考的代码和技术文章</h3>
<ul>
<li><a href="http://www.javapractices.com/topic/TopicAction.do?Id=205" target="_blank" rel="noopener nofollow">Package by feature, not layer</a></li>
<li><a href="https://github.com/c5ms/modern-ddd-cargotracker" target="_blank" rel="noopener nofollow">现代化领域驱动设计演示</a></li>
<li><a href="https://github.com/citerus/dddsample-core" target="_blank" rel="noopener nofollow">领域驱动设计演示</a></li>
</ul>
</div>
<div id="MySignature" role="contentinfo">
    天行健君子以自强不息。
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.14838956115393517" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-01 20:47">2025-05-01 20:28</span>&nbsp;
<a href="https://www.cnblogs.com/mrye">有泥土的路</a>&nbsp;
阅读(<span id="post_view_count">15</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18856880);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18856880', targetLink: 'https://www.cnblogs.com/mrye/p/18856880', title: '领域驱动的事实与谬误 一 DDD 与 MVC' })">举报</a>
</div>
        