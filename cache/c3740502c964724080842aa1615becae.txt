
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/dennyLee2025/p/18672246" title="发布于 2025-01-15 09:35">
    <span role="heading" aria-level="2">掌握设计模式--策略模式</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="策略模式strategy-pattern">策略模式（Strategy Pattern）</h2>
<p>策略模式是一种行为设计模式，它定义了一<code>系列算法</code>，并将<code>每个算法封装</code>起来，使它们<code>可以相互替换</code>，从而让算法的变化独立于使用它们的客户端代码。</p>
<p>策略模式的<strong>核心</strong>在于为算法的实现提供统一的接口，并通过动态选择具体实现来实现灵活性。</p>
<h3 id="组成部分">组成部分</h3>
<ol>
<li>
<p><strong>Context（上下文类）：</strong><br>
持有对某个策略对象的引用，并定义客户端需要的接口，负责在运行时<code>动态切换</code>策略。</p>
</li>
<li>
<p><strong>Strategy（策略接口）：</strong><br>
定义所有支持的算法的公共接口。</p>
</li>
<li>
<p><strong>ConcreteStrategy（具体策略实现）：</strong><br>
实现 <code>Strategy</code> 接口的具体算法。</p>
</li>
</ol>
<h2 id="代码示例">代码示例</h2>
<p>以下是使用策略模式实现不同的支付方式的动态切换。信用卡支付和微信支付的动态切换。</p>
<h3 id="类图">类图</h3>
<p><img src="https://img2024.cnblogs.com/blog/1209017/202501/1209017-20250115093513018-1085212344.png" alt="image" loading="lazy"></p>
<h3 id="策略接口">策略接口</h3>
<pre><code class="language-java">// 策略接口
public interface PaymentStrategy {
    void pay(int amount);
}
</code></pre>
<h3 id="具体策略实现">具体策略实现</h3>
<pre><code class="language-java">// 具体策略实现 - 信用卡支付
public class CreditCardPayment implements PaymentStrategy {
    private String cardNumber;

    public CreditCardPayment(String cardNumber) {
        this.cardNumber = cardNumber;
    }

    @Override
    public void pay(int amount) {
        System.out.println("交易金额 " + amount + " 使用的卡号: " + cardNumber);
    }
}
// 具体策略实现 - 微信支付
public class WxPayment implements PaymentStrategy {
    private String phoneNumber;

    public WxPayment(String phoneNumber) {
        this.phoneNumber = phoneNumber;
    }

    @Override
    public void pay(int amount) {
        System.out.println("交易金额 " + amount + " 使用的手机号: " + phoneNumber);
    }
}
</code></pre>
<h3 id="上下文">上下文</h3>
<pre><code class="language-java">// 上下文类
public class PaymentContext {
    private PaymentStrategy strategy;

    public PaymentContext(PaymentStrategy strategy) {
        this.strategy = strategy;
    }

    public void setStrategy(PaymentStrategy strategy) {
        this.strategy = strategy;
    }

    public void executePayment(int amount) {
        strategy.pay(amount);
    }
}
</code></pre>
<h3 id="测试代码">测试代码</h3>
<pre><code class="language-java">public class StrategyPatternDemo {
    public static void main(String[] args) {
        // 使用信用卡支付
        PaymentContext context = new PaymentContext(new CreditCardPayment("1234-5678-9012-3456"));
        context.executePayment(100);

        // 切换到Wx支付
        context.setStrategy(new WxPayment("13112345678"));
        context.executePayment(200);
    }
}
</code></pre>
<h3 id="测试结果">测试结果</h3>
<blockquote>
<p>交易金额 100 使用的卡号: 1234-5678-9012-3456</p>
<p>交易金额 200 使用的手机号: 13112345678</p>
</blockquote>
<h2 id="优缺点和适用场景">优缺点和适用场景</h2>
<h3 id="优点">优点</h3>
<ol>
<li>
<p><strong>开放-封闭原则：</strong> 新的策略可以在不修改现有代码的情况下添加。</p>
</li>
<li>
<p><strong>提高代码灵活性：</strong> 可以动态地在运行时选择算法。</p>
</li>
<li>
<p><strong>消除冗长的条件分支：</strong> 使用策略模式代替 <code>if-else</code> 或 <code>switch-case</code> 条件判断。</p>
</li>
</ol>
<h3 id="缺点">缺点</h3>
<ol>
<li>
<p><strong>类的数量增加：</strong> 每个策略需要定义一个类，可能导致类数量增多。</p>
</li>
<li>
<p><strong>客户端需要知道所有策略：</strong> 客户端必须了解策略的作用并选择合适的策略。</p>
</li>
</ol>
<h3 id="适用场景">适用场景</h3>
<ol>
<li>多个算法只有在行为上稍有不同的情况下。</li>
<li>需要动态选择算法或者行为的情况下。</li>
<li>避免使用条件语句（<code>if-else</code> 或 <code>switch-case</code>）来管理算法时。</li>
</ol>
<h3 id="实际应用">实际应用</h3>
<ol>
<li>数据加密算法选择（AES、RSA等）</li>
<li>数据压缩算法（ZIP、GZIP）</li>
<li>不同类型的文件解析（JSON、XML、YAML）</li>
</ol>
<h2 id="策略模式与其他模式的对比">策略模式与其他模式的对比</h2>
<ol>
<li>
<p><strong>状态模式：</strong> 状态模式的行为是状态驱动的，而策略模式的行为是由客户端选择驱动的。</p>
</li>
<li>
<p><strong>工厂模式：</strong> 工厂模式用于创建对象，而策略模式关注的是行为的动态切换。</p>
</li>
<li>
<p><strong>桥接模式：</strong> 桥接模式侧重于分离抽象和实现及多维度的扩展；而策略模式用于封装算法或行为，单维度的扩展。</p>
</li>
<li>
<p><strong>装饰模式：</strong> 使用一系列装饰器类，通过组合的方式增强对象的功能。装饰器的核心在于“增强”。</p>
</li>
<li>
<p><strong>策略模式：</strong> 客户端在运行时选择合适的策略来完成特定任务。策略模式的核心在于“替换”。</p>
</li>
</ol>
<h2 id="总结">总结</h2>
<p>策略设计模式定义了一系列算法（策略），将每个算法封装到独立的策略类中，并通过上下文类动态地选择和使用不同的策略，从而让算法的变化独立于使用算法的客户端。</p>
<p><img src="https://img2024.cnblogs.com/blog/1209017/202501/1209017-20250115093532304-263175902.gif" alt="image" loading="lazy"></p>
<p>需要查看往期设计模式文章的，可以在个人主页中或者文章开头的集合中查看，可关注我，持续更新中。。。</p>
<hr>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzI5NDM5NDM1NA==&amp;mid=2247486066&amp;idx=1&amp;sn=e8c7423105ddd0562f50892010941efc&amp;scene=21#wechat_redirect" target="_blank" rel="noopener nofollow">超实用的SpringAOP实战之日志记录</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzI5NDM5NDM1NA==&amp;mid=2247485873&amp;idx=1&amp;sn=08b58de61c716e5c57ff2fddb947f0d8&amp;scene=21#wechat_redirect" target="_blank" rel="noopener nofollow">2023年下半年软考考试重磅消息</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzI5NDM5NDM1NA==&amp;mid=2247485909&amp;idx=1&amp;sn=e20f3b7b413310ca78f90c13305972ab&amp;scene=21#wechat_redirect" target="_blank" rel="noopener nofollow">通过软考后却领取不到实体证书？</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzI5NDM5NDM1NA==&amp;mid=2247485802&amp;idx=1&amp;sn=863cf239124b98d39ec551b6cb67845c&amp;scene=21#wechat_redirect" target="_blank" rel="noopener nofollow">计算机算法设计与分析（第5版）</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzI5NDM5NDM1NA==&amp;mid=2247485015&amp;idx=1&amp;sn=862bc2b379726b89cdb396ec0d325cc0&amp;scene=21#wechat_redirect" target="_blank" rel="noopener nofollow">Java全栈学习路线、学习资源和面试题一条龙</a></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzI5NDM5NDM1NA==&amp;mid=2247485956&amp;idx=1&amp;sn=57407d9f7921254ba19ed70fa3bd6a2d&amp;chksm=ec62ca99db15438f13f2cf96d17a3e282028fa7960af56126caec68fb6eafd46d6e04a10ad0c&amp;scene=21#wechat_redirect" target="_blank" rel="noopener nofollow">软考证书=职称证书？</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzI5NDM5NDM1NA==&amp;mid=2247485837&amp;idx=1&amp;sn=b9b17dfd252882468b8eea31012df6fc&amp;scene=21#wechat_redirect" target="_blank" rel="noopener nofollow">软考中级--软件设计师毫无保留的备考分享</a></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.6995217811331018" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-15 09:36">2025-01-15 09:35</span>&nbsp;
<a href="https://www.cnblogs.com/dennyLee2025">渊渟岳</a>&nbsp;
阅读(<span id="post_view_count">178</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18672246" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18672246);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18672246', targetLink: 'https://www.cnblogs.com/dennyLee2025/p/18672246', title: '掌握设计模式--策略模式' })">举报</a>
</div>
        