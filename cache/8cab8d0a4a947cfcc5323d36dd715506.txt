
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/bokong/p/18924367" title="发布于 2025-06-11 18:26">
    <span role="heading" aria-level="2">在Linux下使用wxWidgets进行跨平台GUI开发（二）</span>
    

</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="wxwidgets常见辅助类的应用示例">wxWidgets常见辅助类的应用示例</h1>
<p>wxWidgets提供了一系列功能强大的辅助类（Helper Classes），涵盖了字符串处理、文件操作、XML解析、数据流、数据库和网络通信等功能，这些类为跨平台GUI开发提供了基础工具支持，帮助开发者完成各种任务。</p>
<p>wxWidgets库可用于创建控制台和图形界面（GUI）应用程序。本文将通过一些控制台应用程序的示例，阐述部分核心辅助类的使用方法。</p>
<h2 id="console示例">Console示例</h2>
<p>好，那现在让我们跟着<a href="https://zetcode.com/gui/wxwidgets/helperclasses/" title="ZetCode" target="_blank" rel="noopener nofollow">ZetCode</a>教程上的示例。第一个非常简单的控制台程序<br>
一个非常简单的控制台程序：</p>
<pre><code class="language-cpp">// console.cpp
#include &lt;wx/wx.h&gt; // 必须得加上这个头文件
#include &lt;wx/string.h&gt;

int main(int argc, char **argv)
{
    wxPuts(wxT("A wxWidgets console application"));
}
</code></pre>
<p>对应的CMakeLists.txt文件：</p>
<pre><code class="language-cmake">cmake_minimum_required(VERSION 3.10)
project(console)

find_package(wxWidgets REQUIRED COMPONENTS core)
include(${wxWidgets_USE_FILE})

add_executable(${PROJECT_NAME} console.cpp)
target_link_libraries(${PROJECT_NAME} ${wxWidgets_LIBRARIES})
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR})
</code></pre>
<p>然后因为现在是VS Code开发，所以需要改一个调试配置文件launch.json，找到</p>
<pre><code>"program": "${workspaceFolder}/hello",
更改为
"program": "${workspaceFolder}/console",
现在你应该能顺利构建编译运行，这将在控制台终端输出
A wxWidgets console application
好的，现在我们将console.cpp和CMakeLists.txt文件复制到Windows平台，是的，我们的目的是要跨平台的，现在我们来做这件事。
在Windows上找到一个工作空间（注意路径字符规范），还是创建test文件夹，把要复制的两个文件拷贝到里面。
进入cmd命令行，还是将构建文件放到build下。
cmake -B build
</code></pre>
<p>然后生成可执行文件大概会出错，需修改CMakeLists.txt文件（确保跨平台）：</p>
<pre><code class="language-cmake">cmake_minimum_required(VERSION 3.10)
project(console)

if(WIN32)
    find_package(wxWidgets 3.2.4 REQUIRED COMPONENTS core base adv html xml net aui stc xrc gl media qa richtext propgrid ribbon webview)
else()
    find_package(wxWidgets 3.2.4 REQUIRED COMPONENTS core base)
endif()

include(${wxWidgets_USE_FILE})
add_executable(${PROJECT_NAME} console.cpp)
target_link_libraries(${PROJECT_NAME} ${wxWidgets_LIBRARIES})

if(MSVC)
    target_include_directories(${PROJECT_NAME} PUBLIC "${wxWidgets_INCLUDE_DIRS}/msvc")
endif()

set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR})
</code></pre>
<p>现在可以构建并生成可执行文件了，在cmd中键入<br>
<code>cmake --build ./build</code><br>
这会根据默认构建系统在build文件夹里生成程序。如果你安装了Visual Studio则默认使用msvc工具链，你将会在build下看到一个sln解决方案，你也可以打开解决方案在IDE下生成可执行程序。</p>
<h2 id="wxstring类示例">wxString类示例</h2>
<p>wxString是一个表示字符串的类。在下面的示例中，我们定义了三个wxString对象。我们通过加法运算将这些字符串组合成一个新的字符串。</p>
<h3 id="字符串连接">字符串连接</h3>
<pre><code class="language-cpp">// addition.cpp
#include &lt;wx/wx.h&gt;
#include &lt;wx/string.h&gt;

int main(int argc, char **argv)
{
    wxString str1 = wxT("Linux");
    wxString str2 = wxT("Operating");
    wxString str3 = wxT("System");
    wxString str = str1 + wxT(" ") + str2 + wxT(" ") + str3;
    wxPuts(str);
}
</code></pre>
<p>输出：</p>
<pre><code>Linux Operating System
</code></pre>
<p>你可以练习使用CMake生成这个可执行程序，当然你可以在Linux终端使用</p>
<pre><code>g++ addition.cpp `wx-config --cxxflags --libs` -o addition
</code></pre>
<p>更简洁地生成可执行文件。</p>
<h3 id="字符串格式化">字符串格式化</h3>
<pre><code class="language-cpp">// formatted.cpp
#include &lt;wx/wx.h&gt;
#include &lt;wx/string.h&gt;

int main(int argc, char **argv)
{
    int flowers = 21;
    wxString str;
    str.Printf(wxT("There are %d red roses."), flowers);
    wxPuts(str);
}
</code></pre>
<p>输出：</p>
<pre><code>There are 21 red roses.
</code></pre>
<p>以下示例演示了如何检查一个字符串是否包含另一个字符串，为此我们使用了Contains方法。（注：根据编程语言或框架的不同，类似功能可能有不同命名，如includes()、find()、contains()等，但作用相同。）</p>
<h3 id="字符串包含检查">字符串包含检查</h3>
<pre><code class="language-cpp">// contains.cpp
#include &lt;wx/wx.h&gt;
#include &lt;wx/string.h&gt;

int main(int argc, char **argv)
{
    wxString str = wxT("The history of my life");
    if (str.Contains(wxT("history"))) {
        wxPuts(wxT("Contains!"));
    }
    if (!str.Contains(wxT("plain"))) {
        wxPuts(wxT("Does not contain!"));
    }
}
</code></pre>
<p>输出：</p>
<pre><code>Contains!
Does not contain!
</code></pre>
<p>Len方法返回字符串中的字符数。（补充说明：对于多字节字符（如中文），不同语言处理方式可能不同，有些按字符数统计，有些按字节数统计）</p>
<h3 id="字符串长度">字符串长度</h3>
<pre><code class="language-cpp">// length.cpp
#include &lt;wx/wx.h&gt;
#include &lt;wx/string.h&gt;

int main(int argc, char **argv)
{
    wxString str = wxT("The history of my life");
    wxPrintf(wxT("The string has %d characters\n"), str.Len());
}
</code></pre>
<p>输出：</p>
<pre><code>The string has 22 characters
</code></pre>
<h3 id="大小写转换">大小写转换</h3>
<pre><code class="language-cpp">// cases.cpp
#include &lt;wx/wx.h&gt;
#include &lt;wx/string.h&gt;

int main(int argc, char **argv)
{
    wxString str = wxT("The history of my life");
    wxPuts(str.MakeLower());
    wxPuts(str.MakeUpper());
}
</code></pre>
<p>输出：</p>
<pre><code>the history of my life
THE HISTORY OF MY LIFE
</code></pre>
<h2 id="实用工具函数">实用工具函数</h2>
<p>（编程概念说明：这类函数通常指不依赖对象状态、独立完成特定任务的辅助函数）<br>
wxWidgets 提供了多个实用的工具函数，用于执行进程、获取用户主目录或获取操作系统名称。<br>
在以下示例中，我们执行了 ls 命令（仅限 Unix 系统），为此我们使用了 wxShell 函数。</p>
<h3 id="执行shell命令">执行shell命令</h3>
<pre><code class="language-cpp">// shell.cpp
#include &lt;wx/wx.h&gt;
#include &lt;wx/string.h&gt;
#include &lt;wx/utils.h&gt;

int main(int argc, char **argv)
{
    wxShell(wxT("ls -l"));
}
</code></pre>
<p>这将输出当前路径下的文件统计信息。<br>
接下来我们将获取用户主目录、操作系统名称、用户名、主机名以及内存空闲总量。</p>
<h3 id="获取系统信息">获取系统信息</h3>
<pre><code class="language-cpp">// system.cpp
#include &lt;wx/wx.h&gt;
#include &lt;wx/string.h&gt;
#include &lt;wx/utils.h&gt;

int main(int argc, char **argv)
{
    wxPuts(wxGetHomeDir());
    wxPuts(wxGetOsDescription());
    wxPuts(wxGetUserName());
    wxPuts(wxGetFullHostName());
    long mem = wxGetFreeMemory().ToLong();
    wxPrintf(wxT("Memory: %ld\n"), mem);
}
</code></pre>
<p>这将输出系统及用户等统计信息。</p>
<h2 id="时间和日期处理">时间和日期处理</h2>
<p>在wxWidgets中，我们提供了多个用于处理日期和时间的类。<br>
该示例展示了以不同格式显示的当前日期或时间。</p>
<h3 id="当前日期时间格式化">当前日期时间格式化</h3>
<pre><code class="language-cpp">// datetime.cpp
#include &lt;wx/wx.h&gt;
#include &lt;wx/datetime.h&gt;

int main(int argc, char **argv)
{
    wxDateTime now = wxDateTime::Now();
    wxString date1 = now.Format();
    wxString date2 = now.Format(wxT("%X"));
    wxString date3 = now.Format(wxT("%x"));
    wxPuts(date1);
    wxPuts(date2);
    wxPuts(date3);
}
</code></pre>
<p>输出示例：</p>
<pre><code>Wed Jun 11 16:18:09 2025
16:18:09
06/11/25
</code></pre>
<h3 id="不同城市时间">不同城市时间</h3>
<pre><code class="language-cpp">// datetime2.cpp
#include &lt;wx/wx.h&gt;
#include &lt;wx/datetime.h&gt;

int main(int argc, char **argv)
{
    wxDateTime now = wxDateTime::Now();
    wxPrintf(wxT(" Tokyo: %s\n"), now.Format(wxT("%a %T"), wxDateTime::GMT9).c_str());
    wxPrintf(wxT(" Moscow: %s\n"), now.Format(wxT("%a %T"), wxDateTime::MSD).c_str());
    wxPrintf(wxT("Budapest: %s\n"), now.Format(wxT("%a %T"), wxDateTime::CEST).c_str());
    wxPrintf(wxT(" London: %s\n"), now.Format(wxT("%a %T"), wxDateTime::WEST).c_str());
    wxPrintf(wxT("New York: %s\n"), now.Format(wxT("%a %T"), wxDateTime::EDT).c_str());
}
</code></pre>
<p>输出示例：</p>
<pre><code> Tokyo: Wed 17:23:43
 Moscow: Wed 12:23:43
Budapest: Wed 10:23:43
 London: Wed 09:23:43
New York: Wed 04:23:43
</code></pre>
<h3 id="日期跨度">日期跨度</h3>
<p>以下示例展示了如何向日期/时间添加日期跨度。我们将当前时间增加一个月。</p>
<pre><code class="language-cpp">// datespan.cpp
#include &lt;wx/wx.h&gt;
#include &lt;wx/datetime.h&gt;

int main(int argc, char **argv)
{
    wxDateTime now = wxDateTime::Now();
    wxString date1 = now.Format(wxT("%B %d %Y"));
    wxPuts(date1);
    wxDateSpan span(0, 1);
    wxDateTime then = now.Add(span);
    wxString date2 = then.Format(wxT("%B %d %Y"));
    wxPuts(date2);
}
</code></pre>
<p>输出示例：</p>
<pre><code>June 11 2025
July 11 2025
</code></pre>
<h2 id="文件操作">文件操作</h2>
<p>wxWidgets 提供了多个类来简化文件操作。这是对文件的底层访问，与流式操作不同。<br>
在以下示例中，我们使用 wxFile 类创建新文件并写入数据，同时会检测文件是否已打开。需注意：创建文件时会自动保持打开状态。</p>
<h3 id="创建和写入文件">创建和写入文件</h3>
<pre><code class="language-cpp">// createfile.cpp
#include &lt;wx/wx.h&gt;
#include &lt;wx/file.h&gt;

int main(int argc, char **argv)
{
    wxString str = wxT("You make me want to be a better man.\n");
    wxFile file;
    file.Create(wxT("quote"), true);
    if (file.IsOpened())
        wxPuts(wxT("the file is opened"));
    file.Write(str);
    file.Close();
    if (!file.IsOpened())
        wxPuts(wxT("the file is not opened"));
}
</code></pre>
<p>终端交互示例：</p>
<pre><code>$ ls quote
ls: quote: No such file or directory
$ ./createfile
the file is opened
the file is not opened
$ cat quote
You make me want to be a better man.
</code></pre>
<p>wxTextFile 是一个简易的文本文件操作类，支持以行为单位处理文本文件。相比 wxFile 类，使用这个类会更加便捷。<br>
在接下来的示例中，我们将输出文件的行数、首行和末行内容，最终读取并显示文件的全部内容。</p>
<h3 id="文本文件操作">文本文件操作</h3>
<pre><code class="language-cpp">// readfile.cpp
#include &lt;wx/wx.h&gt;
#include &lt;wx/textfile.h&gt;

int main(int argc, char **argv)
{
    wxTextFile file(wxT("test.c"));
    file.Open();
    wxPrintf(wxT("Number of lines: %d\n"), file.GetLineCount());
    wxPrintf(wxT("First line: %s\n"), file.GetFirstLine().c_str());
    wxPrintf(wxT("Last line: %s\n"), file.GetLastLine().c_str());
    wxPuts(wxT("----------------------------------------"));
    wxString s;
    for ( s = file.GetFirstLine(); !file.Eof();
        s = file.GetNextLine() )
    {
        wxPuts(s);
    }
    file.Close();
}
</code></pre>
<p>test.c内容：</p>
<pre><code>#include &lt;glib.h&gt;
#include &lt;glib/gstdio.h&gt;

int main() {
    g_mkdir("/home/vronskij/test", S_IRWXU);
}
</code></pre>
<p>输出：</p>
<pre><code>Number of lines: 8
First line: #include &lt;glib.h&gt;
Last line: }
----------------------------------------
#include &lt;glib.h&gt;
#include &lt;glib/gstdio.h&gt;

int main() {
    g_mkdir("/home/vronskij/test", S_IRWXU);
}
</code></pre>
<h3 id="目录枚举">目录枚举</h3>
<p>在以下示例中，我们将打印当前工作目录下的所有文件和目录。</p>
<pre><code class="language-cpp">// dir.cpp
#include &lt;wx/wx.h&gt;
#include &lt;wx/dir.h&gt;
#include &lt;wx/filefn.h&gt;

int main(int argc, char **argv)
{
    wxDir dir(wxGetCwd());
    wxString file;
    bool cont = dir.GetFirst(&amp;file, wxEmptyString, wxDIR_FILES | wxDIR_DIRS);
    while (cont) {
        wxPuts(file);
        cont = dir.GetNext(&amp;file);
    }
}
</code></pre>
<p>输出示例：</p>
<pre><code>dir
dir.cpp
temp
console
basic.cpp
basic
quote
createfile
console.cpp
basic.cpp~
test.c
console.cpp~
......
</code></pre>
<p>辅助类的应用示例暂且介绍到这里了，后续进行正式的wxWidgets开发说明。</p>

</div>
<div class="clear"></div>

		</div>
		<div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-06-11 18:27">2025-06-11 18:26</span>&nbsp;
<a href="https://www.cnblogs.com/bokong">南岩亦凛汀</a>&nbsp;
阅读(<span id="post_view_count">22</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18924367);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18924367', targetLink: 'https://www.cnblogs.com/bokong/p/18924367', title: '在Linux下使用wxWidgets进行跨平台GUI开发（二）' })">举报</a>
</div>
	