
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/chingho/p/18632352" title="发布于 2024-12-26 11:29">
    <span role="heading" aria-level="2">盘点5个常用的.Net依赖注入框架！</span>
    

</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>盘点5个常用的依赖注入框架，特别是前面2个。</p>
<p><strong>1、Microsoft.Extensions.DependencyInjection</strong></p>
<p>这是.Net Core框架本身内置集成的，我们只需引入Microsoft.Extensions.DependencyInjection，就可以直接使用。</p>
<pre><code>using DependencyInjectionSample.Interfaces;
using DependencyInjectionSample.Services;

var builder = WebApplication.CreateBuilder();

builder.Services.AddRazorPages();

builder.Services.AddScoped&lt;IMyDependency, MyDependency&gt;();

var app = builder.Build();
</code></pre>
<p><strong>2、AutoFac</strong></p>
<p><a href="https://github.com/autofac/Autofac" target="_blank" rel="noopener nofollow">https://github.com/autofac/Autofac</a></p>
<p><strong>Star：</strong> 4.4K</p>
<p>一个高级的依赖注入（DI）框架，用于.NET应用程序。它允许开发者以一种类型安全、声明式的方式编写代码，从而实现控制反转（IoC）。Autofac旨在提供强大的功能，同时保持易用性和灵活性。</p>
<pre><code>var builder = WebApplication.CreateBuilder();

// 注册组件
builder.RegisterType&lt;MyService&gt;().As&lt;IMyService&gt;();
builder.RegisterType&lt;AnotherService&gt;().As&lt;IAnotherService&gt;().InstancePerLifetimeScope();

// 构建容器
var app= builder.Build();

// 解析服务
var myService = app.Resolve&lt;IMyService&gt;();
</code></pre>
<p><strong>3、Ninject</strong></p>
<p><a href="https://github.com/ninject/Ninject" target="_blank" rel="noopener nofollow">https://github.com/ninject/Ninject</a></p>
<p><strong>Star：</strong> 2.7K</p>
<p>一个为 .NET 应用程序设计的闪电般快速、超轻量级的依赖注入器。它帮助你将应用程序分割成一系列松耦合、高内聚的组件，然后以灵活的方式将它们重新组合在一起。通过使用 Ninject 来支持你的软件架构，你的代码将变得更容易编写、重用、测试和修改。</p>
<pre><code>public class WarriorModule : NinjectModule
{
    public override void Load() 
    {
        this.Bind&lt;IWeapon&gt;().To&lt;Sword&gt;();
    }
}
</code></pre>
<p><strong>4、SimpleInjector</strong></p>
<p><a href="https://github.com/simpleinjector/SimpleInjector" target="_blank" rel="noopener nofollow">https://github.com/simpleinjector/SimpleInjector</a></p>
<p><strong>Star：</strong> 1.2K</p>
<p>一个为.NET开发者设计的高效、灵活且用户友好的依赖注入库，它不仅简化了复杂的API，提供了精选的功能集，还通过其独特的装饰器注册和容器验证功能，帮助开发者遵循最佳实践，轻松构建可维护的应用程序，成为区分于其他DI容器的首选。</p>
<pre><code>// 1. 创建容器
var container = new Container();

// 2. 配置容器（注册服务）
container.Register&lt;IUserRepository, SqlUserRepository&gt;(Lifestyle.Transient);
container.Register&lt;ILogger, MailLogger&gt;(Lifestyle.Singleton);   
container.Register&lt;UserController&gt;();

// 3. 验证容器配置：
container.Verify();

// 4. 注册容器为MVC的依赖解析器
DependencyResolver.SetResolver(new SimpleInjectorDependencyResolver(container));

</code></pre>
<p><strong>5、Windsor</strong></p>
<p><a href="https://github.com/castleproject/Windsor" target="_blank" rel="noopener nofollow">https://github.com/castleproject/Windsor</a></p>
<p><strong>Star：</strong> 1.5K</p>
<p>一个功能丰富、成熟稳定的控制反转（IoC）容器框架，专为 .NET 平台设计，旨在简化依赖注入并支持高度可配置的组件管理。</p>
<pre><code>// 创建容器
var container = new WindsorContainer();

// 添加和配置组件
container.Install(FromAssembly.This());

// 解析并配置根组件及其所有依赖项
var king = container.Resolve&lt;IKing&gt;();
king.RuleTheCastle();

// 清理容器，应用程序退出
container.Dispose();
</code></pre>
<p>- End -</p>
<p><strong>更多开源项目：</strong>  <a href="https://github.com/bianchenglequ/NetCodeTop" target="_blank" rel="noopener nofollow">https://github.com/bianchenglequ/NetCodeTop</a></p>

</div>
<div class="clear"></div>

		</div>
		<div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.780280811568287" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2024-12-26 11:29">2024-12-26 11:29</span>&nbsp;
<a href="https://www.cnblogs.com/chingho">chingho</a>&nbsp;
阅读(<span id="post_view_count">405</span>)&nbsp;
评论(<span id="post_comment_count">2</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18632352" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18632352);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18632352', targetLink: 'https://www.cnblogs.com/chingho/p/18632352', title: '盘点5个常用的.Net依赖注入框架！' })">举报</a>
</div>
	