
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/huangSir-devops/p/18876361" title="发布于 2025-06-07 13:33">
    <span role="heading" aria-level="2">自签名证书工具cfssl详解</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="概述">概述</h2>
<p>GitHub地址：<a href="https://github.com/cloudflare/cfssl" target="_blank" rel="noopener nofollow">https://github.com/cloudflare/cfssl</a><br>
官方地址：<a href="https://pkg.cfssl.org" target="_blank" rel="noopener nofollow">https://pkg.cfssl.org</a></p>
<p>CFSSL（CloudFlare's PKI and TLS toolkit）由 CloudFlare 用go语言开发的一个开源工具，用于证书签名、验证和管理。</p>
<p>生成自签证书的方式有多种，CFSSL支持签发三种类型的证书：‌client证书、‌server证书以及集群成员之间的peer证书。推荐使用cfssl工具或者openssl工具来生成，openssl也是开源的证书生成工具。</p>
<h2 id="生成证书基本概念">生成证书基本概念</h2>
<h3 id="ca证书颁发机构">CA（证书颁发机构）</h3>
<p>CA（Certificate Authority）是 PKI（公钥基础设施）体系的核心信任锚点，负责：</p>
<ul>
<li>证书签名：验证申请者身份后，使用自己的私钥为其颁发数字证书。</li>
<li>信任分发：通过公开的根证书（Root CA），让客户端信任其签署的所有证书。</li>
<li>证书管理：包括证书颁发、更新、撤销和状态查询（OCSP/CRL）。</li>
</ul>
<p>CA证书类型类型分为三类，分别是：</p>
<ul>
<li>根 CA（Root CA）：<br>
自签名证书，位于信任链顶端。<br>
通常离线存储，极少直接签署终端用户证书。</li>
<li>中间 CA（Intermediate CA）：<br>
由根 CA 签署，用于分担证书签署工作。<br>
即使私钥泄露，影响范围也仅限于其签署的证书。</li>
<li>终端 CA：<br>
直接签署服务器 / 客户端证书的 CA。</li>
</ul>
<p>安全规范实践：</p>
<ul>
<li>分层设计：使用根 CA → 中间 CA → 终端证书的三级结构。</li>
<li>私钥保护：根 CA 私钥必须离线存储（如 HSM 硬件安全模块）。</li>
<li>定期轮换：<strong>中间 CA 证书有效期通常为 3-5 年</strong>，需定期更新。</li>
</ul>
<h3 id="csr证书签名请求">CSR（证书签名请求）</h3>
<p>CSR（Certificate Signing Request）是客户端向 CA 提交的申请文件，创建证书前需要先生成 CSR。</p>
<p>CSR文件通常包含以下信息：</p>
<ul>
<li>公钥：申请者生成的公钥。</li>
<li>身份信息：如域名、组织名称、国家代码等。</li>
<li>扩展字段：如 SAN（Subject Alternative Name）、密钥用途等。</li>
</ul>
<p>生产CSR的注意事项：</p>
<ul>
<li>私钥绝对保密：CSR 生成过程中产生的私钥需严格保密，不可泄露。</li>
<li>信息准确性：CSR 中的域名（CN/SAN）必须与服务器实际域名一致，否则 TLS 握手会失败。</li>
</ul>
<h3 id="证书配置文件">证书配置文件</h3>
<p>主要用来定义证书的使用场景、有效期等参数，CFSSL使用 JSON 格式（如 ca-config.json）的证书配置文件</p>
<p>三者工作流程：<br>
<img src="https://img2024.cnblogs.com/blog/3468887/202505/3468887-20250514170708757-608406275.png" alt="image" loading="lazy"></p>
<h2 id="linux安装cfssl工具">Linux安装cfssl工具</h2>
<p>cfssl依赖三个工具包，分别是：cfssl、cfssljson、cfss-certinfo</p>
<ul>
<li>
<p>cfssl：cfssl 是工具集的核心，提供了证书生命周期管理的所有功能：</p>
<ul>
<li>证书生成：创建自签名证书、CA 证书和用户证书。</li>
<li>证书签名：处理证书签名请求（CSR）并颁发证书。</li>
<li>配置管理：使用 JSON 配置文件定义证书策略和使用场景。</li>
<li>CA 管理：创建和管理证书颁发机构（CA）层次结构。</li>
<li>OCSP/CRL：生成在线证书状态协议（OCSP）响应和证书撤销列表（CRL）。</li>
</ul>
</li>
<li>
<p>cfssljson：专门用于处理 cfssl 输出的 JSON 数据，主要功能包括：</p>
<ul>
<li>解析 JSON 输出：将 cfssl 生成的 JSON 格式证书、密钥和 CSR 转换为单独的文件。</li>
<li>文件保存：自动创建并保存证书（.pem）、私钥（.key）和 CSR（.csr）文件。</li>
</ul>
</li>
<li>
<p>cfssl-certinfo：用于查看和验证证书的详细信息，功能包括：</p>
<ul>
<li>证书解析：显示证书的元数据（如有效期、颁发者、主题、公钥等）。</li>
<li>证书链验证：检查证书的签名链是否有效。</li>
<li>格式转换：将证书以人类可读的格式输出。</li>
</ul>
</li>
</ul>
<p>下载工具</p>
<pre><code>curl -L -o /usr/local/bin/cfssl https://pkg.cfssl.org/R1.2/cfssl_linux-amd64
curl -L -o /usr/local/bin/cfssljson https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64
curl -L -o /usr/local/bin/cfssl-certinfo https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64
</code></pre>
<p>授予执行权限</p>
<pre><code>chmod +x /usr/local/bin/cfssl*
</code></pre>
<h2 id="cfssl-gencert命令详解"><code>cfssl gencert</code>命令详解</h2>
<p>cfssl gencert 是 CloudFlare PKI 工具集中用于生成证书签名请求（CSR）和证书的核心命令。</p>
<h3 id="核心参数">核心参数：</h3>
<ul>
<li>-ca [path]：指定用于签名的 CA 证书文件路径（PEM 格式）。</li>
</ul>
<pre><code>示例：-ca=ca.pem
</code></pre>
<ul>
<li>-ca-key [path]：指定 CA 的私钥文件路径（PEM 格式）。</li>
</ul>
<pre><code>示例：-ca-key=ca-key.pem
</code></pre>
<ul>
<li>-config [path]：指定证书签名配置文件（JSON 格式），定义证书的有效期、用途等策略。</li>
</ul>
<pre><code>示例：-config=ca-config.json
</code></pre>
<ul>
<li>-profile [name]：指定使用配置文件中的哪个签名策略。对应CA配置文件中的profiles字段，其值可以为server、client、peer、ca、kubernets等</li>
</ul>
<pre><code>示例：-profile=server
</code></pre>
<ul>
<li>-hostname [list]：指定证书的 Subject Alternative Name (SAN) 字段，包含域名和 IP 地址，多个值用逗号分隔</li>
</ul>
<pre><code>示例：-hostname=example.com,www.example.com,192.168.1.1
</code></pre>
<ul>
<li>-cn [name]：指定证书的 Common Name (CN)</li>
</ul>
<pre><code>示例：-cn="My Server"
</code></pre>
<ul>
<li>-key-algo [algo]：指定密钥算法，支持 rsa、ecdsa 等，默认rsa</li>
</ul>
<pre><code>示例：-key-algo=rsa
</code></pre>
<ul>
<li>-key-size [bits]：指定密钥长度（RSA 建议 2048+，ECDSA 建议 256+）</li>
</ul>
<pre><code>示例：-key-size=2048
</code></pre>
<ul>
<li>-initca：生成自签名的根 CA 证书。</li>
</ul>
<pre><code>示例：cfssl gencert -initca ca-csr.json
</code></pre>
<ul>
<li>-self-signed：生成自签名证书（非 CA 证书）</li>
</ul>
<pre><code>示例：cfssl gencert -self-signed server.json
</code></pre>
<h2 id="实战生成证书">实战：生成证书</h2>
<h3 id="创建根ca文件">创建根CA文件</h3>
<pre><code># 根ca文件，需要将注释去掉
[root@master ~/cfssl]# cat ca-config.json 
{
  "signing": {
    "default": {
       # 配置默认证书有效期为10年，通常用于根CA证书
      "expiry": "87600h"
    },
    "profiles": {
      # 定义server端的证书
      "server": {
        # 1年有效期
        "expiry": "8760h",
        "usages": ["signing", "key encipherment", "server auth"]
      },
      # 定义client端的证书，有效期为一年
      "client": {
        "expiry": "8760h",
        "usages": ["signing", "key encipherment", "client auth"]
      },
      # 定义peer端的证书，有效期为一年
      "peer": {
        "expiry": "8760h",
        "usages": ["signing", "key encipherment", "server auth", "client auth"]
      },
      # 定义kubernetes的证书，有效期为一年
      "kubernetes": {
        "expiry": "8760h",
        "usages": ["signing", "key encipherment", "server auth", "client auth"]
      },
      # 定义ca的证书，有效期为五年
      "ca": {
        "expiry": "43800h",
        "usages": ["signing", "key encipherment", "server auth", "client auth"]
      }
    }
  }
}
</code></pre>
<p>配置文件字段说明：<br>
usages：指定的证书用途</p>
<ul>
<li>signing：允许证书用于数字签名。数字签名可以确保数据在传输过程中不被篡改，并且可以验证数据的来源。</li>
<li>key encipherment：允许证书用于加密密钥。在 TLS 握手过程中，客户端和服务器会交换会话密钥，这个过程通常使用证书进行加密。</li>
<li>server auth：专门用于服务器身份验证。当客户端连接到服务器时，服务器会出示自己的证书，客户端会验证这个证书是否由信任的 CA 颁发，以及证书中的域名是否与自己要访问的域名一致。</li>
<li>client auth：专门用于客户端身份验证。在双向 TLS 中，服务器也会要求客户端提供证书，以验证客户端的身份。</li>
</ul>
<p>各端证书使用场景：</p>
<ul>
<li>server：HTTPS 网站、SMTP、IMAP、POP3 等邮件服务器、VPN 服务器、任何需要向客户端证明自己身份的服务</li>
<li>client：企业内部应用，要求员工使用客户端证书登录、API 访问，使用客户端证书进行身份验证、安全邮件客户端，使用证书进行身份验证</li>
<li>peer：区块链网络中的节点通信、分布式系统中节点间的安全通信、金融机构之间的安全数据交换</li>
<li>kubernetes：Kubernetes 组件证书（如 API Server、etcd）。</li>
<li>ca：中间 CA 证书（需配合 -ca 参数使用）。</li>
</ul>
<h3 id="创建根-ca-csr-配置文件">创建根 CA CSR 配置文件</h3>
<pre><code># 定义CSR文件，需要将json文件中的注释去掉
[root@master ~/cfssl]# cat ca-csr.json 
{
  # 根 CA 的通用名称，对于服务器证书，CN 通常是域名（如www.example.com）；
  # 对于 CA 证书，CN 是 CA 的标识名称。
  "CN": "My Root CA",
  "key": {
    # 加密算法
    "algo": "rsa",
    # 密钥长度
    "size": 4096
  },
  "names": [
    {
      # 国家代码，CN代表是中国
      "C": "CN",
      # 省份
      "ST": "Beijing",
      # 城市或地区
      "L": "Beijing",
      # 组织名称（Organization），可以理解成公司名称
      "O": "rootca",
      # 组织单位（Organizational Unit），可以理解成公司部门
      "OU": "ca"
    }
  ],
  # 根 CA 证书的配置，指定有效期为10年
  "ca": {
    "expiry": "87600h"
  }
}
</code></pre>
<h3 id="生成根-ca-证书和私钥">生成根 CA 证书和私钥</h3>
<pre><code>[root@master ~/cfssl]# cfssl gencert -initca ca-csr.json | cfssljson -bare ca/ca
2025/05/15 11:23:34 [INFO] generating a new CA key and certificate from CSR
2025/05/15 11:23:34 [INFO] generate received request
2025/05/15 11:23:34 [INFO] received CSR
2025/05/15 11:23:34 [INFO] generating key: rsa-4096
2025/05/15 11:23:34 [INFO] encoded CSR
2025/05/15 11:23:34 [INFO] signed certificate with serial number 492661591325776778969123330542788728689689366584
</code></pre>
<p>命令解释：</p>
<pre><code>cfssl gencert：cfssl 工具的子命令，用于生成证书
-initca：指定生成自签名的根 CA 证书
ca-csr.json：证书签名请求（CSR）的配置文件路径，对应上面创建的 ca-csr.json

cfssljson：处理 cfssl 生成的 JSON 输出并转换为文件
-bare ca：指定输出文件名前缀为 ca，会生成以下三个文件：
	ca.pem：根 CA 证书（自签名）
	ca-key.pem：根 CA 的私钥（必须严格保密！）
	ca.csr：证书签名请求（通常自签名 CA 不需要保留此文件）
</code></pre>
<p>查看当前的目录：</p>
<pre><code>[root@master ~/cfssl]# tree
.
├── ca
│   ├── ca.csr
│   ├── ca-key.pem # 根 CA 私钥（严格保密！）
│   └── ca.pem #根 CA 证书（公钥，需分发给客户端）
├── ca-config.json
├── ca-csr.json
</code></pre>
<h3 id="生成中间ca证书和私钥">生成中间CA证书和私钥</h3>
<p>中间CA证书文件</p>
<pre><code>[root@master ~/cfssl]# cat intermediate-csr.json 
{
  "CN": "My Intermediate CA",
  "key": {
    "algo": "rsa",
    "size": 4096
  },
  "names": [
    {
      "C": "CN",
      "ST": "Beijing",
      "L": "Beijing",
      "O": "baidu",
      "OU": "Intermediate CA"
    }
  ]
}
</code></pre>
<p>生成中间 CA 证书和私钥</p>
<pre><code>[root@master ~/cfssl]# cfssl gencert \
  -ca=ca/ca.pem \
  -ca-key=ca/ca-key.pem \
  -config=ca-config.json \
  -profile=ca \
  intermediate-csr.json | cfssljson -bare intermediate/intermediate
2025/05/15 11:29:49 [INFO] generate received request
2025/05/15 11:29:49 [INFO] received CSR
2025/05/15 11:29:49 [INFO] generating key: rsa-4096
2025/05/15 11:29:49 [INFO] encoded CSR
2025/05/15 11:29:49 [INFO] signed certificate with serial number 722124812765078011706922545691404003361157472292
2025/05/15 11:29:49 [WARNING] This certificate lacks a "hosts" field. This makes it unsuitable for
websites. For more information see the Baseline Requirements for the Issuance and Management
of Publicly-Trusted Certificates, v.1.1.6, from the CA/Browser Forum (https://cabforum.org);
specifically, section 10.2.3 ("Information Requirements").
</code></pre>
<p>查看文件</p>
<pre><code>[root@master ~/cfssl]# tree
.
├── ca
│   ├── ca.csr
│   ├── ca-key.pem # 根 CA 私钥（严格保密！）
│   └── ca.pem #根 CA 证书（公钥，需分发给客户端）
├── ca-config.json
├── ca-csr.json
├── intermediate
│   ├── intermediate.csr
│   ├── intermediate-key.pem # 中间 CA 私钥（需保密）
│   └── intermediate.pem #中间 CA 证书
└── intermediate-csr.json
</code></pre>
<h3 id="生成服务器证书">生成服务器证书</h3>
<p>配置服务器证书文件</p>
<pre><code>[root@master ~/cfssl]# cat server-csr.json 
{
  "CN": "*.huangsir-devops.cn",
  "key": {
    "algo": "rsa",
    "size": 2048
  },
  "hosts": [
    "*.huangsir-devops.cn",
    "www.huangsir-devops.cn",
    "api.huangsir-devops.cn",
    "localhost",
    "127.0.0.1",
    "10.37.97.56"
  ]
}
</code></pre>
<p>使用中间CA签署服务器证书</p>
<pre><code>[root@master ~/cfssl]# cfssl gencert \
  -ca=intermediate/intermediate.pem \
  -ca-key=intermediate/intermediate-key.pem \
  -config=ca-config.json \
  -profile=server \
  server-csr.json | cfssljson -bare server/server
2025/05/15 11:37:29 [INFO] generate received request
2025/05/15 11:37:29 [INFO] received CSR
2025/05/15 11:37:29 [INFO] generating key: rsa-2048
2025/05/15 11:37:30 [INFO] encoded CSR
2025/05/15 11:37:30 [INFO] signed certificate with serial number 666935063085228543415452828659279667302813819643
</code></pre>
<p>查看生成的文件</p>
<pre><code>[root@master ~/cfssl]# tree
.
├── ca
│   ├── ca.csr
│   ├── ca-key.pem
│   └── ca.pem
├── ca-config.json
├── ca-csr.json
├── intermediate
│   ├── intermediate.csr
│   ├── intermediate-key.pem
│   └── intermediate.pem
├── intermediate-csr.json
├── server
│   ├── server.csr
│   ├── server-key.pem #服务端私钥
│   └── server.pem #服务端公钥
└── server-csr.json
</code></pre>
<p>nginx测试配置</p>
<pre><code>[root@master /data/nginx]# cat /etc/nginx/conf.d/test1.conf
server{
  listen 443 ssl;
  server_name www.huangsir-devops.cn;
  # 配置公钥证书
  ssl_certificate /etc/ssl/server/server.pem;
  # 配置私钥证书
  ssl_certificate_key /etc/ssl/server/server-key.pem;

  # 推荐的 SSL 协议和加密算法（安全配置）
  ssl_protocols TLSv1.2 TLSv1.3;
  ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256;
  ssl_prefer_server_ciphers off;

  root /data/nginx/;
  location / {
    index index.html;
  }
}

# http跳转到https
server {
 listen 80;
 server_name www.huangsir-devops.cn;
 return 301 https://www.huangsir-devops.cn$request_uri;
}
</code></pre>
<h3 id="生成客户端证书">生成客户端证书</h3>
<p>配置客户端证书文件</p>
<pre><code>[root@master ~/cfssl]# cat client-csr.json 
{
  "CN": "client",
  "key": {
    "algo": "rsa",
    "size": 2048
  }
}
</code></pre>
<p>使用中间CA签署客户端证书</p>
<pre><code>[root@master ~/cfssl]# cfssl gencert \
  -ca=intermediate/intermediate.pem \
  -ca-key=intermediate/intermediate-key.pem \
  -config=ca-config.json \
  -profile=client \
  client-csr.json | cfssljson -bare client/client

# 查看证书
[root@master ~/cfssl]# tree
.
├── ca
│&nbsp;&nbsp; ├── ca-key.pem
│&nbsp;&nbsp; ├── ca.csr
│&nbsp;&nbsp; └── ca.pem
├── ca-config.json
├── ca-csr.json
├── client
│&nbsp;&nbsp; ├── client-key.pem # 公钥
│&nbsp;&nbsp; ├── client.csr
│&nbsp;&nbsp; └── client.pem # 私钥证书
├── client-csr.json
├── intermediate
│&nbsp;&nbsp; ├── intermediate-key.pem
│&nbsp;&nbsp; ├── intermediate.csr
│&nbsp;&nbsp; └── intermediate.pem
├── intermediate-csr.json
├── server
│&nbsp;&nbsp; ├── server-key.pem
│&nbsp;&nbsp; ├── server.csr
│&nbsp;&nbsp; └── server.pem
└── server-csr.json

4 directories, 17 files
</code></pre>
<h3 id="生成k8s证书">生成K8s证书</h3>
<p>K8s证书有很多类型，</p>
<h4 id="生成api-server证书">生成API Server证书</h4>
<p>配置客户端证书文件</p>
<pre><code>[root@master ~/cfssl]# cat k8s-apiserver-csr.json
{
  "CN": "kubernetes-apiserver",
  "key": {
    "algo": "rsa",
    "size": 2048
  },
  "hosts": [
   # Kubernetes服务IP (Service Cluster IP Range)
    "10.0.0.30",
    "10.0.0.31",
    "10.0.0.32"
     # API Server IP
    "192.168.1.10",
    "kubernetes",
    "kubernetes.default",
    "kubernetes.default.svc",
    "kubernetes.default.svc.cluster",
    "kubernetes.default.svc.cluster.local",
    "localhost",
    "127.0.0.1"
  ]
}
</code></pre>
<p>使用中间CA签署客户端证书</p>
<pre><code>[root@master ~/cfssl]# cfssl gencert \
  -ca=intermediate/intermediate.pem \
  -ca-key=intermediate/intermediate-key.pem \
  -config=ca-config.json \
  -profile=kubernetes \
  k8s-apiserver-csr.json | cfssljson -bare api-server/api-server
</code></pre>
<p>持续更新中</p>

</div>
<div id="MySignature" role="contentinfo">
    <p>本文来自博客园，作者：<a href="https://www.cnblogs.com/huangSir-devops/" target="_blank">huangSir-devops</a>，转载请注明原文链接：<a href="https://www.cnblogs.com/huangSir-devops/p/18876361" target="_blank">https://www.cnblogs.com/huangSir-devops/p/18876361</a>，微信Vac666666，欢迎交流</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.11474534470717593" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-06-07 13:34">2025-06-07 13:33</span>&nbsp;
<a href="https://www.cnblogs.com/huangSir-devops">huangSir-devops</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18876361);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18876361', targetLink: 'https://www.cnblogs.com/huangSir-devops/p/18876361', title: '自签名证书工具cfssl详解' })">举报</a>
</div>
        