
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/yanshajiuzhou/p/18740050" title="发布于 2025-02-26 23:39">
    <span role="heading" aria-level="2">状态模式</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        状态模式允许对象在其内部状态改变时改变其行为，使其看上去就像改变了自身所属的类一样。
    </div>
<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<span id="cke_bm_741S">状态（State）模式属于行为型模式的一种。</span>
<p>状态模式允许对象在其内部状态改变时改变其行为，使其看上去就像改变了自身所属的类一样。</p>
<p>状态模式是为了把一大串if...else...的逻辑给<strong>分拆</strong>到不同的状态类中，使得将来增加状态比较容易。</p>
<p>状态模式的关键设计思想在于<strong>状态切换</strong>。简单的状态转换可以直接由调用方指定，复杂的状态转换可以在内部根据条件触发完成。</p>
<p>状态模式建议为对象的所有可能状态新建一个类，然后将所有状态的对应行为抽取到这些类中。</p>
<p>当对象的行为依赖于其状态，并且状态之间的转换复杂时；当代码中存在大量的条件语句，并且这些条件语句依赖于对象的状态时，我们都可以使用状态模式。</p>
<p>状态模式通常有以下组成部分：</p>
<ul>
<li>抽象状态接口：声明一个或多个方法，用于封装具体状态的行为。</li>
<li>具体状态类：实现抽象状态接口，根据不同的状态实现具体的行为。</li>
<li>环境类：包含一个状态对象的引用，并在状态改变时更新其行为。</li>
</ul>
<p>我们实现一个简单的状态模式。</p>
<p>1、抽象状态类</p>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="3" data-cke-widget-wrapper="1">
<pre class="cke_widget_element" data-cke-widget-data="%7B%22lang%22%3A%22java%22%2C%22code%22%3A%22%2F%2F%20%E6%8A%BD%E8%B1%A1%E7%8A%B6%E6%80%81%E7%B1%BB%5Cnpublic%20interface%20State%20%7B%5Cn%20%20%20%20void%20handle(Context%20context)%3B%5Cn%7D%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code class="language-java hljs"><span class="hljs-comment">// 抽象状态类
<span class="hljs-keyword">public <span class="hljs-keyword">interface <span class="hljs-title class_">State {
    <span class="hljs-keyword">void <span class="hljs-title function_">handle<span class="hljs-params">(Context context);
}</span></span></span></span></span></span></span></code></pre>
<span class="cke_reset cke_widget_drag_handler_container"><img src="https://img2024.cnblogs.com/blog/1171560/202502/1171560-20250226233939326-35641305.gif" width="15" height="15" class="cke_reset cke_widget_drag_handler" title="点击并拖拽以移动" data-cke-widget-drag-handler="1"></span></div>
<p>2、具体状态类</p>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="2" data-cke-widget-wrapper="1">
<pre class="cke_widget_element" data-cke-widget-data="%7B%22lang%22%3A%22java%22%2C%22code%22%3A%22%2F%2F%20%E5%85%B7%E4%BD%93%E7%8A%B6%E6%80%81%E7%B1%BBA%5Cnpublic%20class%20ConcreteStateA%20implements%20State%20%7B%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20void%20handle(Context%20context)%20%7B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22Handling%20request%20in%20State%20A.%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20context.setState(new%20ConcreteStateB())%3B%5Cn%20%20%20%20%7D%5Cn%7D%5Cn%5Cn%2F%2F%20%E5%85%B7%E4%BD%93%E7%8A%B6%E6%80%81%E7%B1%BBB%5Cnpublic%20class%20ConcreteStateB%20implements%20State%20%7B%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20void%20handle(Context%20context)%20%7B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22Handling%20request%20in%20State%20B.%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20context.setState(new%20ConcreteStateA())%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code class="language-java hljs"><span class="hljs-comment">// 具体状态类A
<span class="hljs-keyword">public <span class="hljs-keyword">class <span class="hljs-title class_">ConcreteStateA <span class="hljs-keyword">implements <span class="hljs-title class_">State {
    <span class="hljs-meta">@Override
    <span class="hljs-keyword">public <span class="hljs-keyword">void <span class="hljs-title function_">handle<span class="hljs-params">(Context context) {
        System.out.println(<span class="hljs-string">"Handling request in State A.");
        context.setState(<span class="hljs-keyword">new <span class="hljs-title class_">ConcreteStateB());
    }
}

<span class="hljs-comment">// 具体状态类B
<span class="hljs-keyword">public <span class="hljs-keyword">class <span class="hljs-title class_">ConcreteStateB <span class="hljs-keyword">implements <span class="hljs-title class_">State {
    <span class="hljs-meta">@Override
    <span class="hljs-keyword">public <span class="hljs-keyword">void <span class="hljs-title function_">handle<span class="hljs-params">(Context context) {
        System.out.println(<span class="hljs-string">"Handling request in State B.");
        context.setState(<span class="hljs-keyword">new <span class="hljs-title class_">ConcreteStateA());
    }
}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
<span class="cke_reset cke_widget_drag_handler_container"><img src="https://img2024.cnblogs.com/blog/1171560/202502/1171560-20250226233939326-35641305.gif" width="15" height="15" class="cke_reset cke_widget_drag_handler" title="点击并拖拽以移动" data-cke-widget-drag-handler="1"></span></div>
<p>3、环境类</p>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="1" data-cke-widget-wrapper="1">
<pre class="cke_widget_element" data-cke-widget-data="%7B%22lang%22%3A%22java%22%2C%22code%22%3A%22%2F%2F%20%E7%8E%AF%E5%A2%83%E7%B1%BB%5Cnpublic%20class%20Context%20%7B%5Cn%20%20%20%20private%20State%20state%3B%5Cn%5Cn%20%20%20%20public%20Context(State%20state)%20%7B%5Cn%20%20%20%20%20%20%20%20this.state%20%3D%20state%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20public%20void%20setState(State%20state)%20%7B%5Cn%20%20%20%20%20%20%20%20this.state%20%3D%20state%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20public%20void%20request()%20%7B%5Cn%20%20%20%20%20%20%20%20state.handle(this)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code class="language-java hljs"><span class="hljs-comment">// 环境类
<span class="hljs-keyword">public <span class="hljs-keyword">class <span class="hljs-title class_">Context {
    <span class="hljs-keyword">private State state;

    <span class="hljs-keyword">public <span class="hljs-title function_">Context<span class="hljs-params">(State state) {
        <span class="hljs-built_in">this.state = state;
    }

    <span class="hljs-keyword">public <span class="hljs-keyword">void <span class="hljs-title function_">setState<span class="hljs-params">(State state) {
        <span class="hljs-built_in">this.state = state;
    }

    <span class="hljs-keyword">public <span class="hljs-keyword">void <span class="hljs-title function_">request<span class="hljs-params">() {
        state.handle(<span class="hljs-built_in">this);
    }
}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
<span class="cke_reset cke_widget_drag_handler_container"><img src="https://img2024.cnblogs.com/blog/1171560/202502/1171560-20250226233939326-35641305.gif" width="15" height="15" class="cke_reset cke_widget_drag_handler" title="点击并拖拽以移动" data-cke-widget-drag-handler="1"></span></div>
<p>4、客户端</p>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="0" data-cke-widget-wrapper="1">
<pre class="cke_widget_element" data-cke-widget-data="%7B%22lang%22%3A%22java%22%2C%22code%22%3A%22%2F%2F%20%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BB%A3%E7%A0%81%5Cnpublic%20class%20StatePatternDemo%20%7B%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20%7B%5Cn%20%20%20%20%20%20%20%20Context%20context%20%3D%20new%20Context(new%20ConcreteStateA())%3B%5Cn%20%20%20%20%20%20%20%20context.request()%3B%20%2F%2F%20%E8%BE%93%E5%87%BA%3A%20Handling%20request%20in%20State%20A.%5Cn%20%20%20%20%20%20%20%20context.request()%3B%20%2F%2F%20%E8%BE%93%E5%87%BA%3A%20Handling%20request%20in%20State%20B.%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code class="language-java hljs"><span class="hljs-comment">// 客户端代码
<span class="hljs-keyword">public <span class="hljs-keyword">class <span class="hljs-title class_">StatePatternDemo {
    <span class="hljs-keyword">public <span class="hljs-keyword">static <span class="hljs-keyword">void <span class="hljs-title function_">main<span class="hljs-params">(String[] args) {
        <span class="hljs-type">Context <span class="hljs-variable">context <span class="hljs-operator">= <span class="hljs-keyword">new <span class="hljs-title class_">Context(<span class="hljs-keyword">new <span class="hljs-title class_">ConcreteStateA());
        context.request(); <span class="hljs-comment">// 输出: Handling request in State A.
        context.request(); <span class="hljs-comment">// 输出: Handling request in State B.
    }
}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
<span class="cke_reset cke_widget_drag_handler_container"><img src="https://img2024.cnblogs.com/blog/1171560/202502/1171560-20250226233939326-35641305.gif" width="15" height="15" class="cke_reset cke_widget_drag_handler" title="点击并拖拽以移动" data-cke-widget-drag-handler="1"></span></div>
<p>状态模式的<strong>优缺点。</strong>&nbsp;</p>
<p>优点：</p>
<ul>
<li>封装状态转换：将状态转换逻辑封装在状态对象内部，避免了复杂的条件判断语句。</li>
<li>易于扩展：增加新的状态类不会影响现有代码，符合开闭原则。</li>
<li>集中状态相关行为：将所有与特定状态相关的行为集中到一个类中，增强了代码的可维护性。</li>
</ul>
<p>缺点：</p>
<ul>
<li>增加类和对象数量：每个状态都需要一个具体的状态类，可能导致类的数量增加。</li>
<li>实现复杂：模式结构和实现相对复杂，可能增加系统的复杂度。</li>
</ul>
<p>状态模式通过将状态和行为封装在独立的类中，使得对象的行为随着状态的变化而变化，增强了系统的灵活性和可维护性。</p>
<p>状态模式跟策略模式很相似，但有一个关键性的不同点——在状态模式中，特定状态是知道其他所有状态的存在的，且能触发从一个状态到另一个状态的转换；而策略则几乎是完全不知道其他策略的存在的。</p>
<p style="text-align: right"><span style="color: rgba(0, 204, 255, 1)">他人犯错，常有己过。-- 烟沙九洲</span></p>
<span data-cke-copybin-start="1"><span data-cke-copybin-end="1">​</span></span>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.027444075194444445" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-26 23:40">2025-02-26 23:39</span>&nbsp;
<a href="https://www.cnblogs.com/yanshajiuzhou">烟沙九洲</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18740050" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18740050);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18740050', targetLink: 'https://www.cnblogs.com/yanshajiuzhou/p/18740050', title: '状态模式' })">举报</a>
</div>
        