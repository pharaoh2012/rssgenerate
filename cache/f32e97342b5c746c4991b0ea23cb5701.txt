
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/mrye/p/18857558" title="发布于 2025-05-02 15:47">
    <span role="heading" aria-level="2">大模型应用开发进阶篇：Spring-AI 结合领域驱动开发设计思想</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p><span data-cke-copybin-start="1">​</span></p>
<h1><strong><span id="cke_bm_486S">&nbsp;</span>概要</strong></h1>
<p>本文聚焦如何使用spring-AI来开发大模型应用一些进阶技能，包含一套可落地的技术设计模式，读完你将会学习到：</p>
<ul>
<li>如何使用Spring-AI 开发大模型对话应用</li>
<li>如何综合设计一套适用Spring-ai的代码结构，为应用提供更好的扩展能力</li>
</ul>
<p>本文假设读者已经熟悉spring-ai的基本功能以及大模型开发的入门知识，如果你还不熟悉这些基础知识，可以找我仔细学习。</p>
<h1><strong>开发目标</strong></h1>
<p>我们会简单的模拟豆包的业务模型，开发一个用户与大模型对话的应用程序，我们会从领域模型开始设计，一直到应用模型和应用实现。</p>
<p>由于篇幅有限，我们不展开细节完成每一个功能，这里只介绍核心领域建模和应用的开发模式。</p>
<p>我们将会聚焦一次对话的处理流程，如下图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/395759/202505/395759-20250502154340417-1033875078.png" height="233" width="846"></p>
<ul>
<li>本地工具集也就是function calling 可以随时添加，删除，并且根据对话上下文动态抉择</li>
<li>向量数据库搜索可以根据对话上下文选择是否使用，甚至提供多个选择</li>
</ul>
<h1><strong># 设计领域模型</strong></h1>
<p><strong><img src="https://img2024.cnblogs.com/blog/395759/202505/395759-20250502154353326-1327093497.png"><img src="https://img2024.cnblogs.com/blog/395759/202505/395759-20250502154400893-1053329087.png" height="286" width="762"></strong></p>
<ol>
<li>Agent 表示一个大模型agent，包括大模型的命名，SystemPrompt，所属用户等</li>
<li>Conversation 表示一次对话</li>
<li>User 表示正在使用系统的用户</li>
<li>ChatMessage表示一个对话消息，一个对话消息由多个内容组成，因为一次对话可以发送包括文本和媒体多条具体内容。</li>
</ol>
<p>至此，我们简单模拟了豆包的领域模型</p>
<p><img src="https://img2024.cnblogs.com/blog/395759/202505/395759-20250502154416998-346577940.png" height="293" width="778"></p>
<h1><strong>设计应用模型</strong></h1>
<p>首先设计一个 ChatContext类，用来表示全部对话的上下文核心，这里我们分析如下：</p>
<ul>
<li>对话上下文包含 when，who，what，where，how 五种元素
<ul>
<li>When - 用户发送消息的时间</li>
<li>Who - 发送消息的用户</li>
<li>What - 用户发送发的消息</li>
<li>Where - 用户处于哪一个对话</li>
<li>How - 本次对话有哪些配置选项</li>
</ul>
</li>
<li>对话上下文可以配置标记属性，以便在不同功能之间传递消息，这点类似Servlet技术中方的ServletRequest#getAttribute</li>
<li>对话上下文是只读的，不允许修改</li>
</ul>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" tabindex="-1" role="region" contenteditable="false" aria-label="code snippet widget" data-cke-display-name="code snippet" data-cke-filter="off" data-cke-widget-id="7" data-cke-widget-wrapper="1">
<pre class="cke_widget_element highlighter-prismjs language-java prismjs-lines-highlighted" tabindex="0" data-cke-widget-data="%7B%22lang%22%3A%22java%22%2C%22code%22%3A%22import%20java.util.HashMap%3B%5Cnimport%20java.util.Map%3B%5Cnimport%20com.github.aurora.ultra.chat.domain.Conversation%3B%5Cnimport%20com.github.aurora.ultra.chat.domain.User%3B%5Cnimport%20lombok.Builder%3B%5Cnimport%20lombok.Getter%3B%5Cnimport%20org.springframework.ai.chat.messages.UserMessage%3B%5Cn%5Cn%5Cn%40Getter%5Cn%40Builder%5Cnpublic%20class%20ChatContext%20%7B%5Cn%20%20%20%20%2F%2F%20when%20%20%20%20%20%20%20who%20%20%20%20%20%20%20what%20%20%20%20%20%20%20%20%20where%20%20%20%20%20%20%20%20how%5Cn%20%20%20%20%2F%2F%20-------------------------------------------------------------%5Cn%20%20%20%20%2F%2F%20now%20%20%20%20user%20%20%20userMessage%20%20%20%20%20%20%20conversation%20%20%20chatOption%5Cn%5Cn%20%20%20%20private%20final%20Map%3CString%2C%20Object%3E%20attributes%20%3D%20new%20HashMap%3C%3E()%3B%5Cn%5Cn%20%20%20%20private%20final%20User%20user%3B%5Cn%20%20%20%20private%20final%20UserMessage%20userMessage%3B%5Cn%20%20%20%20private%20final%20ChatOption%20chatOption%3B%5Cn%20%20%20%20private%20final%20Conversation%20conversation%3B%5Cn%5Cn%20%20%20%20public%20void%20setAttribute(String%20key%2C%20Object%20value)%20%7B%5Cn%20%20%20%20%20%20%20attributes.put(key%2C%20value)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20public%20Object%20getAttribute(String%20key)%20%7B%5Cn%20%20%20%20%20%20%20return%20attributes.get(key)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%40SuppressWarnings(%5C%22unchecked%5C%22)%5Cn%20%20%20%20public%20%3CT%3E%20T%20getAttribute(String%20key%2C%20Class%3CT%3E%20ignored)%20%7B%5Cn%20%20%20%20%20%20return%20(T)%20attributes.get(key)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%7D%5Cn%5Cn%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code>import java.util.HashMap;
import java.util.Map;
import com.github.aurora.ultra.chat.domain.Conversation;
import com.github.aurora.ultra.chat.domain.User;
import lombok.Builder;
import lombok.Getter;
import org.springframework.ai.chat.messages.UserMessage;


@Getter
@Builder
public class ChatContext {
    // when       who       what         where        how
    // -------------------------------------------------------------
    // now    user   userMessage       conversation   chatOption

    private final Map&lt;String, Object&gt; attributes = new HashMap&lt;&gt;();

    private final User user;
    private final UserMessage userMessage;
    private final ChatOption chatOption;
    private final Conversation conversation;

    public void setAttribute(String key, Object value) {
       attributes.put(key, value);
    }

    public Object getAttribute(String key) {
       return attributes.get(key);
    }

    @SuppressWarnings("unchecked")
    public &lt;T&gt; T getAttribute(String key, Class&lt;T&gt; ignored) {
      return (T) attributes.get(key);
    }

}</code></pre>
<img src="https://img2024.cnblogs.com/blog/395759/202505/395759-20250502154312618-1691611567.gif" class="cke_reset cke_widget_mask"><span class="cke_reset cke_widget_drag_handler_container"><img src="https://img2024.cnblogs.com/blog/395759/202505/395759-20250502154312618-1691611567.gif" class="cke_reset cke_widget_drag_handler" height="15" width="15" data-cke-widget-drag-handler="1"></span></div>
<p>至此，我们有了可用的对话上下文，可以围绕这个上下文开发对话逻辑了。</p>
<h1><strong>设计应用逻辑</strong></h1>
<p>首先我们来设计应用的扩展点，其实本质上应该是先设计应用逻辑，再进行重构设计扩展点，但是这里为了行文方便，直接展示下扩展点，免去重构的过程，请读者注意，真实开发的时候不可能一开始就想得到哪些地方需要扩展，一定是先做出基础逻辑，再重构出扩展点点。</p>
<p>我们先来分析一下可扩展的点：</p>
<ul>
<li>对话模型可以切换，系统将会根据上下文推断出本次要使用的模型。</li>
<li>本地方法可以随时增加删除，系统会很久本次上下文推断出需要调用的本地工具。</li>
<li>其他spring-ai框架的的Advisor也可能根据一次对话的上下文被推断出。</li>
</ul>
<p>由此可见对话上下文是整个应用的重点，所有的功能是否被使用都围绕着这个上下文，并且这些功能在运行的时候会根据上下文动态提供出来，不难看出，这是一个策略模式，于是我们设计如下接口：</p>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" tabindex="-1" role="region" contenteditable="false" aria-label="code snippet widget" data-cke-display-name="code snippet" data-cke-filter="off" data-cke-widget-id="6" data-cke-widget-wrapper="1">
<pre class="cke_widget_element highlighter-prismjs language-java prismjs-lines-highlighted" tabindex="0" data-cke-widget-data="%7B%22lang%22%3A%22java%22%2C%22code%22%3A%22public%20interface%20ChatAdvisorSupplier%20%7B%5Cn%20%20%20%20boolean%20support(ChatContext%20context)%3B%5Cn%20%20%20%20Advisor%20getAdvisor(ChatContext%20context)%3B%5Cn%7D%5Cnpublic%20interface%20ChatClientSupplier%20%7B%5Cn%20%20%20%20boolean%20support(ChatContext%20context)%3B%5Cn%20%20%20%20ChatClient%20getChatClient(ChatContext%20context)%3B%5Cn%7D%5Cnpublic%20interface%20ChatTool%20%7B%5Cn%20%20%20%20String%20getName()%3B%5Cn%20%20%20%20String%20getDescription()%3B%5Cn%7D%5Cnpublic%20interface%20ChatToolSupplier%20%7B%5Cn%20%20%20%20boolean%20support(ChatContext%20context)%3B%5Cn%20%20%20%20ChatTool%20getTool(ChatContext%20context)%3B%5Cn%7D%5Cn%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code>public interface ChatAdvisorSupplier {
    boolean support(ChatContext context);
    Advisor getAdvisor(ChatContext context);
}
public interface ChatClientSupplier {
    boolean support(ChatContext context);
    ChatClient getChatClient(ChatContext context);
}
public interface ChatTool {
    String getName();
    String getDescription();
}
public interface ChatToolSupplier {
    boolean support(ChatContext context);
    ChatTool getTool(ChatContext context);
}</code></pre>
<img src="https://img2024.cnblogs.com/blog/395759/202505/395759-20250502154312618-1691611567.gif" class="cke_reset cke_widget_mask"><span class="cke_reset cke_widget_drag_handler_container"><img src="https://img2024.cnblogs.com/blog/395759/202505/395759-20250502154312618-1691611567.gif" class="cke_reset cke_widget_drag_handler" height="15" width="15" data-cke-widget-drag-handler="1"></span></div>
<ul>
<li>ChatAdvisorSupplier 用来为本次对话提供spring-ai的Advisor</li>
<li>ChatClientSupplier 会根据本地对话提供可用的模型client</li>
<li>ChatTool 用来表示一个包含本地放的的类，提供了name和desc两个属性，用来让大模型帮我们判断哪些工具在本次对话需要被使用到</li>
<li>ChatToolSupplier则会根据当前对话给出哪些本地工具会被使用到。</li>
</ul>
<p>下面我们将这些组件串联起来，这样一来，我们的核心交互流程不变，而具体交互流程在策略器中可随时动态增减。</p>
<p><img src="https://img2024.cnblogs.com/blog/395759/202505/395759-20250502154440900-886521408.png" height="492" width="1193"></p>
<h1><strong>实现应用逻辑</strong></h1>
<p>我们来看一下ChatService是如何被实现的。</p>
<p>&nbsp;</p>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" tabindex="-1" role="region" contenteditable="false" aria-label="code snippet widget" data-cke-display-name="code snippet" data-cke-filter="off" data-cke-widget-id="5" data-cke-widget-wrapper="1">
<pre class="cke_widget_element highlighter-prismjs language-java prismjs-lines-highlighted" tabindex="0" data-cke-widget-data="%7B%22lang%22%3A%22java%22%2C%22code%22%3A%22%40Slf4j%5Cn%40Service%5Cn%40RequiredArgsConstructor%5Cnpublic%20class%20ChatService%20%7B%5Cn%20%20%20%20public%20static%20final%20int%20CHAT_RESPONSE_BUFFER_SIZE%20%3D%2024%3B%5Cn%20%20%20%20public%20static%20final%20String%20CHAT_TOOLS_CHOSEN_MODEL%20%3D%20%5C%22gpt-3.5-turbo%5C%22%3B%5Cn%5Cn%20%20%20%20private%20final%20ChatManager%20chatManager%3B%5Cn%5Cn%20%20%20%20private%20final%20List%3CChatToolSupplier%3E%20chatToolSuppliers%3B%5Cn%20%20%20%20private%20final%20List%3CChatClientSupplier%3E%20chatClientSuppliers%3B%5Cn%20%20%20%20private%20final%20List%3CChatAdvisorSupplier%3E%20chatAdvisorSuppliers%3B%5Cn%5Cn%20%20%20%20public%20ChatReply%20chat(ChatCommand%20command)%20throws%20ChatException%20%7B%5Cn%20%20%20%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20var%20user%20%3D%20User.mock()%3B%5Cn%20%20%20%20%20%20%20%20%20%20var%20chatOption%20%3D%20command.getOption()%3B%5Cn%20%20%20%20%20%20%20%20%20%20var%20conversation%20%3D%20getConversation(command.getConversationId())%3B%5Cn%20%20%20%20%20%20%20%20%20%20var%20userMessage%20%3D%20createUserMessage(command)%3B%5Cn%20%20%20%20%20%20%20%20%20%20var%20context%20%3D%20ChatContext.builder()%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.user(user)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.userMessage(userMessage)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.chatOption(chatOption)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.conversation(conversation)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.build()%3B%5Cn%20%20%20%20%20%20%20%20%20%20return%20this.chat(context)%3B%5Cn%20%20%20%20%20%20%20%7D%20catch%20(Exception%20e)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20throw%20ChatException.of(%5C%22Something%20wrong%20when%20processing%20the%20chat%20command%5C%22%2C%20e)%3B%5Cn%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20private%20ChatReply%20chat(ChatContext%20context)%20throws%20ChatException%20%7B%5Cn%20%20%20%20%20%20%20var%20tools%20%3D%20getTools(context)%3B%5Cn%20%20%20%20%20%20%20var%20advisors%20%3D%20getAdvisors(context)%3B%5Cn%20%20%20%20%20%20%20var%20chatClient%20%3D%20getChatClient(context)%3B%5Cn%20%20%20%20%20%20%20var%20conversation%20%3D%20context.getConversation()%3B%5Cn%20%20%20%20%20%20%20var%20userMessage%20%3D%20context.getUserMessage()%3B%5Cn%5Cn%20%20%20%20%20%20%20var%20contents%20%3D%20chatClient%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20.prompt()%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20.advisors(advisors)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20.messages(conversation.createPromptMessages())%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20.messages(userMessage)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20.toolCallbacks(ToolCallbacks.from(tools.toArray()))%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20.toolContext(context.getAttributes())%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20.stream()%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20.content()%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20.buffer(CHAT_RESPONSE_BUFFER_SIZE)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20.map(strings%20-%3E%20String.join(%5C%22%5C%22%2C%20strings))%3B%5Cn%5Cn%20%20%20%20%20%20%20return%20ChatReply.builder()%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20.contents(contents)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20.build()%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20private%20UserMessage%20createUserMessage(ChatCommand%20command)%20%7B%5Cn%20%20%20%20%20%20%20return%20new%20UserMessage(command.getContent())%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20private%20Conversation%20getConversation(String%20conversationId)%20%7B%5Cn%20%20%20%20%20%20%20return%20chatManager.getOrCreateConversation(conversationId)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20private%20List%3CAdvisor%3E%20getAdvisors(ChatContext%20context)%20%7B%5Cn%20%20%20%20%20%20%20return%20chatAdvisorSuppliers%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20.stream()%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20.filter(chatAdvisorSupplier%20-%3E%20chatAdvisorSupplier.support(context))%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20.map(chatAdvisorSupplier%20-%3E%20chatAdvisorSupplier.getAdvisor(context))%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20.toList()%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20private%20ChatClient%20getChatClient(ChatContext%20context)%20throws%20ChatException%20%7B%5Cn%20%20%20%20%20%20%20return%20chatClientSuppliers%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20.stream()%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20.filter(chatAdvisorSupplier%20-%3E%20chatAdvisorSupplier.support(context))%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20.map(chatAdvisorSupplier%20-%3E%20chatAdvisorSupplier.getChatClient(context))%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20.findFirst()%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20.orElseThrow(()%20-%3E%20ChatException.of(%5C%22unknown%20how%20to%20create%20the%20chat%20client%2C%20maybe%20you%20need%20to%20add%20a%20chat%20client%20supplier%3F%5C%22))%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20private%20List%3CChatTool%3E%20getTools(ChatContext%20context)%20throws%20ChatException%20%7B%5Cn%20%20%20%20%20%20%20var%20tools%20%3D%20chatToolSuppliers%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20.stream()%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20.filter(supplier%20-%3E%20supplier.support(context))%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20.map(supplier%20-%3E%20supplier.getTool(context))%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20.toList()%3B%5Cn%5Cn%20%20%20%20%20%20%20if%20(tools.isEmpty())%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20return%20tools%3B%5Cn%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20var%20toolDescription%20%3D%20tools.stream()%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20.map(chatTool%20-%3E%20String.format(%5C%22-%20%25s%3A%20%25s%5C%22%2C%20chatTool.getName()%2C%20chatTool.getDescription()))%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20.collect(Collectors.joining(%5C%22%5C%5Cn%5C%22))%3B%5Cn%20%20%20%20%20%20%20var%20systemPrompt%20%3D%20%5C%22You%20will%20determine%20what%20tools%20to%20use%20based%20on%20the%20user's%20problem.%5C%22%20%2B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%5C%22Please%20directly%20reply%20the%20tool%20names%20with%20delimiters%20'%2C'.%20%5C%22%20%2B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%5C%22Reply%20example%3A%20tool1%2Ctool2.%5C%22%20%2B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%5C%22The%20tools%20are%3A%20%5C%5Cn%5C%22%20%2B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20toolDescription%3B%5Cn%5Cn%20%20%20%20%20%20%20var%20toolsDecision%20%3D%20getChatClient(context)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20.prompt()%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20.options(ChatOptions.builder()%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.model(CHAT_TOOLS_CHOSEN_MODEL)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.build())%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20.system(systemPrompt)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20.messages(context.getUserMessage())%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20.call()%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20.content()%3B%5Cn%5Cn%20%20%20%20%20%20%20if%20(StringUtils.isBlank(toolsDecision))%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20return%20new%20ArrayList%3C%3E()%3B%5Cn%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20var%20chosen%20%3D%20Arrays.asList(toolsDecision.split(%5C%22%2C%5C%22))%3B%5Cn%20%20%20%20%20%20%20log.info(%5C%22tools%20chosen%3A%20%7B%7D%5C%22%2C%20chosen)%3B%5Cn%5Cn%20%20%20%20%20%20%20tools%20%3D%20tools.stream()%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20.filter(chatTool%20-%3E%20chosen.contains(chatTool.getName()))%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20.toList()%3B%5Cn%5Cn%20%20%20%20%20%20%20return%20tools%3B%5Cn%20%20%20%20%7D%5Cn%7D%5Cn%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code>@Slf4j
@Service
@RequiredArgsConstructor
public class ChatService {
    public static final int CHAT_RESPONSE_BUFFER_SIZE = 24;
    public static final String CHAT_TOOLS_CHOSEN_MODEL = "gpt-3.5-turbo";

    private final ChatManager chatManager;

    private final List&lt;ChatToolSupplier&gt; chatToolSuppliers;
    private final List&lt;ChatClientSupplier&gt; chatClientSuppliers;
    private final List&lt;ChatAdvisorSupplier&gt; chatAdvisorSuppliers;

    public ChatReply chat(ChatCommand command) throws ChatException {
       try {
          var user = User.mock();
          var chatOption = command.getOption();
          var conversation = getConversation(command.getConversationId());
          var userMessage = createUserMessage(command);
          var context = ChatContext.builder()
                .user(user)
                .userMessage(userMessage)
                .chatOption(chatOption)
                .conversation(conversation)
                .build();
          return this.chat(context);
       } catch (Exception e) {
          throw ChatException.of("Something wrong when processing the chat command", e);
       }
    }

    private ChatReply chat(ChatContext context) throws ChatException {
       var tools = getTools(context);
       var advisors = getAdvisors(context);
       var chatClient = getChatClient(context);
       var conversation = context.getConversation();
       var userMessage = context.getUserMessage();

       var contents = chatClient
             .prompt()
             .advisors(advisors)
             .messages(conversation.createPromptMessages())
             .messages(userMessage)
             .toolCallbacks(ToolCallbacks.from(tools.toArray()))
             .toolContext(context.getAttributes())
             .stream()
             .content()
             .buffer(CHAT_RESPONSE_BUFFER_SIZE)
             .map(strings -&gt; String.join("", strings));

       return ChatReply.builder()
             .contents(contents)
             .build();
    }

    private UserMessage createUserMessage(ChatCommand command) {
       return new UserMessage(command.getContent());
    }

    private Conversation getConversation(String conversationId) {
       return chatManager.getOrCreateConversation(conversationId);
    }

    private List&lt;Advisor&gt; getAdvisors(ChatContext context) {
       return chatAdvisorSuppliers
             .stream()
             .filter(chatAdvisorSupplier -&gt; chatAdvisorSupplier.support(context))
             .map(chatAdvisorSupplier -&gt; chatAdvisorSupplier.getAdvisor(context))
             .toList();
    }

    private ChatClient getChatClient(ChatContext context) throws ChatException {
       return chatClientSuppliers
             .stream()
             .filter(chatAdvisorSupplier -&gt; chatAdvisorSupplier.support(context))
             .map(chatAdvisorSupplier -&gt; chatAdvisorSupplier.getChatClient(context))
             .findFirst()
             .orElseThrow(() -&gt; ChatException.of("unknown how to create the chat client, maybe you need to add a chat client supplier?"));
    }

    private List&lt;ChatTool&gt; getTools(ChatContext context) throws ChatException {
       var tools = chatToolSuppliers
             .stream()
             .filter(supplier -&gt; supplier.support(context))
             .map(supplier -&gt; supplier.getTool(context))
             .toList();

       if (tools.isEmpty()) {
          return tools;
       }
       var toolDescription = tools.stream()
             .map(chatTool -&gt; String.format("- %s: %s", chatTool.getName(), chatTool.getDescription()))
             .collect(Collectors.joining("\n"));
       var systemPrompt = "You will determine what tools to use based on the user's problem." +
             "Please directly reply the tool names with delimiters ','. " +
             "Reply example: tool1,tool2." +
             "The tools are: \n" +
             toolDescription;

       var toolsDecision = getChatClient(context)
             .prompt()
             .options(ChatOptions.builder()
                   .model(CHAT_TOOLS_CHOSEN_MODEL)
                   .build())
             .system(systemPrompt)
             .messages(context.getUserMessage())
             .call()
             .content();

       if (StringUtils.isBlank(toolsDecision)) {
          return new ArrayList&lt;&gt;();
       }

       var chosen = Arrays.asList(toolsDecision.split(","));
       log.info("tools chosen: {}", chosen);

       tools = tools.stream()
             .filter(chatTool -&gt; chosen.contains(chatTool.getName()))
             .toList();

       return tools;
    }
}</code></pre>
<img src="https://img2024.cnblogs.com/blog/395759/202505/395759-20250502154312618-1691611567.gif" class="cke_reset cke_widget_mask"><span class="cke_reset cke_widget_drag_handler_container"><img src="https://img2024.cnblogs.com/blog/395759/202505/395759-20250502154312618-1691611567.gif" class="cke_reset cke_widget_drag_handler" height="15" width="15" data-cke-widget-drag-handler="1"></span></div>
<ul>
<li>首先ChatService注入了所有的ChatToolSupplier，ChatClientSupplier，ChatAdvisorSupplier接口实例；</li>
<li>当处理ChatCommand的时候，组装出ChatContext；</li>
<li>然后调用一系列的get方法读取相关的策略</li>
<li>最后调用大模型client与之交互</li>
</ul>
<p>其中getTools方法相对比较复杂，它先便利了所有的本地工具，然后将用户对话和本地工具描述一起交给了大模型，大模型告诉本地应用那一套functions更适合处理这个问题，然后菜返回本地工具集。之所以这么做，是因为（例如）openai官网明确说明，建议一次对话functions不要太多，最好不要超过20个，因为更多的functions意味着更多的token，也意味着更多的处理时间，而且也没有必要。</p>
<h2><strong>为应用增加RAG功能</strong></h2>
<p>有了ChatAdvisorSupplier这个接口，我们可以轻易的为应用逻辑增加RAG的功能。</p>
<p>&nbsp;</p>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" tabindex="-1" role="region" contenteditable="false" aria-label="code snippet widget" data-cke-display-name="code snippet" data-cke-filter="off" data-cke-widget-id="4" data-cke-widget-wrapper="1">
<pre class="cke_widget_element highlighter-prismjs language-java prismjs-lines-highlighted" tabindex="0" data-cke-widget-data="%7B%22lang%22%3A%22java%22%2C%22code%22%3A%22%40Slf4j%5Cn%40Component%5Cn%40RequiredArgsConstructor%5Cnpublic%20class%20InternalSearchAdvisorSupplier%20implements%20ChatAdvisorSupplier%20%7B%5Cn%20%20%20%20private%20final%20static%20int%20DEFAULT_TOP_K%20%3D%203%3B%5Cn%5Cn%20%20%20%20private%20final%20VectorStore%20vectorStore%3B%5Cn%5Cn%20%20%20%20private%20final%20static%20String%20USER_TEXT_ADVISE%20%3D%20%5C%22%5C%22%5C%22%5Cn%20%20%20%20%20%20%20%20%20%20%E4%B8%8A%E4%B8%8B%E6%96%87%E4%BF%A1%E6%81%AF%E5%A6%82%E4%B8%8B%EF%BC%8C%E7%94%A8%20---------------------%20%E5%8C%85%E5%9B%B4%5Cn%20%20%20%20%20%20%20%20%20%20%5Cn%20%20%20%20%20%20%20%20%20%20---------------------%5Cn%20%20%20%20%20%20%20%20%20%20%7Bquestion_answer_context%7D%5Cn%20%20%20%20%20%20%20%20%20%20---------------------%5Cn%20%20%20%20%20%20%20%20%20%20%5Cn%20%20%20%20%20%20%20%20%20%20%E6%A0%B9%E6%8D%AE%E4%B8%8A%E4%B8%8B%E6%96%87%E5%92%8C%E6%8F%90%E4%BE%9B%E7%9A%84%E5%8E%86%E5%8F%B2%E4%BF%A1%E6%81%AF%EF%BC%88%E8%80%8C%E9%9D%9E%E5%85%88%E9%AA%8C%E7%9F%A5%E8%AF%86%EF%BC%89%E5%9B%9E%E5%A4%8D%E7%94%A8%E6%88%B7%E9%97%AE%E9%A2%98%E3%80%82%E5%A6%82%E6%9E%9C%E7%AD%94%E6%A1%88%E4%B8%8D%E5%9C%A8%E4%B8%8A%E4%B8%8B%E6%96%87%E4%B8%AD%EF%BC%8C%E8%AF%B7%E5%91%8A%E7%9F%A5%E7%94%A8%E6%88%B7%E4%BD%A0%E6%97%A0%E6%B3%95%E5%9B%9E%E7%AD%94%E8%AF%A5%E9%97%AE%E9%A2%98%E3%80%82%5Cn%20%20%20%20%20%20%20%20%20%20%5C%22%5C%22%5C%22%3B%5Cn%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20boolean%20support(ChatContext%20context)%20%7B%5Cn%20%20%20%20%20%20%20return%20context.getChatOption().isEnableInternalSearch()%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20Advisor%20getAdvisor(ChatContext%20context)%20%7B%5Cn%20%20%20%20%20%20%20return%20QuestionAnswerAdvisor.builder(vectorStore)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20.searchRequest(%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20SearchRequest.builder()%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.topK(NumberUtils.max(context.getChatOption().getRetrieveTopK()%2C%20DEFAULT_TOP_K))%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.build()%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20.userTextAdvise(USER_TEXT_ADVISE)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20.build()%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%7D%5Cn%5Cn%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code>@Slf4j
@Component
@RequiredArgsConstructor
public class InternalSearchAdvisorSupplier implements ChatAdvisorSupplier {
    private final static int DEFAULT_TOP_K = 3;

    private final VectorStore vectorStore;

    private final static String USER_TEXT_ADVISE = """
          上下文信息如下，用 --------------------- 包围
          
          ---------------------
          {question_answer_context}
          ---------------------
          
          根据上下文和提供的历史信息（而非先验知识）回复用户问题。如果答案不在上下文中，请告知用户你无法回答该问题。
          """;

    @Override
    public boolean support(ChatContext context) {
       return context.getChatOption().isEnableInternalSearch();
    }

    @Override
    public Advisor getAdvisor(ChatContext context) {
       return QuestionAnswerAdvisor.builder(vectorStore)
             .searchRequest(
                   SearchRequest.builder()
                         .topK(NumberUtils.max(context.getChatOption().getRetrieveTopK(), DEFAULT_TOP_K))
                         .build()
             )
             .userTextAdvise(USER_TEXT_ADVISE)
             .build();
    }

}</code></pre>
<img src="https://img2024.cnblogs.com/blog/395759/202505/395759-20250502154312618-1691611567.gif" class="cke_reset cke_widget_mask"><span class="cke_reset cke_widget_drag_handler_container"><img src="https://img2024.cnblogs.com/blog/395759/202505/395759-20250502154312618-1691611567.gif" class="cke_reset cke_widget_drag_handler" height="15" width="15" data-cke-widget-drag-handler="1"></span></div>
<p>这里我们规定，只要chatOption里面开启了InternalSearch开关，则应用RAG功能。你只要看一下下面的ChatOption类的设计，就瞬间明白了这个设计。</p>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" tabindex="-1" role="region" contenteditable="false" aria-label="code snippet widget" data-cke-display-name="code snippet" data-cke-filter="off" data-cke-widget-id="3" data-cke-widget-wrapper="1">
<pre class="cke_widget_element highlighter-prismjs language-java prismjs-lines-highlighted" tabindex="0" data-cke-widget-data="%7B%22lang%22%3A%22java%22%2C%22code%22%3A%22%40Getter%5Cn%40Builder%5Cn%40RequiredArgsConstructor%5Cnpublic%20class%20ChatOption%20implements%20Serializable%20%7B%5Cn%5Cn%20%20%20%20private%20final%20boolean%20enableInternalSearch%3B%5Cn%20%20%20%20private%20final%20boolean%20enableExternalSearch%3B%5Cn%20%20%20%20private%20final%20boolean%20enableExampleTools%3B%5Cn%20%20%20%20private%20final%20boolean%20enableMemory%3B%5Cn%20%20%20%20private%20final%20boolean%20enableDebug%3B%5Cn%5Cn%20%20%20%20private%20final%20int%20retrieveTopK%3B%5Cn%5Cn%20%20%20%20private%20final%20String%20model%3B%5Cn%7D%5Cn%5Cn%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code>@Getter
@Builder
@RequiredArgsConstructor
public class ChatOption implements Serializable {

    private final boolean enableInternalSearch;
    private final boolean enableExternalSearch;
    private final boolean enableExampleTools;
    private final boolean enableMemory;
    private final boolean enableDebug;

    private final int retrieveTopK;

    private final String model;
}</code></pre>
<img src="https://img2024.cnblogs.com/blog/395759/202505/395759-20250502154312618-1691611567.gif" class="cke_reset cke_widget_mask"><span class="cke_reset cke_widget_drag_handler_container"><img src="https://img2024.cnblogs.com/blog/395759/202505/395759-20250502154312618-1691611567.gif" class="cke_reset cke_widget_drag_handler" height="15" width="15" data-cke-widget-drag-handler="1"></span></div>
<h2><strong>为应用增加一组Function Calling</strong></h2>
<p>我们写一个示例的Tool，提供function calling的功能</p>
<p>&nbsp;</p>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" tabindex="-1" role="region" contenteditable="false" aria-label="code snippet widget" data-cke-display-name="code snippet" data-cke-filter="off" data-cke-widget-id="2" data-cke-widget-wrapper="1">
<pre class="cke_widget_element highlighter-prismjs language-java prismjs-lines-highlighted" tabindex="0" data-cke-widget-data="%7B%22lang%22%3A%22java%22%2C%22code%22%3A%22%40Slf4j%5Cn%40Component%5Cnpublic%20class%20ExampleTool%20implements%20ChatTool%20%7B%5Cn%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20String%20getName()%20%7B%5Cn%20%20%20%20%20%20%20return%20%5C%22SampleTool%5C%22%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20String%20getDescription()%20%7B%5Cn%20%20%20%20%20%20%20return%20%5C%22%5C%22%5C%22%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20contains%20methods%3A%20forecast%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20get%20date%20time%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20operate%20local%20file%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%5C%22%5C%22%5C%22%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%40Tool(description%20%3D%20%5C%22Get%20the%20current%20date%20and%20time%20in%20the%20user's%20timezone%5C%22)%5Cn%20%20%20%20public%20String%20getCurrentDateTime()%20%7B%5Cn%20%20%20%20%20%20%20return%20LocalDateTime.now().atZone(LocaleContextHolder.getTimeZone().toZoneId()).toString()%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%40Tool(description%20%3D%20%5C%22get%20the%20forecast%20weather%20of%20the%20specified%20city%20and%20date%5C%22)%5Cn%20%20%20%20public%20String%20getForecast(%40ToolParam(description%20%3D%20%5C%22%E6%97%A5%E6%9C%9F%5C%22)%20LocalDate%20date%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%40ToolParam(description%20%3D%20%5C%22%E5%9F%8E%E5%B8%82%5C%22)%20String%20city)%20%7B%5Cn%20%20%20%20%20%20%20return%20%5C%22%5C%22%5C%22%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20-%20%E5%BD%93%E5%89%8D%E6%B8%A9%E5%BA%A6%EF%BC%9A12%C2%B0C%20%5C%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20-%20%E5%A4%A9%E6%B0%94%E7%8A%B6%E5%86%B5%EF%BC%9A%E9%9B%BE%E9%9C%BE%20%5C%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20-%20%E4%BD%93%E6%84%9F%E6%B8%A9%E5%BA%A6%EF%BC%9A12%C2%B0C%20%5C%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20-%20%E4%BB%8A%E5%A4%A9%E5%A4%A9%E6%B0%94%EF%BC%9A%E5%A4%A7%E9%83%A8%E5%88%86%E5%9C%B0%E5%8C%BA%E5%A4%9A%E4%BA%91%EF%BC%8C%E6%9C%80%E4%BD%8E%E6%B0%94%E6%B8%A99%C2%B0C%20%5C%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20-%20%E7%A9%BA%E6%B0%94%E8%B4%A8%E9%87%8F%EF%BC%9A%E8%BD%BB%E5%BA%A6%E6%B1%A1%E6%9F%93%20(51-100)%EF%BC%8C%E4%B8%BB%E8%A6%81%E6%B1%A1%E6%9F%93%E7%89%A9%20PM2.5%2075%20%CE%BCg%2Fm%C2%B3%20%5C%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20-%20%E9%A3%8E%E9%80%9F%EF%BC%9A%E8%BD%BB%E9%A3%8E%20(2%20-%205%20%E5%85%AC%E9%87%8C%2F%E5%B0%8F%E6%97%B6)%EF%BC%8C%E8%A5%BF%E5%8D%97%E9%A3%8E%201%E7%BA%A7%20%5C%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20-%20%E6%B9%BF%E5%BA%A6%EF%BC%9A78%25%20%5C%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20-%20%E8%83%BD%E8%A7%81%E5%BA%A6%EF%BC%9A%E8%83%BD%E8%A7%81%E5%BA%A6%E5%B7%AE%20(1%20-%202%20%E5%85%AC%E9%87%8C)%EF%BC%8C2%20%E5%85%AC%E9%87%8C%20%5C%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20-%20%E6%B0%94%E5%8E%8B%EF%BC%9A1018%20hPa%20%5C%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20-%20%E9%9C%B2%E7%82%B9%EF%BC%9A8%C2%B0C%20%5C%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%5C%22%5C%22%5C%22%3B%5Cn%20%20%20%20%7D%5Cn%7D%5Cn%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code>@Slf4j
@Component
public class ExampleTool implements ChatTool {

    @Override
    public String getName() {
       return "SampleTool";
    }

    @Override
    public String getDescription() {
       return """
             contains methods: forecast,
             get date time,
             operate local file,
             """;
    }

    @Tool(description = "Get the current date and time in the user's timezone")
    public String getCurrentDateTime() {
       return LocalDateTime.now().atZone(LocaleContextHolder.getTimeZone().toZoneId()).toString();
    }

    @Tool(description = "get the forecast weather of the specified city and date")
    public String getForecast(@ToolParam(description = "日期") LocalDate date,
                        @ToolParam(description = "城市") String city) {
       return """
             - 当前温度：12°C \n
             - 天气状况：雾霾 \n
             - 体感温度：12°C \n
             - 今天天气：大部分地区多云，最低气温9°C \n
             - 空气质量：轻度污染 (51-100)，主要污染物 PM2.5 75 μg/m³ \n
             - 风速：轻风 (2 - 5 公里/小时)，西南风 1级 \n
             - 湿度：78% \n
             - 能见度：能见度差 (1 - 2 公里)，2 公里 \n
             - 气压：1018 hPa \n
             - 露点：8°C \n
             """;
    }
}</code></pre>
<img src="https://img2024.cnblogs.com/blog/395759/202505/395759-20250502154312618-1691611567.gif" class="cke_reset cke_widget_mask"><span class="cke_reset cke_widget_drag_handler_container"><img src="https://img2024.cnblogs.com/blog/395759/202505/395759-20250502154312618-1691611567.gif" class="cke_reset cke_widget_drag_handler" height="15" width="15" data-cke-widget-drag-handler="1"></span></div>
<p>再为这个tool写一个supplier</p>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" tabindex="-1" role="region" contenteditable="false" aria-label="code snippet widget" data-cke-display-name="code snippet" data-cke-filter="off" data-cke-widget-id="1" data-cke-widget-wrapper="1">
<pre class="cke_widget_element highlighter-prismjs language-java prismjs-lines-highlighted" tabindex="0" data-cke-widget-data="%7B%22lang%22%3A%22java%22%2C%22code%22%3A%22%40Slf4j%5Cn%40Component%5Cn%40RequiredArgsConstructor%5Cnpublic%20class%20ExampleToolSupplier%20implements%20ChatToolSupplier%20%7B%5Cn%5Cn%20%20%20%20private%20final%20ExampleTool%20exampleTool%3B%5Cn%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20boolean%20support(ChatContext%20context)%20%7B%5Cn%20%20%20%20%20%20%20return%20context.getChatOption().isEnableExampleTools()%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20ChatTool%20getTool(ChatContext%20context)%20%7B%5Cn%20%20%20%20%20%20%20return%20exampleTool%3B%5Cn%20%20%20%20%7D%5Cn%7D%5Cn%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code>@Slf4j
@Component
@RequiredArgsConstructor
public class ExampleToolSupplier implements ChatToolSupplier {

    private final ExampleTool exampleTool;

    @Override
    public boolean support(ChatContext context) {
       return context.getChatOption().isEnableExampleTools();
    }

    @Override
    public ChatTool getTool(ChatContext context) {
       return exampleTool;
    }
}</code></pre>
<img src="https://img2024.cnblogs.com/blog/395759/202505/395759-20250502154312618-1691611567.gif" class="cke_reset cke_widget_mask"><span class="cke_reset cke_widget_drag_handler_container"><img src="https://img2024.cnblogs.com/blog/395759/202505/395759-20250502154312618-1691611567.gif" class="cke_reset cke_widget_drag_handler" height="15" width="15" data-cke-widget-drag-handler="1"></span></div>
<p>于是乎，你在没有修改主逻辑的情况下为应用增加了两个功能，这看上去真的很棒！高内聚，低耦合，并且对扩展开放，对修改封闭！</p>
<p>现在，你可以像下面这样，提供更多的扩展能力</p>
<p><img src="https://img2024.cnblogs.com/blog/395759/202505/395759-20250502154508280-1424239802.png"></p>
<h1><strong># Maven</strong></h1>
<p>首先配置maven配置，导入spring-ai的核心包，这里我们目前只用到了openai和rag向量数据库，暂时导入这两个包即可。</p>
<p>&nbsp;</p>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" tabindex="-1" role="region" contenteditable="false" aria-label="code snippet widget" data-cke-display-name="code snippet" data-cke-filter="off" data-cke-widget-id="0" data-cke-widget-wrapper="1">
<pre class="cke_widget_element highlighter-prismjs language-xml prismjs-lines-highlighted" tabindex="0" data-cke-widget-data="%7B%22lang%22%3A%22xml%22%2C%22code%22%3A%22%20%20%20%20%20%20%3C!--%20spring%20AI%20--%3E%5Cn%20%20%20%20%20%20%20%20%3Cdependency%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CgroupId%3Eorg.springframework.ai%3C%2FgroupId%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CartifactId%3Espring-ai-starter-model-openai%3C%2FartifactId%3E%5Cn%20%20%20%20%20%20%20%20%3C%2Fdependency%3E%5Cn%20%20%20%20%20%20%20%20%3Cdependency%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CgroupId%3Eorg.springframework.ai%3C%2FgroupId%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CartifactId%3Espring-ai-advisors-vector-store%3C%2FartifactId%3E%5Cn%20%20%20%20%20%20%20%20%3C%2Fdependency%3E%5Cn%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code>      &lt;!-- spring AI --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.ai&lt;/groupId&gt;
            &lt;artifactId&gt;spring-ai-starter-model-openai&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.ai&lt;/groupId&gt;
            &lt;artifactId&gt;spring-ai-advisors-vector-store&lt;/artifactId&gt;
        &lt;/dependency&gt;</code></pre>
<img src="https://img2024.cnblogs.com/blog/395759/202505/395759-20250502154312618-1691611567.gif" class="cke_reset cke_widget_mask"><span class="cke_reset cke_widget_drag_handler_container"><img src="https://img2024.cnblogs.com/blog/395759/202505/395759-20250502154312618-1691611567.gif" class="cke_reset cke_widget_drag_handler" height="15" width="15" data-cke-widget-drag-handler="1"></span></div>
<h1><strong>代码整体结构</strong></h1>
<p><img src="https://img2024.cnblogs.com/blog/395759/202505/395759-20250502154517004-1544976730.png" height="807" width="1187"></p>
<h1>具体代码示例</h1>
<p><a href="https://github.com/aurora-ultra/aurora-spring-ai" rel="noopener nofollow">https://github.com/aurora-ultra/aurora-spring-ai</a></p>
<p><span data-cke-copybin-end="1">​</span></p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.02966329528935185" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-02 15:47">2025-05-02 15:47</span>&nbsp;
<a href="https://www.cnblogs.com/mrye">有泥土的路</a>&nbsp;
阅读(<span id="post_view_count">13</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18857558);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18857558', targetLink: 'https://www.cnblogs.com/mrye/p/18857558', title: '大模型应用开发进阶篇：Spring-AI 结合领域驱动开发设计思想' })">举报</a>
</div>
        