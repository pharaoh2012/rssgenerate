
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/data-analytics/p/18849986" title="发布于 2025-05-08 18:33">
    <span role="heading" aria-level="2">【SQL周周练】给你无酸纸、变色油墨，你能伪造多少美金？</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        <img src="https://img2024.cnblogs.com/blog/3640949/202504/3640949-20250427174046256-277631692.png" alt="【SQL周周练】给你无酸纸、变色油墨，你能伪造多少美金？" class="desc_img">
        根据电影《无双》自创的 SQL 题目：假设伪钞集团每日给你供应随机数量的变色油墨、无酸纸、安全线/防伪线。请你计算每天能制作伪钞多少张，并且根据当天的情况输出第二天最缺少的材料。
    </div>
<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<section>
<p>大家好，我是“蒋点数分”，多年以来一直从事数据分析工作。从今天开始，与大家持续分享关于数据分析的学习内容。</p>
<p>本文是第 2 篇，也是【SQL 周周练】系列的第 2 篇。该系列是挑选或自创具有一些难度的 SQL 题目，一周至少更新一篇。后续创作的内容，初步规划的方向包括：</p>
<h2 data-heading="true">后续内容规划</h2>
<p>1.利用&nbsp;<strong>Streamlit</strong>&nbsp;实现&nbsp;<code>Hive 元数据展示</code>、<code>SQL 编辑器</code>、 结合<code>Docker 沙箱实现数据分析 Agent</code><br>2.时间序列异常识别、异动归因算法<br>3.留存率拟合、预测、建模<br>4.学习&nbsp;<code>AB 实验</code>、复杂实验设计等<br>5.<code>自动化机器学习</code>、自动化特征工程<br>6.<code>因果推断</code>学习<br>7. ……</p>
<p><strong>欢迎关注</strong>，一起学习。</p>
<h2 data-heading="true">第 2 期题目</h2>
<p>题目来源：自创题目，场景来源于香港电影《无双》</p>
<h3 data-heading="true">一、题目介绍</h3>
<p>《无双》是一部很不错的电影，其主题是伪造美钞。虽然已经上映多年，但其中“无酸纸”、“变色油墨”的梗，至今在网上依旧可以看到。其中的一个经典片段 —— “画家”(周润发)嗔怪“李问”(郭富城)订购了500吨无酸纸，说让“李文”活着给他印完（当然结尾展示了郭富城其实才是“画家”）。那么由此而来，我想出了一道 SQL 题：</p>
<p>假设伪钞集团每日给你供应随机数量的<code>变色油墨</code>、<code>无酸纸</code>、<code>安全线/防伪线</code>（未用完的材料可以留给后面用），凹版印刷机等其他材料和工具也已经准备好。</p>
<p>请你计算每天能制作伪钞多少张，并且根据当天的情况输出第二天<strong>最缺</strong>哪种材料：</p>
<section>
<table>
<thead>
<tr>
<td>
<section>列名</section>
</td>
<td>
<section>数据类型</section>
</td>
<td>
<section>注释</section>
</td>
</tr>
</thead>
<tbody>
<tr>
<td>
<section>date</section>
</td>
<td>
<section>string</section>
</td>
<td>
<section>日期</section>
</td>
</tr>
<tr>
<td>
<section>acid_free_paper_supply</section>
</td>
<td>
<section>int</section>
</td>
<td>
<section>无酸纸供应量（单位g）</section>
</td>
</tr>
<tr>
<td>
<section>optically_variable_ink_supply</section>
</td>
<td>
<section>int</section>
</td>
<td>
<section>变色油墨供应量（单位mg）</section>
</td>
</tr>
<tr>
<td>
<section>security_thread_supply</section>
</td>
<td>
<section>int</section>
</td>
<td>
<section>安全线供应量</section>
</td>
</tr>
</tbody>
</table>
</section>
<p>假设 一张伪钞需要&nbsp;1g 无酸纸，0.005g 的变色油墨，1 根安全线；印制过程中不考虑损耗</p>
<h3 data-heading="true">二、题目思路</h3>
<p>想要答题的同学，可以先思考答案🤔。<br>……</p>
<p>……</p>
<p>……</p>
<p>我来谈谈我的思路：这道题目的设计，材料是以固定比例的投入产生一张伪钞，哪种材料相对较少，哪种材料就限制住了伪钞的制造数量；所以可以<strong>单独计算三种材料能制造多少伪钞</strong>，然后用&nbsp;<code>least</code>&nbsp;求最小值，类似“木桶短板理论”。题目里提到了当日未用完的材料，可以后面再用；所以每天不需要单独计算，直接计算从开始到当天 =&gt; 这又用上了数据分析师的老朋友“窗口函数”。</p>
<p>下面，我用&nbsp;<code>NumPy</code>&nbsp;和&nbsp;<code>Scipy</code>&nbsp;生成模拟的数据集：</p>
<h3 data-heading="true">三、生成模拟数据</h3>
<p>只关心 SQL 代码的同学，可以跳转到第四节（我在工作中使用&nbsp;<code>Hive</code>&nbsp;较多，因此采用&nbsp;<code>Hive</code>&nbsp;的语法）</p>
<p>模拟代码如下：</p>
<section>1. 定义模拟逻辑需要的<code>常量</code>，计算目标数量的伪钞需要多少材料：</section>
<section></section>
<pre class="highlighter-prismjs language-python prismjs-lines-highlighted" tabindex="0" data-dark-theme="true"><code>import numpy as np
import pandas as pd
import scipy

# 随机数种子
RANDOM_SEED = 2025
# 伪造开始日期
START_DATE = "2025-05-01"
# 伪造天数
NUM_DAY = 10
# 需要伪造的伪钞数量（张数，非金额）
NUM_TOTAL_COUNTERFEIT_CURRENCY = 1_000_000

# 一张伪钞需要多少无酸纸，简化问题只考虑重量(单位 g)
ACID_FREE_PAPER_EACH_COUNTERFEIT_CURRENCY = 1
# 所有伪钞需要的无酸纸(1.05 是一个冗余度，所有材料类似)
ACID_FREE_PAPER_ALL_NEED = (
    ACID_FREE_PAPER_EACH_COUNTERFEIT_CURRENCY 
    * NUM_TOTAL_COUNTERFEIT_CURRENCY 
    * 1.05
)

# 一张伪钞需要多少变色油墨，重量（单位 mg）
OPTICALLY_VARIABLE_INK_EACH_COUNTERFEIT_CURRENCY = 5
# 所有伪钞需要的变色油墨
OPTICALLY_VARIABLE_INK_ALL_NEED = (
    OPTICALLY_VARIABLE_INK_EACH_COUNTERFEIT_CURRENCY
    * NUM_TOTAL_COUNTERFEIT_CURRENCY
    * 1.05
)

# 一张伪钞需要多少安全线（单位 条）
SECURITY_THREAD_EACH_COUNTERFEIT_CURRENCY = 1
# 所有伪钞需要的防伪线
SECURITY_THREAD_ALL_NEED = (
    SECURITY_THREAD_EACH_COUNTERFEIT_CURRENCY 
    * NUM_TOTAL_COUNTERFEIT_CURRENCY 
    * 1.05
)</code></pre>
<section></section>
<section>2. 伪钞需要的材料每天按照随机的权重提供，权重需要归一化：</section>
<section></section>
<pre class="highlighter-prismjs language-python prismjs-lines-highlighted" tabindex="0" data-dark-theme="true"><code># 权重范围，用来随机生成数据（需要归一化）
WEIGHT_RANGE = (0.2, 2)

# 无酸纸每天供应的随机权重
acid_free_paper_supply_weight = scipy.stats.uniform.rvs(
    loc=WEIGHT_RANGE[0],
    scale=WEIGHT_RANGE[1] - WEIGHT_RANGE[0],
    size=NUM_DAY,
    random_state=RANDOM_SEED - 1,
)

# 变色油墨每天供应的权重
optically_variable_ink_supply_weight = scipy.stats.uniform.rvs(
    loc=WEIGHT_RANGE[0],
    scale=WEIGHT_RANGE[1] - WEIGHT_RANGE[0],
    size=NUM_DAY,
    random_state=RANDOM_SEED,
)

# 安全线每天供应的权重
security_thread_supply_weight = scipy.stats.uniform.rvs(
    loc=WEIGHT_RANGE[0],
    scale=WEIGHT_RANGE[1] - WEIGHT_RANGE[0],
    size=NUM_DAY,
    random_state=RANDOM_SEED + 1,
)

# 将权重归一化，使得所有天数的供应比例和为 1
acid_free_paper_supply_weight /= acid_free_paper_supply_weight.sum()
optically_variable_ink_supply_weight /= optically_variable_ink_supply_weight.sum()
security_thread_supply_weight /= security_thread_supply_weight.sum()</code></pre>
<section></section>
<section>3. 将前面生成的数据转为 <code>pd.DataFrame</code>，并输出为&nbsp;<code>csv</code>&nbsp;文件：</section>
<section></section>
<pre class="highlighter-prismjs language-python prismjs-lines-highlighted" tabindex="0" data-dark-theme="true"><code>df = pd.DataFrame(
    {
        "acid_free_paper_supply": ACID_FREE_PAPER_ALL_NEED
        * acid_free_paper_supply_weight,
        "optically_variable_ink_supply": OPTICALLY_VARIABLE_INK_ALL_NEED
        * optically_variable_ink_supply_weight,
        "security_thread_supply": SECURITY_THREAD_ALL_NEED
        * security_thread_supply_weight
    }
)

# 四舍五入并转为 int
df = df.round().astype(int)
df["date"] = pd.date_range(start=START_DATE, periods=NUM_DAY, freq="D")

# 在 Jupyter 中展示数据
display(df)

out_csv_path = "./dwd_conterfeit_material_daily_supply_records.csv"
columns = [
    "date",
    "acid_free_paper_supply",
    "optically_variable_ink_supply",
    "security_thread_supply"
]
# 导出 csv 用来让 hive load 数据，utf-8-sig 编码处理中文，虽然表里数据没有中文
df[columns].to_csv(out_csv_path, header=False, index=False, encoding="utf-8-sig")</code></pre>
<section></section>
<section>4. 创建新的 <code>Hive</code>&nbsp;表，并将数据&nbsp;<code>load</code>&nbsp;到表中：</section>
<section></section>
<pre class="highlighter-prismjs language-python prismjs-lines-highlighted" tabindex="0" data-dark-theme="true"><code>from pyhive import hive

# 配置连接参数
host_ip = "127.0.0.1"
port = 10000
username = "蒋点数分"


with hive.Connection(host=host_ip, port=port) as conn:
    cursor = conn.cursor()

    drop_table_sql = """
    drop table if exists data_exercise.dwd_conterfeit_material_daily_supply_records
    """
    print(drop_table_sql)
    cursor.execute(drop_table_sql)

    create_table_sql = """
    create table data_exercise.dwd_conterfeit_material_daily_supply_records (
        `date` string comment "日期",
        acid_free_paper_supply int comment "无酸纸供应量（单位g）",
        optically_variable_ink_supply int comment "变色油墨供应量（单位mg）",
        security_thread_supply int comment "安全线供应量"
    )
    comment "伪钞集团每天供应的伪钞原材料数量 | 文章编号：2c3d2561"
    row format delimited fields terminated by ","
    stored as textfile
    """
    
    print(create_table_sql)
    cursor.execute(create_table_sql)

    import os
    
    load_data_sql = f"""
    load data local inpath "{os.path.abspath(out_csv_path)}" 
    overwrite into table data_exercise.dwd_conterfeit_material_daily_supply_records
    """
    
    print(load_data_sql)
    cursor.execute(load_data_sql)

    cursor.close()</code></pre>
<blockquote>
<p>我通过使用&nbsp;<code>PyHive</code>&nbsp;包实现 Python 操作&nbsp;<code>Hive</code>。我个人电脑部署了&nbsp;<code>Hadoop</code>&nbsp;及&nbsp;<code>Hive</code>，但是没有开启认证，企业里一般常用&nbsp;<code>Kerberos</code>&nbsp;来进行大数据集群的认证。</p>
</blockquote>
<h3 data-heading="true">四、SQL 解答</h3>
<p>思路在第二节已经说明，下面是代码，细节参见注释。其中&nbsp;<code>cumulative_conterfeit_all_restriction</code>&nbsp;等于哪种材料的&nbsp;<code>cumulative_conterfeit_only...</code>&nbsp;就可以认为第二天最缺哪种材料（伪钞制造量被这种材料制约）。提示：<code>order by</code>&nbsp;时，统计的窗口范围默认是&nbsp;<code>rows between preceding unbounded and current row</code>，写清楚更好。三种材料单独判断，然后用&nbsp;<code>concat_ws</code>&nbsp;合并结果（注意其他 SQL 方言不一定有&nbsp;<code>Hive</code>&nbsp;的这个函数）。</p>
<p>每天的伪钞制造量&nbsp;<code>action_daily_production</code>&nbsp;使用&nbsp;<code>cumulative_conterfeit_all_restriction</code>&nbsp;结合窗口函数&nbsp;<code>lag</code>&nbsp;减去上一行即可。</p>
<p>&nbsp;</p>
<pre class="highlighter-prismjs prismjs-lines-highlighted language-python" tabindex="0" data-dark-theme="true"><code>with calc_single_material_restrict_production as (
    -- 计算一种材料限制能造多少美元伪钞
    select
      `date`
    , acid_free_paper_supply
    , optically_variable_ink_supply
    , security_thread_supply
    -- 只考虑无酸纸，不考虑其他材料和每日最大制造量限制，累计伪钞制作数，下面以此类推
    -- 有些材料比例为 1，因此不额外写除以 1
    , sum(acid_free_paper_supply) over(orderby `date` asc) as cumulative_conterfeit_only_acid_free_paper
    -- 注意向下取整
    , floor(sum(optically_variable_ink_supply) over(orderby `date` asc) /5) as cumulative_conterfeit_only_optically_variable_ink
    , sum(security_thread_supply) over(orderby `date` asc) as cumulative_conterfeit_only_security_thread
    from data_exercise.dwd_conterfeit_material_daily_supply_records
)

, calc_all_restriction_prodection as (
    select
      `date`
    , acid_free_paper_supply
    , optically_variable_ink_supply
    , security_thread_supply
    , cumulative_conterfeit_only_acid_free_paper
    , cumulative_conterfeit_only_optically_variable_ink
    , cumulative_conterfeit_only_security_thread
    -- 使用 least 计算最小值
    , least(
        cumulative_conterfeit_only_acid_free_paper, 
        cumulative_conterfeit_only_optically_variable_ink, 
        cumulative_conterfeit_only_security_thread
      ) as cumulative_conterfeit_all_restriction
    from calc_single_material_restrict_production

)

select
  `date`
, cumulative_conterfeit_only_acid_free_paper
, cumulative_conterfeit_only_optically_variable_ink
, cumulative_conterfeit_only_security_thread
, cumulative_conterfeit_all_restriction
-- 减去上一行的数据，获取每日伪钞制造量
, cumulative_conterfeit_all_restriction -lag(cumulative_conterfeit_all_restriction, 1, 0) over(orderby `date` asc) as action_daily_production
, if( cumulative_conterfeit_all_restriction &gt;=1000000, null, -- 已经完成目标量，就不写缺哪种材料了
    concat_ws(',', 
        if(cumulative_conterfeit_only_acid_free_paper=cumulative_conterfeit_all_restriction, '无酸纸', null),
        if(cumulative_conterfeit_only_optically_variable_ink=cumulative_conterfeit_all_restriction, '变色油墨', null),
        if(cumulative_conterfeit_only_security_thread=cumulative_conterfeit_all_restriction, '安全线', null)
    )
) as `最缺的材料`
from calc_all_restriction_prodection</code></pre>
<p>&nbsp;</p>
<p>查询结果如下：</p>
<section>
<table>
<thead>
<tr>
<td data-colwidth="118">
<section>date</section>
</td>
<td data-colwidth="171">
<section>cumulative_conterfeit_only_acid_free_paper</section>
</td>
<td data-colwidth="77">
<section>cumulative_conterfeit_only_optically_variable_ink</section>
</td>
<td data-colwidth="79">
<section>cumulative_conterfeit_only_security_thread</section>
</td>
<td data-colwidth="83">
<section>cumulative_conterfeit_all_restriction</section>
</td>
<td data-colwidth="85">
<section>action_daily_production</section>
</td>
<td data-colwidth="173">
<section>最缺的材料</section>
</td>
</tr>
</thead>
<tbody>
<tr>
<td data-colwidth="118">
<section>2025-05-01</section>
</td>
<td data-colwidth="171">
<section>139293</section>
</td>
<td data-colwidth="77">
<section>36604</section>
</td>
<td data-colwidth="79">
<section>51579</section>
</td>
<td data-colwidth="83">
<section>36604</section>
</td>
<td data-colwidth="85">
<section>36604</section>
</td>
<td data-colwidth="173">
<section>变色油墨</section>
</td>
</tr>
<tr>
<td data-colwidth="118">
<section>2025-05-02</section>
</td>
<td data-colwidth="171">
<section>300720</section>
</td>
<td data-colwidth="77">
<section>184888</section>
</td>
<td data-colwidth="79">
<section>133386</section>
</td>
<td data-colwidth="83">
<section>133386</section>
</td>
<td data-colwidth="85">
<section>96782</section>
</td>
<td data-colwidth="173">
<section>安全线</section>
</td>
</tr>
<tr>
<td data-colwidth="118">
<section>2025-05-03</section>
</td>
<td data-colwidth="171">
<section>360345</section>
</td>
<td data-colwidth="77">
<section>339815</section>
</td>
<td data-colwidth="79">
<section>303165</section>
</td>
<td data-colwidth="83">
<section>303165</section>
</td>
<td data-colwidth="85">
<section>169779</section>
</td>
<td data-colwidth="173">
<section>安全线</section>
</td>
</tr>
<tr>
<td data-colwidth="118">
<section>2025-05-04</section>
</td>
<td data-colwidth="171">
<section>391211</section>
</td>
<td data-colwidth="77">
<section>422448</section>
</td>
<td data-colwidth="79">
<section>334383</section>
</td>
<td data-colwidth="83">
<section>334383</section>
</td>
<td data-colwidth="85">
<section>31218</section>
</td>
<td data-colwidth="173">
<section>安全线</section>
</td>
</tr>
<tr>
<td data-colwidth="118">
<section>2025-05-05</section>
</td>
<td data-colwidth="171">
<section>454196</section>
</td>
<td data-colwidth="77">
<section>496570</section>
</td>
<td data-colwidth="79">
<section>426535</section>
</td>
<td data-colwidth="83">
<section>426535</section>
</td>
<td data-colwidth="85">
<section>92152</section>
</td>
<td data-colwidth="173">
<section>安全线</section>
</td>
</tr>
<tr>
<td data-colwidth="118">
<section>2025-05-06</section>
</td>
<td data-colwidth="171">
<section>497465</section>
</td>
<td data-colwidth="77">
<section>551300</section>
</td>
<td data-colwidth="79">
<section>598018</section>
</td>
<td data-colwidth="83">
<section>497465</section>
</td>
<td data-colwidth="85">
<section>70930</section>
</td>
<td data-colwidth="173">
<section>无酸纸</section>
</td>
</tr>
<tr>
<td data-colwidth="118">
<section>2025-05-07</section>
</td>
<td data-colwidth="171">
<section>664497</section>
</td>
<td data-colwidth="77">
<section>665371</section>
</td>
<td data-colwidth="79">
<section>646287</section>
</td>
<td data-colwidth="83">
<section>646287</section>
</td>
<td data-colwidth="85">
<section>148822</section>
</td>
<td data-colwidth="173">
<section>安全线</section>
</td>
</tr>
<tr>
<td data-colwidth="118">
<section>2025-05-08</section>
</td>
<td data-colwidth="171">
<section>821998</section>
</td>
<td data-colwidth="77">
<section>754988</section>
</td>
<td data-colwidth="79">
<section>805933</section>
</td>
<td data-colwidth="83">
<section>754988</section>
</td>
<td data-colwidth="85">
<section>108701</section>
</td>
<td data-colwidth="173">
<section>变色油墨</section>
</td>
</tr>
<tr>
<td data-colwidth="118">
<section>2025-05-09</section>
</td>
<td data-colwidth="171">
<section>938544</section>
</td>
<td data-colwidth="77">
<section>914610</section>
</td>
<td data-colwidth="79">
<section>910409</section>
</td>
<td data-colwidth="83">
<section>910409</section>
</td>
<td data-colwidth="85">
<section>155421</section>
</td>
<td data-colwidth="173">
<section>安全线</section>
</td>
</tr>
<tr>
<td data-colwidth="118">
<section>2025-05-10</section>
</td>
<td data-colwidth="171">
<section>1050000</section>
</td>
<td data-colwidth="77">
<section>1050000</section>
</td>
<td data-colwidth="79">
<section>1050001</section>
</td>
<td data-colwidth="83">
<section>1050000</section>
</td>
<td data-colwidth="85">
<section>139591</section>
</td>
<td data-colwidth="173">
<section>null</section>
</td>
</tr>
</tbody>
</table>
</section>
<figure></figure>
</section>
<section><img src="https://img2024.cnblogs.com/blog/3640949/202504/3640949-20250427173852509-2026342824.png" alt="" height="699" width="1271"></section>
<section>
<figure>
<figcaption>vchart 绘制可视化结果</figcaption>
</figure>
<p>上面的图片，是我在&nbsp;<code>Python</code>&nbsp;中使用&nbsp;<code>pyvchart</code>&nbsp;库实现的，它是字节跳动开源的&nbsp;<code>vchart</code>&nbsp;的 Python 包，当然你也可以使用&nbsp;<code>pyecharts</code>。<code>pd.melt</code>&nbsp;函数用于将“宽数据框”转“长数据框”。代码部分如下：</p>
<p>&nbsp;</p>
<pre class="highlighter-prismjs prismjs-lines-highlighted language-python" tabindex="0" data-dark-theme="true"><code>with hive.Connection(host=host_ip, port=port) as conn:
    select_data_sql = ''' 我给出 SQL 答案 '''
    df_outcome = pd.read_sql_query(select_data_sql, conn)

from pyvchart import render_chart
spec = {
"type": 'area',
"data": [
    {
      "id": 'lineData',
      "values": pd.melt(df_outcome[[
        'date','cumulative_conterfeit_only_acid_free_paper',
        'cumulative_conterfeit_only_optically_variable_ink',
        'cumulative_conterfeit_only_security_thread'
      ]], id_vars=['date']).to_dict(orient='records')
    },
    {
      "id": 'areaData',
      "values": pd.melt(df_outcome[['date','cumulative_conterfeit_all_restriction',
        '最缺的材料']], id_vars=['date']).to_dict(orient='records')
    },
  ],
"series": [
    {
      "type": 'line',
      "dataId": 'lineData',
      "xField": 'date',
      "yField": 'value',
      "seriesField": 'variable',
    },
    {
      "type": 'area',
      "dataId": 'areaData',
      "xField": 'date',
      "yField": 'value',
      "seriesField": 'variable',
    },
 ],

};

display(render_chart(spec))</code></pre>
<hr>
<p>😁😁😁<br><strong>我现在正在求职数据类工作</strong>（主要是数据分析或数据科学）；如果您有合适的机会，恳请您与我联系，即时到岗，不限城市。您可以发送私信或者联系我（全网同名：蒋点数分）。</p>
</section>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.08167619064467592" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-08 18:33">2025-05-08 18:33</span>&nbsp;
<a href="https://www.cnblogs.com/data-analytics">蒋点数分</a>&nbsp;
阅读(<span id="post_view_count">50</span>)&nbsp;
评论(<span id="post_comment_count">1</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18849986);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18849986', targetLink: 'https://www.cnblogs.com/data-analytics/p/18849986', title: '【SQL周周练】给你无酸纸、变色油墨，你能伪造多少美金？' })">举报</a>
</div>
        