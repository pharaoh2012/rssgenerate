
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/ryanyangcs/p/18632447" title="发布于 2024-12-26 11:58">
    <span role="heading" aria-level="2">Sealos Devbox 基础教程：使用 Cursor 从零开发一个 One API 替代品</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>随着技术的成熟和 AI 的崛起，很多原本需要团队协作才能完成的工作现在都可以通过自动化和智能化的方式完成。于是乎，<strong>单个开发者的能力得到了极大的提升</strong> - 借助各种工具，一个人就可以完成开发、测试、运维等整条链路上的工作，渡劫飞升成为真正的 “全干工程师”。</p>
<p>之前我们分享过一些入门级的 Hello World 教程。今天，我想通过一个实际的业务案例来展示 Devbox 并非只能开发玩具，而是一个真正的生产力工具。</p>
<p><a href="https://sealos.run" target="_blank" rel="noopener nofollow">Sealos</a> 平台上有很多应用，其中很多管控层面的应用都是使用 Cursor + Go + Next.js 开发的。我们的开发环境直接使用 <a href="https://sealos.run/devbox" target="_blank" rel="noopener nofollow">Sealos Devbox</a>，上线也是通过 Devbox 一键完成。这种开发模式让我们团队拥有了非常高效的作战能力 - <strong>大部分重复性工作都通过自动化或 AI 完成，让开发者可以专注于核心业务逻辑</strong>。</p>
<p><img src="https://img2024.cnblogs.com/other/1737323/202412/1737323-20241226115803359-771121103.png" alt="" loading="lazy"></p>
<p>以 Sealos 中的 <a href="https://sealos.run/docs/5.0.0/user-guide/ai-proxy/" target="_blank" rel="noopener nofollow">AI Proxy</a> 应用为例，这是一个典型的前后端分离架构的应用，主要由两部分组成：</p>
<ol>
<li>基于 Next.js 开发的前端应用和 BFF 层。BFF 层负责用户鉴权，并将经过验证的请求转发给后端服务。</li>
<li>使用 Golang 开发的后端服务，负责核心业务逻辑，包括 token 存储、日志记录和请求转发等功能。</li>
</ol>
<p><img src="https://img2024.cnblogs.com/other/1737323/202412/1737323-20241226115804846-294253458.png" alt="" loading="lazy"></p>
<p>接下来，我将详细介绍<strong>如何高效地开发这样一个生产级别的系统</strong>。</p>
<h2 id="golang-后端">Golang 后端</h2>
<h3 id="创建开发环境">创建开发环境</h3>
<p>首先在 <a href="https://hzh.sealos.run" target="_blank" rel="noopener nofollow">Sealos Cloud</a> 中打开 Debox 应用，创建一个新项目，选择 Go 作为运行环境，选择 1.23 版本。</p>
<p><img src="https://img2024.cnblogs.com/other/1737323/202412/1737323-20241226115806036-340212529.png" alt="" loading="lazy"></p>
<p>Devbox 为开发者提供了几个非常实用的功能：</p>
<ul>
<li><strong>灵活的资源配置</strong>：可以根据项目需求自由调整 CPU 和内存，选择合适配置既保证性能又能控制成本。</li>
<li><strong>一键启用 HTTPS</strong>：系统自动分配安全域名，再也不用为配置 SSL 证书发愁。</li>
<li><strong>全自动域名管理</strong>：从开发到测试环境，域名配置全程由系统处理，开发者可以专注于代码本身。</li>
</ul>
<p>创建完成后，几秒钟即可启动开发环境。</p>
<p>环境准备好后，我们直接用 Cursor 连接开发环境。在操作选项中选择使用 Cursor 连接：</p>
<p><img src="https://img2024.cnblogs.com/other/1737323/202412/1737323-20241226115807146-1919356021.png" alt="" loading="lazy"></p>
<p>首次打开会提示安装 <a href="https://marketplace.visualstudio.com/items?itemName=labring.devbox-aio" target="_blank" rel="noopener nofollow">Devbox 插件</a>，安装后即可自动连接开发环境。</p>
<p><img src="https://img2024.cnblogs.com/other/1737323/202412/1737323-20241226115808073-964144479.png" alt="" loading="lazy"></p>
<h3 id="导入项目到-cursor">导入项目到 Cursor</h3>
<p>首先 Fork <a href="https://github.com/labring/sealos" target="_blank" rel="noopener nofollow">Sealos 源码</a>到自己的仓库，然后再将你自己的仓库克隆到 Devbox 开发环境：</p>
<p><img src="https://img2024.cnblogs.com/other/1737323/202412/1737323-20241226115809229-168174455.png" alt="" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/other/1737323/202412/1737323-20241226115810322-2120157871.png" alt="" loading="lazy"></p>
<h3 id="测试环境开发">测试环境开发</h3>
<p>在 Cursor 的面板中切换到 “Databse” 标签页，然后点击箭头指向的按钮，在浏览器中打开 Sealos 的数据库应用：</p>
<p><img src="https://img2024.cnblogs.com/other/1737323/202412/1737323-20241226115811654-1157967612.png" alt="" loading="lazy"></p>
<p>然后创建 PostgreSQL 和 Redis 实例。</p>
<p><img src="https://img2024.cnblogs.com/other/1737323/202412/1737323-20241226115812756-931796782.png" alt="" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/other/1737323/202412/1737323-20241226115814477-350967599.png" alt="" loading="lazy"></p>
<p>回到 Cursor 面板的 “Database” 标签页，点击刷新即可看到刚创建的数据库实例，点击可复制连接信息：</p>
<p><img src="https://img2024.cnblogs.com/other/1737323/202412/1737323-20241226115815461-1503324922.png" alt="" loading="lazy"></p>
<p>在终端中启动服务：</p>
<pre><code class="language-bash">export ADMIN_KEY=sealos-admin
export SQL_DSN=&lt;复制的pgsql连接串&gt;/postgres
export REDIS_CONN_STRING=&lt;复制的redis连接串&gt;
go run . --port 8080
</code></pre>
<p>提示 <code>server stared</code> 即为启动成功</p>
<p><img src="https://img2024.cnblogs.com/other/1737323/202412/1737323-20241226115816361-1386262905.png" alt="" loading="lazy"></p>
<p>在 Cursor 面板的 “Network” 标签页中，点击地址栏右侧的 🌐 按钮，然后在弹窗中选择 “Copy”，将地址复制到自己电脑上使用 curl 进行测试：</p>
<pre><code class="language-bash">curl https://mmznjndvzdrv.sealoshzh.site/api/status -H "Authorization: sealos-admin"
</code></pre>
<p><img src="https://img2024.cnblogs.com/other/1737323/202412/1737323-20241226115817240-1509871865.png" alt="" loading="lazy"></p>
<p>接口返回没有问题。</p>
<h3 id="优化数据库设计">优化数据库设计</h3>
<p>在开发过程中，我们发现数据库中 Group 和 Token 之间的外键约束增加了系统维护的复杂度。为了简化这一关系，我们可以将外键约束改为程序层面的显式调用，这样可以让代码逻辑更加清晰和可控。</p>
<p>首先切换到 <code>fix-aiproxy</code> 分支：</p>
<p><img src="https://img2024.cnblogs.com/other/1737323/202412/1737323-20241226115817929-366784844.png" alt="" loading="lazy"></p>
<p>在 <code>sealos/service/aiproxy/model/group.go</code> 文件中，我们需要将 Group 结构体中一个外键约束改成在程序内显示调用更新和删除来降低维护心智。</p>
<p>这里我选择使用 Cursor 的 Chat 功能让 AI 自己写代码，最后生成的结果如下：</p>
<p><img src="https://img2024.cnblogs.com/other/1737323/202412/1737323-20241226115818620-1957004520.png" alt="" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/other/1737323/202412/1737323-20241226115819317-630720045.png" alt="" loading="lazy"></p>
<p>这种实现方式的优势在于：当删除 Group 时，相关的 Token 删除操作会在同一个事务中完成。由于是在事务内进行，我们不需要担心删除失败或系统宕机导致的数据不一致问题。</p>
<p>我们可以通过一系列测试来验证这个优化是否达到预期效果。首先编译并运行服务：</p>
<pre><code class="language-bash">go build . &amp;&amp; ./aiproxy --port 8080
</code></pre>
<p>然后通过以下 API 调用来测试完整的 Group 和 Token 生命周期：</p>
<pre><code class="language-bash"># 创建一个group
curl https://gawavirgsomu.sealosbja.site/api/group/ -H "Authorization: sealos-admin" -d '{
    "id": "ns-admin"
}'

# 创建一个token
curl https://gawavirgsomu.sealosbja.site/api/token/ns-admin -H "Authorization: sealos-admin" -d '{
    "name": "token 1"
}'

# 查询token
curl https://gawavirgsomu.sealosbja.site/api/tokens/ -H "Authorization: sealos-admin"

# 删除group
curl https://gawavirgsomu.sealosbja.site/api/group/ns-admin -H "Authorization: sealos-admin" -X DELETE

# 再次查询token
curl https://gawavirgsomu.sealosbja.site/api/tokens/ -H "Authorization: sealos-admin"
</code></pre>
<p><img src="https://img2024.cnblogs.com/other/1737323/202412/1737323-20241226115820239-170020683.png" alt="" loading="lazy"></p>
<p>测试结果符合预期，确认优化方案可行。接下来我们就可以提交这些更改并创建 Pull Request 了。</p>
<h3 id="上线到生产环境">上线到生产环境</h3>
<p>首先在 Cursor 目录顶层的 endpoint.sh 中设置启动命令，在文件中添加以下启动配置：</p>
<pre><code class="language-bash">cd sealos/service/aiproxy
export ADMIN_KEY=sealos-admin
# 可以再创建一个单独的生产环境数据库，与开发环境隔离
export SQL_DSN=&lt;复制的pgsql连接串&gt;/postgres
export REDIS_CONN_STRING=&lt;复制的redis连接串&gt;
# 使用编译好的二进制文件
./aiproxy --port 8080
</code></pre>
<p><img src="https://img2024.cnblogs.com/other/1737323/202412/1737323-20241226115820945-558622857.png" alt="" loading="lazy"></p>
<p>然后来到 Devbox 发布页面发布版本：</p>
<p><img src="https://img2024.cnblogs.com/other/1737323/202412/1737323-20241226115821693-1336718034.png" alt="" loading="lazy"></p>
<p>点击发布按钮后，等待发布流程完成。发布成功后，点击 “上线” 按钮进入部署页面，然后点击 “部署应用” 即可：</p>
<p><img src="https://img2024.cnblogs.com/other/1737323/202412/1737323-20241226115822596-567160715.png" alt="" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/other/1737323/202412/1737323-20241226115823316-9357405.png" alt="" loading="lazy"></p>
<p>部署完成后，进入应用的详情页面，等待应用变成 running 状态，然后复制公网地址：</p>
<p><img src="https://img2024.cnblogs.com/other/1737323/202412/1737323-20241226115824027-118137723.png" alt="" loading="lazy"></p>
<p>这个公网地址就是生产环境的域名，我们可以使用生产环境的域名进行测试：</p>
<pre><code class="language-bash"># 这里使用的是生产环境的域名
curl https://jpesudzryuhp.sealosbja.site/api/tokens/ -H "Authorization: sealos-admin"
</code></pre>
<p><img src="https://img2024.cnblogs.com/other/1737323/202412/1737323-20241226115824696-1336072587.png" alt="" loading="lazy"></p>
<p>完美！</p>
<h2 id="nextjs-前端">Next.js 前端</h2>
<h3 id="前端项目搭建">前端项目搭建</h3>
<p>前端环境的搭建与后端类似，具体步骤如下：</p>
<ol>
<li>
<p>在 Devbox 中创建一个 Node.js 环境，版本选择 20，端口改成 3000。由于 pnpm 安装依赖比较消耗资源，建议选择 <code>4c 16G</code> 的配置。然后克隆你自己 Fork 的 Sealos 仓库：<code>git clone https://github.com/xxx/sealos.git</code>。AI Proxy 的前端代码位于 <code>sealos/frontend/providers/aiproxy</code> 目录。</p>
</li>
<li>
<p>切换到 <code>sealos/frontend</code> 目录，首先修改 <code>sealos/frontend/package.josn</code> 文件，去除 node 版本限制，直接删除 <code>"node": "20.4.0"</code> 和 <code>"pnpm": "8.9.0"</code> 这两行即可，<strong>这一步很重要，不然代码构建依赖会不成功</strong>。</p>
<p><img src="https://img2024.cnblogs.com/other/1737323/202412/1737323-20241226115825625-1979230555.png" alt="" loading="lazy"></p>
</li>
<li>
<p>执行命令 <code>pnpm i</code> 安装依赖。</p>
<p><img src="https://img2024.cnblogs.com/other/1737323/202412/1737323-20241226115826573-2018829057.png" alt="" loading="lazy"></p>
</li>
<li>
<p>执行命令 <code>pnpm -r --filter ./packages/client-sdk run build</code> 构建 client-sdk 包。</p>
<p><img src="https://img2024.cnblogs.com/other/1737323/202412/1737323-20241226115827294-1172430562.png" alt="" loading="lazy"></p>
</li>
<li>
<p>为了让 Cursor 的 i18n 插件正常工作，我们需要将项目根目录切换到 <code>sealos/frontend/providers/aiproxy</code>：</p>
<p><img src="https://img2024.cnblogs.com/other/1737323/202412/1737323-20241226115828235-1059587408.png" alt="" loading="lazy"></p>
<p>切换目录后，建议安装所有 @recommended 插件以获得最佳的开发体验：</p>
<p><img src="https://img2024.cnblogs.com/other/1737323/202412/1737323-20241226115829184-691378787.png" alt="" loading="lazy"></p>
</li>
<li>
<p>之前只是构建出了 Sealos Desktop SDK，并没有安装 aiproxy 的依赖，aiproxy 的依赖需要在 aiproxy 工作目录下 <code>sealos/frontend/providers/aiproxy</code> 进行安装。直接执行命令 <code>pnpm i</code> 安装即可：</p>
<p><img src="https://img2024.cnblogs.com/other/1737323/202412/1737323-20241226115830404-441409710.png" alt="" loading="lazy"></p>
</li>
</ol>
<h3 id="对接后端环境">对接后端环境</h3>
<p>项目搭建完成后，我们需要配置环境变量来对接后端服务。在项目根目录创建一个 <code>.env</code> 文件，需要配置以下几个关键变量：</p>
<pre><code class="language-bash">NEXT_PUBLIC_MOCK_USER=""
AI_PROXY_BACKEND_KEY=""
APP_TOKEN_JWT_KEY="test123"
AI_PROXY_BACKEND=""
AI_PROXY_BACKEND_INTERNAL=""
ADMIN_NAMESPACES=""
</code></pre>
<ul>
<li>
<p><code>NEXT_PUBLIC_MOCK_USER</code>：由于 AI Proxy 是 Sealos Desktop 的一部分，用户认证通过 JWT Token 实现，AI Proxy 只做解析 Token，JWT Token 的签发由 Sealos Desktop 完成。在开发阶段，我们需要 mock 一个 JWT Token。NEXT_PUBLIC_MOCK_USER 的值就是 mock 出来的 JWT Token。可以使用在线工具 <strong><a href="https://www.lddgo.net/encrypt/jwt-generate" target="_blank" rel="noopener nofollow">https://www.lddgo.net/encrypt/jwt-generate</a></strong> 生成。</p>
<p>mock 数据如下：</p>
<pre><code class="language-json">{
    "workspaceId" : "test"
}
</code></pre>
<p><img src="https://img2024.cnblogs.com/other/1737323/202412/1737323-20241226115831355-20418334.png" alt="" loading="lazy"></p>
</li>
<li>
<p><code>APP_TOKEN_JWT_KEY</code>：JWT Token 的密钥 (随便写)</p>
</li>
<li>
<p><code>AI_PROXY_BACKEND_KEY</code>：后端 API 的访问密钥 (也就是后端项目的 ADMIN_KEY)</p>
</li>
<li>
<p><code>AI_PROXY_BACKEND</code>：后端服务的公网地址</p>
</li>
<li>
<p><code>AI_PROXY_BACKEND_INTERNAL</code>：后端服务的内网地址 (开发测试阶段可以不填)</p>
</li>
<li>
<p><code>ADMIN_NAMESPACES</code>：管理员用户名，开发时填 test 就行，和 token 中的 “workspaceId”：“test” 保持一致</p>
</li>
</ul>
<p>环境变量配置完成后，运行 <code>pnpm dev</code> 即可启动开发服务器。项目的发布和部署流程与前面介绍的后端开发流程完全一致。</p>
<p><img src="https://img2024.cnblogs.com/other/1737323/202412/1737323-20241226115832273-1286743379.png" alt="" loading="lazy"></p>
<h2 id="总结">总结</h2>
<p>Sealos AI Proxy 前端项目采用了经典的 Next.js App Router 架构，其中 <code>app/[lng]</code> 目录用于页面路由，<code>app/api</code> 目录则用于后端 API 路由。</p>
<p>在这个项目中，Next.js 的后端实际上是一个中间层，它主要负责用户认证相关的业务逻辑，并将经过认证的请求转发给真正的 Golang 后端服务。这种分层设计可以让 Golang 后端专注于核心业务逻辑，不需要关心认证等基础设施，从而提高了代码的灵活性和可移植性。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.01331395015625" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2024-12-26 11:59">2024-12-26 11:58</span>&nbsp;
<a href="https://www.cnblogs.com/ryanyangcs">米开朗基杨</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18632447" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18632447);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18632447', targetLink: 'https://www.cnblogs.com/ryanyangcs/p/18632447', title: 'Sealos Devbox 基础教程：使用 Cursor 从零开发一个 One API 替代品' })">举报</a>
</div>
        