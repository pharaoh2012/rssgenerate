
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/yupi/p/18978536" title="发布于 2025-07-11 11:52">
    <span role="heading" aria-level="2">Java开发AI项目，太爽了！LangChain4j保姆级教程</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        <img src="https://img2024.cnblogs.com/blog/2225420/202507/2225420-20250711112423197-993664628.png" alt="Java开发AI项目，太爽了！LangChain4j保姆级教程" class="desc_img">
        这个教程是用一个编程小助手项目带大家在实战中依次学习 LangChain 几乎所有主流的用法和特性。
    </div>
<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p class="md-end-block md-heading"><span class="md-plain">大家好，我是程序员鱼皮。现在 AI 应用开发可以说是程序员必备的技能了，求职时能够大幅增加竞争力。之前我用 Spring AI 带大家做过一个 <span class="md-meta-i-c  md-link"><a href="https://github.com/liyupi/yu-ai-agent" rel="noopener nofollow"><span class="md-plain">开源的 AI 超级智能体项目</span></a><span class="md-plain">，这次我来带大家快速掌握另一个主流的 Java AI 应用开发框架 LangChain4j。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">这个教程也是我精心设计，拒绝枯燥的理论，而是用一个编程小助手项目带大家在实战中依次学习 LangChain 几乎所有主流的用法和特性。看完这个教程，你不仅学会了 LangChain，还直接多了一段项目经历，岂不美哉？</span></p>
<p class="md-end-block md-p"><span class="md-pair-s "><strong>文章近一万字，有点长，建议收藏，观看视频版体验更佳~</strong></span></p>
<blockquote>
<p class="md-end-block md-p"><span class="md-plain">完整视频教程：<span class="md-link md-pair-s"><a href="https://bilibili.com/video/BV1X4GGziEyr" rel="noopener nofollow">https://bilibili.com/video/BV1X4GGziEyr</a></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">项目代码开源：<span class="md-link md-pair-s"><a href="https://github.com/liyupi/ai-code-helper" rel="noopener nofollow">https://github.com/liyupi/ai-code-helper</a></span></span></p>
</blockquote>
<p class="md-end-block md-p">&nbsp;</p>
<h2 class="md-end-block md-heading"><span class="md-plain">需求分析</span></h2>
<p class="md-end-block md-p"><span class="md-plain">我们要实现一个 AI 编程小助手，可以帮助用户答疑解惑，并且给出编程学习的指导建议，比如：</span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">编程学习路线</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">项目学习建议</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">程序员求职指南</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">程序员常见面试题</span></p>
</li>
</ul>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1752027043776-cd6d17ed-175f-4c7e-8b25-aee81a5296b2-20250710114302208.png"><img data-src="https://pic.yupi.icu/1/1752027043776-cd6d17ed-175f-4c7e-8b25-aee81a5296b2-20250710114302208.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">要实现这个需求，我们首先要能够调用 AI 完成 <span class="md-pair-s "><strong>基础对话</strong><span class="md-plain">，而且要支持实现 <span class="md-pair-s "><strong>多轮对话记忆</strong><span class="md-plain">。此外，如果想进一步增强 AI 的能力，需要让它能够 <span class="md-pair-s "><strong>使用工具</strong><span class="md-plain"> 来联网搜索内容；还可以让 AI 基于我们自己的 <span class="md-pair-s "><strong>知识库回答</strong><span class="md-plain">，给用户提供我们在编程领域沉淀的资源和经验。</span></span></span></span></span></span></span></span></span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1752028612444-351672a3-3725-4850-82b5-57d63d0ba866.png"><img data-src="https://pic.yupi.icu/1/1752028612444-351672a3-3725-4850-82b5-57d63d0ba866.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">如果要从 0 开始实现上述功能，还是很麻烦的，因此我们要使用 AI 开发框架来提高效率。</span></p>
<h2 class="md-end-block md-heading"><span class="md-plain">什么是 LangChain4j？</span></h2>
<p class="md-end-block md-p"><span class="md-plain">目前主流的 Java AI 开发框架有 <span class="md-meta-i-c  md-link"><a href="https://spring.io/projects/spring-ai" rel="noopener nofollow"><span class="md-plain">Spring AI</span></a><span class="md-plain"> 和 <span class="md-meta-i-c  md-link"><a href="https://docs.langchain4j.dev/intro" rel="noopener nofollow"><span class="md-plain">LangChain4j</span></a><span class="md-plain">，它们都提供了很多 <span class="md-pair-s "><strong>开箱即用的 API</strong><span class="md-plain"> 来帮你调用大模型、实现 AI 开发常用的功能，比如我们今天要学的：</span></span></span></span></span></span></span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">对话记忆</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">结构化输出</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">RAG 知识库</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">工具调用</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">MCP</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">SSE 流式输出</span></p>
</li>
</ul>
<p class="md-end-block md-p"><span class="md-plain">就我个人体验下来，这两个框架的很多概念和用法都是类似的，也都提供了很多插件扩展，都支持和 Spring Boot 项目集成。虽然有一些编码上的区别，但孰好孰坏，使用感受也是因人而异的。</span></p>
<p class="md-end-block md-p"><span class="md-pair-s "><strong>实际开发中应该如何选择呢？</strong></span></p>
<p class="md-end-block md-p"><span class="md-plain">我想先带你用 LangChain4j 开发完一个项目，最后再揭晓答案，因为那个时候你自己也会有一些想法。</span></p>
<h2 class="md-end-block md-heading"><span class="md-plain">AI 应用开发</span></h2>
<h3 class="md-end-block md-heading"><span class="md-plain">新建项目</span></h3>
<p class="md-end-block md-p"><span class="md-plain">打开 IDEA 开发工具，新建一个 Spring Boot 项目，<span class="md-pair-s "><strong>Java 版本选择 21</strong><span class="md-plain">（因为 LangChain4j 最低支持 17 版本）：</span></span></span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1751944012715-3ac04ad2-42e9-4c41-b998-a5318050e27c.png"><img data-src="https://pic.yupi.icu/1/1751944012715-3ac04ad2-42e9-4c41-b998-a5318050e27c.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">选择依赖，使用 3.5.x 版本的 Spring Boot，引入 Spring MVC 和 Lombok 注解库：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1751944035875-83da11bb-e5fa-4a19-ae57-9c214cc0f523.png"><img data-src="https://pic.yupi.icu/1/1751944035875-83da11bb-e5fa-4a19-ae57-9c214cc0f523.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">新建项目后，先修改配置文件后缀为 <span class="md-pair-s"><code>yml</code><span class="md-plain">，便于后面填写配置。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1751944110301-93054763-76d8-4686-ac6e-971e81b4acd4.png"><img data-src="https://pic.yupi.icu/1/1751944110301-93054763-76d8-4686-ac6e-971e81b4acd4.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">这里我会建议大家创建一个 <span class="md-pair-s"><code>application-local.yml</code><span class="md-plain"> 配置文件，将开发时用到的敏感配置写到这里，并且添加到 <span class="md-pair-s"><code>.gitignore</code><span class="md-plain"> 中，防止不小心开源出来。</span></span></span></span></span></p>
<h3 class="md-end-block md-heading"><span class="md-plain">AI 对话 - ChatModel</span></h3>
<p class="md-end-block md-p"><span class="md-plain">ChatModel 是最基础的概念，负责和 AI 大模型交互。</span></p>
<p class="md-end-block md-p"><span class="md-plain">首先需要引入至少一个 <span class="md-meta-i-c  md-link"><a href="https://mvnrepository.com/artifact/dev.langchain4j/langchain4j-community-dashscope-spring-boot-starter" rel="noopener nofollow"><span class="md-plain">AI 大模型依赖</span></a><span class="md-plain">，这里选择国内的阿里云大模型，提供了和 Spring Boot 项目的整合依赖包，比较方便：</span></span></span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-tag cm-bracket">&lt;<span class="cm-tag">dependency<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">groupId<span class="cm-tag cm-bracket">&gt;dev.langchain4j<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">groupId<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">artifactId<span class="cm-tag cm-bracket">&gt;langchain4j-community-dashscope-spring-boot-starter<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">artifactId<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">version<span class="cm-tag cm-bracket">&gt;1.1.0-beta7<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">version<span class="cm-tag cm-bracket">&gt;<br><span><span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">dependency<span class="cm-tag cm-bracket">&gt;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">需要到 <span class="md-meta-i-c  md-link"><a href="https://bailian.console.aliyun.com/?tab=model#/api-key" rel="noopener nofollow"><span class="md-plain">阿里云百炼平台</span></a><span class="md-plain"> 获取大模型调用 key，注意不要泄露！</span></span></span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1752030336360-af14dd92-7708-45dd-8420-fe87727726f3.png"><img data-src="https://pic.yupi.icu/1/1752030336360-af14dd92-7708-45dd-8420-fe87727726f3.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">回到项目，在配置文件中添加大模型配置，指定模型名称和 API Key：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-atom">langchain4j<span class="cm-meta">:<br><span><span class="cm-atom">community<span class="cm-meta">:<br><span><span class="cm-atom">&nbsp; dashscope<span class="cm-meta">:<br><span><span class="cm-atom">&nbsp; &nbsp; chat-model<span class="cm-meta">:<br><span><span class="cm-atom">&nbsp; &nbsp; &nbsp; model-name<span class="cm-meta">:&nbsp;qwen-max<br><span><span class="cm-atom">&nbsp; &nbsp; &nbsp; api-key<span class="cm-meta">:&nbsp;&lt;You API Key here&gt;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">可以 <span class="md-meta-i-c  md-link"><a href="https://bailian.console.aliyun.com/?tab=doc#/doc/?type=model" rel="noopener nofollow"><span class="md-plain">按需选择模型名称</span></a><span class="md-plain">，追求效果可以用 qwen-max，否则可以选择效果、速度、成本均衡的 qwen-plus。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1752030577658-2b939caa-cf27-4065-aac5-e4f3234646b6.png"><img data-src="https://pic.yupi.icu/1/1752030577658-2b939caa-cf27-4065-aac5-e4f3234646b6.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">除了编写配置让 Spring Boot 自动构建 ChatModel 外，也可以通过构造器自己创建 ChatModel 对象。这种方式更灵活，在 LangChain4j 中我们会经常用到这种方式来构造对象。</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-variable">ChatModel&nbsp;<span class="cm-variable">qwenModel&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">QwenChatModel.<span class="cm-variable">builder()<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">apiKey(<span class="cm-string">"You API key here")<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">modelName(<span class="cm-string">"qwen-max")<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">enableSearch(<span class="cm-atom">true)<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">temperature(<span class="cm-number">0.7)<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">maxTokens(<span class="cm-number">4096)<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">stops(<span class="cm-variable">List.<span class="cm-variable">of(<span class="cm-string">"Hello"))<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">build();</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">有了 ChatModel 后，创建一个 AiCodeHelper 类，引入自动注入的 qwenChatModel，编写简单的对话代码，并利用 Lombok 注解打印输出结果日志：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-meta">@Service<br><span><span class="cm-meta">@Slf4j<br><span><span class="cm-keyword">public&nbsp;<span class="cm-keyword">class&nbsp;<span class="cm-def">AiCodeHelper&nbsp;{<br><span><span>​<br><span>&nbsp; &nbsp;<span class="cm-meta">@Resource<br><span>&nbsp; &nbsp;<span class="cm-keyword">private&nbsp;<span class="cm-variable">ChatModel&nbsp;<span class="cm-variable">qwenChatModel;<br><span><span>​<br><span>&nbsp; &nbsp;<span class="cm-keyword">public&nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">chat(<span class="cm-variable-3">String&nbsp;<span class="cm-variable">message) {<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">UserMessage&nbsp;<span class="cm-variable">userMessage&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">UserMessage.<span class="cm-variable">from(<span class="cm-variable">message);<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">ChatResponse&nbsp;<span class="cm-variable">chatResponse&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">qwenChatModel.<span class="cm-variable">chat(<span class="cm-variable">userMessage);<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">AiMessage&nbsp;<span class="cm-variable">aiMessage&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">chatResponse.<span class="cm-variable">aiMessage();<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">log.<span class="cm-variable">info(<span class="cm-string">"AI 输出："&nbsp;<span class="cm-operator">+&nbsp;<span class="cm-variable">aiMessage.<span class="cm-variable">toString());<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">return&nbsp;<span class="cm-variable">aiMessage.<span class="cm-variable">text();<br><span>&nbsp; }<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">编写单元测试，向 AI 打个招呼吧：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-meta">@SpringBootTest<br><span><span class="cm-keyword">class&nbsp;<span class="cm-def">AiCodeHelperTest&nbsp;{<br><span><span>​<br><span>&nbsp; &nbsp;<span class="cm-meta">@Resource<br><span>&nbsp; &nbsp;<span class="cm-keyword">private&nbsp;<span class="cm-variable">AiCodeHelper&nbsp;<span class="cm-variable">aiCodeHelper;<br><span><span>​<br><span>&nbsp; &nbsp;<span class="cm-meta">@Test<br><span>&nbsp; &nbsp;<span class="cm-variable-3">void&nbsp;<span class="cm-variable">chat() {<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">aiCodeHelper.<span class="cm-variable">chat(<span class="cm-string">"你好，我是程序员鱼皮");<br><span>&nbsp; }<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">以 Debug 模式运行单元测试，成功运行并查看输出：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1751947565712-9e3c0a68-930b-4968-8a54-19eb8beb48c9.png"><img data-src="https://pic.yupi.icu/1/1751947565712-9e3c0a68-930b-4968-8a54-19eb8beb48c9.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">如果遇到找不到符号的 lombok 报错：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1751947096901-ca5ec0a7-ecd1-4447-9f7e-b679ad56dcde.png"><img data-src="https://pic.yupi.icu/1/1751947096901-ca5ec0a7-ecd1-4447-9f7e-b679ad56dcde.png" class="lazyload"><span class="md-softbreak"> <span class="md-plain">可以修改 IDEA 的注解处理器配置，改为使用项目中的 lombok：</span></span></span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1751947494173-01ebf704-c87b-4c6b-96a3-58aafccd5458.png"><img data-src="https://pic.yupi.icu/1/1751947494173-01ebf704-c87b-4c6b-96a3-58aafccd5458.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">多模态 - Multimodality</span></h3>
<p class="md-end-block md-p"><span class="md-plain">多模态是指能够同时处理、理解和生成多种不同类型数据的能力，比如文本、图像、音频、视频、PDF 等等。</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1752051068307-72038162-f759-4fce-a0d8-0b5eec4cc59e.png"><img data-src="https://pic.yupi.icu/1/1752051068307-72038162-f759-4fce-a0d8-0b5eec4cc59e.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">LangChain4j 中使用多模态的方法很简单，用户消息中是可以添加图片、音视频、PDF 等媒体资源的。</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1752031262335-7dda9965-faa8-44e9-8a18-f748549299fa.png"><img data-src="https://pic.yupi.icu/1/1752031262335-7dda9965-faa8-44e9-8a18-f748549299fa.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">我们先编写一个支持传入自定义 UserMessage 的方法：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-keyword">public&nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-def">chatWithMessage(<span class="cm-variable">UserMessage&nbsp;<span class="cm-variable">userMessage) {<br><span>&nbsp; &nbsp;<span class="cm-variable">ChatResponse&nbsp;<span class="cm-variable">chatResponse&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">qwenChatModel.<span class="cm-variable">chat(<span class="cm-variable">userMessage);<br><span>&nbsp; &nbsp;<span class="cm-variable">AiMessage&nbsp;<span class="cm-variable">aiMessage&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">chatResponse.<span class="cm-variable">aiMessage();<br><span>&nbsp; &nbsp;<span class="cm-variable">log.<span class="cm-variable">info(<span class="cm-string">"AI 输出："&nbsp;<span class="cm-operator">+&nbsp;<span class="cm-variable">aiMessage.<span class="cm-variable">toString());<br><span>&nbsp; &nbsp;<span class="cm-keyword">return&nbsp;<span class="cm-variable">aiMessage.<span class="cm-variable">text();<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">然后编写单元测试，传入一张图片：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-meta">@Test<br><span><span class="cm-variable-3">void&nbsp;<span class="cm-def">chatWithMessage() {<br><span>&nbsp; &nbsp;<span class="cm-variable">UserMessage&nbsp;<span class="cm-variable">userMessage&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">UserMessage.<span class="cm-variable">from(<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">TextContent.<span class="cm-variable">from(<span class="cm-string">"描述图片"),<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">ImageContent.<span class="cm-variable">from(<span class="cm-string">"https://www.codefather.cn/logo.png")<br><span>&nbsp; );<br><span>&nbsp; &nbsp;<span class="cm-variable">aiCodeHelper.<span class="cm-variable">chatWithMessage(<span class="cm-variable">userMessage);<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">但是效果不理想，qwen-max 模型无法直接查看或分析图片：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1751948068455-4a25e7b7-9186-4148-bf42-de66b10ecef1.png"><img data-src="https://pic.yupi.icu/1/1751948068455-4a25e7b7-9186-4148-bf42-de66b10ecef1.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1751949077879-32103f89-88f4-45b0-8609-77bc9ad8403d.png"><img data-src="https://pic.yupi.icu/1/1751949077879-32103f89-88f4-45b0-8609-77bc9ad8403d.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">这也是目前多模态开发最关键的问题，虽然编码不难，但需要大模型本身支持多模态。可以在 LangChain 官网看到 <span class="md-meta-i-c  md-link"><a href="https://docs.langchain4j.dev/integrations/language-models/" rel="noopener nofollow"><span class="md-plain">大模型能力支持表</span></a><span class="md-plain">，不过一切以实际测试为准。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1752031226164-9a0cf728-a4d7-4005-8bbf-3f43c0479c01.png"><img data-src="https://pic.yupi.icu/1/1752031226164-9a0cf728-a4d7-4005-8bbf-3f43c0479c01.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">目前框架对多模态的适配度也没有那么好，一不留神就报错了，所以我们先了解这种用法就好了，感兴趣的同学也可以用 OpenAI 等其他模型实现多模态。</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">系统提示词 - SystemMessage</span></h3>
<p class="md-end-block md-p"><span class="md-plain">系统提示词是设置 AI 模型行为规则和角色定位的隐藏指令，用户通常不能直接看到。系统 Prompt 相当于给 AI 设定人格和能力边界，也就是告诉 AI “你是谁？你能做什么？”。</span></p>
<p class="md-end-block md-p"><span class="md-plain">根据我们的需求，编写一段系统提示词：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>你是编程领域的小助手，帮助用户解答编程学习和求职面试相关的问题，并给出建议。重点关注 4 个方向：<br><span><span class="cm-block-start cm-variable-2">1.&nbsp;<span class="cm-variable-2">规划清晰的编程学习路线<br><span><span class="cm-block-start cm-variable-2">2.&nbsp;<span class="cm-variable-2">提供项目学习建议<br><span><span class="cm-block-start cm-variable-2">3.&nbsp;<span class="cm-variable-2">给出程序员求职全流程指南（比如简历优化、投递技巧）<br><span><span class="cm-block-start cm-variable-2">4.&nbsp;<span class="cm-variable-2">分享高频面试题和面试技巧<br><span>请用简洁易懂的语言回答，助力用户高效学习与求职。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">编程导航的同学可以看 <span class="md-meta-i-c  md-link"><a href="https://www.codefather.cn/course/1915010091721236482/section/1916676331948027906" rel="noopener nofollow"><span class="md-plain">AI 超级智能体项目第 3 期</span></a><span class="md-plain">，有讲解过提示词优化技巧。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1752031662526-ffba01f1-3358-4d6b-a6e3-e293781cc77c.png"><img data-src="https://pic.yupi.icu/1/1752031662526-ffba01f1-3358-4d6b-a6e3-e293781cc77c.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">想要使用系统提示词，最直接的方法是创建一个系统消息，把它和用户消息一起发送给 AI。</span></p>
<p class="md-end-block md-p"><span class="md-plain">修改 chat 方法，代码如下：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-keyword">private&nbsp;<span class="cm-keyword">static&nbsp;<span class="cm-keyword">final&nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">SYSTEM_MESSAGE&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-string">"""<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">你是编程领域的小助手，帮助用户解答编程学习和求职面试相关的问题，并给出建议。重点关注&nbsp;<span class="cm-number">4&nbsp;<span class="cm-variable">个方向：<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-number">1.&nbsp;<span class="cm-variable">规划清晰的编程学习路线<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-number">2.&nbsp;<span class="cm-variable">提供项目学习建议<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-number">3.&nbsp;<span class="cm-variable">给出程序员求职全流程指南（比如简历优化、投递技巧）<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-number">4.&nbsp;<span class="cm-variable">分享高频面试题和面试技巧<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">请用简洁易懂的语言回答，助力用户高效学习与求职。<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-string">""";<br><span><span>​<br><span><span class="cm-keyword">public&nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-def">chat(<span class="cm-variable-3">String&nbsp;<span class="cm-variable">message) {<br><span>&nbsp; &nbsp;<span class="cm-variable">SystemMessage&nbsp;<span class="cm-variable">systemMessage&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">SystemMessage.<span class="cm-variable">from(<span class="cm-variable">SYSTEM_MESSAGE);<br><span>&nbsp; &nbsp;<span class="cm-variable">UserMessage&nbsp;<span class="cm-variable">userMessage&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">UserMessage.<span class="cm-variable">from(<span class="cm-variable">message);<br><span>&nbsp; &nbsp;<span class="cm-variable">ChatResponse&nbsp;<span class="cm-variable">chatResponse&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">qwenChatModel.<span class="cm-variable">chat(<span class="cm-variable">systemMessage,&nbsp;<span class="cm-variable">userMessage);<br><span>&nbsp; &nbsp;<span class="cm-variable">AiMessage&nbsp;<span class="cm-variable">aiMessage&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">chatResponse.<span class="cm-variable">aiMessage();<br><span>&nbsp; &nbsp;<span class="cm-variable">log.<span class="cm-variable">info(<span class="cm-string">"AI 输出："&nbsp;<span class="cm-operator">+&nbsp;<span class="cm-variable">aiMessage.<span class="cm-variable">toString());<br><span>&nbsp; &nbsp;<span class="cm-keyword">return&nbsp;<span class="cm-variable">aiMessage.<span class="cm-variable">text();<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">再次运行单元测试和 AI 对话，显然系统预设生效了：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1751949397794-26716439-7ccb-46f2-add4-ff299989b10e.png"><img data-src="https://pic.yupi.icu/1/1751949397794-26716439-7ccb-46f2-add4-ff299989b10e.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">AI 服务 - AI Service</span></h3>
<p class="md-end-block md-p"><span class="md-plain">在学习更多特性前，我们要了解 LangChain4j 最重要的开发模式 —— AI Service，提供了很多高层抽象的、用起来更方便的 API，把 AI 应用当做服务来开发。</span></p>
<h4 class="md-end-block md-heading"><span class="md-plain">使用 AI Service</span></h4>
<p class="md-end-block md-p"><span class="md-plain">首先引入 langchain4j 依赖：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-tag cm-bracket">&lt;<span class="cm-tag">dependency<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">groupId<span class="cm-tag cm-bracket">&gt;dev.langchain4j<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">groupId<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">artifactId<span class="cm-tag cm-bracket">&gt;langchain4j<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">artifactId<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">version<span class="cm-tag cm-bracket">&gt;1.1.0<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">version<span class="cm-tag cm-bracket">&gt;<br><span><span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">dependency<span class="cm-tag cm-bracket">&gt;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">然后创建一个编程助手 AI Service 服务，采用声明式开发方法，编写一个对话方法，然后可以直接通过 <span class="md-pair-s"><code>@SystemMessage</code><span class="md-plain"> 注解定义系统提示词。</span></span></span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-keyword">public&nbsp;<span class="cm-keyword">interface&nbsp;<span class="cm-def">AiCodeHelperService&nbsp;{<br><span><span>​<br><span>&nbsp; &nbsp;<span class="cm-meta">@SystemMessage(<span class="cm-string">"你是一位编程小助手")<br><span>&nbsp; &nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">chat(<span class="cm-variable-3">String&nbsp;<span class="cm-variable">userMessage);<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">不过由于我们提示词较长，写到注解里很不优雅，所以单独在 resources 目录下新建文件 <span class="md-pair-s"><code>system-prompt.txt</code><span class="md-plain"> 来存储系统提示词。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-pair-s"><code>@SystemMessage</code><span class="md-plain"> 注解支持从文件中读取系统提示词：</span></span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-keyword">public&nbsp;<span class="cm-keyword">interface&nbsp;<span class="cm-def">AiCodeHelperService&nbsp;{<br><span><span>​<br><span>&nbsp; &nbsp;<span class="cm-meta">@SystemMessage(<span class="cm-variable">fromResource&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-string">"system-prompt.txt")<br><span>&nbsp; &nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">chat(<span class="cm-variable-3">String&nbsp;<span class="cm-variable">userMessage);<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">然后我们需要编写工厂类，用于创建 AI Service：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-meta">@Configuration<br><span><span class="cm-keyword">public&nbsp;<span class="cm-keyword">class&nbsp;<span class="cm-def">AiCodeHelperServiceFactory&nbsp;{<br><span><span>​<br><span>&nbsp; &nbsp;<span class="cm-meta">@Resource<br><span>&nbsp; &nbsp;<span class="cm-keyword">private&nbsp;<span class="cm-variable">ChatModel&nbsp;<span class="cm-variable">qwenChatModel;<br><span><span>​<br><span>&nbsp; &nbsp;<span class="cm-meta">@Bean<br><span>&nbsp; &nbsp;<span class="cm-keyword">public&nbsp;<span class="cm-variable">AiCodeHelperService&nbsp;<span class="cm-variable">aiCodeHelperService() {<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">return&nbsp;<span class="cm-variable">AiServices.<span class="cm-variable">create(<span class="cm-variable">AiCodeHelperService.<span class="cm-keyword">class,&nbsp;<span class="cm-variable">qwenChatModel);<br><span>&nbsp; }<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">调用 <span class="md-pair-s"><code>AiServices.create</code><span class="md-plain"> 方法就可以创建出 AI Service 的实现类了，背后的原理是利用 Java 反射机制创建了一个实现接口的代理对象，代理对象负责输入和输出的转换，比如把 String 类型的用户消息参数转为 UserMessage 类型并调用 ChatModel，再将 AI 返回的 AiMessage 类型转换为 String 类型作为返回值。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">但我们不用关心这么多，直接写接口和注解来开发就好。你喜欢这种开发方式么？</span></p>
<p class="md-end-block md-p"><span class="md-plain">编写单元测试，调用我们开发的 AI Service：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-meta">@SpringBootTest<br><span><span class="cm-keyword">class&nbsp;<span class="cm-def">AiCodeHelperServiceTest&nbsp;{<br><span><span>​<br><span>&nbsp; &nbsp;<span class="cm-meta">@Resource<br><span>&nbsp; &nbsp;<span class="cm-keyword">private&nbsp;<span class="cm-variable">AiCodeHelperService&nbsp;<span class="cm-variable">aiCodeHelperService;<br><span><span>​<br><span>&nbsp; &nbsp;<span class="cm-meta">@Test<br><span>&nbsp; &nbsp;<span class="cm-variable-3">void&nbsp;<span class="cm-variable">chat() {<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">result&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">aiCodeHelperService.<span class="cm-variable">chat(<span class="cm-string">"你好，我是程序员鱼皮");<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">System.<span class="cm-variable">out.<span class="cm-variable">println(<span class="cm-variable">result);<br><span>&nbsp; }<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">Debug 运行，发现生成了 AI Service 的代理类，并且系统提示词生效了。是不是比之前自己拼接系统消息要方便多了？</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1751953464452-273ae8c5-4354-467e-b14b-668d64c3b1f3.png"><img data-src="https://pic.yupi.icu/1/1751953464452-273ae8c5-4354-467e-b14b-668d64c3b1f3.png" class="lazyload"></span></p>
<h4 class="md-end-block md-heading"><span class="md-plain">Spring Boot 项目中使用</span></h4>
<p class="md-end-block md-p"><span class="md-plain">如果你觉得手动调用 create 方法来创建 Service 比较麻烦，在 Spring Boot 项目中可以引入依赖：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-tag cm-bracket">&lt;<span class="cm-tag">dependency<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">groupId<span class="cm-tag cm-bracket">&gt;dev.langchain4j<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">groupId<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">artifactId<span class="cm-tag cm-bracket">&gt;langchain4j-spring-boot-starter<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">artifactId<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">version<span class="cm-tag cm-bracket">&gt;1.1.0-beta7<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">version<span class="cm-tag cm-bracket">&gt;<br><span><span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">dependency<span class="cm-tag cm-bracket">&gt;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">然后给 AI Service 加上 <span class="md-pair-s"><code>@AiService</code><span class="md-plain"> 注解，就能自动创建出服务实例了：</span></span></span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-meta">@AiService<br><span><span class="cm-keyword">public&nbsp;<span class="cm-keyword">interface&nbsp;<span class="cm-def">AiCodeHelperService&nbsp;{<br><span><span>​<br><span>&nbsp; &nbsp;<span class="cm-meta">@SystemMessage(<span class="cm-variable">fromResource&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-string">"system-prompt.txt")<br><span>&nbsp; &nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">chat(<span class="cm-variable-3">String&nbsp;<span class="cm-variable">userMessage);<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">记得注释掉之前工厂类的 @Configuration 注解，否则会出现 Bean 冲突</span></p>
<p class="md-end-block md-p"><span class="md-plain">再次运行单元测试，也是可以正常对话的：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1751953748624-64447a00-d43c-4f8e-9fd1-805efa910753.png"><img data-src="https://pic.yupi.icu/1/1751953748624-64447a00-d43c-4f8e-9fd1-805efa910753.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">这种方式虽然更方便了，但是缺少了自主构建的灵活性（可以自由设置很多参数），所以我建议还是采用自主构建。之后的功能特性，我们也会基于这种 AI Service 开发模式来实现。</span></p>
<h3 class="md-end-block md-heading"><span class="md-plain">会话记忆 - ChatMemory</span></h3>
<p class="md-end-block md-p"><span class="md-plain">会话记忆是指让 AI 能够记住用户之前的对话内容，并保持上下文连贯性，这是实现 AI 应用的核心特性。</span></p>
<p class="md-end-block md-p"><span class="md-plain">怎么实现对话记忆？最传统的方式是自己维护消息列表，不仅要手动添加消息，消息多了还要考虑淘汰、不同用户的消息还要隔离，想想都头疼！</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-comment">// 自己实现会话记忆<br><span><span class="cm-variable">Map<span class="cm-operator">&lt;<span class="cm-variable-3">String,&nbsp;<span class="cm-variable">List<span class="cm-operator">&lt;<span class="cm-variable">Message<span class="cm-operator">&gt;&gt;&nbsp;<span class="cm-variable">conversationHistory&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-keyword">new&nbsp;<span class="cm-variable">HashMap<span class="cm-operator">&lt;&gt;();<br><span><span>​<br><span><span class="cm-keyword">public&nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-def">chat(<span class="cm-variable-3">String&nbsp;<span class="cm-variable">message,&nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">userId) {<br><span>&nbsp; &nbsp;<span class="cm-comment">// 获取用户历史记录<br><span>&nbsp; &nbsp;<span class="cm-variable">List<span class="cm-operator">&lt;<span class="cm-variable">Message<span class="cm-operator">&gt;&nbsp;<span class="cm-variable">history&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">conversationHistory.<span class="cm-variable">getOrDefault(<span class="cm-variable">userId,&nbsp;<span class="cm-keyword">new&nbsp;<span class="cm-variable">ArrayList<span class="cm-operator">&lt;&gt;());<br><span>&nbsp; &nbsp;<br><span>&nbsp; &nbsp;<span class="cm-comment">// 添加用户新消息<br><span>&nbsp; &nbsp;<span class="cm-variable">Message&nbsp;<span class="cm-variable">userMessage&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-keyword">new&nbsp;<span class="cm-variable">Message(<span class="cm-string">"user",&nbsp;<span class="cm-variable">message);<br><span>&nbsp; &nbsp;<span class="cm-variable">history.<span class="cm-variable">add(<span class="cm-variable">userMessage);<br><span>&nbsp; &nbsp;<br><span>&nbsp; &nbsp;<span class="cm-comment">// 构建完整历史上下文<br><span>&nbsp; &nbsp;<span class="cm-variable-3">StringBuilder&nbsp;<span class="cm-variable">contextBuilder&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-keyword">new&nbsp;<span class="cm-variable-3">StringBuilder();<br><span>&nbsp; &nbsp;<span class="cm-keyword">for&nbsp;(<span class="cm-variable">Message&nbsp;<span class="cm-variable">msg&nbsp;:&nbsp;<span class="cm-variable">history) {<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">contextBuilder.<span class="cm-variable">append(<span class="cm-variable">msg.<span class="cm-variable">getRole()).<span class="cm-variable">append(<span class="cm-string">": ").<span class="cm-variable">append(<span class="cm-variable">msg.<span class="cm-variable">getContent()).<span class="cm-variable">append(<span class="cm-string">"\n");<br><span>&nbsp; }<br><span>&nbsp; &nbsp;<br><span>&nbsp; &nbsp;<span class="cm-comment">// 调用 AI API<br><span>&nbsp; &nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">response&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">callAiApi(<span class="cm-variable">contextBuilder.<span class="cm-variable">toString());<br><span>&nbsp; &nbsp;<br><span>&nbsp; &nbsp;<span class="cm-comment">// 保存 AI 回复到历史<br><span>&nbsp; &nbsp;<span class="cm-variable">Message&nbsp;<span class="cm-variable">aiMessage&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-keyword">new&nbsp;<span class="cm-variable">Message(<span class="cm-string">"assistant",&nbsp;<span class="cm-variable">response);<br><span>&nbsp; &nbsp;<span class="cm-variable">history.<span class="cm-variable">add(<span class="cm-variable">aiMessage);<br><span>&nbsp; &nbsp;<span class="cm-variable">conversationHistory.<span class="cm-variable">put(<span class="cm-variable">userId,&nbsp;<span class="cm-variable">history);<br><span>&nbsp; &nbsp;<br><span>&nbsp; &nbsp;<span class="cm-keyword">return&nbsp;<span class="cm-variable">response;<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<h4 class="md-end-block md-heading"><span class="md-plain">使用会话记忆</span></h4>
<p class="md-end-block md-p"><span class="md-plain">LangChain4j 为我们提供了开箱即用的 <span class="md-pair-s"><code>MessageWindowChatMemory</code><span class="md-plain"> 会话记忆，最多保存 N 条消息，多余的会自动淘汰。创建会话记忆后，在构造 AI Service 设置 chatMemory：</span></span></span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-meta">@Configuration<br><span><span class="cm-keyword">public&nbsp;<span class="cm-keyword">class&nbsp;<span class="cm-def">AiCodeHelperServiceFactory&nbsp;{<br><span><span>​<br><span>&nbsp; &nbsp;<span class="cm-meta">@Resource<br><span>&nbsp; &nbsp;<span class="cm-keyword">private&nbsp;<span class="cm-variable">ChatModel&nbsp;<span class="cm-variable">qwenChatModel;<br><span><span>​<br><span>&nbsp; &nbsp;<span class="cm-meta">@Bean<br><span>&nbsp; &nbsp;<span class="cm-keyword">public&nbsp;<span class="cm-variable">AiCodeHelperService&nbsp;<span class="cm-variable">aiCodeHelperService() {<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">// 会话记忆<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">ChatMemory&nbsp;<span class="cm-variable">chatMemory&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">MessageWindowChatMemory.<span class="cm-variable">withMaxMessages(<span class="cm-number">10);<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">AiCodeHelperService&nbsp;<span class="cm-variable">aiCodeHelperService&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">AiServices.<span class="cm-variable">builder(<span class="cm-variable">AiCodeHelperService.<span class="cm-keyword">class)<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">chatModel(<span class="cm-variable">qwenChatModel)<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">chatMemory(<span class="cm-variable">chatMemory)<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">build();<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">return&nbsp;<span class="cm-variable">aiCodeHelperService;<br><span>&nbsp; }<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">编写单元测试，测试会话记忆是否生效：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-meta">@Test<br><span><span class="cm-variable-3">void&nbsp;<span class="cm-def">chatWithMemory() {<br><span>&nbsp; &nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">result&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">aiCodeHelperService.<span class="cm-variable">chat(<span class="cm-string">"你好，我是程序员鱼皮");<br><span>&nbsp; &nbsp;<span class="cm-variable">System.<span class="cm-variable">out.<span class="cm-variable">println(<span class="cm-variable">result);<br><span>&nbsp; &nbsp;<span class="cm-variable">result&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">aiCodeHelperService.<span class="cm-variable">chat(<span class="cm-string">"你好，我是谁来着？");<br><span>&nbsp; &nbsp;<span class="cm-variable">System.<span class="cm-variable">out.<span class="cm-variable">println(<span class="cm-variable">result);<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">Debug 运行单元测试，可以看到会话记忆存储的消息列表：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1751954519469-e2f60419-ad5d-41fd-945d-c13d9861fe0f.png"><img data-src="https://pic.yupi.icu/1/1751954519469-e2f60419-ad5d-41fd-945d-c13d9861fe0f.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">查看输出结果，会话记忆生效：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1751954654615-b4efd4d5-b87a-4980-9c65-0e252c4dd379.png"><img data-src="https://pic.yupi.icu/1/1751954654615-b4efd4d5-b87a-4980-9c65-0e252c4dd379.png" class="lazyload"></span></p>
<h4 class="md-end-block md-heading"><span class="md-plain">进阶用法</span></h4>
<p class="md-end-block md-p"><span class="md-plain">会话记忆默认是存储在内存的，重启后会丢失，可以通过自定义 <span class="md-meta-i-c  md-link"><a href="https://docs.langchain4j.dev/tutorials/chat-memory#persistence" rel="noopener nofollow"><span class="md-plain">ChatMemoryStore</span></a><span class="md-plain"> 接口的实现类，将消息保存到 MySQL 等其他数据源中。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1752040734375-fa8362f4-c2d2-4ecd-9f3d-f328f0459b58.png"><img data-src="https://pic.yupi.icu/1/1752040734375-fa8362f4-c2d2-4ecd-9f3d-f328f0459b58.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">如果有多个用户，希望每个用户之间的消息隔离，可以通过给对话方法增加 memoryId 参数和注解，在调用对话时传入 memoryId 即可（类似聊天室的房间号）：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-variable-3">String&nbsp;<span class="cm-def">chat(<span class="cm-meta">@MemoryId&nbsp;<span class="cm-variable-3">int&nbsp;<span class="cm-variable">memoryId,&nbsp;<span class="cm-meta">@UserMessage&nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">userMessage);</span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">构造 AI Service 时，可以通过 chatMemoryProvider 来指定 <span class="md-pair-s "><strong>每个 memoryId 单独创建会话记忆</strong><span class="md-plain">：</span></span></span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-comment">// 构造 AI Service<br><span><span class="cm-variable">AiCodeHelperService&nbsp;<span class="cm-variable">aiCodeHelperService&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">AiServices.<span class="cm-variable">builder(<span class="cm-variable">AiCodeHelperService.<span class="cm-keyword">class)<br><span>&nbsp; &nbsp; &nbsp; .<span class="cm-variable">chatModel(<span class="cm-variable">qwenChatModel)<br><span>&nbsp; &nbsp; &nbsp; .<span class="cm-variable">chatMemoryProvider(<span class="cm-variable">memoryId&nbsp;<span class="cm-operator">-&gt;&nbsp;<span class="cm-variable">MessageWindowChatMemory.<span class="cm-variable">withMaxMessages(<span class="cm-number">10))<br><span>&nbsp; &nbsp; &nbsp; .<span class="cm-variable">build();</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">结构化输出</span></h3>
<p class="md-end-block md-p"><span class="md-plain">结构化输出是指将大模型返回的文本输出转换为结构化的数据格式，比如一段 JSON、一个对象、或者是复杂的对象列表。</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1752051496139-a403e8ad-9b0d-4b1c-924a-cd572f872b05.png"><img data-src="https://pic.yupi.icu/1/1752051496139-a403e8ad-9b0d-4b1c-924a-cd572f872b05.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">结构化输出有 3 种实现方式：</span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">利用大模型的 JSON schema</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">利用 Prompt + JSON Mode</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">利用 Prompt</span></p>
</li>
</ul>
<p class="md-end-block md-p"><span class="md-plain">默认是 Prompt 模式，也就是在原本的用户提示词下 <span class="md-pair-s "><strong>拼接一段内容</strong><span class="md-plain"> 来指定大模型强制输出包含特定字段的 JSON 文本。</span></span></span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>你是一个专业的信息提取助手。请从给定文本中提取人员信息，<br><span>并严格按照以下 JSON 格式返回结果：<br><span><span>​<br><span>{<br><span>&nbsp; &nbsp;<span class="cm-comment">"name": "人员姓名",<br><span>&nbsp; &nbsp;<span class="cm-comment">"age": 年龄数字,<br><span>&nbsp; &nbsp;<span class="cm-comment">"height": 身高（米），<br><span>&nbsp; &nbsp;<span class="cm-comment">"married": true/false,<br><span>&nbsp; &nbsp;<span class="cm-comment">"occupation": "职业"<br><span>}<br><span><span>​<br><span>重要规则：<br><span><span class="cm-block-start cm-variable-2">1.&nbsp;<span class="cm-variable-2">只返回 JSON 格式，不要添加任何解释<br><span><span class="cm-block-start cm-variable-2">2.&nbsp;<span class="cm-variable-2">如果信息不明确，使用 null<br><span><span class="cm-block-start cm-variable-2">3.&nbsp;<span class="cm-variable-2">age 必须是数字，不是字符串<br><span><span class="cm-block-start cm-variable-2">4.&nbsp;<span class="cm-variable-2">married 必须是布尔值</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">感兴趣的同学可以 <span class="md-meta-i-c  md-link"><a href="https://glaforge.dev/posts/2024/11/18/data-extraction-the-many-ways-to-get-llms-to-spit-json-content/" rel="noopener nofollow"><span class="md-plain">阅读这篇文章</span></a><span class="md-plain"> 了解更多，不过我们开发时无需关心这些，只要修改对话方法的返回值，框架就会自动帮我们实现结构化输出，非常爽！</span></span></span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1752051189479-456a7016-ab27-4a18-8927-088724ac5ddb.png"><img data-src="https://pic.yupi.icu/1/1752051189479-456a7016-ab27-4a18-8927-088724ac5ddb.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">比如我们增加一个 <span class="md-pair-s "><strong>让 AI 生成学习报告</strong><span class="md-plain"> 的方法，AI 需要输出学习报告对象，包含名称和建议列表：</span></span></span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-meta">@SystemMessage(<span class="cm-variable">fromResource&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-string">"system-prompt.txt")<br><span><span class="cm-variable">Report&nbsp;<span class="cm-def">chatForReport(<span class="cm-variable-3">String&nbsp;<span class="cm-variable">userMessage);<br><span><span>​<br><span><span class="cm-comment">// 学习报告<br><span><span class="cm-variable">record&nbsp;<span class="cm-def">Report(<span class="cm-variable-3">String&nbsp;<span class="cm-variable">name,&nbsp;<span class="cm-variable">List<span class="cm-operator">&lt;<span class="cm-variable-3">String<span class="cm-operator">&gt;&nbsp;<span class="cm-variable">suggestionList){}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">编写单元测试：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-meta">@Test<br><span><span class="cm-variable-3">void&nbsp;<span class="cm-def">chatForReport() {<br><span>&nbsp; &nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">userMessage&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-string">"你好，我是程序员鱼皮，学编程两年半，请帮我制定学习报告";<br><span>&nbsp; &nbsp;<span class="cm-variable">AiCodeHelperService.<span class="cm-variable">Report&nbsp;<span class="cm-variable">report&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">aiCodeHelperService.<span class="cm-variable">chatForReport(<span class="cm-variable">userMessage);<br><span>&nbsp; &nbsp;<span class="cm-variable">System.<span class="cm-variable">out.<span class="cm-variable">println(<span class="cm-variable">report);<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">运行单元测试，效果很不错：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1751955304297-a26adf70-eda0-4ebc-ae2e-aa5a8e67cf02.png"><img data-src="https://pic.yupi.icu/1/1751955304297-a26adf70-eda0-4ebc-ae2e-aa5a8e67cf02.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">如果你发现 AI 有时无法生成准确的 JSON，那么可以采用 JSON Schema 模式，直接在请求中约束 LLM 的输出格式。这是目前最可靠、精确度最高的结构化输出实现。</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-variable">ResponseFormat&nbsp;<span class="cm-variable">responseFormat&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">ResponseFormat.<span class="cm-variable">builder()<br><span>&nbsp; &nbsp; &nbsp; .<span class="cm-variable">type(<span class="cm-variable">JSON)<br><span>&nbsp; &nbsp; &nbsp; .<span class="cm-variable">jsonSchema(<span class="cm-variable">JsonSchema.<span class="cm-variable">builder()<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">name(<span class="cm-string">"Person")<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">rootElement(<span class="cm-variable">JsonObjectSchema.<span class="cm-variable">builder()<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">addStringProperty(<span class="cm-string">"name")<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">addIntegerProperty(<span class="cm-string">"age")<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">addNumberProperty(<span class="cm-string">"height")<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">addBooleanProperty(<span class="cm-string">"married")<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">required(<span class="cm-string">"name",&nbsp;<span class="cm-string">"age",&nbsp;<span class="cm-string">"height",&nbsp;<span class="cm-string">"married")&nbsp;<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">build())<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">build())<br><span>&nbsp; &nbsp; &nbsp; .<span class="cm-variable">build();<br><span><span class="cm-variable">ChatRequest&nbsp;<span class="cm-variable">chatRequest&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">ChatRequest.<span class="cm-variable">builder()<br><span>&nbsp; &nbsp; &nbsp; .<span class="cm-variable">responseFormat(<span class="cm-variable">responseFormat)<br><span>&nbsp; &nbsp; &nbsp; .<span class="cm-variable">messages(<span class="cm-variable">userMessage)<br><span>&nbsp; &nbsp; &nbsp; .<span class="cm-variable">build();</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">检索增强生成 - RAG</span></h3>
<p class="md-end-block md-p"><span class="md-plain">RAG（Retrieval-Augmented Generation，检索增强生成）是一种结合信息检索技术和 AI 内容生成的混合架构，可以解决大模型的知识时效性限制和幻觉问题。</span></p>
<p class="md-end-block md-p"><span class="md-plain">简单来说，RAG 就像给 AI 配了一个 “小抄本”，让 AI 回答问题前先查一查特定的知识库来获取知识，确保回答是基于真实资料而不是凭空想象。很多企业也基于 RAG 搭建了自己的智能客服，可以用自己积累的领域知识回复用户。</span></p>
<p class="md-end-block md-p"><span class="md-plain">RAG 的完整工作流程如下：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1752052410659-f9a142b9-0c2a-4a99-9c8c-8339970c96eb.png"><img data-src="https://pic.yupi.icu/1/1752052410659-f9a142b9-0c2a-4a99-9c8c-8339970c96eb.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">让我们来实操一下，首先我准备了 4 个文档，放在了 <span class="md-pair-s"><code>resources/docs</code><span class="md-plain"> 目录下：</span></span></span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1752041906112-ac985734-3a43-44a7-b13d-a1632e426828.png"><img data-src="https://pic.yupi.icu/1/1752041906112-ac985734-3a43-44a7-b13d-a1632e426828.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">LangChain 提供了 3 种 RAG 的实现方式，我把它称为：极简版、标准版、进阶版。</span></p>
<h4 class="md-end-block md-heading"><span class="md-plain">极简版 RAG</span></h4>
<p class="md-end-block md-p"><span class="md-pair-s "><strong>极简版适合快速查看效果</strong><span class="md-plain">，首先需要引入额外的依赖，里面包含了内置的离线 Embedding 模型，开箱即用：</span></span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-tag cm-bracket">&lt;<span class="cm-tag">dependency<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">groupId<span class="cm-tag cm-bracket">&gt;dev.langchain4j<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">groupId<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">artifactId<span class="cm-tag cm-bracket">&gt;langchain4j-easy-rag<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">artifactId<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">version<span class="cm-tag cm-bracket">&gt;1.1.0-beta7<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">version<span class="cm-tag cm-bracket">&gt;<br><span><span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">dependency<span class="cm-tag cm-bracket">&gt;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">示例代码如下，使用内置的文档加载器读取文档，然后利用内置的 Embedding 模型将文档转换成向量，并存储在内置的 Embedding 内存存储中，最后给 AI Service 绑定默认的内容检索器。</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-comment">// RAG<br><span><span class="cm-comment">// 1. 加载文档<br><span><span class="cm-variable">List<span class="cm-operator">&lt;<span class="cm-variable">Document<span class="cm-operator">&gt;&nbsp;<span class="cm-variable">documents&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">FileSystemDocumentLoader.<span class="cm-variable">loadDocuments(<span class="cm-string">"src/main/resources/docs");<br><span><span class="cm-comment">// 2. 使用内置的 EmbeddingModel 转换文本为向量，然后存储到自动注入的内存 embeddingStore 中<br><span><span class="cm-variable">EmbeddingStoreIngestor.<span class="cm-variable">ingest(<span class="cm-variable">documents,&nbsp;<span class="cm-variable">embeddingStore);<br><span><span class="cm-comment">// 构造 AI Service<br><span><span class="cm-variable">AiCodeHelperService&nbsp;<span class="cm-variable">aiCodeHelperService&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">AiServices.<span class="cm-variable">builder(<span class="cm-variable">AiCodeHelperService.<span class="cm-keyword">class)<br><span>&nbsp; &nbsp; &nbsp; .<span class="cm-variable">chatModel(<span class="cm-variable">qwenChatModel)<br><span>&nbsp; &nbsp; &nbsp; .<span class="cm-variable">chatMemory(<span class="cm-variable">chatMemory)<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">// RAG：从内存 embeddingStore 中检索匹配的文本片段<br><span>&nbsp; &nbsp; &nbsp; .<span class="cm-variable">contentRetriever(<span class="cm-variable">EmbeddingStoreContentRetriever.<span class="cm-variable">from(<span class="cm-variable">embeddingStore))<br><span>&nbsp; &nbsp; &nbsp; .<span class="cm-variable">build();</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">可以看到，极简版的特点是 “一切皆默认”，实际开发中，为了更好的效果，建议采用标准版或进阶版。</span></p>
<h4 class="md-end-block md-heading"><span class="md-plain">标准版 RAG</span></h4>
<p class="md-end-block md-p"><span class="md-plain">下面来试试标准版 RAG 实现，为了更好地效果，我们需要：</span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">加载 Markdown 文档并按需切割</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">Markdown 文档补充文件名信息</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">自定义 Embedding 模型</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">自定义内容检索器</span></p>
</li>
</ul>
<p class="md-end-block md-p"><span class="md-plain">在 Spring Boot 配置文件中添加 Embedding 模型配置，使用阿里云提供的 <span class="md-pair-s"><code>text-embedding-v4</code><span class="md-plain"> 模型：</span></span></span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-atom">langchain4j<span class="cm-meta">:<br><span><span class="cm-atom">community<span class="cm-meta">:<br><span><span class="cm-atom">&nbsp; dashscope<span class="cm-meta">:<br><span><span class="cm-atom">&nbsp; &nbsp; chat-model<span class="cm-meta">:<br><span><span class="cm-atom">&nbsp; &nbsp; &nbsp; model-name<span class="cm-meta">:&nbsp;qwen-max<br><span><span class="cm-atom">&nbsp; &nbsp; &nbsp; api-key<span class="cm-meta">:&nbsp;&lt;You API Key here&gt;<br><span><span class="cm-atom">&nbsp; &nbsp; embedding-model<span class="cm-meta">:<br><span><span class="cm-atom">&nbsp; &nbsp; &nbsp; model-name<span class="cm-meta">:&nbsp;text-embedding-v4<br><span><span class="cm-atom">&nbsp; &nbsp; &nbsp; api-key<span class="cm-meta">:&nbsp;&lt;You API Key here&gt;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">新建 <span class="md-pair-s"><code>rag.RagConfig</code><span class="md-plain">，编写 RAG 相关的代码，执行 RAG 的初始流程并返回了一个定制的内容检索器 Bean：</span></span></span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-comment">/**<br><span><span class="cm-comment">* 加载 RAG<br><span><span class="cm-comment">*/<br><span><span class="cm-meta">@Configuration<br><span><span class="cm-keyword">public&nbsp;<span class="cm-keyword">class&nbsp;<span class="cm-def">RagConfig&nbsp;{<br><span><span>​<br><span>&nbsp; &nbsp;<span class="cm-meta">@Resource<br><span>&nbsp; &nbsp;<span class="cm-keyword">private&nbsp;<span class="cm-variable">EmbeddingModel&nbsp;<span class="cm-variable">qwenEmbeddingModel;<br><span><span>​<br><span>&nbsp; &nbsp;<span class="cm-meta">@Resource<br><span>&nbsp; &nbsp;<span class="cm-keyword">private&nbsp;<span class="cm-variable">EmbeddingStore<span class="cm-operator">&lt;<span class="cm-variable">TextSegment<span class="cm-operator">&gt;&nbsp;<span class="cm-variable">embeddingStore;<br><span><span>​<br><span>&nbsp; &nbsp;<span class="cm-meta">@Bean<br><span>&nbsp; &nbsp;<span class="cm-keyword">public&nbsp;<span class="cm-variable">ContentRetriever&nbsp;<span class="cm-variable">contentRetriever() {<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">// ------ RAG ------<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">// 1. 加载文档<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">List<span class="cm-operator">&lt;<span class="cm-variable">Document<span class="cm-operator">&gt;&nbsp;<span class="cm-variable">documents&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">FileSystemDocumentLoader.<span class="cm-variable">loadDocuments(<span class="cm-string">"src/main/resources/docs");<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">// 2. 文档切割：将每个文档按每段进行分割，最大 1000 字符，每次重叠最多 200 个字符<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">DocumentByParagraphSplitter&nbsp;<span class="cm-variable">paragraphSplitter&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-keyword">new&nbsp;<span class="cm-variable">DocumentByParagraphSplitter(<span class="cm-number">1000,&nbsp;<span class="cm-number">200);<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">// 3. 自定义文档加载器<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">EmbeddingStoreIngestor&nbsp;<span class="cm-variable">ingestor&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">EmbeddingStoreIngestor.<span class="cm-variable">builder()<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">documentSplitter(<span class="cm-variable">paragraphSplitter)<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">// 为了提高搜索质量，为每个 TextSegment 添加文档名称<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">textSegmentTransformer(<span class="cm-variable">textSegment&nbsp;<span class="cm-operator">-&gt;&nbsp;<span class="cm-variable">TextSegment.<span class="cm-variable">from(<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">textSegment.<span class="cm-variable">metadata().<span class="cm-variable">getString(<span class="cm-string">"file_name")&nbsp;<span class="cm-operator">+&nbsp;<span class="cm-string">"\n"&nbsp;<span class="cm-operator">+&nbsp;<span class="cm-variable">textSegment.<span class="cm-variable">text(),<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">textSegment.<span class="cm-variable">metadata()<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ))<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">// 使用指定的向量模型<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">embeddingModel(<span class="cm-variable">qwenEmbeddingModel)<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">embeddingStore(<span class="cm-variable">embeddingStore)<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">build();<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">// 加载文档<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">ingestor.<span class="cm-variable">ingest(<span class="cm-variable">documents);<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">// 4. 自定义内容查询器<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">ContentRetriever&nbsp;<span class="cm-variable">contentRetriever&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">EmbeddingStoreContentRetriever.<span class="cm-variable">builder()<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">embeddingStore(<span class="cm-variable">embeddingStore)<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">embeddingModel(<span class="cm-variable">qwenEmbeddingModel)<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">maxResults(<span class="cm-number">5)&nbsp;<span class="cm-comment">// 最多 5 个检索结果<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">minScore(<span class="cm-number">0.75)&nbsp;<span class="cm-comment">// 过滤掉分数小于 0.75 的结果<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">build();<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">return&nbsp;<span class="cm-variable">contentRetriever;<br><span>&nbsp; }<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">然后在构建 AI Service 时绑定内容检索器：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-meta">@Resource<br><span><span class="cm-keyword">private&nbsp;<span class="cm-variable">ContentRetriever&nbsp;<span class="cm-variable">contentRetriever;<br><span><span>​<br><span><span class="cm-meta">@Bean<br><span><span class="cm-keyword">public&nbsp;<span class="cm-variable">AiCodeHelperService&nbsp;<span class="cm-def">aiCodeHelperService() {<br><span>&nbsp; &nbsp;<span class="cm-comment">// 会话记忆<br><span>&nbsp; &nbsp;<span class="cm-variable">ChatMemory&nbsp;<span class="cm-variable">chatMemory&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">MessageWindowChatMemory.<span class="cm-variable">withMaxMessages(<span class="cm-number">10);<br><span>&nbsp; &nbsp;<span class="cm-comment">// 构造 AI Service<br><span>&nbsp; &nbsp;<span class="cm-variable">AiCodeHelperService&nbsp;<span class="cm-variable">aiCodeHelperService&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">AiServices.<span class="cm-variable">builder(<span class="cm-variable">AiCodeHelperService.<span class="cm-keyword">class)<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">chatModel(<span class="cm-variable">qwenChatModel)<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">chatMemory(<span class="cm-variable">chatMemory)<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">contentRetriever(<span class="cm-variable">contentRetriever)&nbsp;<span class="cm-comment">// RAG 检索增强生成<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">build();<br><span>&nbsp; &nbsp;<span class="cm-keyword">return&nbsp;<span class="cm-variable">aiCodeHelperService;<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">编写单元测试：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-meta">@Test<br><span><span class="cm-variable-3">void&nbsp;<span class="cm-def">chatWithRag() {<br><span>&nbsp; &nbsp;<span class="cm-variable">Result<span class="cm-operator">&lt;<span class="cm-variable-3">String<span class="cm-operator">&gt;&nbsp;<span class="cm-variable">result&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">aiCodeHelperService.<span class="cm-variable">chatWithRag(<span class="cm-string">"怎么学习 Java？有哪些常见面试题？");<br><span>&nbsp; &nbsp;<span class="cm-variable">System.<span class="cm-variable">out.<span class="cm-variable">println(<span class="cm-variable">result.<span class="cm-variable">content());<br><span>&nbsp; &nbsp;<span class="cm-variable">System.<span class="cm-variable">out.<span class="cm-variable">println(<span class="cm-variable">result.<span class="cm-variable">sources());<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">Debug 运行，能够看到分割的文档片段，部分文档片段有内容重叠：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1751962218145-1291831b-be55-44d8-9d73-af3e4bbe3dff.png"><img data-src="https://pic.yupi.icu/1/1751962218145-1291831b-be55-44d8-9d73-af3e4bbe3dff.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">可以在对话记忆中看到实际发送的、增强后的 Prompt：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1751962545347-a358cb1b-94d8-47ec-b9e1-c72234aeff4a.png"><img data-src="https://pic.yupi.icu/1/1751962545347-a358cb1b-94d8-47ec-b9e1-c72234aeff4a.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1751962597654-e87d90cc-3240-4982-9c8e-a5228468b1e7.png"><img data-src="https://pic.yupi.icu/1/1751962597654-e87d90cc-3240-4982-9c8e-a5228468b1e7.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">回答效果也是符合预期的：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1751962714819-a74a07e9-2f0b-44ce-b4ee-db4a4041966c.png"><img data-src="https://pic.yupi.icu/1/1751962714819-a74a07e9-2f0b-44ce-b4ee-db4a4041966c.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h4 class="md-end-block md-heading"><span class="md-plain">获取引用源文档</span></h4>
<p class="md-end-block md-p"><span class="md-plain">如果能够给 AI 的回答下面展示回答来源，更容易增加内容的可信度：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1752042954244-609fbce6-beb7-4d4b-87a5-c26cd3b8bb9a.png"><img data-src="https://pic.yupi.icu/1/1752042954244-609fbce6-beb7-4d4b-87a5-c26cd3b8bb9a.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">在 LangChain4j 中，实现这个功能很简单。在 AI Service 中新增方法，在原本的返回类型外封装一层 Result 类，就可以获得封装后的结果，从中能够获取到 RAG 引用的源文档、以及 Token 的消耗情况等等。</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-meta">@SystemMessage(<span class="cm-variable">fromResource&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-string">"system-prompt.txt")<br><span><span class="cm-variable">Result<span class="cm-operator">&lt;<span class="cm-variable-3">String<span class="cm-operator">&gt;&nbsp;<span class="cm-def">chatWithRag(<span class="cm-variable-3">String&nbsp;<span class="cm-variable">userMessage);</span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">修改单元测试，输出更多信息：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-meta">@Test<br><span><span class="cm-variable-3">void&nbsp;<span class="cm-def">chatWithRag() {<br><span>&nbsp; &nbsp;<span class="cm-variable">Result<span class="cm-operator">&lt;<span class="cm-variable-3">String<span class="cm-operator">&gt;&nbsp;<span class="cm-variable">result&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">aiCodeHelperService.<span class="cm-variable">chatWithRag(<span class="cm-string">"怎么学习 Java？有哪些常见面试题？");<br><span>&nbsp; &nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">content&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">result.<span class="cm-variable">content();<br><span>&nbsp; &nbsp;<span class="cm-variable">List<span class="cm-operator">&lt;<span class="cm-variable">Content<span class="cm-operator">&gt;&nbsp;<span class="cm-variable">sources&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">result.<span class="cm-variable">sources();<br><span>&nbsp; &nbsp;<span class="cm-variable">System.<span class="cm-variable">out.<span class="cm-variable">println(<span class="cm-variable">content);<br><span>&nbsp; &nbsp;<span class="cm-variable">System.<span class="cm-variable">out.<span class="cm-variable">println(<span class="cm-variable">sources);<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">执行效果如图，获取到了引用的源文档信息：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1751973326587-f0a61ddc-a0b7-4eb8-949b-d19e257262fc.png"><img data-src="https://pic.yupi.icu/1/1751973326587-f0a61ddc-a0b7-4eb8-949b-d19e257262fc.png" class="lazyload"></span></p>
<h4 class="md-end-block md-heading"><span class="md-plain">进阶版 RAG</span></h4>
<p class="md-end-block md-p"><span class="md-plain">这就是一套标准的 RAG 实现了，大多数时候，使用标准版就够了。进阶版会更加灵活，额外支持查询转换器、查询路由、内容聚合器、内容注入器等特性，将整个 RAG 的流程流水线化（RAG pipeline）。</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1752043947317-362c8de1-26e4-4657-ada0-fb414a2dab13.png"><img data-src="https://pic.yupi.icu/1/1752043947317-362c8de1-26e4-4657-ada0-fb414a2dab13.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">定义好 RAG 流程后，最后通过 RetrievalAugmentor 提供给 AI Service：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-variable">AiServices.<span class="cm-variable">builder(<span class="cm-variable">xxx.<span class="cm-keyword">class)<br><span>&nbsp; ...<br><span>&nbsp; .<span class="cm-variable">retrievalAugmentor(<span class="cm-variable">retrievalAugmentor)<br><span>&nbsp; .<span class="cm-variable">build();</span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">此外，之前我们使用的是内存向量存储，每次启动都要重新加载文档、调用嵌入模型，比较耗时，所以实际开发中建议使用独立的存储，<span class="md-meta-i-c  md-link"><a href="https://docs.langchain4j.dev/integrations/embedding-stores/" rel="noopener nofollow"><span class="md-plain">官方支持很多第三方存储</span></a><span class="md-plain">，但是个人比较推荐 PG Vector，在原有关系库的基础上安装插件来支持向量存储，而且支持的特性很多。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1752044157711-6b5a9190-93ff-4a97-aa43-c42c519a2a0b.png"><img data-src="https://pic.yupi.icu/1/1752044157711-6b5a9190-93ff-4a97-aa43-c42c519a2a0b.png" class="lazyload"></span></p>
<h3 class="md-end-block md-heading"><span class="md-plain">工具调用 - Tools</span></h3>
<p class="md-end-block md-p"><span class="md-plain">工具调用（Tool Calling）可以理解为让 AI 大模型 <span class="md-pair-s "><strong>借用外部工具</strong><span class="md-plain"> 来完成它自己做不到的事情。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">跟人类一样，如果只凭手脚完成不了工作，那么就可以利用工具箱来完成。</span></p>
<p class="md-end-block md-p"><span class="md-plain">工具可以是任何东西，比如网页搜索、对外部 API 的调用、访问外部数据、或执行特定的代码等。</span></p>
<p class="md-end-block md-p"><span class="md-plain">比如用户提问 “帮我查询上海最新的天气”，AI 本身并没有这些知识，它就可以调用 “查询天气工具”，来完成任务。</span></p>
<p class="md-end-block md-p"><span class="md-plain">需要注意的是，工具调用的本质 <span class="md-pair-s "><strong>并不是 AI 服务器自己调用这些工具、也不是把工具的代码发送给 AI 服务器让它执行</strong><span class="md-plain">，它只能提出要求，表示 “我需要执行 XX 工具完成任务”。而真正执行工具的是我们自己的应用程序，执行后再把结果告诉 AI，让它继续工作。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1752051591909-adecdfe5-87d0-4801-b556-58beea244ebe.png"><img data-src="https://pic.yupi.icu/1/1752051591909-adecdfe5-87d0-4801-b556-58beea244ebe.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">我们需要的网络搜索能力，就可以通过工具调用来实现。这里我们细化下需求：让 AI 能够通过我的 <span class="md-meta-i-c  md-link"><a href="https://www.mianshiya.com/" rel="noopener nofollow"><span class="md-plain">面试鸭刷题网站</span></a><span class="md-plain"> 来搜索面试题。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">实现方案很简单，因为面试鸭网站的搜索页面 <span class="md-pair-s "><strong>支持通过 URL 参数传入不同的搜索关键词</strong><span class="md-plain">，我们只需要利用 <span class="md-pair-s "><strong>Jsoup 库</strong><span class="md-plain"> 抓取面试鸭搜索页面的题目列表就可以了。</span></span></span></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">好家伙，我爬我自己？不过大家不要尝试，很容易被封号。</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1752044504400-9b3b8719-dff6-4071-a084-e1236434b0c0.png"><img data-src="https://pic.yupi.icu/1/1752044504400-9b3b8719-dff6-4071-a084-e1236434b0c0.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">先引入 Jsoup 库：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-tag cm-bracket">&lt;<span class="cm-tag">dependency<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">groupId<span class="cm-tag cm-bracket">&gt;org.jsoup<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">groupId<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">artifactId<span class="cm-tag cm-bracket">&gt;jsoup<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">artifactId<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">version<span class="cm-tag cm-bracket">&gt;1.20.1<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">version<span class="cm-tag cm-bracket">&gt;<br><span><span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">dependency<span class="cm-tag cm-bracket">&gt;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">然后在 <span class="md-pair-s"><code>tools</code><span class="md-plain"> 包下编写工具，通过 <span class="md-pair-s"><code>@Tool</code><span class="md-plain"> 注解就能声明工具了，注意 <span class="md-pair-s "><strong>要认真编写工具和工具参数的描述</strong><span class="md-plain">，这直接决定了 AI 能否正确地调用工具。</span></span></span></span></span></span></span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-meta">@Slf4j<br><span><span class="cm-keyword">public&nbsp;<span class="cm-keyword">class&nbsp;<span class="cm-def">InterviewQuestionTool&nbsp;{<br><span><span>​<br><span>&nbsp; &nbsp;<span class="cm-comment">/**<br><span>&nbsp; &nbsp;&nbsp;<span class="cm-comment">* 从面试鸭网站获取关键词相关的面试题列表<br><span>&nbsp; &nbsp;&nbsp;<span class="cm-comment">*<br><span>&nbsp; &nbsp;&nbsp;<span class="cm-comment">* @param keyword 搜索关键词（如"redis"、"java多线程"）<br><span>&nbsp; &nbsp;&nbsp;<span class="cm-comment">* @return 面试题列表，若失败则返回错误信息<br><span>&nbsp; &nbsp;&nbsp;<span class="cm-comment">*/<br><span>&nbsp; &nbsp;<span class="cm-meta">@Tool(<span class="cm-variable">name&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-string">"interviewQuestionSearch",&nbsp;<span class="cm-variable">value&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-string">"""<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">Retrieves&nbsp;<span class="cm-variable">relevant&nbsp;<span class="cm-variable">interview&nbsp;<span class="cm-variable">questions&nbsp;<span class="cm-variable">from&nbsp;<span class="cm-variable">mianshiya.<span class="cm-variable">com&nbsp;<span class="cm-variable">based&nbsp;<span class="cm-variable">on&nbsp;<span class="cm-variable">a&nbsp;<span class="cm-variable">keyword.<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">Use&nbsp;<span class="cm-keyword">this&nbsp;<span class="cm-variable">tool&nbsp;<span class="cm-variable">when&nbsp;<span class="cm-variable">the&nbsp;<span class="cm-variable">user&nbsp;<span class="cm-variable">asks&nbsp;<span class="cm-keyword">for&nbsp;<span class="cm-variable">interview&nbsp;<span class="cm-variable">questions&nbsp;<span class="cm-variable">about&nbsp;<span class="cm-variable">specific&nbsp;<span class="cm-variable">technologies,<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">programming&nbsp;<span class="cm-variable">concepts,&nbsp;<span class="cm-variable">or&nbsp;<span class="cm-variable">job<span class="cm-operator">-<span class="cm-variable">related&nbsp;<span class="cm-variable">topics.&nbsp;<span class="cm-variable">The&nbsp;<span class="cm-variable">input&nbsp;<span class="cm-variable">should&nbsp;<span class="cm-variable">be&nbsp;<span class="cm-variable">a&nbsp;<span class="cm-variable">clear&nbsp;<span class="cm-variable">search&nbsp;<span class="cm-variable">term.<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-string">"""<br><span>&nbsp; )<br><span>&nbsp; &nbsp;<span class="cm-keyword">public&nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">searchInterviewQuestions(<span class="cm-meta">@P(<span class="cm-variable">value&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-string">"the keyword to search")&nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">keyword) {<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">List<span class="cm-operator">&lt;<span class="cm-variable-3">String<span class="cm-operator">&gt;&nbsp;<span class="cm-variable">questions&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-keyword">new&nbsp;<span class="cm-variable">ArrayList<span class="cm-operator">&lt;&gt;();<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">// 构建搜索URL（编码关键词以支持中文）<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">encodedKeyword&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">URLEncoder.<span class="cm-variable">encode(<span class="cm-variable">keyword,&nbsp;<span class="cm-variable">StandardCharsets.<span class="cm-variable">UTF_8);<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">url&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-string">"https://www.mianshiya.com/search/all?searchText="&nbsp;<span class="cm-operator">+&nbsp;<span class="cm-variable">encodedKeyword;<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">// 发送请求并解析页面<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">Document&nbsp;<span class="cm-variable">doc;<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">try&nbsp;{<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">doc&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">Jsoup.<span class="cm-variable">connect(<span class="cm-variable">url)<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">userAgent(<span class="cm-string">"Mozilla/5.0")<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">timeout(<span class="cm-number">5000)<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">get();<br><span>&nbsp; &nbsp; &nbsp; }&nbsp;<span class="cm-keyword">catch&nbsp;(<span class="cm-variable">IOException&nbsp;<span class="cm-variable">e) {<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">log.<span class="cm-variable">error(<span class="cm-string">"get web error",&nbsp;<span class="cm-variable">e);<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">return&nbsp;<span class="cm-variable">e.<span class="cm-variable">getMessage();<br><span>&nbsp; &nbsp; &nbsp; }<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">// 提取面试题<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">Elements&nbsp;<span class="cm-variable">questionElements&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">doc.<span class="cm-variable">select(<span class="cm-string">".ant-table-cell &gt; a");<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">questionElements.<span class="cm-variable">forEach(<span class="cm-variable">el&nbsp;<span class="cm-operator">-&gt;&nbsp;<span class="cm-variable">questions.<span class="cm-variable">add(<span class="cm-variable">el.<span class="cm-variable">text().<span class="cm-variable">trim()));<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">return&nbsp;<span class="cm-variable-3">String.<span class="cm-variable">join(<span class="cm-string">"\n",&nbsp;<span class="cm-variable">questions);<br><span>&nbsp; }<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">给 AI Service 绑定工具：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-comment">// 构造 AI Service<br><span><span class="cm-variable">AiCodeHelperService&nbsp;<span class="cm-variable">aiCodeHelperService&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">AiServices.<span class="cm-variable">builder(<span class="cm-variable">AiCodeHelperService.<span class="cm-keyword">class)<br><span>&nbsp; &nbsp; &nbsp; .<span class="cm-variable">chatModel(<span class="cm-variable">qwenChatModel)<br><span>&nbsp; &nbsp; &nbsp; .<span class="cm-variable">chatMemory(<span class="cm-variable">chatMemory)<br><span>&nbsp; &nbsp; &nbsp; .<span class="cm-variable">contentRetriever(<span class="cm-variable">contentRetriever)&nbsp;<span class="cm-comment">// RAG 检索增强生成<br><span>&nbsp; &nbsp; &nbsp; .<span class="cm-variable">tools(<span class="cm-keyword">new&nbsp;<span class="cm-variable">InterviewQuestionTool())&nbsp;<span class="cm-comment">// 工具调用<br><span>&nbsp; &nbsp; &nbsp; .<span class="cm-variable">build();</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">编写单元测试，验证工具的效果：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-meta">@Test<br><span><span class="cm-variable-3">void&nbsp;<span class="cm-def">chatWithTools() {<br><span>&nbsp; &nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">result&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">aiCodeHelperService.<span class="cm-variable">chat(<span class="cm-string">"有哪些常见的计算机网络面试题？");<br><span>&nbsp; &nbsp;<span class="cm-variable">System.<span class="cm-variable">out.<span class="cm-variable">println(<span class="cm-variable">result);<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">Debug 运行，发现 AI 调用了工具：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1751964854933-395ecc9e-0fb6-4788-b8e2-ae5ef1d094a7.png"><img data-src="https://pic.yupi.icu/1/1751964854933-395ecc9e-0fb6-4788-b8e2-ae5ef1d094a7.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">工具检索到了题目列表：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1751964893075-84d0ac23-fe02-47c0-95c3-e422d1305448.png"><img data-src="https://pic.yupi.icu/1/1751964893075-84d0ac23-fe02-47c0-95c3-e422d1305448.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">可以通过 Debug 看到 AI Service 加载了工具：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1751964979312-65f04b40-9554-438b-83ff-025009f30a1c.png"><img data-src="https://pic.yupi.icu/1/1751964979312-65f04b40-9554-438b-83ff-025009f30a1c.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">可以通过会话记忆查看工具的调用过程：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1751965074185-165ed1b9-a50f-4d21-ae85-b8c439f5065c.png"><img data-src="https://pic.yupi.icu/1/1751965074185-165ed1b9-a50f-4d21-ae85-b8c439f5065c.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">输出结果符合预期：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1751965104933-af4b3181-4dc0-40bb-9ef9-5e1c0e26b389.png"><img data-src="https://pic.yupi.icu/1/1751965104933-af4b3181-4dc0-40bb-9ef9-5e1c0e26b389.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">前面只演示了最简单的工具定义方法 —— 声明式，LangChain4j 也提供了编程式的工具定义方法，不过我相信你不会想这么做的（除非是动态创建工具）。</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1752045043475-a61743d1-e1ea-4912-bfac-d77ce6e43858.png"><img data-src="https://pic.yupi.icu/1/1752045043475-a61743d1-e1ea-4912-bfac-d77ce6e43858.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">除了联网搜索外，还有一些经典的工具，比如文件读写、PDF 生成、调用终端、输出图表等等。这些工具我们可以自己开发，也可以通过 MCP 直接使用别人开发好的工具。</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">模型上下文协议 - MCP</span></h3>
<p class="md-end-block md-p"><span class="md-plain">MCP（Model Context Protocol，模型上下文协议）是一种开放标准，目的是增强 AI 与外部系统的交互能力。MCP 为 AI 提供了与外部工具、资源和服务交互的标准化方式，让 AI 能够访问最新数据、执行复杂操作，并与现有系统集成。</span></p>
<p class="md-end-block md-p"><span class="md-plain">可以将 MCP 想象成 AI 应用的 USB 接口。就像 USB 为设备连接各种外设和配件提供了标准化方式一样，MCP 为 AI 模型连接不同的数据源和工具提供了标准化的方法。</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1752051649523-398e66d6-87fa-4cc4-8c9d-951939844405.png"><img data-src="https://pic.yupi.icu/1/1752051649523-398e66d6-87fa-4cc4-8c9d-951939844405.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">简单来说，通过 MCP 协议，AI 应用可以轻松接入别人提供的服务来实现更多功能，比如查询地理位置、操作数据库、部署网站、甚至是支付等等。</span></p>
<p class="md-end-block md-p"><span class="md-plain">刚刚我们通过工具调用实现了面试题的搜索，下面我们利用 MCP 实现 <span class="md-pair-s "><strong>全网搜索内容</strong><span class="md-plain">，这也是一个典型的 MCP 应用场景了。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">首先从 MCP 服务市场搜索 Web Search 服务，推荐 <span class="md-meta-i-c  md-link"><a href="https://mcp.so/server/zhipu-web-search/BigModel?tab=content" rel="noopener nofollow"><span class="md-plain">下面这个</span></a><span class="md-plain">，因为它提供了 SSE 在线调用服务，不用我们自己在本地安装启动，很方便。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1752045285371-fd70d350-80bd-4037-9b57-ff8d3a37ccf5.png"><img data-src="https://pic.yupi.icu/1/1752045285371-fd70d350-80bd-4037-9b57-ff8d3a37ccf5.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">但也要注意，用别人的服务可能是需要 API Key 的，一般是按量付费。</span></p>
<p class="md-end-block md-p"><span class="md-plain">需要先去 <span class="md-meta-i-c  md-link"><a href="https://www.bigmodel.cn/usercenter/proj-mgmt/apikeys" rel="noopener nofollow"><span class="md-plain">平台官方获取 API Key</span></a><span class="md-plain">，等会儿会用到：</span></span></span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1752045399400-4e8fe95f-5d5c-47dc-aa6e-4225f2df23aa.png"><img data-src="https://pic.yupi.icu/1/1752045399400-4e8fe95f-5d5c-47dc-aa6e-4225f2df23aa.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">然后我们要在程序中使用这个 MCP 服务。比较坑的是，感觉 LangChain 对 MCP 的支持没有那么好，官方文档甚至都没有提到要引入的 MCP 依赖包。我还是从开源仓库中找到的依赖：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1751967113982-099b0b9a-d5a3-43e0-bdf1-1ccfb8d093b2.png"><img data-src="https://pic.yupi.icu/1/1751967113982-099b0b9a-d5a3-43e0-bdf1-1ccfb8d093b2.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">引入依赖：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-comment">&lt;!-- https://mvnrepository.com/artifact/dev.langchain4j/langchain4j-mcp --&gt;<br><span><span class="cm-tag cm-bracket">&lt;<span class="cm-tag">dependency<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">groupId<span class="cm-tag cm-bracket">&gt;dev.langchain4j<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">groupId<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">artifactId<span class="cm-tag cm-bracket">&gt;langchain4j-mcp<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">artifactId<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">version<span class="cm-tag cm-bracket">&gt;1.1.0-beta7<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">version<span class="cm-tag cm-bracket">&gt;<br><span><span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">dependency<span class="cm-tag cm-bracket">&gt;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">在配置文件中新增 API Key 的配置：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-atom">bigmodel<span class="cm-meta">:<br><span><span class="cm-atom">api-key<span class="cm-meta">:&nbsp;&lt;Your Api Key&gt;</span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">新建 <span class="md-pair-s"><code>mcp.McpConfig</code><span class="md-plain">，按照官方的开发方式，初始化和 MCP 服务的通讯，并创建 McpToolProvider 的 Bean：</span></span></span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-meta">@Configuration<br><span><span class="cm-keyword">public&nbsp;<span class="cm-keyword">class&nbsp;<span class="cm-def">McpConfig&nbsp;{<br><span><span>​<br><span>&nbsp; &nbsp;<span class="cm-meta">@Value(<span class="cm-string">"${bigmodel.api-key}")<br><span>&nbsp; &nbsp;<span class="cm-keyword">private&nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">apiKey;<br><span><span>​<br><span>&nbsp; &nbsp;<span class="cm-meta">@Bean<br><span>&nbsp; &nbsp;<span class="cm-keyword">public&nbsp;<span class="cm-variable">McpToolProvider&nbsp;<span class="cm-variable">mcpToolProvider() {<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">// 和 MCP 服务通讯<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">McpTransport&nbsp;<span class="cm-variable">transport&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-keyword">new&nbsp;<span class="cm-variable">HttpMcpTransport.<span class="cm-variable">Builder()<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">sseUrl(<span class="cm-string">"https://open.bigmodel.cn/api/mcp/web_search/sse?Authorization="&nbsp;<span class="cm-operator">+&nbsp;<span class="cm-variable">apiKey)<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">logRequests(<span class="cm-atom">true)&nbsp;<span class="cm-comment">// 开启日志，查看更多信息<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">logResponses(<span class="cm-atom">true)<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">build();<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">// 创建 MCP 客户端<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">McpClient&nbsp;<span class="cm-variable">mcpClient&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-keyword">new&nbsp;<span class="cm-variable">DefaultMcpClient.<span class="cm-variable">Builder()<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">key(<span class="cm-string">"yupiMcpClient")<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">transport(<span class="cm-variable">transport)<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">build();<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">// 从 MCP 客户端获取工具<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">McpToolProvider&nbsp;<span class="cm-variable">toolProvider&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">McpToolProvider.<span class="cm-variable">builder()<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">mcpClients(<span class="cm-variable">mcpClient)<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">build();<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">return&nbsp;<span class="cm-variable">toolProvider;<br><span>&nbsp; }<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">注意，上面我们是通过 SSE 的方式调用 MCP。如果你是通过 npx 或 uvx 本地启动 MCP 服务，需要先安装对应的工具，并且利用下面的配置建立通讯：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-variable">McpTransport&nbsp;<span class="cm-variable">transport&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-keyword">new&nbsp;<span class="cm-variable">StdioMcpTransport.<span class="cm-variable">Builder()<br><span>&nbsp; .<span class="cm-variable">command(<span class="cm-variable">List.<span class="cm-variable">of(<span class="cm-string">"/usr/bin/npm",&nbsp;<span class="cm-string">"exec",&nbsp;<span class="cm-string">"@modelcontextprotocol/server-everything@0.6.2"))<br><span>&nbsp; .<span class="cm-variable">logEvents(<span class="cm-atom">true)&nbsp;<span class="cm-comment">// only if you want to see the traffic in the log<br><span>&nbsp; .<span class="cm-variable">build();</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">在 AI Service 中应用 MCP 工具：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-meta">@Resource<br><span><span class="cm-keyword">private&nbsp;<span class="cm-variable">McpToolProvider&nbsp;<span class="cm-variable">mcpToolProvider;<br><span><span>​<br><span><span class="cm-comment">// 构造 AI Service<br><span><span class="cm-variable">AiCodeHelperService&nbsp;<span class="cm-variable">aiCodeHelperService&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">AiServices.<span class="cm-variable">builder(<span class="cm-variable">AiCodeHelperService.<span class="cm-keyword">class)<br><span>&nbsp; &nbsp; &nbsp; .<span class="cm-variable">chatModel(<span class="cm-variable">qwenChatModel)<br><span>&nbsp; &nbsp; &nbsp; .<span class="cm-variable">chatMemory(<span class="cm-variable">chatMemory)<br><span>&nbsp; &nbsp; &nbsp; .<span class="cm-variable">contentRetriever(<span class="cm-variable">contentRetriever)&nbsp;<span class="cm-comment">// RAG 检索增强生成<br><span>&nbsp; &nbsp; &nbsp; .<span class="cm-variable">tools(<span class="cm-keyword">new&nbsp;<span class="cm-variable">InterviewQuestionTool())&nbsp;<span class="cm-comment">// 工具调用<br><span>&nbsp; &nbsp; &nbsp; .<span class="cm-variable">toolProvider(<span class="cm-variable">mcpToolProvider)&nbsp;<span class="cm-comment">// MCP 工具调用<br><span>&nbsp; &nbsp; &nbsp; .<span class="cm-variable">build();</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">编写单元测试：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-meta">@Test<br><span><span class="cm-variable-3">void&nbsp;<span class="cm-def">chatWithMcp() {<br><span>&nbsp; &nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">result&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">aiCodeHelperService.<span class="cm-variable">chat(<span class="cm-string">"什么是程序员鱼皮的编程导航？");<br><span>&nbsp; &nbsp;<span class="cm-variable">System.<span class="cm-variable">out.<span class="cm-variable">println(<span class="cm-variable">result);<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">执行单元测试，通过日志查看到了搜索过程：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1751967601320-5242e432-ea07-4038-bc6f-7364aefe3d6a.png"><img data-src="https://pic.yupi.icu/1/1751967601320-5242e432-ea07-4038-bc6f-7364aefe3d6a.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">MCP 服务生效，从网上检索到了内容作为答案：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1751967705158-c4591073-858c-4584-a5ee-7d2ecb5261d6.png"><img data-src="https://pic.yupi.icu/1/1751967705158-c4591073-858c-4584-a5ee-7d2ecb5261d6.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">目前，文档中并没有提到利用 LangChain4j 开发 MCP 的方法，不过目前也不建议用 Java 开发 MCP。</span></p>
<h3 class="md-end-block md-heading"><span class="md-plain">护轨 - Guardrail</span></h3>
<p class="md-end-block md-p"><span class="md-plain">其实我感觉护轨这个名字起的不太好，其实我们把它理解为拦截器就好了。分为输入护轨（input guardrails）和输出护轨（output guardrails），可以在请求 AI 前和接收到 AI 的响应后执行一些额外操作，比如调用 AI 前鉴权、调用 AI 后记录日志。</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1752051765814-ca0a709d-216e-4f84-8a05-0a8b9a3a6b66.png"><img data-src="https://pic.yupi.icu/1/1752051765814-ca0a709d-216e-4f84-8a05-0a8b9a3a6b66.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">让我们小试一把，在调用 AI 前进行敏感词检测，如果用户提示词包含敏感词，则直接拒绝。</span></p>
<p class="md-end-block md-p"><span class="md-plain">新建 <span class="md-pair-s"><code>guardrail.SafeInputGuardrail</code><span class="md-plain">，实现 InputGuardrail 接口：</span></span></span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-comment">/**<br><span><span class="cm-comment">* 安全检测输入护轨<br><span><span class="cm-comment">*/<br><span><span class="cm-keyword">public&nbsp;<span class="cm-keyword">class&nbsp;<span class="cm-def">SafeInputGuardrail&nbsp;<span class="cm-keyword">implements&nbsp;<span class="cm-variable">InputGuardrail&nbsp;{<br><span><span>​<br><span>&nbsp; &nbsp;<span class="cm-keyword">private&nbsp;<span class="cm-keyword">static&nbsp;<span class="cm-keyword">final&nbsp;<span class="cm-variable">Set<span class="cm-operator">&lt;<span class="cm-variable-3">String<span class="cm-operator">&gt;&nbsp;<span class="cm-variable">sensitiveWords&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">Set.<span class="cm-variable">of(<span class="cm-string">"kill",&nbsp;<span class="cm-string">"evil");<br><span><span>​<br><span>&nbsp; &nbsp;<span class="cm-comment">/**<br><span>&nbsp; &nbsp;&nbsp;<span class="cm-comment">* 检测用户输入是否安全<br><span>&nbsp; &nbsp;&nbsp;<span class="cm-comment">*/<br><span>&nbsp; &nbsp;<span class="cm-meta">@Override<br><span>&nbsp; &nbsp;<span class="cm-keyword">public&nbsp;<span class="cm-variable">InputGuardrailResult&nbsp;<span class="cm-variable">validate(<span class="cm-variable">UserMessage&nbsp;<span class="cm-variable">userMessage) {<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">// 获取用户输入并转换为小写以确保大小写不敏感<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">inputText&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">userMessage.<span class="cm-variable">singleText().<span class="cm-variable">toLowerCase();<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">// 使用正则表达式分割输入文本为单词<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable-3">String[]&nbsp;<span class="cm-variable">words&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">inputText.<span class="cm-variable">split(<span class="cm-string">"\\W+");<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">// 遍历所有单词，检查是否存在敏感词<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">for&nbsp;(<span class="cm-variable-3">String&nbsp;<span class="cm-variable">word&nbsp;:&nbsp;<span class="cm-variable">words) {<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">if&nbsp;(<span class="cm-variable">sensitiveWords.<span class="cm-variable">contains(<span class="cm-variable">word)) {<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">return&nbsp;<span class="cm-variable">fatal(<span class="cm-string">"Sensitive word detected: "&nbsp;<span class="cm-operator">+&nbsp;<span class="cm-variable">word);<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br><span>&nbsp; &nbsp; &nbsp; }<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">return&nbsp;<span class="cm-variable">success();<br><span>&nbsp; }<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">LangChain4j 提供了几种快速返回的方法，简单来说，想继续调用 AI 就返回 success、否则就返回 fatal。</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1751968291132-96a670ce-6551-4726-8c62-045021303af1.png"><img data-src="https://pic.yupi.icu/1/1751968291132-96a670ce-6551-4726-8c62-045021303af1.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">修改 AI Service，使用输入护轨：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-meta">@InputGuardrails({<span class="cm-variable">SafeInputGuardrail.<span class="cm-keyword">class})<br><span><span class="cm-keyword">public&nbsp;<span class="cm-keyword">interface&nbsp;<span class="cm-def">AiCodeHelperService&nbsp;{<br><span><span>​<br><span>&nbsp; &nbsp;<span class="cm-meta">@SystemMessage(<span class="cm-variable">fromResource&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-string">"system-prompt.txt")<br><span>&nbsp; &nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">chat(<span class="cm-variable-3">String&nbsp;<span class="cm-variable">userMessage);<br><span><span>​<br><span>&nbsp; &nbsp;<span class="cm-meta">@SystemMessage(<span class="cm-variable">fromResource&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-string">"system-prompt.txt")<br><span>&nbsp; &nbsp;<span class="cm-variable">Report&nbsp;<span class="cm-variable">chatForReport(<span class="cm-variable-3">String&nbsp;<span class="cm-variable">userMessage);<br><span><span>​<br><span>&nbsp; &nbsp;<span class="cm-comment">// 学习报告<br><span>&nbsp; &nbsp;<span class="cm-variable">record&nbsp;<span class="cm-variable">Report(<span class="cm-variable-3">String&nbsp;<span class="cm-variable">name,&nbsp;<span class="cm-variable">List<span class="cm-operator">&lt;<span class="cm-variable-3">String<span class="cm-operator">&gt;&nbsp;<span class="cm-variable">suggestionList) {<br><span>&nbsp; }<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">编写单元测试，写一个包含敏感词的提示词：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-meta">@Test<br><span><span class="cm-variable-3">void&nbsp;<span class="cm-def">chatWithGuardrail() {<br><span>&nbsp; &nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">result&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">aiCodeHelperService.<span class="cm-variable">chat(<span class="cm-string">"kill the game");<br><span>&nbsp; &nbsp;<span class="cm-variable">System.<span class="cm-variable">out.<span class="cm-variable">println(<span class="cm-variable">result);<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">运行并查看效果，会触发输入检测，直接抛出异常：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1751968796339-ebf23753-55ad-4123-a4dc-e599859a28a1.png"><img data-src="https://pic.yupi.icu/1/1751968796339-ebf23753-55ad-4123-a4dc-e599859a28a1.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">如果不包含敏感词，则会顺利通过。</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1751968877451-3ac9f488-0b78-4c04-a227-3c89b54847c8.png"><img data-src="https://pic.yupi.icu/1/1751968877451-3ac9f488-0b78-4c04-a227-3c89b54847c8.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">当然，除了输入护轨，也可以编写输出护轨，对 AI 的响应结果进行检测。</span></p>
<h3 class="md-end-block md-heading"><span class="md-plain">日志和可观测性</span></h3>
<p class="md-end-block md-p"><span class="md-plain">之前我们都是通过 Debug 查看运行信息，不仅不便于调试，而且生产环境肯定不能这么做。</span></p>
<p class="md-end-block md-p"><span class="md-plain">官方提供了 <span class="md-meta-i-c  md-link"><a href="https://docs.langchain4j.dev/tutorials/logging" rel="noopener nofollow"><span class="md-plain">日志</span></a><span class="md-plain"> 和 <span class="md-meta-i-c  md-link"><a href="https://docs.langchain4j.dev/tutorials/observability" rel="noopener nofollow"><span class="md-plain">可观测性</span></a><span class="md-plain">，来帮我们更好地调试程序、发现问题。</span></span></span></span></span></p>
<h4 class="md-end-block md-heading"><span class="md-plain">日志</span></h4>
<p class="md-end-block md-p"><span class="md-plain">开启日志的方法很简单，直接构造模型时指定开启、或者直接编写 Spring Boot 配置，支持打印 AI 请求和响应日志。</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-variable">OpenAiChatModel.<span class="cm-variable">builder()<br><span>&nbsp; ...<br><span>&nbsp; .<span class="cm-variable">logRequests(<span class="cm-atom">true)<br><span>&nbsp; .<span class="cm-variable">logResponses(<span class="cm-atom">true)<br><span>&nbsp; .<span class="cm-variable">build();<br><span><span class="cm-variable">langchain4j.<span class="cm-variable">open<span class="cm-operator">-<span class="cm-variable">ai.<span class="cm-variable">chat<span class="cm-operator">-<span class="cm-variable">model.<span class="cm-variable">log<span class="cm-operator">-<span class="cm-variable">requests&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-atom">true<br><span><span class="cm-variable">langchain4j.<span class="cm-variable">open<span class="cm-operator">-<span class="cm-variable">ai.<span class="cm-variable">chat<span class="cm-operator">-<span class="cm-variable">model.<span class="cm-variable">log<span class="cm-operator">-<span class="cm-variable">responses&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-atom">true<br><span><span class="cm-variable">logging.<span class="cm-variable">level.<span class="cm-variable">dev.<span class="cm-variable">langchain4j&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">DEBUG</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">但并不是所有的 ChatModel 都支持，比如我测试下来 QwenChatModel 就不支持。这时只能把希望交给可观测性了。</span></p>
<h4 class="md-end-block md-heading"><span class="md-plain">可观测性</span></h4>
<p class="md-end-block md-p"><span class="md-plain">可以通过自定义 Listener 获取 ChatModel 的调用信息，比较灵活。</span></p>
<p class="md-end-block md-p"><span class="md-plain">新建 <span class="md-pair-s"><code>listener.ChatModelListenerConfig</code><span class="md-plain">，输出请求、响应、错误信息：</span></span></span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-meta">@Configuration<br><span><span class="cm-meta">@Slf4j<br><span><span class="cm-keyword">public&nbsp;<span class="cm-keyword">class&nbsp;<span class="cm-def">ChatModelListenerConfig&nbsp;{<br><span>&nbsp; &nbsp;<br><span>&nbsp; &nbsp;<span class="cm-meta">@Bean<br><span>&nbsp; &nbsp;<span class="cm-variable">ChatModelListener&nbsp;<span class="cm-variable">chatModelListener() {<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">return&nbsp;<span class="cm-keyword">new&nbsp;<span class="cm-variable">ChatModelListener() {<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-meta">@Override<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">public&nbsp;<span class="cm-variable-3">void&nbsp;<span class="cm-variable">onRequest(<span class="cm-variable">ChatModelRequestContext&nbsp;<span class="cm-variable">requestContext) {<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">log.<span class="cm-variable">info(<span class="cm-string">"onRequest(): {}",&nbsp;<span class="cm-variable">requestContext.<span class="cm-variable">chatRequest());<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br><span><span>​<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-meta">@Override<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">public&nbsp;<span class="cm-variable-3">void&nbsp;<span class="cm-variable">onResponse(<span class="cm-variable">ChatModelResponseContext&nbsp;<span class="cm-variable">responseContext) {<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">log.<span class="cm-variable">info(<span class="cm-string">"onResponse(): {}",&nbsp;<span class="cm-variable">responseContext.<span class="cm-variable">chatResponse());<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br><span><span>​<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-meta">@Override<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">public&nbsp;<span class="cm-variable-3">void&nbsp;<span class="cm-variable">onError(<span class="cm-variable">ChatModelErrorContext&nbsp;<span class="cm-variable">errorContext) {<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">log.<span class="cm-variable">info(<span class="cm-string">"onError(): {}",&nbsp;<span class="cm-variable">errorContext.<span class="cm-variable">error().<span class="cm-variable">getMessage());<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br><span>&nbsp; &nbsp; &nbsp; };<br><span>&nbsp; }<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">但是只定义 Listener 好像对 QwenChatModel 不起作用，所以我们需要手动构造自定义的 QwenChatModel。</span></p>
<p class="md-end-block md-p"><span class="md-plain">新建 <span class="md-pair-s"><code>model.QwenChatModelConfig</code><span class="md-plain">，构造 ChatModel 对象并绑定 Listener：</span></span></span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-meta">@Configuration<br><span><span class="cm-meta">@ConfigurationProperties(<span class="cm-variable">prefix&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-string">"langchain4j.community.dashscope.chat-model")<br><span><span class="cm-meta">@Data<br><span><span class="cm-keyword">public&nbsp;<span class="cm-keyword">class&nbsp;<span class="cm-def">QwenChatModelConfig&nbsp;{<br><span><span>​<br><span>&nbsp; &nbsp;<span class="cm-keyword">private&nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">modelName;<br><span><span>​<br><span>&nbsp; &nbsp;<span class="cm-keyword">private&nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">apiKey;<br><span><span>​<br><span>&nbsp; &nbsp;<span class="cm-meta">@Resource<br><span>&nbsp; &nbsp;<span class="cm-keyword">private&nbsp;<span class="cm-variable">ChatModelListener&nbsp;<span class="cm-variable">chatModelListener;<br><span><span>​<br><span>&nbsp; &nbsp;<span class="cm-meta">@Bean<br><span>&nbsp; &nbsp;<span class="cm-keyword">public&nbsp;<span class="cm-variable">ChatModel&nbsp;<span class="cm-variable">myQwenChatModel() {<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">return&nbsp;<span class="cm-variable">QwenChatModel.<span class="cm-variable">builder()<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">apiKey(<span class="cm-variable">apiKey)<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">modelName(<span class="cm-variable">modelName)<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">listeners(<span class="cm-variable">List.<span class="cm-variable">of(<span class="cm-variable">chatModelListener))<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">build();<br><span>&nbsp; }<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">然后，可以将原本引用 ChatModel 的名称改为 <span class="md-pair-s"><code>myQwenChatModel</code><span class="md-plain">，防止和 Spring Boot 自动注入的 ChatModel 冲突。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">再次调用 AI，就能看到很多信息了：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1751974020940-84059541-3935-4505-b114-6fcc809b04f5.png"><img data-src="https://pic.yupi.icu/1/1751974020940-84059541-3935-4505-b114-6fcc809b04f5.png" class="lazyload"></span></p>
<h3 class="md-end-block md-heading"><span class="md-plain">AI 服务化</span></h3>
<p class="md-end-block md-p"><span class="md-plain">至此，AI 的能力基本开发完成，但是目前只支持本地运行，需要编写一个接口提供给前端调用，让 AI 能够成为一个服务。</span></p>
<p class="md-end-block md-p"><span class="md-plain">我们平时开发的大多数接口都是同步接口，也就是等后端处理完再返回。但是对于 AI 应用，特别是响应时间较长的对话类应用，可能会让用户失去耐心等待，因此推荐使用 SSE（Server-Sent Events）技术实现实时流式输出，类似打字机效果，大幅提升用户体验。</span></p>
<h4 class="md-end-block md-heading"><span class="md-plain">SSE 流式接口开发</span></h4>
<p class="md-end-block md-p"><span class="md-plain">LangChain 提供了 2 种方式来支持流式响应（注意，流式响应不支持结构化输出）。</span></p>
<p class="md-end-block md-p"><span class="md-plain">一种方法是 <span class="md-meta-i-c  md-link"><a href="https://docs.langchain4j.dev/tutorials/ai-services#streaming" rel="noopener nofollow"><span class="md-plain">TokenStream</span></a><span class="md-plain">，先让 AI 对话方法返回 TokenStream，然后创建 AI Service 时指定流式对话模型 StreamingChatModel：</span></span></span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-keyword">interface&nbsp;<span class="cm-def">Assistant&nbsp;{<br><span><span>​<br><span>&nbsp; &nbsp;<span class="cm-variable">TokenStream&nbsp;<span class="cm-variable">chat(<span class="cm-variable-3">String&nbsp;<span class="cm-variable">message);<br><span>}<br><span><span>​<br><span><span class="cm-variable">StreamingChatModel&nbsp;<span class="cm-variable">model&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">OpenAiStreamingChatModel.<span class="cm-variable">builder()<br><span>&nbsp; .<span class="cm-variable">apiKey(<span class="cm-variable">System.<span class="cm-variable">getenv(<span class="cm-string">"OPENAI_API_KEY"))<br><span>&nbsp; .<span class="cm-variable">modelName(<span class="cm-variable">GPT_4_O_MINI)<br><span>&nbsp; .<span class="cm-variable">build();<br><span><span>​<br><span><span class="cm-variable">Assistant&nbsp;<span class="cm-variable">assistant&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">AiServices.<span class="cm-variable">create(<span class="cm-variable">Assistant.<span class="cm-keyword">class,&nbsp;<span class="cm-variable">model);<br><span><span>​<br><span><span class="cm-variable">TokenStream&nbsp;<span class="cm-variable">tokenStream&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">assistant.<span class="cm-variable">chat(<span class="cm-string">"Tell me a joke");<br><span><span>​<br><span><span class="cm-variable">tokenStream.<span class="cm-variable">onPartialResponse((<span class="cm-variable-3">String&nbsp;<span class="cm-variable">partialResponse)&nbsp;<span class="cm-operator">-&gt;&nbsp;<span class="cm-variable">System.<span class="cm-variable">out.<span class="cm-variable">println(<span class="cm-variable">partialResponse))<br><span>&nbsp; .<span class="cm-variable">onRetrieved((<span class="cm-variable">List<span class="cm-operator">&lt;<span class="cm-variable">Content<span class="cm-operator">&gt;&nbsp;<span class="cm-variable">contents)&nbsp;<span class="cm-operator">-&gt;&nbsp;<span class="cm-variable">System.<span class="cm-variable">out.<span class="cm-variable">println(<span class="cm-variable">contents))<br><span>&nbsp; .<span class="cm-variable">onToolExecuted((<span class="cm-variable">ToolExecution&nbsp;<span class="cm-variable">toolExecution)&nbsp;<span class="cm-operator">-&gt;&nbsp;<span class="cm-variable">System.<span class="cm-variable">out.<span class="cm-variable">println(<span class="cm-variable">toolExecution))<br><span>&nbsp; .<span class="cm-variable">onCompleteResponse((<span class="cm-variable">ChatResponse&nbsp;<span class="cm-variable">response)&nbsp;<span class="cm-operator">-&gt;&nbsp;<span class="cm-variable">System.<span class="cm-variable">out.<span class="cm-variable">println(<span class="cm-variable">response))<br><span>&nbsp; .<span class="cm-variable">onError((<span class="cm-variable">Throwable&nbsp;<span class="cm-variable">error)&nbsp;<span class="cm-operator">-&gt;&nbsp;<span class="cm-variable">error.<span class="cm-variable">printStackTrace())<br><span>&nbsp; .<span class="cm-variable">start();</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">我个人会更喜欢另一种方法，<span class="md-meta-i-c  md-link"><a href="https://docs.langchain4j.dev/tutorials/ai-services/#flux" rel="noopener nofollow"><span class="md-plain">使用 Flux</span></a><span class="md-plain"> 代替 TokenStream，熟悉响应式编程的同学应该对 Flux 不陌生吧？让 AI 对话方法返回 Flux 响应式对象即可。示例代码：</span></span></span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-keyword">interface&nbsp;<span class="cm-def">Assistant&nbsp;{<br><span><span>​<br><span>&nbsp;<span class="cm-variable">Flux<span class="cm-operator">&lt;<span class="cm-variable-3">String<span class="cm-operator">&gt;&nbsp;<span class="cm-variable">chat(<span class="cm-variable-3">String&nbsp;<span class="cm-variable">message);<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">让我们试一下，首先需要引入响应式包依赖：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-tag cm-bracket">&lt;<span class="cm-tag">dependency<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">groupId<span class="cm-tag cm-bracket">&gt;dev.langchain4j<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">groupId<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">artifactId<span class="cm-tag cm-bracket">&gt;langchain4j-reactor<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">artifactId<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">version<span class="cm-tag cm-bracket">&gt;1.1.0-beta7<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">version<span class="cm-tag cm-bracket">&gt;<br><span><span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">dependency<span class="cm-tag cm-bracket">&gt;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">然后给 AI Service 增加流式对话方法，这里顺便支持下多用户的会话记忆：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-comment">// 流式对话<br><span><span class="cm-variable">Flux<span class="cm-operator">&lt;<span class="cm-variable-3">String<span class="cm-operator">&gt;&nbsp;<span class="cm-def">chatStream(<span class="cm-meta">@MemoryId&nbsp;<span class="cm-variable-3">int&nbsp;<span class="cm-variable">memoryId,&nbsp;<span class="cm-meta">@UserMessage&nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">userMessage);</span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">由于要用到流式模型，需要增加流式模型配置：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-atom">langchain4j<span class="cm-meta">:<br><span><span class="cm-atom">community<span class="cm-meta">:<br><span><span class="cm-atom">&nbsp; dashscope<span class="cm-meta">:<br><span><span class="cm-atom">&nbsp; &nbsp; streaming-chat-model<span class="cm-meta">:<br><span><span class="cm-atom">&nbsp; &nbsp; &nbsp; model-name<span class="cm-meta">:&nbsp;qwen-max<br><span><span class="cm-atom">&nbsp; &nbsp; &nbsp; api-key<span class="cm-meta">:&nbsp;&lt;Your Api Key&gt;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">构造 AI Service 时指定流式对话模型（自动注入即可），并且补充会话记忆提供者：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-meta">@Resource<br><span><span class="cm-keyword">private&nbsp;<span class="cm-variable">StreamingChatModel&nbsp;<span class="cm-variable">qwenStreamingChatModel;<br><span><span>​<br><span><span class="cm-variable">AiCodeHelperService&nbsp;<span class="cm-variable">aiCodeHelperService&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">AiServices.<span class="cm-variable">builder(<span class="cm-variable">AiCodeHelperService.<span class="cm-keyword">class)<br><span>&nbsp; &nbsp; &nbsp; .<span class="cm-variable">chatModel(<span class="cm-variable">myQwenChatModel)<br><span>&nbsp; &nbsp; &nbsp; .<span class="cm-variable">streamingChatModel(<span class="cm-variable">qwenStreamingChatModel)<br><span>&nbsp; &nbsp; &nbsp; .<span class="cm-variable">chatMemory(<span class="cm-variable">chatMemory)<br><span>&nbsp; &nbsp; &nbsp; .<span class="cm-variable">chatMemoryProvider(<span class="cm-variable">memoryId&nbsp;<span class="cm-operator">-&gt;<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">MessageWindowChatMemory.<span class="cm-variable">withMaxMessages(<span class="cm-number">10))&nbsp;<span class="cm-comment">// 每个会话独立存储<br><span>&nbsp; &nbsp; &nbsp; .<span class="cm-variable">contentRetriever(<span class="cm-variable">contentRetriever)&nbsp;<span class="cm-comment">// RAG 检索增强生成<br><span>&nbsp; &nbsp; &nbsp; .<span class="cm-variable">tools(<span class="cm-keyword">new&nbsp;<span class="cm-variable">InterviewQuestionTool())&nbsp;<span class="cm-comment">// 工具调用<br><span>&nbsp; &nbsp; &nbsp; .<span class="cm-variable">toolProvider(<span class="cm-variable">mcpToolProvider)&nbsp;<span class="cm-comment">// MCP 工具调用<br><span>&nbsp; &nbsp; &nbsp; .<span class="cm-variable">build();</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">最后，编写 Controller 接口。为了方便测试，这里使用 Get 请求：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-meta">@RestController<br><span><span class="cm-meta">@RequestMapping(<span class="cm-string">"/ai")<br><span><span class="cm-keyword">public&nbsp;<span class="cm-keyword">class&nbsp;<span class="cm-def">AiController&nbsp;{<br><span><span>​<br><span>&nbsp; &nbsp;<span class="cm-meta">@Resource<br><span>&nbsp; &nbsp;<span class="cm-keyword">private&nbsp;<span class="cm-variable">AiCodeHelperService&nbsp;<span class="cm-variable">aiCodeHelperService;<br><span><span>​<br><span>&nbsp; &nbsp;<span class="cm-meta">@GetMapping(<span class="cm-string">"/chat")<br><span>&nbsp; &nbsp;<span class="cm-keyword">public&nbsp;<span class="cm-variable">Flux<span class="cm-operator">&lt;<span class="cm-variable">ServerSentEvent<span class="cm-operator">&lt;<span class="cm-variable-3">String<span class="cm-operator">&gt;&gt;&nbsp;<span class="cm-variable">chat(<span class="cm-variable-3">int&nbsp;<span class="cm-variable">memoryId,&nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">message) {<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">return&nbsp;<span class="cm-variable">aiCodeHelperService.<span class="cm-variable">chatStream(<span class="cm-variable">memoryId,&nbsp;<span class="cm-variable">message)<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">map(<span class="cm-variable">chunk&nbsp;<span class="cm-operator">-&gt;&nbsp;<span class="cm-variable">ServerSentEvent.<span class="cm-operator">&lt;<span class="cm-variable-3">String<span class="cm-operator">&gt;<span class="cm-variable">builder()<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">data(<span class="cm-variable">chunk)<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">build());<br><span>&nbsp; }<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">增加服务器配置，指定后端端口和接口路径前缀：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-atom">server<span class="cm-meta">:<br><span><span class="cm-atom">port<span class="cm-meta">:&nbsp;<span class="cm-number">8081<br><span><span class="cm-atom">servlet<span class="cm-meta">:<br><span><span class="cm-atom">&nbsp; context-path<span class="cm-meta">:&nbsp;/api</span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">启动服务器，用 CURL 工具测试调用：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-builtin">curl&nbsp;<span class="cm-attribute">-G&nbsp;<span class="cm-string">'http://localhost:8081/api/ai/chat'&nbsp;\<br><span>&nbsp;<span class="cm-attribute">--data-urlencode&nbsp;<span class="cm-string">'message=我是程序员鱼皮'&nbsp;\<br><span>&nbsp;<span class="cm-attribute">--data-urlencode&nbsp;<span class="cm-string">'memoryId=1'</span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">可以看到流式的输出结果：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1751975773168-c4ddd770-abd7-4555-90b6-8d487630aee4.png"><img data-src="https://pic.yupi.icu/1/1751975773168-c4ddd770-abd7-4555-90b6-8d487630aee4.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h4 class="md-end-block md-heading"><span class="md-plain">后端支持跨域</span></h4>
<p class="md-end-block md-p"><span class="md-plain">为了让前端项目能够顺利调用后端接口，我们需要在后端配置跨域支持。在 config 包下创建跨域配置类，代码如下：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-comment">/**<br><span><span class="cm-comment">* 全局跨域配置<br><span><span class="cm-comment">*/<br><span><span class="cm-meta">@Configuration<br><span><span class="cm-keyword">public&nbsp;<span class="cm-keyword">class&nbsp;<span class="cm-def">CorsConfig&nbsp;<span class="cm-keyword">implements&nbsp;<span class="cm-variable">WebMvcConfigurer&nbsp;{<br><span><span>​<br><span>&nbsp; &nbsp;<span class="cm-meta">@Override<br><span>&nbsp; &nbsp;<span class="cm-keyword">public&nbsp;<span class="cm-variable-3">void&nbsp;<span class="cm-variable">addCorsMappings(<span class="cm-variable">CorsRegistry&nbsp;<span class="cm-variable">registry) {<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">// 覆盖所有请求<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">registry.<span class="cm-variable">addMapping(<span class="cm-string">"/**")<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">// 允许发送 Cookie<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">allowCredentials(<span class="cm-atom">true)<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">// 放行哪些域名（必须用 patterns，否则 * 会和 allowCredentials 冲突）<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">allowedOriginPatterns(<span class="cm-string">"*")<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">allowedMethods(<span class="cm-string">"GET",&nbsp;<span class="cm-string">"POST",&nbsp;<span class="cm-string">"PUT",&nbsp;<span class="cm-string">"DELETE",&nbsp;<span class="cm-string">"OPTIONS")<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">allowedHeaders(<span class="cm-string">"*")<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">exposedHeaders(<span class="cm-string">"*");<br><span>&nbsp; }<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">注意，如果 <span class="md-pair-s"><code>.allowedOrigins("*")</code><span class="md-plain"> 与 <span class="md-pair-s"><code>.allowCredentials(true)</code><span class="md-plain"> 同时配置会导致冲突，因为出于安全考虑，跨域请求不能同时允许所有域名访问和发送认证信息（比如 Cookie）。</span></span></span></span></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h2 class="md-end-block md-heading"><span class="md-plain">AI 生成前端</span></h2>
<p class="md-end-block md-p"><span class="md-plain">由于这个项目不需要很复杂的页面，我们可以利用 AI 来快速生成前端代码，极大提高开发效率。这里鱼皮使用 <span class="md-meta-i-c  md-link"><a href="https://www.cursor.com/" rel="noopener nofollow"><span class="md-plain">主流 AI 开发工具 Cursor</span></a><span class="md-plain">，挑战不写一行代码，生成符合要求的前端项目。</span></span></span></p>
<h3 class="md-end-block md-heading"><span class="md-plain">提示词</span></h3>
<p class="md-end-block md-p"><span class="md-plain">首先准备一段详细的 Prompt，一般要包括需求、技术选型、后端接口信息，还可以提供一些原型图、后端代码等。</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>你是一位专业的前端开发，请帮我根据下列信息来生成对应的前端项目代码。<br><span><span>​<br><span><span class=" cm-header cm-header2">## 需求<br><span><span>​<br><span>应用为《AI 编程小助手》，帮助用户解答编程学习和求职面试相关的问题，并给出建议。<br><span><span>​<br><span>只有一个页面，就是主页：页面风格为聊天室，上方是聊天记录（用户信息在右边，AI 信息在左边），下方是输入框，进入页面后自动生成一个聊天室 id，用于区分不同的会话。通过 SSE 的方式调用 chat 接口，实时显示对话内容。<br><span><span>​<br><span><span class=" cm-header cm-header2">## 技术选型<br><span><span>​<br><span><span class="cm-block-start cm-variable-2">1.&nbsp;<span class="cm-variable-2">Vue3 项目<br><span><span class="cm-block-start cm-variable-2">2.&nbsp;<span class="cm-variable-2">Axios 请求库<br><span><span>​<br><span><span class=" cm-header cm-header2">## 后端接口信息<br><span><span>​<br><span>接口地址前缀：http://localhost:8081/api<br><span><span>​<br><span><span class=" cm-header cm-header2">## SpringBoot 后端接口代码<br><span><span>​<br><span>@RestController<br><span>@RequestMapping("/ai")<br><span>public class AiController {<br><span><span>​<br><span>&nbsp; &nbsp;<span class="cm-comment">@GetMapping("/chat")<br><span>&nbsp; &nbsp;<span class="cm-comment">public Flux&lt;ServerSentEvent&lt;String&gt;&gt; chat(int memoryId, String message) {<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">return aiCodeHelperService.chatStream(memoryId, message)<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">.map(chunk -&gt; ServerSentEvent.&lt;String&gt;builder()<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">.data(chunk)<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">.build());<br><span>&nbsp; &nbsp;<span class="cm-comment">}<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">注意，如果使用的是 Windows 系统，最好在 prompt 中补充“你应该使用 Windows 支持的命令来完成任务”。</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">开发</span></h3>
<p class="md-end-block md-p"><span class="md-plain">在项目根目录下创建新的前端项目文件夹 <span class="md-pair-s"><code>ai-code-helper-frontend</code><span class="md-plain">，使用 Cursor 工具打开该目录，输入 Prompt 执行。注意要选择 Agent 模式、Thinking 深度思考模型（推荐 Claude）：</span></span></span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1751976145149-beefc903-31e1-4a4f-8bbe-edf41a3a4806.png"><img data-src="https://pic.yupi.icu/1/1751976145149-beefc903-31e1-4a4f-8bbe-edf41a3a4806.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">除了源代码外，鱼皮这里连项目介绍文档 <span class="md-pair-s"><code>README.md</code><span class="md-plain"> 都生成了，确实很爽！</span></span></span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1752025773338-e87a94c7-db0b-4213-9cc8-f643b14f5182.png"><img data-src="https://pic.yupi.icu/1/1752025773338-e87a94c7-db0b-4213-9cc8-f643b14f5182.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">生成完代码后，打开终端执行 <span class="md-pair-s"><code>npm run dev</code><span class="md-plain"> 命令，或者打开 <span class="md-pair-s"><code>package.json</code><span class="md-plain"> 文件并利用 Debug 按钮启动项目：</span></span></span></span></span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1752026474929-cd4a7225-1e48-4e95-a08e-6f69ea256d45.png"><img data-src="https://pic.yupi.icu/1/1752026474929-cd4a7225-1e48-4e95-a08e-6f69ea256d45.png" class="lazyload"></span></p>
<h3 class="md-end-block md-heading"><span class="md-plain">查看效果</span></h3>
<p class="md-end-block md-p"><span class="md-plain">运行前端项目后，首先验证功能是否正常，再验证样式。如果发现功能不可用（比如发送消息后没有回复），可以按 F12 打开浏览器控制台查看前端错误信息、或者看后端项目控制台的错误信息，具体报错信息具体分析。这块就会涉及到一些前端相关的知识了，不懂前端的同学尽量多问 AI，让它帮忙修复 Bug 就好。<span class="md-pair-s "><strong>如果实在搞不定，也别瞎折腾了！</strong><span class="md-plain">用鱼皮的代码就好。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">比如我遇到了连接后端 SSE 服务报错的问题，直接复制报错信息给 AI 解决：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1752025968566-ab2c2d53-59e4-4519-bf55-e07b095f1e5d.png"><img data-src="https://pic.yupi.icu/1/1752025968566-ab2c2d53-59e4-4519-bf55-e07b095f1e5d.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">成功运行，查看效果：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1752026740589-5b4670c8-3f5c-470e-afba-4cfd469c31ee.png"><img data-src="https://pic.yupi.icu/1/1752026740589-5b4670c8-3f5c-470e-afba-4cfd469c31ee.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1752026767000-6599f85f-5926-4174-a06e-55e30e4df667.png"><img data-src="https://pic.yupi.icu/1/1752026767000-6599f85f-5926-4174-a06e-55e30e4df667.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">确保功能和样式没问题后，记得先提交代码（防止后续被 AI 生成的代码污染），然后你可以按需增加更多功能，比如用 Markdown 展示 AI 的回复消息。</span></p>
<p class="md-end-block md-p"><span class="md-plain"><img alt="" data-src="https://img2024.cnblogs.com/blog/2225420/202507/2225420-20250711112906792-2140324357.png" class="lazyload"></span></p>
<p>&nbsp;</p>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/2225420/202507/2225420-20250711112643227-1342003340.png" class="lazyload"></p>
<h2 class="md-end-block md-heading"><span class="md-plain">总结</span></h2>
<p class="md-end-block md-p"><span class="md-plain">OK，以上就是 LangChain4j 实战项目教程，怎么样，大家学会了还是学废了？</span></p>
<p class="md-end-block md-p"><span class="md-plain">回到开头的那个问题：<span class="md-pair-s "><strong>实际开发中应该如何选择 AI 开发框架呢？</strong></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">就拿 Spring AI 和 LangChain4j 来说，不知道大家更喜欢哪个框架？我其实会更喜欢 Spring AI 的开发模式，而且 Spring AI 目前支持的能力更多，还有国内 Spring AI Alibaba 的巨头加持，生态更好，遇到问题更容易解决；LangChain4j 的优势在于可以独立于 Spring 项目使用，更自由灵活一些。</span></p>
<p class="md-end-block md-p"><span class="md-plain">不过这类框架大家重点学习一个就好了，很多概念和用法是相通的：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1752050425995-3b2b8cf4-ad48-41ec-a1e5-154ae6cd8526.png"><img data-src="https://pic.yupi.icu/1/1752050425995-3b2b8cf4-ad48-41ec-a1e5-154ae6cd8526.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">最后友情提示，今天的这个小项目只是为我即将在 <span class="md-meta-i-c  md-link"><a href="https://codefather.cn/" rel="noopener nofollow"><span class="md-plain">编程导航</span></a><span class="md-plain"> 带大家做的 AI 新项目打个基础，期待的话多多为我点赞吧~</span></span></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h2 class="md-end-block md-heading"><span class="md-plain">更多编程学习资源</span></h2>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/course" rel="noopener nofollow"><span class="md-plain">Java前端程序员必做项目实战教程+毕设网站</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/" rel="noopener nofollow"><span class="md-plain">程序员免费编程学习交流社区（自学必备）</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/course/cv" rel="noopener nofollow"><span class="md-plain">程序员保姆级求职写简历指南（找工作必备）</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.mianshiya.com/" rel="noopener nofollow"><span class="md-plain">程序员免费面试刷题网站工具（找工作必备）</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1640584449888772098" rel="noopener nofollow"><span class="md-plain">最新Java零基础入门学习路线 + Java教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1640586673306091521" rel="noopener nofollow"><span class="md-plain">最新Python零基础入门学习路线 + Python教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1640586014108303362" rel="noopener nofollow"><span class="md-plain">最新前端零基础入门学习路线 + 前端教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1640586867363954689" rel="noopener nofollow"><span class="md-plain">最新数据结构和算法零基础入门学习路线 + 算法教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1644279832026075138" rel="noopener nofollow"><span class="md-plain">最新C++零基础入门学习路线、C++教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1641797333479903234" rel="noopener nofollow"><span class="md-plain">最新数据库零基础入门学习路线 + 数据库教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1640589994284695553" rel="noopener nofollow"><span class="md-plain">最新Redis零基础入门学习路线 + Redis教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1641035880439271426" rel="noopener nofollow"><span class="md-plain">最新计算机基础入门学习路线 + 计算机基础教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1641366118197153793" rel="noopener nofollow"><span class="md-plain">最新小程序入门学习路线 + 小程序开发教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="http://sqlmother.yupi.icu/" rel="noopener nofollow"><span class="md-plain">最新SQL零基础入门学习路线 + SQL教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1640586295529324545" rel="noopener nofollow"><span class="md-plain">最新Linux零基础入门学习路线 + Linux教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1640588753362108417" rel="noopener nofollow"><span class="md-plain">最新Git/GitHub零基础入门学习路线 + Git教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1640587909942099969" rel="noopener nofollow"><span class="md-plain">最新操作系统零基础入门学习路线 + 操作系统教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1640588119619551233" rel="noopener nofollow"><span class="md-plain">最新计算机网络零基础入门学习路线 + 计算机网络教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1640588392073150465" rel="noopener nofollow"><span class="md-plain">最新设计模式零基础入门学习路线 + 设计模式教程</span></a></span></p>
</li>
<li class="md-list-item md-focus-container">
<p class="md-end-block md-p md-focus"><span class="md-meta-i-c md-link md-expand"><a href="https://www.code-nav.cn/post/1640648711119892481" rel="noopener nofollow"><span class="md-plain">最新软件工程零基础入门学习路线 + 软件工程教程</span></a></span></p>
</li>
</ul>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-07-11 11:52">2025-07-11 11:52</span>&nbsp;
<a href="https://www.cnblogs.com/yupi">程序员鱼皮</a>&nbsp;
阅读(<span id="post_view_count">251</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18978536);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18978536', targetLink: 'https://www.cnblogs.com/yupi/p/18978536', title: 'Java开发AI项目，太爽了！LangChain4j保姆级教程' })">举报</a>
</div>
        