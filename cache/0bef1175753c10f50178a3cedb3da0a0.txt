
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/hunterxiong/p/18939332" title="发布于 2025-06-20 22:06">
    <span role="heading" aria-level="2">Golang基础笔记二之字符串及其操作</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<blockquote>
<p>本文首发于公众号：Hunter后端</p>
<p>原文链接：<a href="https://mp.weixin.qq.com/s/TXlFOaEEcicX0Ja8PgTjGg" target="_blank" rel="noopener nofollow">Golang基础笔记二之字符串及其操作</a></p>
</blockquote>
<p>这一篇笔记主要介绍 Golang 字符串相关处理，以下是本篇笔记目录：</p>
<ol>
<li>字符串的定义和初始化</li>
<li>字符</li>
<li>字符串操作</li>
</ol>
<h3 id="1字符串的定义和初始化">1、字符串的定义和初始化</h3>
<p>在 Go 里，我们可以使用双引号和反引号来对定义字符串。</p>
<h4 id="1-双引号">1. 双引号</h4>
<p>双引号用于创建解释型字符串字面量，这种字符串是支持转义字符的，比如我们在字符串中夹带换行符 <code>\n</code>，这样在输出的时候，会自动进行换行：</p>
<pre><code class="language-go">    s := "this is a test\nthis is another test"
    fmt.Print(s)
    // this is a test
    // this is another test
</code></pre>
<h4 id="2-反引号">2. 反引号</h4>
<p>反引号用于创建原生字符串字面量，这种字符串中，所有字符都会按原样输出，转移字符不会被解释：</p>
<pre><code class="language-go">    s := `this is a test\nthis is another test`
    fmt.Print(s)
    // this is a test\nthis is another test
</code></pre>
<h3 id="2字符">2、字符</h3>
<p>字符串是由一个个字符组合而成的，前面介绍过，Go 里字符有两种类型 byte 和 rune，但他们实际上分别是 uint8 和 int32 的别名，分别用于表示 ASCII 字符和 Unicode 字符。</p>
<p>每一个 byte 字符用一个字节（8位）来表示，每一个 rune 字符用 1-4 个字节来表示，如果我们想统计一个字符串的长度，首先需要判断我们是想统计其字节长度，还是字符长度。</p>
<p>因为对于一个字符串来说，如果字符串中包含了类似中文这种一个字符包含多个字节的字符，其字节长度和字符长度是不一样的，比如对于下面的字符串：</p>
<pre><code class="language-go">s := "hello世界"
</code></pre>
<p>对于前面的 <code>hello</code> 来说，一个字符就包含一个字节，所以它的字符长度是 5，字节长度也是 5。</p>
<p>而对于后面的 <code>世界</code> 来说，一个字符包含三个字节，所以它的字符长度是 2，但是字节长度是 2 * 3 = 6。</p>
<p>所以这个字符串的字节长度和字符串长度分别如下：</p>
<pre><code class="language-go">	s := "hello世界"
	fmt.Println("s 的字节长度为：", len(s))  // 11
	fmt.Println("s 的字符串长度为：", len([]rune(s)))  // 7
</code></pre>
<p>在统计字符串长度的时候，我们先将其转为了 rune 类型的切片，然后再统计的其长度。</p>
<h3 id="3字符串操作">3、字符串操作</h3>
<h4 id="1-字符串拼接">1. 字符串拼接</h4>
<p>字符串的拼接可以用两种方式，一种是使用 <code>+</code>，一种是使用 <code>strings.Builder</code></p>
<h5 id="1-运算符">1) +运算符</h5>
<pre><code class="language-go">    s1 := "hello"
    s2 := " world"

    s3 := s1 + s2
    fmt.Println(s3)
</code></pre>
<h5 id="2-stringsbuilder">2) strings.Builder</h5>
<pre><code class="language-go">import (
    "strings"
    "fmt"
)

func main() {
    var builder strings.Builder
    builder.WriteString("hello")
    builder.WriteString(" world")
    s := builder.String()
    fmt.Println(s)
}

</code></pre>
<p>+运算符和 strings.Builder 都可以用于拼接字符串，但是在 Go 语言里，字符串属于不可变类型，每次使用 + 运算符拼接字符串时，都会创建一个新的字符串对象。</p>
<p>如果频繁拼接大量字符串，会产生大量的内存分配和数据复制操作，导致性能较低。</p>
<p>strings.Builder 内部维护了一个字节切片，在拼接字符串时，会先将字符串追加到这个字节切片中，最后再将字节切片转换为字符串。这样可以减少内存分配和数据复制的次数，性能更高。</p>
<h4 id="2-字符串的访问">2. 字符串的访问</h4>
<p>如果想访问字符串中的单个字符，可以使用下标来操作：</p>
<pre><code class="language-go">    s := "hello"
    fmt.Println(s[4]) // 111
</code></pre>
<p>我们可以对其进行格式化，使用 %c 来打印：</p>
<pre><code class="language-go">fmt.Printf("%c\n", s[4]) // o
</code></pre>
<p>前面介绍字符串长度的时候，字符串是由字符组成的，但是因为这里测试字符串是全英文的，所以访问到的这个字符就是它的字节内容。</p>
<p>如果字符串包含中文，使用 len() 函数获取到的长度实际上是它的字节长度。</p>
<p>比如下面这个例子，我们访问到的就是字符串对应下标的字节内容，而不是对应的字符了：</p>
<pre><code class="language-go">    s := "hello世界"
    fmt.Println(s[5])  // 228
    fmt.Printf("%c\n", s[5]) // ä
</code></pre>
<p>若要按字符访问带中文的字符串，可以将字符串转换为 []rune 类型，因为 rune 类型可以表示一个 Unicode 字符：</p>
<pre><code class="language-go">    s := "hello世界"
    fmt.Printf("%c\n", []rune(s)[5])  // 世
    fmt.Printf("%c\n", []rune(s)[6])  // 界
</code></pre>
<h5 id="遍历访问字符串">遍历访问字符串</h5>
<p>如果要遍历访问字符串，可以按照前面的操作先将其转为 rune 切片，然后再遍历访问 rune 切片：</p>
<pre><code class="language-go">    s := "hello世界"

    runes := []rune(s)
    for _, c := range runes {
        fmt.Printf("%c\n", c)
    }
</code></pre>
<p>还可以使用 for...range 循环，它可以按字符迭代字符串，会自动处理 UTF-8 编码的多字节字符：</p>
<pre><code class="language-go">    s := "hello世界"

    for _, char := range s {
        fmt.Printf("%c\n", char)
    }
</code></pre>
<h4 id="3-字符串查找">3. 字符串查找</h4>
<p>我们可以引入 <code>strings</code> 模块使用 <code>strings.Index()</code> 来查找指定字符串，返回的是该字符串的字节索引，如果没有找到，则返回 -1。</p>
<pre><code class="language-go">&nbsp; &nbsp; s := "hello世界"
&nbsp; &nbsp; index := strings.Index(s, "界")
&nbsp; &nbsp; fmt.Println(index) // 8
&nbsp; &nbsp; index2 := strings.Index(s, "好")
&nbsp; &nbsp; fmt.Println(index2) // -1
</code></pre>
<h4 id="4-字符串替换">4. 字符串替换</h4>
<p>我们可以使用 <code>strings.Replace()</code> 来替换字符串。</p>
<pre><code class="language-go">&nbsp; &nbsp; str := "hello世界"
&nbsp; &nbsp; s2 := strings.Replace(str, "l", "x", 1)
&nbsp; &nbsp; fmt.Println(s2)
</code></pre>
<p>在上面的操作中，表示将字符串 <code>str</code> 中的 <code>l</code> 字符串替换为 <code>x</code>，并且只替换第一个 <code>l</code>。</p>
<p>如果需要替换多个，则可以将后面的数字 1 改成指定个数。</p>
<p>如果想要将字符串中指定字符串全部替换，可以将最后一个参数设置为 -1。</p>
<p>也可以使用 <code>strings.ReplaceAll()</code> 来替换字符串：</p>
<pre><code class="language-go">&nbsp; &nbsp; str := "hello世界"
&nbsp; &nbsp; s2 := strings.Replace(str, "l", "x", -1)
&nbsp; &nbsp; fmt.Println(s2)
&nbsp; &nbsp; s3 := strings.ReplaceAll(str, "l", "x")
&nbsp; &nbsp; fmt.Println(s3)
</code></pre>
<h4 id="5-字符串分割">5. 字符串分割</h4>
<p>我们可以使用 <code>strings.Split()</code> 来进行字符串分割：</p>
<pre><code class="language-go">&nbsp; &nbsp; s := "hello,世界,我来了"
&nbsp; &nbsp; parts := strings.Split(s, ",")
&nbsp; &nbsp; fmt.Println(parts)
</code></pre>
<p>返回的 <code>parts</code> 就是一个字符串切片。</p>
<p>还可以使用 <code>strings.SplitN()</code> 对其进行指定长度的切割，比如只需要将其切割成两部分：</p>
<pre><code class="language-go">&nbsp; &nbsp; s := "hello,world"
&nbsp; &nbsp; parts := strings.SplitN(s, "o", 2)
&nbsp; &nbsp; fmt.Println(parts, len(parts)) // [hell ,world] 2
</code></pre>
<p>注意：这里的参数 2 指的是最终切割后生成的切片长度，如果 n 超过字符串可以切割的长度，则会根据指定字符串其全部切割并返回结果。</p>
<p>所以如果 n 参数为 1，则不会切割，返回原始结果，如果 n 参数为 0，则会返回 nil，如果 n 是负数，则会全部切割。</p>
<h4 id="6-字符串是否以字符串开头或结尾">6. 字符串是否以字符串开头或结尾</h4>
<p>strings.HasPrefix() 表示是否是以某字符串开头，返回 bool 型结果。</p>
<p>strings.HasSuffix() 表示是否是以某字符串结尾，返回 bool 型结果。</p>
<pre><code class="language-go">&nbsp; &nbsp; s := "世界hello,world"
&nbsp; &nbsp; result := strings.HasPrefix(s, "世界")
&nbsp; &nbsp; fmt.Println(result)
&nbsp; &nbsp; result2 := strings.HasSuffix(s, "world")
&nbsp; &nbsp; fmt.Println(result2)
</code></pre>
<h4 id="7-是否包含某字符串">7. 是否包含某字符串</h4>
<p>strings.Contains() 用于判断字符串是否包含某个特定字符串，返回结果为布尔型。</p>
<pre><code class="language-go">    s := "hello, world"
    isContain := strings.Contains(s, "world")
    fmt.Println(isContain)
</code></pre>
<h4 id="8-字符串统计包含子字符串个数">8. 字符串统计包含子字符串个数</h4>
<p>strings.Count() 用于统计字符串中包含某个特定字符串的个数。</p>
<pre><code class="language-go">    s := "hello, world"
    l_count := strings.Count(s, "l")
    fmt.Println(l_count)
</code></pre>
<h4 id="9-转大小写">9. 转大小写</h4>
<p>strings.ToUpper() 表示将字符串转为大写</p>
<p>strings.ToLower() 表示将字符串转为小写</p>
<pre><code class="language-go">    s := "hello, world"
    upperS := strings.ToUpper(s)
    fmt.Println(upperS)

    lowerS := strings.ToLower(s)
    fmt.Println(lowerS)
</code></pre>
<h4 id="10-去除首尾指定字符串">10. 去除首尾指定字符串</h4>
<p>strings.Trim() 去除字符串左右两边指定的字符串</p>
<p>strings.TrimLeft() 去除字符串左边指定的字符串</p>
<p>strings.TrimRight() 去除字符串右边指定的字符串</p>
<pre><code class="language-go">    s := "ihello, worldi"
    result := strings.Trim(s, "i")
    fmt.Println(result)  // hello, world

    result = strings.TrimLeft(s, "i")
    fmt.Println(result)  // hello, worldi

    result = strings.TrimRight(s, "i")
    fmt.Println(result)  // ihello, world
</code></pre>
<p>如果想获取更多相关文章，可扫码关注阅读：<br>
<img alt="image" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1298097/202506/1298097-20250620220551145-437666564.png" class="lazyload"></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-06-20 22:06">2025-06-20 22:06</span>&nbsp;
<a href="https://www.cnblogs.com/hunterxiong">XHunter</a>&nbsp;
阅读(<span id="post_view_count">39</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18939332);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18939332', targetLink: 'https://www.cnblogs.com/hunterxiong/p/18939332', title: 'Golang基础笔记二之字符串及其操作' })">举报</a>
</div>
        