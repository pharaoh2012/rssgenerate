<!----> <meta itemprop="headline" content="老板不让用ECharts，还想让我画很多圆环！"> <meta itemprop="keywords" content="前端,JavaScript,Vue.js"> <meta itemprop="datePublished" content="2024-12-03T10:01:16.000Z"> <meta itemprop="image" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-128.png~tplv-t2oaga2asx-image.image"> <div itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><meta itemprop="name" content="快乐就是哈哈哈"> <meta itemprop="url" content="https://juejin.cn/user/275325542742747"></div> <div itemprop="publisher" itemscope="itemscope" itemtype="http://schema.org/Organization"><meta itemprop="name" content="掘金"> <div itemprop="logo" itemscope="itemscope" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-white-180.png~tplv-t2oaga2asx-image.image"> <meta itemprop="width" content="180"> <meta itemprop="height" content="180"></div></div> <h1 class="article-title" data-v-7cdd11fb="">
            老板不让用ECharts，还想让我画很多圆环！
            <!----> <!----></h1> <div class="author-info-block block-hidden" data-v-7cdd11fb=""><div class="author-info-box" data-v-7cdd11fb=""><div class="author-name" data-v-7cdd11fb=""><a href="/user/275325542742747/posts" target="_blank" rel="" class="jj-link username username ellipsis" data-v-65b50b51="" data-v-1800aadb="" data-v-7cdd11fb=""><span class="name" style="max-width:160px;" data-v-65b50b51="" data-v-1800aadb="">
    快乐就是哈哈哈
  </span> <!----> <!----> <!----> </a></div> <div class="meta-box" data-v-7cdd11fb=""><time datetime="2024-12-03T10:01:16.000Z" title="Tue Dec 03 2024 10:01:16 GMT+0000 (Coordinated Universal Time)" class="time" data-v-7cdd11fb="">
                    2024-12-03
                  </time> <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" class="read-icon" data-v-7cdd11fb=""><path d="M7.90078 2.80078C4.49278 2.80078 1.74745 6.11672 0.800781 7.77469C1.74745 9.58339 4.49278 13.2008 7.90078 13.2008C11.3088 13.2008 14.0541 9.58339 15.0008 7.77469C14.0541 6.11672 11.3088 2.80078 7.90078 2.80078Z" stroke="currentColor" data-v-7cdd11fb=""></path><circle cx="7.89922" cy="8.00078" r="2.2" stroke="currentColor" data-v-7cdd11fb=""></circle></svg> <span class="views-count" data-v-7cdd11fb="">
                    7,339
                  </span> <span class="read-time" data-v-7cdd11fb=""><svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" data-v-7cdd11fb=""><rect width="16" height="16" fill="none" data-v-7cdd11fb=""></rect><circle cx="8" cy="8" r="5.65625" stroke="#8A919F" data-v-7cdd11fb=""></circle><path d="M7.69141 5.18652V8.30924H10.8141" stroke="#8A919F" stroke-linecap="round" stroke-linejoin="round" data-v-7cdd11fb=""></path></svg>
                    阅读5分钟
                  </span> <!----></div></div> <div style="flex:1;" data-v-7cdd11fb=""></div> <!----> <!----></div> <!----> <!----> <!----> <div id="article-root" itemprop="articleBody" class="main" data-v-7cdd11fb=""><div class="article-viewer markdown-body result"><h2 data-id="heading-0">需求简介</h2>
<p>这几天下来个新需求：<strong>要在页面上动态渲染多个表格，每个表格内还要实现若干圆环！</strong></p>
<p><img src="https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/f924532901e248498aa0c23903fa5200~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5b-r5LmQ5bCx5piv5ZOI5ZOI5ZOI:q75.awebp?rk3s=f64ab15b&amp;x-expires=1736835299&amp;x-signature=XiX1N0a0Mj6vvBqy1duIVzfu6HM%3D" alt="" loading="lazy"></p>
<p>刚拿到这个需求的时候，我第一反应是用<code>echarts</code>实现，简单快捷</p>
<p><img src="https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/ffc856612b0b4bc58073141974fe3686~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5b-r5LmQ5bCx5piv5ZOI5ZOI5ZOI:q75.awebp?rk3s=f64ab15b&amp;x-expires=1736835299&amp;x-signature=VA7sH93DMsQyCqwNwnrroPvZamE%3D" alt="" loading="lazy"></p>
<p>然而，老板无情的拒绝了我！他说：</p>
<blockquote>
<p><em>咱这个项目就一个独立页面，你引入个ECharts项目又要大很多！而且一个页面这么多ECharts实例，性能怎么保障？不准用ECharts，用CSS实现！</em></p>
</blockquote>
<p>没办法，我只好百度如何用CSS画圆环。幸运的是，我确实找到了类似的文章：</p>
<p><img src="https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/d2387ef24e854a889bd8d4cb98b68959~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5b-r5LmQ5bCx5piv5ZOI5ZOI5ZOI:q75.awebp?rk3s=f64ab15b&amp;x-expires=1736835299&amp;x-signature=OaIuounSsk2%2FtK7AliC1YeSuOyA%3D" alt="" loading="lazy"></p>
<p><strong>不幸的事</strong>，效果和我的差异很大，代码根本 无法复用！没办法，只能用别的办法实现了。经过一番研究，最终借助<strong>Canvas</strong>搞出来了，简单的分享一下我的实现思路吧。</p>
<h2 data-id="heading-1">圆环组件简介</h2>
<p>为了方便复用，我把这个功能封装成了项目可直接复用的组件。并支持自定义圆环大小、圆环宽度和圆环颜色比例配置属性。</p>
<pre><code class="hljs language-js" lang="js">&lt;<span class="hljs-title class_">Ring</span>
    :storkWidth=<span class="hljs-string">"5"</span>
    :size=<span class="hljs-string">"60"</span>
    :ratioList=<span class="hljs-string">"[
        { ratio: 0.3, color: '#FF5733' },
        { ratio: 0.6, color: '#33FF57' },
        { ratio: 0.1, color: '#3357FF' }
    ]"</span>
&gt;&lt;/<span class="hljs-title class_">Ring</span>&gt;
</code></pre>
<p><img src="https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/0759d48d833c4fda9bfc69978eb36b4a~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5b-r5LmQ5bCx5piv5ZOI5ZOI5ZOI:q75.awebp?rk3s=f64ab15b&amp;x-expires=1736835299&amp;x-signature=8qZQc2SrE5ydXWuY%2Bu5T8hHgufY%3D" alt="" loading="lazy"></p>
<h2 data-id="heading-2">技术方案</h2>
<h3 data-id="heading-3">实现目标</h3>
<p>根据我们的UX需求，我们需要实现一个简单的组件，该组件可以展示一个圆环图表，并根据外部传入的比例数据（如 <code>ratioList</code>）绘制不同颜色的环形区域。</p>
<ul>
<li>使用 Vue 3 和 TypeScript。</li>
<li>动态绘制环形图，根据传入的数据绘制多个环。</li>
<li>支持自定义环形图的大小和环宽。</li>
</ul>
<h3 data-id="heading-4">创建 Vue 组件框架</h3>
<p>首先，我们创建一个名为 <code>RingChart.vue</code>的组件。组件的初始结构非常简单，只包含一个 <code>canvas</code> 元素。</p>
<pre><code class="hljs language-js" lang="js">&lt;template&gt;
  &lt;!-- 创建一个 canvas 元素，用于绘制图表 --&gt;
  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">canvas</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"canvasDom"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span></span>
&lt;/template&gt;

<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"ts"</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript">
<span class="hljs-keyword">import</span> { ref, onMounted } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>;

<span class="hljs-comment">// 获取 canvas DOM 元素的引用</span>
<span class="hljs-keyword">const</span> canvasDom = ref&lt;<span class="hljs-title class_">HTMLCanvasElement</span> | <span class="hljs-literal">null</span>&gt;(<span class="hljs-literal">null</span>);

<span class="hljs-comment">// 初始化 canvas 和上下文变量</span>
<span class="hljs-keyword">let</span> <span class="hljs-attr">ctx</span>: <span class="hljs-title class_">CanvasRenderingContext2D</span> | <span class="hljs-literal">null</span> = <span class="hljs-literal">null</span>;
<span class="hljs-keyword">let</span> <span class="hljs-attr">width</span>: number, <span class="hljs-attr">height</span>: number;

<span class="hljs-comment">// 初始化 canvas 尺寸和绘图环境</span>
<span class="hljs-keyword">const</span> <span class="hljs-title function_">initCanvas</span> = (<span class="hljs-params"></span>) =&gt; {
  <span class="hljs-keyword">const</span> dom = canvasDom.<span class="hljs-property">value</span>;
  <span class="hljs-keyword">if</span> (!dom) <span class="hljs-keyword">return</span>;
  ctx = dom.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">'2d'</span>);
  <span class="hljs-keyword">if</span> (!ctx) <span class="hljs-keyword">return</span>;

  <span class="hljs-comment">// 设置 canvas 的宽高</span>
  dom.<span class="hljs-property">width</span> = dom.<span class="hljs-property">offsetWidth</span>;
  dom.<span class="hljs-property">height</span> = dom.<span class="hljs-property">offsetHeight</span>;
  width = dom.<span class="hljs-property">offsetWidth</span>;
  height = dom.<span class="hljs-property">offsetHeight</span>;
};

<span class="hljs-comment">// 在组件挂载后执行初始化</span>
<span class="hljs-title function_">onMounted</span>(<span class="hljs-function">() =&gt;</span> {
  <span class="hljs-title function_">initCanvas</span>();
});
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="css">
<span class="hljs-selector-tag">canvas</span> {
  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;
  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;
}
</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>
</span></code></pre>
<p>上述代码中，我们初始化了 <code>canvas</code> 元素，并且设定了 <code>width</code> 和 <code>height</code> 属性。</p>
<h3 data-id="heading-5">绘制基本的圆环</h3>
<p>接下来，我们添加<strong>绘制圆环</strong>的功能：通过 <code>arc</code> 方法来绘制圆环，设置 <code>lineWidth</code> 来调整环的宽度。</p>
<pre><code class="hljs language-js" lang="js">&lt;script lang=<span class="hljs-string">"ts"</span> setup&gt;
<span class="hljs-keyword">import</span> { ref, onMounted } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>;

<span class="hljs-comment">// 获取 canvas DOM 元素的引用</span>
<span class="hljs-keyword">const</span> canvasDom = ref&lt;<span class="hljs-title class_">HTMLCanvasElement</span> | <span class="hljs-literal">null</span>&gt;(<span class="hljs-literal">null</span>);

<span class="hljs-comment">// 初始化 canvas 和上下文变量</span>
<span class="hljs-keyword">let</span> <span class="hljs-attr">ctx</span>: <span class="hljs-title class_">CanvasRenderingContext2D</span> | <span class="hljs-literal">null</span> = <span class="hljs-literal">null</span>;
<span class="hljs-keyword">let</span> <span class="hljs-attr">width</span>: number, <span class="hljs-attr">height</span>: number;

<span class="hljs-comment">// 初始化 canvas 尺寸和绘图环境</span>
<span class="hljs-keyword">const</span> <span class="hljs-title function_">initCanvas</span> = (<span class="hljs-params"></span>) =&gt; {
  <span class="hljs-keyword">const</span> dom = canvasDom.<span class="hljs-property">value</span>;
  <span class="hljs-keyword">if</span> (!dom) <span class="hljs-keyword">return</span>;
  ctx = dom.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">'2d'</span>);
  <span class="hljs-keyword">if</span> (!ctx) <span class="hljs-keyword">return</span>;

  <span class="hljs-comment">// 设置 canvas 的宽高</span>
  dom.<span class="hljs-property">width</span> = dom.<span class="hljs-property">offsetWidth</span>;
  dom.<span class="hljs-property">height</span> = dom.<span class="hljs-property">offsetHeight</span>;
  width = dom.<span class="hljs-property">offsetWidth</span>;
  height = dom.<span class="hljs-property">offsetHeight</span>;

  <span class="hljs-comment">// 调用绘制圆环的方法</span>
  <span class="hljs-title function_">drawCircle</span>({
    ctx,
    <span class="hljs-attr">x</span>: width / <span class="hljs-number">2</span>,
    <span class="hljs-attr">y</span>: height / <span class="hljs-number">2</span>,
    <span class="hljs-attr">radius</span>: <span class="hljs-number">8</span>,
    <span class="hljs-attr">lineWidth</span>: <span class="hljs-number">4</span>,
    <span class="hljs-attr">color</span>: <span class="hljs-string">'#C4C9CF4D'</span>,
    <span class="hljs-attr">startAngle</span>: -<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> / <span class="hljs-number">2</span>,
    <span class="hljs-attr">endAngle</span>: <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * <span class="hljs-number">1.5</span>,
  });
};

<span class="hljs-comment">// 绘制一个圆环的方法</span>
<span class="hljs-keyword">const</span> <span class="hljs-title function_">drawCircle</span> = (<span class="hljs-params">{
  ctx,
  x,
  y,
  radius,
  lineWidth,
  color,
  startAngle,
  endAngle,
}: {
  ctx: CanvasRenderingContext2D;
  x: number;
  y: number;
  radius: number;
  lineWidth: number;
  color: string;
  startAngle: number;
  endAngle: number;
}</span>) =&gt; {
  ctx.<span class="hljs-title function_">beginPath</span>();
  ctx.<span class="hljs-title function_">arc</span>(x, y, radius, startAngle, endAngle);
  ctx.<span class="hljs-property">lineWidth</span> = lineWidth;
  ctx.<span class="hljs-property">strokeStyle</span> = color;
  ctx.<span class="hljs-title function_">stroke</span>();
  ctx.<span class="hljs-title function_">closePath</span>();
};

<span class="hljs-title function_">onMounted</span>(<span class="hljs-function">() =&gt;</span> {
  <span class="hljs-title function_">initCanvas</span>();
});
&lt;/script&gt;
</code></pre>
<ul>
<li><code>drawCircle</code> 函数是绘制圆环的核心。我们通过 <code>arc</code> 方法绘制圆形路径，使用 <code>lineWidth</code> 来调整环的宽度，并用 <code>strokeStyle</code> 给圆环上色。</li>
<li><code>startAngle</code> 和 <code>endAngle</code> 参数决定了圆环的起始和结束角度，通过改变它们可以控制环的覆盖区域。</li>
</ul>
<h3 data-id="heading-6">绘制多个环形区域</h3>
<p>现在，我们来实现绘制多个环形区域的功能。我们将通过传入一个 <code>ratioList</code> 数组来动态生成多个环，每个环代表不同的比例区域。</p>
<pre><code class="hljs language-js" lang="js">&lt;script lang=<span class="hljs-string">"ts"</span> setup&gt;
<span class="hljs-keyword">import</span> { ref, computed, onMounted } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>;

<span class="hljs-comment">// 定义 props 的类型</span>
interface <span class="hljs-title class_">RatioItem</span> {
  <span class="hljs-attr">ratio</span>: number;
  <span class="hljs-attr">color</span>: string;
}

<span class="hljs-keyword">const</span> props = defineProps&lt;{
  size?: number; <span class="hljs-comment">// 画布大小</span>
  storkWidth?: number; <span class="hljs-comment">// 环的宽度</span>
  ratioList?: <span class="hljs-title class_">RatioItem</span>[]; <span class="hljs-comment">// 比例列表</span>
}&gt;();

<span class="hljs-comment">// 默认值</span>
<span class="hljs-keyword">const</span> defaultSize = <span class="hljs-number">200</span>;
<span class="hljs-keyword">const</span> defaultStorkWidth = <span class="hljs-number">4</span>;
<span class="hljs-keyword">const</span> <span class="hljs-attr">defaultRatioList</span>: <span class="hljs-title class_">RatioItem</span>[] = [
  { <span class="hljs-attr">ratio</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">color</span>: <span class="hljs-string">'#C4C9CF4D'</span> },
];

<span class="hljs-comment">// canvas DOM 和上下文</span>
<span class="hljs-keyword">const</span> canvasDom = ref&lt;<span class="hljs-title class_">HTMLCanvasElement</span> | <span class="hljs-literal">null</span>&gt;(<span class="hljs-literal">null</span>);
<span class="hljs-keyword">let</span> <span class="hljs-attr">ctx</span>: <span class="hljs-title class_">CanvasRenderingContext2D</span> | <span class="hljs-literal">null</span> = <span class="hljs-literal">null</span>;

<span class="hljs-comment">// 动态计算 canvas 的中心点和半径</span>
<span class="hljs-keyword">const</span> size = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span> props.<span class="hljs-property">size</span> || defaultSize);
<span class="hljs-keyword">const</span> center = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span> ({
  <span class="hljs-attr">x</span>: size.<span class="hljs-property">value</span> / <span class="hljs-number">2</span>,
  <span class="hljs-attr">y</span>: size.<span class="hljs-property">value</span> / <span class="hljs-number">2</span>,
}));
<span class="hljs-keyword">const</span> radius = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span> size.<span class="hljs-property">value</span> / <span class="hljs-number">2</span> - (props.<span class="hljs-property">storkWidth</span> || defaultStorkWidth));

<span class="hljs-comment">// 初始化 canvas</span>
<span class="hljs-keyword">const</span> <span class="hljs-title function_">initCanvas</span> = (<span class="hljs-params"></span>) =&gt; {
  <span class="hljs-keyword">const</span> dom = canvasDom.<span class="hljs-property">value</span>;
  <span class="hljs-keyword">if</span> (!dom) <span class="hljs-keyword">return</span>;

  ctx = dom.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">'2d'</span>);
  <span class="hljs-keyword">if</span> (!ctx) <span class="hljs-keyword">return</span>;

  dom.<span class="hljs-property">width</span> = size.<span class="hljs-property">value</span>;
  dom.<span class="hljs-property">height</span> = size.<span class="hljs-property">value</span>;

  <span class="hljs-title function_">drawBackgroundCircle</span>();
  <span class="hljs-title function_">drawDataRings</span>();
};

<span class="hljs-comment">// 绘制背景圆环</span>
<span class="hljs-keyword">const</span> <span class="hljs-title function_">drawBackgroundCircle</span> = (<span class="hljs-params"></span>) =&gt; {
  <span class="hljs-keyword">if</span> (!ctx) <span class="hljs-keyword">return</span>;

  <span class="hljs-title function_">drawCircle</span>({
    ctx,
    <span class="hljs-attr">x</span>: center.<span class="hljs-property">value</span>.<span class="hljs-property">x</span>,
    <span class="hljs-attr">y</span>: center.<span class="hljs-property">value</span>.<span class="hljs-property">y</span>,
    <span class="hljs-attr">radius</span>: radius.<span class="hljs-property">value</span>,
    <span class="hljs-attr">lineWidth</span>: props.<span class="hljs-property">storkWidth</span> || defaultStorkWidth,
    <span class="hljs-attr">color</span>: <span class="hljs-string">'#C4C9CF4D'</span>,
    <span class="hljs-attr">startAngle</span>: -<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> / <span class="hljs-number">2</span>,
    <span class="hljs-attr">endAngle</span>: <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * <span class="hljs-number">1.5</span>,
  });
};

<span class="hljs-comment">// 绘制数据圆环</span>
<span class="hljs-keyword">const</span> <span class="hljs-title function_">drawDataRings</span> = (<span class="hljs-params"></span>) =&gt; {
  <span class="hljs-keyword">const</span> { ratioList = defaultRatioList } = props;
  <span class="hljs-keyword">if</span> (!ctx) <span class="hljs-keyword">return</span>;

  <span class="hljs-keyword">let</span> startAngle = -<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> / <span class="hljs-number">2</span>;
  ratioList.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">{ ratio, color }</span>) =&gt;</span> {
    <span class="hljs-keyword">const</span> endAngle = startAngle + ratio * <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * <span class="hljs-number">2</span>;

    <span class="hljs-title function_">drawCircle</span>({
      ctx,
      <span class="hljs-attr">x</span>: center.<span class="hljs-property">value</span>.<span class="hljs-property">x</span>,
      <span class="hljs-attr">y</span>: center.<span class="hljs-property">value</span>.<span class="hljs-property">y</span>,
      <span class="hljs-attr">radius</span>: radius.<span class="hljs-property">value</span>,
      <span class="hljs-attr">lineWidth</span>: props.<span class="hljs-property">storkWidth</span> || defaultStorkWidth,
      color,
      startAngle,
      endAngle,
    });

    startAngle = endAngle;
  });
};

<span class="hljs-comment">// 通用绘制函数</span>
<span class="hljs-keyword">const</span> <span class="hljs-title function_">drawCircle</span> = (<span class="hljs-params">{
  ctx,
  x,
  y,
  radius,
  lineWidth,
  color,
  startAngle,
  endAngle,
}: {
  ctx: CanvasRenderingContext2D;
  x: number;
  y: number;
  radius: number;
  lineWidth: number;
  color: string;
  startAngle: number;
  endAngle: number;
}</span>) =&gt; {
  ctx.<span class="hljs-title function_">beginPath</span>();
  ctx.<span class="hljs-title function_">arc</span>(x, y, radius, startAngle, endAngle);
  ctx.<span class="hljs-property">lineWidth</span> = lineWidth;
  ctx.<span class="hljs-property">strokeStyle</span> = color;
  ctx.<span class="hljs-title function_">stroke</span>();
  ctx.<span class="hljs-title function_">closePath</span>();
};

<span class="hljs-comment">// 监听画布大小变化</span>
<span class="hljs-title function_">onMounted</span>(<span class="hljs-function">() =&gt;</span> {
  <span class="hljs-title function_">initCanvas</span>();
});
&lt;/script&gt;
</code></pre>
<p>上述代码中，我们通过 <code>ratioList</code> 数组传递每个环的比例和颜色，使用 <code>startAngle</code> 和 <code>endAngle</code> 来控制每个环的绘制区域。其中，<code>drawDataRings</code> 函数遍历 <code>ratioList</code>，根据每个数据项的比例绘制环形区域。</p>
<p>现在，我们的组件就实现完毕了，可以在其他地方引入使用了</p>
<pre><code class="hljs language-js" lang="js">&lt;<span class="hljs-title class_">RingChart</span>
    :storkWidth=<span class="hljs-string">"8"</span>
    :size=<span class="hljs-string">"60"</span>
    :ratioList=<span class="hljs-string">"[
        { ratio: 0.3, color: '#F8766F' },
        { ratio: 0.6, color: '#69CD90' },
        { ratio: 0.1, color: '#FFB800' }
    ]"</span>
&gt;&lt;/<span class="hljs-title class_">RRingChart</span>&gt;
</code></pre>
<p><img src="https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/488ca4969d664752aa9dfe01fc415249~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5b-r5LmQ5bCx5piv5ZOI5ZOI5ZOI:q75.awebp?rk3s=f64ab15b&amp;x-expires=1736835299&amp;x-signature=htn%2BfLHDSfrv%2BElYNFekVWV6lg8%3D" alt="" loading="lazy"></p>
<h2 data-id="heading-7">组件代码</h2>
<pre><code class="hljs language-js" lang="js">&lt;template&gt;
    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">canvas</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"canvasDom"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span></span>
&lt;/template&gt;

<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"ts"</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript">
<span class="hljs-keyword">import</span> { ref, computed, onMounted, watchEffect } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>;

<span class="hljs-comment">// 定义 props 的类型</span>
interface <span class="hljs-title class_">RatioItem</span> {
    <span class="hljs-attr">ratio</span>: number;
    <span class="hljs-attr">color</span>: string;
}

<span class="hljs-keyword">const</span> props = defineProps&lt;{
    size?: number; <span class="hljs-comment">// 画布大小</span>
    storkWidth?: number; <span class="hljs-comment">// 环的宽度</span>
    ratioList?: <span class="hljs-title class_">RatioItem</span>[]; <span class="hljs-comment">// 比例列表</span>
}&gt;();

<span class="hljs-comment">// 默认值</span>
<span class="hljs-keyword">const</span> defaultSize = <span class="hljs-number">200</span>; <span class="hljs-comment">// 默认画布宽高</span>
<span class="hljs-keyword">const</span> defaultStorkWidth = <span class="hljs-number">4</span>;
<span class="hljs-keyword">const</span> <span class="hljs-attr">defaultRatioList</span>: <span class="hljs-title class_">RatioItem</span>[] = [{ <span class="hljs-attr">ratio</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">color</span>: <span class="hljs-string">'#C4C9CF4D'</span> }];

<span class="hljs-comment">// canvas DOM 和上下文</span>
<span class="hljs-keyword">const</span> canvasDom = ref&lt;<span class="hljs-title class_">HTMLCanvasElement</span> | <span class="hljs-literal">null</span>&gt;(<span class="hljs-literal">null</span>);
<span class="hljs-keyword">let</span> <span class="hljs-attr">ctx</span>: <span class="hljs-title class_">CanvasRenderingContext2D</span> | <span class="hljs-literal">null</span> = <span class="hljs-literal">null</span>;

<span class="hljs-comment">// 动态计算 canvas 的中心点和半径</span>
<span class="hljs-keyword">const</span> size = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span> props.<span class="hljs-property">size</span> || defaultSize);
<span class="hljs-keyword">const</span> center = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span> ({
    <span class="hljs-attr">x</span>: size.<span class="hljs-property">value</span> / <span class="hljs-number">2</span>,
    <span class="hljs-attr">y</span>: size.<span class="hljs-property">value</span> / <span class="hljs-number">2</span>
}));
<span class="hljs-keyword">const</span> radius = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span> size.<span class="hljs-property">value</span> / <span class="hljs-number">2</span> - (props.<span class="hljs-property">storkWidth</span> || defaultStorkWidth));

<span class="hljs-comment">// 初始化 canvas</span>
<span class="hljs-keyword">const</span> <span class="hljs-title function_">initCanvas</span> = (<span class="hljs-params"></span>) =&gt; {
    <span class="hljs-keyword">const</span> dom = canvasDom.<span class="hljs-property">value</span>;
    <span class="hljs-keyword">if</span> (!dom) <span class="hljs-keyword">return</span>;

    ctx = dom.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">'2d'</span>);
    <span class="hljs-keyword">if</span> (!ctx) <span class="hljs-keyword">return</span>;

    dom.<span class="hljs-property">width</span> = size.<span class="hljs-property">value</span>;
    dom.<span class="hljs-property">height</span> = size.<span class="hljs-property">value</span>;

    <span class="hljs-title function_">drawBackgroundCircle</span>();
    <span class="hljs-title function_">drawDataRings</span>();
};

<span class="hljs-comment">// 绘制背景圆环</span>
<span class="hljs-keyword">const</span> <span class="hljs-title function_">drawBackgroundCircle</span> = (<span class="hljs-params"></span>) =&gt; {
    <span class="hljs-keyword">if</span> (!ctx) <span class="hljs-keyword">return</span>;

    <span class="hljs-title function_">drawCircle</span>({
        ctx,
        <span class="hljs-attr">x</span>: center.<span class="hljs-property">value</span>.<span class="hljs-property">x</span>,
        <span class="hljs-attr">y</span>: center.<span class="hljs-property">value</span>.<span class="hljs-property">y</span>,
        <span class="hljs-attr">radius</span>: radius.<span class="hljs-property">value</span>,
        <span class="hljs-attr">lineWidth</span>: props.<span class="hljs-property">storkWidth</span> || defaultStorkWidth,
        <span class="hljs-attr">color</span>: <span class="hljs-string">'#C4C9CF4D'</span>,
        <span class="hljs-attr">startAngle</span>: -<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> / <span class="hljs-number">2</span>,
        <span class="hljs-attr">endAngle</span>: <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * <span class="hljs-number">1.5</span>
    });
};

<span class="hljs-comment">// 绘制数据圆环</span>
<span class="hljs-keyword">const</span> <span class="hljs-title function_">drawDataRings</span> = (<span class="hljs-params"></span>) =&gt; {
    <span class="hljs-keyword">const</span> { ratioList = defaultRatioList } = props;
    <span class="hljs-keyword">if</span> (!ctx) <span class="hljs-keyword">return</span>;

    <span class="hljs-keyword">let</span> startAngle = -<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> / <span class="hljs-number">2</span>;
    ratioList.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">{ ratio, color }</span>) =&gt;</span> {
        <span class="hljs-keyword">const</span> endAngle = startAngle + ratio * <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * <span class="hljs-number">2</span>;

        <span class="hljs-title function_">drawCircle</span>({
            ctx,
            <span class="hljs-attr">x</span>: center.<span class="hljs-property">value</span>.<span class="hljs-property">x</span>,
            <span class="hljs-attr">y</span>: center.<span class="hljs-property">value</span>.<span class="hljs-property">y</span>,
            <span class="hljs-attr">radius</span>: radius.<span class="hljs-property">value</span>,
            <span class="hljs-attr">lineWidth</span>: props.<span class="hljs-property">storkWidth</span> || defaultStorkWidth,
            color,
            startAngle,
            endAngle
        });

        startAngle = endAngle;
    });
};

<span class="hljs-comment">// 通用绘制函数</span>
<span class="hljs-keyword">const</span> <span class="hljs-title function_">drawCircle</span> = (<span class="hljs-params">{
    ctx,
    x,
    y,
    radius,
    lineWidth,
    color,
    startAngle,
    endAngle
}: {
    ctx: CanvasRenderingContext2D;
    x: number;
    y: number;
    radius: number;
    lineWidth: number;
    color: string;
    startAngle: number;
    endAngle: number;
}</span>) =&gt; {
    ctx.<span class="hljs-title function_">beginPath</span>();
    ctx.<span class="hljs-title function_">arc</span>(x, y, radius, startAngle, endAngle);
    ctx.<span class="hljs-property">lineWidth</span> = lineWidth;
    ctx.<span class="hljs-property">strokeStyle</span> = color;
    ctx.<span class="hljs-title function_">stroke</span>();
    ctx.<span class="hljs-title function_">closePath</span>();
};

<span class="hljs-comment">// 监听画布大小变化</span>
<span class="hljs-title function_">watchEffect</span>(<span class="hljs-function">() =&gt;</span> {
    <span class="hljs-title function_">initCanvas</span>();
});

<span class="hljs-title function_">onMounted</span>(<span class="hljs-function">() =&gt;</span> {
    <span class="hljs-title function_">initCanvas</span>();
});
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="css">
<span class="hljs-selector-tag">canvas</span> {
    <span class="hljs-attribute">display</span>: block;
    <span class="hljs-attribute">margin</span>: auto;
    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;
}
</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>
</span></code></pre>
<p>使用</p>
<pre><code class="hljs language-js" lang="js">&lt;<span class="hljs-title class_">Ring</span>
    :storkWidth=<span class="hljs-string">"5"</span>
    :size=<span class="hljs-string">"60"</span>
    :ratioList=<span class="hljs-string">"[
        { ratio: 0.3, color: '#FF5733' },
        { ratio: 0.6, color: '#33FF57' },
        { ratio: 0.1, color: '#3357FF' }
    ]"</span>
&gt;&lt;/<span class="hljs-title class_">Ring</span>&gt;
</code></pre>
<h2 data-id="heading-8">总结</h2>
<p>累了，今天不想写总结！</p></div></div>