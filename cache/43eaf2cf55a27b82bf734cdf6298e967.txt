
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/mingupupu/p/18849818" title="发布于 2025-04-27 16:39">
    <span role="heading" aria-level="2">ESP32教程：通过WIFI控制LED灯的开关</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="led闪烁">LED闪烁</h2>
<p>在通过WIFI控制LED灯的开关之前，我们先实现一下LED闪烁。</p>
<p>接线图：</p>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202504/3288240-20250427163822871-1671700644.png" alt="image-20250427150835520" loading="lazy"></p>
<p>来源：<a href="https://esp32io.com/tutorials/esp32-led-blink" target="_blank" rel="noopener nofollow">https://esp32io.com/tutorials/esp32-led-blink</a></p>
<p>我的接线图：</p>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202504/3288240-20250427163822869-1158133662.jpg" alt="" loading="lazy"></p>
<p>LED长的为阳极，短的为阴极，阳极通过一个电阻与ESP32引脚连接，这里以18引脚为例，阴极连接ESP32的GND引脚。</p>
<p>代码：</p>
<pre><code class="language-c++">// 定义 LED 连接的引脚
const int ledPin = 18;  // GPIO 2
void setup() {
  // 初始化 LED 引脚为输出
  pinMode(ledPin, OUTPUT);
}
void loop() {
  // 打开 LED
  digitalWrite(ledPin, HIGH);
  delay(1000);  // 等待 1 秒
  // 关闭 LED
  digitalWrite(ledPin, LOW);
  delay(1000);  // 等待 1 秒
}
</code></pre>
<p>烧录运行，如果接线没错的话，效果在：<a href="https://mp.weixin.qq.com/s/tI6YlXAeGp7CvGZeuGdV5g" target="_blank" rel="noopener nofollow">https://mp.weixin.qq.com/s/tI6YlXAeGp7CvGZeuGdV5g</a></p>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202504/3288240-20250427163822890-671982864.png" alt="image-20250427161343160" loading="lazy"></p>
<h2 id="通过wifi控制led灯的开关">通过WIFI控制LED灯的开关</h2>
<p>在实现第一个例子之后，为了挖掘一下ESP32的特性，我们就来玩一下通过WIFI控制LED灯的开关。</p>
<p>整个过程的时序图：</p>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202504/3288240-20250427163822888-22739225.png" alt="" loading="lazy"></p>
<p>代码：</p>
<pre><code class="language-c++">#include &lt;WiFi.h&gt;
#include &lt;WebServer.h&gt;

// 定义 LED 连接的引脚
const int ledPin = 18;  // GPIO 2

// WiFi 连接参数
const char* ssid = "WIFI名称";
const char* password = "WIFI密码";

// Web 服务器端口
const int serverPort = 80;

// 创建 WiFi 客户端和 Web 服务器对象

WebServer server(serverPort);

void setup() {
  // put your setup code here, to run once:
  Serial.begin(115200);
  
  // 初始化 LED 引脚为输出
  pinMode(ledPin, OUTPUT);

  // 连接 WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());

  // 设置 Web 服务器路由
  server.on("/", handleRoot);
  server.on("/on", handleOn);
  server.on("/off", handleOff);

  // 开始 Web 服务器
  server.begin();
  Serial.println("Web server started");
}

void loop() {
  // 处理 Web 服务器请求
  server.handleClient();
}

// 处理根路由
void handleRoot() {
  String html = "&lt;html&gt;&lt;head&gt;&lt;title&gt;ESP32 LED Control&lt;/title&gt;&lt;/head&gt;&lt;body&gt;";
  html += "&lt;h1&gt;ESP32 LED Control&lt;/h1&gt;";
  html += "&lt;a href=\"/on\"&gt;&lt;button&gt;Turn On&lt;/button&gt;&lt;/a&gt;";
  html += "&lt;a href=\"/off\"&gt;&lt;button&gt;Turn Off&lt;/button&gt;&lt;/a&gt;";
  html += "&lt;/body&gt;&lt;/html&gt;";
  server.send(200, "text/html", html);
}

// 处理 LED 开启请求
void handleOn() {
  digitalWrite(ledPin, HIGH);
  server.send(200, "text/plain", "LED is ON");
}

// 处理 LED 关闭请求
void handleOff() {
  digitalWrite(ledPin, LOW);
  server.send(200, "text/plain", "LED is OFF");
}
</code></pre>
<p>方便理解，可以看一下这个图：</p>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202504/3288240-20250427163822871-1950953053.png" alt="image-20250427152602949" loading="lazy"></p>
<p>烧录运行，查看串口监视器，没有看到输出的话，就按一下ESP32上的RST重启一下：</p>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202504/3288240-20250427163822850-548216049.png" alt="image-20250427152903326" loading="lazy"></p>
<p>现在我们可以使用连接同一个WIFI的电脑或者手机，登录http://192.168.0.100:80/由于80是默认端口号，直接输入ip地址即可。</p>
<p>为了方便录制效果，我使用的是平板登录。</p>
<p>效果在：<a href="https://mp.weixin.qq.com/s/xMPMKkogfbtllKeyBYShXw" target="_blank" rel="noopener nofollow">https://mp.weixin.qq.com/s/xMPMKkogfbtllKeyBYShXw</a></p>
<p><img src="https://img2024.cnblogs.com/blog/3288240/202504/3288240-20250427163823302-709539112.png" alt="image-20250427161427099" loading="lazy"></p>
<h2 id="总结">总结</h2>
<p>总结一下，通过这个示例，我们可以了解到：</p>
<ul>
<li><strong>基础 Arduino 结构:</strong> <code>setup()</code> 用于初始化，<code>loop()</code> 用于重复执行。</li>
<li><strong>GPIO 控制:</strong> 如何使用 <code>pinMode()</code> 设置引脚模式，以及如何使用 <code>digitalWrite()</code> 控制数字输出（开关 LED）。</li>
<li><strong>串口通信:</strong> 如何使用 <code>Serial</code> 对象向电脑发送调试信息。</li>
<li><strong>ESP32 WiFi 连接:</strong> 如何包含库、设置 SSID/密码、启动连接、检查状态并获取 IP 地址。</li>
<li><strong>ESP32 Web 服务器:</strong> 如何包含库、创建服务器对象、设置路由（将 URL 路径映射到处理函数）、启动服务器以及在 <code>loop()</code> 中处理客户端请求。</li>
<li><strong>HTTP 基础:</strong> 了解请求 (访问 URL) 和响应 (服务器发送回的内容)，以及简单的 HTTP 状态码 (200 OK) 和内容类型 (<code>text/html</code>, <code>text/plain</code>)。</li>
<li><strong>HTML 基础:</strong> 如何构建一个包含标题、链接和按钮的简单网页。</li>
<li><strong>回调函数 (Handlers):</strong> 函数可以作为参数传递给其他函数（如 <code>server.on</code>），并在特定事件发生时被调用。</li>
</ul>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.07925880240625" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-27 16:41">2025-04-27 16:39</span>&nbsp;
<a href="https://www.cnblogs.com/mingupupu">mingupupup</a>&nbsp;
阅读(<span id="post_view_count">21</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18849818);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18849818', targetLink: 'https://www.cnblogs.com/mingupupu/p/18849818', title: 'ESP32教程：通过WIFI控制LED灯的开关' })">举报</a>
</div>
        