
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/ThinkerQAQ/p/18952360" title="发布于 2025-06-27 17:17">
    <span role="heading" aria-level="2">Java源码分析系列笔记-16.JDK1.8的ConcurrentHashMap</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p></p><div class="toc"><div class="toc-container-header">目录</div><ul><li><a href="#1-是什么" rel="noopener nofollow">1. 是什么</a></li><li><a href="#2-如何使用" rel="noopener nofollow">2. 如何使用</a></li><li><a href="#3-原理分析" rel="noopener nofollow">3. 原理分析</a><ul><li><a href="#31-构造方法" rel="noopener nofollow">3.1. 构造方法</a><ul><li><a href="#311-node" rel="noopener nofollow">3.1.1. Node</a></li></ul></li><li><a href="#32-put方法有加锁" rel="noopener nofollow">3.2. put方法【有加锁】</a><ul><li><a href="#321-计算key的hash" rel="noopener nofollow">3.2.1. 计算key的hash</a></li><li><a href="#322-死循环" rel="noopener nofollow">3.2.2. 死循环</a></li><li><a href="#323-第一次进来table为空所以需要初始化table" rel="noopener nofollow">3.2.3. 第一次进来table为空，所以需要初始化table</a><ul><li><a href="#3231-使用cas加锁防止多线程同时初始化table" rel="noopener nofollow">3.2.3.1. 使用CAS加锁防止多线程同时初始化table</a></li><li><a href="#3232-其他线程让出cpu直到扩容完毕" rel="noopener nofollow">3.2.3.2. 其他线程让出CPU直到扩容完毕</a></li></ul></li><li><a href="#324-第二次进来table不为空链表肯定为空头节点为空那么cas设置头节点" rel="noopener nofollow">3.2.4. 第二次进来table不为空，链表肯定为空【头节点为空】，那么CAS设置头节点</a><ul><li><a href="#3241-获取第一个元素" rel="noopener nofollow">3.2.4.1. 获取第一个元素</a></li><li><a href="#3242-cas设置头节点" rel="noopener nofollow">3.2.4.2. CAS设置头节点</a></li></ul></li><li><a href="#325-第三次进来若链表不为空头节点不为空那么对头节点加锁使用链表的操作或树的操作插入" rel="noopener nofollow">3.2.5. 第三次进来若链表不为空【头节点不为空】，那么对头节点加锁，使用链表的操作或树的操作插入</a><ul><li><a href="#3251-具体的插入操作" rel="noopener nofollow">3.2.5.1. 具体的插入操作</a></li><li><a href="#_" rel="noopener nofollow">null</a></li></ul></li><li><a href="#326-扩容的操作" rel="noopener nofollow">3.2.6. 扩容的操作</a></li></ul></li><li><a href="#33-get方法没有加锁" rel="noopener nofollow">3.3. get方法【没有加锁】</a><ul><li><a href="#331-计算key的hash值" rel="noopener nofollow">3.3.1. 计算key的hash值</a></li><li><a href="#332-获取第一个元素" rel="noopener nofollow">3.3.2. 获取第一个元素</a></li><li><a href="#333-第一个元素就是要找的节点" rel="noopener nofollow">3.3.3. 第一个元素就是要找的节点</a></li><li><a href="#334-第一个元素不是要找的节点且hash0" rel="noopener nofollow">3.3.4. 第一个元素不是要找的节点且hash&lt;=0</a></li><li><a href="#335-第一个元素不是要找的节点且hash0说明是个链表那么遍历链表找到相等的节点" rel="noopener nofollow">3.3.5. 第一个元素不是要找的节点且hash&gt;=0说明是个链表那么遍历链表找到相等的节点</a></li></ul></li><li><a href="#34-remove方法有加锁" rel="noopener nofollow">3.4. remove方法【有加锁】</a><ul><li><a href="#341-死循环" rel="noopener nofollow">3.4.1. 死循环</a></li><li><a href="#342-table为空或者链表头节点为空说明不存在那么返回空" rel="noopener nofollow">3.4.2. table为空或者链表头节点为空，说明不存在那么返回空</a></li><li><a href="#343-头节点不为空先加锁然后使用树或者链表的操作删除节点" rel="noopener nofollow">3.4.3. 头节点不为空先加锁，然后使用树或者链表的操作删除节点</a><ul><li><a href="#3431-链表的删除节点操作--更新指针" rel="noopener nofollow">3.4.3.1. 链表的删除节点操作--更新指针</a></li></ul></li></ul></li><li><a href="#35-containskey方法没有加锁" rel="noopener nofollow">3.5. containsKey方法【没有加锁】</a></li></ul></li><li><a href="#4-参考链接" rel="noopener nofollow">4. 参考链接</a></li></ul></div><p></p>
<h2 id="1-是什么">1. 是什么</h2>
<p>线程安全的HashMap，底层使用sychronized+CAS+HashMap的结构（数组+链表+红黑树）实现</p>
<h2 id="2-如何使用">2. 如何使用</h2>
<pre><code class="language-java">public class ConcurrentHashMapTest
{
    public static void main(String[] args) throws InterruptedException
    {
        ConcurrentHashMap&lt;Integer, Integer&gt; map = new ConcurrentHashMap&lt;&gt;();
        Thread thread1 = new Thread(()-&gt;{
            for (int i = 0; i &lt; 100000; i++)
            {
                map.put(i, i);
            }
        });

        Thread thread2 = new Thread(()-&gt;{
            for (int i = 100000; i &lt; 200000; i++)
            {
                map.put(i, i);
            }
        });

        thread1.start();
        thread2.start();
        thread1.join();
        thread2.join();
        System.out.println(map);
        System.out.println(map.size());
        for (int i = 0; i &lt; 200000; i++)
        {
            if (!map.contains(i))
            {
                throw new RuntimeException("并发put有问题");//不会抛出异常说明并发put没问题
            }
            System.out.println(map.remove(i));
        }
    }
}
</code></pre>
<h2 id="3-原理分析">3. 原理分析</h2>
<h3 id="31-构造方法">3.1. 构造方法</h3>
<pre><code class="language-java">public class ConcurrentHashMap&lt;K,V&gt; extends AbstractMap&lt;K,V&gt;
    implements ConcurrentMap&lt;K,V&gt;, Serializable {
    private static final long serialVersionUID = 7249069246763182397L;

    //最大的数组长度。必须是2的次幂
    private static final int MAXIMUM_CAPACITY = 1 &lt;&lt; 30;

    //默认的数组长度。必须是2的次幂
    private static final int DEFAULT_CAPACITY = 16;



    //默认的加载因子。
    //当数组中有元素的entry的数量&gt;=数组长度*LOAD_FACTOR时会进行扩容
    private static final float LOAD_FACTOR = 0.75f;

     //当链表（不包括头节点）中元素的数目为8的时候需要转成红黑树
    static final int TREEIFY_THRESHOLD = 8;

    //当红黑树（不包括头节点）中元素的数目为6的时候需要转成链表
    static final int UNTREEIFY_THRESHOLD = 6;

    //数组中entry的数目为64的才转换成红黑树
    static final int MIN_TREEIFY_CAPACITY = 64;        


    //-1表示正在初始化，或者是（-1+正在扩容的线程数）
    //0或正数则代表hash表还未被初始化
    private transient volatile int sizeCtl;

    //使用volatile修饰Node数组，如果这个数组引用（不是内容）改变
    //那么其他线程能立马感知（volatile的可见性）
    //这个应该是扩容的时候修改Node数组会用到
    transient volatile Node&lt;K,V&gt;[] table;

    public ConcurrentHashMap() {
    }
}
</code></pre>
<h4 id="311-node">3.1.1. Node</h4>
<pre><code class="language-java">static class Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; {
    //final修饰key和hash表明这些是常量
    //常量是线程安全的
    final int hash;
    final K key;
    //val和next都用volatile修饰（可见性+有序性）
    //配合CAS操作（原子性）就可以保证线程安全
    //这也是get方法不用加锁的原因
    volatile V val;
    volatile Node&lt;K,V&gt; next;

    Node(int hash, K key, V val, Node&lt;K,V&gt; next) {
        this.hash = hash;
        this.key = key;
        this.val = val;
        this.next = next;
    }
}
</code></pre>
<h3 id="32-put方法有加锁">3.2. put方法【有加锁】</h3>
<pre><code class="language-java">public V put(K key, V value) {
    //把key和value传入putVal方法
    return putVal(key, value, false);
}
</code></pre>
<ul>
<li>putVal</li>
</ul>
<pre><code class="language-java">final V putVal(K key, V value, boolean onlyIfAbsent) {
    if (key == null || value == null) throw new NullPointerException();//不允许插入null的key或者value
    // (h ^ (h &gt;&gt;&gt; 16)) &amp; HASH_BITS(0x7fffffff)
    int hash = spread(key.hashCode());
    int binCount = 0;
    //死循环配合cas
    for (Node&lt;K,V&gt;[] tab = table;;) {
        Node&lt;K,V&gt; f; int n, i, fh;
        //如果table为空，第一次初始化table
        if (tab == null || (n = tab.length) == 0)
            tab = initTable();
        //链表头节点为空，那么尝试cas设置头节点
        else if ((f = tabAt(tab, i = (n - 1) &amp; hash)) == null) {
            if (casTabAt(tab, i, null,
                         new Node&lt;K,V&gt;(hash, key, value, null)))
                break;                   // cas设置头节点成功直接break
        }
        //有其他线程正在移动元素
        else if ((fh = f.hash) == MOVED)
            //协助其他线程扩容
            tab = helpTransfer(tab, f);
        //链表头节点不为空，走到这里发生了hash碰撞
        else {
            V oldVal = null;
            //可能竞争很大，所以用synchronized加锁而不是cas
            //相比于JDK7的这里锁的粒度更加小了，锁的粒度缩小为数组中每个链表的头节点
            synchronized (f) {
                if (tabAt(tab, i) == f) {
                    if (fh &gt;= 0) {//头节点的hash&gt;=0说明是个链表
                        binCount = 1;
                        //遍历链表，并且用bitCount计数链表中节点个数
                        for (Node&lt;K,V&gt; e = f;; ++binCount) {
                            K ek;
                            //找到了相等的节点，那么保存旧val，并更新val，退出循环
                            if (e.hash == hash &amp;&amp;
                                ((ek = e.key) == key ||
                                 (ek != null &amp;&amp; key.equals(ek)))) {
                                oldVal = e.val;
                                if (!onlyIfAbsent)
                                    e.val = value;
                                break;
                            }
                            Node&lt;K,V&gt; pred = e;
                            //到了尾节点，直接插入到末尾
                            if ((e = e.next) == null) {
                                pred.next = new Node&lt;K,V&gt;(hash, key,
                                                          value, null);
                                break;
                            }
                        }
                    }
                    //如果是树的节点，那么转调树
                    else if (f instanceof TreeBin) {
                        Node&lt;K,V&gt; p;
                        binCount = 2;
                        if ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key,
                                                       value)) != null) {
                            oldVal = p.val;
                            if (!onlyIfAbsent)
                                p.val = value;
                        }
                    }
                }
            }
            //判断是否需要树化
            if (binCount != 0) {
                if (binCount &gt;= TREEIFY_THRESHOLD)
                    treeifyBin(tab, i);
                if (oldVal != null)
                    return oldVal;
                break;
            }
        }
    }
    //更新数量
    addCount(1L, binCount);
    return null;
}
</code></pre>
<ul>
<li>4行：计算key的hash，这里不是简单得使用key.hashCode方法</li>
<li>7行：死循环直到成功</li>
<li>10-11行：第一次进来table为空，所以需要初始化table</li>
<li>13-17行：第二次进来table不为空，链表肯定为空【头节点为空】，那么设置CAS头节点</li>
<li>22-72行：第三次进来若链表不为空【头节点不为空】，那么对头节点加锁，使用链表的操作或树的操作插入</li>
<li>75行：数量+1并且判断是否需要扩容</li>
</ul>
<h4 id="321-计算key的hash">3.2.1. 计算key的hash</h4>
<ul>
<li>spread</li>
</ul>
<pre><code class="language-java">static final int spread(int h) {
    //通过把hashCode的高16位和低16位异或从而让每一位都参与运算减低hash碰撞的概率
    //与HASH_BITS（0x7fffffff）相与保证不会出现负数？
    return (h ^ (h &gt;&gt;&gt; 16)) &amp; HASH_BITS;
}
</code></pre>
<h4 id="322-死循环">3.2.2. 死循环</h4>
<pre><code class="language-java">for (Node&lt;K,V&gt;[] tab = table;;) {
//....
}
</code></pre>
<h4 id="323-第一次进来table为空所以需要初始化table">3.2.3. 第一次进来table为空，所以需要初始化table</h4>
<pre><code class="language-java">//如果table为空，第一次初始化table
if (tab == null || (n = tab.length) == 0)
    tab = initTable();
</code></pre>
<ul>
<li>initTable</li>
</ul>
<pre><code class="language-java">private final Node&lt;K,V&gt;[] initTable() {
    Node&lt;K,V&gt;[] tab; int sc;
    //这个也是个死循环
    while ((tab = table) == null || tab.length == 0) {
    	//sizeCtl&lt;0表示有其他线程正在初始化或者扩容
        if ((sc = sizeCtl) &lt; 0)
        	//让出cpu，让扩容或者初始化的线程执行
            Thread.yield(); // lost initialization race; just spin
        //当前线程尝试修改sizeCtl为-1（表示正在初始化数组），成功后进入扩容逻辑
        else if (U.compareAndSwapInt(this, SIZECTL, sc, -1)) {
            try {
            	//第一次初始化
                if ((tab = table) == null || tab.length == 0) {
                    //容量为16
                    int n = (sc &gt; 0) ? sc : DEFAULT_CAPACITY;
                    @SuppressWarnings("unchecked")
                    //创建长度为n的Node数组
                    Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])new Node&lt;?,?&gt;[n];
                    table = tab = nt;
                    //sizeCtl为8
                    sc = n - (n &gt;&gt;&gt; 2);
                }
            } finally {
                sizeCtl = sc;
            }
            break;
        }
    }
    return tab;
}
</code></pre>
<h5 id="3231-使用cas加锁防止多线程同时初始化table">3.2.3.1. 使用CAS加锁防止多线程同时初始化table</h5>
<pre><code class="language-java"> //当前线程正在尝试修改sizeCtl，成功后进入扩容逻辑
else if (U.compareAndSwapInt(this, SIZECTL, sc, -1)) {
    try {
    	//第一次初始化
        if ((tab = table) == null || tab.length == 0) {
            //容量为16
            int n = (sc &gt; 0) ? sc : DEFAULT_CAPACITY;
            @SuppressWarnings("unchecked")
            //创建长度为n的Node数组
            Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])new Node&lt;?,?&gt;[n];
            table = tab = nt;
            //sizeCtl为8
            sc = n - (n &gt;&gt;&gt; 2);
        }
    } finally {
        sizeCtl = sc;
    }
    break;
}
</code></pre>
<h5 id="3232-其他线程让出cpu直到扩容完毕">3.2.3.2. 其他线程让出CPU直到扩容完毕</h5>
<pre><code class="language-java">while ((tab = table) == null || tab.length == 0) {
//sizeCtl&lt;0表示正在初始化或者扩容
if ((sc = sizeCtl) &lt; 0)
	//让出cpu，让扩容或者初始化的线程执行
    Thread.yield(); // lost initialization race; just spin
}
</code></pre>
<h4 id="324-第二次进来table不为空链表肯定为空头节点为空那么cas设置头节点">3.2.4. 第二次进来table不为空，链表肯定为空【头节点为空】，那么CAS设置头节点</h4>
<pre><code class="language-java">//链表头节点为空，
else if ((f = tabAt(tab, i = (n - 1) &amp; hash)) == null) {
    //那么尝试cas设置头节点
    if (casTabAt(tab, i, null,
                 new Node&lt;K,V&gt;(hash, key, value, null)))
        break;                   // no lock when adding to empty bin
}
</code></pre>
<h5 id="3241-获取第一个元素">3.2.4.1. 获取第一个元素</h5>
<p>首先通过<code>(n - 1) &amp; hash</code>计算元素位置。n是2的次幂，n-1的话相当于最高位是0其余位都是1，hash与整个数相与结果跟对数组长度取模一样，只不过效率更高。<br>
然后通过UNSAFE类的CAS操作拿到该位置的元素【每个元素都是一个链表的头节点或者红黑树的根节点】</p>
<pre><code class="language-java">static final &lt;K,V&gt; Node&lt;K,V&gt; tabAt(Node&lt;K,V&gt;[] tab, int i) {
    //通过Unsafe类取的
    return (Node&lt;K,V&gt;)U.getObjectVolatile(tab, ((long)i &lt;&lt; ASHIFT) + ABASE);
}
</code></pre>
<h5 id="3242-cas设置头节点">3.2.4.2. CAS设置头节点</h5>
<ul>
<li>casTabAt</li>
</ul>
<pre><code class="language-java">static final &lt;K,V&gt; boolean casTabAt(Node&lt;K,V&gt;[] tab, int i,
                                    Node&lt;K,V&gt; c, Node&lt;K,V&gt; v) {
    //也是通过Unsafe设置的
    return U.compareAndSwapObject(tab, ((long)i &lt;&lt; ASHIFT) + ABASE, c, v);
}
</code></pre>
<h4 id="325-第三次进来若链表不为空头节点不为空那么对头节点加锁使用链表的操作或树的操作插入">3.2.5. 第三次进来若链表不为空【头节点不为空】，那么对头节点加锁，使用链表的操作或树的操作插入</h4>
<pre><code class="language-java"> //链表头节点不为空
else {
    V oldVal = null;
    //可能竞争很大，所以用synchronized加锁而不是cas
    //相比于JDK7的这里锁的粒度更加小了，锁的粒度缩小为数组中每个链表的头节点
    //JDK7的是对segment（类似于多个链表头节点）加锁
    synchronized (f) {
        //头节点确实没有变化--啥时候会变化？
        if (tabAt(tab, i) == f) {
            if (fh &gt;= 0) {
                binCount = 1;
                //遍历链表，并且用bitCount计数链表中节点个数
                for (Node&lt;K,V&gt; e = f;; ++binCount) {
                    K ek;
                    //找到了相等的节点，那么保存旧val，并更新val，退出循环
                    if (e.hash == hash &amp;&amp;
                        ((ek = e.key) == key ||
                         (ek != null &amp;&amp; key.equals(ek)))) {
                        oldVal = e.val;
                        if (!onlyIfAbsent)
                            e.val = value;
                        break;
                    }
                    Node&lt;K,V&gt; pred = e;
                    //到了尾节点，直接插入到末尾，退出循环
                    if ((e = e.next) == null) {
                        pred.next = new Node&lt;K,V&gt;(hash, key,
                                                  value, null);
                        break;
                    }
                }
            }
            //如果是树的节点，那么转调树
            else if (f instanceof TreeBin) {
                Node&lt;K,V&gt; p;
                binCount = 2;
                if ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key,
                                               value)) != null) {
                    oldVal = p.val;
                    if (!onlyIfAbsent)
                        p.val = value;
                }
            }
        }
    }
    //判断是否需要树化
    if (binCount != 0) {
        if (binCount &gt;= TREEIFY_THRESHOLD)
            treeifyBin(tab, i);
        if (oldVal != null)
            return oldVal;
        break;
    }
}
</code></pre>
<h5 id="3251-具体的插入操作">3.2.5.1. 具体的插入操作</h5>
<ul>
<li>7行：首先对头节点加锁</li>
<li>13-32行：如果是链表的节点，调用链表的方法插入节点
<ul>
<li>13行：遍历链表</li>
<li>16-22行：找到了相等的节点，那么替换value</li>
<li>26-29行：没有找到相等的节点，插入到链表末尾</li>
</ul>
</li>
<li>34-43行：如果是树的节点，调用树的方法插入节点</li>
</ul>
<h5 id="_"></h5>
<h4 id="326-扩容的操作">3.2.6. 扩容的操作</h4>
<p>看不太懂，先放着</p>
<pre><code class="language-java">private final void addCount(long x, int check) {
    CounterCell[] as; long b, s;
    if ((as = counterCells) != null ||
        !U.compareAndSwapLong(this, BASECOUNT, b = baseCount, s = b + x)) {
        CounterCell a; long v; int m;
        boolean uncontended = true;
        if (as == null || (m = as.length - 1) &lt; 0 ||
            (a = as[ThreadLocalRandom.getProbe() &amp; m]) == null ||
            !(uncontended =
              U.compareAndSwapLong(a, CELLVALUE, v = a.value, v + x))) {
            fullAddCount(x, uncontended);
            return;
        }
        if (check &lt;= 1)
            return;
        s = sumCount();
    }
    if (check &gt;= 0) {
        Node&lt;K,V&gt;[] tab, nt; int n, sc;
        while (s &gt;= (long)(sc = sizeCtl) &amp;&amp; (tab = table) != null &amp;&amp;
               (n = tab.length) &lt; MAXIMUM_CAPACITY) {
            int rs = resizeStamp(n);
            if (sc &lt; 0) {
                if ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + 1 ||
                    sc == rs + MAX_RESIZERS || (nt = nextTable) == null ||
                    transferIndex &lt;= 0)
                    break;
                if (U.compareAndSwapInt(this, SIZECTL, sc, sc + 1))
                    transfer(tab, nt);
            }
            else if (U.compareAndSwapInt(this, SIZECTL, sc,
                                         (rs &lt;&lt; RESIZE_STAMP_SHIFT) + 2))
                transfer(tab, null);
            s = sumCount();
        }
    }
}
</code></pre>
<h3 id="33-get方法没有加锁">3.3. get方法【没有加锁】</h3>
<pre><code class="language-java">public V get(Object key) {
    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; e, p; int n, eh; K ek;
    //计算key的hash值
    int h = spread(key.hashCode());
    if ((tab = table) != null &amp;&amp; (n = tab.length) &gt; 0 &amp;&amp;
        //找到第一个元素
        (e = tabAt(tab, (n - 1) &amp; h)) != null) {
        //链表第一个节点就相等
        if ((eh = e.hash) == h) {
            if ((ek = e.key) == key || (ek != null &amp;&amp; key.equals(ek)))
                return e.val;
        }
        //eh是第一个元素的hash值
        //hash&lt;0指得是什么情况？表示有其他线程正在扩容
        
        else if (eh &lt; 0)
    		//find 啥用处??
            return (p = e.find(h, key)) != null ? p.val : null;
        //eh&gt;=0说明是一个链表，直接遍历该链表找到相等的节点
        while ((e = e.next) != null) {
            if (e.hash == h &amp;&amp;
                ((ek = e.key) == key || (ek != null &amp;&amp; key.equals(ek))))
                return e.val;
        }
    }
    //没有找到返回null
    return null;
}
</code></pre>
<h4 id="331-计算key的hash值">3.3.1. 计算key的hash值</h4>
<ul>
<li>spread</li>
</ul>
<pre><code class="language-java">static final int spread(int h) {
    //通过把hashCode的高16位和低16位异或从而让每一位都参与运算减低hash碰撞的概率
    //与HASH_BITS（0x7fffffff）相与保证不会出现负数？
    return (h ^ (h &gt;&gt;&gt; 16)) &amp; HASH_BITS;
}
</code></pre>
<h4 id="332-获取第一个元素">3.3.2. 获取第一个元素</h4>
<p>首先通过<code>(n - 1) &amp; hash</code>计算元素位置。n是2的次幂，n-1的话相当于最高位是0其余位都是1，hash与整个数相与结果跟对数组长度取模一样，只不过效率更高。<br>
然后通过UNSAFE类的CAS操作拿到该位置的元素【每个元素都是一个链表的头节点或者红黑树的根节点】</p>
<pre><code class="language-java">static final &lt;K,V&gt; Node&lt;K,V&gt; tabAt(Node&lt;K,V&gt;[] tab, int i) {
    //通过Unsafe类取的
    return (Node&lt;K,V&gt;)U.getObjectVolatile(tab, ((long)i &lt;&lt; ASHIFT) + ABASE);
}
</code></pre>
<h4 id="333-第一个元素就是要找的节点">3.3.3. 第一个元素就是要找的节点</h4>
<pre><code class="language-java">if ((eh = e.hash) == h) {//hash相等
    //key引用相等或者key内容相等
    if ((ek = e.key) == key || (ek != null &amp;&amp; key.equals(ek)))
        return e.val;
}
</code></pre>
<h4 id="334-第一个元素不是要找的节点且hash0">3.3.4. 第一个元素不是要找的节点且hash&lt;=0</h4>
<h4 id="335-第一个元素不是要找的节点且hash0说明是个链表那么遍历链表找到相等的节点">3.3.5. 第一个元素不是要找的节点且hash&gt;=0说明是个链表那么遍历链表找到相等的节点</h4>
<pre><code class="language-java">//遍历链表找到相等的节点
while ((e = e.next) != null) {
    if (e.hash == h &amp;&amp;
        ((ek = e.key) == key || (ek != null &amp;&amp; key.equals(ek))))
        return e.val;
}
</code></pre>
<h3 id="34-remove方法有加锁">3.4. remove方法【有加锁】</h3>
<pre><code class="language-java">public V remove(Object key) {
    return replaceNode(key, null, null);
}

</code></pre>
<ul>
<li>replaceNode</li>
</ul>
<pre><code class="language-java">final V replaceNode(Object key, V value, Object cv) {
    int hash = spread(key.hashCode());
    //死循环
    for (Node&lt;K,V&gt;[] tab = table;;) {
        Node&lt;K,V&gt; f; int n, i, fh;
        //table为空
        if (tab == null || (n = tab.length) == 0 ||
            (f = tabAt(tab, i = (n - 1) &amp; hash)) == null)
            break;
        //扩容
        else if ((fh = f.hash) == MOVED)
            tab = helpTransfer(tab, f);
        else {
            V oldVal = null;
            boolean validated = false;
            //使用synchronized加锁
            synchronized (f) {
                if (tabAt(tab, i) == f) {
                    if (fh &gt;= 0) {
                        validated = true;
                        //遍历链表中的每一个节点
                        for (Node&lt;K,V&gt; e = f, pred = null;;) {
                            K ek;
                            //找到了相等的节点
                            if (e.hash == hash &amp;&amp;
                                ((ek = e.key) == key ||
                                 (ek != null &amp;&amp; key.equals(ek)))) {
                                V ev = e.val;
                                if (cv == null || cv == ev ||
                                    (ev != null &amp;&amp; cv.equals(ev))) {
                                    oldVal = ev;
                                    if (value != null)
                                        e.val = value;
                                    //e不是头节点，那么直接更新链表指针
                                    else if (pred != null)
                                        pred.next = e.next;
                                    //e是头节点
                                    else
                                        setTabAt(tab, i, e.next);
                                }
                                break;
                            }
                            pred = e;
                            if ((e = e.next) == null)
                                break;
                        }
                    }
                    else if (f instanceof TreeBin) {
                        validated = true;
                        TreeBin&lt;K,V&gt; t = (TreeBin&lt;K,V&gt;)f;
                        TreeNode&lt;K,V&gt; r, p;
                        if ((r = t.root) != null &amp;&amp;
                            (p = r.findTreeNode(hash, key, null)) != null) {
                            V pv = p.val;
                            if (cv == null || cv == pv ||
                                (pv != null &amp;&amp; cv.equals(pv))) {
                                oldVal = pv;
                                if (value != null)
                                    p.val = value;
                                else if (t.removeTreeNode(p))
                                    setTabAt(tab, i, untreeify(t.first));
                            }
                        }
                    }
                }
            }
            if (validated) {
                if (oldVal != null) {
                    if (value == null)
                        addCount(-1L, -1);
                    return oldVal;
                }
                break;
            }
        }
    }
    return null;
}
</code></pre>
<h4 id="341-死循环">3.4.1. 死循环</h4>
<pre><code class="language-java">for (Node&lt;K,V&gt;[] tab = table;;) {
}
</code></pre>
<h4 id="342-table为空或者链表头节点为空说明不存在那么返回空">3.4.2. table为空或者链表头节点为空，说明不存在那么返回空</h4>
<pre><code class="language-java">//table为空
if (tab == null || (n = tab.length) == 0 ||
    (f = tabAt(tab, i = (n - 1) &amp; hash)) == null)
    break;//break循环，最后返回null
</code></pre>
<h4 id="343-头节点不为空先加锁然后使用树或者链表的操作删除节点">3.4.3. 头节点不为空先加锁，然后使用树或者链表的操作删除节点</h4>
<pre><code class="language-java">else {
    V oldVal = null;
    boolean validated = false;
    //使用synchronized加锁
    synchronized (f) {
        if (tabAt(tab, i) == f) {
            if (fh &gt;= 0) {
                validated = true;
                //遍历链表中的每一个节点
                for (Node&lt;K,V&gt; e = f, pred = null;;) {
                    K ek;
                    //找到了相等的节点
                    if (e.hash == hash &amp;&amp;
                        ((ek = e.key) == key ||
                         (ek != null &amp;&amp; key.equals(ek)))) {
                        V ev = e.val;
                        if (cv == null || cv == ev ||
                            (ev != null &amp;&amp; cv.equals(ev))) {
                            oldVal = ev;
                            if (value != null)
                                e.val = value;
                            //e不是头节点，那么直接更新链表指针
                            else if (pred != null)
                                pred.next = e.next;
                            //e是头节点
                            else
                                setTabAt(tab, i, e.next);
                        }
                        break;
                    }
                    pred = e;
                    if ((e = e.next) == null)
                        break;
                }
            }
            else if (f instanceof TreeBin) {
                validated = true;
                TreeBin&lt;K,V&gt; t = (TreeBin&lt;K,V&gt;)f;
                TreeNode&lt;K,V&gt; r, p;
                if ((r = t.root) != null &amp;&amp;
                    (p = r.findTreeNode(hash, key, null)) != null) {
                    V pv = p.val;
                    if (cv == null || cv == pv ||
                        (pv != null &amp;&amp; cv.equals(pv))) {
                        oldVal = pv;
                        if (value != null)
                            p.val = value;
                        else if (t.removeTreeNode(p))
                            setTabAt(tab, i, untreeify(t.first));
                    }
                }
            }
        }
}
</code></pre>
<h5 id="3431-链表的删除节点操作--更新指针">3.4.3.1. 链表的删除节点操作--更新指针</h5>
<pre><code class="language-java">//遍历链表中的每一个节点
for (Node&lt;K,V&gt; e = f, pred = null;;) {
    K ek;
    //找到了相等的节点
    if (e.hash == hash &amp;&amp;
        ((ek = e.key) == key ||
         (ek != null &amp;&amp; key.equals(ek)))) {
        V ev = e.val;
        if (cv == null || cv == ev ||
            (ev != null &amp;&amp; cv.equals(ev))) {
            oldVal = ev;
            if (value != null)
                e.val = value;
            //这个节点e不是头节点，那么直接更新前一个节点的next指针
            else if (pred != null)
                pred.next = e.next;
            //这个节点e是头节点，那么CAS设置e.next为头节点
            else
                setTabAt(tab, i, e.next);
        }
        break;
    }
    pred = e;
    if ((e = e.next) == null)
        break;
}
</code></pre>
<ul>
<li>setTabAt</li>
</ul>
<pre><code class="language-java">static final &lt;K,V&gt; void setTabAt(Node&lt;K,V&gt;[] tab, int i, Node&lt;K,V&gt; v) {
    U.putObjectVolatile(tab, ((long)i &lt;&lt; ASHIFT) + ABASE, v);
}
</code></pre>
<h3 id="35-containskey方法没有加锁">3.5. containsKey方法【没有加锁】</h3>
<pre><code class="language-java">public boolean containsKey(Object key) {
    //调用get方法，也是不加锁
    return get(key) != null;
}
</code></pre>
<h2 id="4-参考链接">4. 参考链接</h2>
<ul>
<li><a href="https://www.infoq.cn/article/ConcurrentHashMap/" target="_blank" rel="noopener nofollow">聊聊并发（四）——深入分析ConcurrentHashMap-InfoQ</a></li>
<li><a href="https://juejin.im/post/5df8d7346fb9a015ff64eaf9" target="_blank" rel="noopener nofollow">《吊打面试官》系列-ConcurrentHashMap &amp; Hashtable - 掘金</a></li>
<li><a href="https://juejin.im/entry/5b98b89bf265da0abd35034c" target="_blank" rel="noopener nofollow">为什么ConcurrentHashMap的读操作不需要加锁？ - 后端 - 掘金</a></li>
<li><a href="https://www.jianshu.com/p/39b747c99d32" target="_blank" rel="noopener nofollow">并发编程——ConcurrentHashMap#helpTransfer() 分析 - 简书</a></li>
</ul>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.12569444444444444" data-date-updated="2025-06-27 20:18">2025-06-27 17:17</span>&nbsp;
<a href="https://www.cnblogs.com/ThinkerQAQ">ThinkerQAQ</a>&nbsp;
阅读(<span id="post_view_count">34</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18952360);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18952360', targetLink: 'https://www.cnblogs.com/ThinkerQAQ/p/18952360', title: 'Java源码分析系列笔记-16.JDK1.8的ConcurrentHashMap' })">举报</a>
</div>
        