
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/toutou/p/18024626/spring-retry" title="发布于 2025-01-05 21:03">
    <span role="heading" aria-level="2">SpringBoot进阶教程(八十四)spring-retry</span>
    

</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<div class="bodyCustomClass">
<blockquote>
<p>在日常的一些场景中, 很多需要进行重试的操作.而spring-retry是spring提供的一个基于spring的重试框架，某些场景需要对一些异常情况下的方法进行重试就会用到spring-retry。spring-retry可以帮助我们以标准方式处理任何特定操作的重试。在spring-retry中，所有配置都是基于简单注释的。</p>
</blockquote>
</div>
<h2 id="_nav_0" class="blogCustomTitleStyle"><span class="blogCustomTitleIco">v</span>添加引用</h2>
<div class="cnblogs_code">
<pre>        <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">dependency</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
            <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">groupId</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>org.springframework.retry<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">groupId</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
            <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">artifactId</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>spring-retry<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">artifactId</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
        <span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">dependency</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
        <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">dependency</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
            <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">groupId</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>org.springframework.boot<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">groupId</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
            <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">artifactId</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>spring-boot-starter-aop<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">artifactId</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
        <span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">dependency</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span></pre>
</div>
<h2 id="_nav_1" class="blogCustomTitleStyle"><span class="blogCustomTitleIco">v</span>启用@Retryable</h2>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">@SpringBootApplication
@EnableRetry
</span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> TestApplication {

    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> main(String[] args) {
        SpringApplication.run(TestApplication.</span><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)">, args);
    }

}</span></pre>
</div>
<p>要使用<span style="color: rgba(199, 37, 78, 1); background-color: rgba(249, 242, 244, 1); border-radius: 2px">@EnabelRetry</span>开启重试才行，声明在配置类或者启动类上都可以激活。</p>
<h2 id="_nav_2" class="blogCustomTitleStyle"><span class="blogCustomTitleIco">v</span>在方法上添加@Retryable</h2>
<div style="font-weight: bold; font-size: 21px; color: rgba(75, 211, 211, 1); text-decoration: underline">创建service接口</div>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">interface</span><span style="color: rgba(0, 0, 0, 1)"> HomeService {
    </span><span style="color: rgba(0, 0, 255, 1)">int</span> convertStatus(<span style="color: rgba(0, 0, 255, 1)">int</span> status) <span style="color: rgba(0, 0, 255, 1)">throws</span><span style="color: rgba(0, 0, 0, 1)"> Exception;
}</span></pre>
</div>
<div style="font-weight: bold; font-size: 21px; color: rgba(75, 211, 211, 1); text-decoration: underline">在service实现类并添加@Retryable</div>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">@Slf4j
@Service
</span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span> HomeServiceImpl <span style="color: rgba(0, 0, 255, 1)">implements</span><span style="color: rgba(0, 0, 0, 1)"> HomeService {
    </span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">
     * value：抛出指定异常才会重试
     * include：和value一样，默认为空，当exclude也为空时，默认所有异常
     * exclude：指定不处理的异常
     * maxAttempts：最大重试次数，默认3次（包括第一次调用）
     * backoff：重试等待策略，
     * 默认使用@Backoff，@Backoff的value默认为1000L，我们设置为2000； 以毫秒为单位的延迟（默认 1000）;delay：重试的间隔时间,就是value
     * multiplier delay时间的间隔倍数，默认为0，表示固定暂停1秒后进行重试，如果把multiplier设置为1.5，则第一次重试为2秒，第二次为3秒，第三次为4.5秒。
     * </span><span style="color: rgba(128, 128, 128, 1)">@param</span><span style="color: rgba(0, 128, 0, 1)"> status
     * </span><span style="color: rgba(128, 128, 128, 1)">@return</span><span style="color: rgba(0, 128, 0, 1)">
     * </span><span style="color: rgba(128, 128, 128, 1)">@throws</span><span style="color: rgba(0, 128, 0, 1)"> Exception
     </span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">
    @Override
    @Retryable(retryFor </span>= Exception.<span style="color: rgba(0, 0, 255, 1)">class</span>,maxAttempts = 3,backoff = @Backoff(delay = 2000,multiplier = 1.5<span style="color: rgba(0, 0, 0, 1)">))
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">int</span> convertStatus(<span style="color: rgba(0, 0, 255, 1)">int</span> status) <span style="color: rgba(0, 0, 255, 1)">throws</span><span style="color: rgba(0, 0, 0, 1)"> Exception{
        System.out.println(</span>"进入convertStatus时间："+<span style="color: rgba(0, 0, 0, 1)"> LocalTime.now());
        </span><span style="color: rgba(0, 0, 255, 1)">if</span> (status &lt; 0<span style="color: rgba(0, 0, 0, 1)">){
            </span><span style="color: rgba(0, 0, 255, 1)">throw</span> <span style="color: rgba(0, 0, 255, 1)">new</span> Exception("状态小于0是非法的"<span style="color: rgba(0, 0, 0, 1)">);
        }

        System.out.println(</span>"convertStatus: status++"<span style="color: rgba(0, 0, 0, 1)">);

        </span><span style="color: rgba(0, 0, 255, 1)">return</span> status++<span style="color: rgba(0, 0, 0, 1)">;
    }

    </span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">
     * Spring-Retry还提供了@Recover注解，用于@Retryable重试失败后处理方法。
     * 如果不需要回调方法，可以直接不写回调方法，那么实现的效果是，重试次数完了后，如果还是没成功没符合业务判断，就抛出异常。
     * @Recover标记方法必须要与@Retryable注解的方法“形参”保持一致，第一入参为要重试的异常(一定要是@Retryable方法里抛出的异常或者异常父类)，其他参数与@Retryable保持一致，返回值也要一样，否则无法执行！
     *
     * </span><span style="color: rgba(128, 128, 128, 1)">@param</span><span style="color: rgba(0, 128, 0, 1)"> e
     * </span><span style="color: rgba(128, 128, 128, 1)">@param</span><span style="color: rgba(0, 128, 0, 1)"> status @Retryable注解的原方法参数，可以保留，也可以不要。
     * </span><span style="color: rgba(128, 128, 128, 1)">@return</span>
     <span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">
    @Recover
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">int</span> recover(Exception e, <span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> status) {
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">记日志到数据库 或者调用其余的方法</span>
        System.out.println(String.format("兜底方法执行，异常信息:%s,status:%d"<span style="color: rgba(0, 0, 0, 1)">, e.toString(), status));
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> -1<span style="color: rgba(0, 0, 0, 1)">;
    }
}</span></pre>
</div>
<p><span style="color: rgba(199, 37, 78, 1); background-color: rgba(249, 242, 244, 1); border-radius: 2px">@Retryable</span>修饰的<span style="color: rgba(199, 37, 78, 1); background-color: rgba(249, 242, 244, 1); border-radius: 2px">convertStatus()</span>方法，如果调用期间报了异常，那么它将进行重试3次（默认三次），如果超过最大重试次数，则执行<span style="color: rgba(199, 37, 78, 1); background-color: rgba(249, 242, 244, 1); border-radius: 2px">@Retryable</span>修饰的<span style="color: rgba(199, 37, 78, 1); background-color: rgba(249, 242, 244, 1); border-radius: 2px">recover()</span>方法，</p>
<div style="font-weight: bold; font-size: 21px; color: rgba(75, 211, 211, 1); text-decoration: underline">创建controller</div>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">@Slf4j
@RestController
</span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> HomeController {
    @Autowired
    HomeService homeService;

    @GetMapping(</span>"convertStatus"<span style="color: rgba(0, 0, 0, 1)">)
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> ReturnValue&lt;?&gt; convertStatus(@RequestParam("token"<span style="color: rgba(0, 0, 0, 1)">) String token,
                                        @RequestParam(</span>"status") <span style="color: rgba(0, 0, 255, 1)">int</span> status) <span style="color: rgba(0, 0, 255, 1)">throws</span><span style="color: rgba(0, 0, 0, 1)"> Exception {
        </span><span style="color: rgba(0, 0, 255, 1)">int</span> result =<span style="color: rgba(0, 0, 0, 1)"> homeService.convertStatus(status);
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> ReturnValue.buildSuccessResult(result);
    }
}</span></pre>
</div>
<div style="font-weight: bold; font-size: 21px; color: rgba(75, 211, 211, 1); text-decoration: underline">验证效果</div>
<p><img src="https://img2024.cnblogs.com/blog/506684/202402/506684-20240221111746791-86352963.png" alt="SpringBoot进阶教程(八十四)spring-retry" loading="lazy"></p>
<h2 id="_nav_90" class="blogCustomTitleStyle"><span class="blogCustomTitleIco">v</span>常用注解介绍</h2>
<div style="font-weight: bold; font-size: 21px; color: rgba(75, 211, 211, 1); text-decoration: underline">@EnableRetry</div>
<p>启用重试，开启aop的功能，默认使用jdk的动态代理。<span style="color: rgba(199, 37, 78, 1); background-color: rgba(249, 242, 244, 1); border-radius: 2px">proxyTargetClass</span>属性为true时（默认false），使用CGLIB代理</p>
<div style="font-weight: bold; font-size: 21px; color: rgba(75, 211, 211, 1); text-decoration: underline">@Retryable</div>
<p>标记当前方法会使用重试机制。</p>
<div>
<table style="width: 493.52pt; margin-left: 24px" cellspacing="0">
<tbody>
<tr>
<td style="vertical-align: middle; width: 109.5pt">属性</td>
<td style="vertical-align: middle; width: 54pt">类型</td>
<td style="vertical-align: middle; width: 54pt">默认值</td>
<td style="vertical-align: middle; width: 276pt">说明</td>
</tr>
<tr>
<td style="vertical-align: middle">interceptor</td>
<td style="vertical-align: middle">String</td>
<td style="vertical-align: middle">“”</td>
<td style="vertical-align: middle; width: 276pt">将interceptor的bean名称应用到retryable()，和其他的属性互斥</td>
</tr>
<tr>
<td style="vertical-align: middle">include</td>
<td style="vertical-align: middle">Class[]</td>
<td style="vertical-align: middle">{}</td>
<td style="vertical-align: middle; width: 276pt">哪些异常可以触发重试 ，默认为空</td>
</tr>
<tr>
<td style="vertical-align: middle">exclude</td>
<td style="vertical-align: middle">Class[]</td>
<td style="vertical-align: middle">{}</td>
<td style="vertical-align: middle; width: 276pt">哪些异常将不会触发重试，默认为空，如果和include属性同时为空，则所有的异常都将会触发重试</td>
</tr>
<tr>
<td style="vertical-align: middle">value</td>
<td style="vertical-align: middle">Class[]</td>
<td style="vertical-align: middle">{}</td>
<td style="vertical-align: middle; width: 276pt">可重试的异常类型</td>
</tr>
<tr>
<td style="vertical-align: middle">label</td>
<td style="vertical-align: middle">String</td>
<td style="vertical-align: middle">“”</td>
<td style="vertical-align: middle; width: 276pt">统计报告的唯—标签。如果没有提供，调用者可以选择忽略它，或者提供默认值</td>
</tr>
<tr>
<td style="vertical-align: middle">maxAttempts</td>
<td style="vertical-align: middle">int</td>
<td style="vertical-align: middle">3</td>
<td style="vertical-align: middle; width: 276pt">尝试的最大次数(包括第一次失败)，默认为3次</td>
</tr>
<tr>
<td style="vertical-align: middle">backoff</td>
<td style="vertical-align: middle">@Backoff</td>
<td style="vertical-align: middle">@Backoff()</td>
<td style="vertical-align: middle; width: 276pt">@Backoff @Backoff()指定用于重试此操作的backoff属性。默认为</td>
</tr>
</tbody>
</table>
</div>
<div style="font-weight: bold; font-size: 21px; color: rgba(75, 211, 211, 1); text-decoration: underline">@Backoff</div>
<p>重试回退策略（立即重试还是等待一会再重试）</p>
<div>
<table style="width: 493.52pt; margin-left: 24px" border="1" cellspacing="0">
<tbody>
<tr>
<td style="background-color: rgba(239, 243, 245, 1); border-color: rgba(221, 221, 221, 1); text-align: center; vertical-align: middle; width: 109.5pt"><strong>属性</strong></td>
<td style="background-color: rgba(239, 243, 245, 1); border-color: rgba(221, 221, 221, 1); text-align: center; vertical-align: middle; width: 54pt"><strong>类型</strong></td>
<td style="background-color: rgba(239, 243, 245, 1); border-color: rgba(221, 221, 221, 1); text-align: center; vertical-align: middle; width: 54pt"><strong>默认值</strong></td>
<td style="background-color: rgba(239, 243, 245, 1); border-color: rgba(221, 221, 221, 1); text-align: center; vertical-align: middle; width: 276pt"><strong>说明</strong></td>
</tr>
<tr>
<td style="background-color: rgba(255, 255, 255, 1); border-color: rgba(221, 221, 221, 1); vertical-align: middle; width: 109.5pt">delay</td>
<td style="background-color: rgba(255, 255, 255, 1); border-color: rgba(221, 221, 221, 1); vertical-align: middle; width: 54pt">long</td>
<td style="background-color: rgba(255, 255, 255, 1); border-color: rgba(221, 221, 221, 1); vertical-align: middle; width: 54pt">0</td>
<td style="background-color: rgba(255, 255, 255, 1); border-color: rgba(221, 221, 221, 1); vertical-align: middle; width: 276pt">如果不设置则默认使用1000 ms等待重试，和value同义词</td>
</tr>
<tr>
<td style="background-color: rgba(247, 247, 247, 1); border-color: rgba(221, 221, 221, 1); vertical-align: middle; width: 109.5pt">maxDelay</td>
<td style="background-color: rgba(247, 247, 247, 1); border-color: rgba(221, 221, 221, 1); vertical-align: middle; width: 54pt">long</td>
<td style="background-color: rgba(247, 247, 247, 1); border-color: rgba(221, 221, 221, 1); vertical-align: middle; width: 54pt">0</td>
<td style="background-color: rgba(247, 247, 247, 1); border-color: rgba(221, 221, 221, 1); vertical-align: middle; width: 276pt">最大重试等待时间</td>
</tr>
<tr>
<td style="background-color: rgba(255, 255, 255, 1); border-color: rgba(221, 221, 221, 1); vertical-align: middle; width: 109.5pt">multiplier</td>
<td style="background-color: rgba(255, 255, 255, 1); border-color: rgba(221, 221, 221, 1); vertical-align: middle; width: 54pt">long</td>
<td style="background-color: rgba(255, 255, 255, 1); border-color: rgba(221, 221, 221, 1); vertical-align: middle; width: 54pt">0</td>
<td style="background-color: rgba(255, 255, 255, 1); border-color: rgba(221, 221, 221, 1); vertical-align: middle; width: 276pt">用于计算下一个延迟延迟的乘数(大于0生效)</td>
</tr>
<tr>
<td style="background-color: rgba(247, 247, 247, 1); border-color: rgba(221, 221, 221, 1); vertical-align: middle; width: 109.5pt">random</td>
<td style="background-color: rgba(247, 247, 247, 1); border-color: rgba(221, 221, 221, 1); vertical-align: middle; width: 54pt">boolean</td>
<td style="background-color: rgba(247, 247, 247, 1); border-color: rgba(221, 221, 221, 1); vertical-align: middle; width: 54pt">FALSE</td>
<td style="background-color: rgba(247, 247, 247, 1); border-color: rgba(221, 221, 221, 1); vertical-align: middle; width: 276pt">随机重试等待时间</td>
</tr>
</tbody>
</table>
</div>
<p>@Backoff 的参数会影响我们使用哪种退避策略</p>
<ul>
<li>
<div>FixedBackOffPolicy</div>
<div>默认退避策略，每 1 秒重试 1 次</div>
</li>
<li>
<div>ExponentialBackOffPolicy</div>
<div>指数退避策略，当设置 multiplier 时使用，每次重试时间间隔为 当前延迟时间 * multiplier。</div>
</li>
<li>
<div>ExponentialRandomBackOffPolicy</div>
<div>指数随机退避策略。在指数退避策略的基础上增加了随机性。具体策略查看 getSleepAndIncrement() 方法</div>
</li>
<li>
<div>UniformRandomBackOffPolicy</div>
<div>均匀随机策略，设置 maxDely 但没有设置 multiplier 时使用，重试间隔会在 maxDelay 和 delay 间随机</div>
</li>
</ul>
<div style="font-weight: bold; font-size: 21px; color: rgba(75, 211, 211, 1); text-decoration: underline">@Recover</div>
<p>作为恢复处理程序的方法调用的注释。重试方法最终会调用标注了@Recover 的方法。</p>
<p>@Recover声明的方法和@Retryable 方法相同类型的返回值，Throwable 第一个参数是可选的（但是，如果没有其他参数匹配，则不带该参数的方法将被调用）。从失败方法的参数列表中依次填充后续参数。</p>
<h2 id="_nav_98" class="blogCustomTitleStyle"><span class="blogCustomTitleIco">v</span>注意事项</h2>
<ul style="list-style-type: decimal">
<li>使用了Spring-Retry是通过捕获异常的方式来触发重试的,<span style="color: rgba(199, 37, 78, 1); background-color: rgba(249, 242, 244, 1); border-radius: 2px">@Retryable</span>注解的方法直接实例化调用不会触发重试，要先将实现类实例化到Spring容器中，然后通过注入等方式使用</li>
<li>Spring-Retry是通过捕获异常的方式来触发重试的,<span style="color: rgba(199, 37, 78, 1); background-color: rgba(249, 242, 244, 1); border-radius: 2px">@Retryable</span>标注方法产生的异常不能使用try-catch捕获，要在方法上抛出异常，不然不会触发重试</li>
<li>recover方法的返回值必须与Spring-Retry是通过捕获异常的方式来触发重试的,<span style="color: rgba(199, 37, 78, 1); background-color: rgba(249, 242, 244, 1); border-radius: 2px">@Retryable</span>方法一致</li>
<li>查询可以进行重试，写操作要慎重，除非业务方支持重入</li>
</ul>
<h2 id="_nav_99" class="blogCustomTitleStyle"><span class="blogCustomTitleIco">v</span>源码地址</h2>
<p><a title="请叫我头头哥" href="https://github.com/toutouge/javademosecond/tree/master/hellolearn" target="_blank" rel="noopener nofollow">https://github.com/toutouge/javademosecond/tree/master/hellolearn</a></p>
<div id="MySignature" style="display: block">
<p id="PSignature" style="padding: 10px 10px 10px 60px; background: url(&quot;http://images.cnblogs.com/cnblogs_com/toutou/682006/o_122329534672560.png&quot;) 1% no-repeat rgba(229, 241, 244, 1); font-family: 微软雅黑; font-size: 12px; border: 1px dashed rgba(224, 224, 224, 1)"> <br>
                作　　者：<strong><span style="font-size: 12px; color: rgba(255, 0, 0, 1)"><a title="请叫我头头哥" href="http://www.cnblogs.com/toutou/" target="_blank">请叫我头头哥</a></span></strong>
                <br>
                出　　处：<a title="请叫我头头哥" href="http://www.cnblogs.com/toutou/" target="_blank">http://www.cnblogs.com/toutou/</a>
                <br>
                关于作者：专注于基础平台的项目开发。如有问题或建议，请多多赐教！
                <br>
                版权声明：本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文链接。
                <br>
                特此声明：所有评论和私信都会在第一时间回复。也欢迎园子的大大们指正错误，共同进步。或者<a title="请叫我头头哥" href="http://msg.cnblogs.com/msg/send/请叫我头头哥">直接私信</a>我
                <br>
                声援博主：如果您觉得文章对您有帮助，可以点击文章右下角<strong><span style="color: rgba(255, 0, 0, 1); font-size: 18pt">【<a id="post-up">推荐</a>】</span></strong>一下。您的鼓励是作者坚持原创和持续写作的最大动力！
                <br>
        </p>













</div>

</div>
<div class="clear"></div>

		</div>
		<div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.04824404806712963" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-05 21:03">2025-01-05 21:03</span>&nbsp;
<a href="https://www.cnblogs.com/toutou">请叫我头头哥</a>&nbsp;
阅读(<span id="post_view_count">3</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18024626" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18024626);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18024626', targetLink: 'https://www.cnblogs.com/toutou/p/18024626/spring-retry', title: 'SpringBoot进阶教程(八十四)spring-retry' })">举报</a>
</div>
	