
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/tianqing/p/18774515" title="发布于 2025-03-16 07:54">
    <span role="heading" aria-level="2">ADO.NET中SQL绑定变量方式总结</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p>最近在项目上遇到几个问题，关于ADO.NET中SQL绑定变量</p>
<p>总结一下，分享给大家。</p>
<h3 data-start="40" data-end="84"><strong data-start="44" data-end="84">1. 使用 <code data-start="52" data-end="66">SqlParameter</code>（推荐方式，防止 SQL 注入）</strong></h3>
<p data-start="85" data-end="128">ADO.NET 提供 <code data-start="96" data-end="110">SqlParameter</code> 来绑定变量，从而提高安全性和性能。</p>
<ul>
<li data-start="915" data-end="929">防止 SQL 注入攻击。</li>
<li data-start="930" data-end="956">支持各种数据类型，避免 SQL 解析器重新编译。</li>
</ul>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Data;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Data.SqlClient;

</span><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> Program
{
    </span><span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> Main()
    {
        </span><span style="color: rgba(0, 0, 255, 1)">string</span> connectionString = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">your_connection_string</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;
        </span><span style="color: rgba(0, 0, 255, 1)">string</span> query = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">SELECT * FROM Users WHERE Username = @Username</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;

        </span><span style="color: rgba(0, 0, 255, 1)">using</span> (SqlConnection conn = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> SqlConnection(connectionString))
        </span><span style="color: rgba(0, 0, 255, 1)">using</span> (SqlCommand cmd = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> SqlCommand(query, conn))
        {
            cmd.Parameters.Add(</span><span style="color: rgba(0, 0, 255, 1)">new</span> SqlParameter(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">@Username</span><span style="color: rgba(128, 0, 0, 1)">"</span>, SqlDbType.NVarChar) { Value = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">test_user</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)"> });

            conn.Open();
            </span><span style="color: rgba(0, 0, 255, 1)">using</span> (SqlDataReader reader =<span style="color: rgba(0, 0, 0, 1)"> cmd.ExecuteReader())
            {
                </span><span style="color: rgba(0, 0, 255, 1)">while</span><span style="color: rgba(0, 0, 0, 1)"> (reader.Read())
                {
                    Console.WriteLine(reader[</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Username</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">]);
                }
            }
        }
    }
}</span></pre>
</div>
<h3><strong>2. 使用 <code data-start="975" data-end="989">AddWithValue</code> 方法</strong></h3>
<p>如果不需要显式指定参数类型，可以用 <code data-start="1013" data-end="1027">AddWithValue</code> 直接传值：</p>
<p>cmd.Parameters.AddWithValue("@Username", "test_user");</p>
<p>需要注意以下2个问题：</p>
<ul>
<li data-start="1116" data-end="1170"><code data-start="1118" data-end="1132">AddWithValue</code> 可能导致隐式转换，影响性能（比如 <code data-start="1150" data-end="1155">int</code> 传 <code data-start="1158" data-end="1168">nvarchar</code>）。</li>
<li data-start="1171" data-end="1192">适用于简单情况，但不推荐用于复杂查询。</li>
</ul>
<h3 data-start="1199" data-end="1238"><strong data-start="1203" data-end="1238">3. 存储过程（Stored Procedure）+ 绑定变量</strong></h3>
<p data-start="1239" data-end="1265">绑定变量也可以用于存储过程，提高安全性和代码复用性。</p>
<ul>
<li data-start="1648" data-end="1674">提高 SQL 复用性和执行效率（缓存执行计划）。</li>
<li data-start="1675" data-end="1691">更安全，避免 SQL 注入。</li>
</ul>
<p data-start="1267" data-end="1292"><strong data-start="1267" data-end="1292">SQL Server 端（创建存储过程）：</strong></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">CREATE</span> <span style="color: rgba(0, 0, 255, 1)">PROCEDURE</span><span style="color: rgba(0, 0, 0, 1)"> GetUserByUsername
    </span><span style="color: rgba(0, 128, 0, 1)">@Username</span> <span style="color: rgba(0, 0, 255, 1)">NVARCHAR</span>(<span style="color: rgba(128, 0, 0, 1); font-weight: bold">50</span><span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 0, 255, 1)">AS</span>
<span style="color: rgba(0, 0, 255, 1)">BEGIN</span>
    <span style="color: rgba(0, 0, 255, 1)">SELECT</span> <span style="color: rgba(128, 128, 128, 1)">*</span> <span style="color: rgba(0, 0, 255, 1)">FROM</span> Users <span style="color: rgba(0, 0, 255, 1)">WHERE</span> Username <span style="color: rgba(128, 128, 128, 1)">=</span> <span style="color: rgba(0, 128, 0, 1)">@Username</span>
<span style="color: rgba(0, 0, 255, 1)">END</span></pre>
</div>
<p>C#调用代码</p>
<div class="cnblogs_code">
<pre>cmd.CommandType =<span style="color: rgba(0, 0, 0, 1)"> CommandType.StoredProcedure;
cmd.CommandText </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">GetUserByUsername</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;
cmd.Parameters.Add(</span><span style="color: rgba(0, 0, 255, 1)">new</span> SqlParameter(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">@Username</span><span style="color: rgba(128, 0, 0, 1)">"</span>, SqlDbType.NVarChar) { Value = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">test_user</span><span style="color: rgba(128, 0, 0, 1)">"</span> });</pre>
</div>
<h3>4. 批量绑定变量（Table-Valued Parameter，TVP）</h3>
<p data-start="1744" data-end="1786">如果需要传递多个值给 SQL 查询，可以使用 TVP 绑定变量，提高批量操作的性能。</p>
<ul>
<li data-start="2314" data-end="2334">适用于批量查询或批量插入，提高性能。</li>
<li data-start="2335" data-end="2354">避免循环执行 SQL 语句的开销。</li>
</ul>
<p data-start="1788" data-end="1816"><strong data-start="1788" data-end="1816">SQL Server 端（创建 TVP 类型）：</strong></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">CREATE</span> TYPE UserTableType <span style="color: rgba(0, 0, 255, 1)">AS</span> <span style="color: rgba(0, 0, 255, 1)">TABLE</span><span style="color: rgba(0, 0, 0, 1)"> 
(
    UserId </span><span style="color: rgba(0, 0, 255, 1)">INT</span><span style="color: rgba(0, 0, 0, 1)">
)</span></pre>
</div>
<p>C# 代码（传递多个 UserId）：</p>
<div class="cnblogs_code">
<pre>DataTable userTable = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> DataTable();
userTable.Columns.Add(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">UserId</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(0, 0, 255, 1)">typeof</span>(<span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)">));
userTable.Rows.Add(</span><span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">);
userTable.Rows.Add(</span><span style="color: rgba(128, 0, 128, 1)">2</span><span style="color: rgba(0, 0, 0, 1)">);

</span><span style="color: rgba(0, 0, 255, 1)">using</span> (SqlCommand cmd = <span style="color: rgba(0, 0, 255, 1)">new</span> SqlCommand(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">SELECT * FROM Users WHERE UserId IN (SELECT UserId FROM @UserTable)</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, conn))
{
    cmd.Parameters.Add(</span><span style="color: rgba(0, 0, 255, 1)">new</span> SqlParameter(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">@UserTable</span><span style="color: rgba(128, 0, 0, 1)">"</span>, SqlDbType.Structured) { TypeName = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">UserTableType</span><span style="color: rgba(128, 0, 0, 1)">"</span>, Value =<span style="color: rgba(0, 0, 0, 1)"> userTable });
}</span></pre>
</div>
<p>以上是C# ADO.NET 绑定变量的几种常见模式和示例代码。</p>
<p>&nbsp;</p>
<p>周国庆</p>
<p>2025/3/16</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.6824454647534722" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-16 07:55">2025-03-16 07:54</span>&nbsp;
<a href="https://www.cnblogs.com/tianqing">Eric zhou</a>&nbsp;
阅读(<span id="post_view_count">92</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18774515" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18774515);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18774515', targetLink: 'https://www.cnblogs.com/tianqing/p/18774515', title: 'ADO.NET中SQL绑定变量方式总结' })">举报</a>
</div>
        