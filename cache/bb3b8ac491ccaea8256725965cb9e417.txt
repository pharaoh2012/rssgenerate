
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/dennyLee2025/p/18656375" title="发布于 2025-01-09 08:27">
    <span role="heading" aria-level="2">掌握设计模式--外观模式</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="外观模式">外观模式</h2>
<p><strong>外观模式 (Facade Pattern)</strong> ，又称为门面模式，是一种结构型设计模式，它通过为一组复杂的子系统提供一个简化的接口，使得客户端可以更容易地访问和使用这些子系统的功能。外观模式隐藏了系统的复杂性，对外提供了一个简单的接口，从而减少了外部系统与子系统之间的依赖关系，提高了系统的可维护性和可扩展性。比如，一个操作系统中有多个复杂的子系统，操作系统的<code>应用</code>与操作系统的<code>底层</code>交互便是通过<code>操作系统接口</code>来实现，应用层的开发不可能直接操作各个子系统的实现，使用外观模式实现<code>分层结构</code>，这样<strong>隐藏复杂</strong>的底层逻辑的同时<strong>简化</strong>应用层开发，大大<strong>降低耦合度</strong>。</p>
<h3 id="主要结构">主要结构</h3>
<ul>
<li><strong>外观 (Facade)</strong>：为一组复杂的子系统提供简化的接口。</li>
<li><strong>子系统 (Subsystem)</strong>：实现具体功能的复杂系统，客户端不需要直接与这些子系统交互。</li>
<li><strong>客户端 (Client)</strong>：需要使用子系统功能的外部代码或模块。</li>
</ul>
<h2 id="案例实现">案例实现</h2>
<p>假设我们有一个子系统涉及多个模块，比如门禁控制、灯光控制和空调控制。使用外观模式，我们可以提供一个简化的接口来控制所有这些设备。</p>
<h3 id="案例类图">案例类图</h3>
<p><img src="https://img2024.cnblogs.com/blog/1209017/202501/1209017-20250106214739493-1736565186.png" alt="image" loading="lazy"></p>
<h3 id="子系统类">子系统类</h3>
<pre><code class="language-java">public class DoorSystem {
    public void openDoor() {
        System.out.println("--开门...");
    }

    public void closeDoor() {
        System.out.println("--关门...");
    }
}

class LightSystem {
    public void turnOnLights() {
        System.out.println("--开灯...");
    }

    public void turnOffLights() {
        System.out.println("--关灯...");
    }
}

class ACSystem {
    public void turnOnAC() {
        System.out.println("--打开空调...");
    }

    public void turnOffAC() {
        System.out.println("--关闭空调...");
    }
}
</code></pre>
<h3 id="外观类">外观类</h3>
<pre><code class="language-java">public class SmartHomeFacade {
    private DoorSystem doorSystem;
    private LightSystem lightSystem;
    private ACSystem acSystem;

    public SmartHomeFacade() {
        this.doorSystem = new DoorSystem();
        this.lightSystem = new LightSystem();
        this.acSystem = new ACSystem();
    }

    // 提供简化接口
    public void arriveHome() {
        doorSystem.openDoor();
        lightSystem.turnOnLights();
        acSystem.turnOnAC();
    }

    public void leaveHome() {
        lightSystem.turnOffLights();
        acSystem.turnOffAC();
        doorSystem.closeDoor();
    }
}
</code></pre>
<h3 id="客户端测试">客户端测试</h3>
<pre><code class="language-java">public class FacadeDemo {
    public static void main(String[] args) {
        SmartHomeFacade homeFacade = new SmartHomeFacade();

        // 当到家时，外观模式简化了操作
        System.out.println("当到家时:");
        homeFacade.arriveHome();

        // 当离家时，外观模式也简化了操作
        System.out.println("当离家时:");
        homeFacade.leaveHome();
    }
}
</code></pre>
<p>测试结果</p>
<blockquote>
<p>当到家时:</p>
<p>--开门...</p>
<p>--开灯...</p>
<p>--打开空调...</p>
<p>当离家时:</p>
<p>--关灯...</p>
<p>--关闭空调...</p>
<p>--关门...</p>
</blockquote>
<p><strong>简单分析</strong></p>
<p><strong>子系统类</strong>：<code>DoorSystem</code>、<code>LightSystem</code> 和 <code>ACSystem</code> 是独立的模块，它们负责具体的功能。</p>
<p><strong>外观类</strong>：<code>SmartHomeFacade</code> 提供了一个简化的接口 (<code>arriveHome</code> 和 <code>leaveHome</code>)，通过它，客户端可以简化与各个子系统的交互。</p>
<p><strong>客户端代码</strong>：客户端通过 <code>SmartHomeFacade</code> 调用 <code>arriveHome</code> 或 <code>leaveHome</code> 方法来控制门、灯和空调。</p>
<p>通过这种方式，外观模式将复杂的操作封装在一个简单的接口后，客户端无需了解子系统的细节，只需调用外观类提供的简化方法即可。</p>
<h2 id="优缺点和应用场景">优缺点和应用场景</h2>
<p><strong>优点</strong></p>
<ol>
<li><strong>简化接口</strong>：客户端通过外观接口与复杂的子系统进行交互，避免了直接与多个子系统打交道。</li>
<li><strong>减少依赖</strong>：客户端只依赖外观类，减少了与复杂子系统之间的耦合度。</li>
<li><strong>提高系统的灵活性</strong>：外观模式为系统提供了一种更简洁的方式来调用子系统，修改子系统时只需要更改外观类，而客户端无需修改。</li>
<li><strong>易于使用</strong>：通过提供简单的接口，使得系统的使用更加直观，便于理解。</li>
</ol>
<p><strong>缺点</strong></p>
<ol>
<li><strong>引入额外的层次</strong>：虽然外观模式简化了接口，但它也引入了一个额外的层次。如果系统本身已经很简单，可能就没有必要使用外观模式。</li>
<li><strong>限制灵活性</strong>：外观模式将系统的复杂性隐藏在外部接口后，可能会限制客户端对子系统的细粒度控制。</li>
</ol>
<p><strong>应用场景</strong></p>
<ul>
<li><strong>复杂子系统的简化</strong>：当系统复杂，且客户端需要通过多个复杂接口进行交互时，可以使用外观模式来简化接口。</li>
<li><strong>集成多个子系统</strong>：当多个子系统协同工作时，外观模式可以为这些子系统提供一个统一的接口。</li>
<li><strong>需要解耦的场景</strong>：外观模式适用于减少客户端与子系统之间耦合度的场景。</li>
</ul>
<h2 id="总结">总结</h2>
<p>外观模式通过将复杂系统的实现细节隐藏起来，提供一个简单的接口，使得客户端代码更加简洁，降低了系统间的耦合度。这种模式非常适用于需要简化复杂子系统交互的场景。</p>
<p><img src="https://img2024.cnblogs.com/blog/1209017/202501/1209017-20250106214754465-90212718.gif" alt="image" loading="lazy"></p>
<p>需要查看往期设计模式文章的，可以在个人主页中或者文章开头的集合中查看，可关注我，持续更新中。。。</p>
<hr>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzI5NDM5NDM1NA==&amp;mid=2247486066&amp;idx=1&amp;sn=e8c7423105ddd0562f50892010941efc&amp;scene=21#wechat_redirect" target="_blank" rel="noopener nofollow">超实用的SpringAOP实战之日志记录</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzI5NDM5NDM1NA==&amp;mid=2247485873&amp;idx=1&amp;sn=08b58de61c716e5c57ff2fddb947f0d8&amp;scene=21#wechat_redirect" target="_blank" rel="noopener nofollow">2023年下半年软考考试重磅消息</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzI5NDM5NDM1NA==&amp;mid=2247485909&amp;idx=1&amp;sn=e20f3b7b413310ca78f90c13305972ab&amp;scene=21#wechat_redirect" target="_blank" rel="noopener nofollow">通过软考后却领取不到实体证书？</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzI5NDM5NDM1NA==&amp;mid=2247485802&amp;idx=1&amp;sn=863cf239124b98d39ec551b6cb67845c&amp;scene=21#wechat_redirect" target="_blank" rel="noopener nofollow">计算机算法设计与分析（第5版）</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzI5NDM5NDM1NA==&amp;mid=2247485015&amp;idx=1&amp;sn=862bc2b379726b89cdb396ec0d325cc0&amp;scene=21#wechat_redirect" target="_blank" rel="noopener nofollow">Java全栈学习路线、学习资源和面试题一条龙</a></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzI5NDM5NDM1NA==&amp;mid=2247485956&amp;idx=1&amp;sn=57407d9f7921254ba19ed70fa3bd6a2d&amp;chksm=ec62ca99db15438f13f2cf96d17a3e282028fa7960af56126caec68fb6eafd46d6e04a10ad0c&amp;scene=21#wechat_redirect" target="_blank" rel="noopener nofollow">软考证书=职称证书？</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzI5NDM5NDM1NA==&amp;mid=2247485837&amp;idx=1&amp;sn=b9b17dfd252882468b8eea31012df6fc&amp;scene=21#wechat_redirect" target="_blank" rel="noopener nofollow">软考中级--软件设计师毫无保留的备考分享</a></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.023401829516203704" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-09 08:28">2025-01-09 08:27</span>&nbsp;
<a href="https://www.cnblogs.com/dennyLee2025">渊渟岳</a>&nbsp;
阅读(<span id="post_view_count">24</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18656375" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18656375);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18656375', targetLink: 'https://www.cnblogs.com/dennyLee2025/p/18656375', title: '掌握设计模式--外观模式' })">举报</a>
</div>
        