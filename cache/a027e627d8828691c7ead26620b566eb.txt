
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/neural-networker/p/19018140" title="发布于 2025-08-02 10:46">
    <span role="heading" aria-level="2">go学习笔记：Go 语言中的 fmt.Sprintf的用法</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p><code>sprintf</code> 是 C 语言中的字符串格式化函数，在 Go 语言中对应的是 <code>fmt.Sprintf</code>。以下是详细用法：</p>
<h2 id="go-语言中的-fmtsprintf">Go 语言中的 fmt.Sprintf</h2>
<h3 id="基本语法">基本语法</h3>
<pre><code class="language-go">fmt.Sprintf(format string, a ...interface{}) string
</code></pre>
<h3 id="常用格式说明符">常用格式说明符</h3>
<h4 id="1-字符串格式化">1. 字符串格式化</h4>
<pre><code class="language-go">name := "张三"
age := 25
result := fmt.Sprintf("姓名：%s，年龄：%d", name, age)
// 输出：姓名：张三，年龄：25
</code></pre>
<h4 id="2-数字格式化">2. 数字格式化</h4>
<pre><code class="language-go">// 整数
num := 42
result := fmt.Sprintf("数字：%d", num)        // 十进制
result = fmt.Sprintf("十六进制：%x", num)      // 小写十六进制
result = fmt.Sprintf("十六进制：%X", num)      // 大写十六进制
result = fmt.Sprintf("八进制：%o", num)        // 八进制
result = fmt.Sprintf("二进制：%b", num)        // 二进制

// 浮点数
price := 123.456
result = fmt.Sprintf("价格：%.2f", price)     // 保留2位小数
result = fmt.Sprintf("价格：%f", price)       // 默认精度
result = fmt.Sprintf("科学计数：%e", price)    // 科学计数法
</code></pre>
<h4 id="3-宽度和精度控制">3. 宽度和精度控制</h4>
<pre><code class="language-go">num := 42
result := fmt.Sprintf("右对齐：%5d", num)      // 宽度5，右对齐
result = fmt.Sprintf("左对齐：%-5d", num)     // 宽度5，左对齐
result = fmt.Sprintf("补零：%05d", num)       // 宽度5，用0填充

price := 123.456
result = fmt.Sprintf("价格：%8.2f", price)    // 宽度8，精度2
</code></pre>
<h4 id="4-布尔值和指针">4. 布尔值和指针</h4>
<pre><code class="language-go">flag := true
result := fmt.Sprintf("状态：%t", flag)        // 布尔值

ptr := &amp;flag
result = fmt.Sprintf("指针：%p", ptr)          // 指针地址
</code></pre>
<h4 id="5-通用格式">5. 通用格式</h4>
<pre><code class="language-go">value := 42
result := fmt.Sprintf("通用格式：%v", value)    // 默认格式
result = fmt.Sprintf("详细格式：%+v", value)   // 详细格式
result = fmt.Sprintf("类型信息：%T", value)    // 类型信息
</code></pre>
<h3 id="实际应用示例">实际应用示例</h3>
<h4 id="1-数据库连接字符串你代码中的用法">1. 数据库连接字符串（你代码中的用法）</h4>
<pre><code class="language-go">dbHost := "localhost"
dbPort := "3306"
dbUser := "root"
dbPass := "password"
dbName := "testdb"

dsn := fmt.Sprintf("%s:%s@tcp(%s:%s)/%s?charset=utf8mb4&amp;parseTime=True&amp;loc=Local", 
    dbUser, dbPass, dbHost, dbPort, dbName)
// 输出：root:password@tcp(localhost:3306)/testdb?charset=utf8mb4&amp;parseTime=True&amp;loc=Local
</code></pre>
<h4 id="2-文件路径拼接">2. 文件路径拼接</h4>
<pre><code class="language-go">basePath := "/home/user"
filename := "data.txt"
fullPath := fmt.Sprintf("%s/%s", basePath, filename)
</code></pre>
<h4 id="3-日志格式化">3. 日志格式化</h4>
<pre><code class="language-go">level := "INFO"
message := "用户登录成功"
timestamp := "2024-01-01 12:00:00"
log := fmt.Sprintf("[%s] %s - %s", timestamp, level, message)
</code></pre>
<h4 id="4-错误信息格式化">4. 错误信息格式化</h4>
<pre><code class="language-go">err := errors.New("连接失败")
result := fmt.Sprintf("操作失败：%v", err)
</code></pre>
<h3 id="常用格式说明符总结">常用格式说明符总结</h3>
<table>
<thead>
<tr>
<th>说明符</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>%s</code></td>
<td>string</td>
<td>字符串</td>
</tr>
<tr>
<td><code>%d</code></td>
<td>int</td>
<td>十进制整数</td>
</tr>
<tr>
<td><code>%f</code></td>
<td>float</td>
<td>浮点数</td>
</tr>
<tr>
<td><code>%t</code></td>
<td>bool</td>
<td>布尔值</td>
</tr>
<tr>
<td><code>%p</code></td>
<td>pointer</td>
<td>指针</td>
</tr>
<tr>
<td><code>%v</code></td>
<td>interface{}</td>
<td>默认格式</td>
</tr>
<tr>
<td><code>%+v</code></td>
<td>interface{}</td>
<td>详细格式</td>
</tr>
<tr>
<td><code>%T</code></td>
<td>interface{}</td>
<td>类型信息</td>
</tr>
<tr>
<td><code>%x</code></td>
<td>int</td>
<td>十六进制（小写）</td>
</tr>
<tr>
<td><code>%X</code></td>
<td>int</td>
<td>十六进制（大写）</td>
</tr>
<tr>
<td><code>%o</code></td>
<td>int</td>
<td>八进制</td>
</tr>
<tr>
<td><code>%b</code></td>
<td>int</td>
<td>二进制</td>
</tr>
</tbody>
</table>
<h3 id="注意事项">注意事项</h3>
<ol>
<li><strong>参数顺序</strong>：格式说明符的顺序必须与参数顺序一致</li>
<li><strong>类型匹配</strong>：确保格式说明符与参数类型匹配</li>
<li><strong>性能</strong>：对于简单字符串拼接，<code>+</code> 操作符可能比 <code>fmt.Sprintf</code> 更快</li>
<li><strong>错误处理</strong>：<code>fmt.Sprintf</code> 不会返回错误，但格式错误可能导致意外输出</li>
</ol>
<p>这就是 <code>fmt.Sprintf</code> 的主要用法，它是 Go 语言中非常实用的字符串格式化工具！</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-08-02 10:47">2025-08-02 10:46</span>&nbsp;
<a href="https://www.cnblogs.com/neural-networker">Lucas_coming</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19018140);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19018140', targetLink: 'https://www.cnblogs.com/neural-networker/p/19018140', title: 'go学习笔记：Go 语言中的 fmt.Sprintf的用法' })">举报</a>
</div>
        