
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/blhmfL3c/p/18919563" title="发布于 2025-06-08 17:22">
    <span role="heading" aria-level="2">图解JavaScript原型：原型链及其分析 | JavaScript图解</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>​​<a href="https://www.logdict.com/archives/1749373703567" target="_self" rel="noopener nofollow">  <img src="https://img2024.cnblogs.com/blog/1036268/202506/1036268-20250608194417835-2011942145.png" alt="" loading="lazy"></a></p>
<p>忽略该图的细节（如内存地址值没有用二进制）<br>
以下是对该图进一步的理解和总结</p>
<h2 id="1-js-对象概念的辨析">1. JS 对象概念的辨析</h2>
<ul>
<li>
<p>对象是什么：保存在堆中一块区域，同时在栈中有一块区域保存其在堆中的地址（也就是我们通常说的该变量指向谁）</p>
</li>
<li>
<p>明确 Object 也是 JS 默认执行的, 可以理解为 var Object = new Object()​ 是 JS 默认执行的</p>
</li>
<li>
<p>明确 Function 也是对象</p>
<pre><code>可以这样理解 `var Function = new Object()` 是JS默认执行的
</code></pre>
</li>
<li>
<p>明确任何一个函数也是一个对象（即我们所说的类型对象（类型对象就是用 function fn(){}​ ​创建出来的函数对象），与之对应的实例对象就是指通过调用构造方法 new 创建的对象或者说直接用{}创建的对象（本质也是调用构造函数））</p>
<pre><code>	/** 如何理解任何一个函数也是一个对象**/
	// 1. 函数不光可以用function关键字创建也可以用如下方法创建
	var fn =  new Function(); // 等同于 function fn(){}
	// 2. Function 也是对象，是这样来的
	var Function = new Object();
	// 3. Object() 是什么：构造方法（JS默认定义的）
</code></pre>
</li>
</ul>
<h2 id="2-js-原型对象的辨析">2. JS 原型对象的辨析</h2>
<ul>
<li>
<p>首先是一个对象</p>
</li>
<li>
<p>其次在代码中表现为：有一个属性其指向这个空对象（或者说是有一个变量，该变量储存该对象的地址）</p>
</li>
</ul>
<h2 id="3-js-隐式原型和显式原型的辨析">3. JS 隐式原型和显式原型的辨析</h2>
<ul>
<li>
<p>显式原型：即在函数中有一个属性叫 prototype 其指向一个空的对象（或者说这个属性的值保存这个空对象的地址值），这个属性就叫做显式原型对象（或者说这个属性保存的地址，通过该地址寻找到一个对象，该对象叫做显式原型对象）</p>
</li>
<li>
<p>隐式原型：对象中同样有一个属性叫__proto__其指向一个空的对象（或者说这个属性的值保存这个空对象的地址值），这个属性就叫做隐式原型对象（或者说这个属性保存的地址，通过该地址寻找到一个对象，该对象叫隐式原型对象）</p>
<ul>
<li>【 需要注意的是一般来说 JS 在创建对象的时候自动把__proto__指向其构造函数的 prototype(也就是说会运行如下代码 <strong>proto</strong> = prototype​) 这两个变量保存同一个空对象的地址】</li>
</ul>
</li>
</ul>
<p>通常我们会有一句话概括上面的内容：即一个对象（这里的对象是指实例对象）的隐式原型对象指向其构造函数（这里是指构造函数对象）的显式原型对象</p>
<h2 id="4-object-的原型对象中的__proto__">4. Object 的原型对象中的__proto__</h2>
<ul>
<li>特殊的：明确 Object 显式原型对象的__proto__（隐式原型对象）值为 null,因为不为 null 那就无限循环了（特殊情况）</li>
</ul>
<h2 id="5-原型链查找">5. 原型链查找</h2>
<p>根据图以及 1-4 的铺垫，可以总结为，首先在该对象上找然后-&gt; 找其隐式原型对象-&gt; 一直往上找到那个__proto__为 null 的对象终止（期间找到了就返回，停止继续往上搜索）</p>
<p>忽略该图的细节（如内存地址值没有用二进制）</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.10381982051388888" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-06-08 19:44">2025-06-08 17:22</span>&nbsp;
<a href="https://www.cnblogs.com/blhmfL3c">blhmfL3c</a>&nbsp;
阅读(<span id="post_view_count">32</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18919563);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18919563', targetLink: 'https://www.cnblogs.com/blhmfL3c/p/18919563', title: '图解JavaScript原型：原型链及其分析 | JavaScript图解' })">举报</a>
</div>
        