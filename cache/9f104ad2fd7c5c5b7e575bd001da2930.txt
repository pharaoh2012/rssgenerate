
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/lvpp13/p/18664485" title="发布于 2025-01-10 18:25">
    <span role="heading" aria-level="2">WPF 怎么利用behavior优雅的给一个Datagrid添加一个全选的功能</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p><span style="font-size: 16px">前言：我在迁移旧项目代码的时候发现别人写很多界面都涉及到一个DataGrid的全选，但是每个都写的很混乱，现在刚好空闲下来，写一个博客，</span></p>
<p><span style="font-size: 16px">给部分可能不太会写这个的同学讲一下，怎么实现全选功能，并且可以在任何项目里面复用这个功能。</span></p>
<p><span style="font-size: 16px">先准备一个Datagrid，我们给这个DataGrid取名为 <span style="color: rgba(255, 0, 0, 1)">dg1</span>。</span></p>
<div class="cnblogs_code">
<pre><span style="font-size: 16px">        &lt;DataGrid AutoGenerateColumns=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">False</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)"> 
                  CanUserAddRows</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">False</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
                  ItemsSource</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">{Binding Path=.}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(255, 0, 0, 1)">
                  x:Name="dg1"</span> Height=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">200</span><span style="color: rgba(128, 0, 0, 1)">"</span>&gt;
        &lt;/DataGrid&gt;</span></pre>
</div>
<p><span style="font-size: 16px">再准备一个实体类，并且给这个类添加属性变更通知，也就是实现 <span style="color: rgba(0, 0, 0, 1)">INotifyPropertyChanged：</span></span></p>
<div class="cnblogs_code">
<pre><span style="font-size: 16px">        <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> People : NotifyPropertyChangedBase
        {
            </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">bool</span><span style="color: rgba(0, 0, 0, 1)"> _isChecked;

            </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">bool</span><span style="color: rgba(0, 0, 0, 1)"> IsChecked
            {
                </span><span style="color: rgba(0, 0, 255, 1)">get</span> { <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> _isChecked; }
                </span><span style="color: rgba(0, 0, 255, 1)">set</span> { _isChecked =<span style="color: rgba(0, 0, 0, 1)"> value; <span style="color: rgba(255, 0, 0, 1)">RaisePropertyChanged();</span> }
            }

            </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">string</span> Name { <span style="color: rgba(0, 0, 255, 1)">get</span>; <span style="color: rgba(0, 0, 255, 1)">set</span><span style="color: rgba(0, 0, 0, 1)">; }
        }

        </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> NotifyPropertyChangedBase : INotifyPropertyChanged
        {
            </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">void</span> RaisePropertyChanged([CallerMemberName] <span style="color: rgba(0, 0, 255, 1)">string</span> PropertyName = <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">)
            {
                PropertyChanged</span>?.Invoke(<span style="color: rgba(0, 0, 255, 1)">this</span>, <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> PropertyChangedEventArgs(PropertyName));
            }

            </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">event</span><span style="color: rgba(0, 0, 0, 1)"> PropertyChangedEventHandler PropertyChanged;
        }</span></span></pre>
</div>
<p><span style="font-size: 16px">上面的 NotifyPropertyChangedBase 是一个基类，也就是说我们的其他类，只要继承了这个类，我们的属性按照上面的添加 RaisePropertyChanged 方法，就可以实现和UI界面的交互。</span></p>
<p><span style="font-size: 16px">把如图所示的Peoples的List赋值给dg1（这里分两种情况，因为DataGrid的数据源一般是List或者DataTable，我们先讲List）</span></p>
<p><span style="font-size: 16px"><img src="https://img2024.cnblogs.com/blog/2064545/202501/2064545-20250110171814863-1974661235.png" alt="" width="403" height="199" loading="lazy"></span></p>
<p><span style="font-size: 16px">&nbsp;当然现在DataGrid我们还没有添加列，所以他还什么都显示不出来，所以我们还要给我们的DataGrid添加列</span></p>
<div class="cnblogs_code">
<pre>        &lt;DataGrid AutoGenerateColumns=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">False</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)"> 
                  CanUserAddRows</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">False</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
                  ItemsSource</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">{Binding Path=.}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
                  x:Name</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">dg1</span><span style="color: rgba(128, 0, 0, 1)">"</span> Height=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">200</span><span style="color: rgba(128, 0, 0, 1)">"</span>&gt;
<span style="color: rgba(255, 0, 0, 1)">            &lt;DataGrid.Columns&gt;
                &lt;DataGridCheckBoxColumn Binding="{Binding IsChecked, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/&gt;
                &lt;DataGridTextColumn Binding="{Binding Name}" Header="Name"/&gt;
            &lt;/DataGrid.Columns&gt;</span>
        &lt;/DataGrid&gt;</pre>
</div>
<p>如上面代码所示，添加了两列，一个是选择列，一个是姓名列。这个时候运行项目，会发现这个选择列特别奇怪，要点两次，里面的checkbox才会被选中，所以我们要改造一下这个选择列，我们自己写一个选择列出来。</p>
<div class="cnblogs_code">
<pre>&lt;DataGrid AutoGenerateColumns=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">False</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)"> 
  CanUserAddRows</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">False</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
  ItemsSource</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">{Binding Path=.}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
  x:Name</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">dg1</span><span style="color: rgba(128, 0, 0, 1)">"</span> Height=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">200</span><span style="color: rgba(128, 0, 0, 1)">"</span>&gt;
    &lt;DataGrid.Columns&gt;
        <span style="color: rgba(255, 0, 0, 1)">&lt;DataGridTemplateColumn&gt;
            &lt;DataGridTemplateColumn.CellTemplate&gt;
                &lt;DataTemplate&gt;
                    &lt;CheckBox IsChecked="{Binding IsChecked,Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" HorizontalAlignment="Center"/&gt;
                &lt;/DataTemplate&gt;
            &lt;/DataGridTemplateColumn.CellTemplate&gt;
        &lt;/DataGridTemplateColumn&gt;</span>
        &lt;DataGridTextColumn Binding=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">{Binding Name}</span><span style="color: rgba(128, 0, 0, 1)">"</span> Header=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Name</span><span style="color: rgba(128, 0, 0, 1)">"</span>/&gt;
    &lt;/DataGrid.Columns&gt;
&lt;/DataGrid&gt;</pre>
</div>
<p>如上图所示，我们把DataGridCheckBoxColumn替换成上面红色的代码部分，也就是重新写一个模板，这个时候运行项目，和原本采用DataGridCheckBoxColumn的效果一样，但是我们现在只需要点击一下按钮就可以选中行了，</p>
<p>为了演示，我们可以自己添加一个TextBlock来清晰的显示我们是选中了哪一行数据</p>
<p>我们在dg1的上面添加一个TextBlock，代码如下</p>
<div class="cnblogs_code">
<pre>&lt;TextBlock <span style="color: rgba(255, 0, 0, 1)">Text="{Binding ElementName=dg1, Path=SelectedItem.Name}"</span> VerticalAlignment=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Top</span><span style="color: rgba(128, 0, 0, 1)">"</span>/&gt;</pre>
</div>
<p>如图所示，我们通过红色部分的代码进行绑定（如果你清晰的知道自己绑定的对象是个什么类型，我们都可以通过像红色部分代码一样来快捷的绑定，剩下的事情就交给WPF去帮我们做就行了）</p>
<p>运行一下我们的代码，然后切换一下选中行，textblock就会跟着选中行一起变化文字</p>
<p><img src="https://img2024.cnblogs.com/blog/2064545/202501/2064545-20250110173426604-1480239972.png" alt="" loading="lazy"></p>
<p>&nbsp;然后现在选择功能有了，还需要添加一个全选的功能，我们把选择列的列头改造一下，代码如下：</p>
<div class="cnblogs_code">
<pre> &lt;DataGrid AutoGenerateColumns=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">False</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)"> 
           CanUserAddRows</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">False</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
           ItemsSource</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">{Binding Path=.}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
           x:Name</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">dg1</span><span style="color: rgba(128, 0, 0, 1)">"</span> Height=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">200</span><span style="color: rgba(128, 0, 0, 1)">"</span>&gt;
     &lt;DataGrid.Columns&gt;
         &lt;DataGridTemplateColumn&gt;
<span style="color: rgba(255, 0, 0, 1)">             &lt;DataGridTemplateColumn.HeaderStyle&gt;
                 &lt;Style TargetType="{x:Type DataGridColumnHeader}"&gt;
                     &lt;Setter Property="Template"&gt;
                         &lt;Setter.Value&gt;
                             &lt;ControlTemplate TargetType="{x:Type DataGridColumnHeader}"&gt;
                                 &lt;CheckBox HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,0,1,0"/&gt;
                             &lt;/ControlTemplate&gt;
                         &lt;/Setter.Value&gt;
                     &lt;/Setter&gt;
                 &lt;/Style&gt;
             &lt;/DataGridTemplateColumn.HeaderStyle&gt;</span>
             &lt;DataGridTemplateColumn.CellTemplate&gt;
                 &lt;DataTemplate&gt;
                     &lt;CheckBox IsChecked=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">{Binding IsChecked,Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}</span><span style="color: rgba(128, 0, 0, 1)">"</span> HorizontalAlignment=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Center</span><span style="color: rgba(128, 0, 0, 1)">"</span>/&gt;
                 &lt;/DataTemplate&gt;
             &lt;/DataGridTemplateColumn.CellTemplate&gt;
         &lt;/DataGridTemplateColumn&gt;
         &lt;DataGridTextColumn Binding=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">{Binding Name}</span><span style="color: rgba(128, 0, 0, 1)">"</span> Header=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Name</span><span style="color: rgba(128, 0, 0, 1)">"</span>/&gt;
     &lt;/DataGrid.Columns&gt;
 &lt;/DataGrid&gt;</pre>
</div>
<p>上面红色部分的代码是我们新增的代码，添加完以后，运行一下项目，就会发现列头变成了一个选择框，我们就是通过点击这个选择框来实现全选和全不选的功能</p>
<p>关键部分来了，如果我们只是想实现功能的话，就很简单，给这个checkbox添加checked事件和unchecked事件就行了，代码如下：</p>
<div class="cnblogs_code">
<pre> &lt;CheckBox HorizontalAlignment=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Center</span><span style="color: rgba(128, 0, 0, 1)">"</span> VerticalAlignment=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Center</span><span style="color: rgba(128, 0, 0, 1)">"</span> Margin=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">0,0,1,0</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
           Checked</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">CheckBox_Checked</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
           Unchecked</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">CheckBox_Unchecked</span><span style="color: rgba(128, 0, 0, 1)">"</span>/&gt;</pre>
</div>
<div class="cnblogs_code">
<pre>        <span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span> CheckBox_Checked(<span style="color: rgba(0, 0, 255, 1)">object</span><span style="color: rgba(0, 0, 0, 1)"> sender, RoutedEventArgs e)
        {
            </span><span style="color: rgba(0, 0, 255, 1)">foreach</span>(<span style="color: rgba(0, 0, 255, 1)">var</span> people <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> Peoples)
            {
                people.IsChecked </span>= <span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">;
            }
        }

        </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span> CheckBox_Unchecked(<span style="color: rgba(0, 0, 255, 1)">object</span><span style="color: rgba(0, 0, 0, 1)"> sender, RoutedEventArgs e)
        {
            </span><span style="color: rgba(0, 0, 255, 1)">foreach</span> (<span style="color: rgba(0, 0, 255, 1)">var</span> people <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> Peoples)
            {
                people.IsChecked </span>= <span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">;
            }
        }</span></pre>
</div>
<p>添加完上面代码，我们运行项目，点击全选框，就可以实现全选和全不选，但是这样子一点也不优雅，不能复用，所以我们要改一下。</p>
<p>改这个就需要用到behavior这个东西，这个如果没用过的话，会觉得很不好理解，但是它不是很难，多用就知道怎么用了。</p>
<p>先去nuget上面安装一下依赖包</p>
<p><img src="https://img2024.cnblogs.com/blog/2064545/202501/2064545-20250110174548935-340062413.png" alt="" loading="lazy"></p>
<p>&nbsp;找到上面这个&nbsp; Behaviors.WPF,安装一下，然后添加如下代码：</p>
<div class="cnblogs_code">
<pre>    <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span> DataGridSelectedAllBehavior : Behavior&lt;CheckBox&gt;<span style="color: rgba(0, 0, 0, 1)">
    {
        </span><span style="color: rgba(0, 0, 255, 1)">protected</span> <span style="color: rgba(0, 0, 255, 1)">override</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> OnAttached()
        {
            AssociatedObject.Checked </span>+=<span style="color: rgba(0, 0, 0, 1)"> AssociatedObject_Checked;
            AssociatedObject.Unchecked </span>+=<span style="color: rgba(0, 0, 0, 1)"> AssociatedObject_Unchecked;
        }

        </span><span style="color: rgba(0, 0, 255, 1)">protected</span> <span style="color: rgba(0, 0, 255, 1)">override</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> OnDetaching()
        {
            AssociatedObject.Checked </span>-=<span style="color: rgba(0, 0, 0, 1)"> AssociatedObject_Checked;
            AssociatedObject.Unchecked </span>-=<span style="color: rgba(0, 0, 0, 1)"> AssociatedObject_Unchecked;
        }

        </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span> AssociatedObject_Unchecked(<span style="color: rgba(0, 0, 255, 1)">object</span><span style="color: rgba(0, 0, 0, 1)"> sender, RoutedEventArgs e)
        {
            MessageBox.Show(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">hello unchecked</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
        }

        </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span> AssociatedObject_Checked(<span style="color: rgba(0, 0, 255, 1)">object</span><span style="color: rgba(0, 0, 0, 1)"> sender, RoutedEventArgs e)
        {
            MessageBox.Show(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">hello checked</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
        }
    }</span></pre>
</div>
<div class="cnblogs_code">
<pre>&lt;CheckBox HorizontalAlignment=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Center</span><span style="color: rgba(128, 0, 0, 1)">"</span> VerticalAlignment=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Center</span><span style="color: rgba(128, 0, 0, 1)">"</span> Margin=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">0,0,1,0</span><span style="color: rgba(128, 0, 0, 1)">"</span>&gt;
    <span style="color: rgba(255, 0, 0, 1)">&lt;i:Interaction.Behaviors&gt;
        &lt;local:DataGridSelectedAllBehavior/&gt;
    &lt;/i:Interaction.Behaviors&gt;</span>
&lt;/CheckBox&gt;</pre>
</div>
<p>把之前的checked事件和unchecked事件给删掉，改成红色代码部分，添加命名空间：xmlns:i="http://schemas.microsoft.com/xaml/behaviors"，<br>local是你项目的命名空间，根据项目添加，我的项目是叫wpfapp1，所以我的是：xmlns:local="clr-namespace:WpfApp1"</p>
<p>我们再运行一下项目，点击一下选择框，就会出现下面的提示</p>
<p><img src="https://img2024.cnblogs.com/blog/2064545/202501/2064545-20250110175321824-2036908354.png" alt="" loading="lazy"></p>
<p>&nbsp;如果成功的弹出了上面的提示，就说明到现在，代码都没有问题了，然后就是接着调整代码了。</p>
<p>&nbsp;我们的 DataGridSelectedAllBehavior是继承的Behavior&lt;CheckBox&gt;，这里的Behavior括号里面是一个泛型，因为我们是把这个Behavior附加到CheckBox上的，所以我们就选择CheckBox，如果你想附加别的，比如Button，你就填写Button。</p>
<p>&nbsp;然后它下面就会有AssociatedObject这个对象，我们附加的是什么东西，这个AssociatedObject就是个什么东西</p>
<p>&nbsp;然后我们把代码改成如下所示：</p>
<div class="cnblogs_code">
<pre>        <span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span> AssociatedObject_Unchecked(<span style="color: rgba(0, 0, 255, 1)">object</span><span style="color: rgba(0, 0, 0, 1)"> sender, RoutedEventArgs e)
        {
            </span><span style="color: rgba(255, 0, 0, 1)">var peoples = AssociatedObject.DataContext as List&lt;People&gt;;
            if (peoples != null)
            {
                foreach(var people in peoples)
                {
                    people.IsChecked = false</span><span style="color: rgba(0, 0, 0, 1)"><span style="color: rgba(255, 0, 0, 1)">;
                }
            }</span>
        }

        </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span> AssociatedObject_Checked(<span style="color: rgba(0, 0, 255, 1)">object</span><span style="color: rgba(0, 0, 0, 1)"> sender, RoutedEventArgs e)
        {
            </span><span style="color: rgba(255, 0, 0, 1)">var peoples = AssociatedObject.DataContext as List&lt;People&gt;;
            if (peoples != null)
            {
                foreach (var people in peoples)
                {
                    people.IsChecked = true</span><span style="color: rgba(0, 0, 0, 1)"><span style="color: rgba(255, 0, 0, 1)">;
                }
            }</span>
        }</span></pre>
</div>
<p>到这里还没完，你运行会发现，我们的AssociatedObject的DataContext是一个null值，所以我们还要修改一下xaml里面的代码</p>
<div class="cnblogs_code">
<pre>&lt;CheckBox HorizontalAlignment=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Center</span><span style="color: rgba(128, 0, 0, 1)">"</span> VerticalAlignment=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Center</span><span style="color: rgba(128, 0, 0, 1)">"</span> Margin=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">0,0,1,0</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(255, 0, 0, 1)">
          DataContext="{Binding RelativeSource={RelativeSource AncestorType=DataGrid}, Path=DataContext}"</span>&gt;
    &lt;i:Interaction.Behaviors&gt;
        &lt;local:DataGridSelectedAllBehavior/&gt;
    &lt;/i:Interaction.Behaviors&gt;
&lt;/CheckBox&gt;</pre>
</div>
<p>通过上面红色部分的代码，我们就可以把我的这个Peoples的list传递给我们的AssociatedObject，我们再运行项目，就实现了全选和全不选的功能。</p>
<p>但是到这里还没完，因为People这个对象肯定不能用到项目里面去啊，这个只是一个测试类，项目里面又不是每个类都有&nbsp; 选择&nbsp; 这个属性的，那怎么办</p>
<p>我们通过接口来实现</p>
<div class="cnblogs_code">
<pre>    <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> People : NotifyPropertyChangedBase<span style="color: rgba(255, 0, 0, 1)">, IModelIsChecked</span>
    {
        </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">bool</span><span style="color: rgba(0, 0, 0, 1)"> _isChecked;

        </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">bool</span><span style="color: rgba(0, 0, 0, 1)"> IsChecked
        {
            </span><span style="color: rgba(0, 0, 255, 1)">get</span> { <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> _isChecked; }
            </span><span style="color: rgba(0, 0, 255, 1)">set</span> { _isChecked =<span style="color: rgba(0, 0, 0, 1)"> value; RaisePropertyChanged(); }
        }

        </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">string</span> Name { <span style="color: rgba(0, 0, 255, 1)">get</span>; <span style="color: rgba(0, 0, 255, 1)">set</span><span style="color: rgba(0, 0, 0, 1)">; }
    }

    </span><span style="color: rgba(255, 0, 0, 1)">public interface IModelIsChecked
    {
        bool IsChecked { get; set; }
    }</span></pre>
</div>
<p>添加一个&nbsp;&nbsp;IModelIsChecked&nbsp; 的interface，然后让我们的People继承它</p>
<p>再修改一下我们behavior的代码</p>
<div class="cnblogs_code">
<pre>        <span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span> AssociatedObject_Unchecked(<span style="color: rgba(0, 0, 255, 1)">object</span><span style="color: rgba(0, 0, 0, 1)"> sender, RoutedEventArgs e)
        {
            </span><span style="color: rgba(0, 0, 255, 1)">var</span> peoples = AssociatedObject.DataContext <span style="color: rgba(0, 0, 255, 1)">as</span><span style="color: rgba(0, 0, 0, 1)"><span style="color: rgba(255, 0, 0, 1)"> IList</span>;
            </span><span style="color: rgba(0, 0, 255, 1)">if</span> (peoples != <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">)
            {
                </span><span style="color: rgba(0, 0, 255, 1)">foreach</span>(<span style="color: rgba(0, 0, 255, 1)">var</span> people <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> peoples)
                {
                    </span><span style="color: rgba(0, 0, 255, 1)">var</span> item = people <span style="color: rgba(0, 0, 255, 1)">as</span><span style="color: rgba(0, 0, 0, 1)"><span style="color: rgba(255, 0, 0, 1)"> IModelIsChecked</span>;
                    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (item != <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">)
                    {
                        item.IsChecked </span>= <span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">;
                    }
                }
            }
        }

        </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span> AssociatedObject_Checked(<span style="color: rgba(0, 0, 255, 1)">object</span><span style="color: rgba(0, 0, 0, 1)"> sender, RoutedEventArgs e)
        {
            </span><span style="color: rgba(0, 0, 255, 1)">var</span> peoples = AssociatedObject.DataContext <span style="color: rgba(0, 0, 255, 1)">as</span><span style="color: rgba(0, 0, 0, 1)"><span style="color: rgba(255, 0, 0, 1)"> IList</span>;
            </span><span style="color: rgba(0, 0, 255, 1)">if</span> (peoples != <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">)
            {
                </span><span style="color: rgba(0, 0, 255, 1)">foreach</span> (<span style="color: rgba(0, 0, 255, 1)">var</span> people <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> peoples)
                {
                    </span><span style="color: rgba(0, 0, 255, 1)">var</span> item = people <span style="color: rgba(0, 0, 255, 1)">as</span><span style="color: rgba(0, 0, 0, 1)"><span style="color: rgba(255, 0, 0, 1)"> IModelIsChecked</span>;
                    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (item != <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">)
                    {
                        item.IsChecked </span>= <span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">;
                    }
                }
            }
        }</span></pre>
</div>
<p>这样我们的类就和我们的Behavior解耦了，我们只要后面的类实现了这个IModelIsChecked 的接口，就都能实现全选功能了。</p>
<p>现在还有一种情况，就是如果我们的数据源不是一个List，而是一个DataTable的情况，一个是可以采用把DataTable转化成List的形式然后走上面的逻辑，还有一个就是同样可以修改我们的behavior来实现</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span> AssociatedObject_Unchecked(<span style="color: rgba(0, 0, 255, 1)">object</span><span style="color: rgba(0, 0, 0, 1)"> sender, RoutedEventArgs e)
{
    </span><span style="color: rgba(0, 0, 255, 1)">var</span> peoples = AssociatedObject.DataContext <span style="color: rgba(0, 0, 255, 1)">as</span><span style="color: rgba(0, 0, 0, 1)"> IList;
    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (peoples != <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">)
    {
        </span><span style="color: rgba(0, 0, 255, 1)">foreach</span>(<span style="color: rgba(0, 0, 255, 1)">var</span> people <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> peoples)
        {
            </span><span style="color: rgba(0, 0, 255, 1)">var</span> item = people <span style="color: rgba(0, 0, 255, 1)">as</span><span style="color: rgba(0, 0, 0, 1)"> IModelIsChecked;
            </span><span style="color: rgba(0, 0, 255, 1)">if</span> (item != <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">)
            {
                item.IsChecked </span>= <span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">;
            }
        }
    }

    </span><span style="color: rgba(255, 0, 0, 1)">var dataTable = AssociatedObject.DataContext as DataTable;
    if(dataTable != null)
    {
        foreach(DataRow row in dataTable.Rows)
        {
            row["IsChecked"] = false</span><span style="color: rgba(0, 0, 0, 1)"><span style="color: rgba(255, 0, 0, 1)">;
        }
    }</span>
}

</span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span> AssociatedObject_Checked(<span style="color: rgba(0, 0, 255, 1)">object</span><span style="color: rgba(0, 0, 0, 1)"> sender, RoutedEventArgs e)
{
    </span><span style="color: rgba(0, 0, 255, 1)">var</span> peoples = AssociatedObject.DataContext <span style="color: rgba(0, 0, 255, 1)">as</span><span style="color: rgba(0, 0, 0, 1)"> IList;
    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (peoples != <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">)
    {
        </span><span style="color: rgba(0, 0, 255, 1)">foreach</span> (<span style="color: rgba(0, 0, 255, 1)">var</span> people <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> peoples)
        {
            </span><span style="color: rgba(0, 0, 255, 1)">var</span> item = people <span style="color: rgba(0, 0, 255, 1)">as</span><span style="color: rgba(0, 0, 0, 1)"> IModelIsChecked;
            </span><span style="color: rgba(0, 0, 255, 1)">if</span> (item != <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">)
            {
                item.IsChecked </span>= <span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">;
            }
        }
    }

    </span><span style="color: rgba(255, 0, 0, 1)">var dataTable = AssociatedObject.DataContext as DataTable;
    if (dataTable != null)
    {
        foreach (DataRow row in dataTable.Rows)
        {
            row["IsChecked"] = true</span><span style="color: rgba(0, 0, 0, 1)"><span style="color: rgba(255, 0, 0, 1)">;
        }
    }</span>
}</span></pre>
</div>
<div class="cnblogs_code">
<pre>            DataTable dt = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> DataTable();
            dt.Columns.Add(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">IsChecked</span><span style="color: rgba(128, 0, 0, 1)">"</span>,<span style="color: rgba(0, 0, 255, 1)">typeof</span>(<span style="color: rgba(0, 0, 255, 1)">bool</span><span style="color: rgba(0, 0, 0, 1)">));
            dt.Columns.Add(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Name</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(0, 0, 255, 1)">typeof</span>(<span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)">));
            dt.Rows.Add(</span><span style="color: rgba(0, 0, 255, 1)">false</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Tom</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
            dt.Rows.Add(</span><span style="color: rgba(0, 0, 255, 1)">false</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Jerry</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
            dg1.DataContext </span>= dt;</pre>
</div>
<p>只要我们的DataTable有名为IsChecked的列就好了</p>
<p>如果没有IsChecked怎么办</p>
<p><img src="https://img2024.cnblogs.com/blog/2064545/202501/2064545-20250110182317048-622905500.png" alt="" loading="lazy"></p>
<p>你知道我要说什么的</p>
<p>这里推荐大家加一下QQ群：332035933&nbsp; &nbsp;（这里面平时基本上没什么人说话，但是如果有人问问题，都会很积极的回答，java，.net，vue的大佬都有）。</p>
<p>&nbsp;</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.40974828792824075" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-10 18:25">2025-01-10 18:25</span>&nbsp;
<a href="https://www.cnblogs.com/lvpp13">BearHan</a>&nbsp;
阅读(<span id="post_view_count">60</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18664485" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18664485);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18664485', targetLink: 'https://www.cnblogs.com/lvpp13/p/18664485', title: 'WPF 怎么利用behavior优雅的给一个Datagrid添加一个全选的功能' })">举报</a>
</div>
        