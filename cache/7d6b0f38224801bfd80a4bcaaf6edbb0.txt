
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/vipwan/p/18820391" title="发布于 2025-04-11 12:31">
    <span role="heading" aria-level="2">Aspnet Core 10 Preview3已对最小API提供参数验证支持</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="前言">前言</h2>
<p>相信大家都或多或少用上了Minimal API,快速简洁,性能炸裂,是快速开发API端口的不二之选!但是呢目前正式版为止 最小API还并不内置支持对请求参数的内置验证支持,比如<code>[Required]</code>,或者任何需要验证的地方,往往我们要实现这样的逻辑都必须自主扩展一个EndpointFilter,这个在NET社区也算是一个不大不小的槽点,不过呢MS总算是千呼万唤始出来,在NET10的第三个预览版提供了对<code>System.ComponentModel.DataAnnotations</code>内置验证支持!</p>
<h4 id="体验">体验</h4>
<p>安装升级到最新释出的NET10Preview3,然后完成下面操作:</p>
<pre><code class="language-csharp">builder.Services.AddValidation();
</code></pre>
<p>在项目文件（.csproj）中配置 InterceptorsNamespaces 属性以启用自动生成的拦截器。示例配置如下：</p>
<pre><code class="language-xml">&lt;PropertyGroup&gt;
  &lt;!-- 启用验证属性拦截器的生成 --&gt; 
  &lt;InterceptorsNamespaces&gt;$(InterceptorsNamespaces);Microsoft.AspNetCore.Http.Validation.Generated&lt;/InterceptorsNamespaces&gt;
&lt;/PropertyGroup&gt;
</code></pre>
<p>然后<code>源生成器</code>就可以工作了,会自动发现验证类型 实现机制会自动查找在最小 API 处理程序中定义的类型或其基类型中所配置的验证属性，并在每个终端节点上通过添加的终端节点筛选条件执行验证。这种方式大大简化了开发者的工作量，无需手动编写验证逻辑。</p>
<p>比如下面的API定义:</p>
<pre><code class="language-csharp">app.MapPost("/products",
    ([EvenNumber(ErrorMessage = "产品ID必须")] int productId, [Required] string name)
        =&gt; TypedResults.Ok(productId))
</code></pre>
<p>如果产品ID未传,或者name为空那么将会返回 <code>HTTP 400 Bad Request</code>的错误!</p>
<p>如果需要排除这个Endpoint的参数验证只需要添加上<code>.DisableValidation()</code>即可:</p>
<pre><code class="language-csharp">app.MapPost("/products",
    ([EvenNumber(ErrorMessage = "产品ID必须")] int productId) =&gt; TypedResults.Ok(productId))
    .DisableValidation();
</code></pre>
<p>当然了除了内置于<code>System.ComponentModel.DataAnnotations</code>的验证特性之外,你完全可以扩展自己的验证特性,比如和业务相关的复杂验证情况,只需要实现<code>IValidatableObject</code>接口即可,也可以继承自<code>ValidationAttribute</code>实现一些简单的个性化验证</p>
<h4 id="最后">最后</h4>
<p>验证支持机制使 MinimalAPI 能够在请求数据进入业务逻辑之前自动执行验证，从而提高安全性和代码维护性。同时，开发者既可以利用内置的验证功能，也可以通过自定义验证属性和接口实现来满足特定业务需求。通过这种灵活的设计，ASP.NET Core 的MinimalAPI能够在保持简洁的同时，提供强大而可靠的验证支持。</p>
<p>当前还属于早期预览版本,可能后续正式版本的发布还会有些许变化,前期了解即可,待正式发布再用于生产~</p>
<p>我们一起期待正式版的早日到来!</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="3.160169454099537" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-11 12:32">2025-04-11 12:31</span>&nbsp;
<a href="https://www.cnblogs.com/vipwan">万雅虎</a>&nbsp;
阅读(<span id="post_view_count">220</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18820391);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18820391', targetLink: 'https://www.cnblogs.com/vipwan/p/18820391', title: 'Aspnet Core 10 Preview3已对最小API提供参数验证支持' })">举报</a>
</div>
        