
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/xiezhr/p/19001990" title="发布于 2025-07-24 08:11">
    <span role="heading" aria-level="2">那些年我们一起追过的Java技术，现在真的别再追了！</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>大家好，我是晓凡。</p>
<h3 id="一写在前面">一、写在前面</h3>
<p>前两天，有粉丝朋友小赵，兴冲冲地问我：“凡哥，我想学JSP，网上教程可便宜了，9块9包邮！”</p>
<p>我当场差点把刚喝下去的冰美式喷到他脸上。</p>
<p>“兄弟，JSP现在连坟头草都三米高了，你学它干嘛？给历史博物馆交简历吗？”</p>
<p>小赵一脸懵：“可我看招聘网站上，还有公司写‘熟悉JSP优先’啊！”</p>
<p>我叹了口气：“那八成是HR把十年前的JD复制粘贴了，就跟把‘熟练使用传呼机’写进岗位要求一样。”</p>
<p>所以今天，咱们来聊聊那些当年火得一塌糊涂，如今连骨灰盒都找不到的Java技术。</p>
<p><strong>友情提示：本文可能会引起部分老程序员的“爷青回”症状，请自备纸巾。</strong></p>
<hr>
<h3 id="二-第一位选手jsp">二、 第一位选手：JSP</h3>
<p>想当年，JSP（Java Server Pages）可是Web开发界的顶流。<br>
写个页面，<code>&lt;% %&gt;</code>里嵌Java代码，跟现在小学生写作文“有一天，我捡到了一分钱”一样顺手。</p>
<p><strong>为啥当年火？</strong></p>
<ul>
<li>不用学一堆前端框架，一个<code>out.println("&lt;h1&gt;Hello World&lt;/h1&gt;")</code>就能跑。</li>
<li>配合Struts1，简直是“双击666”的黄金搭档。</li>
</ul>
<p><strong>为啥现在凉了？</strong></p>
<ul>
<li>代码和HTML搅成一锅粥，后期维护堪比“屎山考古”。</li>
<li>现在随便一个Vue/React，能把JSP按在地上摩擦出。</li>
</ul>
<p><strong>真实案例：</strong><br>
我2015年接了个老项目，用JSP+Struts1做了个OA系统。</p>
<p>客户找我改需求，我打开eclipse，看到几千行的<code>&lt;% if (user.isAdmin()) { %&gt;</code>，差点当场跑路。</p>
<hr>
<h3 id="三-第二位选手struts12">三、 第二位选手：Struts1/2</h3>
<p>Struts1有多经典？经典到当年面试必问：“说说Struts1的工作流程。”<br>
现在再问，面试官可能会以为你在背历史书。</p>
<p><strong>Struts1的辉煌：</strong></p>
<ul>
<li>第一个真正意义上的MVC框架，让Servlet从“野路子”变成“正规军”。</li>
<li>配合JSP，简直是“黄金搭档”，就像赵本山和宋丹丹。</li>
</ul>
<p><strong>Struts2的尴尬：</strong></p>
<ul>
<li>刚出来时被当成“救世主”，结果因为漏洞太多，被黑客当成“提款机”。</li>
<li>配置XML复杂到能写小说，一个<code>struts-config.xml</code>比小说还长。</li>
</ul>
<p><strong>现在什么情况？</strong><br>
Spring MVC和Spring Boot出来后，Struts直接被打入冷宫。<br>
去年我在GitHub上搜Struts2，最新的commit还是2018年，下面有条评论：“Still alive?（还活着？）”<br>
官方回复：“Yes, but barely.（活是活着，但只剩一口气了。）”</p>
<p><strong>一句话总结：</strong><br>
Struts就像诺基亚N95，当年砸核桃神器，现在只能当备用机，还得插张2G卡。</p>
<hr>
<h3 id="四-第三位选手hibernate的hql">四、 第三位选手：Hibernate的HQL</h3>
<p>Hibernate当年有多牛？牛到不用写SQL，直接<code>session.save(user)</code>就能存数据库。<br>
但HQL（Hibernate Query Language）这个玩意儿，现在看就像用文言文写SQL。</p>
<p><strong>HQL的迷惑行为：</strong></p>
<ul>
<li>写个查询：<code>from User u where u.name = '老王'</code>，看起来挺优雅。</li>
<li>一旦关联三四个表，HQL能长到让你怀疑人生，比如：<br>
<code>from User u left join fetch u.orders o left join fetch o.items i where u.id = 1</code></li>
</ul>
<p><strong>为啥被淘汰？</strong></p>
<ul>
<li>JPA和Spring Data JPA出来后，直接<code>findByName("老王")</code>，连SQL都不用写。</li>
<li>MyBatis更狠，SQL写回XML里，至少还能Ctrl+C/Ctrl+V，HQL改起来像在解奥数题。</li>
</ul>
<p><strong>真实吐槽：</strong><br>
我同事小李，当年用HQL写了2000行的查询，后来数据库从MySQL迁到Oracle，HQL直接罢工。<br>
小李一边改代码一边骂：“HQL这玩意儿，跟女朋友一样，说翻脸就翻脸，说生气就生气。”</p>
<p><strong>一句话总结：</strong><br>
HQL就像文言文，当年觉得高大上，现在只想说：“还是原生SQL好写！”</p>
<hr>
<h3 id="五-第四位选手applet">五、 第四位选手：Applet</h3>
<p>00后可能没见过Applet，这玩意儿当年能在网页里直接跑Java代码。<br>
比如打开一个网页，突然弹出一个“计算鸡兔同笼”的小程序，八成就是Applet干的。</p>
<p><strong>Applet的巅峰：</strong></p>
<ul>
<li>2000年初，网上全是“用Java Applet实现贪吃蛇”的教程。</li>
<li>配合Swing，能做出“五彩斑斓的黑”的界面。</li>
</ul>
<p><strong>死因：</strong></p>
<ul>
<li>浏览器不支持了（Chrome从2015年就彻底拉黑）。</li>
<li>安全问题太多，跑个Applet等于给电脑开扇门，黑客想来就来。</li>
</ul>
<p><strong>现在去哪了？</strong><br>
Applet的坟头在Oracle官网的“Deprecated”页面里，和Flash Player作伴。<br>
去年我清理旧硬盘，发现一个2015年写的Applet版“连连看”，运行时报错：<code>java.lang.UnsupportedClassVersionError</code>，像极了前任发来的“在吗？”</p>
<p><strong>一句话总结：</strong><br>
Applet就像早年的Flash小游戏，现在打开只能看到“此插件不受支持”，和青春一样，回不去了。</p>
<hr>
<h3 id="六-第五位选手ejb">六、 第五位选手：EJB</h3>
<p>EJB（Enterprise JavaBeans）当年是“高大上”的代名词。<br>
一说“我在用EJB做分布式”，就像现在说“我在用区块链重构支付系统”。</p>
<p><strong>EJB的“壕”点：</strong></p>
<ul>
<li>支持分布式事务，能同时扣你银行卡、支付宝、微信的钱（误）。</li>
<li>配合WebLogic/WebSphere，部署一次能跑半年（启动也花半小时）。</li>
</ul>
<p><strong>为啥凉了？</strong></p>
<ul>
<li>配置复杂到需要专门的“EJB工程师”，现在这岗位跟“传呼机维修师”差不多。</li>
<li>Spring出来后，一个<code>@Transactional</code>注解搞定分布式事务，EJB当场失业。</li>
</ul>
<p><strong>真实故事：</strong><br>
我2015年接了个银行项目，用EJB2.0写了3个月，光配置文件就堆了几百M。<br>
后来客户说：“能不能快点上线？”我默默改成了Spring，一周搞定。<br>
客户感动得差点给我颁锦旗：“技术选型鬼才”。</p>
<p><strong>一句话总结：</strong><br>
EJB就像企业级开发的航空母舰，现在Spring Boot是快艇，谁还开航母去打鱼？</p>
<hr>
<h3 id="七-那些半死不活的技术">七、 那些“半死不活”的技术</h3>
<ul>
<li><strong>Ant</strong>：Maven和Gradle出来后，Ant成了“构建工具界的IE6”。</li>
<li><strong>JSTL</strong>：当年为了不在JSP里写Java代码，现在连JSP都没了。</li>
<li><strong>J2ME</strong>：手机Java开发，当年用诺基亚N73跑“贪吃蛇”，现在只剩下安卓/iOS一统江湖了。</li>
</ul>
<hr>
<h3 id="八技术没有永远的c位但程序员有">八、技术没有永远的C位，但程序员有</h3>
<p>写到这里，突然有点感慨。</p>
<p>我们这一代人，见证了Java从“一次编写，到处运行”到“一次重构，到处报错”。</p>
<p>那些被淘汰的技术，就像年轻时的QQ农场，现在看虽然非主流，但那是我们一路跌跌撞撞走来的见证。<br>
所以，别再纠结“要不要学JSP”了，就像别再纠结“要不要买BP机”一样。</p>
<p><strong>技术会过时，但解决问题的思路不会。</strong></p>
<p>今天的Spring Cloud、Kotlin、GraalVM，可能就是明天的“JSP”。</p>
<p>保持好奇，保持学习，保持头发（尽量）。</p>
<p>最后，用一句某位大佬的话结尾：“程序员最大的护城河，不是会多少框架，而是能随时推倒重来。”</p>
<p>共勉，我去改Bug了。</p>
<hr>
<p>希望文章对您有所帮助</p>
<p>我是晓凡，再小的帆也能远航</p>
<p>我们下期再见 ヾ(•ω•`)o  (●'◡'●)</p>

</div>
<div id="MySignature" role="contentinfo">
    <p>本文来自博客园，作者：<a href="https://www.cnblogs.com/xiezhr/" target="_blank">程序员晓凡</a>，转载请注明原文链接：<a href="https://www.cnblogs.com/xiezhr/p/19001990" target="_blank">https://www.cnblogs.com/xiezhr/p/19001990</a></p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-07-24 08:11">2025-07-24 08:11</span>&nbsp;
<a href="https://www.cnblogs.com/xiezhr">程序员晓凡</a>&nbsp;
阅读(<span id="post_view_count">475</span>)&nbsp;
评论(<span id="post_comment_count">2</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19001990);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19001990', targetLink: 'https://www.cnblogs.com/xiezhr/p/19001990', title: '那些年我们一起追过的Java技术，现在真的别再追了！' })">举报</a>
</div>
        