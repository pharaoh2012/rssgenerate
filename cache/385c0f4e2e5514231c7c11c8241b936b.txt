
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/min2k/p/18659133" title="发布于 2025-01-08 10:13">
    <span role="heading" aria-level="2">AI 与 Mermaid 使用教程之流程图 - 从入门到精通</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        <img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108101159717-1861879908.png" alt="AI 与 Mermaid 使用教程之流程图 - 从入门到精通" class="desc_img">
        Mermaid 流程图的基本语法，流程图由节点（几何形状）和边（箭头或线）组成。Mermaid 代码定义了如何创建节点和边，并适应不同的箭头类型、多方向箭头，以及与子图的链接。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>本文由&nbsp;<a href="https://docs.min2k.com/zh/mermaid/syntax/flowchart.html?id=flowcharts-basic-syntax" target="_blank" rel="noopener nofollow">Mermaid中文文档</a>&nbsp;整理而来，并且它同时提供了一个 <a href="https://www.min2k.com/tools/mermaid/" target="_blank" rel="noopener nofollow">Mermaid在线编辑器</a>，支持在线编辑与生成流程图。<br>
在文章的末尾我们将介绍如何使用AI来自动生成 Mermaid 流程图。</p>
<h1 id="mermaid-流程图---基本语法">Mermaid 流程图 - 基本语法</h1>
<p>流程图由<strong>节点</strong>（几何形状）和<strong>边</strong>（箭头或线）组成。Mermaid 代码定义了如何创建节点和边，并适应不同的箭头类型、多方向箭头，以及与子图的链接。</p>
<pre><code class="language-warning">如果在流程图节点中使用“end”这个词，整个词或其中的字母必须大写（例如“End”或“END”）。在小写字母中输入“end”将会导致流程图出现问题。
</code></pre>
<pre><code class="language-warning">如果在连接的流程图节点中使用“o”或“x”作为首字母，请在前面加一个空格或将该字母大写（例如“dev--- ops”、“dev---Ops”）。

输入“A---oB”将创建一个[circle edge](#circle-edge-example)。

输入“A---xB”将创建一个[cross edge](#cross-edge-example)。
</code></pre>
<h3 id="节点">节点</h3>
<pre><code class="language-mermaid-example">---
title: 节点
---
flowchart LR
    id
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108091110562-322522941.png" alt="" loading="lazy"></p>
<pre><code class="language-note">id是显示在框中的内容。
</code></pre>
<pre><code class="language-tip">除了`flowchart`，也可以使用`graph`。
</code></pre>
<h3 id="带文本的节点">带文本的节点</h3>
<p>也可以设置与id不同的文本。 如果多次进行此操作，最后找到的文本将用于该节点。如果稍后为该节点定义边时，您可以省略文本定义。先前定义的文本将在渲染框时使用。</p>
<pre><code class="language-mermaid-example">---
title: 带文本的节点
---
flowchart LR
    id1[这是框中的文本]
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108091142233-1007518152.png" alt="" loading="lazy"></p>
<h4 id="unicode文本">Unicode文本</h4>
<p>使用<code>"</code>将unicode文本括起来。</p>
<pre><code class="language-mermaid-example">flowchart LR
    id["这是 ❤ Unicode"]
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108091135788-1635109163.png" alt="" loading="lazy"></p>
<h4 id="markdown格式化">Markdown格式化</h4>
<p>使用双引号和反引号 "` text `" 将Markdown文本括起来。</p>
<pre><code class="language-mermaid-example">%%{init: {"flowchart": {"htmlLabels": false}} }%%
flowchart LR
    markdown["`这一行 **是** _Markdown_`"]
    newLines["`Line 1
    Line 2
    Line 3`"]
    markdown --&gt; newLines
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108091205130-964213324.png" alt="" loading="lazy"></p>
<h3 id="方向">方向</h3>
<p>此语句声明了流程图的方向。</p>
<p>这声明了流程图从上到下定向（<code>TD</code>或<code>TB</code>）。</p>
<pre><code class="language-mermaid-example">flowchart TD
    Start --&gt; Stop
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108091215229-198546277.png" alt="" loading="lazy"></p>
<p>这声明了流程图从左到右定向（<code>LR</code>）。</p>
<pre><code class="language-mermaid-example">flowchart LR
    Start --&gt; Stop
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108091224894-1429604717.png" alt="" loading="lazy"></p>
<p>可能的流程图方向:</p>
<ul>
<li>TB - 从上到下</li>
<li>TD - 从上到下/与从上到下相同</li>
<li>BT - 从下到上</li>
<li>RL - 从右到左</li>
<li>LR - 从左到右</li>
</ul>
<h2 id="节点形状">节点形状</h2>
<h3 id="带圆边的节点">带圆边的节点</h3>
<pre><code class="language-mermaid-example">flowchart LR
    id1(这是框中的文本)
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108091853459-750320329.png" alt="" loading="lazy"></p>
<h3 id="体育馆形状的节点">体育馆形状的节点</h3>
<pre><code class="language-mermaid-example">flowchart LR
    id1([这是框中的文本])
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108091900910-1524713515.png" alt="" loading="lazy"></p>
<h3 id="子程序形状的节点">子程序形状的节点</h3>
<pre><code class="language-mermaid-example">flowchart LR
    id1[[这是框中的文本]]
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108091908087-1757275211.png" alt="" loading="lazy"></p>
<h3 id="圆柱形状的节点">圆柱形状的节点</h3>
<pre><code class="language-mermaid-example">flowchart LR
    id1[(数据库)]
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108091916295-1769645043.png" alt="" loading="lazy"></p>
<h3 id="圆形的节点">圆形的节点</h3>
<pre><code class="language-mermaid-example">flowchart LR
    id1((这是圆形中的文本))
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108091927671-1686687678.png" alt="" loading="lazy"></p>
<h3 id="不对称形状的节点">不对称形状的节点</h3>
<pre><code class="language-mermaid-example">flowchart LR
    id1&gt;这是框中的文本]
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108091934300-1700456456.png" alt="" loading="lazy"></p>
<p>目前只有上面的形状可能，而不是其镜像形状。<em>这可能会在未来的版本中改变。</em></p>
<h3 id="菱形节点">菱形节点</h3>
<pre><code class="language-mermaid-example">flowchart LR
    id1{这是框中的文本}
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108091943226-1769808899.png" alt="" loading="lazy"></p>
<h3 id="六边形节点">六边形节点</h3>
<pre><code class="language-mermaid-example">flowchart LR
    id1{{这是框中的文本}}
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108091950106-1759276525.png" alt="" loading="lazy"></p>
<h3 id="平行四边形">平行四边形</h3>
<pre><code class="language-mermaid-example">flowchart TD
    id1[/这是框中的文本/]
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108092043761-1049618185.png" alt="" loading="lazy"></p>
<h3 id="反平行四边形">反平行四边形</h3>
<pre><code class="language-mermaid-example">flowchart TD
    id1[\这是框中的文本\]
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108092057037-1148764103.png" alt="" loading="lazy"></p>
<h3 id="梯形">梯形</h3>
<pre><code class="language-mermaid-example">flowchart TD
    A[/圣诞节\]
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108092106728-1560480958.png" alt="" loading="lazy"></p>
<h3 id="反梯形">反梯形</h3>
<pre><code class="language-mermaid-example">flowchart TD
    B[\去购物/]
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108092133119-1972036674.png" alt="" loading="lazy"></p>
<h3 id="双圈">双圈</h3>
<pre><code class="language-mermaid-example">flowchart TD
    id1(((这是圈中的文本)))
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108092141560-815701294.png" alt="" loading="lazy"></p>
<h2 id="mermaid流程图中的扩展节点形状v1130">Mermaid流程图中的扩展节点形状（v11.3.0+）</h2>
<p>Mermaid引入30种新形状，以增强流程图创建的灵活性和精确性。这些新形状提供了更多选项，用于在流程图中可视化地表示过程、决策、事件、数据存储以及其他元素，提高了清晰度和语义意义。</p>
<p>新的形状定义语法</p>
<p>Mermaid现在支持一种通用语法来定义形状类型，以适应不断增长的形状数量。此语法允许您使用清晰和灵活的格式将特定形状分配给节点：</p>
<pre><code>A@{ shape: rect }
</code></pre>
<p>此语法创建节点A为矩形。其渲染方式与<code>A["A"]</code>或<code>A</code>相同。</p>
<h3 id="新形状的示例流程图">新形状的示例流程图</h3>
<p>以下是利用一些新引入的形状的示例流程图：</p>
<pre><code class="language-mermaid-example">flowchart RL
    A@{ shape: manual-file, label: "文件处理"}
    B@{ shape: manual-input, label: "用户输入"}
    C@{ shape: docs, label: "多个文档"}
    D@{ shape: procs, label: "过程自动化"}
    E@{ shape: paper-tape, label: "纸质记录"}
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108092150839-643016741.png" alt="" loading="lazy"></p>
<h3 id="过程">过程</h3>
<pre><code class="language-mermaid-example">flowchart TD
    A@{ shape: rect, label: "这是一个过程" }
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108092158138-604247875.png" alt="" loading="lazy"></p>
<h3 id="事件">事件</h3>
<pre><code class="language-mermaid-example">flowchart TD
    A@{ shape: rounded, label: "这是一个事件" }
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108092212448-1809374863.png" alt="" loading="lazy"></p>
<h3 id="终点体育馆">终点（体育馆）</h3>
<pre><code class="language-mermaid-example">flowchart TD
    A@{ shape: stadium, label: "终点" }
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108092219498-1583816296.png" alt="" loading="lazy"></p>
<h3 id="子过程">子过程</h3>
<pre><code class="language-mermaid-example">flowchart TD
    A@{ shape: subproc, label: "这是一个子过程" }
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108092227071-1847967614.png" alt="" loading="lazy"></p>
<h3 id="数据库圆柱">数据库（圆柱）</h3>
<pre><code class="language-mermaid-example">flowchart TD
    A@{ shape: cyl, label: "数据库" }
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108092234007-159692874.png" alt="" loading="lazy"></p>
<h3 id="开始圆形">开始（圆形）</h3>
<pre><code class="language-mermaid-example">flowchart TD
    A@{ shape: circle, label: "开始" }
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108092243984-1646624790.png" alt="" loading="lazy"></p>
<h3 id="不对称形状">不对称形状</h3>
<pre><code class="language-mermaid-example">flowchart TD
    A@{ shape: odd, label: "不对称形状" }
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108092250280-595504440.png" alt="" loading="lazy"></p>
<h3 id="决策菱形">决策（菱形）</h3>
<pre><code class="language-mermaid-example">flowchart TD
    A@{ shape: diamond, label: "决策" }
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108092300530-1585062568.png" alt="" loading="lazy"></p>
<h3 id="准备条件六边形">准备条件（六边形）</h3>
<pre><code class="language-mermaid-example">flowchart TD
    A@{ shape: hex, label: "准备条件" }
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108092313622-1074953246.png" alt="" loading="lazy"></p>
<h3 id="数据输入输出倾斜右">数据输入/输出（倾斜右）</h3>
<pre><code class="language-mermaid-example">flowchart TD
    A@{ shape: lean-r, label: "输入/输出" }
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108092326149-442177700.png" alt="" loading="lazy"></p>
<h3 id="数据输入输出倾斜左">数据输入/输出（倾斜左）</h3>
<pre><code class="language-mermaid-example">flowchart TD
    A@{ shape: lean-l, label: "输出/输入" }
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108092337628-1843726060.png" alt="" loading="lazy"></p>
<h3 id="优先操作底部梯形">优先操作（底部梯形）</h3>
<pre><code class="language-mermaid-example">flowchart TD
    A@{ shape: trap-b, label: "优先操作" }
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108092343591-976905999.png" alt="" loading="lazy"></p>
<h3 id="手动操作顶部梯形">手动操作（顶部梯形）</h3>
<pre><code class="language-mermaid-example">flowchart TD
    A@{ shape: trap-t, label: "手动操作" }
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108092403514-1199765895.png" alt="" loading="lazy"></p>
<h3 id="停止双圈">停止（双圈）</h3>
<pre><code class="language-mermaid-example">flowchart TD
    A@{ shape: dbl-circ, label: "停止" }
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108092806835-397773376.png" alt="" loading="lazy"></p>
<h3 id="文本块">文本块</h3>
<pre><code class="language-mermaid-example">flowchart TD
    A@{ shape: text, label: "这是一个文本块" }
</code></pre>
<p>这是一个文本块</p>
<h3 id="卡片缺口矩形">卡片（缺口矩形）</h3>
<pre><code class="language-mermaid-example">flowchart TD
    A@{ shape: notch-rect, label: "卡片" }
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108092819133-538241787.png" alt="" loading="lazy"></p>
<h3 id="有线阴影过程">有线/阴影过程</h3>
<pre><code class="language-mermaid-example">flowchart TD
    A@{ shape: lin-rect, label: "有线过程" }
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108092825840-821803481.png" alt="" loading="lazy"></p>
<h3 id="开始小圆形">开始（小圆形）</h3>
<pre><code class="language-mermaid-example">flowchart TD
    A@{ shape: sm-circ, label: "小开始" }
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108092832709-2102536292.png" alt="" loading="lazy"></p>
<h3 id="停止框架圆形">停止（框架圆形）</h3>
<pre><code class="language-mermaid-example">flowchart TD
    A@{ shape: framed-circle, label: "停止" }
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108092840897-286132295.png" alt="" loading="lazy"></p>
<h3 id="分叉合并长矩形">分叉/合并（长矩形）</h3>
<pre><code class="language-mermaid-example">flowchart TD
    A@{ shape: fork, label: "分叉或合并" }
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108092848995-1170049387.png" alt="" loading="lazy"></p>
<h3 id="整理沙漏">整理（沙漏）</h3>
<pre><code class="language-mermaid-example">flowchart TD
    A@{ shape: hourglass, label: "整理" }
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108092857439-533252980.png" alt="" loading="lazy"></p>
<h3 id="注释大括号">注释（大括号）</h3>
<pre><code class="language-mermaid-example">flowchart TD
    A@{ shape: comment, label: "注释" }
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108092927801-743677477.png" alt="" loading="lazy"></p>
<h3 id="右侧注释右大括号">右侧注释（右大括号）</h3>
<pre><code class="language-mermaid-example">flowchart TD
    A@{ shape: brace-r, label: "注释" }
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108092957837-2001321424.png" alt="" loading="lazy"></p>
<h3 id="两侧都带大括号的注释">两侧都带大括号的注释</h3>
<pre><code class="language-mermaid-example">flowchart TD
    A@{ shape: braces, label: "注释" }
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108093005424-1710765626.png" alt="" loading="lazy"></p>
<h3 id="通信链接闪电">通信链接（闪电）</h3>
<pre><code class="language-mermaid-example">flowchart TD
    A@{ shape: bolt, label: "通信链接" }
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108093013961-1181112028.png" alt="" loading="lazy"></p>
<h3 id="文档">文档</h3>
<pre><code class="language-mermaid-example">flowchart TD
    A@{ shape: doc, label: "文档" }
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108093026726-1122554929.png" alt="" loading="lazy"></p>
<h3 id="延迟半圆角矩形">延迟（半圆角矩形）</h3>
<pre><code class="language-mermaid-example">flowchart TD
    A@{ shape: delay, label: "延迟" }
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108093032773-124804414.png" alt="" loading="lazy"></p>
<h3 id="直接存储横向圆柱">直接存储（横向圆柱）</h3>
<pre><code class="language-mermaid-example">flowchart TD
    A@{ shape: das, label: "直接访问存储" }
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108093052110-1729830199.png" alt="" loading="lazy"></p>
<h3 id="磁盘存储有线圆柱">磁盘存储（有线圆柱）</h3>
<pre><code class="language-mermaid-example">flowchart TD
    A@{ shape: lin-cyl, label: "磁盘存储" }
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108093059347-226558882.png" alt="" loading="lazy"></p>
<h3 id="显示曲线梯形">显示（曲线梯形）</h3>
<pre><code class="language-mermaid-example">flowchart TD
    A@{ shape: curv-trap, label: "显示" }
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108093106315-1186795117.png" alt="" loading="lazy"></p>
<h3 id="分割过程分割矩形">分割过程（分割矩形）</h3>
<pre><code class="language-mermaid-example">flowchart TD
    A@{ shape: div-rect, label: "分割过程" }
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108093112890-594926760.png" alt="" loading="lazy"></p>
<h3 id="提取小三角形">提取（小三角形）</h3>
<pre><code class="language-mermaid-example">flowchart TD
    A@{ shape: tri, label: "提取" }
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108093119820-1166688950.png" alt="" loading="lazy"></p>
<h3 id="内部存储窗格">内部存储（窗格）</h3>
<pre><code class="language-mermaid-example">flowchart TD
    A@{ shape: win-pane, label: "内部存储" }
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108093127234-1876058120.png" alt="" loading="lazy"></p>
<h3 id="交点填充圆形">交点（填充圆形）</h3>
<pre><code class="language-mermaid-example">flowchart TD
    A@{ shape: f-circ, label: "交点" }
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108093133668-1948586644.png" alt="" loading="lazy"></p>
<h3 id="有线文档">有线文档</h3>
<pre><code class="language-mermaid-example">flowchart TD
    A@{ shape: lin-doc, label: "有线文档" }
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108093152384-582097410.png" alt="" loading="lazy"></p>
<h3 id="循环限制缺口五边形">循环限制（缺口五边形）</h3>
<pre><code class="language-mermaid-example">flowchart TD
    A@{ shape: notch-pent, label: "循环限制" }
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108093201754-2085072489.png" alt="" loading="lazy"></p>
<h3 id="手动文件翻转三角形">手动文件（翻转三角形）</h3>
<pre><code class="language-mermaid-example">flowchart TD
    A@{ shape: flip-tri, label: "手动文件" }
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108093211576-1295621127.png" alt="" loading="lazy"></p>
<h3 id="手动输入倾斜矩形">手动输入（倾斜矩形）</h3>
<pre><code class="language-mermaid-example">flowchart TD
    A@{ shape: sl-rect, label: "手动输入" }
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108093219449-985165233.png" alt="" loading="lazy"></p>
<h3 id="多文档堆叠文档">多文档（堆叠文档）</h3>
<pre><code class="language-mermaid-example">flowchart TD
    A@{ shape: docs, label: "多个文档" }
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108093227882-598147176.png" alt="" loading="lazy"></p>
<h3 id="多过程堆叠矩形">多过程（堆叠矩形）</h3>
<pre><code class="language-mermaid-example">flowchart TD
    A@{ shape: processes, label: "多个过程" }
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108093239603-2121462015.png" alt="" loading="lazy"></p>
<h3 id="纸带标志">纸带（标志）</h3>
<pre><code class="language-mermaid-example">flowchart TD
    A@{ shape: flag, label: "纸带" }
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108093251510-1477777911.png" alt="" loading="lazy"></p>
<h3 id="存储数据领结矩形">存储数据（领结矩形）</h3>
<pre><code class="language-mermaid-example">flowchart TD
    A@{ shape: bow-rect, label: "存储数据" }
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108093303358-1294260364.png" alt="" loading="lazy"></p>
<h3 id="总结交叉圆形">总结（交叉圆形）</h3>
<pre><code class="language-mermaid-example">flowchart TD
    A@{ shape: cross-circ, label: "总结" }
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108093311862-222796326.png" alt="" loading="lazy"></p>
<h3 id="标记文档">标记文档</h3>
<pre><code class="language-mermaid-example">flowchart TD
    A@{ shape: tag-doc, label: "标记文档" }
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108093321338-198365084.png" alt="" loading="lazy"></p>
<h3 id="标记过程标记矩形">标记过程（标记矩形）</h3>
<pre><code class="language-mermaid-example">flowchart TD
    A@{ shape: tag-rect, label: "标记过程" }
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108093352440-840330662.png" alt="" loading="lazy"></p>
<h2 id="mermaid流程图中的特殊形状v1130">Mermaid流程图中的特殊形状（v11.3.0+）</h2>
<p>Mermaid还引入了2种特殊形状，以增强您的流程图：<strong>图标</strong>和<strong>图像</strong>。这些形状允许您直接在流程图中包含图标和图像，提供更多视觉上下文和清晰度。</p>
<h3 id="图标形状">图标形状</h3>
<p>您可以使用<code>icon</code>形状在流程图中包含一个图标。要使用图标，您需要先注册图标包。请按照<a href="../config/icons.md" target="_blank" rel="noopener nofollow">此处</a>提供的说明进行操作。定义图标形状的语法如下：</p>
<pre><code class="language-mermaid-example">flowchart TD
    A@{ icon: "fa:user", form: "square", label: "用户图标", pos: "t", h: 60 }
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108093404222-674804946.png" alt="" loading="lazy"></p>
<h3 id="参数">参数</h3>
<ul>
<li><strong>icon</strong>: 注册图标包中图标的名称。</li>
<li><strong>form</strong>: 指定图标的背景形状。如果未定义，则图标没有背景。可选项包括：
<ul>
<li><code>square</code></li>
<li><code>circle</code></li>
<li><code>rounded</code></li>
</ul>
</li>
<li><strong>label</strong>: 与图标关联的文本标签。这可以是任何字符串。如果未定义，则不会显示标签。</li>
<li><strong>pos</strong>: 标签的位置。如果未定义，标签默认为在图标的底部。可选值包括：
<ul>
<li><code>t</code></li>
<li><code>b</code></li>
</ul>
</li>
<li><strong>h</strong>: 图标的高度。如果未定义，默认为48，这是最小值。</li>
</ul>
<h3 id="图像形状">图像形状</h3>
<p>您可以使用<code>image</code>形状在流程图中包含图像。定义图像形状的语法如下：</p>
<pre><code class="language-mermaid-example">flowchart TD
    A@{ img: "https://example.com/image.png", label: "图像标签", pos: "t", w: 60, h: 60, constraint: "off" }
</code></pre>
<h3 id="参数-1">参数</h3>
<ul>
<li><strong>img</strong>: 要显示的图像的URL。</li>
<li><strong>label</strong>: 与图像关联的文本标签。这可以是任何字符串。如果未定义，则不会显示标签。</li>
<li><strong>pos</strong>: 标签的位置。如果未定义，标签默认为图像的底部。可选值包括：
<ul>
<li><code>t</code></li>
<li><code>b</code></li>
</ul>
</li>
<li><strong>w</strong>: 图像的宽度。如果未定义，默认为图像的自然宽度。</li>
<li><strong>h</strong>: 图像的高度。如果未定义，默认为图像的自然高度。</li>
<li><strong>constraint</strong>: 决定图像是否应该限制节点大小。此设置还确保图像保持其原始纵横比，相应地调整高度（<code>h</code>）以适应宽度（<code>w</code>）。如果未定义，默认为<code>off</code>，可选值为：
<ul>
<li><code>on</code></li>
<li><code>off</code></li>
</ul>
</li>
</ul>
<p>这些新形状为您的流程图提供额外的灵活性和视觉吸引力，使其更具信息性和吸引力。</p>
<h2 id="节点之间的链接">节点之间的链接</h2>
<p>节点可以用链接/边连接。可以使用不同类型的链接或附加文本字符串到链接。</p>
<h3 id="带箭头的链接">带箭头的链接</h3>
<pre><code class="language-mermaid-example">flowchart LR
    A--&gt;B
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108093457640-1801747441.png" alt="" loading="lazy"></p>
<h3 id="开放链接">开放链接</h3>
<pre><code class="language-mermaid-example">flowchart LR
    A --- B
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108095141523-808164961.png" alt="" loading="lazy"></p>
<h3 id="链接上的文本">链接上的文本</h3>
<pre><code class="language-mermaid-example">flowchart LR
    A-- 这是文本! ---B
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108093518006-2076821309.png" alt="" loading="lazy"></p>
<p>或</p>
<pre><code class="language-mermaid-example">flowchart LR
    A---|这是文本|B
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108093530292-222718890.png" alt="" loading="lazy"></p>
<h3 id="带箭头和文本的链接">带箭头和文本的链接</h3>
<pre><code class="language-mermaid-example">flowchart LR
    A--&gt;|文本|B
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108093537091-1663438631.png" alt="" loading="lazy"><br>
或</p>
<pre><code class="language-mermaid-example">flowchart LR
    A-- 文本 --&gt;B
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108093547773-912909927.png" alt="" loading="lazy"></p>
<h3 id="虚线链接">虚线链接</h3>
<pre><code class="language-mermaid-example">flowchart LR
   A-.-&gt;B;
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108093600747-806615570.png" alt="" loading="lazy"></p>
<h3 id="带文本的虚线链接">带文本的虚线链接</h3>
<pre><code class="language-mermaid-example">flowchart LR
   A-. 文本 .-&gt; B
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108093615174-938633484.png" alt="" loading="lazy"></p>
<h3 id="粗线链接">粗线链接</h3>
<pre><code class="language-mermaid-example">flowchart LR
   A ==&gt; B
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108093626772-676035859.png" alt="" loading="lazy"></p>
<h3 id="带文本的粗线链接">带文本的粗线链接</h3>
<pre><code class="language-mermaid-example">flowchart LR
   A == 文本 ==&gt; B
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108093638095-1772813004.png" alt="" loading="lazy"></p>
<h3 id="无形链接">无形链接</h3>
<p>这在某些情况下是一个有用的工具，当你想更改节点的默认位置时。</p>
<pre><code class="language-mermaid-example">flowchart LR
    A ~~~ B
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108093644698-923850214.png" alt="" loading="lazy"></p>
<h3 id="链式连接">链式连接</h3>
<p>可以在同一行中声明多个链接，如下所示：</p>
<pre><code class="language-mermaid-example">flowchart LR
   A -- 文本 --&gt; B -- 文本2 --&gt; C
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108093655300-1415786472.png" alt="" loading="lazy"></p>
<p>也可以在同一行中声明多个节点链接，如下所示：</p>
<pre><code class="language-mermaid-example">flowchart LR
   a --&gt; b &amp; c--&gt; d
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108093704259-1341653205.png" alt="" loading="lazy"><br>
您可以以非常清晰的方式描述依赖关系。就像下面的一行代码：</p>
<pre><code class="language-mermaid-example">flowchart TB
    A &amp; B--&gt; C &amp; D
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108093721176-50005196.png" alt="" loading="lazy"></p>
<p>如果您使用基本语法描述相同的图形，将需要四行代码。值得警告的是，人们可能在Markdown表单中过度使用此功能，使流程图更难阅读。瑞典词“lagom”浮现在我的脑海中。它的意思是，不太多也不少。对于表达式语法也是如此。</p>
<pre><code class="language-mermaid-example">flowchart TB
    A --&gt; C
    A --&gt; D
    B --&gt; C
    B --&gt; D
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108093734731-902128705.png" alt="" loading="lazy"></p>
<h2 id="新箭头类型">新箭头类型</h2>
<p>现在支持新的箭头类型：</p>
<ul>
<li>圆形边</li>
<li>交叉边</li>
</ul>
<h3 id="圆形边示例">圆形边示例</h3>
<pre><code class="language-mermaid-example">flowchart LR
    A --o B
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108093742515-1090200094.png" alt="" loading="lazy"></p>
<h3 id="交叉边示例">交叉边示例</h3>
<pre><code class="language-mermaid-example">flowchart LR
    A --x B
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108093748844-230359424.png" alt="" loading="lazy"></p>
<h2 id="多方向箭头">多方向箭头</h2>
<p>可以使用多方向箭头。</p>
<pre><code class="language-mermaid-example">flowchart LR
    A o--o B
    B &lt;--&gt; C
    C x--x D
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108093759362-276149558.png" alt="" loading="lazy"></p>
<h3 id="链接的最小长度">链接的最小长度</h3>
<p>流程图中的每个节点最终在呈现图中分配到一个等级，即垂直或横向水平（根据流程图的定向），基于与其链接的节点。默认情况下，链接可以跨越任意数量的等级，但您可以要求任何链接比其他链接更长，通过在链接定义中添加额外的破折号。</p>
<p>在下面的例子中，链接从节点_B_到节点_E_添加了两个额外的破折号，因此它跨度比常规链接多两个等级：</p>
<pre><code class="language-mermaid-example">flowchart TD
    A[开始] --&gt; B{是否是?}
    B --&gt;|是| C[好的]
    C --&gt; D[重新考虑]
    D --&gt; B
    B ----&gt;|否| E[结束]
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108093809580-507385581.png" alt="" loading="lazy"></p>
<blockquote>
<p><strong>注意</strong> 链接可能仍然超出所请求数量的等级，由渲染引擎调整以适应其他请求。</p>
</blockquote>
<p>当链接标签写在链接的中间时，额外的破折号必须添加在链接的右侧。以下示例等同于前一个示例：</p>
<pre><code class="language-mermaid-example">flowchart TD
    A[开始] --&gt; B{是否是?}
    B -- 是 --&gt; C[好的]
    C --&gt; D[重新考虑]
    D --&gt; B
    B -- 否 ----&gt; E[结束]
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108093820486-763544024.png" alt="" loading="lazy"></p>
<p>对于虚线或粗线链接，需要添加的字符是等号或点，如下表所示：</p>
<table>
<thead>
<tr>
<th>长度</th>
<th style="text-align: center">1</th>
<th style="text-align: center">2</th>
<th style="text-align: center">3</th>
</tr>
</thead>
<tbody>
<tr>
<td>正常</td>
<td style="text-align: center"><code>---</code></td>
<td style="text-align: center"><code>----</code></td>
<td style="text-align: center"><code>-----</code></td>
</tr>
<tr>
<td>带箭头正常</td>
<td style="text-align: center"><code>--&gt;</code></td>
<td style="text-align: center"><code>---&gt;</code></td>
<td style="text-align: center"><code>----&gt;</code></td>
</tr>
<tr>
<td>粗线</td>
<td style="text-align: center"><code>===</code></td>
<td style="text-align: center"><code>====</code></td>
<td style="text-align: center"><code>=====</code></td>
</tr>
<tr>
<td>带箭头的粗线</td>
<td style="text-align: center"><code>==&gt;</code></td>
<td style="text-align: center"><code>===&gt;</code></td>
<td style="text-align: center"><code>====&gt;</code></td>
</tr>
<tr>
<td>虚线</td>
<td style="text-align: center"><code>-.-</code></td>
<td style="text-align: center"><code>-..-</code></td>
<td style="text-align: center"><code>-...-</code></td>
</tr>
<tr>
<td>带箭头的虚线</td>
<td style="text-align: center"><code>-.-&gt;</code></td>
<td style="text-align: center"><code>-..-&gt;</code></td>
<td style="text-align: center"><code>-...-&gt;</code></td>
</tr>
</tbody>
</table>
<h2 id="破坏语法的特殊字符">破坏语法的特殊字符</h2>
<p>可以将文本放在引号内，以呈现更麻烦的字符。如下例所示：</p>
<pre><code class="language-mermaid-example">flowchart LR
    id1["这是一段（文本）"]
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108093831590-1319620576.png" alt="" loading="lazy"></p>
<h3 id="转义字符的实体代码">转义字符的实体代码</h3>
<p>可以使用以下语法转义字符。</p>
<pre><code class="language-mermaid-example">    flowchart LR
        A["一个双引号:#quot;"] --&gt; B["十进制字符:#9829;"]
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108093841202-1266587087.png" alt="" loading="lazy"></p>
<p>给定的数字是十进制，因此<code>#</code>可以被编码为<code>#35;</code>。同样也支持使用HTML字符名称。</p>
<h2 id="子图">子图</h2>
<pre><code>subgraph title
    graph definition
end
</code></pre>
<p>以下是示例：</p>
<pre><code class="language-mermaid-example">flowchart TB
    c1--&gt;a2
    subgraph one
    a1--&gt;a2
    end
    subgraph two
    b1--&gt;b2
    end
    subgraph three
    c1--&gt;c2
    end
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108093854208-27230995.png" alt="" loading="lazy"></p>
<p>您还可以为子图设置显式id。</p>
<pre><code class="language-mermaid-example">flowchart TB
    c1--&gt;a2
    subgraph ide1 [one]
    a1--&gt;a2
    end
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108093909399-286343641.png" alt="" loading="lazy"></p>
<h3 id="流程图">流程图</h3>
<p>使用图形类型流程图，还可以将边设置到子图及其返回，如下所示：</p>
<pre><code class="language-mermaid-example">flowchart TB
    c1--&gt;a2
    subgraph one
    a1--&gt;a2
    end
    subgraph two
    b1--&gt;b2
    end
    subgraph three
    c1--&gt;c2
    end
    one --&gt; two
    three --&gt; two
    two --&gt; c2
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108093922373-2035016023.png" alt="" loading="lazy"></p>
<h3 id="子图中的方向">子图中的方向</h3>
<p>使用图类型流程图，可以使用方向语句设置子图的渲染方向，如下所示。</p>
<pre><code class="language-mermaid-example">flowchart LR
  subgraph TOP
    direction TB
    subgraph B1
        direction RL
        i1 --&gt;f1
    end
    subgraph B2
        direction BT
        i2 --&gt;f2
    end
  end
  A --&gt; TOP --&gt; B
  B1 --&gt; B2
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108093932227-459844439.png" alt="" loading="lazy"></p>
<h4 id="限制">限制</h4>
<p>如果子图的任何节点与外部链接，子图方向将被忽略。相反，子图将继承父图的方向：</p>
<pre><code class="language-mermaid-example">flowchart LR
    subgraph subgraph1
        direction TB
        top1[top] --&gt; bottom1[bottom]
    end
    subgraph subgraph2
        direction TB
        top2[top] --&gt; bottom2[bottom]
    end
    %% ^ 这些子图是相同的，只是在于他们的链接：

    %% 链接到subgraph1: subgraph1的方向得以保持
    outside --&gt; subgraph1
    %% 链接在subgraph2内：
    %% subgraph2继承了顶层图的方向（LR）
    outside ---&gt; top2
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108093940275-432449018.png" alt="" loading="lazy"></p>
<h2 id="markdown字符串">Markdown字符串</h2>
<p>“Markdown Strings”功能通过提供更灵活的字符串类型，增强了流程图和思维导图，支持文本格式化选项，如粗体和斜体，并自动在标签内换行文本。</p>
<pre><code class="language-mermaid-example">%%{init: {"flowchart": {"htmlLabels": false}} }%%
flowchart LR
subgraph "One"
  a("`这只 **猫** 在帽子里`") -- "边标签" --&gt; b{{"`这只 **狗** 在母猪里`"}}
end
subgraph "`**Two**`"
  c("`这只 **猫** 在帽子里`") -- "`粗体 **边标签**`" --&gt; d("这只狗在母猪里")
end
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108093951514-477740748.png" alt="" loading="lazy"></p>
<p>格式化：</p>
<ul>
<li>粗体文本使用双星号（<code>**</code>）在文本前后。</li>
<li>斜体使用单星号（<code>*</code>）在文本前后。</li>
<li>使用传统字符串时，您需要添加<code>&lt;br&gt;</code>标签以使文本在节点中换行。然而，Markdown字符串会在文本过长时自动换行，并允许您通过简单使用换行符开始新行，而无需<code>&lt;br&gt;</code>标签。</li>
</ul>
<p>该功能适用于节点标签、边标签和子图标签。</p>
<p>自动换行可以通过使用</p>
<pre><code>---
config:
  markdownAutoWrap: false
---
graph LR
</code></pre>
<p>禁用。</p>
<h2 id="交互">交互</h2>
<p>可以将点击事件绑定到节点，点击可以引导至javascript回调或将在新浏览器标签中打开的链接。</p>
<pre><code class="language-note">使用`securityLevel='strict'`时，此功能被禁用，而使用`securityLevel='loose'`时启用。
</code></pre>
<pre><code>click nodeId callback
click nodeId call callback()
</code></pre>
<ul>
<li>nodeId是节点的id</li>
<li>callback是显示图形的页面上定义的javascript函数的名称，函数将以nodeId作为参数调用。</li>
</ul>
<p>以下是tooltip使用的示例：</p>
<pre><code class="language-html">&lt;script&gt;
  window.callback = function () {
    alert('回调被触发');
  };
&lt;/script&gt;
</code></pre>
<p>tooltip文本用双引号括起来。tooltip的样式由类<code>.mermaidTooltip</code>设置。</p>
<pre><code class="language-mermaid-example">flowchart LR
    A--&gt;B
    B--&gt;C
    C--&gt;D
    click A callback "回调的tooltip"
    click B "https://www.github.com" "这是一个链接的tooltip"
    click C call callback() "回调的tooltip"
    click D href "https://www.github.com" "这是一个链接的tooltip"
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108094005356-1417416243.png" alt="" loading="lazy"></p>
<blockquote>
<p><strong>成功</strong> tooltip功能和链接URL的能力从版本0.5.2开始可用。</p>
</blockquote>
<p>?&gt; 由于Docsify处理JavaScript回调函数的限制，上述代码的替代工作演示可以在<a href="https://jsfiddle.net/yk4h7qou/2/" target="_blank" rel="noopener nofollow">this jsfiddle</a>中查看。</p>
<p>链接默认在同一浏览器标签/窗口中打开。可以通过在点击定义中添加链接目标（支持<code>_self</code>、<code>_blank</code>、<code>_parent</code>和<code>_top</code>）来更改这一点：</p>
<pre><code class="language-mermaid-example">flowchart LR
    A--&gt;B
    B--&gt;C
    C--&gt;D
    D--&gt;E
    click A "https://www.github.com" _blank
    click B "https://www.github.com" "在新标签中打开" _blank
    click C href "https://www.github.com" _blank
    click D href "https://www.github.com" "在新标签中打开" _blank
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108094013354-1371410089.png" alt="" loading="lazy"></p>
<p>初学者提示 - 用于HTML上下文中使用交互链接的完整示例：</p>
<pre><code class="language-html">&lt;body&gt;
  &lt;pre class="mermaid"&gt;
    flowchart LR
        A--&gt;B
        B--&gt;C
        C--&gt;D
        click A callback "tooltip"
        click B "https://www.github.com" "这是一个链接"
        click C call callback() "tooltip"
        click D href "https://www.github.com" "这是一个链接"
  &lt;/pre&gt;

  &lt;script&gt;
    window.callback = function () {
      alert('回调被触发');
    };
    const config = {
      startOnLoad: true,
      flowchart: { useMaxWidth: true, htmlLabels: true, curve: 'cardinal' },
      securityLevel: 'loose',
    };
    mermaid.initialize(config);
  &lt;/script&gt;
&lt;/body&gt;
</code></pre>
<h3 id="注释">注释</h3>
<p>可以在流程图中输入注释，解析器将忽略这些注释。注释需要单独占一行，并且必须以<code>%%</code>（双百分号）开头。注释内容从注释开始到下一个换行符之间的任何文本都将被视为注释，包括任何流程语法。</p>
<pre><code class="language-mermaid-example">flowchart LR
%% 这是一个注释 A -- 文本 --&gt; B{节点}
   A -- 文本 --&gt; B -- 文本2 --&gt; C
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108094025061-876462013.png" alt="" loading="lazy"></p>
<h2 id="样式和类">样式和类</h2>
<h3 id="样式链接">样式链接</h3>
<p>可以给链接添加样式。例如，您可能想样式化流程中的反向链接。由于链接没有与节点相同的id，因此需要另一种方式来决定应该附加什么样的样式。链接样式将根据链接在图中的定义顺序编号，或使用default来应用于所有链接。在以下示例中，链接样式声明中定义的样式将属于图中的第四个链接：</p>
<pre><code>linkStyle 3 stroke:#ff3,stroke-width:4px,color:red;
</code></pre>
<p>也可以通过逗号分隔来将样式添加到多个链接一次声明中：</p>
<pre><code>linkStyle 1,2,7 color:blue;
</code></pre>
<h3 id="样式化线条曲线">样式化线条曲线</h3>
<p>可以根据需要样式化项之间的线条曲线类型，如果默认方法不符合您的需求。可用的曲线样式包括<code>basis</code>、<code>bumpX</code>、<code>bumpY</code>、<code>cardinal</code>、<code>catmullRom</code>、<code>linear</code>、<code>monotoneX</code>、<code>monotoneY</code>、<code>natural</code>、<code>step</code>、<code>stepAfter</code>和<code>stepBefore</code>。</p>
<p>在此示例中，从左到右的图形使用<code>stepBefore</code>曲线样式：</p>
<pre><code>%%{ init: { 'flowchart': { 'curve': 'stepBefore' } } }%%
graph LR
</code></pre>
<p>有关可用曲线的完整列表以及自定义曲线的解释，请查阅<a href="https://github.com/d3/d3-shape/" target="_blank" rel="noopener nofollow">d3-shape</a>项目中的<a href="https://github.com/d3/d3-shape/blob/main/README.md#curves" target="_blank" rel="noopener nofollow">Shapes</a>文档。</p>
<h3 id="样式化节点">样式化节点</h3>
<p>可以为节点应用特定样式，例如更厚的边框或不同的背景颜色。</p>
<pre><code class="language-mermaid-example">flowchart LR
    id1(开始)--&gt;id2(停止)
    style id1 fill:#f9f,stroke:#333,stroke-width:4px
    style id2 fill:#bbf,stroke:#f66,stroke-width:2px,color:#fff,stroke-dasharray: 5 5
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108094034655-1554240666.png" alt="" loading="lazy"></p>
<h4 id="类">类</h4>
<p>比每次定义样式更方便的是定义样式类并将该类附加到应该有不同外观的节点。类定义看起来如下面的示例：</p>
<pre><code>    classDef className fill:#f9f,stroke:#333,stroke-width:4px;
</code></pre>
<p>也可以在一条声明中定义多个类样式：</p>
<pre><code>    classDef firstClassName,secondClassName font-size:12pt;
</code></pre>
<p>将类附加到节点的方式如下：</p>
<pre><code>    class nodeId1 className;
</code></pre>
<p>还可以在一条声明中将类附加到节点列表：</p>
<pre><code>    class nodeId1,nodeId2 className;
</code></pre>
<p>使用<code>:::</code>运算符将类附加到节点的简化形式，如下所示：</p>
<pre><code class="language-mermaid-example">flowchart LR
    A:::someclass --&gt; B
    classDef someclass fill:#f96
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108094044520-1788745393.png" alt="" loading="lazy"></p>
<p>此形式可用于在节点之间声明多个链接：</p>
<pre><code class="language-mermaid-example">flowchart LR
    A:::foo &amp; B:::bar --&gt; C:::foobar
    classDef foo stroke:#f00
    classDef bar stroke:#0f0
    classDef foobar stroke:#00f
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108094052085-1245399911.png" alt="" loading="lazy"></p>
<h3 id="css类">CSS类</h3>
<p>还可以在CSS样式中预定义类，可以从图表定义中应用，如下所示：</p>
<p><strong>示例样式</strong></p>
<pre><code class="language-html">&lt;style&gt;
  .cssClass &gt; rect {
    fill: #ff0000;
    stroke: #ffff00;
    stroke-width: 4px;
  }
&lt;/style&gt;
</code></pre>
<p><strong>示例定义</strong></p>
<pre><code class="language-mermaid-example">flowchart LR
    A--&gt;B[AAA&lt;span&gt;BBB&lt;/span&gt;]
    B--&gt;D
    class A cssClass
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108094106035-1940257153.png" alt="" loading="lazy"></p>
<h3 id="默认类">默认类</h3>
<p>如果类名为default，则会分配给所有没有特定类定义的类。</p>
<pre><code>    classDef default fill:#f9f,stroke:#333,stroke-width:4px;
</code></pre>
<h2 id="fontawesome的基本支持">Fontawesome的基本支持</h2>
<p>可以从fontawesome添加图标。</p>
<p>图标通过语法fa:#图标名称#访问。</p>
<pre><code class="language-mermaid-example">flowchart TD
    B["fa:fa-twitter 以和平为主题"]
    B--&gt;C[fa:fa-ban 禁止]
    B--&gt;D(fa:fa-spinner)
    B--&gt;E(A fa:fa-camera-retro 也许?)
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108094116035-1583063340.png" alt="" loading="lazy"></p>
<p>Mermaid支持Font Awesome，只要CSS包含在网站中。Mermaid对可以使用的Font Awesome版本没有任何限制。</p>
<p>请查阅<a href="https://fontawesome.com/start" target="_blank" rel="noopener nofollow">官方Font Awesome文档</a>了解如何在您的网站上包含它。</p>
<p>在<code>&lt;head&gt;</code>中添加此代码片段将添加对Font Awesome v6.5.1的支持</p>
<pre><code class="language-html">&lt;link
  href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css"
  rel="stylesheet"
/&gt;
</code></pre>
<h3 id="自定义图标">自定义图标</h3>
<p>只要网站导入相应的工具包，就可以使用从Font Awesome平台提供的自定义图标。</p>
<p>请注意，这目前是Font Awesome的一项付费功能。</p>
<p>对于自定义图标，您需要使用前缀<code>fak</code>。</p>
<p><strong>示例</strong></p>
<pre><code>flowchart TD
    B[fa:fa-twitter] %% 标准图标
    B--&gt;E(fak:fa-custom-icon-name) %% 自定义图标
</code></pre>
<p>尝试渲染它</p>
<pre><code class="language-mermaid-example">flowchart TD
    B["fa:fa-twitter 以和平为主题"]
    B--&gt;C["fab:fa-truck-bold 自定义图标"]
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108094124191-255511690.png" alt="" loading="lazy"></p>
<h2 id="图表声明之间的空格和无需分号">图表声明之间的空格和无需分号</h2>
<ul>
<li>
<p>在图表声明中，语句现在也可以在没有分号的情况下结束。在0.2.16版本发布后，以分号结束图表声明已成为可选，因此以下图表声明也是有效的，同时旧的图表声明也保持有效。</p>
</li>
<li>
<p>节点和链接之间允许单个空格。但是，节点与其文本之间以及链接与其文本之间不得存在空格。图表边缘的新声明如下所示，该声明也与旧的图表边缘声明有效。</p>
</li>
</ul>
<pre><code class="language-mermaid-example">flowchart LR
    A[硬边] --&gt;|链接文本| B(圆边)
    B --&gt; C{决策}
    C --&gt;|一种| D[结果一]
    C --&gt;|二| E[结果二]
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108094131397-1059497309.png" alt="" loading="lazy"></p>
<h2 id="配置">配置</h2>
<h3 id="渲染器">渲染器</h3>
<p>图的布局由渲染器完成。默认渲染器是dagre。</p>
<p>从Mermaid版本9.4开始，可以使用一个名为elk的替代渲染器。elk渲染器更适合大型和/或更复杂的图。</p>
<p><strong>elk</strong>渲染器是一个实验性特性。</p>
<p>您可以通过添加这个指令将渲染器更改为elk：</p>
<pre><code>%%{init: {"flowchart": {"defaultRenderer": "elk"}} }%%
</code></pre>
<pre><code class="language-note">请注意，网站需要使用mermaid版本9.4+才能正常工作，并在延迟加载配置中启用此功能。
</code></pre>
<h3 id="宽度">宽度</h3>
<p>可以调整渲染流程图的宽度。</p>
<p>这可以通过定义<strong>mermaid.flowchartConfig</strong>或通过CLI使用JSON文件与配置来完成。关于如何使用CLI的信息可以在mermaidCLI页面上找到。</p>
<pre><code class="language-javascript">mermaid.flowchartConfig = {
    width: 100%
}
</code></pre>
<h2 id="最后是使用ai来自动生成-mermaid-流程图的教程">最后是使用AI来自动生成 Mermaid 流程图的教程</h2>
<ol>
<li>
<p>首先打<a href="https://www.min2k.com/tools/mermaid/" target="_blank" rel="noopener nofollow">中文Mermaid官方网站</a>，如下图：<br>
<img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108095842251-472416842.png" alt="" loading="lazy"></p>
</li>
<li>
<p>然后在【文本内容】区域输入你要整理的内容，比如：网站用户登陆的流程<br>
<img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108100928271-1353421671.png" alt="" loading="lazy"></p>
</li>
<li>
<p>点击【整理成图】按钮之后，稍等片刻即可得到以下 Mermaid 代码，如下图：<br>
<img src="https://img2024.cnblogs.com/blog/70894/202501/70894-20250108100543931-1602795815.png" alt="" loading="lazy"><br>
下方的【图表代码】即是自动生成得到的对应代码，右侧图表即是代码渲染的结果。</p>
</li>
</ol>
<p>总体只需3步就可以用AI完成工作，方便高效。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.1720726564363426" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-08 10:13">2025-01-08 10:13</span>&nbsp;
<a href="https://www.cnblogs.com/min2k">敏编程</a>&nbsp;
阅读(<span id="post_view_count">71</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18659133" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18659133);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18659133', targetLink: 'https://www.cnblogs.com/min2k/p/18659133', title: 'AI 与 Mermaid 使用教程之流程图 - 从入门到精通' })">举报</a>
</div>
        