
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/zhangwencheng/p/18681960" title="发布于 2025-02-06 10:26">
    <span role="heading" aria-level="2">Kubernetes 轻松管理资源</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h3 id="资源管理介绍">资源管理介绍</h3>
<p>在kubernetes中，所有的内容都抽象为资源，用户需要通过操作资源来管理kubernetes。</p>
<blockquote>
<p>kubernetes的本质上就是一个集群系统，用户可以在集群中部署各种服务，所谓的部署服务，其实就是在kubernetes集群中运行一个个的容器，并将指定的程序跑在容器中。</p>
<p>kubernetes的最小管理单元是pod而不是容器，所以只能将容器放在<code>Pod</code>中，而kubernetes一般也不会直接管理Pod，而是通过<code>Pod控制器</code>来管理Pod的。</p>
<p>Pod可以提供服务之后，就要考虑如何访问Pod中服务，kubernetes提供了<code>Service</code>资源实现这个功能。</p>
<p>当然，如果Pod中程序的数据需要持久化，kubernetes还提供了各种<code>存储</code>系统。</p>
</blockquote>
<p><img src="https://img2024.cnblogs.com/blog/1080590/202501/1080590-20250120170611155-940043135.png" alt="" loading="lazy"></p>
<blockquote>
<p>学习kubernetes的核心，就是学习如何对集群上的<code>Pod、Pod控制器、Service、存储</code>等各种资源进行操作</p>
</blockquote>
<h3 id="yaml语言介绍">YAML语言介绍</h3>
<p>YAML是一个类似 XML、JSON 的标记性语言。它强调以<strong>数据</strong>为中心，并不是以标识语言为重点。因而YAML本身的定义比较简单，号称"一种人性化的数据格式语言"。</p>
<pre><code>&lt;wenc&gt;
    &lt;age&gt;15&lt;/age&gt;
    &lt;address&gt;Beijing&lt;/address&gt;
&lt;/wenc&gt;
</code></pre>
<pre><code>wenc:
  age: 15
  address: Beijing
</code></pre>
<p>YAML的语法比较简单，主要有下面几个：</p>
<ul>
<li>大小写敏感</li>
<li>使用缩进表示层级关系</li>
<li>缩进不允许使用tab，只允许空格( 低版本限制 )</li>
<li>缩进的空格数不重要，只要相同层级的元素左对齐即可</li>
<li>'#'表示注释</li>
</ul>
<p>YAML支持以下几种数据类型：</p>
<ul>
<li>纯量：单个的、不可再分的值</li>
<li>对象：键值对的集合，又称为映射（mapping）/ 哈希（hash） / 字典（dictionary）</li>
<li>数组：一组按次序排列的值，又称为序列（sequence） / 列表（list）</li>
</ul>
<pre><code># 纯量, 就是指的一个简单的值，字符串、布尔值、整数、浮点数、Null、时间、日期
# 1 布尔类型
c1: true (或者True)
# 2 整型
c2: 234
# 3 浮点型
c3: 3.14
# 4 null类型 
c4: ~  # 使用~表示null
# 5 日期类型
c5: 2018-02-17    # 日期必须使用ISO 8601格式，即yyyy-MM-dd
# 6 时间类型
c6: 2018-02-17T15:02:31+08:00  # 时间使用ISO 8601格式，时间和日期之间使用T连接，最后使用+代表时区
# 7 字符串类型
c7: wenc     # 简单写法，直接写值 , 如果字符串中间有特殊字符，必须使用双引号或者单引号包裹 
c8: line1
    line2     # 字符串过多的情况可以拆成多行，每一行会被转化成一个空格
</code></pre>
<pre><code># 对象
# 形式一(推荐):
wenc:
  age: 15
  address: Beijing
# 形式二(了解):
wenc: {age: 15,address: Beijing}
</code></pre>
<pre><code># 数组
# 形式一(推荐):
address:
  - 顺义
  - 昌平  
# 形式二(了解):
address: [顺义,昌平]
</code></pre>
<blockquote>
<p>小提示：</p>
<p>1 书写yaml切记<code>:</code> 后面要加一个空格</p>
<p>2 如果需要将多段yaml配置放在一个文件中，中间要使用<code>---</code>分隔</p>
<p>3 下面是一个yaml转json的网站，可以通过它验证yaml是否书写正确</p>
<p><a href="https://www.json2yaml.com/convert-yaml-to-json" target="_blank" rel="noopener nofollow">https://www.json2yaml.com/convert-yaml-to-json</a></p>
</blockquote>
<h3 id="资源管理方式">资源管理方式</h3>
<ul>
<li>
<p>命令式对象管理：直接使用命令去操作kubernetes资源</p>
<p><code>kubectl run nginx-pod --image=nginx:1.18.0 --port=80</code></p>
</li>
<li>
<p>命令式对象配置：通过命令配置和配置文件去操作kubernetes资源</p>
<p><code>kubectl create/patch -f nginx-pod.yaml</code></p>
</li>
<li>
<p>声明式对象配置：通过apply命令和配置文件去操作kubernetes资源</p>
<p><code>kubectl apply -f nginx-pod.yaml</code></p>
</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align: left">类型</th>
<th style="text-align: left">操作对象</th>
<th style="text-align: left">适用环境</th>
<th style="text-align: left">优点</th>
<th style="text-align: left">缺点</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left">命令式对象管理</td>
<td style="text-align: left">对象</td>
<td style="text-align: left">测试</td>
<td style="text-align: left">简单</td>
<td style="text-align: left">只能操作活动对象，无法审计、跟踪</td>
</tr>
<tr>
<td style="text-align: left">命令式对象配置</td>
<td style="text-align: left">文件</td>
<td style="text-align: left">开发</td>
<td style="text-align: left">可以审计、跟踪</td>
<td style="text-align: left">项目大时，配置文件多，操作麻烦</td>
</tr>
<tr>
<td style="text-align: left">声明式对象配置</td>
<td style="text-align: left">目录</td>
<td style="text-align: left">开发</td>
<td style="text-align: left">支持目录操作</td>
<td style="text-align: left">意外情况下难以调试</td>
</tr>
</tbody>
</table>
<h4 id="命令式对象管理">命令式对象管理</h4>
<p><strong>kubectl命令</strong></p>
<p>kubectl是kubernetes集群的命令行工具，通过它能够对集群本身进行管理，并能够在集群上进行容器化应用的安装部署。kubectl命令的语法如下：</p>
<pre><code>kubectl [command] [type] [name] [flags]
</code></pre>
<p><strong>comand</strong>：指定要对资源执行的操作，例如create、get、delete</p>
<p><strong>type</strong>：指定资源类型，比如deployment、pod、service</p>
<p><strong>name</strong>：指定资源的名称，名称大小写敏感</p>
<p><strong>flags</strong>：指定额外的可选参数</p>
<pre><code class="language-shell"># 查看所有pod
kubectl get pod 

# 查看某个pod
kubectl get pod pod_name

# 查看某个pod,以yaml格式展示结果
kubectl get pod pod_name -o yaml
</code></pre>
<p><strong>资源类型</strong></p>
<p>kubernetes中所有的内容都抽象为资源，可以通过下面的命令进行查看:</p>
<pre><code>kubectl api-resources
</code></pre>
<p>经常使用的资源有下面这些：</p>
<table>
<thead>
<tr>
<th style="text-align: left">资源分类</th>
<th style="text-align: left">资源名称</th>
<th style="text-align: left">缩写</th>
<th style="text-align: left">资源作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left">集群级别资源</td>
<td style="text-align: left">nodes</td>
<td style="text-align: left">no</td>
<td style="text-align: left">集群组成部分</td>
</tr>
<tr>
<td style="text-align: left">namespaces</td>
<td style="text-align: left">ns</td>
<td style="text-align: left">隔离Pod</td>
<td style="text-align: left"></td>
</tr>
<tr>
<td style="text-align: left">pod资源</td>
<td style="text-align: left">pods</td>
<td style="text-align: left">po</td>
<td style="text-align: left">装载容器</td>
</tr>
<tr>
<td style="text-align: left">pod资源控制器</td>
<td style="text-align: left">replicationcontrollers</td>
<td style="text-align: left">rc</td>
<td style="text-align: left">控制pod资源</td>
</tr>
<tr>
<td style="text-align: left"></td>
<td style="text-align: left">replicasets</td>
<td style="text-align: left">rs</td>
<td style="text-align: left">控制pod资源</td>
</tr>
<tr>
<td style="text-align: left"></td>
<td style="text-align: left">deployments</td>
<td style="text-align: left">deploy</td>
<td style="text-align: left">控制pod资源</td>
</tr>
<tr>
<td style="text-align: left"></td>
<td style="text-align: left">daemonsets</td>
<td style="text-align: left">ds</td>
<td style="text-align: left">控制pod资源</td>
</tr>
<tr>
<td style="text-align: left"></td>
<td style="text-align: left">jobs</td>
<td style="text-align: left"></td>
<td style="text-align: left">控制pod资源</td>
</tr>
<tr>
<td style="text-align: left"></td>
<td style="text-align: left">cronjobs</td>
<td style="text-align: left">cj</td>
<td style="text-align: left">控制pod资源</td>
</tr>
<tr>
<td style="text-align: left"></td>
<td style="text-align: left">horizontalpodautoscalers</td>
<td style="text-align: left">hpa</td>
<td style="text-align: left">控制pod资源</td>
</tr>
<tr>
<td style="text-align: left"></td>
<td style="text-align: left">statefulsets</td>
<td style="text-align: left">sts</td>
<td style="text-align: left">控制pod资源</td>
</tr>
<tr>
<td style="text-align: left">服务发现资源</td>
<td style="text-align: left">services</td>
<td style="text-align: left">svc</td>
<td style="text-align: left">统一pod对外接口</td>
</tr>
<tr>
<td style="text-align: left"></td>
<td style="text-align: left">ingress</td>
<td style="text-align: left">ing</td>
<td style="text-align: left">统一pod对外接口</td>
</tr>
<tr>
<td style="text-align: left">存储资源</td>
<td style="text-align: left">volumeattachments</td>
<td style="text-align: left"></td>
<td style="text-align: left">存储</td>
</tr>
<tr>
<td style="text-align: left"></td>
<td style="text-align: left">persistentvolumes</td>
<td style="text-align: left">pv</td>
<td style="text-align: left">存储</td>
</tr>
<tr>
<td style="text-align: left"></td>
<td style="text-align: left">persistentvolumeclaims</td>
<td style="text-align: left">pvc</td>
<td style="text-align: left">存储</td>
</tr>
<tr>
<td style="text-align: left">配置资源</td>
<td style="text-align: left">configmaps</td>
<td style="text-align: left">cm</td>
<td style="text-align: left">配置</td>
</tr>
<tr>
<td style="text-align: left"></td>
<td style="text-align: left">secrets</td>
<td style="text-align: left"></td>
<td style="text-align: left">配置</td>
</tr>
</tbody>
</table>
<p><strong>操作</strong></p>
<p>kubernetes允许对资源进行多种操作，可以通过--help查看详细的操作命令</p>
<pre><code>kubectl --help
</code></pre>
<p>经常使用的操作有下面这些：</p>
<table>
<thead>
<tr>
<th style="text-align: left">命令分类</th>
<th style="text-align: left">命令</th>
<th style="text-align: left">翻译</th>
<th style="text-align: left">命令作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left">基本命令</td>
<td style="text-align: left">create</td>
<td style="text-align: left">创建</td>
<td style="text-align: left">创建一个资源</td>
</tr>
<tr>
<td style="text-align: left"></td>
<td style="text-align: left">edit</td>
<td style="text-align: left">编辑</td>
<td style="text-align: left">编辑一个资源</td>
</tr>
<tr>
<td style="text-align: left"></td>
<td style="text-align: left">get</td>
<td style="text-align: left">获取</td>
<td style="text-align: left">获取一个资源</td>
</tr>
<tr>
<td style="text-align: left"></td>
<td style="text-align: left">patch</td>
<td style="text-align: left">更新</td>
<td style="text-align: left">更新一个资源</td>
</tr>
<tr>
<td style="text-align: left"></td>
<td style="text-align: left">delete</td>
<td style="text-align: left">删除</td>
<td style="text-align: left">删除一个资源</td>
</tr>
<tr>
<td style="text-align: left"></td>
<td style="text-align: left">explain</td>
<td style="text-align: left">解释</td>
<td style="text-align: left">展示资源文档</td>
</tr>
<tr>
<td style="text-align: left">运行和调试</td>
<td style="text-align: left">run</td>
<td style="text-align: left">运行</td>
<td style="text-align: left">在集群中运行一个指定的镜像</td>
</tr>
<tr>
<td style="text-align: left"></td>
<td style="text-align: left">expose</td>
<td style="text-align: left">暴露</td>
<td style="text-align: left">暴露资源为Service</td>
</tr>
<tr>
<td style="text-align: left"></td>
<td style="text-align: left">describe</td>
<td style="text-align: left">描述</td>
<td style="text-align: left">显示资源内部信息</td>
</tr>
<tr>
<td style="text-align: left"></td>
<td style="text-align: left">logs</td>
<td style="text-align: left">日志输出容器在 pod 中的日志</td>
<td style="text-align: left">输出容器在 pod 中的日志</td>
</tr>
<tr>
<td style="text-align: left"></td>
<td style="text-align: left">attach</td>
<td style="text-align: left">缠绕进入运行中的容器</td>
<td style="text-align: left">进入运行中的容器</td>
</tr>
<tr>
<td style="text-align: left"></td>
<td style="text-align: left">exec</td>
<td style="text-align: left">执行容器中的一个命令</td>
<td style="text-align: left">执行容器中的一个命令</td>
</tr>
<tr>
<td style="text-align: left"></td>
<td style="text-align: left">cp</td>
<td style="text-align: left">复制</td>
<td style="text-align: left">在Pod内外复制文件</td>
</tr>
<tr>
<td style="text-align: left"></td>
<td style="text-align: left">rollout</td>
<td style="text-align: left">首次展示</td>
<td style="text-align: left">管理资源的发布</td>
</tr>
<tr>
<td style="text-align: left"></td>
<td style="text-align: left">scale</td>
<td style="text-align: left">规模</td>
<td style="text-align: left">扩(缩)容Pod的数量</td>
</tr>
<tr>
<td style="text-align: left"></td>
<td style="text-align: left">autoscale</td>
<td style="text-align: left">自动调整</td>
<td style="text-align: left">自动调整Pod的数量</td>
</tr>
<tr>
<td style="text-align: left">高级命令</td>
<td style="text-align: left">apply</td>
<td style="text-align: left">rc</td>
<td style="text-align: left">通过文件对资源进行配置</td>
</tr>
<tr>
<td style="text-align: left"></td>
<td style="text-align: left">label</td>
<td style="text-align: left">标签</td>
<td style="text-align: left">更新资源上的标签</td>
</tr>
<tr>
<td style="text-align: left">其他命令</td>
<td style="text-align: left">cluster-info</td>
<td style="text-align: left">集群信息</td>
<td style="text-align: left">显示集群信息</td>
</tr>
<tr>
<td style="text-align: left"></td>
<td style="text-align: left">version</td>
<td style="text-align: left">版本</td>
<td style="text-align: left">显示当前Server和Client的版本</td>
</tr>
</tbody>
</table>
<p>下面以一个namespace / pod的创建和删除简单演示下命令的使用：</p>
<pre><code class="language-shell"># 创建一个namespace
[root@master ~]# kubectl create namespace dev
namespace/dev created

# 获取namespace
[root@master ~]# kubectl get ns
NAME              STATUS   AGE
default           Active   21h
dev               Active   21s
kube-node-lease   Active   21h
kube-public       Active   21h
kube-system       Active   21h

# 在此namespace下创建并运行一个nginx的Pod
[root@master ~]# kubectl run pod --image=nginx:latest -n dev
kubectl run --generator=deployment/apps.v1 is DEPRECATED and will be removed in a future version. Use kubectl run --generator=run-pod/v1 or kubectl create instead.
deployment.apps/pod created

# 查看新创建的pod
[root@master ~]# kubectl get pod -n dev
NAME  READY   STATUS    RESTARTS   AGE
pod   1/1     Running   0          21s

# 删除指定的pod
[root@master ~]# kubectl delete pod pod-864f9875b9-pcw7x
pod "pod" deleted

# 删除指定的namespace
[root@master ~]# kubectl delete ns dev
namespace "dev" deleted
</code></pre>
<h4 id="命令式对象配置">命令式对象配置</h4>
<p>命令式对象配置就是使用命令配合配置文件一起来操作kubernetes资源。</p>
<p>1） 创建一个nginxpod.yaml，内容如下：</p>
<pre><code class="language-yaml">apiVersion: v1
kind: Namespace
metadata:
  name: dev

---

apiVersion: v1
kind: Pod
metadata:
  name: nginxpod
  namespace: dev
spec:
  containers:
  - name: nginx-containers
    image: nginx:latest
</code></pre>
<p>2）执行create命令，创建资源：</p>
<pre><code class="language-yaml">[root@master ~]# kubectl create -f nginxpod.yaml
namespace/dev created
pod/nginxpod created
</code></pre>
<p>此时发现创建了两个资源对象，分别是namespace和pod</p>
<p>3）执行get命令，查看资源：</p>
<pre><code class="language-shell">[root@master ~]#  kubectl get -f nginxpod.yaml
NAME            STATUS   AGE
namespace/dev   Active   18s

NAME            READY   STATUS    RESTARTS   AGE
pod/nginxpod    1/1     Running   0          17s
</code></pre>
<p>这样就显示了两个资源对象的信息</p>
<p>4）执行delete命令，删除资源：</p>
<pre><code class="language-shell">[root@master ~]# kubectl delete -f nginxpod.yaml
namespace "dev" deleted
pod "nginxpod" deleted
</code></pre>
<p>此时发现两个资源对象被删除了</p>
<pre><code>总结:
    命令式对象配置的方式操作资源，可以简单的认为：命令  +  yaml配置文件（里面是命令需要的各种参数）
</code></pre>
<h4 id="声明式对象配置">声明式对象配置</h4>
<p>声明式对象配置跟命令式对象配置很相似，但是它只有一个命令apply。</p>
<pre><code class="language-shell"># 首先执行一次kubectl apply -f yaml文件，发现创建了资源
[root@master ~]#  kubectl apply -f nginxpod.yaml
namespace/dev created
pod/nginxpod created

# 再次执行一次kubectl apply -f yaml文件，发现说资源没有变动
[root@master ~]#  kubectl apply -f nginxpod.yaml
namespace/dev unchanged
pod/nginxpod unchanged
</code></pre>
<pre><code>总结:
    其实声明式对象配置就是使用apply描述一个资源最终的状态（在yaml中定义状态）
    使用apply操作资源：
        如果资源不存在，就创建，相当于 kubectl create
        如果资源已存在，就更新，相当于 kubectl patch
</code></pre>
<blockquote>
<p>扩展：kubectl可以在node节点上运行吗 ?</p>
</blockquote>
<p>kubectl的运行是需要进行配置的，它的配置文件是$HOME/.kube，如果想要在node节点运行此命令，需要将master上的.kube文件复制到node节点上，即在master节点上执行下面操作：</p>
<pre><code class="language-shell">scp  -r  HOME/.kube   node1: HOME/
</code></pre>
<blockquote>
<p>使用推荐: 三种方式应该怎么用 ?</p>
</blockquote>
<p>创建/更新资源 使用声明式对象配置 kubectl apply -f XXX.yaml</p>
<p>删除资源 使用命令式对象配置 kubectl delete -f XXX.yaml</p>
<p>查询资源 使用命令式对象管理 kubectl get(describe) 资源名称</p>

</div>
<div id="MySignature" role="contentinfo">
    <!-- 版权保护 
<div style="color: red; font-weight: bold; font-size: 15px;">
更多最新文章：<a href="https://juejin.cn/user/1383642897854980/posts">【传送门】</a><br>
</div>
<br>
<div style="text-align:center;background-color:font-size: 24px; ">
-->
<div style="color: red; text-align: center; font-weight: bold; font-size: 15px;">
**********   如果您认为这篇文章还不错或者有所收获，请点击右下角的【推荐】/【赞助】按钮，因为您的支持是我继续创作分享的最大动力！   **********
</div>
<br>

<div style="background:LightBlue; color:#0; font-size: 15px;">
            作者：<a href="https://www.cnblogs.com/zhangwencheng">讲文张字</a><br>
            出处：<a href="https://www.cnblogs.com/zhangwencheng">https://www.cnblogs.com/zhangwencheng</a><br>
            版权：本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出
             <a href="#" onclick="Curgo()" style="background:#b6ff00; color:#0; font-size:medium;">原文链接</a>
    
</div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.0766063339837963" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-06 10:26">2025-02-06 10:26</span>&nbsp;
<a href="https://www.cnblogs.com/zhangwencheng">讲文张字</a>&nbsp;
阅读(<span id="post_view_count">26</span>)&nbsp;
评论(<span id="post_comment_count">1</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18681960" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18681960);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18681960', targetLink: 'https://www.cnblogs.com/zhangwencheng/p/18681960', title: 'Kubernetes 轻松管理资源' })">举报</a>
</div>
        