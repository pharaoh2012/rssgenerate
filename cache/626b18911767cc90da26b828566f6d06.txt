
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/donk/p/19033457" title="发布于 2025-08-12 11:31">
    <span role="heading" aria-level="2">Linux 内核启动过程中的日志输出阶段分析</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="问题描述">问题描述</h2>
<p>在对比原理图后，发现打印日志的串口是UART2(GPIO3_A2 &amp; GPIO3_A3)，但设备树中只开启了UART0(GPIO1_C2&amp;GPIO1_C3)<br>
/* 以下设备树内容来自多个设备树描述文件*/</p>
<pre><code class="language-dts">&amp;uart0 {
	pinctrl-names = "default";
	pinctrl-0 = &lt;&amp;uart0_xfer &amp;uart0_ctsn&gt;;
	status = "okay";
};
uart0: serial@ff560000 {
	compatible = "rockchip,rv1126-uart", "snps,dw-apb-uart";
	reg = &lt;0xff560000 0x100&gt;;
	interrupts = &lt;GIC_SPI 12 IRQ_TYPE_LEVEL_HIGH&gt;;
	reg-shift = &lt;2&gt;;
	reg-io-width = &lt;4&gt;;
	dmas = &lt;&amp;dmac 5&gt;, &lt;&amp;dmac 4&gt;;
	clock-frequency = &lt;24000000&gt;;
	clocks = &lt;&amp;cru SCLK_UART0&gt;, &lt;&amp;cru PCLK_UART0&gt;;
	clock-names = "baudclk", "apb_pclk";
	pinctrl-names = "default";
	pinctrl-0 = &lt;&amp;uart0_xfer &amp;uart0_ctsn &amp;uart0_rtsn&gt;;
	status = "disabled";
};
uart0_xfer: uart0-xfer {
	rockchip,pins =
		/* uart0_rx */
		&lt;1 RK_PC2 1 &amp;pcfg_pull_up&gt;,
		/* uart0_tx */
		&lt;1 RK_PC3 1 &amp;pcfg_pull_up&gt;;
};
uart2: serial@ff570000 {
	compatible = "rockchip,rv1126-uart", "snps,dw-apb-uart";
	reg = &lt;0xff570000 0x100&gt;;
	interrupts = &lt;GIC_SPI 14 IRQ_TYPE_LEVEL_HIGH&gt;;
	reg-shift = &lt;2&gt;;
	reg-io-width = &lt;4&gt;;
	dmas = &lt;&amp;dmac 9&gt;, &lt;&amp;dmac 8&gt;;
	clock-frequency = &lt;24000000&gt;;
	clocks = &lt;&amp;cru SCLK_UART2&gt;, &lt;&amp;cru PCLK_UART2&gt;;
	clock-names = "baudclk", "apb_pclk";
	pinctrl-names = "default";
	pinctrl-0 = &lt;&amp;uart2m1_xfer&gt;;
	status = "disabled";
};
uart2m1_xfer: uart2m1-xfer {
	rockchip,pins =
		/* uart2_rx_m1 */
		&lt;3 RK_PA3 1 &amp;pcfg_pull_up&gt;,
		/* uart2_tx_m1 */
		&lt;3 RK_PA2 1 &amp;pcfg_pull_up&gt;;
};
</code></pre>
<h2 id="问题分析">问题分析</h2>
<p>无论是硬件原理图还是实际结果都表示启动日志是从UART2打印出来的，所以我们就要尽量往UART2去拓展。<br>
由设备树可以得到内核启动参数 <code>bootargs</code>：</p>
<pre><code class="language-dts">chosen {
  bootargs = "earlycon=uart8250,mmio32,0xff570000 console=ttyFIQ0 root=PARTUUID=614e0000-0000 rootfstype=ext4 rootwait snd_aloop.index=7";
};
</code></pre>
<h3 id="earlycon阶段内核初始化早期">earlycon阶段（内核初始化早期）</h3>
<p>首先可以看到<code>earlycon=uart8250,mmio32,0xff570000</code>，<code>earlycon</code>直接在设备树解析前初始化硬件，不依赖设备树中的<code>status</code>属性。在内核初始化早期，直接向地址<code>0xff570000 </code>输出日志，对比之前提到的设备树配置，我们可以看到这个地址就是UART2串口。</p>
<h3 id="标准console阶段内核初始化后期">标准console阶段（内核初始化后期）</h3>
<p>在<code>bootargs</code>中设置了<code>console=ttyFIQ0</code></p>
<ul>
<li>由于UART2在设备树中被标记为<code>disabled</code>,内核<strong>不会注册标准UART驱动</strong>（如ttyS2）</li>
<li>后续日志会通过<code>ttyFIQ0</code>输出(通常是 Rockchip 的 FIQ 调试串口)<br>
就像一个知道结果的解谜游戏，我们现在大可以猜测是不是<code>ttyFIQ0</code>配置了UART2，接过了日志输出的任务并继续向UART2输出（通过FIQ驱动，绕过标准UART状态），接下来我们继续分析设备树：</li>
</ul>
<pre><code class="language-dts">&amp;fiq_debugger {
	status = "okay";
};
</code></pre>
<p><code>fiq_debugger</code>是启用的，我们继续向上层设备树文件找，目前来到了<code>rv1126.dtsi</code></p>
<pre><code class="language-dts">fiq_debugger: fiq-debugger {
	compatible = "rockchip,fiq-debugger";
	rockchip,serial-id = &lt;2&gt;;  // 绑定到 UART2
	rockchip,wake-irq = &lt;0&gt;;
	rockchip,irq-mode-enable = &lt;0&gt;;
	rockchip,baudrate = &lt;1500000&gt;;  /* Only 115200 and 1500000 */
	interrupts = &lt;GIC_SPI 127 IRQ_TYPE_LEVEL_HIGH&gt;;
	status = "disabled";
};
</code></pre>
<p>出现了！<code>rockchip,serial-id = &lt;2&gt;</code>,我们可以看到<code>fiq_debugger</code>节点绑定到了UART2，由此完成了内核启动早期与后期的日志输出的衔接。</p>
<h2 id="总结">总结</h2>
<p>本篇文章是由一个<code>status</code>为<code>disable</code>但却被作为日志输出的UART2引出，核心是围绕着<code>bootargs</code>中的<code>earlycon</code>与<code>console</code>参数展开。<code>earlycon</code>直接通过UART2的地址，在设备树解析前输出早期日志；<code>console</code>通过FIQ调试串口，复用了UART2的端口，实际上是使用了FIQ的驱动输出后续日志。完成了整个内核初始化及后续过程中的日志输出不同阶段的衔接。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-08-12 11:31">2025-08-12 11:31</span>&nbsp;
<a href="https://www.cnblogs.com/donk">千叶の堕天聖黑猫</a>&nbsp;
阅读(<span id="post_view_count">27</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19033457);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19033457', targetLink: 'https://www.cnblogs.com/donk/p/19033457', title: 'Linux 内核启动过程中的日志输出阶段分析' })">举报</a>
</div>
        