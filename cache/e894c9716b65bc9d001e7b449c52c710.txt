
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/youlanjihua/p/18897384" title="发布于 2025-05-26 19:59">
    <span role="heading" aria-level="2">鸿蒙仓颉开发语言实战教程：自定义tabbar</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p data-id="p124945a-QrBDd7ms">大家周末好呀，今天继续分享仓颉语言开发商城应用的实战教程，今天要做的是tabbar。</p>
<p data-id="p838747a-OeoAV6Fe">&nbsp;</p>
<p data-id="pa028eb2-YE9K4H1n"><img src="https://harmonyos.oss-cn-beijing.aliyuncs.com/images/202505/366be344241bfc37773831d4a81d979d80de25.png" data-type="block"></p>
<p data-id="p838747a-KqDvqkI9">&nbsp;</p>
<p data-id="p124945a-qiO6Pbn5">大家都知道ArkTs有Tabs和TabContent容器，能够实现上图的样式，满足基本的使用需求。而仓颉就不同了，它虽然也有这两个组件，但是它的tabbar参数只支持传入图片或者文字，不能像ArkTs那样能传入组件,所以在仓颉语言中官方的tabbar局限性非常大。</p>
<p data-id="p838747a-kAjQc6xe">&nbsp;</p>
<p data-id="p124945a-lV83Owoe">给大家实操讲解一下，下面是一段Tabs的基本写法：</p>
<p data-id="p838747a-1vNPoUDy">&nbsp;</p>
<div>
<pre class="language-plain highlighter-hljs"><code>Tabs(BarPosition.End, this.controller){
 TabContent(){
        Text('页面1')
    }
  TabContent(){
        Text('页面2’)
    }
}</code></pre>
</div>
<p data-id="p838747a-Oiz1Wqgi">&nbsp;</p>
<p data-id="p124945a-rG8BZUhp">如果你要设置tabbar的样式，需要在TabContent下添加tabbar属性，然后你会发现tabbar只有唯二的两个参数：</p>
<div>
<pre class="language-plain highlighter-hljs"><code>TabContent(){
        Text('页面1')
    }
   .tabBar(icon: CJResource, text: CJResource)</code></pre>
</div>
<p data-id="p838747a-P2h07467">&nbsp;</p>
<p data-id="p124945a-pSI3LPiS">设置完之后它长这样：</p>
<p data-id="p838747a-WnebQXJn">&nbsp;</p>
<p data-id="pa028eb2-wDezRkSl"><img src="https://harmonyos.oss-cn-beijing.aliyuncs.com/images/202505/b9145d132f06c6aaee208374a43c3c7781cfba.png" data-type="block"></p>
<p data-id="p838747a-lec781Ln">&nbsp;</p>
<p data-id="p124945a-9iB4v6sG">这样就无法满足我们的需求，所以我们需要自定义。</p>
<p data-id="p838747a-QZeGTSHK">&nbsp;</p>
<p data-id="p124945a-7OtJ4dfL">每一个tabbar元素都有一个图片组件和一个文字组件，我给它写出来：</p>
<p data-id="p838747a-aFqWfOts">&nbsp;</p>
<div>
<pre class="language-plain highlighter-hljs"><code>Column {
	 Image(item.selectIcon).width(28).height(28)
         Text(item.title).fontSize(15).fontColor(0xd84642).margin(top: 3)
    }</code></pre>
</div>
<p data-id="p838747a-sixBHOg0">&nbsp;</p>
<p data-id="p124945a-u9Wn8DB8">然后它需要有一个选中状态，难受的是仓颉不支持三元表达式，所以我只能写if语句：</p>
<div>
<pre class="language-plain highlighter-hljs"><code>Column {
        if(this.currenttabIndex == index){
            Image(item.selectIcon).width(28).height(28)
            Text(item.title).fontSize(15).fontColor(0xd84642).margin(top: 3)
        }else {
             Image(item.icon).width(28).height(28)
            Text(item.title).fontSize(15).fontColor(Color.GRAY).margin(top: 3)
         }
    }</code></pre>
</div>
<p data-id="p838747a-MuxEsXVW">&nbsp;</p>
<p data-id="p124945a-4q8k3nL7">它还需要一个点击事件：</p>
<div>
<pre class="language-plain highlighter-hljs"><code>Column {
        if(this.currenttabIndex == index){
            Image(item.selectIcon).width(28).height(28)
            Text(item.title).fontSize(15).fontColor(0xd84642).margin(top: 3)
        }else {
             Image(item.icon).width(28).height(28)
            Text(item.title).fontSize(15).fontColor(Color.GRAY).margin(top: 3)
         }
    }
.onClick({evet =&gt; this.currenttabIndex = index;this.controller.changeIndex(Int32(this.currenttabIndex))})</code></pre>
</div>
<p data-id="p838747a-XmJClZLb">&nbsp;</p>
<p data-id="p124945a-xN1QFc9N">这样一个元素就写好了，接下来我只要循环添加几个元素，一个完整的tabbar就写好了，这里大家也要注意一下仓颉中foreach的写法：</p>
<p data-id="p838747a-nxxJucJh">&nbsp;</p>
<div>
<pre class="language-plain highlighter-hljs"><code>Row {
        ForEach(this.tabList, itemGeneratorFunc: {item: TabItem, index: Int64 =&gt;
                    Column {
                        if(this.currenttabIndex == index){
                            Image(item.selectIcon).width(28).height(28)
                            Text(item.title).fontSize(15).fontColor(0xd84642).margin(top: 3)
                        }else {
                             Image(item.icon).width(28).height(28)
                            Text(item.title).fontSize(15).fontColor(Color.GRAY).margin(top: 3)
                         }
                    }
                .onClick({evet =&gt; this.currenttabIndex = index;this.controller.changeIndex(Int32(this.currenttabIndex))})
    })
}
.width(100.percent)
.height(60)
.alignItems(VerticalAlign.Center)
.justifyContent(FlexAlign.SpaceAround)</code></pre>
</div>
<p data-id="p838747a-DyxCyQA3">&nbsp;</p>
<p data-id="p124945a-uCTQJnYy">最后我们还是需要官方的Tabs容器来添加页面，你只要不设置tabbar属性底部导航栏区域就是空白的，正好把我们自定义的tabbar放上，下面是完整的示例代码：</p>
<p data-id="p838747a-oBXElPNQ">&nbsp;</p>
<div>
<pre class="language-plain highlighter-hljs"><code>let tabList: Array&lt;TabItem&gt; = [
    TabItem(@r(app.media.shop_tab_00), @r(app.media.shop_tab_01), '首页'),
     TabItem(@r(app.media.shop_tab_10), @r(app.media.shop_tab_11), '购物车'),
     TabItem(@r(app.media.shop_tab_20), @r(app.media.shop_tab_21), '我的')
    ]
@State
var currenttabIndex:Int64 = 0

Stack(Alignment.Bottom) {
    Tabs(BarPosition.End, this.controller){
     TabContent(){
        home()
        }
        TabContent(){
            shopcar()
        }
        TabContent(){
            mine()
        }
    }
    .barHeight(60)
    .scrollable(false)
    .animationDuration(0)
    
     Row {
        ForEach(this.tabList, itemGeneratorFunc: {item: TabItem, index: Int64 =&gt;
                    Column {
                        if(this.currenttabIndex == index){
                            Image(item.selectIcon).width(28).height(28)
                            Text(item.title).fontSize(15).fontColor(0xd84642).margin(top: 3)
                        }else {
                             Image(item.icon).width(28).height(28)
                            Text(item.title).fontSize(15).fontColor(Color.GRAY).margin(top: 3)
                         }
                    }
                .onClick({evet =&gt; this.currenttabIndex = index;this.controller.changeIndex(Int32(this.currenttabIndex))})
    })
}
.width(100.percent)
.height(60)
.alignItems(VerticalAlign.Center)
.justifyContent(FlexAlign.SpaceAround)
}</code></pre>
</div>
<p data-id="p838747a-bCoHsVmW">&nbsp;</p>
<p data-id="p124945a-mVyy8nV9">以上就是仓颉语言自定义tabbar的实现过程，感谢阅读。#HarmonyOS语言##仓颉##购物#</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.26455913459722225" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-26 19:59">2025-05-26 19:59</span>&nbsp;
<a href="https://www.cnblogs.com/youlanjihua">幽蓝计划</a>&nbsp;
阅读(<span id="post_view_count">8</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18897384);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18897384', targetLink: 'https://www.cnblogs.com/youlanjihua/p/18897384', title: '鸿蒙仓颉开发语言实战教程：自定义tabbar' })">举报</a>
</div>
        