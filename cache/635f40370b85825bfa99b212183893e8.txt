
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/du-hong/p/18441675" title="发布于 2025-06-26 09:25">
    <span role="heading" aria-level="2">《刚刚问世》系列初窥篇-Java+Playwright自动化测试-20- 操作鼠标拖拽 - 上篇（详细教程）</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h3 id="autoid-0-0-0">1.简介</h3>
<p>本文主要介绍两个在测试过程中可能会用到的功能：在selenium中宏哥介绍了Actions类中的拖拽操作和Actions类中的划取字段操作。例如：需要在一堆log字符中随机划取一段文字，然后右键选择摘取功能。playwright同样可以实现元素的拖拽和释放的操作。</p>
<h3 id="autoid-0-1-0">2.拖拽操作</h3>
<p>鼠标拖拽操作，顾名思义就是：就是鼠标按住将一个元素拖拽到另一个元素上。拖拽是指将某个元素从一个位置拖动到另一个位置。为了模拟这种操作，Playwright 提供了 DragToAsync 方法，它可以帮助我们轻松地完成拖拽功能。</p>
<h4 id="autoid-0-2-0">2.1基础知识</h4>
<p>1.按住元素从页面的一个位置拖动到另外一个位置，有2种方式可以实现：</p>
<ul>
<li>locator.dragTo(target: locator) 先定位元素，调用drag_to方法到目标元素</li>
<li>page.dragAndDrop(source: str, target: str) page对象直接调用</li>
</ul>
<p>2.拖动和释放操作</p>
<p>page.dragAndDrop可以实现通过page对象调用dragAndDrop ,部分源码如下：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">
   * This method drags the source element to the target element. It will first move to the source element, perform a {</span><span style="color: rgba(128, 128, 128, 1)">@code</span><span style="color: rgba(0, 128, 0, 1)">
   * mousedown}, then move to the target element and perform a {</span><span style="color: rgba(128, 128, 128, 1)">@code</span><span style="color: rgba(0, 128, 0, 1)"> mouseup}.
   *
   * &lt;p&gt; **Usage**
   * &lt;pre&gt;{</span><span style="color: rgba(128, 128, 128, 1)">@code</span><span style="color: rgba(0, 128, 0, 1)">
   * page.dragAndDrop("#source", '#target');
   * // or specify exact positions relative to the top-left corners of the elements:
   * page.dragAndDrop("#source", '#target', new Page.DragAndDropOptions()
   *   .setSourcePosition(34, 7).setTargetPosition(10, 20));
   * }&lt;/pre&gt;
   *
   * </span><span style="color: rgba(128, 128, 128, 1)">@param</span><span style="color: rgba(0, 128, 0, 1)"> source A selector to search for an element to drag. If there are multiple elements satisfying the selector, the first will be
   * used.
   * </span><span style="color: rgba(128, 128, 128, 1)">@param</span><span style="color: rgba(0, 128, 0, 1)"> target A selector to search for an element to drop onto. If there are multiple elements satisfying the selector, the first will
   * be used.
   * </span><span style="color: rgba(128, 128, 128, 1)">@since</span><span style="color: rgba(0, 128, 0, 1)"> v1.13
   </span><span style="color: rgba(0, 128, 0, 1)">*/</span>
  <span style="color: rgba(0, 0, 255, 1)">default</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> dragAndDrop(String source, String target) {
    dragAndDrop(source, target, </span><span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">);
  }
  </span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">
   * This method drags the source element to the target element. It will first move to the source element, perform a {</span><span style="color: rgba(128, 128, 128, 1)">@code</span><span style="color: rgba(0, 128, 0, 1)">
   * mousedown}, then move to the target element and perform a {</span><span style="color: rgba(128, 128, 128, 1)">@code</span><span style="color: rgba(0, 128, 0, 1)"> mouseup}.
   *
   * &lt;p&gt; **Usage**
   * &lt;pre&gt;{</span><span style="color: rgba(128, 128, 128, 1)">@code</span><span style="color: rgba(0, 128, 0, 1)">
   * page.dragAndDrop("#source", '#target');
   * // or specify exact positions relative to the top-left corners of the elements:
   * page.dragAndDrop("#source", '#target', new Page.DragAndDropOptions()
   *   .setSourcePosition(34, 7).setTargetPosition(10, 20));
   * }&lt;/pre&gt;
   *
   * </span><span style="color: rgba(128, 128, 128, 1)">@param</span><span style="color: rgba(0, 128, 0, 1)"> source A selector to search for an element to drag. If there are multiple elements satisfying the selector, the first will be
   * used.
   * </span><span style="color: rgba(128, 128, 128, 1)">@param</span><span style="color: rgba(0, 128, 0, 1)"> target A selector to search for an element to drop onto. If there are multiple elements satisfying the selector, the first will
   * be used.
   * </span><span style="color: rgba(128, 128, 128, 1)">@since</span><span style="color: rgba(0, 128, 0, 1)"> v1.13
   </span><span style="color: rgba(0, 128, 0, 1)">*/</span>
  <span style="color: rgba(0, 0, 255, 1)">void</span> dragAndDrop(String source, String target, DragAndDropOptions options);</pre>
</div>
<p><strong>注：source 和 target 是字符串格式，也就是传selector 选择器的方法</strong></p>
<p>3.拖拽操作</p>
<p>locator.drag_to()可以实现拖放操作，该操作将：</p>
<ul>
<li>将鼠标悬停在要拖动的元素上</li>
<li>按鼠标左键</li>
<li>将鼠标移动到将接收放置的元素</li>
<li>松开鼠标左键</li>
</ul>
<p>语法示例：</p>
<div class="cnblogs_code">
<pre>page.locator("#item-to-be-dragged").dragTo(page.locator("#item-to-drop-at"));</pre>
</div>
<p>4.手工拖拽</p>
<p>如果要精确控制拖动操作，请使用locator.hover()、mouse.down()、mouse.move()和mouse.up()等较低级别的方法。</p>
<p>语法示例：</p>
<div class="cnblogs_code">
<pre>page.locator("#item-to-be-dragged"<span style="color: rgba(0, 0, 0, 1)">).hover();
page.mouse().down();
page.locator(</span>"#item-to-drop-at"<span style="color: rgba(0, 0, 0, 1)">).hover();
page.mouse().up();</span></pre>
</div>
<div class="admonitionHeading_Gvgb"><span>敲黑板！！！注意：</span></div>
<div class="admonitionContent_BuS1">
<p><span>如果你的页面依赖于被 dispatch 的事件，你需要至少两次鼠标移动才能在所有浏览器中触发它。要可靠地发出第二次鼠标移动，请重复两次mouse.move（）或Locator.hover（）。操作顺序为：将拖动元素悬停，鼠标向下，将拖放元素悬停，第二次悬停拖放元素，鼠标向上。</span></p>
<h3 id="autoid-0-2-1">3.牛刀小试</h3>
<p>学习过Playwright的拖拽基础知识后，我们趁热打铁将其实践一下，以为我们更好的理解和记忆。宏哥这里JqueryUI网站的一个拖拽demo实战一下。</p>
<h4 id="autoid-0-3-0">3.1拖拽操作</h4>
<p>使用locator.dragTo()执行拖放操作，实现自动化测试。</p>
<h5 id="autoid-0-3-1">3.1.1代码设计</h5>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202410/1232840-20241008103021564-2069325166.png" alt="" loading="lazy"></p>
<h5 id="autoid-0-3-1">3.1.2参考代码</h5>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">package</span><span style="color: rgba(0, 0, 0, 1)"> com.bjhg.playwright;

</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.microsoft.playwright.Browser;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.microsoft.playwright.BrowserContext;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.microsoft.playwright.BrowserType;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.microsoft.playwright.Page;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.microsoft.playwright.Playwright;

</span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">
 * </span><span style="color: rgba(128, 128, 128, 1)">@author</span><span style="color: rgba(0, 128, 0, 1)"> 北京-宏哥
 * 
 * @公众号:北京宏哥（微信搜索，关注宏哥，提前解锁更多测试干货）
 * 
 * 《刚刚问世》系列初窥篇-Java+Playwright自动化测试-20-操作鼠标拖拽 -上篇（详细教程）
 *
 * 2024年10月08日
 </span><span style="color: rgba(0, 128, 0, 1)">*/</span>
<span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> Test_DragAndDrop {
    
    
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> main(String[] args) {
        </span><span style="color: rgba(0, 0, 255, 1)">try</span> (Playwright playwright =<span style="color: rgba(0, 0, 0, 1)"> Playwright.create()) {
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">1.使用chromium浏览器，# 浏览器配置，设置以GUI模式启动Chrome浏览器（要查看浏览器UI，在启动浏览器时传递 headless=false 标志。您还可以使用 slowMo 来减慢执行速度。</span>
          Browser browser = playwright.chromium().launch(<span style="color: rgba(0, 0, 255, 1)">new</span> BrowserType.LaunchOptions().setHeadless(<span style="color: rgba(0, 0, 255, 1)">false</span>).setSlowMo(3000<span style="color: rgba(0, 0, 0, 1)">));
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">2.创建context</span>
          BrowserContext context =<span style="color: rgba(0, 0, 0, 1)"> browser.newContext();
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">创建page</span>
          Page page =<span style="color: rgba(0, 0, 0, 1)"> context.newPage();
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">3.浏览器访问demo</span>
          page.navigate("https://jqueryui.com/resources/demos/droppable/default.html"<span style="color: rgba(0, 0, 0, 1)">);
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">4.开始拖拽</span>
          page.locator("#draggable").dragTo(page.locator("#droppable"<span style="color: rgba(0, 0, 0, 1)">));
          
          System.out.println(</span>"Test Pass"<span style="color: rgba(0, 0, 0, 1)">);
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">关闭page</span>
<span style="color: rgba(0, 0, 0, 1)">          page.close();
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">关闭browser</span>
<span style="color: rgba(0, 0, 0, 1)">          browser.close();
        }
    }
}</span></pre>
</div>
<h5>3.1.3运行代码</h5>
<p>1.运行代码，右键Run As-&gt;Java Application，就可以看到控制台输出，如下图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202410/1232840-20241008103218718-116584532.png" alt="" loading="lazy"></p>
<p>2.运行代码后电脑端的浏览器的动作（拖拽过去后，背景颜色发生变化）。如下图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202410/1232840-20241008103648942-1989304698.gif" alt="" loading="lazy"></p>
<h4 id="autoid-0-3-1">3.2拖动和释放操作</h4>
<p>使用page.dragAndDrop(locator, loacator)，实现自动化测试。</p>
<h5 id="autoid-0-3-2">3.2.1代码设计</h5>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202410/1232840-20241008104007633-1624432120.png" alt="" loading="lazy"></p>
<h5>3.2.2参考代码</h5>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">package</span><span style="color: rgba(0, 0, 0, 1)"> com.bjhg.playwright;

</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.microsoft.playwright.Browser;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.microsoft.playwright.BrowserContext;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.microsoft.playwright.BrowserType;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.microsoft.playwright.Page;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.microsoft.playwright.Playwright;

</span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">
 * </span><span style="color: rgba(128, 128, 128, 1)">@author</span><span style="color: rgba(0, 128, 0, 1)"> 北京-宏哥
 * 
 * @公众号:北京宏哥（微信搜索，关注宏哥，提前解锁更多测试干货）
 * 
 * 《刚刚问世》系列初窥篇-Java+Playwright自动化测试-20-操作鼠标拖拽 -上篇（详细教程）
 *
 * 2024年10月08日
 </span><span style="color: rgba(0, 128, 0, 1)">*/</span>
<span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> Test_DragAndDrop {
    
    
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> main(String[] args) {
        </span><span style="color: rgba(0, 0, 255, 1)">try</span> (Playwright playwright =<span style="color: rgba(0, 0, 0, 1)"> Playwright.create()) {
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">1.使用chromium浏览器，# 浏览器配置，设置以GUI模式启动Chrome浏览器（要查看浏览器UI，在启动浏览器时传递 headless=false 标志。您还可以使用 slowMo 来减慢执行速度。</span>
          Browser browser = playwright.chromium().launch(<span style="color: rgba(0, 0, 255, 1)">new</span> BrowserType.LaunchOptions().setHeadless(<span style="color: rgba(0, 0, 255, 1)">false</span>).setSlowMo(3000<span style="color: rgba(0, 0, 0, 1)">));
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">2.创建context</span>
          BrowserContext context =<span style="color: rgba(0, 0, 0, 1)"> browser.newContext();
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">创建page</span>
          Page page =<span style="color: rgba(0, 0, 0, 1)"> context.newPage();
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">3.浏览器访问demo</span>
          page.navigate("https://jqueryui.com/resources/demos/droppable/default.html"<span style="color: rgba(0, 0, 0, 1)">);
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">4.开始拖拽
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">page.locator("#draggable").dragTo(page.locator("#droppable"));</span>
          page.dragAndDrop("#draggable", "#droppable"<span style="color: rgba(0, 0, 0, 1)">);
          
          System.out.println(</span>"Test Pass"<span style="color: rgba(0, 0, 0, 1)">);
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">关闭page</span>
<span style="color: rgba(0, 0, 0, 1)">          page.close();
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">关闭browser</span>
<span style="color: rgba(0, 0, 0, 1)">          browser.close();
        }
    }
}</span></pre>
</div>
<h5>3.2.3运行代码</h5>
<p>1.运行代码，右键Run As-&gt;Java Application，就可以看到控制台输出，如下图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202410/1232840-20241008103924072-1892409513.png" alt="" loading="lazy"></p>
<p>2.运行代码后电脑端的浏览器的动作（拖拽过去后，背景颜色发生变化）。如下图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202410/1232840-20241008104528142-773605032.gif" alt="" loading="lazy"></p>
</div>
<h4 id="autoid-0-3-2">3.3手工拖拽</h4>
<p>想精确控制拖动操作，可以使用较低级别的手工方法，如locator.hover()、mouse.down()、mouse.move()和mouse.up()。来实现自动化测试。</p>
<h5 id="autoid-0-3-3">3.1代码设计</h5>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202410/1232840-20241008105045660-185216053.png" alt="" loading="lazy"></p>
<h5>3.2参考代码</h5>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">package</span><span style="color: rgba(0, 0, 0, 1)"> com.bjhg.playwright;

</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.microsoft.playwright.Browser;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.microsoft.playwright.BrowserContext;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.microsoft.playwright.BrowserType;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.microsoft.playwright.Page;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.microsoft.playwright.Playwright;

</span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">
 * </span><span style="color: rgba(128, 128, 128, 1)">@author</span><span style="color: rgba(0, 128, 0, 1)"> 北京-宏哥
 * 
 * @公众号:北京宏哥（微信搜索，关注宏哥，提前解锁更多测试干货）
 * 
 * 《刚刚问世》系列初窥篇-Java+Playwright自动化测试-20-操作鼠标拖拽 -上篇（详细教程）
 *
 * 2024年10月08日
 </span><span style="color: rgba(0, 128, 0, 1)">*/</span>
<span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> Test_DragAndDrop {
    
    
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> main(String[] args) {
        </span><span style="color: rgba(0, 0, 255, 1)">try</span> (Playwright playwright =<span style="color: rgba(0, 0, 0, 1)"> Playwright.create()) {
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">1.使用chromium浏览器，# 浏览器配置，设置以GUI模式启动Chrome浏览器（要查看浏览器UI，在启动浏览器时传递 headless=false 标志。您还可以使用 slowMo 来减慢执行速度。</span>
          Browser browser = playwright.chromium().launch(<span style="color: rgba(0, 0, 255, 1)">new</span> BrowserType.LaunchOptions().setHeadless(<span style="color: rgba(0, 0, 255, 1)">false</span>).setSlowMo(3000<span style="color: rgba(0, 0, 0, 1)">));
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">2.创建context</span>
          BrowserContext context =<span style="color: rgba(0, 0, 0, 1)"> browser.newContext();
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">创建page</span>
          Page page =<span style="color: rgba(0, 0, 0, 1)"> context.newPage();
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">3.浏览器访问demo</span>
          page.navigate("https://jqueryui.com/resources/demos/droppable/default.html"<span style="color: rgba(0, 0, 0, 1)">);
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">4.开始拖拽
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">page.locator("#draggable").dragTo(page.locator("#droppable"));
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">page.dragAndDrop("#draggable", "#droppable");</span>
          page.locator("#draggable"<span style="color: rgba(0, 0, 0, 1)">).hover();
          page.mouse().down();
          page.locator(</span>"#droppable"<span style="color: rgba(0, 0, 0, 1)">).hover();
          page.mouse().up();
          System.out.println(</span>"Test Pass"<span style="color: rgba(0, 0, 0, 1)">);
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">关闭page</span>
<span style="color: rgba(0, 0, 0, 1)">          page.close();
          </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">关闭browser</span>
<span style="color: rgba(0, 0, 0, 1)">          browser.close();
        }
    }
}</span></pre>
</div>
<h5>3.3运行代码</h5>
<p>1.运行代码，右键Run'Test'，就可以看到控制台输出，如下图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202410/1232840-20241008105135968-734011721.png" alt="" loading="lazy"></p>
<p>2.运行代码后电脑端的浏览器的动作（拖拽过去后，背景颜色发生变化）。如下图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1232840/202410/1232840-20241008105209979-661401234.gif" alt="" loading="lazy"></p>
<h3 id="autoid-0-3-3">4.小结</h3>
<p>宏哥由于网络的原因，有时可以访问到jquery UI的网页的demo，有时又不可以，在网上找了半天给小伙伴们或者童鞋们又找到一个网址：<a href="https://sahitest.com/demo" rel="noopener nofollow" target="_blank">https://sahitest.com/demo</a>&nbsp;里边有很多在线免费的demo供大家学习使用。有兴趣的同学可以找到里边的拖拽demo来巩固一下今天学习的知识。其实你会发现是很简单的。经过这么久的分享和介绍宏哥发现Java语言的单引号和双引号在playwright中是有区别的，详细区别宏哥就不做赘述，感兴趣的可以自己自行查询资料，小伙伴或者童鞋们要注意哦！</p>
</div>
<div id="MySignature" role="contentinfo">
    <div id="MySignature" style="display: block">
	<div style="font-size: 13px; border: 1px dashed rgb(45, 161, 45); padding: 10px 15px; background-color: rgb(248, 248, 248)">
		<label style="font-weight: bold">
			&nbsp;&nbsp;&nbsp;&nbsp;为了方便大家在移动端也能看到我分享的博文，现已注册个人微信公众号，扫描左下方二维码即可，欢迎大家关注，提前解锁更多测试干货！有时间会及时分享相关技术博文。
		</label>
		<br>
		<label style="font-weight: bold">
			&nbsp;&nbsp;&nbsp;&nbsp;为了方便大家互动讨论相关技术问题，刚刚建立了咱们的专门的微信群交流互动群，群内会分享交流测试领域前沿知识。  请您扫描中间的微信二维码进群 
		</label>
		<br>
		<label style="font-weight: bold">
			&nbsp;&nbsp;&nbsp;&nbsp;为了方便大家互动讨论相关技术问题，现已组建专门的微信群，由于微信群满100，请您扫描右下方宏哥个人微信二维码拉你进群
			<label style="font-weight: bold; color: red; font-size: 15px">
				（请务必备注：已关注公众号进群）平时上班忙（和你一样），所以加好友不及时，请稍安勿躁~
			</label>
			，欢迎大家加入这个大家庭，我们一起畅游知识的海洋。
		</label>
		<br>
		&nbsp;&nbsp;&nbsp;&nbsp;感谢您花时间阅读此篇文章,如果您觉得这篇文章你学到了东西也是为了犒劳下博主的码字不易不妨打赏一下吧，让博主能喝上一杯咖啡，在此谢过了！
		<br>
		&nbsp;&nbsp;&nbsp;&nbsp;如果您觉得阅读本文对您有帮助，请点一下左下角
		<a id="recommend" style="font-weight: bold; color: red; font-size: 15px; text-decoration: underline">
			“推荐”
		</a>
		按钮，您的
		<label style="font-weight: bold; color: red; font-size: 15px">
			“推荐”
		</label>
		将是我最大的写作动力！另外您也可以选择
		<a id="follow_me_btn" style="cursor: pointer; color: blue; text-decoration: underline">
			【
			<strong>
				关注我
			</strong>
			】
		</a>
		，可以很方便找到我！
		<br>
		&nbsp;&nbsp;&nbsp;&nbsp;本文版权归作者和博客园共有，来源网址：
		<a href="https://www.cnblogs.com/du-hong" style="color: red; text-decoration: underline" target="_blank">
			https://www.cnblogs.com/du-hong
		</a>
		欢迎各位转载，但是未经作者本人同意，转载文章之后必须在文章页面明显位置给出作者和原文连接，否则保留追究法律责任的权利！
	</div>
	<div style="text-align: center; margin-top: 10px">
		<p style=" font-weight: bolder; color: red; ">
			公众号(关注宏哥)&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			微信群(扫码进群) &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;
			&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;客服微信
		</p>
		<img style="width: 200px;padding-right: 50px;" alt="个人微信公众号" src="https://img2018.cnblogs.com/common/1741949/201911/1741949-20191119095948011-608816619.png">
		<img style="width: 200px;padding-right: 65px;" alt="微信群" src="https://img2024.cnblogs.com/blog/1232840/202506/1232840-20250610113707419-637869921.png">
		<img style="width: 200px" alt="个人微信" src="https://img2018.cnblogs.com/common/1741949/201911/1741949-20191106101257091-849954564.png">
	</div>
</div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-06-26 09:25">2025-06-26 09:25</span>&nbsp;
<a href="https://www.cnblogs.com/du-hong">北京-宏哥</a>&nbsp;
阅读(<span id="post_view_count">87</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18441675);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18441675', targetLink: 'https://www.cnblogs.com/du-hong/p/18441675', title: '《刚刚问世》系列初窥篇-Java+Playwright自动化测试-20- 操作鼠标拖拽 - 上篇（详细教程）' })">举报</a>
</div>
        