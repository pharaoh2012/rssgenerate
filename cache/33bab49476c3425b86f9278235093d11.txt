
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/top12/p/18770867" title="发布于 2025-03-13 20:21">
    <span role="heading" aria-level="2">2025年再来测试一下.NET各个版本和Golang的http性能，哪个更快？</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h1>&nbsp;</h1>
<p class="atx">今天无聊又翻出了一篇很久以前golang和.net测试的文章(<a href="https://linux.cn/article-8935-1-rel.html" target="_blank" rel="noopener nofollow">原文</a>)，</p>
<p class="atx">很是好奇7、8年过去了，golang和.net 有啥变化吗？</p>
<p class="atx">于是我在电脑上又测了一遍。</p>
<p class="atx">我的电脑是win10系统，.net sdk都下了最新的版本，重新安装了一编，golang用的是go1.24.1。</p>
<p class="atx">好了，各位大佬来看看测试结果吧</p>
<p>&nbsp;</p>
<h2 class="atx">.NET个版本测试结果：</h2>
<p><img src="https://img2024.cnblogs.com/blog/327248/202503/327248-20250313200759004-867796251.png" alt="" width="615" height="661" loading="lazy"></p>
<p>&nbsp;</p>
<h2 id="gin和iris框架测试结果：" class="atx">gin和iris框架测试结果：</h2>
<p><img src="https://img2024.cnblogs.com/blog/327248/202503/327248-20250313200838389-583665636.png" alt="" width="613" height="226" loading="lazy"></p>
<p>&nbsp;</p>
<ul>
<li>完成&nbsp;<code>5000000 个请求</code>的时间 - 越短越好。</li>
<li>请求次数/每秒 - 越大越好。</li>
<li>等待时间 — 越短越好。</li>
<li>内存使用 — 越小越好。</li>
<li>吞吐量 — 越大越好。</li>
</ul>
<h2 id="" class="atx">&nbsp;</h2>
<h2 id="net-代码：" class="atx">.NET 代码：</h2>
<h5 id="net50、60、70" class="atx">NET5.0、6.0、7.0:</h5>
<div class="cnblogs_Highlighter">
<pre class="brush:go;collapse:true;;gutter:true;">using Microsoft.AspNetCore.Mvc;
namespace _5.Controllers
{
    // ValuesController is the equivalent
    // `ValuesController` of the Iris 8.3 mvc application.

    [Route("api/[controller]")]
    public class ValuesController : ControllerBase
    {
        // Get handles "GET" requests to "api/values/{id}".
        [HttpGet("{id}")]
        public string Get(int id)
        {
            return "value";
        }
        // Put handles "PUT" requests to "api/values/{id}".
        [HttpPut("{id}")]
        public void Put(int id, [FromBody] string value)
        {
        }
        // Delete handles "DELETE" requests to "api/values/{id}".
        [HttpDelete("{id}")]
        public void Delete(int id)
        {
        }
    }
}
</pre>
</div>
<p>　　</p>
<h5 id="net80、90、100" class="atx">NET8.0、9.0、10.0:</h5>
<div class="cnblogs_Highlighter">
<pre class="brush:csharp;collapse:true;;gutter:true;">app.MapGet("/api/values/{id}", (int id) =&gt;
{
    return "value";
})
.WithName("GetApi")
.WithOpenApi();
</pre>
</div>
<p>　　</p>
<h3 id="gin-代码：" class="atx">Gin 代码：</h3>
<div class="cnblogs_Highlighter">
<pre class="brush:go;collapse:true;;gutter:true;">package main

import (
  "github.com/gin-gonic/gin"
  "io/ioutil"
)

func main() {
    gin.SetMode(gin.ReleaseMode)
    gin.DefaultWriter = ioutil.Discard
    r := gin.Default()
    r.GET("/api/values/:id", func(c *gin.Context) {
        c.String(200, "value")
    })
    r.Run() // 监听并在 0.0.0.0:8080 上启动服务
}
</pre>
</div>
<p>　　</p>
<h2 id="iris-代码：" class="atx">iris 代码：</h2>
<div class="cnblogs_Highlighter">
<pre class="brush:go;collapse:true;;gutter:true;">package main

import "github.com/kataras/iris/v12"

func main() {
    app := iris.New()

    booksAPI := app.Party("/api")
    {
        booksAPI.Use(iris.Compression)
        booksAPI.Get("/values/{id}", Get)
    }

    app.Listen(":8080")
}


func Get(ctx iris.Context) {
    // id,_ := vc.Params.GetInt("id")
    ctx.WriteString("value")
}
</pre>
</div>
<p>　　</p>
<h2 id="电脑配置：" class="atx">电脑配置：</h2>
<ul>
<li>
<p>CPU：7840H</p>
</li>
<li>
<p>内存：32.0 GB</p>
</li>
<li>
<p>网卡：AX210</p>
</li>
<li>
<p>操作系统： Windows 10 22H2 专业版</p>
</li>
</ul>
<h2 id="-1" class="atx">&nbsp;</h2>
<h2 id="参考地址：" class="atx">参考地址：</h2>
<p><a href="https://linux.cn/article-8935-1-rel.html" rel="noopener nofollow">https://linux.cn/article-8935-1-rel.html</a></p>
<p><a href="https://hackernoon.com/go-vs-net-core-in-terms-of-http-performance-7535a61b67b8" rel="noopener nofollow">https://hackernoon.com/go-vs-net-core-in-terms-of-http-performance-7535a61b67b8</a></p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="1.00244968290625" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-13 20:24">2025-03-13 20:21</span>&nbsp;
<a href="https://www.cnblogs.com/top12">石二</a>&nbsp;
阅读(<span id="post_view_count">48</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18770867" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18770867);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18770867', targetLink: 'https://www.cnblogs.com/top12/p/18770867', title: '2025年再来测试一下.NET各个版本和Golang的http性能，哪个更快？' })">举报</a>
</div>
        