
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/murmansk/p/18726102" title="发布于 2025-02-20 10:45">
    <span role="heading" aria-level="2">JDK8项目简单快速接入AI大模型（无需强制使用JDK17）</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p><span style="font-size: 18px">最近AI风头越来越火，好多项目都需要接入AI接口，但Spring-AI强制绑定JDK17这些，导致以前的很多JDK8项目不太方便</span></p>
<p><span style="font-size: 18px"><strong>找到个办法，<span class="words-blog hl-git-1" data-tit="JDK17" data-pretit="jdk17">使用<span style="background-color: rgba(136, 136, 136, 1)">AI4J</span>来接入</span></strong></span></p>
<p><span class="words-blog hl-git-1" data-tit="JDK17" data-pretit="jdk17">1.本地部署Ollama,这个属于部署本地大模型，网上随便就能搜到，非本文重点（比如本站这位博主的博文<a href="https://www.cnblogs.com/ranjiang/p/18725581">1 使用ollama完成DeepSeek本地部署 - wrj的博客 - 博客园</a>）</span></p>
<p><span class="words-blog hl-git-1" data-tit="JDK17" data-pretit="jdk17">2.开始，引入ai4j依赖</span></p>
<div class="cnblogs_code">
<pre>&lt;dependency&gt;
    &lt;groupId&gt;io.github.lnyo-cly&lt;/groupId&gt;
    &lt;artifactId&gt;ai4j-spring-boot-stater&lt;/artifactId&gt;
    &lt;version&gt;0.6.2&lt;/version&gt;
&lt;/dependency&gt;</pre>
</div>
<p>3.配置yml文件</p>
<p><img src="https://img2024.cnblogs.com/blog/1751556/202502/1751556-20250220103028272-694530673.png" alt="" loading="lazy"></p>
<p>&nbsp;如果你是部署到本地就是</p>
<pre>http://localhost:11434/</pre>
<p>4.正常编写接口</p>
<p>controller类</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> io.renren.modules.event.service.OllamaService;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> io.swagger.annotations.Api;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.springframework.beans.factory.annotation.Autowired;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.springframework.web.bind.annotation.GetMapping;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.springframework.web.bind.annotation.RequestMapping;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.springframework.web.bind.annotation.RequestParam;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.springframework.web.bind.annotation.RestController;

</span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">
 * </span><span style="color: rgba(128, 128, 128, 1)">@author</span><span style="color: rgba(0, 128, 0, 1)"> ***
 * </span><span style="color: rgba(128, 128, 128, 1)">@since</span><span style="color: rgba(0, 128, 0, 1)"> 2025/2/18
 * AI问答接口
 </span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">
@RestController
@RequestMapping(</span>"event/ollama"<span style="color: rgba(0, 0, 0, 1)">)
@Api(tags </span>= "ollama接口"<span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> OllamaController {

    @Autowired
    </span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> OllamaService ollamaService;

    @GetMapping(</span>"/chat"<span style="color: rgba(0, 0, 0, 1)">)
    </span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> String getChatMessage(@RequestParam String question){
        String chatMessage </span>=<span style="color: rgba(0, 0, 0, 1)"> ollamaService.getChatMessage(question);
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> chatMessage;
    }
}</span></pre>
</div>
<p>service类</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">
 * </span><span style="color: rgba(128, 128, 128, 1)">@author</span><span style="color: rgba(0, 128, 0, 1)"> ***
 * </span><span style="color: rgba(128, 128, 128, 1)">@since</span><span style="color: rgba(0, 128, 0, 1)"> 2025/2/19
 </span><span style="color: rgba(0, 128, 0, 1)">*/</span>
<span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">interface</span><span style="color: rgba(0, 0, 0, 1)"> OllamaService {

    String getChatMessage(String question);
}</span></pre>
</div>
<p>Impl类</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> io.github.lnyocly.ai4j.platform.openai.chat.entity.ChatCompletion;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> io.github.lnyocly.ai4j.platform.openai.chat.entity.ChatCompletionResponse;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> io.github.lnyocly.ai4j.platform.openai.chat.entity.ChatMessage;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> io.github.lnyocly.ai4j.service.IChatService;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> io.github.lnyocly.ai4j.service.PlatformType;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> io.github.lnyocly.ai4j.service.factor.AiService;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> io.renren.modules.event.service.OllamaService;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.springframework.beans.factory.annotation.Autowired;
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.springframework.stereotype.Service;

</span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">
 * </span><span style="color: rgba(128, 128, 128, 1)">@author</span><span style="color: rgba(0, 128, 0, 1)"> ***
 * </span><span style="color: rgba(128, 128, 128, 1)">@since</span><span style="color: rgba(0, 128, 0, 1)"> 2025/2/19
 </span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">
@Service
</span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span> OllamaServiceImpl <span style="color: rgba(0, 0, 255, 1)">implements</span><span style="color: rgba(0, 0, 0, 1)"> OllamaService {

    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 注入Ai服务</span>
<span style="color: rgba(0, 0, 0, 1)">    @Autowired
    </span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> AiService aiService;
    @Override
    </span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> String getChatMessage(String question) {
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 获取OLLAMA的聊天服务</span>
        IChatService chatService =<span style="color: rgba(0, 0, 0, 1)"> aiService.getChatService(PlatformType.OLLAMA);

        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 创建请求参数</span>
        ChatCompletion chatCompletion =<span style="color: rgba(0, 0, 0, 1)"> ChatCompletion.builder()
                .model(</span>"deepseek-r1:32b"<span style="color: rgba(0, 0, 0, 1)">)
                .message(ChatMessage.withUser(question))
                .build();

        System.out.println(chatCompletion);

        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 发送chat请求</span>
        ChatCompletionResponse chatCompletionResponse = <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">;
        </span><span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)"> {
            chatCompletionResponse </span>=<span style="color: rgba(0, 0, 0, 1)"> chatService.chatCompletion(chatCompletion);
        } </span><span style="color: rgba(0, 0, 255, 1)">catch</span><span style="color: rgba(0, 0, 0, 1)"> (Exception e) {
            </span><span style="color: rgba(0, 0, 255, 1)">throw</span> <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> RuntimeException(e);
        }

        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 获取聊天内容和token消耗</span>
        String content = chatCompletionResponse.getChoices().get(0<span style="color: rgba(0, 0, 0, 1)">).getMessage().getContent();
        </span><span style="color: rgba(0, 0, 255, 1)">long</span> totalTokens =<span style="color: rgba(0, 0, 0, 1)"> chatCompletionResponse.getUsage().getTotalTokens();
        System.out.println(</span>"总token消耗: " +<span style="color: rgba(0, 0, 0, 1)"> totalTokens);

        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> content;
    }
}</span></pre>
</div>
<p>5.测试</p>
<p><img src="https://img2024.cnblogs.com/blog/1751556/202502/1751556-20250220103837809-956731268.png" alt="" loading="lazy"></p>
<p>&nbsp;...(扩展操作自行研究即可)</p>
<p>&nbsp;</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.0006505824907407407" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-20 10:46">2025-02-20 10:45</span>&nbsp;
<a href="https://www.cnblogs.com/murmansk">素衣如岚</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18726102" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18726102);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18726102', targetLink: 'https://www.cnblogs.com/murmansk/p/18726102', title: 'JDK8项目简单快速接入AI大模型（无需强制使用JDK17）' })">举报</a>
</div>
        