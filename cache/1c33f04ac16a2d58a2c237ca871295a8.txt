
        <h2>
            <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/lmw425317/p/18953552" title="发布于 2025-06-28 14:20">
    <span role="heading" aria-level="2">鸡尾酒排序</span>
    

</a>

        </h2>
        <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="鸡尾酒排序">鸡尾酒排序</h1>
<h2 id="前言">前言</h2>
<p>笔者最近看算法文章的时候，看到一个鸡尾酒排序的算法，是冒泡排序的一种变种。记录一下，每天一个知识点。</p>
<h2 id="算法概述">算法概述</h2>
<p>鸡尾酒排序（Cocktail Sort），又称双向冒泡排序（Bidirectional Bubble Sort）、摇摆排序（Shake Sort），是对传统<strong>冒泡排序</strong>的一种改进。它在基本思想上与冒泡排序类似，但排序过程是<strong>交替地从左到右和从右到左</strong>进行的，从而可以更快地将元素移动到正确的位置。</p>
<hr>
<h3 id="核心思想">核心思想</h3>
<ul>
<li>类似于冒泡排序，通过比较相邻元素并交换顺序错误的对。</li>
<li>不同之处在于：
<ul>
<li><strong>第一轮</strong>：从左向右遍历，把<strong>最大的元素“冒泡”到末尾</strong>。</li>
<li><strong>第二轮</strong>：从右向左遍历，把<strong>最小的元素“沉降”到开头</strong>。</li>
<li>如此反复，每次缩小未排序部分的范围，直到整个数组有序。</li>
</ul>
</li>
</ul>
<hr>
<h3 id="特点">特点</h3>
<table>
<thead>
<tr>
<th>特性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>时间复杂度</td>
<td>最坏 O($n<sup 2="">{2}$)，平均O($n</sup>$)，最好 O($n$)（已有序）</td>
</tr>
<tr>
<td>空间复杂度</td>
<td>O(1)，原地排序</td>
</tr>
<tr>
<td>稳定性</td>
<td>✅ 稳定排序（相等元素顺序不变）</td>
</tr>
<tr>
<td>是否比较排序</td>
<td>✅ 是</td>
</tr>
</tbody>
</table>
<hr>
<h3 id="javascript-实现示例">javascript 实现示例</h3>
<pre><code class="language-javascript"> var arr =[5, 1, 4, 2, 8, 0, 3];
var sortedArr = cocktailSort(clone(arr));
console.log(arr,sortedArr);


function cocktailSort(arr) {
  var len = arr.length;
  var start = 0;
  var end = len - 1;
  var isSorted = false;
  while (isSorted === false) {
    isSorted = true;
    // 第一轮：从左到右进行，大数移动到右侧
    for (var i = start; i &lt; end; i++) {
      if (arr[i] &lt;= arr[i + 1]) continue;
      swap(arr, i, i + 1);
      isSorted = false;
    }
    // 如果已经有序，则结束
    if(isSorted) break;
    isSorted = true;
    // 第二轮：从右到左进行，小数移动到左侧
    for (var i = end - 1; i &gt; start; i--){
      if (arr[i] &gt;= arr[i - 1]) continue;
      swap(arr, i, i - 1);
      isSorted = false;
    }

    start++;
    end--;
  }
  return arr;
}

// ---------辅助函数-----------
function swap(arr, i, j) {
  var temp = arr[i];
  arr[i] = arr[j];
  arr[j] = temp;
}

function clone(arr) {
  return arr.slice(0);
}
</code></pre>
<hr>
<h3 id="示例说明">示例说明</h3>
<p>以数组 <code>[5, 1, 4, 2, 8, 0, 3]</code> 为例：</p>
<ul>
<li>第一轮从左到右：将最大值 <code>8</code> 移动到最右边。</li>
<li>第二轮从右到左：将最小值 <code>0</code> 移动到最左边。</li>
<li>依此类推，每轮缩小排序区间，直到全部有序。</li>
</ul>
<hr>
<h3 id="优点--缺点">优点 &amp; 缺点</h3>
<table>
<thead>
<tr>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody>
<tr>
<td>比普通冒泡排序快一些（尤其在两端有极值时）</td>
<td>时间复杂度仍为 <code>O(n^2)</code>，不适合大数据集</td>
</tr>
<tr>
<td>实现简单、稳定</td>
<td>效率远低于快速排序、归并排序等高级算法</td>
</tr>
</tbody>
</table>
<hr>
<h3 id="使用场景">使用场景</h3>
<ul>
<li>数据量较小的教学场景。</li>
<li>当数据已经接近有序时效率较高。</li>
<li>用于演示排序算法中的“优化思想”。</li>
</ul>

</div>
<div class="clear"></div>

        <p class="postfoot">
            posted on 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-06-28 14:21">2025-06-28 14:20</span>&nbsp;
<a href="https://www.cnblogs.com/lmw425317">李明卫</a>&nbsp;
阅读(<span id="post_view_count">12</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18953552);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18953552', targetLink: 'https://www.cnblogs.com/lmw425317/p/18953552', title: '鸡尾酒排序' })">举报</a>

        </p>
    