
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/SmalBox/p/19065627" title="发布于 2025-08-30 11:40">
    <span role="heading" aria-level="2">【渲染管线】UnityURP[渲染顺序]与[层级]</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        <img src="https://img2024.cnblogs.com/blog/3685400/202508/3685400-20250830114352886-1396998834.png" alt="【渲染管线】UnityURP[渲染顺序]与[层级]" class="desc_img">
        Unity渲染管线演进：从Built-in到URP的渲染顺序对比 Unity渲染系统经历了Built-in管线到可编程渲染管线(SRP)的演进。Built-in管线通过摄像机深度、材质RenderQueue和物体距离决定渲染顺序，而URP(前身LWRP)在继承这些特性的同时，引入了Priority属性、SortingLayer分层等更灵活的控制机制。URP将渲染队列分为不透明(0-2500)和透明(2501-5000)区间，支持多摄像机协作(base-overlay模式)和动态参数调整，通过精细控制渲染顺序
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<blockquote>
<p><a href="https://blog.csdn.net/chenghai37/category_13021255.html?fromshare=blogcolumn&amp;sharetype=blogcolumn&amp;sharerId=13021255&amp;sharerefer=PC&amp;sharesource=chenghai37&amp;sharefrom=from_link" target="_blank" rel="noopener nofollow">【从UnityURP开始探索游戏渲染】</a><strong>专栏-直达</strong></p>
</blockquote>
<h1 id="介绍与历史发展"><strong>介绍与历史发展</strong></h1>
<p>Unity的渲染顺序系统经历了从Built-in管线到可编程渲染管线(SRP)的演进。在传统Built-in管线中，渲染顺序主要由摄像机深度和材质RenderQueue决定，而URP(Universal Render Pipeline)作为SRP的一种实现，提供了更灵活可控的渲染顺序管理机制。</p>
<p>URP的前身是LWRP(轻量级渲染管线)，在Unity 2019中成为默认管线并更名为URP，它替代了原来的Built-in管线，引入了全新的渲染架构。URP的渲染主入口在UniversalRenderPipeline类，它继承自RenderPipeline，是整个渲染流程的关键类.</p>
<h1 id="内置管线与urp渲染顺序对比"><strong>内置管线与URP渲染顺序对比</strong></h1>
<h2 id="内置管线渲染顺序"><strong>内置管线渲染顺序</strong></h2>
<h3 id="内置管线主要依赖以下因素决定渲染顺序">内置管线主要依赖以下因素决定渲染顺序：</h3>
<ul>
<li>摄像机Depth值：深度小的先渲染</li>
<li>材质RenderQueue：数值小的先渲染</li>
<li>物体与摄像机的距离：近的物体先渲染(不透明物体)或后渲染(透明物体)</li>
</ul>
<h3 id="内置管线将渲染队列分为">内置管线将渲染队列分为：</h3>
<ul>
<li>Opaque队列(RenderQueue&lt;2500)：不透明物体</li>
<li>Transparent队列(RenderQueue≥2500)：透明物体</li>
</ul>
<h2 id="urp渲染顺序"><strong>URP渲染顺序</strong></h2>
<p>URP在继承内置管线部分特性的基础上，引入了更多控制维度：</p>
<h3 id="基础排序规则">‌<strong>基础排序规则</strong>‌：</h3>
<ul>
<li>Camera Depth仍为最高优先级</li>
<li>新增Priority属性控制材质渲染顺序(值越小渲染越晚)</li>
<li>支持基于Sorting Layer和Order in Layer的分层渲染</li>
</ul>
<h3 id="多摄像机共存机制">‌<strong>多摄像机共存机制</strong>‌：</h3>
<ul>
<li>采用base-overlay模式，由base摄像机与多个overlay摄像机组成</li>
<li>overlay摄像机按Stack List中的顺序绘制</li>
</ul>
<h3 id="渲染队列处理">‌<strong>渲染队列处理</strong>‌：</h3>
<ul>
<li>
<p>当RenderQueue分别在[0-2500]和[2501-5000]时，按RenderQueue绘制，无视SortingLayer/OrderInLayer</p>
<ul>
<li>Unity Shader中的渲染顺序层主要通过渲染队列（RenderQueue）实现，每个队列对应一个索引号来控制物体的渲染优先级，索引值越小越优先渲染。‌</li>
</ul>
<p>SubShader中Tags{ “Queue” = “<strong>Transparent</strong>”}</p>
<p>以下是Unity中主要的渲染顺序层及其索引号列表：</p>
<ul>
<li>Background: 1000（最早渲染，用于天空盒等背景物体）‌</li>
<li>Geometry: 2000（用于大多数不透明物体，如默认着色器）‌</li>
<li>AlphaTest: 2450（用于需要Alpha测试的物体，如透明裁剪植被）‌</li>
<li>Transparent: 3000（用于半透明物体，如粒子或透明材质）‌</li>
<li>Overlay: 4000（最后渲染，用于屏幕特效如光晕或GUI）‌</li>
</ul>
<p>这些索引值的顺序确保了渲染效率，其中不透明队列（值 &lt; 2500）通常从前向后渲染，而半透明队列（值 &gt; 2500）从后向前渲染以避免视觉错误。</p>
<p>“Transparent+1”使用+1方式明确表示层级被优先渲染。</p>
</li>
<li>
<p>同队列范围内时，SortingLayer和OrderInLayer生效</p>
</li>
</ul>
<h1 id="渲染顺序解决的问题"><strong>渲染顺序解决的问题</strong></h1>
<h2 id="视觉正确性">‌<strong>视觉正确性</strong>‌</h2>
<ul>
<li>确保透明物体在不透明物体之后渲染，实现正确的混合效果</li>
</ul>
<h2 id="性能优化">‌<strong>性能优化</strong>‌</h2>
<ul>
<li>通过合理排序减少overdraw(过度绘制)，提高渲染效率</li>
</ul>
<h2 id="艺术控制">‌<strong>艺术控制</strong>‌</h2>
<ul>
<li>允许美术师通过层级设置控制场景元素的显示优先级</li>
</ul>
<h2 id="多摄像机协作">‌<strong>多摄像机协作</strong>‌</h2>
<ul>
<li>支持UI摄像机与场景摄像机的分层渲染</li>
</ul>
<h2 id="平台适配">‌<strong>平台适配</strong>‌</h2>
<ul>
<li>在移动设备上可通过调整渲染顺序优化性能</li>
</ul>
<h1 id="urp渲染顺序的使用方法"><strong>URP渲染顺序的使用方法</strong></h1>
<h2 id="基础设置"><strong>基础设置</strong></h2>
<ul>
<li>
<p>‌<strong>通过材质Priority属性</strong>‌：</p>
<pre><code class="language-csharp">csharp
material.renderQueue = 2001;// 设置渲染队列
material.priority = -1;// 设置优先级(URP特有)
</code></pre>
<p>值越小渲染越晚</p>
</li>
<li>
<p>‌<strong>通过Sorting Layer和Order in Layer</strong>‌：</p>
<ul>
<li>在Tags and Layers中定义Sorting Layer</li>
<li>设置Renderer的Sorting Layer和Order in Layer</li>
</ul>
</li>
</ul>
<h2 id="高级控制"><strong>高级控制</strong></h2>
<ul>
<li>
<p>‌<strong>使用RenderObjects特性</strong>‌：</p>
<p>在URP Asset中添加Renderer Feature，通过Filter Settings控制特定对象的渲染顺序</p>
</li>
<li>
<p>‌<strong>多Pass渲染</strong>‌：</p>
<ul>
<li>使用UniversalForward Pass进行主光照渲染</li>
<li>使用SRPDefaultUnlit Pass进行无光照渲染</li>
</ul>
</li>
<li>
<p>‌<strong>动态修改URP设置</strong>‌：</p>
<pre><code class="language-csharp">csharp
var pipelineAsset = GraphicsSettings.renderPipelineAsset as UniversalRenderPipelineAsset;
pipelineAsset.supportsHDR = false;
pipelineAsset.msaaSampleCount = 4;
</code></pre>
<p>可动态调整管线参数影响整体渲染顺序</p>
</li>
</ul>
<h2 id="透明物体处理"><strong>透明物体处理</strong></h2>
<ul>
<li>
<p>‌<strong>着色器中设置</strong>‌：</p>
<pre><code class="language-c">shader
Tags { "RenderType"="Transparent" "Queue"="Transparent" }
Blend SrcAlpha OneMinusSrcAlpha
</code></pre>
<p>确保透明物体正确混合</p>
</li>
<li>
<p>‌<strong>避免深度冲突</strong>‌：</p>
<p>通过调整物体位置或使用Offset因子解决透明物体间的深度问题</p>
</li>
</ul>
<p>URP的渲染顺序系统相比内置管线提供了更精细的控制能力，开发者可以根据项目需求灵活调整渲染顺序，在保证视觉效果的同时优化性能</p>
<hr>
<blockquote>
<p><a href="https://blog.csdn.net/chenghai37/category_13021255.html?fromshare=blogcolumn&amp;sharetype=blogcolumn&amp;sharerId=13021255&amp;sharerefer=PC&amp;sharesource=chenghai37&amp;sharefrom=from_link" target="_blank" rel="noopener nofollow">【从UnityURP开始探索游戏渲染】</a><strong>专栏-直达</strong></p>
</blockquote>
<p>（欢迎<em>点赞留言</em>探讨，更多人加入进来能更加完善这个探索的过程，🙏）</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.002777777777777778" data-date-updated="2025-08-30 11:44">2025-08-30 11:40</span>&nbsp;
<a href="https://www.cnblogs.com/SmalBox">SmalBox</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19065627);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19065627', targetLink: 'https://www.cnblogs.com/SmalBox/p/19065627', title: '【渲染管线】UnityURP[渲染顺序]与[层级]' })">举报</a>
</div>
        