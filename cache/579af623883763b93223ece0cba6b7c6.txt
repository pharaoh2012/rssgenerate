
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/xwz1024/p/18977351" title="发布于 2025-07-10 17:14">
    <span role="heading" aria-level="2">Django+DRF 实战：自定义异常处理流程</span>
    

</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			    <div id="cnblogs_post_description" style="display: none">
        <img src="https://img2024.cnblogs.com/blog/1565852/202507/1565852-20250710171445813-871414763.png" alt="Django+DRF 实战：自定义异常处理流程" class="desc_img">
        本文详解DRF异常处理流程，包括默认处理机制与自定义异常处理器的实现方法。通过源码分析和实战示例，讲解如何全局捕获并统一返回错误信息，并结合日志记录与友好提示提升项目健壮性。适用于Django进阶开发。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="一drf-异常处理流程">一、DRF 异常处理流程</h2>
<h3 id="drf-默认异常处理流程">DRF 默认异常处理流程</h3>
<p>DRF默认的异常处理流程如下：</p>
<ol>
<li>当异常发生时，会自动调用<code>rest_framework.views.exception_handler</code> 函数来处理异常。</li>
<li>该函数对DRF异常（即继承了<code>APIException</code> 类）和Django内置的<code>Http404、PermissionDenied</code>异常，提取错误信息并返回响应</li>
<li>其它异常不处理，返回None（抛出到外层）。</li>
</ol>
<h3 id="源码">源码</h3>
<p>下面是DRF的<code>exception_handler</code> 异常处理函数源码</p>
<pre><code class="language-python"># rest_framework.views.py
def exception_handler(exc, context):
    if isinstance(exc, Http404):
        exc = exceptions.NotFound(*(exc.args))
    elif isinstance(exc, PermissionDenied):
        exc = exceptions.PermissionDenied(*(exc.args))

    if isinstance(exc, exceptions.APIException):
        headers = {}
        if getattr(exc, 'auth_header', None):
            headers['WWW-Authenticate'] = exc.auth_header
        if getattr(exc, 'wait', None):
            headers['Retry-After'] = '%d' % exc.wait

        if isinstance(exc.detail, (list, dict)):
            data = exc.detail
        else:
            data = {'detail': exc.detail}

        set_rollback()
        return Response(data, status=exc.status_code, headers=headers)

    return None
</code></pre>
<h2 id="二实战">二、实战</h2>
<h3 id="drf-自定义异常处理流程">DRF 自定义异常处理流程</h3>
<p>DRF 自定义异常处理流程示例：</p>
<ol>
<li>定义<code>custom_exception_handler</code>函数，作为DRF的全局异常处理器</li>
<li>该函数记录详细的错误日志，包括用户、IP、请求路径、方法、视图及异常信息。然后，统一返回错误响应格式
<ul>
<li>若异常未被 DRF 捕获，返回 500 错误或特定 ProtectedError 提示</li>
<li>若为 DRF 的 <code>ValidationError</code> 或 Django 的验证错误，调用对应处理函数提取错误信息</li>
<li>其他异常则根据状态码返回预定义的友好提示</li>
</ul>
</li>
</ol>
<p><img alt="image-20250707171946912" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1565852/202507/1565852-20250710171416026-269658515.png" class="lazyload"></p>
<h3 id="应用自定义异常处理流程">应用自定义异常处理流程</h3>
<p>在 <code>settings.py</code> 中，配置DRF自定义异常处理函数，作为全局异常处理器。</p>
<pre><code class="language-python">REST_FRAMEWORK = {
    # ...
    # 全局异常处理
    "EXCEPTION_HANDLER": "mars_framework.exceptions.base.custom_exception_handler",
    # ...
}
</code></pre>
<p><a href="https://gitee.com/zhulj993/mars-mgn/blob/master/mysite/mars_framework/exceptions/base.py" target="_blank" rel="noopener nofollow">点击查看完成代码</a></p>
<hr>
<p>您正在阅读的是《<strong>Django从入门到实战</strong>》专栏！关注不迷路~</p>

</div>
<div class="clear"></div>

		</div>
		<div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-07-10 17:15">2025-07-10 17:14</span>&nbsp;
<a href="https://www.cnblogs.com/xwz1024">小王子1024</a>&nbsp;
阅读(<span id="post_view_count">83</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18977351);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18977351', targetLink: 'https://www.cnblogs.com/xwz1024/p/18977351', title: 'Django+DRF 实战：自定义异常处理流程' })">举报</a>
</div>
	