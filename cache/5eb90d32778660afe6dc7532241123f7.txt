
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/JulianHuang/p/18798861" title="发布于 2025-03-28 21:50">
    <span role="heading" aria-level="2">K8s Ingress， 你这个老6</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        Ingress 这个老6，结合nodeport和ClusterIp两种服务类型，你在引流这一块玩的花啊。
入口一夫当关，对内如鱼得水。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>本文是有态度马甲的第185篇原创。</p>
<p>本文记录了k8s中核心对象Ingress的产生背景和实现机制。</p>
<p>我们都知道k8s Service是一种将Pods通过网络暴露出来的抽象，每个服务定义了一组有关Pod的端点， Service有几种类型</p>
<ul>
<li>ClusterIP： 默认，以集群内Ip的形式提供集群内的可访问性</li>
<li>NodePort：在每个节点的静态端口上对外暴露了服务</li>
<li>Loadbalancer： 外部负载均衡器</li>
</ul>
<p>这不明摆了，常规的对外暴露服务的方式只有NodePort吗？<br>
<img src="https://img2024.cnblogs.com/blog/587720/202503/587720-20250328214652327-1222981527.png" alt="" loading="lazy"></p>
<p>NodePort类型建立在ClusterIP服务类型之上， 意味着你创建了NodePort类型服务，k8s自动创建了ClusterIP 服务。</p>
<p>外部客户端---&gt; 任意节点（NodePort）---&gt; ClusterIP服务---&gt; Pod</p>
<p>有几个缺陷：</p>
<ul>
<li>NodePort形式的服务 没有跨节点的负载均衡能力， 有的节点忙着导流，有的闲得蛋疼</li>
<li>能暴露的服务数量受限于节点的可用端口</li>
<li>这姑且不算缺陷吧： 引流方式基于节点端口，位于osi网络模型的4层， 人类感知不明显。</li>
</ul>
<p>Ingress号称是一种智能路由，表象上Ingress从集群外部将HTTP和HTTPS路由引流到k8s集群中的Service。</p>
<p><img src="https://img2024.cnblogs.com/blog/587720/202503/587720-20250328214723405-433070831.png" alt="" loading="lazy"><br>
一个典型的数据流如上图</p>
<p>曾几何时，我以为Ingress是新开天辟地的网络引流方案。</p>
<p>后面等我深究一丢丢，发现k8s Ingress 其实是个老6， 它对外暴露服务的方式其实很贼，还是现成技能的积木。</p>
<p>Ingress 本质上是先在集群内产生了负载均衡服务(nginx pod), 这个k8s服务在集群内与其他服务必然可以互访。</p>
<p>然后咋们目标不是要对外暴露服务吗？ 那我这个Ingress Nginx服务就作为一个流量入口，我这个服务还使用NodePort形式对外暴露服务， 对内通过nginx天生的路由能力来引流到后端的Service。</p>
<p>下面是Ingress-nginx的流程图:<br>
<img src="https://img2024.cnblogs.com/blog/587720/202503/587720-20250328214752505-1181149432.png" alt="" loading="lazy"></p>
<p>注意流量从 client---&gt; nginx pod ---&gt; service Pod,</p>
<p>Ingress记录并监听了注册到Ingress上服务的路由规则，Ingress-Nginx Controller是本次业务的声明式核心控制器，确保产生满足这一规则的NodePort类型的nginx服务, Ingress nginx本身不能解决节点间负载均衡问题，注意还需前置负载提供跨节点负载均衡能力。</p>
<hr>
<p>我们找个demo快速验证一下吧。</p>
<p><a href="https://kubernetes.io/docs/tasks/access-application-cluster/ingress-minikube/" title="k8s ingress官方" target="_blank" rel="noopener nofollow">k8s ingress官方</a> 给了一个通过Ingress引流到"hello world“ 这样的服务，但是它的服务竟然采用了NodePort形式，这都NodePort了，还要你Ingress作甚。</p>
<p>我的Demo是以默认的<code>ClusterIP形式</code>快速启动了Nginx服务，</p>
<p><img src="https://img2024.cnblogs.com/blog/587720/202503/587720-20250328214817656-413414638.png" alt="" loading="lazy"></p>
<p>已经显示nginx-svc是 ClusterIP类型的服务。</p>
<pre><code>aladdin@bogon ~ % kubectl get  svc
NAME         TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)   AGE
kubernetes   ClusterIP   10.96.0.1      &lt;none&gt;        443/TCP   7d
nginx-svc    ClusterIP   10.103.46.57   &lt;none&gt;        80/TCP    24h
</code></pre>
<p>之后使用Ingress配置通过<code>host:hello.nginx.com</code>路由到<code>nginx-svc</code>服务：</p>
<pre><code>    apiVersion: networking.k8s.io/v1
    kind: Ingress
    metadata:
      name: example-ingress
    spec:
      rules:
      - host: hello.nginx.com
        http:
          paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: nginx-svc
                port:
                  number: 80
</code></pre>
<p>产生一个Ingress核心对象</p>
<pre><code>    aladdin@bogon ~ % kubectl get  ingress
    NAME              CLASS   HOSTS             ADDRESS        PORTS   AGE
    example-ingress   nginx   hello.nginx.com   192.168.58.2   80      24h
</code></pre>
<p>准备工作就做完了。</p>
<p>启动<code>minikube tunnel</code>, 然后在新的终端执行<code>curl  127.0.0.1 -H  "host:hello.nginx.com"</code> 你会看到nginx服务的<code>Welcome to nginx!</code>输出。</p>
<p>That's All, Ingress 就是如此暴露服务引流的.</p>
<hr>
<p>Ingress相关的核心对象默认被安装在<code>Ingress-nginx</code>命名空间下，我们接着验证Ingress架构图中出现的组件:</p>
<p><img src="https://img2024.cnblogs.com/blog/587720/202503/587720-20250328214906849-622124729.png" alt="" loading="lazy"></p>
<p>上图中出现了两种核心对象：</p>
<ul>
<li>Deployment/Pod： ingress-nginx-controller-56d7c84fd4-znrvq其实就是Nginx Pod</li>
<li>Service： 以NodePort形式对外暴露的ingress-nginx-controller服务</li>
</ul>
<p>根据我们的猜想：</p>
<p>这个Nginx Pod受ingress-nginx-controller服务(NodePort)控制对外暴露路由服务， 对内引流到backend Service。</p>
<p>验证如下：<br>
<img src="https://img2024.cnblogs.com/blog/587720/202503/587720-20250328214929319-661847664.png" alt="" loading="lazy"></p>
<hr>
<p>Ingress-nginx分为两大块： Ingress规则和Ingress-nginx controller Service，</p>
<p>两者配合一举解决了NodePort暴露服务的一些缺陷， 通过Ingress暴露服务既能有效节约节点端口，又有负载均衡能力（搭配前置负载），又是广大码农喜闻乐见的7层协议， 悠哉快哉。</p>
<p>但是归根到底，Ingress-nginx底层还是NodePort服务和ClusterIP服务的积木组合， 实在是高啊。</p>

</div>
<div id="MySignature" role="contentinfo">
    <hr style="FILTER: alpha(opacity=100,finishopacity=0,style=3)" width="80%" color="#987cb9" size="3">
<div style="text-align:center;">
<p>本文来自博客园，作者：{有态度的马甲}，转载请注明原文链接：<a href="https://www.cnblogs.com/JulianHuang/p/18798861" target="_blank">https://www.cnblogs.com/JulianHuang/p/18798861</a></p>
<strong style="color: red; ">欢迎关注我的原创技术、职场公众号， 加好友谈天说地，一起进化</strong>
<div><img style="width: 250px;height:250px;" src="https://blog-static.cnblogs.com/files/JulianHuang/QR.gif"> </div>

</div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="1.016860911037037" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-28 21:51">2025-03-28 21:50</span>&nbsp;
<a href="https://www.cnblogs.com/JulianHuang">码甲哥不卷</a>&nbsp;
阅读(<span id="post_view_count">63</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18798861" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18798861);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18798861', targetLink: 'https://www.cnblogs.com/JulianHuang/p/18798861', title: 'K8s Ingress， 你这个老6' })">举报</a>
</div>
        