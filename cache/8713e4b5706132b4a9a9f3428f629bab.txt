
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/lori/p/18669091" title="发布于 2025-01-13 17:38">
    <span role="heading" aria-level="2">keycloak~巧用client-scope实现token字段和userinfo接口的授权</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>keycloak中的client-scope允许你为每个客户端分配scope，而scope就是授权范围，它直接影响了token中的内容，及userinfo端点可以获取到的用户信息，这块我们可以通过自定义scope/mapper，来实现粒度的控制，并且这个mapper可以控制添加到token，或者添加到userinfo端点，这两块配置也是独立的，下面我们通过一个登录IP地址的mapper，来实现将登录ip添加到token和userinfo端点。</p>
<h1 id="添加mapper对象">添加Mapper对象</h1>
<pre><code>public class ExtensionLoginIpMapper
        extends AbstractOIDCProtocolMapper
        implements OIDCAccessTokenMapper, OIDCIDTokenMapper, UserInfoTokenMapper {
    public static final String CONFIG_NAME = "ExtensionLoginIp";//配置里的名称
    public static final String PROVIDER_ID = "oidc-extension-login-ip-mapper";
    private static final List&lt;ProviderConfigProperty&gt; configProperties = new ArrayList&lt;ProviderConfigProperty&gt;();
    private static final String LOGIN_IP = "loginIp";

    static {
        configProperties.add(createConfigProperty(CONFIG_NAME, "Token申请名", "在jwt中的属性名称，默认loginIp"));
        OIDCAttributeMapperHelper.addIncludeInTokensConfig(configProperties, ExtensionLoginIpMapper.class);
    }

    protected static ProviderConfigProperty createConfigProperty(String claimName, String label, String help) {
        ProviderConfigProperty property = new ProviderConfigProperty();
        property.setName(claimName);
        property.setLabel(label);
        property.setHelpText(help);
        property.setType(ProviderConfigProperty.STRING_TYPE);
        return property;
    }

    @Override
    protected void setClaim(IDToken token, ProtocolMapperModel mappingModel, UserSessionModel userSession,
                            KeycloakSession keycloakSession, ClientSessionContext clientSessionCtx) {
        try {
            String key = LOGIN_IP;
            if (mappingModel.getConfig().containsKey(CONFIG_NAME)) {
                key = mappingModel.getConfig().get(CONFIG_NAME);
            }

            if (userSession.getNotes().containsKey(LOGIN_IP)) {
                String val = userSession.getNote(LOGIN_IP);
                token.setOtherClaims(key, val);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public List&lt;ProviderConfigProperty&gt; getConfigProperties() {
        return configProperties;
    }

    @Override
    public String getId() {
        return PROVIDER_ID;
    }

    @Override
    public String getDisplayType() {
        return CONFIG_NAME;
    }

    @Override
    public String getDisplayCategory() {
        return TOKEN_MAPPER_CATEGORY;
    }

    @Override
    public String getHelpText() {
        return "Maps Extension Login Ip Address.";
    }
}

</code></pre>
<h1 id="将mapper添加到client-scope">将Mapper添加到Client Scope</h1>
<ul>
<li>添加 client scope</li>
</ul>
<p><img src="https://img2024.cnblogs.com/blog/118538/202501/118538-20250113172359049-641106816.png" alt="" loading="lazy"></p>
<ul>
<li>在client scope中添加mapper</li>
</ul>
<p><img src="https://img2024.cnblogs.com/blog/118538/202501/118538-20250113172442323-2007563503.png" alt="" loading="lazy"></p>
<h1 id="设置access_token可见和userinfo可见">设置access_token可见和userinfo可见</h1>
<ul>
<li>Add to ID token</li>
<li>Add to access token</li>
<li>Add to access token</li>
</ul>
<p><img src="https://img2024.cnblogs.com/blog/118538/202501/118538-20250113172530951-1281675118.png" alt="" loading="lazy"></p>
<h1 id="为客户端指定scope">为客户端指定scope</h1>
<ul>
<li>这对于根据客户端来控制token和userinfo端点是非常必要的功能</li>
<li>这是oauth2授权的重要组成部分</li>
</ul>
<p><img src="https://img2024.cnblogs.com/blog/118538/202501/118538-20250113172656338-1684870705.png" alt="" loading="lazy"></p>
<h1 id="通过oauth2中的密码认证时的注意点">通过oauth2中的密码认证时的注意点</h1>
<ul>
<li>客户端不能是<code>同意必选</code>的，这种客户端需要通过浏览器认证，由用户自己<code>确认</code>它公开的信息</li>
</ul>
<p><img src="https://img2024.cnblogs.com/blog/118538/202501/118538-20250113173332481-577005223.png" alt="" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/118538/202501/118538-20250113173731905-826432875.png" alt="" loading="lazy"></p>
<h1 id="通过token获取用户信息">通过token获取用户信息</h1>
<ul>
<li>userinfo端点：/auth/realms/{realms}/protocol/openid-connect/userinfo</li>
<li>获取到时的用户信息中的字段，是通过scope来控制的</li>
</ul>
<p><img src="https://img2024.cnblogs.com/blog/118538/202501/118538-20250113173430168-1575008566.png" alt="" loading="lazy"></p>

</div>
<div id="MySignature" role="contentinfo">
    <p></p>
<div class="navgood">
<p>作者：仓储大叔，张占岭，<br>
荣誉：微软MVP<br>QQ：853066980</p>

<p><strong>支付宝扫一扫，为大叔打赏!</strong>
<br><img src="https://images.cnblogs.com/cnblogs_com/lori/237884/o_IMG_7144.JPG"></p>
</div>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.026626956501157407" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-13 17:39">2025-01-13 17:38</span>&nbsp;
<a href="https://www.cnblogs.com/lori">张占岭</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18669091" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18669091);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18669091', targetLink: 'https://www.cnblogs.com/lori/p/18669091', title: 'keycloak~巧用client-scope实现token字段和userinfo接口的授权' })">举报</a>
</div>
        