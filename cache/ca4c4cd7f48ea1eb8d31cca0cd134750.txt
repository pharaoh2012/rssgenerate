
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/eventhorizon/p/18882691" title="发布于 2025-05-18 21:47">
    <span role="heading" aria-level="2">NCC Mocha v0.2.0 发布， 新增对 Metrics 的支持</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p></p><div class="toc"><div class="toc-container-header">目录</div><ul><li><a href="#项目简介" rel="noopener nofollow">项目简介</a></li><li><a href="#项目进度" rel="noopener nofollow">项目进度</a></li><li><a href="#v020-发布内容" rel="noopener nofollow">v0.2.0 发布内容</a></li><li><a href="#快速体验" rel="noopener nofollow">快速体验</a></li><li><a href="#数据的发送" rel="noopener nofollow">数据的发送</a></li><li><a href="#数据的查询" rel="noopener nofollow">数据的查询</a><ul><li><a href="#trace" rel="noopener nofollow">Trace</a><ul><li><a href="#配置-jaeger-数据源" rel="noopener nofollow">配置 Jaeger 数据源</a></li><li><a href="#trace-数据的查询" rel="noopener nofollow">Trace 数据的查询</a></li></ul></li><li><a href="#metrics" rel="noopener nofollow">Metrics</a><ul><li><a href="#配置-prometheus-数据源" rel="noopener nofollow">配置 Prometheus 数据源</a></li><li><a href="#metrics-数据的查询" rel="noopener nofollow">Metrics 数据的查询</a></li><li><a href="#目前的限制" rel="noopener nofollow">目前的限制</a></li></ul></li></ul></li></ul></div><p></p>
<h1 id="项目简介">项目简介</h1>
<p>Mocha 是一个基于 .NET 开发的 APM 系统，同时提供可伸缩的可观测性数据分析和存储平台。</p>
<p>项目地址：<a href="https://github.com/dotnetcore/mocha" target="_blank" rel="noopener nofollow">https://github.com/dotnetcore/mocha</a></p>
<p><strong>注意：使用 <code>git clone --recursive</code> 克隆本仓库以及子模块。</strong></p>
<h1 id="项目进度">项目进度</h1>
<p>目前项目处于早期阶段，已经完成了对 Trace 和 Metrics 的基础支持，可以通过 OTel SDK 上报数据到 Mocha Distributor，然后通过 Grafana 展示。目前仅支持通过 <code>docker-compose</code> 进行简单体验。</p>
<h1 id="v020-发布内容">v0.2.0 发布内容</h1>
<ul>
<li>支持 OTel Metrics 数据上报</li>
<li>支持通过 Grafana 展示 Metrics 数据</li>
</ul>
<h1 id="快速体验">快速体验</h1>
<p>在项目根目录下的docker目录中，执行以下命令启动项目：</p>
<pre><code class="language-bash">docker-compose up -d
</code></pre>
<p>启动成功后，可以看到以下容器：</p>
<ul>
<li>distributor: 提供用于接收 OTLP 数据的 gRPC API</li>
<li>query: 提供用于接收查询协议的 HTTP API</li>
<li>mysql: 用于存储数据</li>
<li>grafana: 用于展示数据</li>
</ul>
<h1 id="数据的发送">数据的发送</h1>
<p>将 SDK 的 OTLP exporter 配置为 <code>http://localhost:4317</code> 即可将数据发送到 distributor。</p>
<h1 id="数据的查询">数据的查询</h1>
<h2 id="trace">Trace</h2>
<h3 id="配置-jaeger-数据源">配置 Jaeger 数据源</h3>
<p>我们实现了支持 Jaeger 查询协议的 API，因此可以直接在 Grafana 中配置 Jaeger 数据源。</p>
<p>访问 <a href="http://localhost:3000/" target="_blank" rel="noopener nofollow">http://localhost:3000/</a> 即可看到grafana的登录页面。用户名和密码都是admin。</p>
<p>登录后，点击左侧的菜单，选择 Data Sources，然后点击 Add data source。</p>
<p><img src="https://img2023.cnblogs.com/blog/1201123/202505/1201123-20250518213338371-495424502.png" alt="" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/1201123/202505/1201123-20250518213337979-510136797.png" alt="" loading="lazy"></p>
<p>选择 Jaeger。</p>
<p><img src="https://img2023.cnblogs.com/blog/1201123/202505/1201123-20250518213337615-1379153055.png" alt="" loading="lazy"></p>
<p>配置 Jaeger 数据源的 URL 为 <code>http://query:5775/jaeger</code>。</p>
<p><img src="https://img2023.cnblogs.com/blog/1201123/202505/1201123-20250518213337223-952346046.png" alt="" loading="lazy"></p>
<p>点击 Save &amp; Test，如果显示如下信息，则说明配置成功。</p>
<p><img src="https://img2023.cnblogs.com/blog/1201123/202505/1201123-20250518213336878-926639242.png" alt="" loading="lazy"></p>
<p>如果还没往 distributor 发送过数据，会显示如下警告信息。</p>
<p><img src="https://img2023.cnblogs.com/blog/1201123/202505/1201123-20250518213336510-1795057092.png" alt="" loading="lazy"></p>
<h3 id="trace-数据的查询">Trace 数据的查询</h3>
<p>点击左侧的菜单，选择 Explore，然后选择 Jaeger 数据源，即可看到 Trace 数据。</p>
<p><img src="https://img2023.cnblogs.com/blog/1201123/202505/1201123-20250518213336089-1744222239.png" alt="" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/1201123/202505/1201123-20250518213335661-2039732687.png" alt="" loading="lazy"></p>
<h2 id="metrics">Metrics</h2>
<h3 id="配置-prometheus-数据源">配置 Prometheus 数据源</h3>
<p>我们实现了支持 PromQL 查询协议的 API，因此可以直接在 Grafana 中配置 Prometheus 数据源。</p>
<p>访问 <a href="http://localhost:3000/" target="_blank" rel="noopener nofollow">http://localhost:3000/</a> 即可看到grafana的登录页面。用户名和密码都是admin。</p>
<p>登录后，点击左侧的菜单，选择 Data Sources，然后点击 Add data source。</p>
<p>选择 Prometheus。</p>
<p><img src="https://img2023.cnblogs.com/blog/1201123/202505/1201123-20250518213335184-1759363384.png" alt="" loading="lazy"></p>
<p>配置 Prometheus 数据源的 URL 为 <code>http://query:5775/prometheus</code>。</p>
<p><img src="https://img2023.cnblogs.com/blog/1201123/202505/1201123-20250518213334649-1930725100.png" alt="" loading="lazy"></p>
<p>配置 HTTP Method 为 POST。</p>
<p><img src="https://img2023.cnblogs.com/blog/1201123/202505/1201123-20250518213334267-192202197.png" alt="" loading="lazy"></p>
<p>点击 Save &amp; Test，如果显示如下信息，则说明配置成功。</p>
<p><img src="https://img2023.cnblogs.com/blog/1201123/202505/1201123-20250518213333900-1134054205.png" alt="" loading="lazy"></p>
<h3 id="metrics-数据的查询">Metrics 数据的查询</h3>
<p>点击左侧的菜单，选择 Explore，然后选择 Prometheus 数据源，即可看到 Metrics 数据。</p>
<p><img src="https://img2023.cnblogs.com/blog/1201123/202505/1201123-20250518213333469-326865140.png" alt="" loading="lazy"></p>
<p>点击左侧的菜单，选择 Dashboards，即可创建一个 Dashboard。</p>
<p><img src="https://img2023.cnblogs.com/blog/1201123/202505/1201123-20250518213333050-1908352625.png" alt="" loading="lazy"></p>
<p><img src="https://img2023.cnblogs.com/blog/1201123/202505/1201123-20250518213332366-538388240.png" alt="" loading="lazy"></p>
<p>选择我们刚刚创建的 Prometheus 数据源。</p>
<p><img src="https://img2023.cnblogs.com/blog/1201123/202505/1201123-20250518213331846-831405951.png" alt="" loading="lazy"></p>
<p>接下来就可以根据需要添加 Panel，展示 Metrics 数据了。</p>
<p><img src="https://img2023.cnblogs.com/blog/1201123/202505/1201123-20250518213330783-609939583.png" alt="" loading="lazy"></p>
<h3 id="目前的限制">目前的限制</h3>
<p>目前 Mocha 支持的 Prometheus 的查询语法有限，更完整的支持需要等待后续版本。</p>
<p>目前支持的 function 主要有：<br>
abs, absent, histogram_quantile, increase, rate, avg_over_time, min_over_time, max_over_time, sum_over_time, count_over_time, stdvar_over_time, stddev_over_time</p>
<p>目前支持的 aggregation 主要有：<br>
sum, min, max, avg, count, stdvar, stddev, count, count_values, topk, bottomk, quantile</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.017410529525462962" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-18 21:48">2025-05-18 21:47</span>&nbsp;
<a href="https://www.cnblogs.com/eventhorizon">黑洞视界</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18882691);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18882691', targetLink: 'https://www.cnblogs.com/eventhorizon/p/18882691', title: 'NCC Mocha v0.2.0 发布， 新增对 Metrics 的支持' })">举报</a>
</div>
        