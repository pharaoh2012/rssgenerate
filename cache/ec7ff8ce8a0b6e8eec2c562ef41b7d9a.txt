
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/youring2/p/18782235" title="发布于 2025-03-20 23:14">
    <span role="heading" aria-level="2">Ollama系列05：Ollama API 使用指南</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>本文是Ollama系列教程的第5篇，在前面的4篇内容中，给大家分享了如何再本地通过Ollama运行DeepSeek等大模型，演示了chatbox、CherryStudio等UI界面中集成Ollama的服务，并介绍了如何通过cherryStudio构建私有知识库。</p>
<p>在今天的分享中，我将分享如何通过API来调用ollama服务，通过整合ollama API，将AI能力集成到你的私有应用中，提升你的职场价值！</p>
<h2 id="ollama-api">Ollama API</h2>
<p><img src="https://img2024.cnblogs.com/blog/44814/202503/44814-20250320012921245-1176095755.png" alt="" loading="lazy"></p>
<p>Ollama 提供了一套简单好用的接口，让开发者能通过API轻松使用大语言模型。</p>
<p>本篇内容将使用Postman作为请求工具，和开发语言无关。</p>
<h3 id="基本概念">基本概念</h3>
<p>在开始之前，我们先了解几个基本的概念：</p>
<ul>
<li><strong>Model</strong>：模型，我们调用接口时使用的模型名字。我们可以把Ollama理解为模型商店，它里面运行着很多模型，每个模型都有一个唯一的名字，例如<code>deepseek-r1:1.5b</code></li>
<li><strong>Prompt</strong>: 提示词，是我们给模型的指令。比如<code>天空为什么是蓝色的</code>就是一条简单的提示词。</li>
<li><strong>Token</strong>：字符块，是大模型的最小输出单位，同时也是大模型的计费单位。举个例子，对于<code>天空为什么是蓝色的</code>这句话，大模型会进行拆分<code>天空/为什么/是/蓝色/的</code>，每一段就是一个token（实际情况会比这个例子复杂）</li>
</ul>
<h3 id="内容生成apigenerate">内容生成（/api/generate）</h3>
<p>让大模型帮我们生成指定的内容，就可以使用内容生成接口。一问一答，不带上下文。</p>
<p>我们试着用最少的参数来调用：</p>
<pre><code>{
  "model": "deepseek-r1:1.5b",
  "prompt": "天空为什么是蓝色的"
}
</code></pre>
<p>在postman里面看看输出：</p>
<p><img src="https://img2024.cnblogs.com/blog/44814/202503/44814-20250320012921349-1582862811.png" alt="" loading="lazy"></p>
<p>可以看到输出的内容很长，这是因为默认采用的是stream的方式输出的，也就是我们在deepseek app里面看到的一个字一个字输出的那种效果。我们可以将stream参数设置成false来禁用流式输出。</p>
<pre><code>{
    "model": "deepseek-r1:1.5b",
    "prompt": "天空为什么是蓝色的",
    "stream": false
}
</code></pre>
<p><strong>参数列表</strong></p>
<table>
<thead>
<tr>
<th>参数名</th>
<th>是否必填</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>model</code></td>
<td>是</td>
<td>模型名称</td>
</tr>
<tr>
<td><code>prompt</code></td>
<td>是</td>
<td>需要生成响应的提示词</td>
</tr>
<tr>
<td><code>suffix</code></td>
<td>否</td>
<td>模型响应后追加的文本</td>
</tr>
<tr>
<td><code>images</code></td>
<td>否</td>
<td>Base64编码的图片列表（适用于多模态模型如llava）</td>
</tr>
<tr>
<td><code>format</code></td>
<td>否</td>
<td>返回响应的格式（可选值：<code>json</code> 或符合 JSON Schema 的结构）</td>
</tr>
<tr>
<td><code>options</code></td>
<td>否</td>
<td>模型额外参数（对应 Modelfile 文档中的配置如 <code>temperature</code>）</td>
</tr>
<tr>
<td><code>system</code></td>
<td>否</td>
<td>自定义系统消息（覆盖 Modelfile 中的定义）</td>
</tr>
<tr>
<td><code>template</code></td>
<td>否</td>
<td>使用的提示词模板（覆盖 Modelfile 中的定义）</td>
</tr>
<tr>
<td><code>stream</code></td>
<td>否</td>
<td>设为 <code>false</code> 时返回单个响应对象而非流式对象</td>
</tr>
<tr>
<td><code>raw</code></td>
<td>否</td>
<td>设为 <code>true</code> 时不格式化提示词（适用于已指定完整模板的情况）</td>
</tr>
<tr>
<td><code>keep_alive</code></td>
<td>否</td>
<td>控制模型在内存中的保持时长（默认：5m）</td>
</tr>
<tr>
<td><code>context</code></td>
<td>否</td>
<td>（已弃用）来自前次 <code>/generate</code> 请求的上下文参数，用于维持短期对话记忆</td>
</tr>
</tbody>
</table>
<h3 id="生成对话apichat">生成对话（/api/chat）</h3>
<p>生成对话，是一种具备上下文记忆的内容生成。在内容生成API中，我们仅传入了prompt，大模型仅对我们本地的prompt进行回答，而在生成对话API中，我们还可以传入messages参数，包含我们多轮对话内容，使大模型具备记忆功能。</p>
<p><strong>最简单的调用</strong>（为了方便演示，我们将stream参数设置为false）：</p>
<pre><code>{
    "model": "deepseek-r1:1.5b",
    "messages": [
        {
            "role": "user",
            "content": "天空通常是什么颜色"
        }
    ],
    "stream": false
}
</code></pre>
<p>postman调用截图：<br>
<img src="https://img2024.cnblogs.com/blog/44814/202503/44814-20250320012921240-1267713540.png" alt="" loading="lazy"></p>
<p><strong>多轮对话</strong></p>
<p>聊天的时候，ollama通过messages参数保持上下文记忆。当模型给我们回复内容之后，如果我们要继续追问，则可以使用以下方法（<strong>注意：deepseek-r1模型需要在上下文中移除think中的内容</strong>）：</p>
<pre><code>{
    "model": "deepseek-r1:1.5b",
    "messages": [
        {
            "role": "user",
            "content": "天空通常是什么颜色"
        },
        {
            "role": "assistant",
            "content": "天空通常看起来是**柔和的、明快的或稍微有些昏黄的色调**。具体颜色可能会因不同的天气情况而有所变化，例如：\n\n1. **晴朗天气**：天空可能呈现出温暖、明亮的颜色，比如蓝天、碧空等。\n2. **下雨天**：云层覆盖天空，可能导致颜色较为阴郁或变黑。\n3. **雨后天气**：雨后的天空可能恢复为明亮的色调。\n\n总的来说，天空的颜色主要取决于大气中的光线反射和折射情况，以及太阳的位置。"
        },
        {
            "role": "user",
            "content": "为什么是蓝色的？"
        }
    ],
    "stream": false
}
</code></pre>
<p>postman调用截图：<br>
<img src="https://img2024.cnblogs.com/blog/44814/202503/44814-20250320012921206-1717694407.png" alt="" loading="lazy"></p>
<p><strong>结构化数据提取</strong></p>
<p>当我们和系统对接时，通常要需要从用户的自然语言中提到结构化数据，用来调用现有的外部系统的接口。在ollama中我们只需要指定format参数，就可以实现结构化数据的提取：</p>
<pre><code>{
    "model": "deepseek-r1:1.5b",
    "messages": [
        {
            "role": "user",
            "content": "哈喽，大家好呀~ 我是拓荒者IT，今年36岁了，是一名软件工程师"
        }
    ],
    "format": {
        "type": "object",
        "properties": {
            "name": {
                "type": "string"
            },
            "age": {
                "type": "integer"
            },
            "job": {
                "type": "string"
            }
        },
        "required": [
            "name",
            "age",
            "job"
        ]
    },
    "stream": false
}
</code></pre>
<p><strong>参数列表</strong></p>
<table>
<thead>
<tr>
<th>参数名</th>
<th>是否必填</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>model</code></td>
<td>是</td>
<td>模型名称</td>
</tr>
<tr>
<td><code>messages</code></td>
<td>是</td>
<td>聊天消息数组（用于维持对话记忆）</td>
</tr>
<tr>
<td><code>messages.role</code></td>
<td>是</td>
<td>消息角色（可选值：<code>system</code>, <code>user</code>, <code>assistant</code>, <code>tool</code>）</td>
</tr>
<tr>
<td><code>messages.content</code></td>
<td>是</td>
<td>消息内容</td>
</tr>
<tr>
<td><code>messages.images</code></td>
<td>否</td>
<td>消息中Base64编码的图片列表（适用于多模态模型如llava）</td>
</tr>
<tr>
<td><code>messages.tool_calls</code></td>
<td>否</td>
<td>模型希望调用的工具列表（JSON格式）</td>
</tr>
<tr>
<td><code>tools</code></td>
<td>否</td>
<td>模型可使用的工具列表（JSON格式，需模型支持）</td>
</tr>
<tr>
<td><code>format</code></td>
<td>否</td>
<td>返回响应的格式（可选值：<code>json</code> 或符合 JSON Schema 的结构）</td>
</tr>
<tr>
<td><code>options</code></td>
<td>否</td>
<td>模型额外参数（对应 Modelfile 文档中的配置如 <code>temperature</code>）</td>
</tr>
<tr>
<td><code>stream</code></td>
<td>否</td>
<td>设为 <code>false</code> 时返回单个响应对象而非流式对象</td>
</tr>
<tr>
<td><code>keep_alive</code></td>
<td>否</td>
<td>控制模型在内存中的保持时长（默认：5m）</td>
</tr>
</tbody>
</table>
<h3 id="生成嵌入数据apiembed">生成嵌入数据（/api/embed）</h3>
<p>嵌入数据的作用是将输入内容转换成向量，可以用于向量检索等场景。比如我们在第四篇中介绍的知识库，就需要用到embedding模型。</p>
<p>在调用embed接口时，我们要选择支持Embedding功能的模型，deepseek是不支持的。</p>
<p>调用示例：</p>
<pre><code>{
  "model": "bge-m3",
  "input": "为什么天空是蓝色的呢？"
}
</code></pre>
<p>postman调用截图：<br>
<img src="https://img2024.cnblogs.com/blog/44814/202503/44814-20250320012921288-327780697.png" alt="" loading="lazy"></p>
<h3 id="兼容openai接口">兼容openAI接口</h3>
<p>因为现在很多应用、类库都是基于OpenAI构建的，为了让这些系统能够使用Ollama提供的模型，Ollama提供了一套兼容OpenAI的接口（官方说是实验性的，以后可能会有重大调整）。</p>
<p>因为这种兼容，使得我们可以直接通过OpenAI的python库、node库来访问ollama的服务，确实方便了不少。</p>
<p><strong>注意：ollama属于第三方接口，不能100%支持OpenAI的接口能力，因此在使用的时候需要先了解清楚兼容的情况。</strong></p>
<h3 id="其它接口">其它接口</h3>
<p>ollama还有一些其它的接口，用来实现对模型的管理等功能，而这些功能我们通常会在命令行完成，因此不做详细说明。这些API的列表如下：</p>
<ul>
<li>模型创建（/api/create）</li>
<li>列出本地模型（/api/tags）</li>
<li>查看模型信息（/api/show）</li>
<li>复制模型（/api/copy）</li>
<li>删除模型（/api/delete）</li>
<li>拉取模型（/api/pull）</li>
<li>推送（上传）模型（/api/push）</li>
<li>列出运行中的模型（/api/ps）</li>
<li>查看ollama版本（/api/version）</li>
</ul>
<p>这些接口的调用都非常简单，大家感兴趣的可以尝试以下。</p>
<h2 id="总结">总结</h2>
<p>本文介绍了ollama api的用法，详细介绍了生成内容、多轮对话、大模型记忆功能的实现、提取参数化内容等接口。通过使用这些接口，我们可以将AI能力集成到现有的项目中，提升软件的智能化程度。</p>
<p>👉 <strong>如果你对这些内容感兴趣，关注[拓荒者IT]公众号，获取最新的文章内容。</strong><br>
<strong>持续分享AI工具，AI应用场景，AI学习资源</strong> ❤️</p>
<p><img src="https://img2024.cnblogs.com/blog/44814/202503/44814-20250320012921291-1664607318.png" alt="" loading="lazy"></p>
<p><strong>参考内容</strong></p>
<ol>
<li>
<p>官方API文档：<a href="https://github.com/ollama/ollama/blob/main/docs/api.md" target="_blank" rel="noopener nofollow">https://github.com/ollama/ollama/blob/main/docs/api.md</a></p>
</li>
<li>
<p>官方兼容OpenAI文档：<a href="https://github.com/ollama/ollama/blob/main/docs/openai.md" target="_blank" rel="noopener nofollow">https://github.com/ollama/ollama/blob/main/docs/openai.md</a></p>
</li>
</ol>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.045300924034722224" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-20 23:15">2025-03-20 23:14</span>&nbsp;
<a href="https://www.cnblogs.com/youring2">拓荒者IT</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18782235" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18782235);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18782235', targetLink: 'https://www.cnblogs.com/youring2/p/18782235', title: 'Ollama系列05：Ollama API 使用指南' })">举报</a>
</div>
        