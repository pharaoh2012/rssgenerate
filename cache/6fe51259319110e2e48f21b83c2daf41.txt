
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/youlanjihua/p/18903512" title="发布于 2025-05-30 08:54">
    <span role="heading" aria-level="2">鸿蒙仓颉语言开发教程：网络请求和数据解析</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p data-id="p124945a-Pl8RhdHu">现在我能理解华为方面不断的鼓励大家在网络上贡献自己的教程。没有教程，没有参考文献，仓颉购物应用的开发过程真是举步维艰，每一步都是摸着石头过河，不过希望通过幽蓝君的文章能让大家少走一些弯路。</p>
<p data-id="p124945a-sHgZGuAJ">今天就以购物应用的分类列表为例，分享在仓颉开发语言中如何进行网络请求，以及怎么把请求到的数据展示到应用上。</p>
<p data-id="p838747a-D2OdvAwx">&nbsp;</p>
<p data-id="pa028eb2-hYMm3gSu"><img src="https://harmonyos.oss-cn-beijing.aliyuncs.com/images/202505/979237619e6e5867b4222928fd39069347cc50.png" data-type="block"></p>
<p data-id="p124945a-csWTbchW"><strong>网络权限</strong></p>
<p data-id="p124945a-msgpgo61">网络权限在app开发中是一个默认规则，几乎在任何系统的app中进行网络请求之前都要获取网络权限，仓颉也不例外。</p>
<p data-id="p124945a-fX6avIce">在仓颉语言中网络权限的请求依然是在module.json5文件中，在module目录下增加网络请求权限：</p>
<div>
<pre class="language-plain highlighter-hljs"><code>"requestPermissions": [{"name": "ohos.permission.INTERNET"},]</code></pre>
</div>
<p data-id="p124945a-2geXa3TV"><strong>网络请求</strong></p>
<p data-id="p124945a-bfYDQMlO">添加权限之后，你可以回到应用中进行请求，首先导入http模块：</p>
<div>
<pre class="language-plain highlighter-hljs"><code>import ohos.net.http.*</code></pre>
</div>
<p data-id="p124945a-UMfBNaVl">然后创建请求实例：</p>
<div>
<pre class="language-plain highlighter-hljs"><code>let httpRequest = createHttp()</code></pre>
</div>
<p data-id="p124945a-b0GimoQ8">通常我们还需要一些配置信息，比如请求方法什么的，在仓颉中这个参数类型是HttpRequestOptions，它里面有很多参数，我只介绍常见的几个：</p>
<p data-id="p124945a-AhrBCFWr">method：请求方法</p>
<p data-id="p124945a-J1SlfXAd">extraData：post方法时传递的内容</p>
<p data-id="p124945a-jkHlZDWp">expectDataType：指定返回数据的类型</p>
<p data-id="p124945a-8l7vR8Nx">header：请求头</p>
<p data-id="p124945a-jxpOaaSU">下面为大家展示一个完整的数据请求：</p>
<div>
<pre class="language-plain highlighter-hljs"><code>let url = "***/api/class.php"
let httpRequest = createHttp()
 let option = HttpRequestOptions(
    method: RequestMethod.GET,
    expectDataType: HttpDataType.STRING,
    header: HashMap&lt;String, String&gt;([("content-type", "application/json")])
)
httpRequest.request(url, {err, resp =&gt;
    if (let Some(e) &lt;- err) {
         CJTools.log('error:' + e.message)
    }
    if (let Some(r) &lt;- resp) {
          CJTools.log(r.result.toString())
     }

     //请求完成务必销毁实例
     httpRequest.destroy()
    },options:option)</code></pre>
</div>
<p data-id="p124945a-LKzVSofx"><strong>数据解析</strong></p>
<p data-id="p124945a-ur9siMIT">看上面这段代码，从创建实例，配置参数到发起请求好像都能看懂，但是到了请求回调中幽蓝君是有一些懵圈的，像let Some(e) &lt;- err这种代码我是看不懂一点，估计大家也有多人跟我一样。</p>
<p data-id="p124945a-yS4e2w0D">现在为大家介绍一下Some是什么意思，它的意思是构造一个携带参数Option&lt;T&gt;的实例，表示有值。也就是说上弥漫两个if语句是在判断，第一个是判断如果err有值表示请求出错了。如果resp有值表示请求到了数据。</p>
<p data-id="p124945a-vS2H4etv">也就是说如果请求成功，Some(r)中的r就是我们请求到的数据。</p>
<p data-id="p124945a-G63necqR">现在的r应该是字符串类型，那如何把它转换成数组并且能够被组件遍历。</p>
<p data-id="p124945a-74LyFufn">我先创建了一个和数据内容字段相同的结构体：</p>
<div>
<pre class="language-plain highlighter-hljs"><code>public class ClassItem{
    private var id: String;
    private var classname: String;
    private var cover: String;
    
    public ClassItem(id:String, classname:String,cover:String){
        this.id = id
        this.classname = classname
        this.cover = cover
    }
     public func getId():String{
        return this.id
    }
    public func getClassname():String{
        return this.classname
    }
    public func getCover():String{
        return this.cover
    }
}</code></pre>
</div>
<p data-id="p124945a-cNKBX8i4">然后为大家演示怎么把r转换成ClassItem组成的数组：</p>
<div>
<pre class="language-plain highlighter-hljs"><code>if (let Some(r) &lt;- resp) {
        let str = r.result.toString()
        let jValue = JsonValue.fromStr(str)
        let jArray = jValue.asArray()
        for (i in 0..jArray.size()) {
            var model = DataModel.fromJson(jArray.get(i).getOrThrow().asObject())
            var modelData = match (model) {
            case data: DataModelStruct =&gt; data
                case _ =&gt; throw Exception("this data is not DataModelStruct")
             }
            let item = ClassItem(String.deserialize(modelData.get('id')), String.deserialize(modelData.get('classname')), String.deserialize(modelData.get('cover')))
            this.classList.append(item)
        }
    }</code></pre>
</div>
<p data-id="p124945a-rkvwIvWk">最后classList就是我们需要的数据，以上就是仓颉语言网络请求的相关内容。#HarmonyOS语言##仓颉##购物#</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.3094743199305556" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-30 08:55">2025-05-30 08:54</span>&nbsp;
<a href="https://www.cnblogs.com/youlanjihua">幽蓝计划</a>&nbsp;
阅读(<span id="post_view_count">124</span>)&nbsp;
评论(<span id="post_comment_count">1</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18903512);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18903512', targetLink: 'https://www.cnblogs.com/youlanjihua/p/18903512', title: '鸿蒙仓颉语言开发教程：网络请求和数据解析' })">举报</a>
</div>
        