
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/wang_yb/p/18776125" title="发布于 2025-03-17 08:34">
    <span role="heading" aria-level="2">『Plotly实战指南』--折线图绘制基础篇</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>在数据分析的世界中，折线图是一种不可或缺的可视化工具。</p>
<p>它能够清晰地展示数据随时间或其他变量的变化趋势，帮助我们快速发现数据中的模式、趋势和异常。</p>
<p>无论是金融市场分析、气象数据监测，还是业务增长趋势预测，折线图都能以直观的方式呈现关键信息。</p>
<p>本文将从基础开始，介绍如何使用Plotly库来绘制折线图，并掌握数据预处理的关键技巧。</p>
<h1 id="1-单条折线轻松绘制">1. 单条折线轻松绘制</h1>
<h2 id="11-时间序列数据准备">1.1. 时间序列数据准备</h2>
<p>时间序列数据是折线图中最常见的数据类型之一，它以时间为索引，记录了某个变量在不同时间点的值。</p>
<p>时间序列数据的特点是数据点之间具有时间顺序，这种顺序使得数据能够反映变量随时间的变化趋势。</p>
<p>时间序列数据可以通过多种方式获取，例如从数据库中提取、从API接口获取，或者直接生成模拟数据。</p>
<p>以下是一个简单的示例代码，展示如何生成测试用的时间序列数据：</p>
<pre><code class="language-python">import pandas as pd
import numpy as np

# 创建时间序列索引
date_range = pd.date_range(start='2025-01-01', end='2025-01-31', freq='D')

# 生成随机数据
data = np.random.randn(len(date_range))

# 创建DataFrame
df = pd.DataFrame(data, index=date_range, columns=['Value'])
print(df)
</code></pre>
<p>在上面的代码中，我们使用<code>pandas</code>库生成了一个时间序列索引，并创建了一个包含随机值的<code>DataFrame</code>。</p>
<p>其中索引为时间戳，列名为数据值。</p>
<h2 id="12-绘制单折线图">1.2. 绘制单折线图</h2>
<p>在绘制折线图之前，我们需要将数据导入到<code>Plotly</code>中。</p>
<p><code>Plotly</code>通常使用<code>pandas</code>的<code>DataFrame</code>作为数据输入格式。</p>
<p>以下代码展示如何使用<code>Plotly</code>绘制单条折线图：</p>
<pre><code class="language-python">import plotly.express as px

# 使用Plotly绘制折线图
fig = px.line(df, x=df.index, y='Value', title='单条折线图示例')

# 展示图表
fig.show()
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202503/83005-20250317083334400-1217521011.png" alt="" loading="lazy"></p>
<p>在上述代码中，我们使用<code>plotly.express</code>模块中的<code>line</code>函数来绘制折线图。</p>
<p><code>x</code>参数指定了时间轴，<code>y</code>参数指定了数据值，<code>title</code>参数用于设置图表的标题。</p>
<h1 id="2-折线图数据预处理技巧">2. 折线图数据预处理技巧</h1>
<p>在绘制折线图之前，数据预处理是一个关键步骤。</p>
<p>数据预处理的目的是清理数据中的噪声、处理缺失值和异常值，并将数据转换为适合<code>Plotly</code>绘制的格式。</p>
<h2 id="21-数据清洗与去噪">2.1. 数据清洗与去噪</h2>
<p>在实际应用中，数据往往存在缺失值、异常值和噪声等问题。</p>
<p>这些问题会影响图表的准确性和可读性，因此在绘制折线图之前，我们需要对数据进行清洗和去噪。</p>
<ol>
<li>识别并处理缺失值</li>
</ol>
<p>缺失值是数据中常见的问题之一，处理缺失值的方法包括删除缺失值、填充缺失值等。</p>
<pre><code class="language-python"># 检查缺失值
print(df.isnull().sum())

# 填充缺失值
df.ffill(inplace=True)  # 前向填充
# df.bfill(inplace=True)  # 后向填充
# df.fillna(value=0, inplace=True)  # 填充为特定值
</code></pre>
<p>在上述代码中，我们使用<code>pandas</code>的方法来处理缺失值。</p>
<p><code>ffill</code>表示前向填充，即用前一个非缺失值填充当前缺失值；</p>
<p><code>bfill</code>表示后向填充，即用后一个非缺失值填充当前缺失值；</p>
<p><code>value=0</code>  表示使用<code>fillna</code>将缺失值填充为0。</p>
<ol start="2">
<li>检测并修正异常值</li>
</ol>
<p>异常值是指数据中明显偏离正常范围的值。</p>
<p>异常值可能会影响图表的趋势和准确性，因此我们需要检测并修正异常值。</p>
<pre><code class="language-python"># 检测异常值
mean = df['Value'].mean()
std = df['Value'].std()
threshold = 3  # 设置阈值
outliers = df[(df['Value'] &gt; mean + threshold * std) | (df['Value'] &lt; mean - threshold * std)]

print("异常值：")
print(outliers)

# 修正异常值
df.loc[outliers.index, 'Value'] = mean
</code></pre>
<p>在上述代码中，我们使用了均值和标准差的方法来检测异常值。</p>
<p>如果某个值偏离均值超过3倍标准差，则将其视为异常值。</p>
<p>最后，我们将异常值修正为均值。</p>
<h2 id="22-数据去噪方法">2.2. 数据去噪方法</h2>
<p>数据噪声是指数据中的随机波动，这些波动可能会影响图表的趋势和可读性。</p>
<p>常见的数据去噪方法包括简单移动平均法和滑动窗口去噪。</p>
<pre><code class="language-python"># 简单移动平均法去噪
window_size = 3  # 设置滑动窗口大小
df['Smoothed'] = df['Value'].rolling(window=window_size).mean()

# 绘制去噪后的折线图
fig = px.line(df, x=df.index, y=['Value', 'Smoothed'], title='数据去噪效果对比')
fig.show()
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202503/83005-20250317083334389-747584775.png" alt="" loading="lazy"></p>
<p>在上述代码中，我们使用了<code>rolling</code>方法和<code>mean</code>方法来计算滑动窗口内的平均值，从而实现去噪。</p>
<p><code>window_size</code>参数表示滑动窗口的大小。</p>
<p>运行这段代码后，将看到原始数据和去噪后数据的对比效果。</p>
<h2 id="23-数据格式转换与适配">2.3. 数据格式转换与适配</h2>
<p><code>Plotly</code>通常要求数据以<code>pandas</code>的<code>DataFrame</code>格式输入，其中索引为时间戳，列名为数据值。</p>
<p>因此，在绘制折线图之前，我们需要将数据转换为适合<code>Plotly</code>的格式。</p>
<ol>
<li>从<code>CSV</code>到<code>Pandas DataFrame</code></li>
</ol>
<p>从<code>CSV</code>文件中读取数据并转换为<code>DataFrame</code>是常见的数据处理步骤。</p>
<pre><code class="language-python">import pandas as pd

# 从CSV文件中读取数据
df = pd.read_csv('data.csv', parse_dates=['Date'], index_col='Date')

df.head()
</code></pre>
<p>在上述代码中，我们使用了<code>pandas</code>的<code>read_csv</code>函数来读取<code>CSV</code>文件。</p>
<p><code>parse_dates=['Date']</code>参数表示将<code>Date</code>列解析为时间戳，</p>
<p><code>index_col='Date'</code>参数表示将<code>Date</code>列设置为索引。</p>
<ol start="2">
<li>从<code>JSON</code>到<code>Pandas DataFrame</code></li>
</ol>
<p>从<code>JSON</code>文件中读取数据并转换为<code>DataFrame</code>也是常见的数据处理步骤。</p>
<p>以下是一个示例代码：</p>
<pre><code class="language-python">import pandas as pd

# 从JSON文件中读取数据
df = pd.read_json('data.json', orient='records')

# 将时间戳列转换为索引
df['Date'] = pd.to_datetime(df['Date'])
df.set_index('Date', inplace=True)

df.head()
</code></pre>
<p>在上述代码中，我们使用了<code>pandas</code>的<code>read_json</code>函数来读取<code>JSON</code>文件。</p>
<p><code>orient='records'</code>参数表示<code>JSON</code>文件的格式为记录格式。然后，我们将时间戳列转换为索引。</p>
<p>总的来说，在将数据转换为适合<code>Plotly</code>绘图的格式时，需要注意以下几点：</p>
<ul>
<li><strong>时间戳格式统一</strong>：确保所有时间戳的格式一致，例如使用<code>pd.to_datetime</code>将时间戳转换为统一的格式</li>
<li><strong>数据类型转换</strong>：确保数据类型正确，例如将字符串类型的数据转换为数值类型</li>
<li><strong>索引与列名</strong>：确保索引为时间戳，列名为数据值</li>
</ul>
<h1 id="3-总结">3. 总结</h1>
<p>使用<code>Plotly</code>能够轻松绘制折线图。</p>
<p>在本文中，我们从基础的折线图绘制开始，然后逐步介绍了数据预处理技巧。</p>
<p>希望这些内容能帮助你在数据分析中更好地利用<code>Plotly</code>绘制折线图。</p>
<p>下一篇会继续介绍使用<code>Plotly</code>绘制折线图的一些高级功能。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.4969509725069444" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-17 08:35">2025-03-17 08:34</span>&nbsp;
<a href="https://www.cnblogs.com/wang_yb">wang_yb</a>&nbsp;
阅读(<span id="post_view_count">84</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18776125" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18776125);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18776125', targetLink: 'https://www.cnblogs.com/wang_yb/p/18776125', title: '『Plotly实战指南』--折线图绘制基础篇' })">举报</a>
</div>
        