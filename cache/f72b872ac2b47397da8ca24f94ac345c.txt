<!----> <meta itemprop="headline" content="MCP简介：从浏览器截图的自动化说起"> <meta itemprop="keywords" content="前端,AI编程,MCP"> <meta itemprop="datePublished" content="2025-03-16T03:47:26.000Z"> <meta itemprop="image" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-128.png~tplv-t2oaga2asx-image.image"> <div itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><meta itemprop="name" content="程序员山月"> <meta itemprop="url" content="https://juejin.cn/user/1556564164489389"></div> <div itemprop="publisher" itemscope="itemscope" itemtype="http://schema.org/Organization"><meta itemprop="name" content="掘金"> <div itemprop="logo" itemscope="itemscope" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-white-180.png~tplv-t2oaga2asx-image.image"> <meta itemprop="width" content="180"> <meta itemprop="height" content="180"></div></div> <h1 class="article-title" data-v-799d3073="">
            MCP简介：从浏览器截图的自动化说起
            <!----> <!----></h1> <div class="author-info-block block-hidden" data-v-799d3073=""><div class="author-info-box" data-v-799d3073=""><div class="author-name" data-v-799d3073=""><a href="/user/1556564164489389/posts" target="_blank" rel="" class="jj-link username username ellipsis" data-v-65b50b51="" data-v-6a576a98="" data-v-799d3073=""><span class="name" style="max-width:160px;" data-v-65b50b51="" data-v-6a576a98="">
    程序员山月
  </span> <!----> <!----> <!----> </a></div> <div class="meta-box" data-v-799d3073=""><time datetime="2025-03-16T03:47:26.000Z" title="Sun Mar 16 2025 03:47:26 GMT+0000 (Coordinated Universal Time)" class="time" data-v-799d3073="">
                    2025-03-16
                  </time> <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" class="read-icon" data-v-799d3073=""><path d="M7.90078 2.80078C4.49278 2.80078 1.74745 6.11672 0.800781 7.77469C1.74745 9.58339 4.49278 13.2008 7.90078 13.2008C11.3088 13.2008 14.0541 9.58339 15.0008 7.77469C14.0541 6.11672 11.3088 2.80078 7.90078 2.80078Z" stroke="currentColor" data-v-799d3073=""></path><circle cx="7.89922" cy="8.00078" r="2.2" stroke="currentColor" data-v-799d3073=""></circle></svg> <span class="views-count" data-v-799d3073="">
                    9,326
                  </span> <span class="read-time" data-v-799d3073=""><svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" data-v-799d3073=""><rect width="16" height="16" fill="none" data-v-799d3073=""></rect><circle cx="8" cy="8" r="5.65625" stroke="#8A919F" data-v-799d3073=""></circle><path d="M7.69141 5.18652V8.30924H10.8141" stroke="#8A919F" stroke-linecap="round" stroke-linejoin="round" data-v-799d3073=""></path></svg>
                    阅读11分钟
                  </span> <!----></div></div> <div style="flex:1;" data-v-799d3073=""></div> <!----> <!----></div> <!----> <!----> <!----> <!----> <div id="article-root" itemprop="articleBody" class="main" data-v-799d3073=""><div class="article-viewer markdown-body result"><p>在当今 AI 飞速发展的时代，大型语言模型 (LLM) 如 <code>Claude</code>、<code>ChatGPT</code> 等已经在代码生成、内容创作等方面展现出惊人的能力。然而，这些强大的模型存在一个明显的局限性——它们通常与外部系统和工具隔离，无法直接访问或操作用户环境中的资源和工具。</p>
<p>而 <code>Model Context Protocol</code> (MCP) 的出现，正是为了解决这一问题。</p>
<h2 data-id="heading-0">什么是MCP？</h2>
<p><code>Model Context Protocol</code> (MCP) 是由 <code>Anthropic</code> 公司推出的一个开放协议，它标准化了应用程序如何向大型语言模型 (LLM) 提供上下文和工具的方式。我们可以将 MCP 理解为 AI 应用的"USB-C 接口"——就像 USB-C 为各种设备提供了标准化的连接方式，MCP 为 AI 模型提供了与不同数据源和工具连接的标准化方式。</p>
<p>简单来说，MCP可以做到以下事情：</p>
<ul>
<li>读取和写入本地文件</li>
<li>查询数据库</li>
<li>执行命令行操作</li>
<li>控制浏览器</li>
<li>与第三方 API 交互</li>
</ul>
<p>这极大地扩展了 AI 助手的能力边界，使其不再仅限于对话框内的文本交互。</p>
<h2 data-id="heading-1">MCP的架构</h2>
<p><img src="https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/cb2e6535eaa94d8986653c579c09c6ed~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg56iL5bqP5ZGY5bGx5pyI:q75.awebp?rk3s=f64ab15b&amp;x-expires=1748729729&amp;x-signature=jY1Y6MTjggE9hBMfqoqrJOZ42Is%3D" alt="MCP架构简图" loading="lazy"></p>
<blockquote>
<p>以上图片来源于 <a href="https://link.juejin.cn?target=https%3A%2F%2Fmodelcontextprotocol.io%2Fintroduction" target="_blank" title="https://modelcontextprotocol.io/introduction" ref="nofollow noopener noreferrer">MCP 官方文档</a></p>
</blockquote>
<p>MCP 的架构相对简单，主要包含两个核心组件：</p>
<ol>
<li><strong>MCP 服务器 (Server)</strong>：提供工具和资源的服务端，可以使用任何编程语言实现，只要能够通过 <code>stdout</code>/<code>stdin</code> 或 HTTP 通信。</li>
<li><strong>MCP 客户端 (Client)</strong>：使用 MCP 服务器提供的工具和资源的 AI 应用，如 <code>Claude Desktop</code>、<code>Cursor</code> 编辑器等。</li>
</ol>
<p>MCP 服务器向客户端提供两种主要能力：</p>
<ul>
<li><strong>工具 (Tools)</strong>：可执行的函数，允许 AI 执行特定操作</li>
<li><strong>资源 (Resources)</strong>：提供给 AI 的上下文信息，如文件内容、数据库结构等</li>
</ul>
<h2 data-id="heading-2">浏览器自动化：MCP的实际应用</h2>
<p>为了更直观地理解 MCP 的强大之处，让我们看一个案例：<strong>使用 <code>Playwright MCP</code> 服务器进行浏览器自动化</strong>。</p>
<p><a href="https://link.juejin.cn?target=https%3A%2F%2Fplaywright.dev%2F" target="_blank" title="https://playwright.dev/" ref="nofollow noopener noreferrer"><code>Playwright</code></a> 是一个由 <code>Microsoft</code> 开发的浏览器自动化工具，可以控制 <code>Chrome</code>、<code>Firefox</code>、<code>Safari</code> 等主流浏览器。通过 <code>Playwright MCP</code> 服务器，我们可以让 AI 助手直接操作浏览器，执行各种任务。</p>
<h3 data-id="heading-3">先讲讲使用场景</h3>
<ol>
<li>博客写作。当我写博客时，我需要打开浏览器，打开目标网站，然后截图，并保存到本地特定的目录中，并在 <code>markdown</code> 中引用图片地址。</li>
<li>端到端测试。当我需要测试网站时，我需要打开浏览器，打开目标网站，然后进行一些操作，比如填写表单、点击按钮等。就算有 <code>Playwright</code> 的测试框架，但仍需要人工介入，比如自定义 <code>data-cy</code>，浏览器操作一遍保存 playwright 的测试代码并扔给 cursor 生成测试。</li>
</ol>
<h3 data-id="heading-4">场景一：博客写作的图片自动化</h3>
<p>作为技术博主，我经常需要在文章中引用网站截图来说明问题或展示效果。在传统流程中，这个过程相当繁琐：</p>
<ol>
<li>打开浏览器访问目标网站</li>
<li>使用截图工具截取所需区域</li>
<li>保存截图到特定目录</li>
<li>处理图片（可能需要裁剪、压缩等）</li>
<li>在 <code>Markdown</code> 文件中手动添加图片链接</li>
<li>确认图片正确显示</li>
</ol>
<p>这个过程不仅耗时，而且容易出错。使用 <code>Playwright MCP</code>，整个流程可以简化为：</p>
<pre><code class="hljs language-bash" lang="bash">请访问 https://tailwindcss.com，截取首页顶部导航栏区域，保存到 @public/images/ 下，并生成 markdown 图片引用代码
</code></pre>
<p>Cursor 通过 MCP 协议会：</p>
<ul>
<li>自动打开网站</li>
<li>精确定位并截取导航栏元素</li>
<li>保存到指定目录</li>
<li>自动生成符合博客格式的图片引用代码</li>
</ul>
<p>这不仅节省了时间，还保证了图片引用的一致性和准确性。对于需要多张截图的长篇技术文章，效率提升尤为显著。</p>
<p>更进阶的应用还包括：</p>
<ul>
<li>自动为截图添加高亮或注释</li>
<li>对比同一网站在不同设备上的显示效果</li>
<li>跟踪网站的 UI 变化并自动更新文章中的截图</li>
</ul>
<h3 data-id="heading-5">场景二：端到端测试的自动化</h3>
<p>端到端测试是前端开发中的重要环节，但传统方式存在诸多痛点：</p>
<ol>
<li><strong>繁琐的测试编写</strong>：即使使用 <code>Cypress</code> 等工具，编写测试脚本仍需要手动规划测试路径、定位元素、设计断言等</li>
<li><strong>元素选择器维护</strong>：需要在代码中添加特定属性（如 <code>data-cy</code>）用于测试，且这些选择器需要随着 UI 变化而维护</li>
<li><strong>测试代码与产品代码分离</strong>：测试逻辑往往与开发逻辑分离，导致测试更新滞后于功能更新</li>
<li><strong>复杂交互流程难以模拟</strong>：多步骤的用户操作（如表单填写、多页面导航）需要精确编排</li>
</ol>
<p>即便使用 Chrome 的 <code>DevTools</code> 的 <code>Recorder</code> 功能，也只能生成 <code>Playwright</code> 的测试代码，并且需要人工介入，比如自定义 <code>data-cy</code>，浏览器操作一遍保存 playwright 的测试代码并扔给 cursor 生成测试。</p>
<p>或者通过 cursor 与 recorder 提效后的环节：</p>
<ol>
<li>让 cursor 在关键位置插入 <code>data-cy</code> 属性</li>
<li>使用 <code>Chrome DevTools</code> 的 <code>Recorder</code> 功能生成测试代码</li>
<li>将测试代码扔给 cursor 生成测试</li>
</ol>
<p>而通过 <code>Playwright MCP</code>，开发者可以自然语言描述测试场景，让 Cursor 直接生成并执行测试：</p>
<pre><code class="hljs language-bash" lang="bash">用户：测试我的登录流程：访问 http://localhost:3000/login，使用测试账号 <span class="hljs-built_in">test</span>@example.com 和密码 Test123!，验证登录成功后页面应跳转到仪表盘并显示欢迎信息
</code></pre>
<p>Cursor 会：</p>
<ul>
<li>在必要位置插入 <code>data-cy</code> 属性</li>
<li>自动访问登录页面</li>
<li>填写表单并提交</li>
<li>验证跳转和欢迎信息</li>
<li>报告测试结果</li>
<li>生成可复用的 <code>Playwright</code> 测试代码</li>
</ul>
<p>这种方式不仅降低了编写测试的门槛，还能根据测试结果智能调整测试策略。例如，如果登录按钮位置变化，Cursor 可以通过视觉识别重新定位元素，而不是简单地报告选择器失效。</p>
<p>对于快速迭代的项目尤其有价值：</p>
<ul>
<li>在代码修改后立即验证功能完整性</li>
<li>快速生成回归测试套件</li>
<li>模拟复杂的用户行为路径</li>
<li>根据用户反馈自动创建针对性测试</li>
</ul>
<p>这两个场景说明，MCP 不仅仅是连接 AI 与工具的技术桥梁，更是能够实质性改变开发者工作流程的革新力量。通过消除重复性工作，开发者可以将更多精力集中在创意和解决问题上。</p>
<h3 data-id="heading-6">示例：使用executeautomation/mcp-playwright</h3>
<p><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fexecuteautomation%2Fmcp-playwright" target="_blank" title="https://github.com/executeautomation/mcp-playwright" ref="nofollow noopener noreferrer"><code>executeautomation/mcp-playwright</code></a> 是一个基于 <code>Playwright</code> 的 MCP 服务器实现，它提供了一系列工具，使得 AI 助手能够：</p>
<ul>
<li>打开网页</li>
<li>截取网页或元素截图</li>
<li>填写表单</li>
<li>点击按钮</li>
<li>提取网页内容</li>
<li>执行 <code>JavaScript</code> 代码</li>
<li>等待网页加载或元素出现</li>
</ul>
<p>下面以一个简单的场景为例：<strong>让 AI 助手打开一个网站并截图</strong>。</p>
<p>传统方式下，这个任务可能需要你：</p>
<ol>
<li>安装 <code>Playwright</code></li>
<li>编写自动化脚本</li>
<li>配置环境</li>
<li>运行脚本</li>
<li>处理截图结果</li>
</ol>
<p>而使用 MCP，整个过程可以简化为与 AI 助手的对话：</p>
<blockquote>
<p>用户：请打开 Google 首页并截图<br>
AI 助手：好的，我将为您打开 Google 首页并截图。<br>
[AI 助手通过 MCP 控制浏览器，打开 google.com 并截图]<br>
AI 助手：已成功截图，这是 Google 首页的截图。[显示截图]</p>
</blockquote>
<p>整个过程中，用户不需要编写任何代码，AI 助手通过 MCP 服务器直接控制浏览器完成任务。</p>
<h3 data-id="heading-7">Playwright MCP 服务器的安装与配置</h3>
<p>如果你想尝试使用 <code>Playwright MCP</code> 服务器，可以按照以下步骤进行设置：</p>
<ol>
<li>
<p>使用 <code>npm</code> 安装 <code>Playwright MCP</code> 服务器：</p>
<pre><code class="hljs language-bash" lang="bash">npm install -g @executeautomation/playwright-mcp-server
</code></pre>
</li>
<li>
<p>配置 <code>Claude Desktop</code> 客户端（以 MacOS 为例）：
编辑配置文件 <code>~/Library/Application\ Support/Claude/claude_desktop_config.json</code>，添加以下内容：</p>
<pre><code class="hljs language-json" lang="json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">"mcpServers"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">"playwright"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
      <span class="hljs-attr">"command"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"npx"</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">"args"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">"-y"</span><span class="hljs-punctuation">,</span> <span class="hljs-string">"@executeautomation/playwright-mcp-server"</span><span class="hljs-punctuation">]</span>
    <span class="hljs-punctuation">}</span>
  <span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">}</span>
</code></pre>
</li>
<li>
<p>重启 <code>Claude</code> 客户端，你会看到一个新的 "Attach MCP" 按钮。</p>
</li>
<li>
<p>点击该按钮，选择 <code>Playwright MCP</code> 服务器，现在你的 AI 助手就可以控制浏览器了！</p>
</li>
</ol>
<h2 data-id="heading-8">在 Cursor 中使用 Playwright MCP</h2>
<p><code>Cursor</code> 是一款集成了 AI 能力的代码编辑器，它也支持 MCP 协议。我们可以在 <code>Cursor</code> 中配置 <code>Playwright MCP</code> 服务器，使 AI 助手能够在开发过程中直接操作浏览器。</p>
<h3 data-id="heading-9">配置步骤</h3>
<ol>
<li>
<p>首先确保已安装 <code>Playwright MCP</code> 服务器：</p>
<pre><code class="hljs language-bash" lang="bash">npm install -g @executeautomation/playwright-mcp-server
</code></pre>
</li>
<li>
<p>在 <code>Cursor</code> 中配置 MCP 服务器，有两种方式：</p>
<p><strong>方式一：通过配置文件</strong>（推荐）</p>
<p>编辑 <code>~/.cursor/mcp.json</code> 文件（如果不存在则创建），添加以下内容：</p>
<pre><code class="hljs language-json" lang="json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">"mcpServers"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">"playwright"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
      <span class="hljs-attr">"command"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"npx"</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">"args"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">"-y"</span><span class="hljs-punctuation">,</span> <span class="hljs-string">"@executeautomation/playwright-mcp-server"</span><span class="hljs-punctuation">]</span>
    <span class="hljs-punctuation">}</span>
  <span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<p><strong>方式二：通过项目配置</strong></p>
<p>在项目根目录下创建 <code>.cursor/mcp.json</code> 文件，内容同上。这样配置的 MCP 服务器只在当前项目中可用。</p>
</li>
<li>
<p>重启 <code>Cursor</code> 编辑器，使配置生效。</p>
</li>
</ol>
<h3 data-id="heading-10">使用场景示例</h3>
<p>在 <code>Cursor</code> 中使用 <code>Playwright MCP</code> 可以大大提升前端开发和测试效率。以下是一些常见的使用场景：</p>
<ol>
<li>
<p><strong>快速页面测试</strong>：</p>
<p>在开发 Web 页面时，可以让 AI 助手直接打开页面，检查渲染效果，无需手动切换到浏览器。</p>
<blockquote>
<p>用户：请打开我当前开发的页面 <a href="https://link.juejin.cn?target=http%3A%2F%2Flocalhost%3A3000%25EF%25BC%258C%25E6%25A3%2580%25E6%259F%25A5%25E5%2593%258D%25E5%25BA%2594%25E5%25BC%258F%25E5%25B8%2583%25E5%25B1%2580%25E5%259C%25A8%25E7%25A7%25BB%25E5%258A%25A8%25E8%25AE%25BE%25E5%25A4%2587%25E4%25B8%258A%25E7%259A%2584%25E6%2598%25BE%25E7%25A4%25BA%25E6%2595%2588%25E6%259E%259C" target="_blank" title="http://localhost:3000%EF%BC%8C%E6%A3%80%E6%9F%A5%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80%E5%9C%A8%E7%A7%BB%E5%8A%A8%E8%AE%BE%E5%A4%87%E4%B8%8A%E7%9A%84%E6%98%BE%E7%A4%BA%E6%95%88%E6%9E%9C" ref="nofollow noopener noreferrer">http://localhost:3000，检查响应式布局在移动设备上的显示效果</a></p>
<p>Cursor：[通过 Playwright MCP 打开页面并进行移动设备模拟，然后截图展示结果]</p>
</blockquote>
</li>
<li>
<p><strong>自动化截图对比</strong>：</p>
<p>在进行 UI 改动时，可以让 AI 助手截取改动前后的页面对比图。</p>
<blockquote>
<p>用户：我刚修改了导航栏的样式，请打开 <a href="https://link.juejin.cn?target=http%3A%2F%2Flocalhost%3A3000%25EF%25BC%258C%25E6%2588%25AA%25E5%259B%25BE%25E5%25B9%25B6%25E4%25B8%258E" target="_blank" title="http://localhost:3000%EF%BC%8C%E6%88%AA%E5%9B%BE%E5%B9%B6%E4%B8%8E" ref="nofollow noopener noreferrer">http://localhost:3000，截图并与</a> production 环境 <a href="https://link.juejin.cn?target=https%3A%2F%2Fmyapp.com" target="_blank" title="https://myapp.com" ref="nofollow noopener noreferrer">myapp.com</a> 的页面进行对比</p>
<p>Cursor：[使用 Playwright MCP 分别截取两个环境的页面，并进行对比分析]</p>
</blockquote>
</li>
<li>
<p><strong>交互测试</strong>：</p>
<p>让 AI 助手模拟用户交互，验证功能是否正常工作。</p>
<blockquote>
<p>用户：请测试我的登录表单，打开 <a href="https://link.juejin.cn?target=http%3A%2F%2Flocalhost%3A3000%2Flogin%25EF%25BC%258C%25E4%25BD%25BF%25E7%2594%25A8%25E6%25B5%258B%25E8%25AF%2595%25E8%25B4%25A6%25E5%258F%25B7%25E5%25A1%25AB%25E5%2586%2599%25E8%25A1%25A8%25E5%258D%2595%25E5%25B9%25B6%25E6%258F%2590%25E4%25BA%25A4%25EF%25BC%258C%25E6%25A3%2580%25E6%259F%25A5%25E6%2598%25AF%25E5%2590%25A6%25E6%2588%2590%25E5%258A%259F%25E7%2599%25BB%25E5%25BD%2595" target="_blank" title="http://localhost:3000/login%EF%BC%8C%E4%BD%BF%E7%94%A8%E6%B5%8B%E8%AF%95%E8%B4%A6%E5%8F%B7%E5%A1%AB%E5%86%99%E8%A1%A8%E5%8D%95%E5%B9%B6%E6%8F%90%E4%BA%A4%EF%BC%8C%E6%A3%80%E6%9F%A5%E6%98%AF%E5%90%A6%E6%88%90%E5%8A%9F%E7%99%BB%E5%BD%95" ref="nofollow noopener noreferrer">http://localhost:3000/login，使用测试账号填写表单并提交，检查是否成功登录</a></p>
<p>Cursor：[使用 Playwright MCP 打开页面，填写表单并提交，验证登录流程]</p>
</blockquote>
</li>
<li>
<p><strong>开发过程中的实时调试</strong>：</p>
<p>在编码过程中，可以让 AI 助手实时检查页面变化。</p>
<blockquote>
<p>用户：我刚刚修改了 Button 组件的样式，请打开组件预览页面检查不同状态下的按钮外观</p>
<p>Cursor：[打开页面，截取不同状态的按钮截图，并分析样式是否符合预期]</p>
</blockquote>
</li>
</ol>
<p>通过这些场景，我们可以看到，<code>Playwright MCP</code> 在 <code>Cursor</code> 中的应用不仅简化了前端开发工作流，还提供了更直观的开发体验，让 AI 助手成为开发过程中的得力助手。</p>
<h2 data-id="heading-11">MCP 的优势与局限性</h2>
<h3 data-id="heading-12">优势</h3>
<ol>
<li><strong>扩展 AI 能力</strong>：让 AI 助手能够与外部系统交互，大大扩展其应用场景</li>
<li><strong>标准化接口</strong>：提供统一的协议，降低 AI 工具集成的复杂度</li>
<li><strong>安全可控</strong>：用户可以审核 AI 助手的操作请求，确保安全</li>
<li><strong>灵活扩展</strong>：可以根据需要开发自定义 MCP 服务器</li>
</ol>
<h3 data-id="heading-13">局限性</h3>
<ol>
<li><strong>新兴技术</strong>：MCP 仍处于发展早期，协议可能会变化</li>
<li><strong>远程开发限制</strong>：MCP 服务器需要在本地机器上运行，远程开发环境可能存在问题</li>
<li><strong>资源支持</strong>：部分 MCP 客户端如 <code>Cursor</code> 尚未支持 <code>resources</code>/<code>prompts</code> 功能</li>
</ol>
<p>Cursor 的 MCP 支持限制：</p>
<p><img src="https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/7c2cf0d730894bd1a820dc9d4bce126a~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg56iL5bqP5ZGY5bGx5pyI:q75.awebp?rk3s=f64ab15b&amp;x-expires=1748729729&amp;x-signature=NBGQgqkQIgDNU5LhhsvoAt6W%2Bi4%3D" alt="Cursor MCP 资源支持" loading="lazy"></p>
<h2 data-id="heading-14">未来展望</h2>
<p>MCP 作为一种连接 AI 与外部系统的标准化协议，有着广阔的应用前景：</p>
<ol>
<li><strong>智能化开发工作流</strong>：AI 助手可以更深入地参与到开发流程中，自动化执行测试、部署等任务</li>
<li><strong>数据分析与可视化</strong>：AI 助手可以直接访问数据库，生成分析报告和可视化结果</li>
<li><strong>跨平台自动化</strong>：统一的协议使 AI 助手能够操作不同平台和工具</li>
<li><strong>个性化智能助手</strong>：用户可以配置自己的 MCP 服务器，创建专属于自己工作流的 AI 助手</li>
</ol>
<h2 data-id="heading-15">结语</h2>
<p><code>Model Context Protocol</code> (MCP) 正在打破 AI 助手与外部世界之间的壁垒，使 AI 能够更加深入地融入我们的工作流程。从浏览器自动化到代码编辑器集成，MCP 展示了 AI 与传统工具结合的强大潜力。</p>
<p>以前可以说，<code>Cursor</code> 虽然代码敲的好，但它不能直接操作浏览器，不能直接操作数据库，不能直接操作文件系统，开发这个流程还是需要我频繁接手的。</p>
<p>现在来说，需要我们接手的次数会越来越少。</p>
<p>最后再推荐两个 MCP 相关的资源：</p>
<ol>
<li><a href="https://link.juejin.cn?target=https%3A%2F%2Fmcp.so%2F" target="_blank" title="https://mcp.so/" ref="nofollow noopener noreferrer"><code>MCP.so</code> - MCP Server 目录</a></li>
<li><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fpunkpeye%2Fawesome-mcp-servers" target="_blank" title="https://github.com/punkpeye/awesome-mcp-servers" ref="nofollow noopener noreferrer"><code>Awesome MCP Servers</code> - GitHub 仓库</a></li>
</ol>
<h2 data-id="heading-16">参考资料</h2>
<ol>
<li><a href="https://link.juejin.cn?target=https%3A%2F%2Fmodelcontextprotocol.io%2Fintroduction" target="_blank" title="https://modelcontextprotocol.io/introduction" ref="nofollow noopener noreferrer"><code>Model Context Protocol</code> 官方文档</a></li>
<li><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fexecuteautomation%2Fmcp-playwright" target="_blank" title="https://github.com/executeautomation/mcp-playwright" ref="nofollow noopener noreferrer"><code>executeautomation/mcp-playwright</code> GitHub 仓库</a></li>
<li><a href="https://link.juejin.cn?target=https%3A%2F%2Fdocs.cursor.com%2Fcontext%2Fmodel-context-protocol" target="_blank" title="https://docs.cursor.com/context/model-context-protocol" ref="nofollow noopener noreferrer"><code>Cursor MCP</code> 文档</a></li>
</ol></div></div>