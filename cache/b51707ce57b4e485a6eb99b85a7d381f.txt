
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/chengxy-nds/p/19064067" title="发布于 2025-08-29 10:35">
    <span role="heading" aria-level="2">面试被问：OOM类型有哪些？怎么答？</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p><strong>大家好，我是小富～</strong></p>
<blockquote>
<p>面试官：OOM类型有哪些？</p>
</blockquote>
<blockquote>
<p>你：就是老年代放不下了嘛！</p>
</blockquote>
<blockquote>
<p>面试官：等消息吧！</p>
</blockquote>
<p><strong>OOM（Out Of Memory）</strong> 错误有多种类型，每种类型对应不同的内存区域或触发场景。以下是常见的 OOM 类型及其产生原因：</p>
<hr>
<h3 id="1-javalangoutofmemoryerror-java-heap-space">1. <strong><code>java.lang.OutOfMemoryError: Java heap space</code></strong></h3>
<ul>
<li><strong>触发原因</strong>：堆内存（存放对象实例）不足，无法分配新对象。</li>
<li><strong>典型场景</strong>：
<ul>
<li><strong>内存泄漏</strong>：对象被无意长期引用（如静态集合、未关闭的资源），无法被 GC 回收。</li>
<li><strong>堆大小不足</strong>：JVM 堆参数（<code>-Xmx</code>）设置过小，或程序需要处理的数据量超出预期。</li>
<li><strong>大对象分配</strong>：一次性申请超大对象（如大数组）。</li>
</ul>
</li>
</ul>
<p><strong>示例</strong>：</p>
<pre><code class="language-java">// 不断向集合中添加对象导致堆溢出
List&lt;Object&gt; list = new ArrayList&lt;&gt;();
while (true) {
    list.add(new Object());
}
</code></pre>
<p><strong>解决方案</strong>：</p>
<ul>
<li>检查内存泄漏（使用 <code>jmap</code> + <code>MAT</code> 分析堆转储）。</li>
<li>调整堆大小（<code>-Xmx</code> 和 <code>-Xms</code>）。</li>
<li>优化代码逻辑，减少对象生命周期。</li>
</ul>
<hr>
<h3 id="2-javalangoutofmemoryerror-metaspacejava-8或-permgen-spacejava-7-">2. <strong><code>java.lang.OutOfMemoryError: Metaspace</code>（Java 8+）或 <code>PermGen space</code>（Java 7-）</strong></h3>
<ul>
<li><strong>触发原因</strong>：元空间（Metaspace）或永久代（PermGen）内存不足，用于存储类元数据、方法信息等。</li>
<li><strong>典型场景</strong>：
<ul>
<li>动态生成大量类（如使用 CGLib、反射、动态代理）。</li>
<li>类加载器未正确释放（如频繁部署的 Web 应用导致旧类未卸载）。</li>
</ul>
</li>
</ul>
<p><strong>示例</strong>：</p>
<pre><code class="language-java">// 使用 CGLib 动态生成大量代理类
Enhancer enhancer = new Enhancer();
while (true) {
    enhancer.setSuperclass(OOM.class);
    enhancer.setCallback((MethodInterceptor) (obj, method, args, proxy) -&gt; proxy.invokeSuper(obj, args)));
    enhancer.create();
}
</code></pre>
<p><strong>解决方案</strong>：</p>
<ul>
<li>调整元空间大小（<code>-XX:MaxMetaspaceSize</code>）。</li>
<li>检查类加载器泄漏或动态类生成逻辑。</li>
</ul>
<hr>
<h3 id="3-javalangoutofmemoryerror-direct-buffer-memory">3. <strong><code>java.lang.OutOfMemoryError: Direct buffer memory</code></strong></h3>
<ul>
<li><strong>触发原因</strong>：直接内存（Direct Memory，通过 <code>ByteBuffer.allocateDirect()</code> 分配）耗尽。</li>
<li><strong>典型场景</strong>：
<ul>
<li>频繁申请直接内存但未及时释放（需依赖 <code>System.gc()</code> 或 <code>Cleaner</code> 机制）。</li>
<li>JVM 直接内存参数（<code>-XX:MaxDirectMemorySize</code>）设置过小。</li>
</ul>
</li>
</ul>
<p><strong>示例</strong>：</p>
<pre><code class="language-java">// 不断申请直接内存
List&lt;ByteBuffer&gt; buffers = new ArrayList&lt;&gt;();
while (true) {
    buffers.add(ByteBuffer.allocateDirect(1024 * 1024)); // 1MB
}
</code></pre>
<p><strong>解决方案</strong>：</p>
<ul>
<li>检查直接内存使用代码，确保及时释放。</li>
<li>调整 <code>-XX:MaxDirectMemorySize</code>。</li>
</ul>
<hr>
<h3 id="4-javalangoutofmemoryerror-unable-to-create-new-native-thread">4. <strong><code>java.lang.OutOfMemoryError: Unable to create new native thread</code></strong></h3>
<ul>
<li><strong>触发原因</strong>：操作系统限制线程数量，无法创建新线程。</li>
<li><strong>典型场景</strong>：
<ul>
<li>线程数超过系统限制（如 Linux 的 <code>ulimit -u</code>）。</li>
<li>每个线程的栈内存（<code>-Xss</code>）设置过大，导致总内存占用超出。</li>
</ul>
</li>
</ul>
<p><strong>示例</strong>：</p>
<pre><code class="language-java">// 无限创建线程
while (true) {
    new Thread(() -&gt; {
        try { Thread.sleep(1000000); } catch (InterruptedException e) {}
    }).start();
}
</code></pre>
<p><strong>解决方案</strong>：</p>
<ul>
<li>减少线程数（使用线程池）。</li>
<li>调整 <code>-Xss</code> 减小线程栈大小。</li>
<li>修改系统线程数限制。</li>
</ul>
<hr>
<h3 id="5-javalangoutofmemoryerror-requested-array-size-exceeds-vm-limit">5. <strong><code>java.lang.OutOfMemoryError: Requested array size exceeds VM limit</code></strong></h3>
<ul>
<li><strong>触发原因</strong>：尝试分配超过 JVM 限制的数组（通常接近 <code>Integer.MAX_VALUE</code>）。</li>
<li><strong>典型场景</strong>：错误计算数组长度，如 <code>new int[Integer.MAX_VALUE]</code>。</li>
</ul>
<p><strong>解决方案</strong>：</p>
<ul>
<li>检查数组长度计算逻辑，使用合理的数据结构。</li>
</ul>
<hr>
<h3 id="6-javalangoutofmemoryerror-gc-overhead-limit-exceeded">6. <strong><code>java.lang.OutOfMemoryError: GC Overhead limit exceeded</code></strong></h3>
<ul>
<li><strong>触发原因</strong>：GC 频繁执行但回收效率极低（如 98% 时间用于 GC，仅回收 2% 内存）。</li>
<li><strong>典型场景</strong>：堆内存几乎被占满，且存在大量无法回收的对象（内存泄漏）。</li>
</ul>
<p><strong>解决方案</strong>：</p>
<ul>
<li>检查内存泄漏或优化 GC 策略（如调整堆大小、更换垃圾回收器）。</li>
</ul>
<hr>
<h3 id="7-javalangoutofmemoryerror-codecachejit-编译代码缓存溢出">7. <strong><code>java.lang.OutOfMemoryError: CodeCache</code>（JIT 编译代码缓存溢出）</strong></h3>
<ul>
<li><strong>触发原因</strong>：JIT 编译器生成的本地代码占满代码缓存区。</li>
<li><strong>典型场景</strong>：高频动态编译大量方法（如复杂的热点代码）。</li>
</ul>
<p><strong>解决方案</strong>：</p>
<ul>
<li>调整代码缓存大小（<code>-XX:ReservedCodeCacheSize</code>）。</li>
<li>关闭分层编译（<code>-XX:-TieredCompilation</code>）。</li>
</ul>
<hr>
<h2 id="总结">总结</h2>
<p>OOM 的根本原因是 <strong>JVM 内存区域不足</strong> 或 <strong>资源耗尽</strong>，需结合错误类型分析具体内存区域（堆、元空间、直接内存等）。</p>
<p>排查时可通过以下步骤：</p>
<p>1、确定 OOM 类型（通过错误日志）。</p>
<p>2、使用工具分析（如 <code>jstat</code>、<code>jmap</code>、<code>VisualVM</code>、<code>MAT</code>）。</p>
<p>3、调整 JVM 参数或优化代码逻辑。</p>
<p><strong>等被裁员在学习？赶紧的吧！</strong></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-08-29 10:35">2025-08-29 10:35</span>&nbsp;
<a href="https://www.cnblogs.com/chengxy-nds">程序员小富</a>&nbsp;
阅读(<span id="post_view_count">279</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19064067);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19064067', targetLink: 'https://www.cnblogs.com/chengxy-nds/p/19064067', title: '面试被问：OOM类型有哪些？怎么答？' })">举报</a>
</div>
        