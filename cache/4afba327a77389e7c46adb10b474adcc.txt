
	<div class="postTitle">
		<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/Colin-Cai/p/18774816" title="发布于 2025-03-23 11:09">
    <span role="heading" aria-level="2">有限Abel群的结构(1)</span>
    

</a>

	</div>
	    <div id="cnblogs_post_description" style="display: none">
        
        有限Abel群结构系列。本节讲群的基本概念和用程序来遍历给定阶的有限群。
    </div>
<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<div class="cnblogs_Highlighter">
<pre class="brush:sql;gutter:true;">　　版权申明：本文为博主窗户(Colin Cai)原创，欢迎转帖。如要转贴，必须注明原文网址

　　 https://www.cnblogs.com/Colin-Cai/p/18774816.html

　　作者：窗户

　　QQ/微信：6679072

　　E-mail：6679072@qq.com</pre>
</div>
<p>我准备讲有限Abel群，总觉得，对于一个程序员来说，离散数学的各个科目无论是从训练思维还是从实用角度都是不错的。总是觉得程序员应该重视理论方面的学习，其中自然也包括数学。当然，讲解过程中也包含着一些程序，毕竟程序才是程序员的根。</p>
<p>&nbsp;</p>
<p><strong><span style="font-size: 18pt">映射</span></strong></p>
<p><strong><span style="color: rgba(255, 0, 0, 1)">序偶</span></strong>(pair)，是把两个东西绑在一起，我们可以记为$&lt;a, b&gt;$</p>
<p>我们可以定义$&lt;a,b&gt;=\{\{a\},\{a,b\}\}$</p>
<p>为何这样定义，就表示a/b的有序性了，自己想想，注意，按照以上定义，</p>
<p>$&lt;a,a&gt;=\{\{a\}\}$</p>
<p>当然，你可以用别的定义方法，只要能保证唯一性。</p>
<p>&nbsp;</p>
<p>集合$A$和集合$B$的<strong><span style="color: rgba(255, 0, 0, 1)">笛卡尔积</span></strong>(Cartesian Product)，定义如下：</p>
<p>$A\times B=\{&lt;a,b&gt;|a\in A,b\in B\}$</p>
<p>也就是遍历$A$的元素和$B$的元素组成序偶的所有可能。</p>
<p>比如$\{1,2\}$和$\{a,b,c\}$的笛卡尔积是$\{&lt;1,a&gt;,&lt;1,b&gt;,&lt;1,c&gt;,&lt;2,a&gt;,&lt;2,b&gt;,&lt;2,c&gt;\}$</p>
<p>&nbsp;</p>
<p><strong><span style="color: rgba(255, 0, 0, 1)">映射</span></strong>(mapping)，又叫<span style="color: rgba(255, 0, 0, 1)"><strong>函数</strong></span>(function)，这个概念为大家所熟知，此处还是得形式化描述一下</p>
<p>集合$A$到集合$B$的映射$f$，是指$A\times B$的子集，满足</p>
<p>&nbsp;$\forall a\in A \exists!b\in B:&lt;a,b&gt;\in f$</p>
<p>换成大白话，就是对于任意$A$里的元素$a$，$f(a)$都是$B$里的元素，存在且唯一。</p>
<p>其中，$A$是$f$的定义域，$B$是$f$的值域。</p>
<p>&nbsp;</p>
<p><strong><span style="font-size: 18pt">半群</span></strong></p>
<p>后面，我们看一种特殊的函数，对于集合$A$,</p>
<p>它的定义域是$A\times A$，值域为$A$</p>
<p>这种函数我们称为集合$A$上的<span style="color: rgba(255, 0, 0, 1)"><strong>二元运算</strong></span>，比如我们常见的加法、减法、乘法、除法(当然，无论是对于整数集、有理数集、实数集、复数集)......</p>
<p>如果集合$A$上的二元运算$f$满足结合律，也就是</p>
<p>$\forall a,b,c\in A:f(&lt;&lt;a,b&gt;,c&gt;) = f(&lt;a,&lt;b,c&gt;&gt;)$</p>
<p>则称集合$A$在二元运算$f$下构成一个<strong><span style="color: rgba(255, 0, 0, 1)">半群</span></strong>(semigroup)</p>
<p>这样写，不是我们习惯的写法，我们一般把满足结合律的二元运算叫乘法，用中缀表达式更习惯，那么乘法满足交换律，则为</p>
<p>$\forall a,b,c\in A:(a\cdot b)\cdot c=a\cdot (b\cdot c)$</p>
<p>现实中很多这样的半群例子，比如整数集在乘法下构成半群，非0整数集在乘法下构成半群。</p>
<p>再比如2阶实数矩阵集在矩阵乘法下构成半群。</p>
<p>当然，整数在加法下也构成半群，但可能会有点困惑，加法、乘法......</p>
<p>实际上，数学上，要注意的是形式的不变性，至于叫什么，不重要，真不重要。</p>
<p>&nbsp;</p>
<p><strong><span style="font-size: 18pt">群</span></strong></p>
<p>如果一个半群满足以下两点：</p>
<p>(1) 该半群里有一个元$e$，对于半群里任何元$x$，都有</p>
<p>&nbsp; &nbsp; &nbsp; $x=x\cdot e=e\cdot x$</p>
<p>(2)对于半群里任意一个元$x$，都存在一个$x'$，使得</p>
<p>&nbsp; &nbsp; &nbsp; $x\cdot x' = x' \cdot x = e$</p>
<p>那么，我们称这个半群为<span style="color: rgba(255, 0, 0, 1)"><strong>群</strong></span>(group)。</p>
<p>其中，满足第一个条件的$e$为该群的<strong><span style="color: rgba(255, 0, 0, 1)">幺元</span></strong>，或称<strong><span style="color: rgba(255, 0, 0, 1)">单位元</span></strong>；第二个条件里的$x$和$x'$互为<strong><span style="color: rgba(255, 0, 0, 1)">逆元</span></strong>。</p>
<p>举几个实际的群的例子：</p>
<p>实数集在加法上为一个群，其中幺元是0(任何数加上0值不变)，每个元的逆元是其相反数(任何数和其相反数相加等于0)；</p>
<p>非零实数集在乘法上为一个群，其中幺元是1(任何数乘以1值不变)，每个元的逆元是其倒数(任何数和其倒数相等于1)，此处注意实数集在乘法上并不是一个群，因为0不存在逆元;</p>
<p>对于一个具体的正整数n，实数n阶非奇异矩阵(也就是行列式值不为0)构成的集合在矩阵乘法上为一个群，其中幺元是$I_{n}$，每个元的逆元是其逆阵。</p>
<p>群里元素的数量叫做群的阶。</p>
<p>&nbsp;</p>
<p><span style="font-size: 18pt"><strong>相同阶的群</strong></span></p>
<p>本节是想写程序看看给定阶数的群有哪些。</p>
<p>作为抽象代数的重要分支，群论不是简单几句就可以说清楚的，本系列其实也只会讲群论的一小部分。所以本节主要是暴力求解。</p>
<p>我们想暴力求给定n阶群(也就是群里元素的个数为n)的群有哪些，那么我们设这些元素为$S_0,S_1,...S_{n-1}$，在不引起误解的时候，我们可以用$0,1,...S_{n-1}$来代表$S_0,S_1,...S_{n-1}$，嗯，都到了抽象代数这样的程度，其实符号未必重要。</p>
<p>我们用一个$n\times n$的方阵$A$来代表这个群，其实也就是这个群上的乘法表，其中</p>
<p>$S_a\cdot S_b = S_{A_{a,b}}$</p>
<p>我们就用Python来实现吧，就用自带的array库用一维数组${B}$来模拟方阵吧。</p>
<p>$A_{a,b} = B_{a*n+b}$</p>
<p>先建立高阶的暴力求解框架，如下：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> make_search_all_groups_func(get_all_maybe_groups, is_group, print_group):
    </span><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> f(n):
        </span><span style="color: rgba(0, 0, 255, 1)">for</span> s <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> get_all_maybe_groups(n):
            </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> is_group(n, s):
                print_group(n, s)
    </span><span style="color: rgba(0, 0, 255, 1)">return</span> f</pre>
</div>
<p>&nbsp;</p>
<p>get_all_maybe_groups是用来产生可能是group的二元运算，因为待选对象可能很多，gen_all_maybe_groups一般应该是个generator。</p>
<p>is_group是用来判定这个二元运算是不是可以作为群的乘法表，</p>
<p>如果是，就打印出这个群，当然，这个群可以用乘法表来代表。</p>
<p>那么，这个打印群，我们可以这样写:</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> print_group(n, s):
    a </span>=<span style="color: rgba(0, 0, 0, 1)"> 0
    b </span>=<span style="color: rgba(0, 0, 0, 1)"> 0
    </span><span style="color: rgba(0, 0, 255, 1)">print</span>(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">group:</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)
    </span><span style="color: rgba(0, 0, 255, 1)">for</span> r <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> s:
        </span><span style="color: rgba(0, 0, 255, 1)">print</span>(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">S%d x S%d = S%d</span><span style="color: rgba(128, 0, 0, 1)">'</span> %<span style="color: rgba(0, 0, 0, 1)"> (a, b, r))
        </span><span style="color: rgba(0, 0, 255, 1)">if</span> b &lt; n - 1<span style="color: rgba(0, 0, 0, 1)">:
            b </span>+= 1
        <span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">:
            a </span>+= 1<span style="color: rgba(0, 0, 0, 1)">
            b </span>=<span style="color: rgba(0, 0, 0, 1)"> 0
    </span><span style="color: rgba(0, 0, 255, 1)">print</span>(<span style="color: rgba(128, 0, 0, 1)">''</span>, end=<span style="color: rgba(128, 0, 0, 1)">''</span>, flush=True)</pre>
</div>
<p>以上不难，那么接下来的问题在于如何遍历所有可能的二元运算，简单的想想，这应该是$n\times n$个$\{0,1...n-1\}$来做笛卡尔积，</p>
<p>好在Python有itertools库可以做笛卡尔积，</p>
<p>itertools.product(range(n), range(n) ...)</p>
<p>可惜是个不固定参数的调用，不过Python是可以支持的，支持的方法就是这个*，展开参数，很像Lisp的apply函数。</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> array
</span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> itertools as it
</span><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> get_all_maybe_groups_v1(n):
    </span><span style="color: rgba(0, 0, 255, 1)">return</span> map(<span style="color: rgba(0, 0, 255, 1)">lambda</span> s:array.array(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">i</span><span style="color: rgba(128, 0, 0, 1)">'</span>, s), it.product(*[range(n)]*(n**2)))</pre>
</div>
<p>前面加个map将每个元素转为array，之所以变成array，在于array寻址效率高。</p>
<p>然后就是判定是否为群了，判定是否为群，需要经过三步：</p>
<p>(1)判断二元运算是否满足结合律</p>
<p>(2)判断是否有幺元</p>
<p>(3)判断是否每个元都有逆元</p>
<p>那么写成代码可以如下：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> is_group_v1(n, s):
    </span><span style="color: rgba(0, 0, 255, 1)">if</span> <span style="color: rgba(0, 0, 255, 1)">not</span> assoc_low(n, s): <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">结合律检验</span>
        <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> False
    e </span>= get_ident_element(n, s) <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">找幺元</span>
    <span style="color: rgba(0, 0, 255, 1)">if</span> e <span style="color: rgba(0, 0, 255, 1)">is</span><span style="color: rgba(0, 0, 0, 1)"> None:
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> False
    </span><span style="color: rgba(0, 0, 255, 1)">if</span> <span style="color: rgba(0, 0, 255, 1)">not</span> each_can_inverse(n, s, e): <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">看是否每个元都有逆元</span>
        <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> False
    </span><span style="color: rgba(0, 0, 255, 1)">return</span> True</pre>
</div>
<p>分别实现三个函数。</p>
<p>结合律也是笛卡尔积遍历所有可能，分别检验</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> assoc_low(n, s):
    mul </span>= <span style="color: rgba(0, 0, 255, 1)">lambda</span> a, b : s[a * n + b] <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">乘法</span>
    <span style="color: rgba(0, 0, 255, 1)">for</span> a, b, c <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> it.product(range(n), range(n), range(n)):
        </span><span style="color: rgba(0, 0, 255, 1)">if</span> mul(mul(a, b), c) !=<span style="color: rgba(0, 0, 0, 1)"> mul(a, mul(b, c)):
            </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> False
    </span><span style="color: rgba(0, 0, 255, 1)">return</span> True</pre>
</div>
<p>再来找幺元，看是否有一个元，所有元和它左乘右乘都不改变，</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> get_ident_element(n, s):
    mul </span>= <span style="color: rgba(0, 0, 255, 1)">lambda</span> a, b : s[a * n + b] <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">乘法</span>
    <span style="color: rgba(0, 0, 255, 1)">for</span> i <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> range(n):
        flag </span>=<span style="color: rgba(0, 0, 0, 1)"> True
        </span><span style="color: rgba(0, 0, 255, 1)">for</span> j <span style="color: rgba(0, 0, 255, 1)">in</span> <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> range(n):
            </span><span style="color: rgba(0, 0, 255, 1)">if</span> mul(i, j) != j <span style="color: rgba(0, 0, 255, 1)">or</span> mul(j, i) !=<span style="color: rgba(0, 0, 0, 1)"> j:
                flag </span>=<span style="color: rgba(0, 0, 0, 1)"> False
                </span><span style="color: rgba(0, 0, 255, 1)">break</span>
        <span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> flag:
            </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> i
    </span><span style="color: rgba(0, 0, 255, 1)">return</span> None</pre>
</div>
<p>最后再来看每个元有没有逆元，依然是遍历，</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> each_can_inverse(n, s, e):
    mul </span>= <span style="color: rgba(0, 0, 255, 1)">lambda</span> a, b : s[a * n + b] <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">乘法</span>
    <span style="color: rgba(0, 0, 255, 1)">for</span> i <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> range(n):
        flag </span>=<span style="color: rgba(0, 0, 0, 1)"> False
        </span><span style="color: rgba(0, 0, 255, 1)">for</span> j <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> range(n):
            </span><span style="color: rgba(0, 0, 255, 1)">if</span> mul(i, j) == e <span style="color: rgba(0, 0, 255, 1)">and</span> mul(j, i) ==<span style="color: rgba(0, 0, 0, 1)"> e:
                flag </span>= True <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">找到了逆元，标记一下找到了</span>
                <span style="color: rgba(0, 0, 255, 1)">break</span>
        <span style="color: rgba(0, 0, 255, 1)">if</span> <span style="color: rgba(0, 0, 255, 1)">not</span><span style="color: rgba(0, 0, 0, 1)"> flag:
            </span><span style="color: rgba(0, 0, 255, 1)">return</span> False <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">当前i没有找到逆元</span>
    <span style="color: rgba(0, 0, 255, 1)">return</span> True</pre>
</div>
<p>这样，我们实现了一个搜索版本</p>
<div class="cnblogs_code">
<pre>search_all_groups_v1 = make_search_all_groups_func(get_all_maybe_groups_v1, is_group_v1, print_group)</pre>
</div>
<p>结果我们调用search_all_groups_v1(4)希望搜索4阶群，就发现计算非常慢了。</p>
<p>我们是不是可以再快一点呢？</p>
<p>很多时候，此类搜索我们发现一些定理就可以加快搜索速度。</p>
<p>我们先证明一个命题:</p>
<p>对于任意群$&lt;G,\cdot&gt;$，</p>
<p>$\forall a,b,c\in G:a\cdot b=a\cdot c \rightarrow b = c$</p>
<p>$\forall a,b,c\in G:b\cdot a=c\cdot a \rightarrow b = c$</p>
<p>其实，</p>
<p>&nbsp;$a \cdot b = a \cdot c$<br>&nbsp;$\rightarrow a^{-1}\cdot(a \cdot b) = a^{-1}\cdot(a \cdot c)$<br>&nbsp;$\rightarrow (a^{-1}\cdot a) \cdot b = (a^{-1}\cdot a) \cdot c$<br>&nbsp;$\rightarrow e \cdot b = e \cdot c$<br>&nbsp;$\rightarrow b = c$<br>其中，$a^{-1}$是$a$的逆元，$e$是群的幺元。</p>
<p>同理，</p>
<p> $b \cdot a = c \cdot a$<br> $\rightarrow (b \cdot a) \cdot a^{-1} = (c \cdot a) \cdot a^{-1}$<br> $\rightarrow b \cdot (a \cdot a^{-1}) = c \cdot (a \cdot a^{-1})$<br> $\rightarrow b \cdot e = c \cdot e$<br> $\rightarrow b = c$</p>
<p>于是我们知道，对于群里的任何一个元素，乘以不同的元素得到的结果都不一样，</p>
<p>那么再细细一想，对于群里任何一个元素$a$，乘以$S_{0},S_{1}...S_{n-1}$得到的$a \cdot S_{0}, a&nbsp;\cdot&nbsp;S_{1}...a \cdot S_{n-1}$是$S_0,S_1...S_{n-1}$的一个排列，</p>
<p>被$S_{0},S_{1}...S_{n-1}$乘得到的$S_0 \cdot a ,S_1&nbsp;\cdot a&nbsp;...S_{n-1}&nbsp;\cdot a&nbsp;$也是$S_0,S_1...S_{n-1}$的一个排列。</p>
<p>乘法表这样一个矩阵里的每个数，其在所属行和所属列里是独一无二的。</p>
<p>利用这个性质，我们筛选二元运算时，就可以不要用笛卡尔积了，这样轻松的筛掉了绝大多数不可能是群乘法的二元运算。</p>
<p>另外，我们可以一上来就让$S_0$来做群的幺元，于是$n\times n$的乘法表已经固定了其中的$2n-1$项，</p>
<div class="hljs-ln-line hljs-ln-code">
<p>\begin{pmatrix}<br>&amp;S_0 &amp; S1 &amp; ... &amp; S_{n-1}\\<br>&amp;S_1 &amp;  ...&amp;   \\<br>&amp;...&amp; ...&amp;\\<br>&amp;S_{n-1} &amp; ... &amp; \\<br>\end{pmatrix}</p>
<p>于是，乘法表里只有$(n-1)^2$项需要去待定。</p>
<p>每加一项都要判断在这一行或这一列中没有相同的元，我们按照字典顺序(dictionary order)去依次遍历所有的可能。</p>
<p>不得不说，字典顺序是个很方便的遍历方法，如果你还不熟悉，那么还是多练习一下比较好。</p>
<p>根据上面，我们写了一个新的版本来待定乘法表</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> get_all_maybe_groups_v2(n):
    </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">0是幺元,先固定2n-1项</span>
    arr = array.array(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">i</span><span style="color: rgba(128, 0, 0, 1)">'</span>, n * n *<span style="color: rgba(0, 0, 0, 1)"> [0])
    </span><span style="color: rgba(0, 0, 255, 1)">for</span> i <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> range(n):
        arr[i] </span>=<span style="color: rgba(0, 0, 0, 1)"> i
        arr[n </span>* i] =<span style="color: rgba(0, 0, 0, 1)"> i
    </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">从1行1列开始遍历</span>
    row, col = 1, 1<span style="color: rgba(0, 0, 0, 1)">
    FORWARD, BACKWARD </span>=<span style="color: rgba(0, 0, 0, 1)"> True, False
    </span><span style="color: rgba(0, 0, 255, 1)">while</span><span style="color: rgba(0, 0, 0, 1)"> True:
        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">初始的时候,搜索的方向默认为向后,只有成功找到了一个值才能改为向前</span>
        direction =<span style="color: rgba(0, 0, 0, 1)"> BACKWARD
        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">依次从当前值开始搜索到最小的值,满足行/列无重复</span>
        <span style="color: rgba(0, 0, 255, 1)">for</span> i <span style="color: rgba(0, 0, 255, 1)">in</span> range(arr[row * n +<span style="color: rgba(0, 0, 0, 1)"> col], n):
            flag </span>=<span style="color: rgba(0, 0, 0, 1)"> True
            </span><span style="color: rgba(0, 0, 255, 1)">for</span> j <span style="color: rgba(0, 0, 255, 1)">in</span> it.chain(range(row * n, row * n + col), range(col, row * n +<span style="color: rgba(0, 0, 0, 1)"> col, n)):
                </span><span style="color: rgba(0, 0, 255, 1)">if</span> arr[j] ==<span style="color: rgba(0, 0, 0, 1)"> i:
                    </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">行列上有重复,就报错标志置起来</span>
                    flag =<span style="color: rgba(0, 0, 0, 1)"> False
                    </span><span style="color: rgba(0, 0, 255, 1)">break</span>
            <span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> flag:
                </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">成功的找到了新值,flag设为真用来代表找到了</span>
                direction =<span style="color: rgba(0, 0, 0, 1)"> FORWARD
                arr[row </span>* n + col] =<span style="color: rgba(0, 0, 0, 1)"> i
                </span><span style="color: rgba(0, 0, 255, 1)">break</span>
        <span style="color: rgba(0, 0, 255, 1)">if</span> direction ==<span style="color: rgba(0, 0, 0, 1)"> FORWARD:
            </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">找到了当前的值,那么可以继续往前,坐标往前进一个</span>
            col += 1
            <span style="color: rgba(0, 0, 255, 1)">if</span> col &gt;=<span style="color: rgba(0, 0, 0, 1)"> n:
                col </span>= 1<span style="color: rgba(0, 0, 0, 1)">
                row </span>+= 1
                <span style="color: rgba(0, 0, 255, 1)">if</span> row ==<span style="color: rgba(0, 0, 0, 1)"> n:
                    </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">此时,已经满了,得到了一个新的候选二元运算</span>
                    <span style="color: rgba(0, 0, 255, 1)">yield</span><span style="color: rgba(0, 0, 0, 1)"> arr
                    </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">后退两行加两个元素</span>
                    <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">为什么可以后退这么多来,实际需要证明一下,有兴趣就想想如何证明吧</span>
                    <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">因为只动最后两行没有其他可能解</span>
                    <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">直觉能后退更多一点,不过连我自己也没多想</span>
                    row = n - 3<span style="color: rgba(0, 0, 0, 1)">
                    col </span>= n - 2
                    <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">既然是字典顺序,当前搜索的值至少要从下一个开始</span>
                    arr[row * n + col] += 1
                    <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">后面的其他值都清为0,这样才是字典顺序,不会漏掉候选者</span>
                    arr[row * n + col + 1] =<span style="color: rgba(0, 0, 0, 1)"> 0
                    </span><span style="color: rgba(0, 0, 255, 1)">for</span> i <span style="color: rgba(0, 0, 255, 1)">in</span> range((n - 2)*n+1, (n - 1)*<span style="color: rgba(0, 0, 0, 1)">n):
                        arr[i] </span>=<span style="color: rgba(0, 0, 0, 1)"> 0
                    </span><span style="color: rgba(0, 0, 255, 1)">for</span> i <span style="color: rgba(0, 0, 255, 1)">in</span> range((n - 1)*n+1, n*<span style="color: rgba(0, 0, 0, 1)">n):
                        arr[i] </span>=<span style="color: rgba(0, 0, 0, 1)"> 0
        </span><span style="color: rgba(0, 0, 255, 1)">else</span>: <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">direction == BACKWARD</span>
            <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">没有找到当前的值,只能坐标往前退一步了</span>
            <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">字典顺序下,当前值清为0,而退一步之后的位置则要加1,这才是紧接着的下一个字典序</span>
            arr[row * n + col] =<span style="color: rgba(0, 0, 0, 1)"> 0
            col </span>-= 1
            <span style="color: rgba(0, 0, 255, 1)">if</span> col ==<span style="color: rgba(0, 0, 0, 1)"> 0:
                col </span>= n - 1<span style="color: rgba(0, 0, 0, 1)">
                row </span>-= 1
                <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">退无可退,都退到第0行固定的那些值上去了,说明遍历完了</span>
                <span style="color: rgba(0, 0, 255, 1)">if</span> row ==<span style="color: rgba(0, 0, 0, 1)"> 0:
                    </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)">
            arr[row </span>* n + col] += 1</pre>
</div>
<p>还可以继续优化，比如判断结合律是否可以提前到遍历乘法表的每一个值的时候就判一下呢？</p>
<p>其实完全可以的，这样速度又可以秒杀这个版本，有兴趣就自己来写写吧。</p>
<p>优化很多时候就是无底洞，你可以不断的用新的定理提高此类遍历/验证的效率。</p>
<p>当然，如果你具备扎实的群论基础，比如你至少明白什么叫Sylow定理，那么这个写法甚至会有巨大的改变。</p>
<p>不过，在我的这一系列文章中，不会把群论深入到这样的深度。</p>
</div>
</div>
<div class="clear"></div>

	<div class="postDesc">posted on 
<span id="post-date" data-last-update-days="0.7933438039606482" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-23 11:13">2025-03-23 11:09</span>&nbsp;
<a href="https://www.cnblogs.com/Colin-Cai">窗户</a>&nbsp;
阅读(<span id="post_view_count">56</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18774816" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18774816);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18774816', targetLink: 'https://www.cnblogs.com/Colin-Cai/p/18774816', title: '有限Abel群的结构(1)' })">举报</a>
</div>
