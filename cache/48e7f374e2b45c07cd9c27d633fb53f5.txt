
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/zhaloe/p/18769663" title="发布于 2025-03-13 12:23">
    <span role="heading" aria-level="2">鸿蒙WebSocket的使用竟如此简单</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>使用WebSocket建立服务器与客户端的双向连接，需要先通过createWebSocket()方法创建WebSocket对象，然后通过connect()方法连接到服务器。当连接成功后，客户端会收到open事件的回调，之后客户端就可以通过send()方法与服务器进行通信。当服务器发信息给客户端时，客户端会收到message事件的回调。当客户端不要此连接时，可以通过调用close()方法主动断开连接，之后客户端会收到close事件的回调。</p>
<p>若在上述任一过程中发生错误，客户端会收到error事件的回调。</p>
<p>websocket支持心跳检测机制，在客户端和服务端建立WebSocket连接之后，每间隔一段时间会客户端会发送Ping帧给服务器，服务器收到后应立即回复Pong帧。</p>
<h2 id="接口说明">接口说明</h2>
<p>WebSocket连接功能主要由webSocket模块提供。使用该功能需要申请ohos.permission.INTERNET权限。具体接口说明如下</p>
<ul>
<li>createWebSocket()：创建一个WebSocket连接</li>
<li>connect()：根据URL地址，建立一个WebSocket连接</li>
<li>send()：通过WebSocket连接发送数据</li>
<li>close()：关闭WebSocket连接</li>
<li>on(type: 'open')：订阅WebSocket的打开事件</li>
<li>off(type: 'open')：取消订阅WebSocket的打开事件</li>
<li>on(type: 'message')：订阅WebSocket的接收到服务器消息事件</li>
<li>off(type: 'message')：取消订阅WebSocket的接收到服务器消息事件</li>
<li>on(type: 'close')：订阅WebSocket的关闭事件</li>
<li>off(type: 'close')：取消订阅WebSocket的关闭事件</li>
<li>on(type: 'error')：订阅WebSocket的Error事件</li>
<li>off(type: 'error')：取消订阅WebSocket的Error事件</li>
</ul>
<h2 id="开发步骤">开发步骤</h2>
<ol>
<li>导入需要的webSocket模块</li>
<li>创建一个WebSocket连接，返回一个WebSocket对象</li>
<li>（可选）订阅WebSocket的打开、消息接收、关闭、Error事件</li>
<li>根据URL地址，发起WebSocket连接</li>
<li>使用完WebSocket连接之后，主动断开连接</li>
</ol>
<h2 id="示例代码">示例代码</h2>
<pre><code class="language-typescript">import { webSocket } from '@kit.NetworkKit';
import { BusinessError } from '@kit.BasicServicesKit';

let defaultIpAddress = "ws://";
let ws = webSocket.createWebSocket();
ws.on('open', (err: BusinessError, value: Object) =&gt; {
  console.log("on open, status:" + JSON.stringify(value));
  // 当收到on('open')事件时，可以通过send()方法与服务器进行通信
  ws.send("Hello, server!", (err: BusinessError, value: boolean) =&gt; {
    if (!err) {
      console.log("Message send successfully");
    } else {
      console.log("Failed to send the message. Err:" + JSON.stringify(err));
    }
  });
});
ws.on('message', (err: BusinessError, value: string | ArrayBuffer) =&gt; {
  console.log("on message, message:" + value);
  // 当收到服务器的`bye`消息时（此消息字段仅为示意，具体字段需要与服务器协商），主动断开连接
  if (value === 'bye') {
    ws.close((err: BusinessError, value: boolean) =&gt; {
      if (!err) {
        console.log("Connection closed successfully");
      } else {
        console.log("Failed to close the connection. Err: " + JSON.stringify(err));
      }
    });
  }
});
ws.on('close', (err: BusinessError, value: webSocket.CloseResult) =&gt; {
  console.log("on close, code is " + value.code + ", reason is " + value.reason);
});
ws.on('error', (err: BusinessError) =&gt; {
  console.log("on error, error:" + JSON.stringify(err));
});
ws.connect(defaultIpAddress, (err: BusinessError, value: boolean) =&gt; {
  if (!err) {
    console.log("Connected successfully");
  } else {
    console.log("Connection failed. Err:" + JSON.stringify(err));
  }
});
</code></pre>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.24585447572569444" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-13 12:24">2025-03-13 12:23</span>&nbsp;
<a href="https://www.cnblogs.com/zhaloe">龙儿筝</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18769663" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18769663);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18769663', targetLink: 'https://www.cnblogs.com/zhaloe/p/18769663', title: '鸿蒙WebSocket的使用竟如此简单' })">举报</a>
</div>
        