
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/baiyunpiaopiao/p/18628502" title="发布于 2024-12-24 19:21">
    <span role="heading" aria-level="2">C#中使用gRPC（一）</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<table><tbody><tr><td bgcolor="#E0E0E0">
<p>在使用gRpc之前，需要先了解一点基础知识。<br>
<font size="6">1. Protocol Buffers </font>具体参考<a href="" rel="noopener nofollow">https://protobuf.dev/</a> :<br>
简答来说就是Google开发的一种数据描述的格式。和具体的开发语言无关，根据这个东西，你能定义你方法的参数，返回值类型。<br>
首先 创建一个 xxx.proto 文件 .例如 sayHello.proto</p>
<pre><code>syntax = "proto3"; //必须是第一行 制定使用哪个版本的协议，可以选择 proto2/proto3
//定义一个 消息 ，相当于C#里面的一个类  至于这个类怎么用，一会说
message SearchRequest {
  string query = 1;
  int32 page_number = 2;
  int32 results_per_page = 3;
}
</code></pre>
<p>SearchRequest 相当于C#类名字。string ,int32 ,int32  是proto里面的数据类型。query ，page_number ,results_per_page 是类的属性名，后面又给了数字，这个是proto的语法要求。在给字段编号时遵循以下规则</p>
<ol>
<li>你必须给你的字段一个1-536,870,911的编号</li>
<li>每个字段的编号必须唯一</li>
<li>19,000 to 19,999是 Protocol Buffers 预留的，你要是用了 编译器就报警。(最好别用免得有麻烦)</li>
<li>不能使用保留字段名字和保留字段编号</li>
</ol>
<p>举例子：</p>
<pre><code>message SearchRequest {
  reserved    15, 9 to 11;
  reserved "foo", "bar";
  string query = 1;
  int32 page_number = 2;
  int32 results_per_page = 3;
   string foo =4;
   string bar=10;
} 
//在这个消息里面 定义了2个保留字段 分别是 foo 和 bar 以及15 ，9,10,11这四个保留的编号，如果你在消息中用了6个中的一个，就会报错。
</code></pre>
<p><strong>文档中有一段写了 字段可以是单数或者复数。</strong></p>
<p><font color="#008000">单数就用optional修饰和C#中普通的字段没区别 </font>如： <strong>string query = 1和optional string query = 1</strong></p>
<p><font color="#008000">复数就用repeated修饰，C#对于repeated修饰的字段会生成一个RepeatedField<t>的泛型字段，相当于是list集合 </t></font>如： <strong>repeated string emails= 4; 他最后生成C#类，就简单看成<code>list&lt;string&gt;</code></strong></p>
<h4>定义枚举</h4>
在.proto文件中是可以定义枚举的 ,如：
<pre><code>enum Corpus {
  CORPUS_UNSPECIFIED = 0;
  CORPUS_UNIVERSAL = 1;
  CORPUS_WEB = 2;
  CORPUS_IMAGES = 3;
  CORPUS_LOCAL = 4;
  CORPUS_NEWS = 5;
  CORPUS_PRODUCTS = 6;
  CORPUS_VIDEO = 7;
}

message SearchRequest {
  string query = 1;
  int32 page_number = 2;
  int32 results_per_page = 3;
  Corpus corpus = 4;
}
//与C#不同，在.proto（proto3）文件中定义枚举，第一个枚举值必须是0，而且名字是必须是 枚举类型 ENUM_TYPE_NAME_UNSPECIFIED 或者ENUM_TYPE_NAME_UNKNOWN 。（举例，你的枚举叫Colors 那么第一个值就是Colors_UNSPECIFIED=0 ）
//这里我自己测试出来，如果NUM_TYPE_NAME_UNSPECIFIED 或者ENUM_TYPE_NAME_UNKNOWN不写，直接把 red=0 ,也不报错。但是如果你传值，那么默认值就是0 也就是red
</code></pre>
<h3> package </h3>
<pre><code>syntax = "proto3";

option csharp_namespace = "gRPCDemo.demo";

package requestUser;//pacgage 名字

message UserItem{

    string name = 1;
    int32 age = 2;
    string address = 3;
    repeated string phones = 4 ;
  
}
//这个文件我保存在Protos/userPackage.proto。然后别的 地方可以引用他
</code></pre>
<pre><code>syntax = "proto3";

option csharp_namespace = "gRPCDemo.demo";

import  "Protos/userPackage.proto"; //导入文件路径
package greet;


// 使用的是 requestUser这个包下面的 userItem. requestUser包对应的物理文件是Protos/userPackage.proto
message HelloRequest {
  requestUser.UserItem user = 1;
}

// The response message containing the greetings.
message HelloReply {
  string message = 1;
}
</code></pre>
<h1>重点来了。定义服务Defining Services </h1>
如果你想让别人调用你的服务（就是别人调用你的方法），就要定义服务
<pre><code>service SearchService {
  rpc Search(SearchRequest) returns (SearchResponse);//这里就是我们对外暴露了一个叫做search的方法，这个方法参数是SearchRequest类型，返回值是SearchResponse类型
}

service Greeter {
 
  rpc SayHello (HelloRequest) returns (HelloReply);// 再比如我们定义一个sayhello的方法，参数是HelloRequest返回值是HelloReply
  //你要是调用无参的方法 参考这个文档：https://stackoverflow.com/questions/31768665/can-i-define-a-grpc-call-with-a-null-request-or-response/31772973
}
</code></pre>
<h4>有这些基础后，我们下一节来测试一下。</h4>
<p><a href="https://www.cnblogs.com/baiyunpiaopiao/p/18628560" target="_blank">https://www.cnblogs.com/baiyunpiaopiao/p/18628560</a></p>
</td></tr></tbody></table>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="2.2906136721458332" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2024-12-24 19:25">2024-12-24 19:21</span>&nbsp;
<a href="https://www.cnblogs.com/baiyunpiaopiao">愤怒的小辣椒</a>&nbsp;
阅读(<span id="post_view_count">44</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18628502" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18628502);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18628502', targetLink: 'https://www.cnblogs.com/baiyunpiaopiao/p/18628502', title: 'C#中使用gRPC（一）' })">举报</a>
</div>
        