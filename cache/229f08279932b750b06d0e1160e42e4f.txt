
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/moegarn/p/18730512" title="发布于 2025-02-22 06:22">
    <span role="heading" aria-level="2">区块链模型原理入门学习1——简易模型</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        区块链模型原理入门学习1——简易模型
    </div>
<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p><span style="font-size: 18px">&nbsp; <span style="color: rgba(0, 0, 0, 1)">最近</span>抽空学习一下区块链的设计原理，正在搭建一个非常简易的模型，上生产的模型肯定复杂的多，不过学习还是由简入难，逐步深入才行，一口吃不成胖子。</span></p>
<p><span style="font-size: 18px">&nbsp; 我使用的是C#编写的。</span></p>
<p>&nbsp;</p>
<p><span style="font-size: 18px">&nbsp; 区块链的特点：</span></p>
<p><span style="font-size: 18px">　　1.分布式记账，去中心化。</span></p>
<p><span style="font-size: 18px">　　2.挖矿是按照平台规则通过大量计算对于平台算式反向求解的过程。</span></p>
<p><img src="https://img2024.cnblogs.com/blog/1695941/202502/1695941-20250222054737121-385445510.png" alt="" width="468" height="258" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p><span style="font-size: 18px">&nbsp; 当前，个人对于区块链的认识：区块链是一条链Chain,这条链上有若干个数据块Block，每个Block里面都封装了三个部分：上一个块的哈希值PreHash、数据Data、当前块的哈希值ThisHash。</span></p>
<p>&nbsp;</p>
<p><span style="font-size: 18px">&nbsp; 计算哈希值使用Hash256计算，其特点：</span></p>
<p><span style="font-size: 18px">　　1.不同长度的数据经过计算可得定长的字符串。</span></p>
<p><span style="font-size: 18px">　　2.相同数据可以获得相同的Hash值，修改一个一个字符，Hash将大不相同，毫无规律可言，保证暂时的安全性（严谨地说）</span></p>
<p>&nbsp;</p>
<p><span style="font-size: 18px">&nbsp; 测试代码：</span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 128, 1)">  1</span> <span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System;
</span><span style="color: rgba(0, 128, 128, 1)">  2</span> <span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Collections.Generic;
</span><span style="color: rgba(0, 128, 128, 1)">  3</span> <span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Security.Cryptography;
</span><span style="color: rgba(0, 128, 128, 1)">  4</span> <span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Text;
</span><span style="color: rgba(0, 128, 128, 1)">  5</span> 
<span style="color: rgba(0, 128, 128, 1)">  6</span> <span style="color: rgba(0, 0, 255, 1)">namespace</span><span style="color: rgba(0, 0, 0, 1)"> TestPrj
</span><span style="color: rgba(0, 128, 128, 1)">  7</span> <span style="color: rgba(0, 0, 0, 1)">{
</span><span style="color: rgba(0, 128, 128, 1)">  8</span>     <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> Program
</span><span style="color: rgba(0, 128, 128, 1)">  9</span> <span style="color: rgba(0, 0, 0, 1)">    {
</span><span style="color: rgba(0, 128, 128, 1)"> 10</span>         <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">void</span> Main(<span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)">[] args)
</span><span style="color: rgba(0, 128, 128, 1)"> 11</span> <span style="color: rgba(0, 0, 0, 1)">        {
</span><span style="color: rgba(0, 128, 128, 1)"> 12</span>             Chain chain = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> Chain();
</span><span style="color: rgba(0, 128, 128, 1)"> 13</span> 
<span style="color: rgba(0, 128, 128, 1)"> 14</span>             Block block1 = <span style="color: rgba(0, 0, 255, 1)">new</span> Block(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">转账10元</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)"> 15</span> <span style="color: rgba(0, 0, 0, 1)">            chain.AddNewBlock(block1);
</span><span style="color: rgba(0, 128, 128, 1)"> 16</span>             Block block2 = <span style="color: rgba(0, 0, 255, 1)">new</span> Block(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">转账30元</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)"> 17</span> <span style="color: rgba(0, 0, 0, 1)">            chain.AddNewBlock(block2);
</span><span style="color: rgba(0, 128, 128, 1)"> 18</span> 
<span style="color: rgba(0, 128, 128, 1)"> 19</span> 
<span style="color: rgba(0, 128, 128, 1)"> 20</span>             <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">查看当前数据链总共数据快数</span>
<span style="color: rgba(0, 128, 128, 1)"> 21</span> <span style="color: rgba(0, 0, 0, 1)">            chain.ViewBlockCount();
</span><span style="color: rgba(0, 128, 128, 1)"> 22</span> 
<span style="color: rgba(0, 128, 128, 1)"> 23</span>             <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">查看所有数据链</span>
<span style="color: rgba(0, 128, 128, 1)"> 24</span> <span style="color: rgba(0, 0, 0, 1)">            chain.ViewAllBlocks();
</span><span style="color: rgba(0, 128, 128, 1)"> 25</span> 
<span style="color: rgba(0, 128, 128, 1)"> 26</span>             <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">验证数据链</span>
<span style="color: rgba(0, 128, 128, 1)"> 27</span> <span style="color: rgba(0, 0, 0, 1)">            Console.WriteLine(chain.Validate());
</span><span style="color: rgba(0, 128, 128, 1)"> 28</span> 
<span style="color: rgba(0, 128, 128, 1)"> 29</span>             <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">模拟篡改数据</span>
<span style="color: rgba(0, 128, 128, 1)"> 30</span>             chain.Blocks[<span style="color: rgba(128, 0, 128, 1)">1</span>].Prehash = <span style="color: rgba(128, 0, 0, 1)">""</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)"> 31</span> 
<span style="color: rgba(0, 128, 128, 1)"> 32</span>             <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">验证数据链</span>
<span style="color: rgba(0, 128, 128, 1)"> 33</span> <span style="color: rgba(0, 0, 0, 1)">            Console.WriteLine(chain.Validate());
</span><span style="color: rgba(0, 128, 128, 1)"> 34</span> <span style="color: rgba(0, 0, 0, 1)">        }
</span><span style="color: rgba(0, 128, 128, 1)"> 35</span> <span style="color: rgba(0, 0, 0, 1)">    }
</span><span style="color: rgba(0, 128, 128, 1)"> 36</span> <span style="color: rgba(0, 0, 0, 1)">}
</span><span style="color: rgba(0, 128, 128, 1)"> 37</span> 
<span style="color: rgba(0, 128, 128, 1)"> 38</span> <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">数据块</span>
<span style="color: rgba(0, 128, 128, 1)"> 39</span> <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> Block
</span><span style="color: rgba(0, 128, 128, 1)"> 40</span> <span style="color: rgba(0, 0, 0, 1)">{
</span><span style="color: rgba(0, 128, 128, 1)"> 41</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">数据</span>
<span style="color: rgba(0, 128, 128, 1)"> 42</span>     <span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)"> data;
</span><span style="color: rgba(0, 128, 128, 1)"> 43</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">前一个Block的hash</span>
<span style="color: rgba(0, 128, 128, 1)"> 44</span>     <span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)"> prehash;
</span><span style="color: rgba(0, 128, 128, 1)"> 45</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">当前Block的hash</span>
<span style="color: rgba(0, 128, 128, 1)"> 46</span>     <span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)"> curhash;
</span><span style="color: rgba(0, 128, 128, 1)"> 47</span>     <span style="color: rgba(0, 0, 255, 1)">public</span> Block(<span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)"> data)
</span><span style="color: rgba(0, 128, 128, 1)"> 48</span> <span style="color: rgba(0, 0, 0, 1)">    {
</span><span style="color: rgba(0, 128, 128, 1)"> 49</span>         <span style="color: rgba(0, 0, 255, 1)">this</span>.prehash = <span style="color: rgba(128, 0, 0, 1)">""</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)"> 50</span>         <span style="color: rgba(0, 0, 255, 1)">this</span>.data =<span style="color: rgba(0, 0, 0, 1)"> data;
</span><span style="color: rgba(0, 128, 128, 1)"> 51</span>         <span style="color: rgba(0, 0, 255, 1)">this</span>.curhash = <span style="color: rgba(128, 0, 0, 1)">""</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)"> 52</span> <span style="color: rgba(0, 0, 0, 1)">    }
</span><span style="color: rgba(0, 128, 128, 1)"> 53</span> 
<span style="color: rgba(0, 128, 128, 1)"> 54</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">注意:这里为了模拟篡改数据专门封装的字段</span>
<span style="color: rgba(0, 128, 128, 1)"> 55</span>     <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">string</span> Data { <span style="color: rgba(0, 0, 255, 1)">get</span> =&gt; data; <span style="color: rgba(0, 0, 255, 1)">set</span> =&gt; data =<span style="color: rgba(0, 0, 0, 1)"> value; }
</span><span style="color: rgba(0, 128, 128, 1)"> 56</span>     <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">string</span> Prehash { <span style="color: rgba(0, 0, 255, 1)">get</span> =&gt; prehash; <span style="color: rgba(0, 0, 255, 1)">set</span> =&gt; prehash =<span style="color: rgba(0, 0, 0, 1)"> value; }
</span><span style="color: rgba(0, 128, 128, 1)"> 57</span>     <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">string</span> Curhash { <span style="color: rgba(0, 0, 255, 1)">get</span> =&gt; curhash; <span style="color: rgba(0, 0, 255, 1)">set</span> =&gt; curhash =<span style="color: rgba(0, 0, 0, 1)"> value; }
</span><span style="color: rgba(0, 128, 128, 1)"> 58</span> 
<span style="color: rgba(0, 128, 128, 1)"> 59</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">计算当前Block的Hash</span>
<span style="color: rgba(0, 128, 128, 1)"> 60</span>     <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">string</span> ComputeHash(<span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)"> prehash)
</span><span style="color: rgba(0, 128, 128, 1)"> 61</span> <span style="color: rgba(0, 0, 0, 1)">    {
</span><span style="color: rgba(0, 128, 128, 1)"> 62</span>         <span style="color: rgba(0, 0, 255, 1)">this</span>.prehash =<span style="color: rgba(0, 0, 0, 1)"> prehash;
</span><span style="color: rgba(0, 128, 128, 1)"> 63</span>         <span style="color: rgba(0, 0, 255, 1)">return</span> SHA256(<span style="color: rgba(0, 0, 255, 1)">this</span>.data + <span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">.prehash);
</span><span style="color: rgba(0, 128, 128, 1)"> 64</span> <span style="color: rgba(0, 0, 0, 1)">    }
</span><span style="color: rgba(0, 128, 128, 1)"> 65</span> 
<span style="color: rgba(0, 128, 128, 1)"> 66</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">Hash256计算</span>
<span style="color: rgba(0, 128, 128, 1)"> 67</span>     <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">string</span> SHA256(<span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)"> str)
</span><span style="color: rgba(0, 128, 128, 1)"> 68</span> <span style="color: rgba(0, 0, 0, 1)">    {
</span><span style="color: rgba(0, 128, 128, 1)"> 69</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">如果str有中文，不同Encoding的sha是不同的！！</span>
<span style="color: rgba(0, 128, 128, 1)"> 70</span>         <span style="color: rgba(0, 0, 255, 1)">byte</span>[] SHA256Data =<span style="color: rgba(0, 0, 0, 1)"> Encoding.UTF8.GetBytes(str);
</span><span style="color: rgba(0, 128, 128, 1)"> 71</span> 
<span style="color: rgba(0, 128, 128, 1)"> 72</span>         SHA256Managed Sha256 = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> SHA256Managed();
</span><span style="color: rgba(0, 128, 128, 1)"> 73</span>         <span style="color: rgba(0, 0, 255, 1)">byte</span>[] by =<span style="color: rgba(0, 0, 0, 1)"> Sha256.ComputeHash(SHA256Data);
</span><span style="color: rgba(0, 128, 128, 1)"> 74</span> 
<span style="color: rgba(0, 128, 128, 1)"> 75</span>         <span style="color: rgba(0, 0, 255, 1)">return</span> BitConverter.ToString(by).Replace(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">-</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">""</span><span style="color: rgba(0, 0, 0, 1)">).ToLower();
</span><span style="color: rgba(0, 128, 128, 1)"> 76</span> <span style="color: rgba(0, 0, 0, 1)">    }
</span><span style="color: rgba(0, 128, 128, 1)"> 77</span> 
<span style="color: rgba(0, 128, 128, 1)"> 78</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">显示Block数据</span>
<span style="color: rgba(0, 128, 128, 1)"> 79</span>     <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> ViewInfo()
</span><span style="color: rgba(0, 128, 128, 1)"> 80</span> <span style="color: rgba(0, 0, 0, 1)">    {
</span><span style="color: rgba(0, 128, 128, 1)"> 81</span>         Console.WriteLine(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">====</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)"> 82</span>         Console.WriteLine(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">[prehash]-&gt;</span><span style="color: rgba(128, 0, 0, 1)">"</span> + <span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">.prehash);
</span><span style="color: rgba(0, 128, 128, 1)"> 83</span>         Console.WriteLine(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">[data]-&gt;</span><span style="color: rgba(128, 0, 0, 1)">"</span> + <span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">.data);
</span><span style="color: rgba(0, 128, 128, 1)"> 84</span>         Console.WriteLine(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">[hash]-&gt;</span><span style="color: rgba(128, 0, 0, 1)">"</span> + <span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">.curhash);
</span><span style="color: rgba(0, 128, 128, 1)"> 85</span> <span style="color: rgba(0, 0, 0, 1)">    }
</span><span style="color: rgba(0, 128, 128, 1)"> 86</span> <span style="color: rgba(0, 0, 0, 1)">}
</span><span style="color: rgba(0, 128, 128, 1)"> 87</span> 
<span style="color: rgba(0, 128, 128, 1)"> 88</span> <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> Chain
</span><span style="color: rgba(0, 128, 128, 1)"> 89</span> <span style="color: rgba(0, 0, 0, 1)">{
</span><span style="color: rgba(0, 128, 128, 1)"> 90</span>     <span style="color: rgba(0, 0, 255, 1)">private</span> List&lt;Block&gt;<span style="color: rgba(0, 0, 0, 1)"> blocks;
</span><span style="color: rgba(0, 128, 128, 1)"> 91</span> 
<span style="color: rgba(0, 128, 128, 1)"> 92</span>     <span style="color: rgba(0, 0, 255, 1)">public</span> List&lt;Block&gt; Blocks { <span style="color: rgba(0, 0, 255, 1)">get</span> =&gt; blocks; <span style="color: rgba(0, 0, 255, 1)">set</span> =&gt; blocks =<span style="color: rgba(0, 0, 0, 1)"> value; }
</span><span style="color: rgba(0, 128, 128, 1)"> 93</span> 
<span style="color: rgba(0, 128, 128, 1)"> 94</span>     <span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> Chain()
</span><span style="color: rgba(0, 128, 128, 1)"> 95</span> <span style="color: rgba(0, 0, 0, 1)">    {
</span><span style="color: rgba(0, 128, 128, 1)"> 96</span>         <span style="color: rgba(0, 0, 255, 1)">this</span>.blocks = <span style="color: rgba(0, 0, 255, 1)">new</span> List&lt;Block&gt;<span style="color: rgba(0, 0, 0, 1)">();
</span><span style="color: rgba(0, 128, 128, 1)"> 97</span>         Block genesisBloc = <span style="color: rgba(0, 0, 255, 1)">new</span> Block(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">源数据块</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)"> 98</span>         genesisBloc.Curhash = genesisBloc.ComputeHash(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">genesis</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)"> 99</span> <span style="color: rgba(0, 0, 0, 1)">        AddNewBlock(genesisBloc);
</span><span style="color: rgba(0, 128, 128, 1)">100</span> <span style="color: rgba(0, 0, 0, 1)">    }
</span><span style="color: rgba(0, 128, 128, 1)">101</span> 
<span style="color: rgba(0, 128, 128, 1)">102</span>     <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> ViewBlockCount()
</span><span style="color: rgba(0, 128, 128, 1)">103</span> <span style="color: rgba(0, 0, 0, 1)">    {
</span><span style="color: rgba(0, 128, 128, 1)">104</span>         Console.WriteLine(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">当前数据块总数-&gt;</span><span style="color: rgba(128, 0, 0, 1)">"</span> + <span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">.blocks.Count);
</span><span style="color: rgba(0, 128, 128, 1)">105</span> <span style="color: rgba(0, 0, 0, 1)">    }
</span><span style="color: rgba(0, 128, 128, 1)">106</span> 
<span style="color: rgba(0, 128, 128, 1)">107</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">添加Block</span>
<span style="color: rgba(0, 128, 128, 1)">108</span>     <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> AddNewBlock(Block newblock)
</span><span style="color: rgba(0, 128, 128, 1)">109</span> <span style="color: rgba(0, 0, 0, 1)">    {
</span><span style="color: rgba(0, 128, 128, 1)">110</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">空链的情况</span>
<span style="color: rgba(0, 128, 128, 1)">111</span>         <span style="color: rgba(0, 0, 255, 1)">if</span> (<span style="color: rgba(0, 0, 255, 1)">this</span>.blocks.Count == <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 128, 128, 1)">112</span> <span style="color: rgba(0, 0, 0, 1)">        {
</span><span style="color: rgba(0, 128, 128, 1)">113</span>             <span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">.blocks.Add(newblock);
</span><span style="color: rgba(0, 128, 128, 1)">114</span>             newblock.Curhash =<span style="color: rgba(0, 0, 0, 1)"> newblock.ComputeHash(newblock.Prehash);
</span><span style="color: rgba(0, 128, 128, 1)">115</span>             <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">116</span> <span style="color: rgba(0, 0, 0, 1)">        }
</span><span style="color: rgba(0, 128, 128, 1)">117</span>         <span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">链接新Block</span><span style="color: rgba(0, 128, 0, 1)">*/</span>
<span style="color: rgba(0, 128, 128, 1)">118</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">新的Block的prehash是上一个block的curhash</span>
<span style="color: rgba(0, 128, 128, 1)">119</span>         newblock.Prehash = <span style="color: rgba(0, 0, 255, 1)">this</span>.blocks[<span style="color: rgba(0, 0, 255, 1)">this</span>.blocks.Count - <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">].Curhash;
</span><span style="color: rgba(0, 128, 128, 1)">120</span>         newblock.Curhash =<span style="color: rgba(0, 0, 0, 1)"> newblock.ComputeHash(newblock.Prehash);
</span><span style="color: rgba(0, 128, 128, 1)">121</span>         <span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">添加新Block</span><span style="color: rgba(0, 128, 0, 1)">*/</span>
<span style="color: rgba(0, 128, 128, 1)">122</span>         <span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">.blocks.Add(newblock);
</span><span style="color: rgba(0, 128, 128, 1)">123</span> <span style="color: rgba(0, 0, 0, 1)">    }
</span><span style="color: rgba(0, 128, 128, 1)">124</span> 
<span style="color: rgba(0, 128, 128, 1)">125</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">查看所有Block</span>
<span style="color: rgba(0, 128, 128, 1)">126</span>     <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> ViewAllBlocks()
</span><span style="color: rgba(0, 128, 128, 1)">127</span> <span style="color: rgba(0, 0, 0, 1)">    {
</span><span style="color: rgba(0, 128, 128, 1)">128</span>         <span style="color: rgba(0, 0, 255, 1)">foreach</span> (<span style="color: rgba(0, 0, 255, 1)">var</span> item <span style="color: rgba(0, 0, 255, 1)">in</span> <span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">.blocks)
</span><span style="color: rgba(0, 128, 128, 1)">129</span> <span style="color: rgba(0, 0, 0, 1)">        {
</span><span style="color: rgba(0, 128, 128, 1)">130</span> <span style="color: rgba(0, 0, 0, 1)">            item.ViewInfo();
</span><span style="color: rgba(0, 128, 128, 1)">131</span> <span style="color: rgba(0, 0, 0, 1)">        }
</span><span style="color: rgba(0, 128, 128, 1)">132</span> <span style="color: rgba(0, 0, 0, 1)">    }
</span><span style="color: rgba(0, 128, 128, 1)">133</span> 
<span style="color: rgba(0, 128, 128, 1)">134</span>     <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">验证Chain</span>
<span style="color: rgba(0, 128, 128, 1)">135</span>     <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">bool</span><span style="color: rgba(0, 0, 0, 1)"> Validate()
</span><span style="color: rgba(0, 128, 128, 1)">136</span> <span style="color: rgba(0, 0, 0, 1)">    {
</span><span style="color: rgba(0, 128, 128, 1)">137</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">无任何数据块的情况</span>
<span style="color: rgba(0, 128, 128, 1)">138</span>         <span style="color: rgba(0, 0, 255, 1)">if</span> (<span style="color: rgba(0, 0, 255, 1)">this</span>.blocks.Count == <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 128, 128, 1)">139</span> <span style="color: rgba(0, 0, 0, 1)">        {
</span><span style="color: rgba(0, 128, 128, 1)">140</span>             Console.WriteLine(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">[数据链异常]-&gt;数据链为空！</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)">141</span>             <span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">142</span> <span style="color: rgba(0, 0, 0, 1)">        }
</span><span style="color: rgba(0, 128, 128, 1)">143</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">只有源数据块的情况</span>
<span style="color: rgba(0, 128, 128, 1)">144</span>         <span style="color: rgba(0, 0, 255, 1)">else</span> <span style="color: rgba(0, 0, 255, 1)">if</span> (<span style="color: rgba(0, 0, 255, 1)">this</span>.blocks.Count == <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 128, 128, 1)">145</span> <span style="color: rgba(0, 0, 0, 1)">        {
</span><span style="color: rgba(0, 128, 128, 1)">146</span>             Console.WriteLine(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">验证完毕！</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)">147</span>             <span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">148</span> <span style="color: rgba(0, 0, 0, 1)">        }
</span><span style="color: rgba(0, 128, 128, 1)">149</span> 
<span style="color: rgba(0, 128, 128, 1)">150</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">遍历校验标志</span>
<span style="color: rgba(0, 128, 128, 1)">151</span>         <span style="color: rgba(0, 0, 255, 1)">bool</span> checkBlockSign = <span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">152</span> 
<span style="color: rgba(0, 128, 128, 1)">153</span>         <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">遍历检查数据块，因为不检查源数据块，下标从1开始</span>
<span style="color: rgba(0, 128, 128, 1)">154</span>         <span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(0, 0, 255, 1)">int</span> checkBlockIndex = <span style="color: rgba(128, 0, 128, 1)">1</span>; checkBlockIndex &lt; <span style="color: rgba(0, 0, 255, 1)">this</span>.blocks.Count; checkBlockIndex++<span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 128, 128, 1)">155</span> <span style="color: rgba(0, 0, 0, 1)">        {
</span><span style="color: rgba(0, 128, 128, 1)">156</span>             <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">检验curhash</span>
<span style="color: rgba(0, 128, 128, 1)">157</span>             <span style="color: rgba(0, 0, 255, 1)">var</span> checkBlock = <span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">.blocks[checkBlockIndex];
</span><span style="color: rgba(0, 128, 128, 1)">158</span>             <span style="color: rgba(0, 0, 255, 1)">if</span> (checkBlock.Curhash !=<span style="color: rgba(0, 0, 0, 1)"> checkBlock.ComputeHash(checkBlock.Prehash))
</span><span style="color: rgba(0, 128, 128, 1)">159</span> <span style="color: rgba(0, 0, 0, 1)">            {
</span><span style="color: rgba(0, 128, 128, 1)">160</span>                 Console.WriteLine(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">[数据被篡改]-&gt;</span><span style="color: rgba(128, 0, 0, 1)">"</span> +<span style="color: rgba(0, 0, 0, 1)"> checkBlockIndex);
</span><span style="color: rgba(0, 128, 128, 1)">161</span>                 checkBlockSign = <span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">162</span>                 <span style="color: rgba(0, 0, 255, 1)">break</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 128, 128, 1)">163</span> <span style="color: rgba(0, 0, 0, 1)">            }
</span><span style="color: rgba(0, 128, 128, 1)">164</span>             <span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">            //验证prehash
</span><span style="color: rgba(0, 128, 128, 1)">165</span> <span style="color: rgba(0, 128, 0, 1)">                        if (checkBlock.Prehash != this.blocks[checkBlockIndex - 1].Curhash)
</span><span style="color: rgba(0, 128, 128, 1)">166</span> <span style="color: rgba(0, 128, 0, 1)">                        {
</span><span style="color: rgba(0, 128, 128, 1)">167</span> <span style="color: rgba(0, 128, 0, 1)">                            Console.WriteLine("[数据链断裂]-&gt;" + checkBlockIndex);
</span><span style="color: rgba(0, 128, 128, 1)">168</span> <span style="color: rgba(0, 128, 0, 1)">                            checkBlockSign = false;
</span><span style="color: rgba(0, 128, 128, 1)">169</span> <span style="color: rgba(0, 128, 0, 1)">                            break;
</span><span style="color: rgba(0, 128, 128, 1)">170</span> <span style="color: rgba(0, 128, 0, 1)">                        }</span><span style="color: rgba(0, 128, 0, 1)">*/</span>
<span style="color: rgba(0, 128, 128, 1)">171</span> <span style="color: rgba(0, 0, 0, 1)">        }
</span><span style="color: rgba(0, 128, 128, 1)">172</span>         Console.WriteLine(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">验证完毕！</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 128, 1)">173</span>         <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> checkBlockSign;
</span><span style="color: rgba(0, 128, 128, 1)">174</span> <span style="color: rgba(0, 0, 0, 1)">    }
</span><span style="color: rgba(0, 128, 128, 1)">175</span> }</pre>
</div>
<p>&nbsp;</p>
<p><span style="font-size: 18px">&nbsp; 代码运行：</span></p>
<p><img src="https://img2024.cnblogs.com/blog/1695941/202502/1695941-20250222061615865-1328025985.png" alt="" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p><span style="font-size: 18px">&nbsp; 到这里，区块链的基础构建完成了。</span></p>
<p><span style="font-size: 18px">&nbsp; 因为当前模型的数据结构构建真的不复杂，所以省略了代码构建的分析过程。</span></p>
<p><span style="font-size: 18px; color: rgba(204, 255, 255, 1)">【学习是人类进步的阶梯】</span></p>
</div>
<div id="MySignature" role="contentinfo">
    【敬畏能量  敬畏自然】
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="4.186866775128472" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-23 23:47">2025-02-22 06:22</span>&nbsp;
<a href="https://www.cnblogs.com/moegarn">MOEGARN游戏工作室</a>&nbsp;
阅读(<span id="post_view_count">26</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18730512" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18730512);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18730512', targetLink: 'https://www.cnblogs.com/moegarn/p/18730512', title: '区块链模型原理入门学习1——简易模型' })">举报</a>
</div>
        