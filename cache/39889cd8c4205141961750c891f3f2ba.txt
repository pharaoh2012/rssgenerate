
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/powertoolsteam/p/18924171" title="发布于 2025-06-12 10:16">
    <span role="heading" aria-level="2">C# 与低代码平台的融合：以活字格为例的 Web API 开发实践</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="引言">引言</h2>
<p>在当今软件开发领域，低代码平台凭借其高效、便捷的特性逐渐成为开发的主流趋势。而 C# 作为一种功能强大的编程语言，在服务端开发中有着广泛的应用。将 C# 与低代码平台相结合，能够充分发挥两者的优势，快速开发出高质量的应用程序。本文将以葡萄城公司的企业级低代码平台 —— 活字格为例，详细介绍如何使用 C# 进行接口扩展，创建服务端 Web API。</p>
<h2 id="正文">正文</h2>
<h3 id="c-web-api-概述">C# Web API 概述</h3>
<p>C# Web API 是基于 .NET 平台（包括 .NET Framework 和 .NET Core）构建 HTTP 服务的框架，用于创建 RESTful Web 服务。REST 是一种软件架构风格，利用 HTTP 协议的特性（如 GET、POST、PUT、DELETE 等方法）来操作资源。在 C# 中，<a href="https://asp.net/" target="_blank" rel="noopener nofollow">ASP.NET</a> Web API 提供了模式和工具集，使开发者能方便地设计和实现对外暴露的 API 接口，供各种客户端应用程序（如 Web 浏览器、移动应用、桌面应用或其他服务器端应用）通过 HTTP 请求调用，以获取或修改数据。</p>
<p>使用 <a href="https://asp.net/" target="_blank" rel="noopener nofollow">ASP.NET</a> Web API 具有诸多特点和优势：</p>
<ol>
<li><strong>模块化与分离关注点</strong>：控制器负责处理 HTTP 请求，模型代表业务对象，视图模型可适配不同客户端的数据需求，路由机制将 URL 映射到特定操作。</li>
<li><strong>RESTful 架构支持</strong>：鼓励遵循 REST 设计原则，提供资源导向的服务，允许客户端通过标准 HTTP 方法访问资源。</li>
<li><strong>跨平台兼容性</strong>：在 .NET Core 上，Web API 可运行于 Windows、Linux 和 macOS 等多种操作系统。</li>
<li><strong>内容协商与格式化器</strong>：自动处理不同客户端要求的数据格式，如 JSON、XML 或其他自定义格式。</li>
<li><strong>安全性与认证授权</strong>：内置对 OAuth、JWT 等多种安全策略的支持，实施灵活且安全的 API 访问控制。</li>
<li><strong>测试友好</strong>：基于 HTTP，容易进行单元测试和集成测试，可配合 Postman、Swagger 等工具进行接口文档生成和测试。</li>
<li><strong>扩展性</strong>：具有高度可扩展性，可通过中间件、过滤器等增强功能，适应复杂的企业级应用需求。</li>
</ol>
<h3 id="活字格中使用-c-创建服务端-web-api-的步骤">活字格中使用 C# 创建服务端 Web API 的步骤</h3>
<h4 id="环境准备">环境准备</h4>
<ul>
<li><strong>编译器</strong>：可选择 Visual Studio、Visual Studio Code、IntelliJ IDEA Rider 等。</li>
<li><strong>依赖环境</strong>：系统需安装 Dot Net 6.0 运行环境。</li>
<li><strong>使用语言</strong>：C# 或 <a href="https://vb.net/" target="_blank" rel="noopener nofollow">VB.Net</a>。</li>
<li><strong>其他</strong>：具备 C# 基础知识及编程能力。</li>
</ul>
<h4 id="创建服务端-web-api">创建服务端 Web API</h4>
<ol>
<li><strong>创建类库项目</strong>：打开编译器（以 IntelliJ IDEA Rider 为例），选择 Class Library (类库)，Framework 选择 net6.0，点击 “Create” 创建类库项目。</li>
<li><strong>添加活字格类库引用</strong>：在新建项目中选择 “Dependencies”，右键选择 “Reference” 添加引用，从活字格的安装路径下引用 “GrapeCity.Forguncy.ServerApi.dll” 文件。若安装目录为默认目录，文件路径为 “C:\Program Files\ForguncyServer\Website\bin”；若为自定义路径，则为 “自定义路径 \ForguncyServer\Website\bin”。</li>
<li><strong>编辑 csproj 文件</strong>：右键项目，选择 “Edit”——“Edit xxx.csproj”，在打开的文件中添加如下代码并保存：</li>
</ol>
<p>xml</p>
<pre><code class="language-xml">&lt;ItemGroup&gt;
    &lt;FrameworkReference Include="Microsoft.AspNetCore.App" /&gt;
&lt;/ItemGroup&gt;
</code></pre>
<h4 id="编写服务端-web-api">编写服务端 Web API</h4>
<p>为接收标准化 JSON 数据，示例代码如下：</p>
<p>csharp</p>
<pre><code class="language-csharp">using System.Text;
using System.Text.Json;
using GrapeCity.Forguncy.ServerApi;

namespace MyApiTest;

public class RequestBodyHandler : ForguncyApi
{
    [Post]
    public async Task ReceiveApiRequest()
    {
        var request = Context.Request;
        var serverCommandName = request.Query["serverCommandName"]; // 从 URL 中取参数
        if (request.ContentType != null &amp;&amp; request.ContentType.Equals("application/json"))
        {
            var sr = new StreamReader(request.Body);
            string content = await sr.ReadToEndAsync();

            var obj = new { data = content };
            string newContent = JsonSerializer.Serialize(obj).Replace("/r/n", "");

            using HttpClient httpClient = new HttpClient();
            var baseAddress = $"{request.Scheme}://{request.Host}{request.PathBase}/ServerCommand/{serverCommandName}";
            HttpContent httpContent = new StringContent(newContent, Encoding.UTF8, "application/json");
            HttpResponseMessage responseMessage = await httpClient.PostAsync(baseAddress, httpContent);

            if (responseMessage.IsSuccessStatusCode)
            {
                await responseMessage.Content.ReadAsStringAsync();
            }
            else
            {
                throw new Exception($"Error: {responseMessage.StatusCode}");
            }
        }
        else
        {
            throw new HttpRequestException("ContentType error, please check request content!");
        }
    }
}
</code></pre>
<p>编写完成后，右键项目点击 “Build Selected Projects” 进行项目 Build 打包。在新建类库项目的目录下找到生成的 dll 文件，打开活字格设计器，上传该 dll 文件到活字格工程中，此时 API 列表会显示 Web API 的请求地址。</p>
<h4 id="活字格中使用-web-api">活字格中使用 Web API</h4>
<p>回到活字格设计器工程，新建一个服务端命令，命名为 “RedirectCommand”，设置参数值为 “data”，用返回命令将接收的数据保存到表里，注意服务端命令需设置为任何人可调用。借助 API 调试工具向创建的 Web API 发送请求，运行本地服务，使用 <a href="https://localhost/" target="_blank" rel="noopener nofollow">localhost</a> 进行测试。发送请求后，活字格会将产生的数据接收到并保存到数据表中。</p>
<h4 id="调试服务端-web-api">调试服务端 Web API</h4>
<ol>
<li>运行上传了打包完成的 Web API dll 文件的活字格工程。</li>
<li>在编译器中选择 “Run”——“Attach to Process” 附加到进程，搜索活字格本地服务的端口号，点击附加。</li>
<li>在代码左侧打断点，触发 Web API 调用后即可进行调试。</li>
</ol>
<h4 id="修改代码后再次调试">修改代码后再次调试</h4>
<p>若修改代码，需执行以下步骤：</p>
<ol>
<li>修改代码。</li>
<li>编译工程。</li>
<li>在活字格设计器中删除之前的 dll 文件。</li>
<li>上传新的 dll 文件。</li>
<li>运行活字格应用程序。</li>
<li>通过编译器的 “调试 -&gt; 附加到进程” 重新附加到 ForguncyServerConsole.exe 进程上。</li>
<li>打断点调试。</li>
<li>若还需修改代码，回到第一步，直至修正所有问题。</li>
</ol>
<h3 id="c-与低代码平台结合的优势">C# 与低代码平台结合的优势</h3>
<p>将 C# 与低代码平台（如活字格）结合，能够充分发挥两者的优势。低代码平台提供了可视化界面和拖拽功能，减少了手动编码的工作量，提高了开发效率。而 C# 作为一种强大的编程语言，为开发者提供了更多的灵活性和扩展性。通过使用 C# 进行接口扩展，开发者可以实现复杂的业务逻辑和功能，满足不同项目的需求。同时，C# Web API 的安全性、跨平台兼容性等特点，也为应用程序的开发和部署提供了保障。</p>
<h2 id="结论">结论</h2>
<p>本文详细介绍了如何使用 C# 在活字格低代码平台上创建服务端 Web API。通过结合 C# 的强大功能和活字格低代码平台的高效性，开发者可以快速开发出高质量的应用程序。从环境准备、项目创建、代码编写到调试和修改，每个步骤都进行了详细的阐述。这种将 C# 与低代码平台相结合的开发方式，不仅提高了开发效率，还能充分满足不同业务场景的需求。希望本文能为开发者在使用 C# 进行低代码开发时提供有益的参考，帮助他们更好地利用这两种技术，开发出优秀的应用程序。完整的代码工程文件可参考：<a href="https://gitee.com/GrapeCity/my-api-test" target="_blank" rel="noopener nofollow">https://gitee.com/GrapeCity/my-api-test</a> 。</p>
<p><a href="https://www.grapecity.com.cn/articles/ai/ai-agent-design-and-development/technical-architecture-of-ai-agents" target="_blank" rel="noopener nofollow">AI智能体的技术架构与解决方案</a></p>

</div>
<div id="MySignature" role="contentinfo">
    <hr>
<br>
<p style="font-size: 16px; font-family: 微软雅黑, 黑体, Arial; color: #000">本文是由葡萄城技术开发团队发布，转载请注明出处：<a href="https://www.grapecity.com.cn/" target="_blank">葡萄城官网</a></p>
<!--p style="font-size: 16px; font-family: 微软雅黑, 黑体, Arial; color: #000">了解企业级低代码开发平台，请前往<a href="https://www.grapecity.com.cn/solutions/huozige" target="_blank">活字格</a>
</p><p style="font-size: 16px; font-family: 微软雅黑, 黑体, Arial; color: #000">了解可嵌入您系统的在线 Excel，请前往<a href="https://www.grapecity.com.cn/developer/spreadjs" target="_blank">SpreadJS纯前端表格控件</a></p>
<p style="font-size: 16px; font-family: 微软雅黑, 黑体, Arial; color: #000">了解嵌入式的商业智能和报表软件，请前往<a href="https://www.grapecity.com.cn/solutions/wyn" target="_blank">Wyn Enterprise
</a></p-->

<br>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-06-12 10:17">2025-06-12 10:16</span>&nbsp;
<a href="https://www.cnblogs.com/powertoolsteam">葡萄城技术团队</a>&nbsp;
阅读(<span id="post_view_count">58</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18924171);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18924171', targetLink: 'https://www.cnblogs.com/powertoolsteam/p/18924171', title: 'C# 与低代码平台的融合：以活字格为例的 Web API 开发实践' })">举报</a>
</div>
        