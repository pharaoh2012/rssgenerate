
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/aqi00/p/18928398" title="发布于 2025-06-14 15:43">
    <span role="heading" aria-level="2">FFmpeg开发笔记（六十五）Linux给FFmpeg集成LC3音频的编码器liblc3</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<span data-cke-copybin-start="1"><span data-cke-copybin-start="1">​</span></span>《FFmpeg开发实战：从零基础到短视频上线》一书的第五章介绍了FFmpeg如何处理常见的MP3音频和AAC音频，其中MP3格式常用于音乐文件，而AAC格式常用于视频文件。
<p><span id="cke_bm_2044S"> 除此以外，近年又出现了专用于蓝牙音频的LC3格式，其全称是低复杂度通信编解码器（Low Complexity Communications Codec）。2020年9月15日，蓝牙技术联盟正式发布LC3技术规范，所有的蓝牙音频规范将强制使用LC3音频编解码器。</span></p>
<p><span class="cke_widget_wrapper cke_widget_inline cke_widget_image cke_image_nocaption cke_widget_selected" data-cke-display-name="图像" data-cke-filter="off" data-cke-widget-id="12" data-cke-widget-wrapper="1"><img src="https://i-blog.csdnimg.cn/direct/7588a11b7896411e8b354d0658a9a101.jpeg" alt="" class="cke_widget_element" data-cke-saved-src="https://i-blog.csdnimg.cn/direct/7588a11b7896411e8b354d0658a9a101.jpeg" data-cke-widget-data="%7B%22hasCaption%22%3Afalse%2C%22src%22%3A%22https%3A%2F%2Fi-blog.csdnimg.cn%2Fdirect%2F7588a11b7896411e8b354d0658a9a101.jpeg%22%2C%22alt%22%3A%22%22%2C%22width%22%3A%22%22%2C%22height%22%3A%22%22%2C%22lock%22%3Atrue%2C%22align%22%3A%22none%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="image"><img src="https://img2024.cnblogs.com/blog/729938/202506/729938-20250614154334214-910481456.jpg" alt="" width="510" height="287"></span></p>
<p>LC3和LC3 Plus是专为低延迟音频传输而设计的音频编解码器，LC3 Plus在LC3的基础上还提出了以下功能：</p>
<p> 1、每帧音频的持续时间为2.5ms或5ms。<br>
2、采用高分辨率模式，采样率为48KHz或96KHz。<br>
liblc3是一个开源的LC3音频编解码库，同时内置了LC3和LC3 Plus功能，从7.1版本开始的最新FFmpeg源码已经支持LC3音频的编码器liblc3。<br>
接下来以华为的欧拉系统为例，介绍如何在Linux环境给FFmpeg集成LC3音频的编码器liblc3，具体的操作步骤说明如下：</p>
<h1>一、安装liblc3</h1>
<p>liblc3是一款LC3音频的编解码库。它的源码托管页面在https://github.com/google/liblc3，最新版本是2025年2月发布的liblc3-1.1.3，该版本的源码包下载地址是https://codeload.github.com/google/liblc3/tar.gz/refs/tags/v1.1.3。<br>
liblc3的安装步骤说明如下。<br>
1、安装编译工具meson和ninja<br>
这两个工具已经在之前libdav1d的安装过程中安装了，这里不再赘述。<br>
2、将下载好的压缩包上传到服务器并解压，也就是依次执行以下命令。</p>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="11" data-cke-widget-wrapper="1">
<pre class="cke_widget_element" data-cke-widget-data="%7B%22code%22%3A%22cd%20%2Fusr%2Flocal%2Fsrc%5Cntar%20zxvf%20liblc3-1.1.3.tar.gz%5Cncd%20liblc3-1.1.3%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code class="hljs">cd /usr/local/src
tar zxvf liblc3-1.1.3.tar.gz
cd liblc3-1.1.3</code></pre>
</div>
<p>3、进入解压后的build目录，运行下面命令配置liblc3。</p>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="10" data-cke-widget-wrapper="1">
<pre class="cke_widget_element" data-cke-widget-data="%7B%22code%22%3A%22mkdir%20build%5Cncd%20build%5Cnmeson%20setup%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code class="hljs">mkdir build
cd build
meson setup</code></pre>
</div>
<p>4、运行下面命令编译liblc3。</p>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="9" data-cke-widget-wrapper="1">
<pre class="cke_widget_element" data-cke-widget-data="%7B%22code%22%3A%22ninja%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code class="hljs">ninja</code></pre>
</div>
<p>5、编译完成后，运行下面命令安装liblc3。</p>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="8" data-cke-widget-wrapper="1">
<pre class="cke_widget_element" data-cke-widget-data="%7B%22code%22%3A%22ninja%20install%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code class="hljs">ninja install</code></pre>
</div>
<h1>二、让FFmpeg启用liblc3</h1>
<p>由于FFmpeg默认未启用liblc3，因此需要重新配置FFmpeg，标明启用liblc3，然后重新编译安装FFmpeg。<br>
先下载最新的FFmpeg源码（版本号需大于等于7.1），再把FFmpeg源码包上传到Linux服务器的/usr/local/src目录下。接着登录Linux服务器的控制台，执行下面命令解压源码包：</p>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="7" data-cke-widget-wrapper="1">
<pre class="cke_widget_element" data-cke-widget-data="%7B%22code%22%3A%22cd%20%2Fusr%2Flocal%2Fsrc%5Cnunzip%20ffmpeg-n7.1.1.zip%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code class="hljs">cd /usr/local/src
unzip ffmpeg-n7.1.1.zip</code></pre>
</div>
<p>确保Linux环境已经按照《FFmpeg开发实战：从零基础到短视频上线》该书第一章的“1.2 &nbsp;Linux系统安装FFmpeg”安装了H.264的编码器libx264和H.265的编码器libx265，并且按照之前的文章安装了H.266的编码器libvvenc，然后执行以下的liblc3启用步骤。<br>
1、回到FFmpeg源码的目录，执行以下命令重新配置FFmpeg，主要增加启用liblc3。（增加了选项“ --enable-liblc3”）</p>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="6" data-cke-widget-wrapper="1">
<pre class="cke_widget_element" data-cke-widget-data="%7B%22code%22%3A%22cd%20ffmpeg-n7.1.1%5Cnexport%20LD_LIBRARY_PATH%3D%2Fusr%2Flocal%2Flib64%3A%24LD_LIBRARY_PATH%5Cnexport%20PKG_CONFIG_PATH%3D%2Fusr%2Flocal%2Flib64%2Fpkgconfig%3A%24PKG_CONFIG_PATH%5Cn.%2Fconfigure%20--prefix%3D%2Fusr%2Flocal%2Fffmpeg%20--enable-shared%20--disable-static%20--disable-doc%20--enable-zlib%20--enable-libx264%20--enable-libx265%20--enable-libvvenc%20--enable-liblc3%20--enable-iconv%20--enable-gpl%20--enable-nonfree%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code class="hljs">cd ffmpeg-n7.1.1
export LD_LIBRARY_PATH=/usr/local/lib64:$LD_LIBRARY_PATH
export PKG_CONFIG_PATH=/usr/local/lib64/pkgconfig:$PKG_CONFIG_PATH
./configure --prefix=/usr/local/ffmpeg --enable-shared --disable-static --disable-doc --enable-zlib --enable-libx264 --enable-libx265 --enable-libvvenc --enable-liblc3 --enable-iconv --enable-gpl --enable-nonfree</code></pre>
</div>
<p>2、运行下面命令编译FFmpeg。</p>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="5" data-cke-widget-wrapper="1">
<pre class="cke_widget_element" data-cke-widget-data="%7B%22code%22%3A%22make%20clean%5Cnmake%20-j4%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code class="hljs">make clean
make -j4</code></pre>
</div>
<p>3、执行下面命令安装FFmpeg。</p>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="4" data-cke-widget-wrapper="1">
<pre class="cke_widget_element" data-cke-widget-data="%7B%22code%22%3A%22make%20install%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code class="hljs">make install</code></pre>
</div>
<h1>三、查看FFmpeg的安装结果</h1>
<p>运行下面命令查看FFmpeg的安装版本：</p>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="3" data-cke-widget-wrapper="1">
<pre class="cke_widget_element" data-cke-widget-data="%7B%22code%22%3A%22ffmpeg%20-version%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code class="hljs">ffmpeg -version</code></pre>
</div>
<p>上面命令返回的FFmpeg版本信息如下：</p>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="2" data-cke-widget-wrapper="1">
<pre class="cke_widget_element" data-cke-widget-data="%7B%22code%22%3A%22ffmpeg%20version%207.1.1%20Copyright%20(c)%202000-2025%20the%20FFmpeg%20developers%5Cnbuilt%20with%20gcc%2010.3.1%20(GCC)%5Cnconfiguration%3A%20--prefix%3D%2Fusr%2Flocal%2Fffmpeg%20--enable-shared%20--disable-static%20--disable-doc%20--enable-zlib%20--enable-libx264%20--enable-libx265%20--enable-libvvenc%20--enable-liblc3%20--enable-iconv%20--enable-gpl%20--enable-nonfree%5Cnlibavutil%20%C2%A0%20%C2%A0%20%C2%A059.%2039.100%20%2F%2059.%2039.100%5Cnlibavcodec%20%C2%A0%20%C2%A0%2061.%2019.101%20%2F%2061.%2019.101%5Cnlibavformat%20%C2%A0%20%C2%A061.%20%C2%A07.100%20%2F%2061.%20%C2%A07.100%5Cnlibavdevice%20%C2%A0%20%C2%A061.%20%C2%A03.100%20%2F%2061.%20%C2%A03.100%5Cnlibavfilter%20%C2%A0%20%C2%A010.%20%C2%A04.100%20%2F%2010.%20%C2%A04.100%5Cnlibswscale%20%C2%A0%20%C2%A0%20%C2%A08.%20%C2%A03.100%20%2F%20%C2%A08.%20%C2%A03.100%5Cnlibswresample%20%C2%A0%205.%20%C2%A03.100%20%2F%20%C2%A05.%20%C2%A03.100%5Cnlibpostproc%20%C2%A0%20%C2%A058.%20%C2%A03.100%20%2F%2058.%20%C2%A03.100%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code class="hljs">ffmpeg version 7.1.1 Copyright (c) 2000-2025 the FFmpeg developers
built with gcc 10.3.1 (GCC)
configuration: --prefix=/usr/local/ffmpeg --enable-shared --disable-static --disable-doc --enable-zlib --enable-libx264 --enable-libx265 --enable-libvvenc --enable-liblc3 --enable-iconv --enable-gpl --enable-nonfree
libavutil &nbsp; &nbsp; &nbsp;59. 39.100 / 59. 39.100
libavcodec &nbsp; &nbsp; 61. 19.101 / 61. 19.101
libavformat &nbsp; &nbsp;61. &nbsp;7.100 / 61. &nbsp;7.100
libavdevice &nbsp; &nbsp;61. &nbsp;3.100 / 61. &nbsp;3.100
libavfilter &nbsp; &nbsp;10. &nbsp;4.100 / 10. &nbsp;4.100
libswscale &nbsp; &nbsp; &nbsp;8. &nbsp;3.100 / &nbsp;8. &nbsp;3.100
libswresample &nbsp; 5. &nbsp;3.100 / &nbsp;5. &nbsp;3.100
libpostproc &nbsp; &nbsp;58. &nbsp;3.100 / 58. &nbsp;3.100</code></pre>
</div>
<p>根据以上返回的版本信息，可知已安装的FFmpeg版本号为7.1.1，同时configuration这行找到“--enable-liblc3”，说明FFmpeg已经启用了LC3音频的编解码库liblc3。</p>
<p>更多详细的FFmpeg开发知识参见<span class="cke_widget_wrapper cke_widget_inline cke_widget_csdnlink cke_widget_selected" data-cke-display-name="a" data-cke-filter="off" data-cke-widget-id="1" data-cke-widget-wrapper="1"><a class="cke_widget_editable cke_widget_element" title="《FFmpeg开发实战：从零基础到短视频上线》" href="https://item.jd.com/14020415.html" data-cke-enter-mode="2" data-cke-saved-href="https://item.jd.com/14020415.html" data-cke-widget-data="%7B%22url%22%3A%22https%3A%2F%2Fitem.jd.com%2F14020415.html%22%2C%22text%22%3A%22%E3%80%8AFFmpeg%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%EF%BC%9A%E4%BB%8E%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%88%B0%E7%9F%AD%E8%A7%86%E9%A2%91%E4%B8%8A%E7%BA%BF%E3%80%8B%22%2C%22desc%22%3A%22%22%2C%22icon%22%3A%22%22%2C%22isCard%22%3Afalse%2C%22hasResquest%22%3Atrue%2C%22iconDefault%22%3A%22https%3A%2F%2Fcsdnimg.cn%2Frelease%2Fblog_editor_html%2Frelease2.3.9%2Fckeditor%2Fplugins%2FCsdnLink%2Ficons%2Ficon-default.png%3Ft%3DP4F5%22%2C%22id%22%3A%22Yv5sbG-1749886736259%22%2C%22classes%22%3Anull%7D" data-cke-widget-editable="text" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-link-icon="https://csdnimg.cn/release/blog_editor_html/release2.3.9/ckeditor/plugins/CsdnLink/icons/icon-default.png?t=P4F5" data-link-title="《FFmpeg开发实战：从零基础到短视频上线》" data-widget="csdnlink" rel="noopener nofollow">《FFmpeg开发实战：从零基础到短视频上线》</a>一书。</span></p>
<p>&nbsp;</p>
<span data-cke-copybin-start="1"><span data-cke-copybin-end="1">​</span></span>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-06-14 15:44">2025-06-14 15:43</span>&nbsp;
<a href="https://www.cnblogs.com/aqi00">aqi00</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18928398);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18928398', targetLink: 'https://www.cnblogs.com/aqi00/p/18928398', title: 'FFmpeg开发笔记（六十五）Linux给FFmpeg集成LC3音频的编码器liblc3' })">举报</a>
</div>
        