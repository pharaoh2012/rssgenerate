
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/jock766/p/18823119" title="发布于 2025-04-13 12:22">
    <span role="heading" aria-level="2">dubbo源码解析-服务暴露与发现</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p><font color="#FF00FF">一、概述</font></p>
<p>dubbo是一个简单易用的RPC框架，通过简单的提供者，消费者配置就能完成无感的网络调用。那么在dubbo中是如何将提供者的服务暴露出去，消费者又是如何获取到提供者相关信息的呢？</p>
<p><br><font color="#FF00FF">二、dubbo与spring的整合</font></p>
<p>在了解dubbo的<font color="red">服务注册和服务发现</font>之前，我们首先需要掌握一个知识点：<font color="red">Spring中自定义Schema</font></p>
<p><br><font color="#FF00FF">三、Spring自定义Schema</font></p>
<p>Dubbo 现在的设计是完全无侵入，也就是使用者只依赖于配置契约。在 Dubbo 中，可以使用 XML 配置相关信息，也可以用来引入服务或者导出服务。</p>
<p>配置完成，启动工程，Spring 会读取配置文件，生成注入相关Bean。<font color="red">那 Dubbo 如何实现自定义 XML 被 Spring 加载读取呢 ？</font></p>
<p><br>从 Spring 2.0 开始，<font color="blue">Spring 开始提供了一种基于 XML Schema 格式扩展机制，用于定义和配置 bean</font></p>
<p><br><font color="bluF">入门案例</font></p>
<p>学习和使用<font color="red">Spring XML Schema </font>扩展机制并不难，需要下面几个步骤：</p>
<p>1、创建配置属性的JavaBean对象</p>
<p>2、创建Spring.xml文件</p>
<p>3、编写Spring.handlers文件配置所有部件</p>
<p>4、自定义处理器类，并实现NamespaceHandler接口</p>
<p>5、自定义解析器，实现BeanDefinitionParser接口（最关键的部分）</p>
<p>6、编写Spring.schemas文件配置所有部件</p>
<p>7、创建一个 XML Schema 文件，描述自定义的合法构建模块，也就是xsd文件</p>
<p><br><font color="bluF">1、定义JavaBean对象，在spring中此对象会根据配置自动创建</font></p>
<pre><code>public class User {
    private String id;  
    private String name;  
    private Integer age;
    //省略getter setter方法
}
</code></pre>
<p><br><font color="bluF">2、定义spring.xml配置文件，并导入对应约束</font></p>
<pre><code>  &lt;?xml version="1.0" encoding="UTF-8"?&gt;
  &lt;beans xmlns="http://www.springframework.org/schema/beans" 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
  xmlns:context="http://www.springframework.org/schema/context" 
  xmlns:util="http://www.springframework.org/schema/util" 
  xmlns:task="http://www.springframework.org/schema/task" 
  xmlns:aop="http://www.springframework.org/schema/aop" 
  xmlns:tx="http://www.springframework.org/schema/tx"
  xmlns:itheima="http://www.itheima.com/schema/user"
   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
          http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
          http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
          http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd
          http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
          http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
  http://www.itheima.com/schema/user http://www.itheima.com/schema/user.xsd"&gt;

      &lt;itheima:user id="user" name="zhangsan" age="12"&gt;&lt;/itheima:user&gt;

  &lt;/beans&gt;
</code></pre>
<p><br><font color="bluF">3、编写Spring.handlers文件配置所有部件</font><br>
<br>定义<font color="red">spring.handlers</font>文件，根据<font color="red">Spring.xml</font>的xsi:schemaLocation="<a href="http://www.itheima.com/schema/user" target="_blank" rel="noopener nofollow">http://www.itheima.com/schema/user</a>" 与<font color="red">NamespaceHandler类</font>的对应关系；必须放在classpath下的<font color="red">META-INF</font>文件夹中</p>
<pre><code>http\://www.itheima.com/schema/user=com.itheima.schema.UserNamespaceHandler
</code></pre>
<p><br><font color="bluF">4、自定义处理器类，并实现NamespaceHandler接口</font><br>
<br>自定义<font color="blue">UserNamespaceHandler类</font></p>
<pre><code>package com.itheima.schema;
import org.springframework.beans.factory.xml.NamespaceHandlerSupport;

public class UserNamespaceHandler extends NamespaceHandlerSupport {
    public void init() {
        registerBeanDefinitionParser("user", new UserBeanDefinitionParser());
    }
}
</code></pre>
<p><br><font color="bluF">5、自定义解析器，实现BeanDefinitionParser接口（最关键的部分）</font><br>
<br><font color="blue">BeanDefinitionParser</font>是标签对应的解析器，Spring读取到对应标签时会使用该类进行解析；</p>
<pre><code>  public class UserBeanDefinitionParser extends
          AbstractSingleBeanDefinitionParser {

      protected Class getBeanClass(Element element) {
          return User.class;
      }

      protected void doParse(Element element, BeanDefinitionBuilder bean) {
          String name = element.getAttribute("name");
          String age = element.getAttribute("age");
          String id = element.getAttribute("id");
          if (StringUtils.hasText(id)) {
              bean.addPropertyValue("id", id);
          }
          if (StringUtils.hasText(name)) {
              bean.addPropertyValue("name", name);
          }
          if (StringUtils.hasText(age)) {
              bean.addPropertyValue("age", Integer.valueOf(age));
          }
      }
  }
</code></pre>
<p><br><font color="bluF">6、编写Spring.schemas文件配置所有部件</font><br>
<br>定义<font color="red">spring.schemas</font>文件，根据Spring.xml的xsi:schemaLocation="<a href="http://www.itheima.com/schema/user.xsd" target="_blank" rel="noopener nofollow">http://www.itheima.com/schema/user.xsd</a>" 与 <font color="red">user.xsd</font>文件对应关系；必须放在classpath下的<font color="red">META-INF</font>文件夹中。</p>
<pre><code>  http\://www.itheima.com/schema/user.xsd=META-INF/user.xsd
</code></pre>
<p><br><font color="bluF">7、创建一个 XML Schema 文件，描述自定义的合法构建模块，也就是xsd文件</font><br>
<br>在<font color="red">META-INF</font>下定义<font color="red">user.xsd文件，</font>使用xsd用于描述标签的规则</p>
<pre><code>    &lt;?xml version="1.0" encoding="UTF-8"?&gt;  
    &lt;xsd:schema   
        xmlns="http://www.itheima.com/schema/user"
        xmlns:xsd="http://www.w3.org/2001/XMLSchema"   
        xmlns:beans="http://www.springframework.org/schema/beans"  
        targetNamespace="http://www.itheima.com/schema/user"
        elementFormDefault="qualified"   
        attributeFormDefault="unqualified"&gt;  
        &lt;xsd:import namespace="http://www.springframework.org/schema/beans" /&gt;  
        &lt;xsd:element name="user"&gt;
            &lt;xsd:complexType&gt;  
                &lt;xsd:complexContent&gt;  
                    &lt;xsd:extension base="beans:identifiedType"&gt;  
                        &lt;xsd:attribute name="name" type="xsd:string" /&gt;  
                        &lt;xsd:attribute name="age" type="xsd:int" /&gt;  
                    &lt;/xsd:extension&gt;  
                &lt;/xsd:complexContent&gt;  
            &lt;/xsd:complexType&gt;  
        &lt;/xsd:element&gt;  
    &lt;/xsd:schema&gt;
</code></pre>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.007934823255787036" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-13 12:35">2025-04-13 12:22</span>&nbsp;
<a href="https://www.cnblogs.com/jock766">jock_javaEE</a>&nbsp;
阅读(<span id="post_view_count">2</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18823119);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18823119', targetLink: 'https://www.cnblogs.com/jock766/p/18823119', title: 'dubbo源码解析-服务暴露与发现' })">举报</a>
</div>
        