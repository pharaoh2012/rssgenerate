
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/codeCosmos/p/18891875/junbj" title="发布于 2025-05-22 19:23">
    <span role="heading" aria-level="2">航空货运系统总结性Blog</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p></p><div class="toc"><div class="toc-container-header">目录</div><ul><li><a href="#前言" rel="noopener nofollow">前言</a><ul><li><ul><li><a href="#1关于知识点" rel="noopener nofollow">1.关于知识点</a></li><li><a href="#2关于题量" rel="noopener nofollow">2.关于题量</a></li><li><a href="#3关于难度" rel="noopener nofollow">3.关于难度</a></li></ul></li></ul></li><li><a href="#设计与分析" rel="noopener nofollow">设计与分析</a><ul><li><ul><li><a href="#第一次作业" rel="noopener nofollow">第一次作业</a><ul><li><a href="#我的设计" rel="noopener nofollow">我的设计</a></li><li><a href="#我的分析" rel="noopener nofollow">我的分析</a></li></ul></li><li><a href="#第二次作业" rel="noopener nofollow">第二次作业</a><ul><li><a href="#我的设计-1" rel="noopener nofollow">我的设计</a></li><li><a href="#我的分析-1" rel="noopener nofollow">我的分析</a></li></ul></li></ul></li></ul></li><li><a href="#踩坑心得" rel="noopener nofollow">踩坑心得</a><ul><li><ul><li><a href="#第一次作业-1" rel="noopener nofollow">第一次作业</a></li><li><a href="#第二次作业-1" rel="noopener nofollow">第二次作业</a></li></ul></li></ul></li><li><a href="#改进建议" rel="noopener nofollow">改进建议</a></li><li><a href="#总结" rel="noopener nofollow">总结</a></li></ul></div><p></p>
<h1 id="前言">前言</h1>
<p>本次题目集以航空运送货物为背景，设计航空货物管理系统，主要考察对类设计的把握是否合理还有对继承和多态的使用，能否设计出符合标准的类，是否充分理解对面向对象六大设计原则（SRP,OCP,LSP,DIP,CRP,LOD)，设计出的类是否能够遵循这六大原则。</p>
<h3 id="1关于知识点">1.关于知识点</h3>
<ul>
<li>运用<mark>六大设计原则</mark>设计出合理的类，准确把握<mark>类与类</mark>之间的<mark>关系</mark>。</li>
<li><mark>继承</mark>与<mark>多态</mark>的灵活使用。</li>
<li><mark>抽象类</mark>与<mark>抽象方法</mark>。</li>
</ul>
<h3 id="2关于题量">2.关于题量</h3>
<ul>
<li>两次题集题量均不多只有三道题，对两次题集的最后一题进行迭代。</li>
</ul>
<h3 id="3关于难度">3.关于难度</h3>
<ul>
<li>难度不大，最后一题题目内容稍长，但容易理解。</li>
</ul>
<h1 id="设计与分析">设计与分析</h1>
<h3 id="第一次作业">第一次作业</h3>
<p>本次题目模拟某客户到该航空公司办理一次货运业务的过程：<br>
航空公司提供如下信息：</p>
<ul>
<li>航班信息（航班号，航班起飞机场所在城市，航班降落机场所在城市，航班<br>
日期，航班最大载重量）</li>
</ul>
<p>客户填写货运订单并进行支付，需要提供如下信息：</p>
<ul>
<li>客户信息（姓名，电话号码等）</li>
<li>货物信息（货物名称，货物包装长、宽、高尺寸，货物重量等）</li>
<li>运送信息（发件人姓名、电话、地址，收件人姓名、电话、地址，所选航班号，订单日期）</li>
<li>支付方式（支付宝支付、微信支付）</li>
</ul>
<p>一个货运订单可以运送多件货物，每件货物均需要根据重量及费率单独<br>
计费。</p>
<h4 id="我的设计">我的设计</h4>
<ol>
<li><mark>题目分析</mark>：</li>
</ol>
<ul>
<li>题目中有客户、发件人、收件人、货物、支付方式、航班等并且是在<mark>模拟客户</mark>在航空公式<mark>办理业务</mark>的过程</li>
</ul>
<ol start="2">
<li>将现实转化为抽象的类，进行<mark>类设计</mark>：</li>
</ol>
<p><img src="https://img2024.cnblogs.com/blog/3635068/202505/3635068-20250521205942617-1153583940.png" alt="" loading="lazy"></p>
<ul>
<li>类与类之间好比大树生出支再生出叶子，错综复杂，又很清晰，所以我们要从末尾（叶）开始设计类，关系越少，职责清晰。</li>
<li>针对货物：题目中的货物有长宽高等属性，但是不是所有的货物都有长宽高，比如球或者不规则物体，所以我把货物做成了一个抽象类，下面继承了一个长方体货物。</li>
<li>针对支付方式：支付方式有微信支付、支付宝支付、明显需要采用<mark>继承</mark>=，将支付做成抽象类，下面继承两种支付方式，使用原因有：<mark>遵循开闭原则</mark>，如果还要加现金支付，不需要修改原来代码，能够使用多态，无论是什么支付都能通过父类进行操作，减少了条件判断和类型转换的代码，减少代码的重复。</li>
<li>针对发件人与收件人:我最开始的想法是把收发件人和客户继承同一个父类因为有很多相似的属性,转念一想，是客户办理业务，继承同一个父类<mark>耦合</mark>是不是<mark>太强</mark>了，最终我还是把收发件人做成一个<mark>单独的类</mark>。</li>
<li>因为要处理客户的业务，好比我们在手机上买东西，比如淘宝，都有订单，客户买东西就是在下订单，为了减小耦合设计合理符合实际，把订单类拆分成两个，一个<mark>订单项类(OrderItem)</mark>，一个<mark>订单类(Order)</mark>，<mark>订单</mark>与<mark>订单类</mark>之间<mark>聚合</mark>，<mark>遵循合成复用</mark>。</li>
<li>最后为了处理客户与订单之间的业务逻辑，设置一个<mark>中间类Controll</mark>，好比买房卖房需要中介，<mark>减小耦合</mark>，<mark>遵循单一职责原则</mark>。</li>
<li>设计了一个接口：针对运费规则设置了一个接口，避免运费规则改变修改代码，<mark>遵循开闭原则</mark>。</li>
</ul>
<ol start="3">
<li><mark>类中关键方法的设计</mark>：</li>
</ol>
<ul>
<li>在货物类中设计了一个<mark>计算货物体积重量</mark>的方法，该方法为<mark>抽象方法</mark>子类长方体货物对其<mark>复写</mark>，因为考虑到不同类型的货物体积计算不一样。</li>
</ul>
<pre><code class="language-java"> public void setVolumeWight(double volumeWight) {
        this.volumeWeight = volumeWight;
    }
</code></pre>
<ul>
<li>在订单项中设计<mark>求货物价格</mark>的方法，通过该货物计费率(依赖费率接口)和货物重量求出价格，还有<mark>计算计费重量</mark>方法，通过比较体积重量和实际重量大小返回较大值。</li>
</ul>
<pre><code class="language-java">
public double getItemSum(ChargingRate chargingRate){
        double wight=chargeableWeight();
       return chargingRate.calculateChargingRate(wight)*wight;
    }

</code></pre>
<ul>
<li>在订单类中有<mark>计算货物总质量</mark>和<mark>总价格方法</mark>，计算总重量是为了确认该订单<mark>能否运输</mark>(有无超过飞机剩余承受重量)，计算总价格方便支付。</li>
</ul>
<pre><code class="language-java">public double getWightSum() {
        double sum=0;
        for(OrderItem orderItem:orderItems){
            sum += orderItem.chargeableWeight();
        }
        return sum;
    }
</code></pre>
<ul>
<li>在控制类中有<mark>查询订单报表</mark> 、<mark>查询货物报表</mark>、<mark>增加订单</mark>方法。通过控制类进行订单的增加<mark>降低解耦性</mark>。</li>
</ul>
<pre><code class="language-java">    //增加订单
    public void addOrder(int id,String time,ArrayList&lt;OrderItem&gt; orderItems,String name,String phone,TransportInformation transportInformation){
        Order order=new Order(id,time,orderItems,name,phone,transportInformation);
        orders.add(order);
    }
</code></pre>
<ul>
<li>在客户类中有一个<mark>下订单</mark>的方法，通过控制类来实现。</li>
</ul>
<pre><code class="language-java">//客户下订单
public void addOrder(int id,String time,ArrayList&lt;OrderItem&gt; orderItems,TransportInformation transportInformation){
        orderManage.addOrder(id,time,orderItems,this.name,this.phone,transportInformation);
    }
</code></pre>
<h4 id="我的分析">我的分析</h4>
<p>1.类图<br>
<img src="https://img2024.cnblogs.com/blog/3635068/202505/3635068-20250521195857803-559642712.jpg" alt="" loading="lazy"></p>
<p>对类设计进行分析：</p>
<ul>
<li>长方体货物类(CuboidProduct)继承自货物类(Product)，<mark>增强扩展性</mark>，<mark>符合开闭原则</mark>。</li>
<li>订单项类依赖于抽象的货物类，依赖于于抽象不依赖于具体<mark>符合依赖倒转原则</mark>。</li>
<li>订单项类<mark>依赖于接口</mark>，类图中有所差错。</li>
<li>订单类于订单项类聚合，<mark>符合合成服用原则</mark>，减少重复代码。</li>
<li>订单类依赖于抽象类支付类(Payment),支付类下面继承两个类（微信，支付宝），实现了<mark>多态</mark>，<mark>符合依赖倒转原则、开闭原则、里氏代换原则</mark>。</li>
<li>运送信息类依赖于航班类、收发件人类，再与订单类依赖，这里应该使用聚合实现代码复用，图中有所差错。</li>
<li>客户关联控制类，控制类关联订单类，<mark>减少耦合</mark>，符合<mark>单一职责</mark>，<mark>迪米特法则</mark>。</li>
</ul>
<p>2.SourceMontor生成表：<br>
<img src="https://img2024.cnblogs.com/blog/3635068/202505/3635068-20250521195908240-2018850754.png" alt="" loading="lazy"></p>
<p>对代码进行分析：</p>
<ul>
<li>注释率太低：再代码中没有足够的注释，只有在一些关键性的地方增加注释，导致<mark>注释率偏低</mark>，要有良好的注释习惯。</li>
<li>平均复杂度偏低：某些方法可能<mark>过于简单</mark>，但是一个方法不能承担过多职责，增强复用，所以问题不大。</li>
<li>其他如平均深度、最大复杂度等在合理范围。</li>
</ul>
<h3 id="第二次作业">第二次作业</h3>
<p>第二次为第一次的<mark>迭代</mark>，较上一次增加如下需求：</p>
<p>-货物类型分为普通货物、危险货物和加急货物三种。<br>
-三种货物费率不同。<br>
-支付方式增加了现金支付。<br>
-客户分为个人用户和集团用户，个人用户9折优惠，集团用户8折优惠。</p>
<h4 id="我的设计-1">我的设计</h4>
<p>1.题目分析：</p>
<p>题目较上一次增加了客户种类，需要把客户做出抽象类，然后继承下来，增加折扣率，需新增折扣率接口。</p>
<p>2.类设计:<br>
<img src="https://img2024.cnblogs.com/blog/3635068/202505/3635068-20250521210127797-113301045.png" alt="" loading="lazy"></p>
<p>-对于货物类在上次题目中我已经把<mark>货物做成抽象类</mark>，只不过货物类型<mark>方向不一样</mark>，我是按货物的<mark>形状分类</mark>，题目则按<mark>货物种类</mark>，差别不大。<br>
-对于支付类，上次题目中已经形成了明确的继承关系，新增的现金支付<mark>只需要继承下来</mark>就好了，<mark>开闭原则</mark>。<br>
-对于客户类则要<mark>重新设计</mark>，把<mark>客户</mark>做成<mark>抽象类</mark>然后<mark>继承</mark>下来两种客户类型。<br>
-对于新增的折扣率将它<mark>做成接口</mark>，实现两种费率模式，<mark>利用多态</mark>来具体施行操作。<br>
-新增的货物费率则是在<mark>原来的接口</mark>上<mark>再继承两种费率模式</mark>下来。</p>
<p>3.方法设计上：</p>
<p>在某些方法上增加形参折扣率的接口如订单项中求总费用，其他逻辑未改变。</p>
<h4 id="我的分析-1">我的分析</h4>
<p>1.类图：</p>
<p><img src="https://img2024.cnblogs.com/blog/3635068/202505/3635068-20250521210313046-23101369.jpg" alt="" loading="lazy"></p>
<p>类设计分析：</p>
<p><mark>较于第一次题目的改变与增加</mark></p>
<ul>
<li>对于飞机类、收发件人类改为与运送信息<mark>进行聚合</mark>，更加合理，符合<mark>合成复用原则</mark>。</li>
<li>订单类新增<mark>依赖折扣率接口</mark>，符合<mark>依赖倒转原则</mark>。</li>
<li>客户类变成<mark>抽象类</mark>，个人用户和集团用户<mark>继承</mark>自客户类，符合<mark>开闭原则</mark>。</li>
</ul>
<p>2.SourceMontor生成表：</p>
<p><img src="https://img2024.cnblogs.com/blog/3635068/202505/3635068-20250521210319399-656979661.png" alt="" loading="lazy"></p>
<p>对代码分析：</p>
<p>-注释率偏低：代码中缺少足够的注释，<mark>不利于理解</mark>。<br>
-最大复杂度过高：可能某个方法承担过多职责，<mark>需要合理拆分</mark>。<br>
-其他均在正常范围内，<mark>较为合理</mark>，如：方法数量、类数量、最大深度等。</p>
<h1 id="踩坑心得">踩坑心得</h1>
<h3 id="第一次作业-1">第一次作业</h3>
<ul>
<li>第一次作业中代码第一次提交，竟然全错误，然来发现要输出的是计费重量而不是物体的实际重量，因为示例的计费重量和实际重量相等则未发现。</li>
<li>刚开始拿到题目一直在研究如何设计类，想过很多方式，<mark>最开始是通过控制类来调用输出，和客户没有直接关系，客户里面也没有下订单的方法，由于题目背景为客户办理业务，所以还是觉得不妥，进行了修改，客户有下订单的方法，通过客户(客户调用控制类)来增加订单</mark>。</li>
<li>还有由于题目要<mark>进行迭代</mark>，并不知道下一步迭代的方向是什么，尽可能的设计更加合理，<mark>减少</mark>第二次题目对<mark>代码的修改</mark>，所以我把原来的货物类<mark>做成抽象类</mark>，继承下来一个长方体类，<mark>适合扩展</mark>。</li>
<li>对于运送信息类，最开始是没有这个类的，航班、收发件人类直接与订单类<mark>进行依赖</mark>，后来觉得他们<mark>有共性</mark>，把他们再<mark>包装成运输信息类</mark>，在与订单类依赖。</li>
</ul>
<h3 id="第二次作业-1">第二次作业</h3>
<ul>
<li>第二次作业在第一次作业的基础上进行迭代，虽然第一次有在为第二次做准备，但计划赶不上变化，如没想到客户类也要做成抽象类，不同的客户种类还有相应的折扣率，虽然货物类提前做成了抽象类，但是是按形状来划分的，而第二次题目是按货物种类划分的，有所区别。</li>
<li>第二次作业思维过于活跃(想改变第一次的结构)可能是第一次与第二次题集时间跨度较长，最开始想把抽象的货物类实现费率接口，<mark>形成接口-抽象类-类的三重</mark>结构，改动太大<mark>最后放弃</mark>，<mark>浪费了时间</mark>，最后还是在原来的接口上多<mark>实现了两个逻辑</mark>，脑子敢想手就刚做，最终<mark>力不从心</mark>。</li>
<li>写题目过程中<mark>过于犹豫</mark>，总觉得这样不好，有没有更好的，实现了感觉又不好，又换回之前的，浪费太多时间。</li>
</ul>
<h1 id="改进建议">改进建议</h1>
<ul>
<li>对于<mark>类与类之间的关系</mark>把握还不到位，要用依赖还是关联，组合还是聚合。</li>
<li>对于<mark>面向对象六大设计原则</mark>运用还不够熟练。</li>
<li><mark>代码规范性</mark>有待提高，增加更多的注释，便于他人理解，也方便自己以后维护。</li>
<li><mark>抽象思维能力</mark>不够，什么要做成类，什么不用，是否要合在一起，把握还不到位。</li>
<li>与<mark>现实结合</mark>不足，现实中和做出来的有所差别。</li>
<li>不要过于追求完美，适当就行，不然适得其反。</li>
</ul>
<h1 id="总结">总结</h1>
<ul>
<li>老师可以<mark>针对</mark>每个人的<mark>类图进行分析</mark>，告诉学生有什么不足，哪里<mark>需要改进</mark>，可以收获和学到更多。</li>
<li>可以设计出更多有意思的题目，锻炼我们的能力。</li>
<li>通过第二阶段的学习，对<mark>类设计</mark>和<mark>类与类之间的关系</mark>把握更加准确，能够运用六大设计原则处理问题。</li>
<li>学会了使用<mark>继承与多态</mark>，对继承与多态的理解与运用场景更加深刻明确。</li>
<li>对于<mark>抽象类与抽象方法</mark>的使用更加娴熟。</li>
</ul>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.04304889835648148" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-22 19:29">2025-05-22 19:23</span>&nbsp;
<a href="https://www.cnblogs.com/codeCosmos">zz君不见</a>&nbsp;
阅读(<span id="post_view_count">6</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18891875);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18891875', targetLink: 'https://www.cnblogs.com/codeCosmos/p/18891875/junbj', title: '航空货运系统总结性Blog' })">举报</a>
</div>
        