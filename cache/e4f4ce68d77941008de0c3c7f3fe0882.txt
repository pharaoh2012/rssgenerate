
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/linx/p/19000174" title="发布于 2025-07-23 10:07">
    <span role="heading" aria-level="2">Web前端入门第 81 问：JavaScript cookie 的读写操作</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>前端的 <code>cookie</code> 读写在 2020 年之前一直不存在一个官方的接口，每次需要使用 cookie 的时候，要么是引入三方插件，要么就需要自己封装一个公用的组件或函数。</p>
<p>npm 的 cookie 插件周下载量 6 千万左右，可以想象一下此功能在前端的应用场景有多么广泛~~</p>
<p>cookie 插件: <a href="https://www.npmjs.com/package/cookie" target="_blank" rel="noopener nofollow">https://www.npmjs.com/package/cookie</a></p>
<h2 id="cookie-用途">cookie 用途</h2>
<p>cookie 一般多用于存储标识符，比如用户身份标识（登录状态），个性化设置的一些标识（语言设置，主题设置等等），用户行为跟踪标识（跟踪用户点击行为等）。</p>
<p>以前还有很多的广告商用于跟踪用户行为，现在由于浏览器的安全机制越来越严格，广告商基本不再使用 cookie 跟踪用户信息，转而使用浏览器的指纹特征来做跟踪记录。浏览器指纹可参考文章：<a href="https://mp.weixin.qq.com/s/RMamuQIQC0uDRTcs2LtaVA" target="_blank" rel="noopener nofollow">浏览器 15 个常见指纹特征，使用插件 FingerprintJS 生成浏览器指纹</a></p>
<h2 id="cookie-安全问题">cookie 安全问题</h2>
<p>由于 cookie 存储在用户浏览器，极易被嵌入的三方代码获取，用于 XSS 攻击，CSRF 跨站请求伪造等等。</p>
<p>所以在使用 cookie 存储关键信息时候，需要注意配置 cookie 的安全属性，比如：过期时间（expires）、安全（secure）、sameSite等。</p>
<h2 id="cookie-相关属性">cookie 相关属性</h2>
<p>name：记录 cookie 名称的字符串。<br>
value：记录 cookie 值。<br>
domain：表示 cookie 的所属域，跨域不能访问。<br>
expires：表示 cookie 的过期时间，使用 unix 时间戳，不设置默认是会话结束，即浏览器关闭就失效。<br>
path：记录 cookie 路径的字符串，设置了路径之后，跨路径无法访问。默认为 /。<br>
partitioned：cookie是否分区，实验性质。<br>
sameSite：设置跨站点请求中是否发送cookie。<br>
secure：设置后表示只能通过 HTTPS 协议访问。</p>
<hr>
<p>以下属性仅支持后端设置，前端无法处理。<br>
httpOnly：设置后客户端脚本（即浏览器端）无法访问 cookie。</p>
<h2 id="cookie-存储方法">cookie 存储方法</h2>
<p>最原始的 cookie 存储方法只能使用 <code>document.cookie</code> 属性，读写操作都只能通过它~~</p>
<p>例如一个完整的设置 cookie 的代码：</p>
<pre><code class="language-js">document.cookie = `name=${encodeURIComponent('前端路引')};expires=${new Date(2026, 0, 1).toGMTString()};path=/;Secure;SameSite=Lax`;
</code></pre>
<p>注意：写入 cookie 的属性值不能存在换行，换行无效，代码也不会报错，比如：</p>
<pre><code class="language-js">// 由于有换行符存在以下代码浏览器不报错，也不会写入cookie
document.cookie = `
  name=${encodeURIComponent('前端路引')};
  expires=${new Date(2026, 0, 1).toGMTString()};
  path=/;
  domain=localhost;
  Secure;
  SameSite=Lax
`;
</code></pre>
<p><strong>取值：</strong></p>
<pre><code class="language-js">const name = document.cookie.split(';').find(item =&gt; item.trim().startsWith('name=')).split('=')[1]
console.log(decodeURIComponent(name))
</code></pre>
<p>这种读写方法始终不太方便，然后可以稍稍的封装一下：</p>
<pre><code class="language-js">/**
 * 获取或者设置cookie
 * @param name {String} cookie名
 * @param value {String} cookie值，如果传递该参数，则直接取值
 * @param days {Number} 设置cookie有效天数
 * @return 如果取值，则返回值，没值则返回null
 */
function cookie (name, value, days) {
  if (value !== undefined) {
    if (days === undefined || days === null || days === '') {
      document.cookie = name + '=' + encodeURIComponent(value) + '; path=/;';
      return;
    }
    days = isNaN(days) ? 0 : days;
    var exp = new Date();
    exp.setTime(exp.getTime() + days * 24 * 60 * 60 * 1000);
    document.cookie = name + '=' + encodeURIComponent(value) + '; path=/;expires=' + exp.toGMTString();
  } else {
    var reg = new RegExp('(^| )' + name + '=([^;]*)(;|$)');
    var arr = document.cookie.match(reg);
    if (arr) {
      return decodeURIComponent(arr[2]);
    } else {
      return null;
    }
  }
}
</code></pre>
<p>以上代码只是一个基础的封装使用，可以基于此扩展一下其他配置项！！也可以直接下载 npm 开源的 cookie/js-cookie 插件。</p>
<h2 id="cookiestore">CookieStore</h2>
<p>document.cookie 操作 cookie 需要对字符串进行处理，如果存在多个 cookie 的情况下，处理起来就更麻烦，所以在 2020 年 JS 标准就新增了 <code>CookieStore</code> 接口，用于管理 cookie。此接口大大的简化了 cookie 的读写操作，用起来也更加方便。</p>
<p><strong>CookieStore 只能在 https 或者 localhost 下使用，所以不再支持 Secure 配置，默认就是在 https 中传输。</strong></p>
<p><code>CookieStore</code> 对象就四个方法，都返回 <code>Promise</code> 对象：</p>
<pre><code class="language-js">// 删除
cookieStore.delete() // 返回 Promise
// 获取
cookieStore.get() // 返回 Promise
// 获取全部
cookieStore.getAll() // 返回 Promise
// 写入
cookieStore.set() // 返回 Promise

// 支持change事件用于监听 Cookie 变化
cookieStore.addEventListener("change", (event) =&gt; { })
cookieStore.onchange = (event) =&gt; { }
</code></pre>
<p>使用示例：</p>
<pre><code class="language-js">(async () =&gt; {
  cookieStore.addEventListener("change", (event) =&gt; {
    console.log(event.changed);
  })
  cookieStore.onchange = (event) =&gt; {
    console.log(event.changed);
  }

  
  await cookieStore.set('name', '公众号')
  await cookieStore.get('name').then(value =&gt; {
    console.log(value)
  })
  await cookieStore.delete('name').then(() =&gt; {
    console.log('删除成功')
  })
  await cookieStore.set({
    name: 'name',
    value: '前端路引',
    expires: new Date(2026, 0, 1).getTime(), // Unix 时间戳（以毫秒为单位表示）
    path: '/',
    secure: true, // 不支持设置
    sameSite: 'lax'
  })
  await cookieStore.get({
    name: 'name',
    url: window.location.href
  }).then(value =&gt; {
    console.log(value)
  })
  await cookieStore.set('type', '公众号')
  await cookieStore.getAll().then(values =&gt; {
    console.log(values)
  })
})()
</code></pre>
<p>更多用法参考 MDN 文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CookieStore" target="_blank" rel="noopener nofollow">https://developer.mozilla.org/zh-CN/docs/Web/API/CookieStore</a></p>
<h2 id="写在最后">写在最后</h2>
<p>cookieStore 可以大大简化前端读写 cookie 的复杂度，但由于其 API 引入时间较晚，基本都是在 2020 年之后的浏览器才开始支持，所以在使用时请注意浏览器兼容情况。</p>
<p>在使用 Cookie 保存敏感数据时，请务必注意数据安全，比如存储用户的身份令牌，如果身份令牌被三方代码获取，及其容易造成跨站请求伪造，导致用户信息泄露！！</p>

</div>
<div id="MySignature" role="contentinfo">
    <p>&nbsp;</p>
<p style="font-size: 18px;font-weight: bold;">文章首发于微信公众号【<span style="color:rgb(255, 71, 87)">前端路引</span>】，欢迎 <span style="color:#4ec259">微信扫一扫</span> 查看更多文章。</p>
<p>
  <img style="max-width: 320px;" src="https://images.cnblogs.com/cnblogs_com/linx/2447020/o_250228035031_%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.png">
</p>
<p>本文来自博客园，作者：<a href="https://www.cnblogs.com/linx/" target="_blank">前端路引</a>，转载请注明原文链接：<a href="https://www.cnblogs.com/linx/p/19000174" target="_blank">https://www.cnblogs.com/linx/p/19000174</a></p>
<p>&nbsp;</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.0006944444444444445" data-date-updated="2025-07-23 10:08">2025-07-23 10:07</span>&nbsp;
<a href="https://www.cnblogs.com/linx">前端路引</a>&nbsp;
阅读(<span id="post_view_count">355</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19000174);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19000174', targetLink: 'https://www.cnblogs.com/linx/p/19000174', title: 'Web前端入门第 81 问：JavaScript cookie 的读写操作' })">举报</a>
</div>
        