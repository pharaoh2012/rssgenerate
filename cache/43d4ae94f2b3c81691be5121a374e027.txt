
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/Amd794/p/18901508" title="发布于 2025-05-29 00:12">
    <span role="heading" aria-level="2">API安全大揭秘：认证与授权的双面舞会</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        <img src="https://img2024.cnblogs.com/blog/1546022/202505/1546022-20250528220435037-1106802064.png" alt="API安全大揭秘：认证与授权的双面舞会" class="desc_img">
        API安全的核心需求包括认证与授权机制。认证验证用户身份，如用户名密码登录；授权验证用户是否有权限执行特定操作，如管理员删除数据。典型安全威胁包括未授权访问、凭证泄露和权限提升。FastAPI通过OpenAPI规范支持OAuth2、HTTP Basic等安全方案，依赖注入系统实现灵活验证。OAuth2协议通过授权请求、授权许可、访问令牌等步骤确保安全访问。FastAPI实现OAuth2密码流程示例包括环境准备、核心代码实现和运行测试，确保用户身份验证和权限控制。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<hr>
<p>title: API安全大揭秘：认证与授权的双面舞会<br>
date: 2025/05/28 12:14:35<br>
updated: 2025/05/28 12:14:35<br>
author: <a href="https://cmdragon.cn" target="_blank" rel="noopener nofollow"> cmdragon </a></p>
<p>excerpt:<br>
API安全的核心需求包括认证与授权机制。认证验证用户身份，如用户名密码登录；授权验证用户是否有权限执行特定操作，如管理员删除数据。典型安全威胁包括未授权访问、凭证泄露和权限提升。FastAPI通过OpenAPI规范支持OAuth2、HTTP Basic等安全方案，依赖注入系统实现灵活验证。OAuth2协议通过授权请求、授权许可、访问令牌等步骤确保安全访问。FastAPI实现OAuth2密码流程示例包括环境准备、核心代码实现和运行测试，确保用户身份验证和权限控制。</p>
<p>categories:</p>
<ul>
<li>后端开发</li>
<li>FastAPI</li>
</ul>
<p>tags:</p>
<ul>
<li>API安全</li>
<li>认证与授权</li>
<li>OAuth2协议</li>
<li>FastAPI</li>
<li>安全威胁</li>
<li>依赖注入</li>
<li>访问令牌</li>
</ul>
<hr>
<img src="https://static.shutu.cn/shutu/jpeg/open71/2025/05/28/7a0bbe27be627e62cd4dbd6c64e64d54.jpeg" title="cmdragon_cn.png" alt="cmdragon_cn.png">
<img src="https://api2.cmdragon.cn/upload/cmder/20250304_012821924.jpg" title="cmdragon_cn.png" alt="cmdragon_cn.png">
<p>扫描<a href="https://api2.cmdragon.cn/upload/cmder/20250304_012821924.jpg" target="_blank" rel="noopener nofollow">二维码</a><br>
关注或者微信搜一搜：<code>编程智域 前端至全栈交流与成长</code></p>
<p><a href="https://tools.cmdragon.cn/zh/apps?category=ai_chat" target="_blank" rel="noopener nofollow">探索数千个预构建的 AI 应用，开启你的下一个伟大创意</a>：<a href="https://tools.cmdragon.cn/" target="_blank" rel="noopener nofollow">https://tools.cmdragon.cn/</a></p>
<h1 id="第一章理解api安全的基本需求">第一章：理解API安全的基本需求</h1>
<h2 id="为什么需要认证与授权机制">为什么需要认证与授权机制</h2>
<h3 id="认证authentication与授权authorization的区别">认证（Authentication）与授权（Authorization）的区别</h3>
<ul>
<li><strong>认证</strong>：验证用户身份的过程（例如：用户名密码登录）。
<blockquote>
<p>类比：进入公司大楼时出示工牌（证明你是员工）</p>
</blockquote>
</li>
<li><strong>授权</strong>：验证用户是否有权限执行特定操作（例如：管理员删除数据）。
<blockquote>
<p>类比：不同工牌对应不同的门禁权限（普通员工不能进入机房）</p>
</blockquote>
</li>
</ul>
<h3 id="典型安全威胁场景">典型安全威胁场景</h3>
<ol>
<li><strong>未授权访问</strong>：攻击者直接调用<code>/admin/delete-data</code>接口删除数据</li>
<li><strong>凭证泄露</strong>：用户密码在传输过程中被窃取</li>
<li><strong>权限提升</strong>：普通用户越权访问管理员接口</li>
</ol>
<h3 id="fastapi的安全设计原则">FastAPI的安全设计原则</h3>
<ul>
<li>内置支持OpenAPI规范的安全方案（OAuth2、HTTP Basic等）</li>
<li>通过<strong>依赖注入系统</strong>实现灵活的安全验证逻辑</li>
<li>自动生成交互式API文档中的安全测试界面</li>
</ul>
<hr>
<h2 id="oauth2协议在web服务中的应用场景">OAuth2协议在Web服务中的应用场景</h2>
<h3 id="oauth2核心概念图解">OAuth2核心概念图解</h3>
<pre><code>+--------+                               +---------------+
|        |--(A) 授权请求 -&gt;---------------|  资源所有者    |
|        |                               | （用户）       |
|        |&lt;-(B) 授权许可 ----------------|               |
|        |                               +---------------+
|        |
|        |                               +---------------+
|        |--(C) 授权许可 -&gt;---------------| 授权服务器     |
| 客户端  |                               | （签发令牌）   |
|        |&lt;-(D) 访问令牌 ----------------|               |
|        |                               +---------------+
|        |
|        |                               +---------------+
|        |--(E) 访问令牌 -&gt;---------------| 资源服务器     |
|        |                               | （存储数据）   |
|        |&lt;-(F) 受保护资源 --------------|               |
+--------+                               +---------------+
</code></pre>
<h3 id="fastapi实现oauth2密码流程示例">FastAPI实现OAuth2密码流程示例</h3>
<h4 id="环境准备">环境准备</h4>
<pre><code class="language-bash"># 安装依赖库（指定版本保证兼容性）
pip install fastapi==0.68.0 uvicorn==0.15.0 
pip install python-jose[cryptography]==3.3.0 
pip install passlib[bcrypt]==1.7.4
</code></pre>
<h4 id="核心代码实现">核心代码实现</h4>
<pre><code class="language-python">from fastapi import Depends, FastAPI, HTTPException
from fastapi.security import OAuth2PasswordBearer
from jose import JWTError, jwt
from passlib.context import CryptContext
from pydantic import BaseModel
from datetime import datetime, timedelta

# 安全配置常量
SECRET_KEY = "your-secret-key-here"
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30

# 密码加密上下文
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# OAuth2方案声明
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")


# 用户数据模型
class User(BaseModel):
    username: str
    disabled: bool = False


class UserInDB(User):
    hashed_password: str


# 令牌生成函数
def create_access_token(data: dict):
    to_encode = data.copy()
    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    to_encode.update({"exp": expire})
    return jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)


# 认证依赖项
async def get_current_user(token: str = Depends(oauth2_scheme)):
    credential_exception = HTTPException(
        status_code=401,
        detail="无法验证凭证",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            raise credential_exception
    except JWTError:
        raise credential_exception

    # 实际项目应查询数据库
    user = UserInDB(
        username=username,
        hashed_password="fakehash",
        disabled=False
    )
    if user.disabled:
        raise HTTPException(status_code=400, detail="用户已被禁用")
    return user


app = FastAPI()


@app.post("/token")
async def login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends()):
    # 验证用户名密码（示例硬编码）
    if form_data.username != "testuser" or form_data.password != "testpass":
        raise HTTPException(
            status_code=401,
            detail="用户名或密码错误",
            headers={"WWW-Authenticate": "Bearer"},
        )

    access_token = create_access_token(
        data={"sub": form_data.username}
    )
    return {"access_token": access_token, "token_type": "bearer"}


@app.get("/protected/")
async def read_protected_route(current_user: User = Depends(get_current_user)):
    return {"message": "已授权访问", "user": current_user.username}
</code></pre>
<h4 id="运行与测试">运行与测试</h4>
<pre><code class="language-bash">uvicorn main:app --reload
</code></pre>
<p>打开浏览器访问 <code>http://localhost:8000/docs</code>，在Swagger界面中：</p>
<ol>
<li>点击 <code>/token</code> 端点，输入测试凭证（username: testuser, password: testpass）</li>
<li>复制返回的access_token</li>
<li>点击 <code>/protected/</code> 端点，在Authorization弹窗中输入 <code>Bearer &lt;your-token&gt;</code></li>
</ol>
<hr>
<h2 id="课后quiz">课后Quiz</h2>
<p><strong>Q1：认证与授权的根本区别是什么？</strong><br>
A) 认证确认身份，授权验证权限<br>
B) 授权在前，认证在后<br>
C) 两者是同义词</p>
<details>
<summary>点击查看答案</summary>
正确答案：A  
解析：认证是验证用户身份的过程（如登录），授权是验证该身份是否有权限执行特定操作（如访问管理员接口）。
</details>
<p><strong>Q2：OAuth2的授权码流程包含哪些主要步骤？</strong><br>
A) 客户端直接获取访问令牌<br>
B) 用户授权 → 获取授权码 → 交换访问令牌<br>
C) 用户名密码直接传递给资源服务器</p>
<details>
<summary>点击查看答案</summary>
正确答案：B  
解析：完整的授权码流程需要通过授权服务器中转授权码，避免客户端直接接触用户凭证。
</details>
<hr>
<h2 id="常见报错解决方案">常见报错解决方案</h2>
<p><strong>报错：422 Unprocessable Entity</strong></p>
<pre><code class="language-json">{
  "detail": [
    {
      "loc": [
        "body",
        "password"
      ],
      "msg": "field required",
      "type": "value_error.missing"
    }
  ]
}
</code></pre>
<p><strong>原因分析</strong>：</p>
<ul>
<li>请求体缺少必填字段（如password字段）</li>
<li>字段数据类型不匹配（例如数字传入了字符串）</li>
</ul>
<p><strong>解决方法</strong>：</p>
<ol>
<li>检查Swagger文档中的请求体模型</li>
<li>使用Postman验证请求体格式：</li>
</ol>
<pre><code class="language-json">{
  "username": "testuser",
  "password": "testpass"
}
</code></pre>
<ol start="3">
<li>在Pydantic模型中使用<code>...</code>表示必填字段：</li>
</ol>
<pre><code class="language-python">class LoginRequest(BaseModel):
    username: str
    password: str  # 必填字段
</code></pre>
<p><strong>预防建议</strong>：</p>
<ul>
<li>启用Pydantic的严格模式：</li>
</ul>
<pre><code class="language-python">from pydantic import StrictStr


class LoginRequest(BaseModel):
    username: StrictStr
    password: StrictStr
</code></pre>
<ul>
<li>在路由中使用<code>response_model_exclude_unset=True</code>过滤未设置字段</li>
</ul>
<p>余下文章内容请点击跳转至 个人博客页面 或者 扫码关注或者微信搜一搜：<code>编程智域 前端至全栈交流与成长</code>，阅读完整的文章：<a href="https://blog.cmdragon.cn/posts/547a7e3d7ac7/" target="_blank" rel="noopener nofollow">API安全大揭秘：认证与授权的双面舞会 | cmdragon's Blog</a></p>
<h2 id="往期文章归档">往期文章归档：</h2>
<ul>
<li><a href="https://blog.cmdragon.cn/posts/4a29b618aa59/" target="_blank" rel="noopener nofollow">异步日志监控：FastAPI与MongoDB的高效整合之道 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/6455cdef0c41/" target="_blank" rel="noopener nofollow">FastAPI与MongoDB分片集群：异步数据路由与聚合优化 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/3c81964d922c/" target="_blank" rel="noopener nofollow">FastAPI与MongoDB Change Stream的实时数据交响曲 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/b933afc93ab1/" target="_blank" rel="noopener nofollow">地理空间索引：解锁日志分析中的位置智慧 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/73a07166228e/" target="_blank" rel="noopener nofollow">异步之舞：FastAPI与MongoDB的极致性能优化之旅 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/f243ecf59662/" target="_blank" rel="noopener nofollow">异步日志分析：MongoDB与FastAPI的高效存储揭秘 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/2565cdc59f74/" target="_blank" rel="noopener nofollow">MongoDB索引优化的艺术：从基础原理到性能调优实战 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/714772e1fbe0/" target="_blank" rel="noopener nofollow">解锁FastAPI与MongoDB聚合管道的性能奥秘 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/bd24c2bf486f/" target="_blank" rel="noopener nofollow">异步之舞：Motor驱动与MongoDB的CRUD交响曲 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/8d4b0186aaf6/" target="_blank" rel="noopener nofollow">异步之舞：FastAPI与MongoDB的深度协奏 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/67c49b3ab489/" target="_blank" rel="noopener nofollow">数据库迁移的艺术：FastAPI生产环境中的灰度发布与回滚策略 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/c761e999ff26/" target="_blank" rel="noopener nofollow">数据库迁移的艺术：团队协作中的冲突预防与解决之道 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/1129cda88dea/" target="_blank" rel="noopener nofollow">驾驭FastAPI多数据库：从读写分离到跨库事务的艺术 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/e878319e1f7e/" target="_blank" rel="noopener nofollow">数据库事务隔离与Alembic数据恢复的实战艺术 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/24aeaadbab78/" target="_blank" rel="noopener nofollow">FastAPI与Alembic：数据库迁移的隐秘艺术 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/944b5aca784d/" target="_blank" rel="noopener nofollow">飞行中的引擎更换：生产环境数据库迁移的艺术与科学 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/24dfbc5f2148/" target="_blank" rel="noopener nofollow">Alembic迁移脚本冲突的智能检测与优雅合并之道 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/91ba0550aa71/" target="_blank" rel="noopener nofollow">多数据库迁移的艺术：Alembic在复杂环境中的精妙应用 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/55a63eaa29d3/" target="_blank" rel="noopener nofollow">数据库事务回滚：FastAPI中的存档与读档大法 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/24a6445f18ef/" target="_blank" rel="noopener nofollow">Alembic迁移脚本：让数据库变身时间旅行者 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/57d1e2810a31/" target="_blank" rel="noopener nofollow">数据库连接池：从银行柜台到代码世界的奇妙旅程 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/336930484b68/" target="_blank" rel="noopener nofollow">点赞背后的技术大冒险：分布式事务与SAGA模式 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/bd59ee70c62e/" target="_blank" rel="noopener nofollow">N+1查询：数据库性能的隐形杀手与终极拯救指南 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/9f5729db84ef/" target="_blank" rel="noopener nofollow">FastAPI与Tortoise-ORM开发的神奇之旅 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/62012cf83e26/" target="_blank" rel="noopener nofollow">DDD分层设计与异步职责划分：让你的代码不再“异步”混乱 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/c195d6c4d0b5/" target="_blank" rel="noopener nofollow">异步数据库事务锁：电商库存扣减的防超卖秘籍 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/f0e851eb1a74/" target="_blank" rel="noopener nofollow">FastAPI中的复杂查询与原子更新指南 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/512d338e0833/" target="_blank" rel="noopener nofollow">深入解析Tortoise-ORM关系型字段与异步查询 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/7649fa5d5b04/" target="_blank" rel="noopener nofollow">FastAPI与Tortoise-ORM模型配置及aerich迁移工具 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/c9824156400c/" target="_blank" rel="noopener nofollow">异步IO与Tortoise-ORM的数据库 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/74b39391a524/" target="_blank" rel="noopener nofollow">FastAPI数据库连接池配置与监控 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/f05753c1a8af/" target="_blank" rel="noopener nofollow">分布式事务在点赞功能中的实现 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/644d88ac6ff1/" target="_blank" rel="noopener nofollow">Tortoise-ORM级联查询与预加载性能优化 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/d7fcb94d965b/" target="_blank" rel="noopener nofollow">使用Tortoise-ORM和FastAPI构建评论系统 | cmdragon's Blog</a></li>
<li><a href="https://tools.cmdragon.cn/sitemap_index.xml" target="_blank" rel="noopener nofollow">XML Sitemap</a></li>
<li></li>
</ul>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.0034028704942129628" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-29 00:13">2025-05-29 00:12</span>&nbsp;
<a href="https://www.cnblogs.com/Amd794">Amd794</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18901508);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18901508', targetLink: 'https://www.cnblogs.com/Amd794/p/18901508', title: 'API安全大揭秘：认证与授权的双面舞会' })">举报</a>
</div>
        