
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/wang_yb/p/18732063" title="发布于 2025-02-23 13:57">
    <span role="heading" aria-level="2">『Python底层原理』--Python属性的工作原理</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p><code>Python</code>中的属性操作（如获取、设置和删除属性）是我们日常编程中非常常见的操作。</p>
<p>但你有没有想过，当我们写下<code>obj.attr</code>或<code>obj.attr = value</code>时，<code>Python</code> 内部究竟发生了什么？</p>
<p>本文将探讨<code>Python</code>属性的工作原理，并通过简单的代码示例来更好地理解这些概念。</p>
<h1 id="1-属性的基本操作">1. 属性的基本操作</h1>
<p>在<code>Python</code>中，属性基本操作主要有三种：</p>
<ol>
<li>获取属性值：<code>value = obj.attr</code></li>
<li>设置属性值：<code>obj.attr = value</code></li>
<li>删除属性：  <code>del obj.attr</code></li>
</ol>
<p>这些操作看似简单，但它们的实现却依赖于<code>Python</code>的底层机制。</p>
<p>为了更好地理解这些机制，我们需要先了解<strong>描述符</strong>的概念。</p>
<h1 id="2-描述符属性的核心机制">2. 描述符：属性的核心机制</h1>
<p><strong>描述符</strong>是<code>Python</code>中一个非常重要的概念，它是实现属性功能的核心机制。</p>
<p><strong>描述符</strong>是一个对象，它通过实现特定的方法（如<code>__get__</code>、<code>__set__</code>和<code>__delete__</code>）来控制属性的访问、设置和删除。</p>
<p>例如，如下实现一个简单的<strong>描述符</strong>类：</p>
<pre><code class="language-python">class Descriptor:
    def __get__(self, instance, owner):
        return f"从 {instance} 获取属性值"

    def __set__(self, instance, value):
        print(f"设置 {instance} 的属性值: {value}")

    def __delete__(self, instance):
        print(f"从 {instance} 中删除属性值")
</code></pre>
<p>我们可以将这个<strong>描述符</strong>作为<strong>类属性</strong>使用：</p>
<pre><code class="language-python">obj = MyClass()
print(obj.attr)  # 调用 __get__
obj.attr = "Hello"  # 调用 __set__
del obj.attr  # 调用 __delete__
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202502/83005-20250223135637449-252274492.png" alt="" loading="lazy"></p>
<p>在<code>CPython</code>中，描述符通过<code>tp_descr_get</code>和<code>tp_descr_set</code>两个函数指针实现。</p>
<h1 id="3-属性的存储与查找">3. 属性的存储与查找</h1>
<p><code>Python</code>中的属性存储在对象的字典（<code>__dict__</code>）中，或者在类的字典中。</p>
<p>当我们访问属性时，<code>Python</code>会按照以下顺序查找：</p>
<ol>
<li>在实例的<code>__dict__</code>中查找</li>
<li>如果未找到，按照方法解析顺序在类及其父类的<code>__dict__</code>中查找</li>
<li>如果仍未找到，抛出<code>AttributeError</code></li>
</ol>
<p>比如：</p>
<pre><code class="language-python">class Parent:
    x = "Parent"


class Child(Parent):
    y = "Child"


obj = Child()
print(obj.x)  # 输出 "Parent"，从父类中找到
print(obj.y)  # 输出 "Child"，从子类中找到
</code></pre>
<h1 id="4-类型的属性管理">4. 类型的属性管理</h1>
<p>类型（如<code>int</code>、<code>list</code>）本身也有属性，这些属性的管理方式与普通对象类似，但有一些特殊之处。</p>
<p>因为类型本身是一个对象，它的类型是<code>type</code>，它是一个<strong>元类型</strong>。</p>
<p>当我们访问类型属性时，<code>Python</code>会按照以下顺序查找：</p>
<ol>
<li>在类型的字典中查找</li>
<li>如果未找到，按照 方法解析顺序 在元类型的字典中查找</li>
</ol>
<p>这里有一个<strong>元类型</strong>的概念，所谓<strong>元类型</strong>，是指它的<strong>实例</strong>是一个<strong>类型</strong>。</p>
<p>也就是说，正如<strong>类</strong>用于创建<strong>对象</strong>一样，<strong>元类型</strong>是用于创建<strong>类</strong>的。</p>
<p><code>Python</code>有一个内置的元类型，称为<code>type</code>，它是所有内置类型中的<strong>元类型</strong>。</p>
<p>比如我们在<code>Python</code>中创建一个类一般使用下面的方式：</p>
<pre><code class="language-python">class MyClass:
    pass
</code></pre>
<p>也可以改成下面这样，和上面是等价的。</p>
<pre><code class="language-python">MyClass = type('MyClass', (), {})
</code></pre>
<h1 id="5-自定义属性管理">5. 自定义属性管理</h1>
<p><code>Python</code>允许我们通过定义特殊方法来自定义属性的行为，这些方法包括：</p>
<ul>
<li><code>__getattribute__</code>：拦截所有属性访问</li>
<li><code>__getattr__</code>：仅在属性未找到时被调用</li>
<li><code>__setattr__</code>：拦截所有属性设置</li>
<li><code>__delattr__</code>：拦截所有属性删除</li>
</ul>
<p>下面示例中，自定义了属性的访问和设置。</p>
<pre><code class="language-python">class MyClass:
    def __getattribute__(self, name):
        print(f"拦截所有属性的访问： {name}")
        return super().__getattribute__(name)

    def __getattr__(self, name):
        print(f"拦截不存在属性的访问： {name}")
        return f"属性 {name} 不存在"

    def __setattr__(self, name, value):
        print(f"设置属性值： {name} = {value}")
        super().__setattr__(name, value)


obj = MyClass()
obj.x = "Hello"
print(obj.x)  # 访问存在的属性
print(obj.y)  # 访问不存在的属性
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202502/83005-20250223135637363-722838186.png" alt="" loading="lazy"></p>
<p>当<strong>设置属性</strong>（<code>obj.x = "Hello"</code>）时，调用了 <code>__setattr__</code>；</p>
<p>访问<strong>存在的属性</strong>（<code>print(obj.x)</code>）时，调用了<code>__getattribute__</code>；</p>
<p>访问<strong>不存在的属性</strong>（<code>print(obj.y)</code>）时，调用了<code>__getattribute__</code>和<code>__getattr__</code>，</p>
<p>且是先调用<code>__getattribute__</code>。</p>
<h1 id="6-总结">6. 总结</h1>
<p><code>Python</code>的属性机制非常强大，它通过描述符、特殊方法和底层的字节码操作实现了灵活的属性管理。</p>
<p>通过理解这些机制，我们可以更好地设计类和对象，优化代码性能，并避免常见的陷阱。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.34554089244444447" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-23 13:57">2025-02-23 13:57</span>&nbsp;
<a href="https://www.cnblogs.com/wang_yb">wang_yb</a>&nbsp;
阅读(<span id="post_view_count">43</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18732063" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18732063);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18732063', targetLink: 'https://www.cnblogs.com/wang_yb/p/18732063', title: '『Python底层原理』--Python属性的工作原理' })">举报</a>
</div>
        