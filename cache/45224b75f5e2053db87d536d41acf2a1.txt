
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/noear/p/19054057" title="发布于 2025-08-23 10:01">
    <span role="heading" aria-level="2">Spring AOP 与 Solon AOP 有什么区别？</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        Spring和Solon作为容器框架都支持IOC和AOP。Spring AOP通过表达式定义切入点，支持有侵入（注解）和无侵入（包/类/方法）方式；Solon AOP仅通过注解定义切入点（有侵入）。Spring AOP灵活性高但表达式复杂，可实现完全无侵入；Solon AOP透明性强但功能受限。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>Spring 和 Solon 作为容器型框架。都具有 IOC 和 AOP 的能力。其中：</p>
<ul>
<li>Spring AOP 使用表达式确定“切入点”，可以是某个注解（有侵入），可以是包名或类名或方法（无侵入）</li>
<li>Solon AOP 只使用某个注解确定“切入点”（有侵入）</li>
</ul>
<p>先看两个示例</p>
<h3 id="1spring-aop-示例">1、Spring AOP 示例</h3>
<p>Spring AOP 有很多不同的能力构建方式。此处采用更简洁的一种方式：</p>
<pre><code class="language-java">import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.*;
import org.springframework.stereotype.Component;

@Aspect
@Component
public class LoggingAspect {
    @Pointcut("execution(* com.example.demo.service.*.*(..))") //也可以是某注解表达式
    public void serviceLayer() {}

    @Around("serviceLayer()")
    public Object logAround(ProceedingJoinPoint joinPoint) throws Throwable {
        System.out.println("test");
        return joinPoint.proceed();
    }
}
</code></pre>
<p>应用示例</p>
<pre><code class="language-java">package com.example.demo.service;

@Component
public class UserService {
    public String getUserById(Long id) {
        return "user-" + id;
    }

    public void updateUser(String user) {
        System.out.println("update: " + user);
    }
}
</code></pre>
<h3 id="2solon-aop-示例">2、Solon AOP 示例</h3>
<p>Solon AOP 有两种能力构建方式。此处采用更简洁的一种方式：</p>
<pre><code class="language-java">import org.noear.solon.annotation.Around;
import org.noear.solon.core.aspect.Invocation;
import org.noear.solon.core.aspect.MethodInterceptor;

@Around(Logging.LoggingInterceptor.class) //为注解，附加包围处理的能力
@Target({ElementType.TYPE,  ElementType.METHOD})
@Retention(RetentionPolicy.RUNTIME)
@Documented
public @interface Logging {

    class LoggingInterceptor implements MethodInterceptor {
        @Override
        public Object doIntercept(Invocation i) throws Throwable {
            System.out.println("test");
            return i.invoke();
        }
    }
}
</code></pre>
<p>应用示例</p>
<pre><code class="language-java">package com.example.demo.service;

@Logging
@Component
public class UserService {
    public String getUserById(Long id) {
        return "user-" + id;
    }

    public void updateUser(String user) {
        System.out.println("update: " + user);
    }
}
</code></pre>
<h3 id="3总结">3、总结</h3>
<table>
<thead>
<tr>
<th>体验感受</th>
<th>Spring AOP</th>
<th>Solon AOP</th>
</tr>
</thead>
<tbody>
<tr>
<td>有侵入体验</td>
<td>通过表达式描述，使用时添加“注解”</td>
<td>定义注解，使用时添加“注解”</td>
</tr>
<tr>
<td>无侵入体验</td>
<td>通过表达式描述包名或类名或方法，使用时无感</td>
<td>/</td>
</tr>
<tr>
<td>优点</td>
<td>可以完全“无侵入”实现 AOP</td>
<td>附加了什么能力比较透明</td>
</tr>
<tr>
<td>缺点</td>
<td>表达式有点难写；（可无限制添加）可能会有些混乱</td>
<td>（不能随意添加）可能会有局限性</td>
</tr>
</tbody>
</table>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-08-23 10:01">2025-08-23 10:01</span>&nbsp;
<a href="https://www.cnblogs.com/noear">带刺的坐椅</a>&nbsp;
阅读(<span id="post_view_count">52</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19054057);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19054057', targetLink: 'https://www.cnblogs.com/noear/p/19054057', title: 'Spring AOP 与 Solon AOP 有什么区别？' })">举报</a>
</div>
        