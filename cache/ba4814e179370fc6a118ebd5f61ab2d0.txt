
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/Johny-zhao/p/18874915" title="发布于 2025-05-13 21:29">
    <span role="heading" aria-level="2">K8S+nginx+MYSQL+TOMCAT高可用架构企业自建网站</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<div class="_9663006">
<div class="fbb737a4">
<div class="dad65929">
<div class="_4f9bf79 d7dc56a8 _43c05b5">
<div class="ds-markdown ds-markdown--block">
<p class="ds-markdown-paragraph">以下是基于&nbsp;<strong>多Master高可用Kubernetes集群</strong>&nbsp;的企业级部署详细步骤，涵盖&nbsp;<strong>Nginx Ingress + MySQL高可用集群 + Tomcat负载均衡</strong>&nbsp;的完整流程：</p>
<hr>
<h3><strong>一、前置条件准备</strong></h3>
<h4><strong>1. 节点规划</strong></h4>
<ul>
<li>
<p class="ds-markdown-paragraph"><strong>Master节点</strong>：3台（高可用控制平面，需奇数台）</p>
</li>
<li>
<p class="ds-markdown-paragraph"><strong>Worker节点</strong>：至少2台</p>
</li>
<li>
<p class="ds-markdown-paragraph"><strong>操作系统</strong>：CentOS 7/8 或 Ubuntu 20.04+</p>
</li>
<li>
<p class="ds-markdown-paragraph"><strong>网络要求</strong>：所有节点间网络互通，禁用防火墙/SELinux</p>
</li>
</ul>
<h4><strong>2. 配置主机名及解析</strong></h4>
<div class="md-code-block md-code-block-light">
<pre><span class="token comment"># 所有节点执行
<span class="token function">sudo hostnamectl set-hostname master1  <span class="token comment"># 按实际修改为master1, master2, master3, worker1等
<span class="token function">sudo <span class="token function">vi /etc/hosts
<span class="token comment"># 添加以下内容（替换实际IP）：
<span class="token number">192.168.1.101 master1
<span class="token number">192.168.1.102 master2
<span class="token number">192.168.1.103 master3
<span class="token number">192.168.1.201 worker1
<span class="token number">192.168.1.202 worker2</span></span></span></span></span></span></span></span></span></span></span></pre>
</div>
<h4><strong>3. 安装依赖工具</strong></h4>
<div class="md-code-block md-code-block-light">
<pre><span class="token comment"># 所有节点执行
<span class="token function">sudo <span class="token function">apt-get update <span class="token operator">&amp;&amp; <span class="token function">sudo <span class="token function">apt-get <span class="token function">install <span class="token parameter variable">-y apt-transport-https ca-certificates <span class="token function">curl software-properties-common  <span class="token comment"># Ubuntu
<span class="token comment"># 或
<span class="token function">sudo yum <span class="token function">install <span class="token parameter variable">-y yum-utils device-mapper-persistent-data lvm2  <span class="token comment"># CentOS</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</div>
<hr>
<h3><strong>二、部署高可用Kubernetes集群</strong></h3>
<h4><strong>1. 安装Docker</strong></h4>
<div class="md-code-block md-code-block-light">
<pre><span class="token comment"># 所有节点执行
<span class="token function">curl <span class="token parameter variable">-fsSL https://get.docker.com <span class="token operator">| <span class="token function">bash <span class="token parameter variable">-s <span class="token function">docker <span class="token parameter variable">--mirror Aliyun
<span class="token function">sudo systemctl <span class="token builtin class-name">enable <span class="token function">docker <span class="token operator">&amp;&amp; <span class="token function">sudo systemctl start <span class="token function">docker</span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</div>
<h4><strong>2. 安装kubeadm/kubelet/kubectl</strong></h4>
<div class="md-code-block md-code-block-light">
<pre><span class="token comment"># 所有节点执行（以Ubuntu为例）
<span class="token function">sudo <span class="token function">curl <span class="token parameter variable">-fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg
<span class="token builtin class-name">echo <span class="token string">"deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main" <span class="token operator">| <span class="token function">sudo <span class="token function">tee /etc/apt/sources.list.d/kubernetes.list
<span class="token function">sudo <span class="token function">apt-get update
<span class="token function">sudo <span class="token function">apt-get <span class="token function">install <span class="token parameter variable">-y <span class="token assign-left variable">kubelet<span class="token operator">=<span class="token number">1.28.0-00 <span class="token assign-left variable">kubeadm<span class="token operator">=<span class="token number">1.28.0-00 <span class="token assign-left variable">kubectl<span class="token operator">=<span class="token number">1.28.0-00
<span class="token function">sudo apt-mark hold kubelet kubeadm kubectl</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</div>
<h4><strong>3. 初始化第一个Master节点</strong></h4>
<div class="md-code-block md-code-block-light">
<pre><span class="token comment"># 在master1节点执行
<span class="token function">sudo kubeadm init <span class="token punctuation">\
  --control-plane-endpoint <span class="token string">"LOAD_BALANCER_DNS:LOAD_BALANCER_PORT" <span class="token punctuation">\
  --upload-certs <span class="token punctuation">\
  --image-repository registry.aliyuncs.com/google_containers <span class="token punctuation">\
  --kubernetes-version v1.28.0 <span class="token punctuation">\
  --service-cidr<span class="token operator">=<span class="token number">10.96.0.0/12 <span class="token punctuation">\
  --pod-network-cidr<span class="token operator">=<span class="token number">192.168.0.0/16 <span class="token punctuation">\
  --apiserver-advertise-address<span class="token operator">=<span class="token number">192.168.1.101

<span class="token comment"># 输出中会包含加入其他Master和Worker的命令，保存备用
<span class="token function">mkdir <span class="token parameter variable">-p <span class="token environment constant">$HOME/.kube
<span class="token function">sudo <span class="token function">cp <span class="token parameter variable">-i /etc/kubernetes/admin.conf <span class="token environment constant">$HOME/.kube/config
<span class="token function">sudo <span class="token function">chown <span class="token variable"><span class="token variable">$(<span class="token function">id <span class="token parameter variable">-u<span class="token variable">)<span class="token builtin class-name">:<span class="token variable"><span class="token variable">$(<span class="token function">id <span class="token parameter variable">-g<span class="token variable">) <span class="token environment constant">$HOME/.kube/config</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</div>
<h4><strong>4. 加入其他Master节点</strong></h4>
<div class="md-code-block md-code-block-light">
<pre><span class="token comment"># 在master2和master3执行（使用上一步生成的命令，形如）：
<span class="token function">sudo kubeadm <span class="token function">join LOAD_BALANCER_DNS:LOAD_BALANCER_PORT <span class="token punctuation">\
  <span class="token parameter variable">--token xxxx <span class="token punctuation">\
  --discovery-token-ca-cert-hash sha256:xxxx <span class="token punctuation">\
  --control-plane <span class="token punctuation">\
  --certificate-key xxxx</span></span></span></span></span></span></span></span></pre>
</div>
<h4><strong>5. 加入Worker节点</strong></h4>
<div class="md-code-block md-code-block-light">
<pre><span class="token comment"># 在所有Worker节点执行（使用kubeadm init输出的命令）：
<span class="token function">sudo kubeadm <span class="token function">join LOAD_BALANCER_DNS:LOAD_BALANCER_PORT <span class="token parameter variable">--token xxxx --discovery-token-ca-cert-hash sha256:xxxx</span></span></span></span></pre>
</div>
<h4><strong>6. 安装网络插件（Calico）</strong></h4>
<div class="md-code-block md-code-block-light">
<pre>kubectl apply <span class="token parameter variable">-f https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/calico.yaml</span></pre>
</div>
<hr>
<h3><strong>三、配置存储（NFS示例）</strong></h3>
<h4><strong>1. 部署NFS Server（可选）</strong></h4>
<div class="md-code-block md-code-block-light">
<pre><span class="token comment"># 在存储节点执行（例如192.168.1.250）
<span class="token function">sudo <span class="token function">apt-get <span class="token function">install <span class="token parameter variable">-y nfs-kernel-server  <span class="token comment"># Ubuntu
<span class="token function">sudo <span class="token function">mkdir <span class="token parameter variable">-p /data/nfs
<span class="token function">sudo <span class="token function">chmod <span class="token number">777 /data/nfs
<span class="token function">sudo <span class="token function">vi /etc/exports
<span class="token comment"># 添加：
/data/nfs *<span class="token punctuation">(rw,sync,no_root_squash<span class="token punctuation">)
<span class="token function">sudo exportfs <span class="token parameter variable">-a
<span class="token function">sudo systemctl restart nfs-server</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</div>
<h4><strong>2. 部署NFS StorageClass</strong></h4>
<div class="md-code-block md-code-block-light">
<pre><span class="token comment"># 使用Helm安装NFS Provisioner
helm repo <span class="token function">add nfs-subdir-external-provisioner https://kubernetes-sigs.github.io/nfs-subdir-external-provisioner/
helm <span class="token function">install nfs-provisioner nfs-subdir-external-provisioner/nfs-subdir-external-provisioner <span class="token punctuation">\
  <span class="token parameter variable">--set <span class="token assign-left variable">nfs.server<span class="token operator">=<span class="token number">192.168.1.250 <span class="token punctuation">\
  <span class="token parameter variable">--set <span class="token assign-left variable">nfs.path<span class="token operator">=/data/nfs <span class="token punctuation">\
  <span class="token parameter variable">--set <span class="token assign-left variable">storageClass.name<span class="token operator">=nfs-sc

<span class="token comment"># 验证StorageClass
kubectl get storageclass</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</div>
<hr>
<h3><strong>四、部署高可用MySQL集群</strong></h3>
<h4><strong>1. 创建Secret存储密码</strong></h4>
<div class="md-code-block md-code-block-light">
<pre>kubectl create secret generic mysql-secret <span class="token punctuation">\
  --from-literal<span class="token operator">=root_password<span class="token operator">=yourpassword <span class="token punctuation">\
  --from-literal<span class="token operator">=replication_password<span class="token operator">=replpassword</span></span></span></span></span></span></pre>
</div>
<h4><strong>2. 部署MySQL StatefulSet</strong></h4>
<div class="md-code-block md-code-block-light">
<pre><span class="token comment"># mysql-ha.yaml
<span class="token key atrule">apiVersion<span class="token punctuation">: apps/v1
<span class="token key atrule">kind<span class="token punctuation">: StatefulSet
<span class="token key atrule">metadata<span class="token punctuation">:
  <span class="token key atrule">name<span class="token punctuation">: mysql
<span class="token key atrule">spec<span class="token punctuation">:
  <span class="token key atrule">serviceName<span class="token punctuation">: mysql
  <span class="token key atrule">replicas<span class="token punctuation">: <span class="token number">3
  <span class="token key atrule">selector<span class="token punctuation">:
    <span class="token key atrule">matchLabels<span class="token punctuation">:
      <span class="token key atrule">app<span class="token punctuation">: mysql
  <span class="token key atrule">template<span class="token punctuation">:
    <span class="token key atrule">metadata<span class="token punctuation">:
      <span class="token key atrule">labels<span class="token punctuation">:
        <span class="token key atrule">app<span class="token punctuation">: mysql
    <span class="token key atrule">spec<span class="token punctuation">:
      <span class="token key atrule">containers<span class="token punctuation">:
      <span class="token punctuation">- <span class="token key atrule">name<span class="token punctuation">: mysql
        <span class="token key atrule">image<span class="token punctuation">: mysql<span class="token punctuation">:<span class="token number">8.0
        <span class="token key atrule">env<span class="token punctuation">:
        <span class="token punctuation">- <span class="token key atrule">name<span class="token punctuation">: MYSQL_ROOT_PASSWORD
          <span class="token key atrule">valueFrom<span class="token punctuation">:
            <span class="token key atrule">secretKeyRef<span class="token punctuation">:
              <span class="token key atrule">name<span class="token punctuation">: mysql<span class="token punctuation">-secret
              <span class="token key atrule">key<span class="token punctuation">: root_password
        <span class="token punctuation">- <span class="token key atrule">name<span class="token punctuation">: MYSQL_REPLICATION_PASSWORD
          <span class="token key atrule">valueFrom<span class="token punctuation">:
            <span class="token key atrule">secretKeyRef<span class="token punctuation">:
              <span class="token key atrule">name<span class="token punctuation">: mysql<span class="token punctuation">-secret
              <span class="token key atrule">key<span class="token punctuation">: replication_password
        <span class="token key atrule">args<span class="token punctuation">:
        <span class="token punctuation">- <span class="token string">"--server-id=$(expr $RANDOM % 100 + 1)"
        <span class="token punctuation">- <span class="token string">"--gtid-mode=ON"
        <span class="token punctuation">- <span class="token string">"--enforce-gtid-consistency=ON"
        <span class="token punctuation">- <span class="token string">"--log-bin=mysql-bin"
        <span class="token punctuation">- <span class="token string">"--binlog-format=ROW"
        <span class="token punctuation">- <span class="token string">"--relay-log=mysql-relay"
        <span class="token punctuation">- <span class="token string">"--innodb_flush_log_at_trx_commit=1"
        <span class="token punctuation">- <span class="token string">"--sync_binlog=1"
        <span class="token key atrule">ports<span class="token punctuation">:
        <span class="token punctuation">- <span class="token key atrule">containerPort<span class="token punctuation">: <span class="token number">3306
        <span class="token key atrule">volumeMounts<span class="token punctuation">:
        <span class="token punctuation">- <span class="token key atrule">name<span class="token punctuation">: mysql<span class="token punctuation">-data
          <span class="token key atrule">mountPath<span class="token punctuation">: /var/lib/mysql
  <span class="token key atrule">volumeClaimTemplates<span class="token punctuation">:
  <span class="token punctuation">- <span class="token key atrule">metadata<span class="token punctuation">:
      <span class="token key atrule">name<span class="token punctuation">: mysql<span class="token punctuation">-data
    <span class="token key atrule">spec<span class="token punctuation">:
      <span class="token key atrule">accessModes<span class="token punctuation">: <span class="token punctuation">[ <span class="token string">"ReadWriteOnce" <span class="token punctuation">]
      <span class="token key atrule">storageClassName<span class="token punctuation">: <span class="token string">"nfs-sc"
      <span class="token key atrule">resources<span class="token punctuation">:
        <span class="token key atrule">requests<span class="token punctuation">:
          <span class="token key atrule">storage<span class="token punctuation">: 20Gi</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</div>
<h4><strong>3. 部署MySQL服务</strong></h4>
<div class="md-code-block md-code-block-light">
<pre><span class="token comment"># mysql-service.yaml
<span class="token key atrule">apiVersion<span class="token punctuation">: v1
<span class="token key atrule">kind<span class="token punctuation">: Service
<span class="token key atrule">metadata<span class="token punctuation">:
  <span class="token key atrule">name<span class="token punctuation">: mysql
<span class="token key atrule">spec<span class="token punctuation">:
  <span class="token key atrule">ports<span class="token punctuation">:
  <span class="token punctuation">- <span class="token key atrule">port<span class="token punctuation">: <span class="token number">3306
  <span class="token key atrule">clusterIP<span class="token punctuation">: None
  <span class="token key atrule">selector<span class="token punctuation">:
    <span class="token key atrule">app<span class="token punctuation">: mysql</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</div>
<div class="md-code-block md-code-block-light">
<pre>kubectl apply <span class="token parameter variable">-f mysql-ha.yaml
kubectl apply <span class="token parameter variable">-f mysql-service.yaml</span></span></pre>
</div>
<hr>
<h3><strong>五、部署Tomcat应用</strong></h3>
<h4><strong>1. 创建Tomcat Deployment</strong></h4>
<div class="md-code-block md-code-block-light">
<pre><span class="token comment"># tomcat-deployment.yaml
<span class="token key atrule">apiVersion<span class="token punctuation">: apps/v1
<span class="token key atrule">kind<span class="token punctuation">: Deployment
<span class="token key atrule">metadata<span class="token punctuation">:
  <span class="token key atrule">name<span class="token punctuation">: tomcat<span class="token punctuation">-app
<span class="token key atrule">spec<span class="token punctuation">:
  <span class="token key atrule">replicas<span class="token punctuation">: <span class="token number">3
  <span class="token key atrule">selector<span class="token punctuation">:
    <span class="token key atrule">matchLabels<span class="token punctuation">:
      <span class="token key atrule">app<span class="token punctuation">: tomcat
  <span class="token key atrule">strategy<span class="token punctuation">:
    <span class="token key atrule">rollingUpdate<span class="token punctuation">:
      <span class="token key atrule">maxSurge<span class="token punctuation">: <span class="token number">1
      <span class="token key atrule">maxUnavailable<span class="token punctuation">: <span class="token number">0
  <span class="token key atrule">template<span class="token punctuation">:
    <span class="token key atrule">metadata<span class="token punctuation">:
      <span class="token key atrule">labels<span class="token punctuation">:
        <span class="token key atrule">app<span class="token punctuation">: tomcat
    <span class="token key atrule">spec<span class="token punctuation">:
      <span class="token key atrule">containers<span class="token punctuation">:
      <span class="token punctuation">- <span class="token key atrule">name<span class="token punctuation">: tomcat
        <span class="token key atrule">image<span class="token punctuation">: tomcat<span class="token punctuation">:9.0<span class="token punctuation">-jdk17
        <span class="token key atrule">ports<span class="token punctuation">:
        <span class="token punctuation">- <span class="token key atrule">containerPort<span class="token punctuation">: <span class="token number">8080
        <span class="token key atrule">env<span class="token punctuation">:
        <span class="token punctuation">- <span class="token key atrule">name<span class="token punctuation">: DATABASE_URL
          <span class="token key atrule">value<span class="token punctuation">: <span class="token string">"jdbc:mysql://mysql.default.svc.cluster.local:3306/appdb?useSSL=false"
        <span class="token key atrule">resources<span class="token punctuation">:
          <span class="token key atrule">requests<span class="token punctuation">:
            <span class="token key atrule">cpu<span class="token punctuation">: <span class="token string">"100m"
            <span class="token key atrule">memory<span class="token punctuation">: <span class="token string">"512Mi"
          <span class="token key atrule">limits<span class="token punctuation">:
            <span class="token key atrule">cpu<span class="token punctuation">: <span class="token string">"500m"
            <span class="token key atrule">memory<span class="token punctuation">: <span class="token string">"1Gi"
        <span class="token key atrule">livenessProbe<span class="token punctuation">:
          <span class="token key atrule">httpGet<span class="token punctuation">:
            <span class="token key atrule">path<span class="token punctuation">: /
            <span class="token key atrule">port<span class="token punctuation">: <span class="token number">8080
          <span class="token key atrule">initialDelaySeconds<span class="token punctuation">: <span class="token number">30
          <span class="token key atrule">periodSeconds<span class="token punctuation">: <span class="token number">10
        <span class="token key atrule">readinessProbe<span class="token punctuation">:
          <span class="token key atrule">httpGet<span class="token punctuation">:
            <span class="token key atrule">path<span class="token punctuation">: /
            <span class="token key atrule">port<span class="token punctuation">: <span class="token number">8080
          <span class="token key atrule">initialDelaySeconds<span class="token punctuation">: <span class="token number">20
          <span class="token key atrule">periodSeconds<span class="token punctuation">: <span class="token number">5</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</div>
<h4><strong>2. 创建Service</strong></h4>
<div class="md-code-block md-code-block-light">
<pre><span class="token comment"># tomcat-service.yaml
<span class="token key atrule">apiVersion<span class="token punctuation">: v1
<span class="token key atrule">kind<span class="token punctuation">: Service
<span class="token key atrule">metadata<span class="token punctuation">:
  <span class="token key atrule">name<span class="token punctuation">: tomcat<span class="token punctuation">-service
<span class="token key atrule">spec<span class="token punctuation">:
  <span class="token key atrule">selector<span class="token punctuation">:
    <span class="token key atrule">app<span class="token punctuation">: tomcat
  <span class="token key atrule">ports<span class="token punctuation">:
    <span class="token punctuation">- <span class="token key atrule">protocol<span class="token punctuation">: TCP
      <span class="token key atrule">port<span class="token punctuation">: <span class="token number">80
      <span class="token key atrule">targetPort<span class="token punctuation">: <span class="token number">8080</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</div>
<div class="md-code-block md-code-block-light">
<pre>kubectl apply <span class="token parameter variable">-f tomcat-deployment.yaml
kubectl apply <span class="token parameter variable">-f tomcat-service.yaml</span></span></pre>
</div>
<hr>
<h3><strong>六、部署Nginx Ingress Controller</strong></h3>
<h4><strong>1. 使用Helm安装</strong></h4>
<div class="md-code-block md-code-block-light">
<pre>helm repo <span class="token function">add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm <span class="token function">install ingress-nginx ingress-nginx/ingress-nginx <span class="token punctuation">\
  <span class="token parameter variable">--set <span class="token assign-left variable">controller.replicaCount<span class="token operator">=<span class="token number">3 <span class="token punctuation">\
  <span class="token parameter variable">--set <span class="token assign-left variable">controller.service.type<span class="token operator">=LoadBalancer <span class="token punctuation">\
  <span class="token parameter variable">--set <span class="token assign-left variable">controller.service.externalTrafficPolicy<span class="token operator">=Local <span class="token punctuation">\
  <span class="token parameter variable">--set controller.nodeSelector.<span class="token string">"kubernetes\.io/os"<span class="token operator">=linux <span class="token punctuation">\
  <span class="token parameter variable">--set controller.admissionWebhooks.patch.nodeSelector.<span class="token string">"kubernetes\.io/os"<span class="token operator">=linux <span class="token punctuation">\
  <span class="token parameter variable">--set defaultBackend.nodeSelector.<span class="token string">"kubernetes\.io/os"<span class="token operator">=linux</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</div>
<h4><strong>2. 配置Ingress路由规则</strong></h4>
<div class="md-code-block md-code-block-light">
<pre><span class="token comment"># ingress-rule.yaml
<span class="token key atrule">apiVersion<span class="token punctuation">: networking.k8s.io/v1
<span class="token key atrule">kind<span class="token punctuation">: Ingress
<span class="token key atrule">metadata<span class="token punctuation">:
  <span class="token key atrule">name<span class="token punctuation">: web<span class="token punctuation">-ingress
  <span class="token key atrule">annotations<span class="token punctuation">:
    <span class="token key atrule">nginx.ingress.kubernetes.io/rewrite-target<span class="token punctuation">: /
<span class="token key atrule">spec<span class="token punctuation">:
  <span class="token key atrule">ingressClassName<span class="token punctuation">: nginx
  <span class="token key atrule">rules<span class="token punctuation">:
  <span class="token punctuation">- <span class="token key atrule">host<span class="token punctuation">: example.com
    <span class="token key atrule">http<span class="token punctuation">:
      <span class="token key atrule">paths<span class="token punctuation">:
      <span class="token punctuation">- <span class="token key atrule">path<span class="token punctuation">: /
        <span class="token key atrule">pathType<span class="token punctuation">: Prefix
        <span class="token key atrule">backend<span class="token punctuation">:
          <span class="token key atrule">service<span class="token punctuation">:
            <span class="token key atrule">name<span class="token punctuation">: tomcat<span class="token punctuation">-service
            <span class="token key atrule">port<span class="token punctuation">:
              <span class="token key atrule">number<span class="token punctuation">: <span class="token number">80</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</div>
<div class="md-code-block md-code-block-light">
<pre>kubectl apply <span class="token parameter variable">-f ingress-rule.yaml</span></pre>
</div>
<hr>
<h3><strong>七、验证与维护</strong></h3>
<h4><strong>1. 查看集群状态</strong></h4>
<div class="md-code-block md-code-block-light">
<pre>kubectl get nodes <span class="token parameter variable">-o wide
kubectl get pods <span class="token parameter variable">-A <span class="token parameter variable">-o wide
kubectl get svc,pv,pvc</span></span></span></pre>
</div>
<h4><strong>2. 测试数据库连接</strong></h4>
<div class="md-code-block md-code-block-light">
<pre>kubectl <span class="token builtin class-name">exec <span class="token parameter variable">-it mysql-0 -- mysql <span class="token parameter variable">-uroot -p<span class="token variable"><span class="token variable">$(kubectl get secret mysql-secret <span class="token parameter variable">-o <span class="token assign-left variable">jsonpath<span class="token operator">=<span class="token string">'{.data.root_password}' <span class="token operator">| base64 <span class="token parameter variable">--decode<span class="token variable">) <span class="token parameter variable">-e <span class="token string">"CREATE DATABASE appdb;"</span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</div>
<h4><strong>3. 访问测试</strong></h4>
<div class="md-code-block md-code-block-light">
<pre><span class="token comment"># 获取Ingress外部IP
kubectl get svc ingress-nginx-controller <span class="token parameter variable">-o <span class="token assign-left variable">jsonpath<span class="token operator">=<span class="token string">'{.status.loadBalancer.ingress[0].ip}'

<span class="token comment"># 测试访问（替换实际IP）
<span class="token function">curl <span class="token parameter variable">-H <span class="token string">"Host: example.com" http://<span class="token operator">&lt;INGRESS_IP<span class="token operator">&gt;</span></span></span></span></span></span></span></span></span></span></span></pre>
</div>
<h4><strong>4. 配置HPA自动扩缩</strong></h4>
<div class="md-code-block md-code-block-light">
<pre><span class="token comment"># hpa.yaml
<span class="token key atrule">apiVersion<span class="token punctuation">: autoscaling/v2
<span class="token key atrule">kind<span class="token punctuation">: HorizontalPodAutoscaler
<span class="token key atrule">metadata<span class="token punctuation">:
  <span class="token key atrule">name<span class="token punctuation">: tomcat<span class="token punctuation">-hpa
<span class="token key atrule">spec<span class="token punctuation">:
  <span class="token key atrule">scaleTargetRef<span class="token punctuation">:
    <span class="token key atrule">apiVersion<span class="token punctuation">: apps/v1
    <span class="token key atrule">kind<span class="token punctuation">: Deployment
    <span class="token key atrule">name<span class="token punctuation">: tomcat<span class="token punctuation">-app
  <span class="token key atrule">minReplicas<span class="token punctuation">: <span class="token number">2
  <span class="token key atrule">maxReplicas<span class="token punctuation">: <span class="token number">10
  <span class="token key atrule">metrics<span class="token punctuation">:
  <span class="token punctuation">- <span class="token key atrule">type<span class="token punctuation">: Resource
    <span class="token key atrule">resource<span class="token punctuation">:
      <span class="token key atrule">name<span class="token punctuation">: cpu
      <span class="token key atrule">target<span class="token punctuation">:
        <span class="token key atrule">type<span class="token punctuation">: Utilization
        <span class="token key atrule">averageUtilization<span class="token punctuation">: <span class="token number">80</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</div>
<hr>
<h3><strong>八、架构示意图</strong></h3>
<div class="md-code-block md-code-block-light">
<div class="md-code-block-banner-wrap">
<div class="md-code-block-banner md-code-block-banner-lite">
<div class="_121d384">
<div class="d2a24f03">&nbsp;</div>
</div>
</div>
</div>
<pre>用户访问 -&gt; 云厂商LB/Nginx Ingress (外部流量)
        ↓
K8S Ingress Controller (3副本)
       ↓
Tomcat Pods (HPA自动扩缩)
        ↓
MySQL Cluster (3节点StatefulSet)
        ↓
NFS/Ceph Persistent Volumes</pre>
</div>
<h3><strong>补充建议</strong></h3>
<ol start="1">
<li>
<p class="ds-markdown-paragraph"><strong>监控</strong>：部署Prometheus + Grafana监控集群状态</p>
</li>
<li>
<p class="ds-markdown-paragraph"><strong>日志</strong>：使用EFK（Elasticsearch+Fluentd+Kibana）收集日志</p>
</li>
<li>
<p class="ds-markdown-paragraph"><strong>备份</strong>：使用Velero定期备份K8S资源</p>
</li>
<li>
<p class="ds-markdown-paragraph"><strong>安全</strong>：启用NetworkPolicy限制Pod间通信，使用Cert-Manager管理TLS证书</p>
</li>
</ol>
<p class="ds-markdown-paragraph">以上为完整的企业级高可用架构部署流程，需根据实际环境调整IP地址、存储配置和域名信息。</p>
</div>
<div class="ds-flex">&nbsp;</div>
</div>
</div>
</div>
</div>
<div class="_4f9bf79 d7dc56a8 _43c05b5">
<div class="_48edb25">
<div class="_58a6d71 _19db599">
<div class="ds-icon _54f4262">&nbsp;</div>
</div>
<div>&nbsp;</div>
<div class="e1675d8b">&nbsp;</div>
</div>
</div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.3653346804849537" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-13 21:29">2025-05-13 21:29</span>&nbsp;
<a href="https://www.cnblogs.com/Johny-zhao">Johny_Zhao</a>&nbsp;
阅读(<span id="post_view_count">39</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18874915);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18874915', targetLink: 'https://www.cnblogs.com/Johny-zhao/p/18874915', title: 'K8S+nginx+MYSQL+TOMCAT高可用架构企业自建网站' })">举报</a>
</div>
        