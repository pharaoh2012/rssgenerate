
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/fs7744/p/18759510" title="发布于 2025-03-08 16:32">
    <span role="heading" aria-level="2">终于写完轮子一部分：tcp代理 了，记录一下</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>24年终自己立了flag： 25年做些轮子玩（用于浪费生命，赚不了钱)<br>
所以25年就准备用c#写一个网络代理<a href="https://github.com/fs7744/NZOrz" target="_blank" rel="noopener nofollow">NZOrz</a>（nginx知道吧，就那玩意儿干的事），包含 udp/tcp/http1 2 3，<br>
至于为啥不用rust写，主要由于某台电脑某些不可告知的原因不方便安装rust，所以等我写完c#的，后面有空再说吧（应该25年没时间了吧）</p>
<h3 id="代码借鉴出处">代码借鉴出处</h3>
<p>秉承将生命浪费到底的造轮子精神，实力不行就尽可能借鉴(<s>抄袭，读书人的事，怎么能说呢</s>)<br>
所以这里首先列举一下借鉴出处</p>
<ol>
<li>借鉴 <a href="https://github.com/dotnet/aspnetcore/tree/main/src/Servers/Kestrel" target="_blank" rel="noopener nofollow">Kestrel</a> 的 socket 处理核心 （理论上基于Kestrel也是可行的）</li>
<li>借鉴 <a href="https://github.com/dotnet/yarp" target="_blank" rel="noopener nofollow">Yarp</a> 各项代理处理  （实现只有http）</li>
</ol>
<p>所以整体实现上都是socket 上层做多线程处理，不编写与系统内核交互或者其他io事件库打交道的代码<br>
（为啥？要打跨平台交道，我不如直接用 rust 写 linux的，window写不写看心情，反正服务器是王道是不是）</p>
<h3 id="局限">局限</h3>
<p>不得不先提一个局限，dotnet 的socket 没有提供统一的跨进程socket转移api，因为dotnet是跨平台的，不同系统存在差异，该issue <a href="https://github.com/dotnet/runtime/issues/48637" target="_blank" rel="noopener nofollow">Migrate Socket between processes</a> 已经多年没有下文了</p>
<p>所以不好做到热重启</p>
<h3 id="初步完成进度">初步完成进度</h3>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"><label> TCP server core</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"><label> TCP proxy core</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"><label> dns (use system dns, no query from dns server )</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"><label> LoadBalancingPolicy</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"><label> Passive HealthCheck</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"><label> TCP Connected Active HealthCheck</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"><label> Configuration</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"><label> reload config and rebind</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"><label> Log</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"><label> UDP server core</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"><label> Config Validators</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"><label> UDP proxy core</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"><label> HTTP1 server core</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"><label> HTTP2 server core</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"><label> HTTP3 server core</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"><label> HTTP proxy core</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"><label> Metrics</label></li>
</ul>
<p>对，目前主要是完成了基础的 tcp 部分（代理协议不支持，毕竟有那么多，时间也有限），下一步以 udp 为优先,（文档吗？等我先完成再说）</p>
<h3 id="tcp代理使用">tcp代理使用</h3>
<p>目前没有提供现成打包好的exe或者docker镜像，毕竟离完成还有很远的距离<br>
要玩可以这样</p>
<p>建一个 net8.0 或者net9.0 的Console 项目<br>
安装package</p>
<pre><code class="language-bash">dotnet add package NZ.Orz --version 0.0.0.2-beta
</code></pre>
<p>入口代码</p>
<pre><code class="language-csharp">using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using NZ.Orz;
using NZ.Orz.ReverseProxy.L4;

var app = NZApp.CreateBuilder(args)
    .UseJsonConfig()
    .Build();

await app.RunAsync();
</code></pre>
<p>配置 文件 <code>appsettings.json</code></p>
<pre><code class="language-json">{
  "Logging": {
    "LogLevel": {
      "Default": "Information"
    }
  },
  "ReverseProxy": {
    "Routes": {
      "apidemo": {
        "Protocols": "TCP",
        "Match": {
          "Hosts": [ "*:5000" ]
        },
        "ClusterId": "apidemo",
        "RetryCount": 1,
        "Timeout": "00:00:11"
      }
    },
    "Clusters": {
      "apidemo": {
        "LoadBalancingPolicy": "RoundRobin",
        "HealthCheck": {
          "Active": {
            "Enable": false,
            "Policy": "Connect"
          }
        },
        "Destinations": [
          {
            "Address": "[::1]:5144"
          },
          {
            "Address": "[::1]:5146"
          },
          {
            "Address": "google.com:998"
          },
          {
            "Address": "www.baidu.com"
          },
          {
            "Address": "http://google.com"
          },
          {
            "Address": "https://google.com"
          }
        ]
      }
    }
  }
}
</code></pre>
<p>然后启动就行， 启动log大致如下</p>
<pre><code class="language-bash">info: NZ.Orz.Server.ReverseProxy[18]
      Config changed. Starting the following endpoints: [Protocols: TCP,Route: apidemo,EndPoint: 0.0.0.0:5000],[Protocols: TCP,Route: apidemo,EndPoint: [::]:5000]
info: Microsoft.Hosting.Lifetime[0]
      Application started. Press Ctrl+C to shut down.
info: Microsoft.Hosting.Lifetime[0]
      Hosting environment: Production
info: Microsoft.Hosting.Lifetime[0]
      Content root path: D:\code\edge\l4proxy\src\L4Proxy\bin\Debug\net8.0
</code></pre>
<p>当然，运行中 如果改动<code>appsettings.json</code>内容，会根据配置 重新监听变动端口/重建路由表等等</p>
<p>也算是一定程度弥补无法热重启的问题</p>
<h3 id="改动tcp的数据">改动tcp的数据</h3>
<p>如果想改动tcp的数据，可以实现中间件 <code>ITcpMiddleware</code></p>
<p>比如</p>
<pre><code class="language-csharp">public class EchoMiddleware : ITcpMiddleware
{
    public int Order =&gt; 0;

    public Task&lt;ReadOnlyMemory&lt;byte&gt;&gt; OnRequest(ConnectionContext connection, ReadOnlyMemory&lt;byte&gt; source, CancellationToken cancellationToken, TcpConnectionDelegate next)
    {
        Console.WriteLine($"{DateTime.Now} {connection.LocalEndPoint.ToString()} request size: {source.Length}");
        return Task.FromResult(source);
    }

    public Task&lt;ReadOnlyMemory&lt;byte&gt;&gt; OnResponse(ConnectionContext connection, ReadOnlyMemory&lt;byte&gt; source, CancellationToken cancellationToken, TcpConnectionDelegate next)
    {
        Console.WriteLine($"{DateTime.Now} {connection.SelectedDestination.EndPoint.ToString()} reponse size: {source.Length}");
        //source = Encoding.UTF8.GetBytes("HTTP/1.1 400 Bad Request\r\nDate: Sun, 18 Oct 2012 10:36:20 GMT\r\nServer: Apache/2.2.14 (Win32)\r\nContent-Length: 0\r\nContent-Type: text/html; charset=iso-8859-1\r\nConnection: Closed\r\n\r\n").AsMemory();
        //connection.Abort();
        return Task.FromResult(source);
    }
}
</code></pre>
<p>然后注入ioc就行</p>
<pre><code class="language-csharp">var app = NZApp.CreateBuilder(args)
    .ConfigServices(services =&gt;
    {
        services.AddSingleton&lt;ITcpMiddleware, EchoMiddleware&gt;();
    })
    .UseJsonConfig()
    .Build();
</code></pre>
<h3 id="配置简单说明">配置简单说明</h3>
<p>详细等以后写文档再说吧</p>
<p>Protocols 支持 <code>TCP</code></p>
<p>Hosts 支持后缀匹配， 比如匹配所有实例5000端口就可以写 <code>*:5000</code>， 匹配某个实例如 192.1.1.1，3000端口就可以写 <code>192.1.1.1:3000</code><br>
（路由表实现采用 前缀树+字典+<a href="https://dotnet.github.io/dotNext/features/core/cache.html" target="_blank" rel="noopener nofollow">SIEVE cahce</a>）</p>
<p>服务发现目前只支持 DNS， 但不支持指定 dns server， 因为 <a href="https://learn.microsoft.com/en-us/dotnet/api/system.net.dns?view=net-9.0" target="_blank" rel="noopener nofollow">dns</a>不支持，以后再说吧</p>
<p>HealthCheck 支持主动 被动 二选一，不支持一起用， 主动 暂时只支持 socket connect 成功检查</p>
<p>LoadBalancingPolicy 支持四种 <code>Random , RoundRobin , LeastRequests , PowerOfTwoChoices</code></p>
<p>先就这样，其他等我慢慢实现</p>
<p>大家有空的话，能否在 GitHub <a href="https://github.com/fs7744/NZOrz" target="_blank" rel="noopener nofollow">https://github.com/fs7744/NZOrz</a> 点个 star 呢？毕竟借鉴代码也不易呀 哈哈哈哈哈</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="1.1592141153402777" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-08 16:32">2025-03-08 16:32</span>&nbsp;
<a href="https://www.cnblogs.com/fs7744">victor.x.qu</a>&nbsp;
阅读(<span id="post_view_count">186</span>)&nbsp;
评论(<span id="post_comment_count">1</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18759510" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18759510);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18759510', targetLink: 'https://www.cnblogs.com/fs7744/p/18759510', title: '终于写完轮子一部分：tcp代理 了，记录一下' })">举报</a>
</div>
        