
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/johnnyzen/p/19064326" title="发布于 2025-08-29 12:10">
    <span role="heading" aria-level="2">[RPC/序列化] Proto 文件的语法解读</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="1-概述-proto-文件">1 概述： Proto 文件</h1>
<h2 id="proto-文件--grpc-远程调用协议中-protobuf-序列化方案的数据结构与调用服务定义文件">proto 文件 = gRpc 远程调用协议中 <code>Protobuf</code> 序列化方案的数据结构与调用服务定义文件</h2>
<ul>
<li><code>Proto</code>文件（<code>Protocol Buffers</code>，简称 <code>Protobuf</code>）是<code>Google</code>开发的一种数据序列化格式，用于<strong>结构化数据</strong>的定义和交换</li>
</ul>
<blockquote>
<p>常被用于RPC（远程过程调用）和数据存储场景。以下是对其核心要素的解读：</p>
</blockquote>
<ul>
<li>proto 文件的格式后缀: <code>.proto</code></li>
</ul>
<h2 id="应用场景">应用场景</h2>
<blockquote>
<p>proto 文件的应用场景</p>
</blockquote>
<ul>
<li>云端微服务间的 gRpc 远程调用与通信场景</li>
<li>物联网领域，端云协议（一般搭配 MQTT 通信协议）</li>
<li>...</li>
</ul>
<h2 id="核心特点">核心特点</h2>
<ul>
<li><strong>高效</strong>：二进制编码，体积比JSON小，解析速度快。</li>
<li><strong>跨语言</strong>：支持多编程语言（Java、Python、Go等）。</li>
<li><strong>可扩展</strong>：新增字段不影响旧版本解析（向前兼容）。</li>
</ul>
<blockquote>
<p>Proto文件清晰定义了数据结构和服务功能交互接口，是<strong>跨系统数据交换</strong>的高效方案。</p>
</blockquote>
<h1 id="2-proto-文件的语法解读">2 Proto 文件的语法解读</h1>
<h2 id="版本声明-syntax">版本声明 （syntax）</h2>
<p>Proto文件需指定版本，常用的有<code>proto2</code>和<code>proto3</code>（推荐使用<code>proto3</code>，语法更简洁）：</p>
<pre><code class="language-protobuf">syntax = "proto3"; // 声明使用proto3语法
</code></pre>
<h2 id="包名package">包名（Package）</h2>
<p>用于避免命名冲突，类似代码中的命名空间：</p>
<pre><code class="language-protobuf">package example.user; // 定义包名，生成代码时会作为命名空间/包结构
</code></pre>
<h2 id="导入其他proto文件import">导入其他Proto文件（import）</h2>
<p>可通过<code>import</code>复用其他文件的定义：</p>
<pre><code class="language-protobuf">import "common/address.proto"; // 导入外部proto文件
</code></pre>
<h2 id="消息类型message">消息类型（Message）</h2>
<ul>
<li>核心部分，用于定义结构化数据，类似“类”或“结构体”：</li>
</ul>
<pre><code class="language-protobuf">message User {
  // 字段格式：[修饰符] 类型 名称 = 字段编号;
  string name = 1;    // 字符串类型，编号1（唯一，用于二进制编码，1-15占1字节）
  int32 age = 2;      // 32位整数
  bool is_student = 3;// 布尔值
  Address addr = 4;   // 引用其他message类型（如导入的Address）
  
  // 重复字段（类似数组）
  repeated string hobbies = 5; // repeated表示该字段可包含多个值
}
</code></pre>
<ul>
<li><strong>字段编号</strong>：必须唯一，1-15优先用于频繁出现的字段（编码更高效）。</li>
<li><strong>类型</strong>：支持基础类型（<code>int32</code>、<code>string</code>、<code>bool</code>等）和自定义<code>message</code>类型。</li>
</ul>
<h2 id="枚举enum">枚举（Enum）</h2>
<p>定义枚举类型，限制字段只能取预设值：</p>
<pre><code class="language-protobuf">enum Gender {
  GENDER_UNSPECIFIED = 0; // proto3要求枚举第一个值为0（默认值）
  MALE = 1;
  FEMALE = 2;
}

// 在message中使用
message User {
  Gender gender = 6; // 引用枚举类型
}
</code></pre>
<h2 id="服务定义service">服务定义（Service）</h2>
<ul>
<li>用于RPC场景，定义服务接口和方法：</li>
</ul>
<pre><code class="language-protobuf">service UserService {
  // 定义RPC方法：参数为Request，返回Response
  rpc GetUser(GetUserRequest) returns (UserResponse);
  rpc UpdateUser(UpdateUserRequest) returns (UpdateResponse);
}

// 方法参数和返回值的message定义
message GetUserRequest {
  int32 user_id = 1;
}
message UserResponse {
  User user = 1;
  bool success = 2;
}
</code></pre>
<h2 id="生成代码">生成代码</h2>
<ul>
<li>Proto文件需通过编译器（<code>protoc</code>）生成对应语言的代码（如Java、Python、Go等），生成的代码包含序列化、反序列化及消息操作的方法。</li>
</ul>
<blockquote>
<p>例如，生成Python代码：</p>
</blockquote>
<pre><code class="language-bash">protoc --python_out=./ user.proto
</code></pre>
<h1 id="x-参考文献">X 参考文献</h1>

</div>
<div id="MySignature" role="contentinfo">
    <div class="essaySuffix-box">
    <div class="essaySuffix-box-left" style=" margin: 6px auto; ">
        <img src="https://blog-static.cnblogs.com/files/johnnyzen/cnblogs-qq-group-qrcode.gif?t=1679679148" alt="QQ沟通交流群" onload="changeImg(this,200,100)">
    </div>
<div class="essaySuffix-box-right">
    <span class="essaySuffix-right-title">本文作者</span>：
        <strong><span><a href="https://github.com/Johnny-ZTSD" target="_blank">千千寰宇</a></span></strong>
    <br>
    <span style="font-weight: bold; white-space:nowrap;">本文链接</span>：
        <a href="https://www.cnblogs.com/johnnyzen" target="_blank" id="articleLinkElement"> https://www.cnblogs.com/johnnyzen</a>
    <br>
    <span class="essaySuffix-right-title">关于博文</span>：评论和私信会在第一时间回复，或<a href="https://msg.cnblogs.com/msg/send/johnnyzen" target="_blank">直接私信</a>我。
    <br>
    <span class="essaySuffix-right-title">版权声明</span>：本博客所有文章除特别声明外，均采用 <a title="https://creativecommons.org/licenses/by-nc-nd/4.0/" href="http://blog.sina.com.cn/s/blog_896327b90102y6c6.html" alt="BY-NC-SA" target="_blank">BY-NC-SA</a> 
    许可协议。转载请注明出处！<br>
    <span class="essaySuffix-right-title">日常交流</span>：大数据与软件开发-QQ交流群: 774386015<strong>
        <span style="color: #ff0000; font-size: 12pt;">【<a id="post-up" onclick="votePost(getArticleNumber(),'Digg')" href="javascript:void(0);">入群二维码</a>】</span></strong>参见左下角。您的支持、鼓励<span style="color: #ff0000; font-size: 12pt;"></span>是博主技术写作的重要动力！
    <br>
</div>
<div style="clear: both;">
</div>
</div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.0020833333333333333" data-date-updated="2025-08-29 12:13">2025-08-29 12:10</span>&nbsp;
<a href="https://www.cnblogs.com/johnnyzen">千千寰宇</a>&nbsp;
阅读(<span id="post_view_count">23</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19064326);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19064326', targetLink: 'https://www.cnblogs.com/johnnyzen/p/19064326', title: '[RPC/序列化] Proto 文件的语法解读' })">举报</a>
</div>
        