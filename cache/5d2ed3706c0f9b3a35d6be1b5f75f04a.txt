
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/tianqing/p/18622260" title="发布于 2024-12-23 08:48">
    <span role="heading" aria-level="2">.NET 9 New features-AOT相关的改进</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p>上一篇文章给大家介绍了</p>
<p><a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/tianqing/p/18622226">.NET 9 New features-JSON序列化</a></p>
<p>&nbsp;本篇文章，研究分享一下关于AOT方面的改进</p>
<p><strong><span style="font-size: 18px">1. 什么是AOT</span></strong></p>
<p>AOT（Ahead-of-Time）编译是一种在应用程序部署之前，将高级语言代码直接编译为本机机器代码的技术。</p>
<p>与传统的即时编译（Just-In-Time，JIT）不同，AOT 在应用程序运行之前完成编译过程，生成独立的可执行文件。这意味着应用程序在运行时无需依赖运行时环境进行代码转换，从而减少启动时间和运行时开销。</p>
<p><strong><span style="font-size: 18px">2. 为什么有AOT</span></strong></p>
<p>AOT 的出现主要是为了解决以下问题：</p>
<ul>
<li>
<p><strong>启动性能</strong>：由于应用程序已被编译为本机代码，AOT 消除了运行时编译的需求，从而显著减少应用程序的启动时间。</p>
</li>
<li>
<p><strong>运行时性能</strong>：通过提前编译，AOT 可以进行更深层次的优化，提高代码执行效率。</p>
</li>
<li>
<p><strong>平台兼容性</strong>：在某些不允许 JIT 编译的受限平台上，AOT 是唯一可行的解决方案。</p>
</li>
<li>
<p><strong>部署简化</strong>：AOT 生成的可执行文件不依赖于外部运行时，简化了部署过程，特别是在无法确保目标环境安装了特定运行时的情况下。</p>
</li>
</ul>
<p><strong><span style="font-size: 18px">3. AOT能解决什么问题</span></strong></p>
<p>AOT 编译可以有效解决以下问题：</p>
<ul>
<li>
<p><strong>提高启动速度</strong>：由于无需在运行时进行编译，应用程序可以更快速地启动，提升用户体验。</p>
</li>
<li>
<p><strong>降低内存占用</strong>：AOT 编译的应用程序通常具有更小的内存占用，因为不需要加载完整的运行时环境。</p>
</li>
<li>
<p><strong>增强安全性</strong>：通过消除运行时编译，减少了潜在的攻击面，提高了应用程序的安全性。</p>
</li>
<li>
<p><strong>支持老旧系统</strong>：.NET 9 的 AOT 编译器支持在 Windows 7 和 Windows XP 等老旧系统上运行，拓展了应用程序的适用范围。</p>
</li>
</ul>
<p><strong><span style="font-size: 18px">4. 如何使用AOT</span></strong></p>
<p>&nbsp; &nbsp; &nbsp; 在 .NET 9 中，使用 AOT 编译应用程序的步骤如下：</p>
<ul>
<li>
<p><strong>安装必要工具</strong>：确保已安装 .NET 9 SDK 和 Visual Studio 2022 预览版，并选择安装“使用 C++ 的桌面开发”和“.NET 桌面开发”工作负载。</p>
</li>
<li>
<p><strong>创建 AOT 项目</strong>：使用命令行创建新的 AOT 项目，例如：</p>
<div class="contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative bg-token-sidebar-surface-primary dark:bg-gray-950">
<div class="overflow-y-auto p-4" dir="ltr"><code class="!whitespace-pre hljs language-bash">dotnet new webapiaot -o MyFirstAotWebApi </code></div>
</div>
</li>
<li>
<p><strong>配置项目文件</strong>：在项目文件（.csproj）中，添加以下属性以启用 AOT 编译：</p>
<div class="contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative bg-token-sidebar-surface-primary dark:bg-gray-950">
<div class="overflow-y-auto p-4" dir="ltr"><code class="!whitespace-pre hljs language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">PublishAot&gt;true<span class="hljs-tag">&lt;/<span class="hljs-name">PublishAot&gt; </span></span></span></span></code></div>
</div>
</li>
<li>
<p><strong>发布应用程序</strong>：使用以下命令发布 AOT 编译的应用程序：</p>
<div class="contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative bg-token-sidebar-surface-primary dark:bg-gray-950">
<div class="overflow-y-auto p-4" dir="ltr"><code class="!whitespace-pre hljs language-bash">dotnet publish -c Release </code></div>
</div>
</li>
<li>
<p><strong>运行可执行文件</strong>：在发布目录中，找到生成的可执行文件，直接运行即可。</p>
</li>
</ul>
<p>&nbsp; &nbsp; &nbsp;这里有一篇文章，专门介绍&nbsp;<a href="https://learn.microsoft.com/en-us/aspnet/core/fundamentals/native-aot?view=aspnetcore-9.0?WT.mc_id=DT-MVP-5003918" target="_blank" rel="noopener nofollow">ASP.NET Core support for Native AOT</a></p>
<p>&nbsp; &nbsp; &nbsp;其中。解释了一下ASP.NET Core为什么使用AOT，</p>
<p>&nbsp; &nbsp; &nbsp;使用 Native AOT 发布和部署应用程序具有以下优势：</p>
<ol>
<li>
<p><strong>最小化磁盘占用</strong>：<br>使用 Native AOT 发布时，会生成一个包含仅支持程序所需的外部依赖代码的单个可执行文件。减少的可执行文件大小带来的好处包括：</p>
<ol>
<li>更小的容器镜像，例如在容器化部署场景中。</li>
<li>更快的部署时间，因为镜像体积较小。</li>
</ol></li>
<li>
<p><strong>减少启动时间</strong>：<br>Native AOT 应用程序启动时间较短，这意味着：</p>
<ol>
<li>应用程序能够更快地准备好处理请求。</li>
<li>在需要从一个版本的应用迁移到另一个版本时，对容器编排器的部署表现更优。</li>
</ol></li>
<li>
<p><strong>降低内存需求</strong>：<br>Native AOT 应用程序的内存需求可能会降低，具体取决于应用程序的工作内容。较低的内存消耗可以带来：</p>
<ol>
<li>更高的部署密度。</li>
<li>提升的可扩展性。</li>
</ol></li>
</ol>
<p><strong><span style="font-size: 18px">5. .NET 9 AOT的改进</span></strong></p>
<ul>
<li>支持老旧系统：AOT 编译器现在支持在 Windows 7 和 Windows XP 等老旧系统上运行，拓展了应用程序的适用范围。 </li>
<li>性能提升：通过优化编译过程，AOT 编译后的应用程序在启动时间和执行效率方面都有显著提升。 </li>
<li>更广泛的平台支持：.NET 9 的 AOT 编译器扩展了对多种平台的支持，包括最新的 iOS、macOS 和 Android 操作系统。 </li>
<li>内联改进：在 .NET 9 中，AOT 编译器对线程本地静态数据的访问进行了内联优化，减少了指令数，提高了性能。 </li>
<li>PGO 改进：动态按配置优化（PGO）在 .NET 9 中得到了扩展，能够分析更多代码模式，提高类型检查和强制转换的性能。</li>
</ul>
<p>&nbsp; &nbsp; &nbsp; 然后，什么是内联改进？</p>
<p style="margin-left: 30px"><strong>内联</strong>是指编译器在调用函数时，将被调用的函数代码直接插入到调用点，从而减少函数调用的开销，提升执行效率。在 .NET 9 中，内联机制得到了增强，特别是在共享泛型和运行时查找方面。</p>
<p style="margin-left: 30px"><strong>示例说明：</strong><code class="!whitespace-pre hljs language-csharp"><span class="hljs-function"><span class="hljs-keyword">public T <span class="hljs-title">Add&lt;<span class="hljs-title">T&gt;(<span class="hljs-params">T a, T b) { <span class="hljs-keyword">return a + b; }</span></span></span></span></span></span></code></p>
<p style="margin-left: 30px">在之前的版本中，由于泛型方法的多态性，编译器可能无法有效地将其内联。而在 .NET 9 中，内联机制的改进使得即使是共享的泛型方法，也能在特定情况下被内联，从而减少运行时查找，提高性能。</p>
<p style="margin-left: 30px">然后，PGO改进有哪些？</p>
<p style="margin-left: 30px">按配置优化（Profile-Guided Optimization，PGO）是一种利用应用程序运行时的实际性能数据来指导编译器优化代码的技术。</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;.NET 8 默认启用了<a href="https://learn.microsoft.com/zh-cn/dotnet/core/runtime-config/compilation#profile-guided-optimization" data-linktype="relative-path" rel="noopener nofollow">动态按配置优化 (PGO)</a>。 NET 9 扩展了 64 位 JIT 编译器的 PGO 实现，以分析更多代码模式。 启用分层编译后，64 位 JIT 编译器已将检测插入到你的程序中以分析其行为。 当它通过优化重新编译时，编译器会利用它在运行时构建的配置文件来做出特定于程序当前运行的决策。 在 .NET 9 中，64 位 JIT 编译器使用 PGO 数据来提高类型检查的性能。</p>
<p>以上是关于.NET AOT的研究分享。</p>
<p>&nbsp;</p>
<p>周国庆</p>
<p>2024/12/23</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.2565229307997685" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2024-12-23 08:49">2024-12-23 08:48</span>&nbsp;
<a href="https://www.cnblogs.com/tianqing">Eric zhou</a>&nbsp;
阅读(<span id="post_view_count">176</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18622260" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18622260);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18622260', targetLink: 'https://www.cnblogs.com/tianqing/p/18622260', title: '.NET 9 New features-AOT相关的改进' })">举报</a>
</div>
        