
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/Easun-Dongyang/p/18990022" title="发布于 2025-07-17 17:02">
    <span role="heading" aria-level="2">RK3568（泰山派开发板）开发环境搭建与使用</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>主要参考立创泰山派官方教程，链接：<a href="https://openkits-wiki.easyeda.com/zh-hans/tspi-rk3566/sdk-compilation/linux-compilation.html" target="_blank" rel="noopener nofollow">https://openkits-wiki.easyeda.com/zh-hans/tspi-rk3566/sdk-compilation/linux-compilation.html</a></p>
<h1 id="一芯片参数">一、芯片参数</h1>
<p><img alt="" loading="lazy" data-src="https://ex5xn5y3x9.feishu.cn/space/api/box/stream/download/asynccode/?code=ODQxNTU4MjRhMjJkNWM5M2Q3OGVmZDM4MGJhYmI2OGZfOElRMjlmTmdKTW1uT0RTUmoxTmNpNWVZMGhOZ0hNeFFfVG9rZW46TzB3OGJ4dHFwb216RUx4VVZ3Z2M2QllRbjFiXzE3NTI3NDI4NzI6MTc1Mjc0NjQ3Ml9WNA" class="lazyload"></p>
<p><img alt="" loading="lazy" data-src="https://ex5xn5y3x9.feishu.cn/space/api/box/stream/download/asynccode/?code=MTU1MmFiMjRhMDMyZjY1NDI1YzQyZWJkODAwOGU2ZTFfTk96bXpyQzlEbnF6Mmh5a3hoVzR5RVF6d3BUbGVhaWdfVG9rZW46RFh2UWJXdjRab3BkVjV4ZUhOV2NhNWV1bjZkXzE3NTI3NDI4NzI6MTc1Mjc0NjQ3Ml9WNA" class="lazyload"></p>
<p>CPU：4核A55，主频1.8GHz</p>
<p>GPU：支持OpenGL，支持4K，60fps解码</p>
<p>NPU：1.0TOP，可以跑一些简单的AI框架模型</p>
<p>价格：只要100多，非常划算！可以用来学习Linux、Andorid</p>
<h1 id="二开发环境搭建">二、开发环境搭建</h1>
<h2 id="21-虚拟机安装">2.1 虚拟机安装</h2>
<p>用于在Windows中安装一个Ubuntu等linux操作系统，可以使用VMware、WSL2等方式，如果电脑是linux操作系统可以略过。我这里使用VMware，版本：VMware Workstation PRO 17。关于安装/Pojie虚拟机的教程有很多，不再赘述。</p>
<h2 id="22-安装ubuntu操作系统">2.2 安装Ubuntu操作系统</h2>
<p>Ubuntu是linux的一个发行版本，我这里使用的Ubuntu版本如下：</p>
<p><img alt="" loading="lazy" data-src="https://ex5xn5y3x9.feishu.cn/space/api/box/stream/download/asynccode/?code=MmQwZjM5ZDJjOTdjMjQyNzZmNWFjM2E3ZjcxZTdjNGFfR21pTDJjSEF0RXNLR21nZzRHdHdycmNCSzREZXlSSkFfVG9rZW46U01lbWI5WGJ6b2lsSnR4bEQ4cmNLeG0xbnBiXzE3NTI3NDI4NzI6MTc1Mjc0NjQ3Ml9WNA" class="lazyload"></p>
<p>内核版本：5.4.0-150</p>
<p>Ubuntu发行版本：18.04.1</p>
<p>这一步可以参考正点原子等，网上教程也很多。</p>
<p>值得注意的是Ubuntu虚拟机最少需要100G以上的空间，因为编译RK的SDK就需要80G</p>
<h2 id="23-sdk下载">2.3 SDK下载</h2>
<p>下载链接：<a href="https://pan.baidu.com/s/1HtnpytCBBqBOqZi8mfV4VQ?pwd=qcxx#list/path=%2F" target="_blank" rel="noopener nofollow">https://pan.baidu.com/s/1HtnpytCBBqBOqZi8mfV4VQ?pwd=qcxx#list/path=%2F</a></p>
<p>目录：<code>下载中心</code>-&gt;<code>百度网盘</code>-&gt;<code>第05章.【立创·泰山派】系统SDK</code>-&gt;<code>【SDK】Linux</code>-&gt;<code>tspi_linux_sdk_xxxxxxxx.tar.gz</code></p>
<p><img alt="" loading="lazy" data-src="https://ex5xn5y3x9.feishu.cn/space/api/box/stream/download/asynccode/?code=MmFiMmVkZTlmNWIzMzMyYjI0MGVlZWQ2NTdhODM3MzdfVDZnOHdNT2l3N01WSWJVTUEwUmdRd1gxRVVBZTZqNGxfVG9rZW46SFRNQmJ6OVZ1b1Fobkx4UzdBOGNDcEtRblZVXzE3NTI3NDI4NzI6MTc1Mjc0NjQ3Ml9WNA" class="lazyload"></p>
<p>框起来的两个文件下载其中一个即可，我使用不带repo的。</p>
<p>下载完成后，可以通过Samba共享文件夹的方式，将SDK目录复制到虚拟机工作目录下，目录名称不要包含中文。</p>
<p>注意：下载完成后，最好使用md5sum工具检验一下文件完整性，与SDK目录里的MD5码对比一下。</p>
<p>将SDK压缩包解压：</p>
<pre><code class="language-Java">tar -zxvf tspi_linux_sdk_20230916.tar.gz
</code></pre>
<p>解压后会得到Release目录，目录下的文件内容如下：</p>
<pre><code class="language-Java">app     buildroot  debian  envsetup.sh  IMAGE   Makefile       prebuilts  rkflash.sh  tools   yocto
br.log  build.sh   device  external     kernel  mkfirmware.sh  rkbin      rockdev     u-boot
</code></pre>
<pre><code class="language-Java">app： 存放上层应⽤ app，主要是 qcamera/qfm/qplayer/settings 等⼀些应⽤程序。
buildroot： 基于 buildroot (2018.02-rc3) 开发的根⽂件系统。
debian： 基于 debian 10 开发的根⽂件系统，⽀持部分芯⽚。
device/rockchip： 存放各芯⽚板级配置和 Parameter ⽂件，以及⼀些编译与打包固件的脚本和预备⽂件。
IMAGE： 存放每次⽣成编译时间、XML、补丁和固件⽬录。
external： 存放第三⽅相关仓库，包括⾳频、视频、⽹络、recovery 等。
kernel： 存放 kernel 4.4 或 4.19 开发的代码。
prebuilts： 存放交叉编译⼯具链。
rkbin： 存放 Rockchip 相关的 Binary 和⼯具。
rockdev： 存放编译输出固件。
tools： 存放 Linux 和 Windows 操作系统环境下常⽤⼯具。
u-boot： 存放基于 v2017.09 版本进⾏开发的 uboot 代码。
yocto： 基于 yocto gatesgarth 3.2 开发的根⽂件系统，⽀持部分芯⽚。
</code></pre>
<h2 id="24-编译环境配置">2.4 编译环境配置</h2>
<p>主要是安装一些编译用的工具。</p>
<pre><code class="language-java">sudo apt-get update
</code></pre>
<pre><code class="language-Java">sudo apt-get install git ssh make gcc libssl-dev liblz4-tool expect \
g++ patchelf chrpath gawk texinfo chrpath diffstat binfmt-support \
qemu-user-static live-build bison flex fakeroot cmake gcc-multilib \
g++-multilib unzip device-tree-compiler ncurses-dev
</code></pre>
<p>需要保持网络通畅。</p>
<h2 id="25-编译sdk">2.5 编译SDK</h2>
<h3 id="251-板级配置">2.5.1. 板级配置：</h3>
<p>选择3，BoardConfig-rk3566-tspi-v10.mk，并回车</p>
<pre><code class="language-Java">./build.sh lunch
</code></pre>
<p><img alt="" loading="lazy" data-src="https://ex5xn5y3x9.feishu.cn/space/api/box/stream/download/asynccode/?code=ODVjNjBiMWJmNjIzYWJhM2FjOGM5OTA4NzllYmU1ZjdfMm5LNzA2Z1lwNTAxSkt6REFySGRxekJ6dUxaRUZSUVNfVG9rZW46V044ZGJ5Mlg0b0FTd3V4Zmg3dmNGNFNDbnFlXzE3NTI3NDI4NzI6MTc1Mjc0NjQ3Ml9WNA" class="lazyload"></p>
<p>查看配置是否生效</p>
<pre><code class="language-Java">./build.sh -h kernel
</code></pre>
<p><img alt="" loading="lazy" data-src="https://ex5xn5y3x9.feishu.cn/space/api/box/stream/download/asynccode/?code=ZTdmMDViOGMxN2JiOGUwNWFiNDkyYjgyZmIxOTkwYmZfNzJ4NlZqZHJKTU5UQUVGSU5qclo3eUxKd3dhSUFhV2RfVG9rZW46WVBxUGJTWk9ibzZTRHB4dndyb2NPTndYbmZkXzE3NTI3NDI4NzI6MTc1Mjc0NjQ3Ml9WNA" class="lazyload"></p>
<h3 id="252-选择操作系统">2.5.2. 选择操作系统</h3>
<p>可选buildroot、debian、ubuntu，buildroot根文件系统所占内存比较小，优先推荐。</p>
<p>此外，如果你的开发不涉及驱动开发，只做应用开发，也可以直接下载官方编译好的系统镜像，地址：</p>
<p><a href="https://pan.baidu.com/s/1HtnpytCBBqBOqZi8mfV4VQ?pwd=qcxx#list/path=%2F" target="_blank" rel="noopener nofollow">https://pan.baidu.com/s/1HtnpytCBBqBOqZi8mfV4VQ?pwd=qcxx#list/path=%2F</a></p>
<p>在06章-系统镜像目录下。</p>
<p>以编译buildroot操作系统为例：选择buildroot操作系统</p>
<pre><code class="language-Java">export RK_ROOTFS_SYSTEM=buildroot
</code></pre>
<p>运行全编译：(全编译时间非常漫长，取决于电脑配置，我编译了2个小时)</p>
<pre><code class="language-Java">./build.sh all         # 只编译模块代码（u-Boot，kernel，Rootfs，Recovery）
                       # 需要再执⾏./mkfirmware.sh 进⾏固件打包
</code></pre>
<p>第一次编译需要选择电源：</p>
<p><img alt="" loading="lazy" data-src="https://ex5xn5y3x9.feishu.cn/space/api/box/stream/download/asynccode/?code=ZTZkNjJmN2RkZWE5OWVhMjY2NzkwODljZTVjM2U4MjBfaWJ6bmNZa1pRVWZCZEUwTE5ET2lTN1M4bXdOdGtFQjFfVG9rZW46SUZGc2J3RENWb0toSTF4ZDFhZGMyeDB3bnJlXzE3NTI3NDI4NzI6MTc1Mjc0NjQ3Ml9WNA" class="lazyload"></p>
<p><img alt="" loading="lazy" data-src="https://ex5xn5y3x9.feishu.cn/space/api/box/stream/download/asynccode/?code=ZGViZTc3OWQ1NWM1NDdhZjZlOWRiMDMxOTU1YWQyYTFfaXR1UnRnSDkzWFA0VDJPbFRqWUlsYVZYbUxFVDZ3RGNfVG9rZW46TDBQZ2JBSk9Rb0loMU54S283SGNINWp2bk9kXzE3NTI3NDI4NzI6MTc1Mjc0NjQ3Ml9WNA" class="lazyload"></p>
<p><img alt="" loading="lazy" data-src="https://ex5xn5y3x9.feishu.cn/space/api/box/stream/download/asynccode/?code=MTQwOTNmMjhmOWQ1Nzg2YWQ2NDU3YjQwNDhlODBjNzRfYlk1NmhsWk00Q3JlMlFCRGZNNjhVdTlTWkt2SGVuRXVfVG9rZW46R2VJTGJWNkJWbzV3cG54enMzNmM1bm1oblNlXzE3NTI3NDI4NzI6MTc1Mjc0NjQ3Ml9WNA" class="lazyload"></p>
<p><img alt="" loading="lazy" data-src="https://ex5xn5y3x9.feishu.cn/space/api/box/stream/download/asynccode/?code=NDEzMjlmMDRmZWQyMmZlNGQ1NThhN2NkNzY1ZmQxNWJfN0o3SUtWZnAzclZMajZ3Q1JrQnMydU1sYUxCQ29YdW5fVG9rZW46R3l6c2JSUk1wb2lSemh4SHJQdGM3MkxhbnJiXzE3NTI3NDI4NzI6MTc1Mjc0NjQ3Ml9WNA" class="lazyload"></p>
<p><img alt="" loading="lazy" data-src="https://ex5xn5y3x9.feishu.cn/space/api/box/stream/download/asynccode/?code=MTcwYTFiNmM4MzY0M2Y4MDg3Nzc2NDE4Yzk3MDE2YTlfUURES2NkdU1TNmhxWm5mUXlrbU5yWmdObnJOWGw1UDNfVG9rZW46Q1FYZGJDbUx2b2hZNzl4bkhVUGNVMmdJblhmXzE3NTI3NDI4NzI6MTc1Mjc0NjQ3Ml9WNA" class="lazyload"></p>
<p><img alt="" loading="lazy" data-src="https://ex5xn5y3x9.feishu.cn/space/api/box/stream/download/asynccode/?code=MDM3OTRiYjMyZjc4ODcxODhhOGFlOGM5MjU2MjAyZTBfZ1FiUGpWSEx4RUtHams1aThFOXZhdndvMG9GTjV5eTJfVG9rZW46TmtzTWJuSHNCb1FEZGp4V0tWVmNGWDdObmUyXzE3NTI3NDI4NzI6MTc1Mjc0NjQ3Ml9WNA" class="lazyload"></p>
<p><img alt="" loading="lazy" data-src="https://ex5xn5y3x9.feishu.cn/space/api/box/stream/download/asynccode/?code=YjdmN2M5YmU3M2UxNDdjZDY0MTRhNjBkNjlmMmE1YjNfc1hqb1Zpb0hXY0xyZ3VDd3dUMUNGWFVzZkpJNmZUSHdfVG9rZW46UEVxbGJNUjAxbzc5c1h4cHF4UGNpbDdSbkFkXzE3NTI3NDI4NzI6MTc1Mjc0NjQ3Ml9WNA" class="lazyload"></p>
<p>编译完成后截图：</p>
<p><img alt="" loading="lazy" data-src="https://ex5xn5y3x9.feishu.cn/space/api/box/stream/download/asynccode/?code=MDU0OTYyNTA4ZjMzNjYxZWU0ODQ2NGRjNDAxMzhkOTFfWVl1eGZzUHh0V1FIbk12ZFoza0xHMEUzdTRNNWt5Y2lfVG9rZW46QWFKc2J3WWQ1b3R1MHN4dUFsQmNoT3htbktkXzE3NTI3NDI4NzI6MTc1Mjc0NjQ3Ml9WNA" class="lazyload"></p>
<h3 id="253-固件打包">2.5.3 固件打包</h3>
<pre><code class="language-Java">./mkfirmware.sh
</code></pre>
<p>打包成功后，固件会输出到 <code>rockdev</code> 目录:</p>
<pre><code class="language-Java">boot.img           misc.img  parameter.txt  rootfs.img  update.img
MiniLoaderAll.bin  oem.img   recovery.img   uboot.img   userdata.img
</code></pre>
<p>如果，你参考上述环境仍然编译不成功，可以通过Docker方式，再套娃一层立创官方的编译环境，教程链接：<a href="https://openkits-wiki.easyeda.com/zh-hans/tspi-rk3566/sdk-compilation/docker-compiling-environment.html" target="_blank" rel="noopener nofollow">https://openkits-wiki.easyeda.com/zh-hans/tspi-rk3566/sdk-compilation/docker-compiling-environment.html</a></p>
<h2 id="26-固件烧录">2.6 固件烧录</h2>
<h3 id="261-windows系统下固件烧录">2.6.1 windows系统下固件烧录</h3>
<h4 id="1-下载rkdevtoolexe工具在07-开发工具目录下">1 下载RKDevTool.exe工具，在07-开发工具目录下。</h4>
<p><img alt="" loading="lazy" data-src="https://ex5xn5y3x9.feishu.cn/space/api/box/stream/download/asynccode/?code=NWIzZjQ3NDI0ZWQ0NDhmZGQ0YzgwMGI1Mjk2ZWFjYzRfbWNnb1NySzlGMmw1aTVrQXlXcjl5TXZKUkhtQTZpUFlfVG9rZW46UktkUGJBVGZ0bzdvb1R4ZVpzUWNBbk9FbnpkXzE3NTI3NDI4NzI6MTc1Mjc0NjQ3Ml9WNA" class="lazyload"></p>
<h4 id="2-下载tspi_linux_configcfg配置文件">2 下载Tspi_linux_config.cfg配置文件：</h4>
<p><code>下载中心</code>-&gt;<code>百度网盘</code>-&gt;<code>第06章.【立创·泰山派】系统镜像</code>-&gt;<code>【镜像】Ubuntu</code>-&gt;<code>Tspi_Linux_config.cfg</code></p>
<h4 id="3-下载镜像">3 下载镜像</h4>
<p>打开RKDevTool.exe软件，右键选择导入Tspi_linux_config.cfg配置文件，并把路径改成你编译好的固件路径，接着操作按住泰山派REC按键不松，轻触一下RST按键等待进入Loader模式后松开REC按键，当工具发现一个LOADER设备后点击执行升级。升级完成后系统会自动重启。</p>
<p>重启后，能通过ADB或者串口方式登录进去，串口输出一下信息，说明SDK编译、烧录成功了。</p>
<p><img alt="" loading="lazy" data-src="https://ex5xn5y3x9.feishu.cn/space/api/box/stream/download/asynccode/?code=MTA2YjM1MzU1NzNlNTI0NGM5OWVhOWUzOWRlYjhmZThfcnBxRHZWWXVVcEtYa2RpTk1neXNOQ2N2QXRhWEZDRVFfVG9rZW46S2dQS2JZWnd5b3gydzd4VU1DVGNFcEVjbkRlXzE3NTI3NDI4NzI6MTc1Mjc0NjQ3Ml9WNA" class="lazyload"></p>
<h3 id="262-linux环境下固件烧录">2.6.2 Linux环境下固件烧录</h3>
<p>在 Ubuntu 下可以使用 Linux_Upgrade_Tool 工具进行烧录，该工具集成 在 SDK 中，路径为：<strong><sdk>/tools/linux/Linux_Upgrade_Tool/Linux_Upgrade_Tool.</sdk></strong>该目录下有两份 RK 提供的使用说明文档：《<strong>命令行开发工具使用文档.pdf</strong>》、《<strong>Linux 开发 工具使用手册_v1.32.pdf</strong>》，关于 upgrade_tool 工具的详细使用方法请参考这两份文档。</p>
<p>在 Ubuntu 下使用 upgrade_tool 工具烧写镜像之前，需要将开发板连接到 Ubuntu 系统。首 先，连接好硬件（连接电源适配器以及 OTG 口），让开发板处于 Maskrom 或 Loader 模式下（按住泰山派REC按键不松，轻触一下RST按键等待进入Loader模式后松开REC按键）。在“<strong>虚拟机****→可移动设备</strong>”下面也可以找到该设备，如下图所示：</p>
<p><img alt="" loading="lazy" data-src="https://ex5xn5y3x9.feishu.cn/space/api/box/stream/download/asynccode/?code=MzBhOTA0MmQ0Mjk0MjUxOWYyZjg1MGM5MjliYmY0OGRfWUdrekhOQjJ5cFJkS2gzMTYwZWRROENtNUFHcEVBMFBfVG9rZW46REJrSGI3Njc0b2dsM0V4aVR6b2NTMnVtbkxmXzE3NTI3NDI4NzI6MTc1Mjc0NjQ3Ml9WNA" class="lazyload"></p>
<p>进入到<sdk>/rockdev 目录</sdk></p>
<p>使用UL指令烧写MiniLoaderAll.bin镜像，使用DI指令烧写其它镜像（uboot.img、boot.img、 oem.img、userdata.img、rootfs.img、misc.img 等）以及分区表文件 parameter.txt。</p>
<h4 id="1--先烧写-miniloaderallbin-镜像使用-ul-指令烧写-miniloaderallbin执行-upgrade_tool-命令时需要加入-sudo-获取到-root-用户权限否则操作会失败">1.  先烧写 MiniLoaderAll.bin 镜像，使用 UL 指令烧写 MiniLoaderAll.bin（<strong>执行 upgrade_tool 命令时需要加入 sudo 获取到 root 用户权限，否则操作会失败！</strong>）：</h4>
<pre><code class="language-Java">sudo ../tools/linux/Linux_Upgrade_Tool/Linux_Upgrade_Tool/upgrade_tool UL MiniLoaderAll.bin - 
noreset
</code></pre>
<h4 id="2--要通过-di-指令下载-parametertxt-分区表">2.  要通过 DI 指令下载 parameter.txt 分区表：</h4>
<pre><code class="language-Java">sudo ../tools/linux/Linux_Upgrade_Tool/Linux_Upgrade_Tool/upgrade_tool DI -p parameter.txt
</code></pre>
<h4 id="3--烧录其它镜像">3.  烧录其它镜像：</h4>
<pre><code class="language-Java">sudo ../tools/linux/Linux_Upgrade_Tool/Linux_Upgrade_Tool/upgrade_tool DI -uboot uboot.img 
sudo ../tools/linux/Linux_Upgrade_Tool/Linux_Upgrade_Tool/upgrade_tool DI -misc misc.img 
sudo ../tools/linux/Linux_Upgrade_Tool/Linux_Upgrade_Tool/upgrade_tool DI -boot boot.img
sudo ../tools/linux/Linux_Upgrade_Tool/Linux_Upgrade_Tool/upgrade_tool DI -recovery recov
ery.img 
sudo ../tools/linux/Linux_Upgrade_Tool/Linux_Upgrade_Tool/upgrade_tool DI -oem oem.img 
sudo ../tools/linux/Linux_Upgrade_Tool/Linux_Upgrade_Tool/upgrade_tool DI -rootfs rootfs.img 
sudo ../tools/linux/Linux_Upgrade_Tool/Linux_Upgrade_Tool/upgrade_tool DI -userdata userdata.img
</code></pre>
<h4 id="4--最后当所有镜像全部烧录完成后我们可以执行下面这条命令复位开发板重新启动系统">4.  最后，当所有镜像全部烧录完成后，我们可以执行下面这条命令复位开发板、重新启动系统：</h4>
<pre><code class="language-Java">sudo ../tools/linux/Linux_Upgrade_Tool/Linux_Upgrade_Tool/upgrade_tool RD
</code></pre>
<h4 id="5-对于updateimg打包后的整个文件使用以下命令烧录">5. 对于<strong>update.img（打包后的整个文件）使用以下命令烧录：</strong></h4>
<pre><code class="language-Java">sudo ../tools/linux/Linux_Upgrade_Tool/Linux_Upgrade_Tool/upgrade_tool UF update.img
</code></pre>
<h1 id="三使用">三、使用</h1>
<h2 id="31设备树使用测试">3.1.设备树使用测试</h2>
<p>找到SDK目录下：<sdk>kernel/arch/arm64/boot/dts/rockchip目录下的tspi-rk3566-user-v10-linux.dts设备树文件</sdk></p>
<h4 id="311-创建节点">3.1.1 创建节点</h4>
<p>我们尝试在根节点下创建一个设备节点，添加以下内容：</p>
<pre><code class="language-java">mylednode@0x1234{
    gpios = &lt;&amp;gpio1 RK_PB3 GPIO_ACTIVE_LOW&gt;;
    status = "okay";
    a-stringp-property = "my led A-string";
    addr-property = &lt;0xdeadbeef&gt;;
};
</code></pre>
<h4 id="312-重新编译内核">3.1.2 重新编译内核</h4>
<p>接下来我们保存设备树文件，并重新编译内核：</p>
<pre><code class="language-java">./build.sh kernel
</code></pre>
<p><img alt="" loading="lazy" data-src="https://ex5xn5y3x9.feishu.cn/space/api/box/stream/download/asynccode/?code=NGNkNmM5N2E5NjY3N2VjYWUwZWRhYzY5MmJmODFhNzlfS0h3N1gxVkNvWEZQdkFEUlVHUWlRblBkM2g0ZUFnZ2hfVG9rZW46R0RvNWJkV0tDbzQ5TUd4RDNLeGM2end2bmFmXzE3NTI3NDI4NzI6MTc1Mjc0NjQ3Ml9WNA" class="lazyload"></p>
<h4 id="313-打包烧录固件">3.1.3 打包、烧录固件</h4>
<p>编译成功后，打包固件：</p>
<pre><code class="language-Java">./mkfirmware.sh
</code></pre>
<p>最后，重新烧录下boot（只更新boot即可）</p>
<p><img alt="" loading="lazy" data-src="https://ex5xn5y3x9.feishu.cn/space/api/box/stream/download/asynccode/?code=ZGM1ZTFhODJmNmFjYTgyM2FkY2U2NTVhMjdmZGNmODRfRU9sVGhzeFpGbzVWRUs4QlY1YVBMdUp1THVtMnlVTlJfVG9rZW46RllXb2JpVktDbzk0V094b3NHVGNpdld0blJjXzE3NTI3NDI4NzI6MTc1Mjc0NjQ3Ml9WNA" class="lazyload"></p>
<h4 id="314-设备树节点信息验证">3.1.4 设备树节点信息验证</h4>
<p>设备树信息会在内核初始化时传递给操作系统，我们进入到proc/device-tree目录，</p>
<pre><code class="language-java">cd /proc/device-tree
ls
</code></pre>
<p>找到我们创建的设备树节点，如下图，可以看到我们创建的设备树节点，我们进入该目录，通过cat命令查看节点信息，说明我们的设备树节点创建成功了。</p>
<p><img alt="" loading="lazy" data-src="https://ex5xn5y3x9.feishu.cn/space/api/box/stream/download/asynccode/?code=MzQ2N2JhMDIxZGZmNDU5OGRkNjc4MTdlYTAzZDQzNGFfTWIyWEoybHNsSjN0UDlvOWR6ZjYxbDJEVllhakp1NEJfVG9rZW46SmZDcWJOR0x0bzg0dnN4Y1NyMmNhSUI0bnM4XzE3NTI3NDI4NzI6MTc1Mjc0NjQ3Ml9WNA" class="lazyload"></p>
<p><img alt="" loading="lazy" data-src="https://ex5xn5y3x9.feishu.cn/space/api/box/stream/download/asynccode/?code=NzcwODFlZDgwZDYzNmEwYTE1MDczNzhjOGQ1NTZiNDlfVzRsdkRTTmdRY1FoTmFTcHF1WVVOMlBWdlR1eG1uSWpfVG9rZW46RzdSbGJMb3dwb2tyZ2d4ZVZwSWM2VEJxbktmXzE3NTI3NDI4NzI6MTc1Mjc0NjQ3Ml9WNA" class="lazyload"></p>
<h2 id="32-驱动开发测试">3.2 驱动开发测试</h2>
<p>我们编写一个字符类型测试驱动，编译驱动前需要先将内核编译通过。</p>
<h4 id="321-编写驱动">3.2.1 编写驱动</h4>
<p>测试驱动代码如下：</p>
<pre><code class="language-C++">#include &lt;linux/init.h&gt;
#include &lt;linux/module.h&gt;
#include &lt;linux/fs.h&gt;
#define MY_NAME "chardev"
int major = 0;

int my_open (struct inode *inode, struct file *file)
{
        printk("open!\n");
        return 0;
}
ssize_t my_read (struct file *file, char __user *buf, size_t size, loff_t *offset)
{
        printk("read!\n");
        return 0;
}
ssize_t my_write (struct file *file, const char __user *buf, size_t size, loff_t *offset)
{
        printk("write!\n");
        return 0;
}
int my_close (struct inode *inode, struct file *file)
{
        printk("close!\n");
        return 0;
}

struct file_operations fops = {
        .open = my_open,
        .read = my_read,
        .write = my_write,
        .release = my_close
};

static int __init mycdev_init(void)
{
        major = register_chrdev(0, MY_NAME, &amp;fops);
        if(major &lt; 0)
        {
                printk("reg failed!\n");
                return -1;
        }
        printk("reg successed\n");
    return 0;
}

static void __exit mycdev_exit(void)
{
        printk("hello world %s\n","exit");
        unregister_chrdev(major, MY_NAME);
}

module_init(mycdev_init);

module_exit(mycdev_exit);

MODULE_LICENSE("GPL");
MODULE_AUTHOR("LiSir LiSir@qq.com");
</code></pre>
<h4 id="322-编写makefile">3.2.2 编写MakeFile</h4>
<p>cc-linaro-6.3.1-2017.05-x86_64_aarch64-linux-gnu/bin/aarch64-linux-gnu-交叉编译链工具路径需要替换为你本地SDK下的实际目录。</p>
<pre><code class="language-Bash">#外部编译
#借助内核源码中的makefile文件 进行编译

#先指定当前目录
PWD ?= $(shell pwd)

#内核源码路径
KERNELDIR:=/home/lckfb/kernel
CROSS_COMPILE ?= /home/lckfb/prebuilts/gcc/linux-x86/aarch64/gcc-linaro-6.3.1-2017.05-x86_64_aarch64-linux-gnu/bin/aarch64-linux-gnu-

obj-m += demo.o

CC := $(CROSS_COMPILE)gcc

module:
        make -C $(KERNELDIR) M=$(PWD) ARCH=arm64 modules
        @# -C $(KERNELDIR) 从当前目录切换到内核源码下 借助内核源码makefile 进行make
        @# M=$(PWD) 只编译当前目录下的驱动文件
        @# ARCH=arm64 指定编译架构
        $(CC) test.c -o test
clean:
        make -C $(KERNELDIR) M=$(PWD) ARCH=arm64 clean
</code></pre>
<h3 id="323-编译驱动">3.2.3 编译驱动</h3>
<p>在驱动文件，目录下，执行:</p>
<pre><code class="language-java">make module
</code></pre>
<p>编译成功后会得到xxx.ko驱动文件。</p>
<h3 id="324-挂载驱动">3.2.4 挂载驱动</h3>
<p>将得到的xxx.ko文件通过ADB、SSH等方式copy至板卡目录下，执行挂载目录。</p>
<pre><code class="language-java">insmod demo.ko
</code></pre>
<h4 id="325-加载驱动">3.2.5 加载驱动:</h4>
<pre><code class="language-java">mknod /dev/chardev c 236 0
</code></pre>
<p>给驱动设置可执行权限</p>
<pre><code class="language-java">chmod 777 /dev/chardev
</code></pre>
<p>其中236代表主设备号，0代表子设备号，可以通过以下命令查看：</p>
<pre><code class="language-java">cat proc/devices
</code></pre>
<h2 id="33-用户app执行驱动验证">3.3 用户APP执行驱动验证</h2>
<h3 id="331-编写一个用户app">3.3.1 编写一个用户APP，</h3>
<p>打开第8章我们编写的驱动，并执行读写操作，测试驱动现象，</p>
<pre><code class="language-C++">#include &lt;stdio.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;unistd.h&gt;


int main()
{
        char buf[32] = {0};
        int fd = open("/dev/chardev",O_RDWR);
        if(fd == -1)
        {
                printf("open failed");
                return -1;
        }
        printf("chardev open success\n");
        read(fd,buf,sizeof(buf));
        write(fd,buf,sizeof(buf));
        close(fd);
        return 0;
}
</code></pre>
<h3 id="332-安装gcc交叉编译链工具">3.3.2 安装gcc交叉编译链工具</h3>
<pre><code class="language-Java">sudo apt install gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
</code></pre>
<h3 id="333-编译app">3.3.3 编译APP</h3>
<pre><code class="language-Java">sudo aarch64-linux-gnu-gcc test.c -o testAPP
</code></pre>
<p>编译成功后会得到teatAPP文件，将该文件copy至板卡中，给testAPP设置可执行权限：</p>
<pre><code class="language-java">chmod 777 testAPP
</code></pre>
<h3 id="334-执行app">3.3.4 执行APP</h3>
<pre><code class="language-java">./testAPP
</code></pre>
<p><img alt="" loading="lazy" data-src="https://ex5xn5y3x9.feishu.cn/space/api/box/stream/download/asynccode/?code=OWIyNWE5ZGUxMzQ0ZTZiYmRlYTMwNDM3NGU4YjJiOGZfYWtnZ1RQWVVQYlIxOU80WWl6WXVNSWlqNjVtSGc1cUNfVG9rZW46QlVkTGJnampOb0IzZ254U3k2eGNxcmNUblpFXzE3NTI3NDI4NzI6MTc1Mjc0NjQ3Ml9WNA" class="lazyload"></p>
<p>打印的信息与内核驱动及用户APP输出一致。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.018055555555555554" data-date-updated="2025-07-17 17:28">2025-07-17 17:02</span>&nbsp;
<a href="https://www.cnblogs.com/Easun-Dongyang">羊的第七章</a>&nbsp;
阅读(<span id="post_view_count">144</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18990022);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18990022', targetLink: 'https://www.cnblogs.com/Easun-Dongyang/p/18990022', title: 'RK3568（泰山派开发板）开发环境搭建与使用' })">举报</a>
</div>
        