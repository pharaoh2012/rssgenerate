
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/wang_yb/p/18630748" title="发布于 2024-12-25 16:12">
    <span role="heading" aria-level="2">『玩转Streamlit』--上传下载文件</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>在<code>Web</code>应用中，文件的<strong>上传下载</strong>是交互中不可缺少的功能。</p>
<p>因为在业务功能中，一般不会只有文字的交互，资料或图片的获取和分发是很常见的需求。</p>
<p>比如，<strong>文件上传</strong>可让用户向服务器提交数据，如上传图片分享生活、提交文档用于工作协作等，丰富应用功能。</p>
<p>而<strong>文件下载</strong>则使用户能获取服务器端的资源，像下载软件、报告等，提升用户对应用内容的获取能力，增强用户体验和应用实用性。</p>
<p>本篇介绍如何在<code>Streamlit</code>应用中实现文件的<strong>上传</strong>和<strong>下载</strong>功能。</p>
<h1 id="1-上传-stfile_uploader">1. 上传 st.file_uploader</h1>
<p><code>Streamlit</code>通过<code>st.file_uploader</code>可以很方便的实现文件上传功能。</p>
<p><code>st.file_uploader</code>实现文件上传时，包括以下的功能：</p>
<ol>
<li>本地文件选择：创建一个文件上传组件，然后用户可通过该组件选择本地文件进行上传</li>
<li>限制文件类型：可以指定允许上传的文件扩展名</li>
<li>支持多文件上传：能够同时选择并上传多个文件</li>
</ol>
<p>它的主要参数有：</p>
<table>
<thead>
<tr>
<th><strong>名称</strong></th>
<th><strong>类型</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>label</td>
<td>str</td>
<td>解释文件上传用途的简短标签</td>
</tr>
<tr>
<td>type</td>
<td>[str]</td>
<td>允许上传的文件扩展名数组</td>
</tr>
<tr>
<td>accept_multiple_files</td>
<td>bool</td>
<td>是否允许同时上传多个文件</td>
</tr>
<tr>
<td>key</td>
<td>str</td>
<td><font style="color: rgba(0, 0, 0, 0.85)">组件的唯一标识</font></td>
</tr>
<tr>
<td>help</td>
<td>str</td>
<td>上传文件的提示信息</td>
</tr>
<tr>
<td>on_change</td>
<td>func</td>
<td>文件上传时的回调函数</td>
</tr>
<tr>
<td>args</td>
<td>tuple</td>
<td>传递给回调函数的可选参数元组</td>
</tr>
<tr>
<td>kwargs</td>
<td>dict</td>
<td>传递给回调函数的可选参数字典</td>
</tr>
<tr>
<td>label_visibility</td>
<td>str</td>
<td>标签的可见性</td>
</tr>
</tbody>
</table>
<p>注意，<code>label_visibility</code>参数是配合<code>label</code>一起使用的，<code>label_visibility</code>只有3种值：</p>
<ol>
<li><code>visible</code>：这是默认值，表示正常显示<code>label</code></li>
<li><code>hidden</code>：显示空占位符</li>
<li><code>collapsed</code>：不显示标签或占位符</li>
</ol>
<p><code>label</code>参数也支持一些<code>markdown</code>格式，可以让标签内容显示的更加丰富。</p>
<p>下面通过一些示例来演示上传的使用方法：</p>
<h2 id="11-基本使用">1.1. 基本使用</h2>
<p>在这个示例中，<code>st.file_uploader</code>函数创建了一个文件上传组件，标签为 “<strong>选择文件</strong>”。</p>
<p>当用户选择并上传文件后，应用程序会显示上传文件的文件名。</p>
<pre><code class="language-python">import streamlit as st

uploaded_file = st.file_uploader("选择文件:")
if uploaded_file is not None:
    st.write(uploaded_file.name)
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202412/83005-20241225161133437-461330798.png" alt="" loading="lazy"></p>
<h2 id="12-上传限制">1.2. 上传限制</h2>
<p>默认情况下，<code>Streamlit</code> 允许上传的文件大小限制为 <code>200MB</code>。</p>
<p>如果需要修改这个限制，可以通过配置<code>server.maxUploadSize</code>选项来实现。</p>
<p>例如，要将上传文件大小限制设置为 <code>500MB</code>，可以在<code>Streamlit</code>的配置文件<code>config.toml</code>文件中添加以下配置：</p>
<pre><code class="language-toml">[server]
maxUploadSize = 500
</code></pre>
<h2 id="13-允许的文件类型">1.3. 允许的文件类型</h2>
<p>通过<code>type</code>参数指定允许上传的文件类型。</p>
<p>例如，只允许上传图片文件（<code>png</code> 和 <code>jpg</code> 格式），可以这样使用：</p>
<pre><code class="language-python">import streamlit as st

uploaded_file = st.file_uploader("选择图片文件", type=["png", "jpg"])
</code></pre>
<h2 id="14-上传多个文件">1.4. 上传多个文件</h2>
<p>如果需要允许用户<strong>上传多个文件</strong>，可以将<code>accept_multiple_files</code>参数设置为<code>True</code>。</p>
<p>示例如下：</p>
<pre><code class="language-python">import streamlit as st

uploaded_files = st.file_uploader("选择多个文件：", accept_multiple_files=True)
for uploaded_file in uploaded_files:
    st.write(uploaded_file.name)
</code></pre>
<h2 id="15-文件上传后的回调">1.5. 文件上传后的回调</h2>
<p>上传文件后，可以对文件进行各种处理。</p>
<p>例如，可以读取文件内容、将文件保存到本地、使用文件数据进行计算等。</p>
<p>以下是一个读取上传的 <code>CSV</code> 文件并显示数据的示例：</p>
<pre><code class="language-python">import streamlit as st
import pandas as pd

uploaded_file = st.file_uploader("选择 CSV 文件：")
if uploaded_file is not None:
    dataframe = pd.read_csv(uploaded_file)
    st.write(dataframe)
</code></pre>
<h1 id="2-下载-stdownload_button">2. 下载 st.download_button</h1>
<p><code>Streamlit</code>中一般使用<code>st.download_button</code>来实现文件下载功能。</p>
<p>当用户点击下载按钮时，可以将指定的文件内容下载到本地设备。</p>
<p>这一功能在许多场景中都非常实用，比如让用户下载数据报表、图片、文档等。</p>
<p><code>st.download_button</code>的主要参数有：</p>
<table>
<thead>
<tr>
<th><strong>名称</strong></th>
<th><strong>类型</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>label</td>
<td>str</td>
<td>解释文件下载用途的简短标签</td>
</tr>
<tr>
<td>data</td>
<td>str / bytes / file</td>
<td>要下载文件的内容</td>
</tr>
<tr>
<td>file_name</td>
<td>str</td>
<td>指定下载文件的名称，若未指定则自动生成</td>
</tr>
<tr>
<td>mime</td>
<td>str</td>
<td>数据的 MIME 类型</td>
</tr>
<tr>
<td>key</td>
<td>str</td>
<td><font style="color: rgba(0, 0, 0, 0.85)">组件的唯一标识</font></td>
</tr>
<tr>
<td>help</td>
<td>str</td>
<td>下载文件的提示信息</td>
</tr>
<tr>
<td>on_click</td>
<td>func</td>
<td>按钮点击时的回调函数</td>
</tr>
<tr>
<td>args</td>
<td>tuple</td>
<td>传递给回调函数的可选参数元组</td>
</tr>
<tr>
<td>kwargs</td>
<td>dict</td>
<td>传递给回调函数的可选参数字典</td>
</tr>
<tr>
<td>type</td>
<td>str</td>
<td>指定按钮类型</td>
</tr>
<tr>
<td>icon</td>
<td>str</td>
<td>按钮标签旁显示的表情符号或图标</td>
</tr>
</tbody>
</table>
<p>注意，<code>type</code>参数只有3种类型：</p>
<ol>
<li><code>primary</code>：背景为应用主色强调</li>
<li><code>secondary</code>：与背景协调</li>
<li><code>tertiary</code>：无框无背景纯文本</li>
</ol>
<p>下面通过一些示例来演示下载的使用方法：</p>
<h2 id="21-基本使用">2.1. 基本使用</h2>
<p>下面是一个简单的示例，展示如何使用<code>st.download_button</code>下载一个字符串内容的文件。</p>
<pre><code class="language-python">import streamlit as st

text_contents = "这是一段用来下载的文字。"
st.download_button("下载文本文件:", text_contents)
</code></pre>
<h2 id="22-下载-csv-文件">2.2. 下载 CSV 文件</h2>
<p>这个示例中，我们先将<code>DataFrame</code>转换为 <code>CSV</code> 格式的字节数据，然后通过<code>st.download_button</code>提供下载。</p>
<pre><code class="language-python">import streamlit as st
import pandas as pd

@st.cache_data
def convert_df(df):
    # 缓存转换结果，避免每次重新计算
    return df.to_csv()


df = pd.DataFrame({"col1": [1, 2, 3], "col2": ["a", "b", "c"]})
csv_data = convert_df(df)

st.download_button(
    label="下载 CSV",
    data=csv_data,
    file_name="data.csv",
    mime="text/csv",
)
</code></pre>
<h2 id="23-下载图片文件">2.3. 下载图片文件</h2>
<p>这个示例中，我们打开一个图片文件，以二进制读取模式读取文件内容，并将其作为<code>data</code>参数传递给下载按钮。</p>
<pre><code class="language-python">import streamlit as st

with open("image.jpg", "rb") as file:
    btn = st.download_button(
        label="下载图片",
        data=file,
        file_name="image.jpg",
        mime="image/jpeg"
    )
</code></pre>
<h1 id="3-总结">3. 总结</h1>
<p>总的来说，<code>Streamlit</code>中的<code>st.file_uploader</code>和<code>st.download_button</code>组件是实现文件交互的关键工具。</p>
<p>使用<code>st.file_uploader</code>时要注意上传大小限制，合理设置标签与键值，处理好文件类型及多文件上传情况。</p>
<p>对于<code>st.download_button</code>，需留意内存占用，准确设置文件内容、名称与MIME类型，考虑按钮样式及回调函数，同时防止应用意外重新运行。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.3367078302164352" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2024-12-25 16:12">2024-12-25 16:12</span>&nbsp;
<a href="https://www.cnblogs.com/wang_yb">wang_yb</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18630748" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18630748);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18630748', targetLink: 'https://www.cnblogs.com/wang_yb/p/18630748', title: '『玩转Streamlit』--上传下载文件' })">举报</a>
</div>
        