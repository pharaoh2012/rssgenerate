
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/seatunnel/p/18884674" title="发布于 2025-05-19 18:13">
    <span role="heading" aria-level="2">实战案例分享：如何基于Apache SeaTunnel全方位进行高效二次开发</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        大部分数据开发工程师基于Apache SeaTunnel的二次开发，可能做的就是任务提交，任务的一些监控，还有在任务没有跑起来之前，我们可能需要预先知道跑起来之后的可能一些结果。
    </div>
<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h1 data-sourcepos="1:1-1:84"><span style="font-size: 14px">大家好，我是范佳，是Apache SeaTunnel社区的PMC member，同时也是白鲸开源高级开发工程师。今天给大家分享一些基于Apache SeaTunnel二次开发的内容。</span></h1>
<p data-sourcepos="5:1-5:105"><img src="http://openwrite-whaleops.oss-cn-zhangjiakou.aliyuncs.com/31504_E89547CB535F4F2C97EF494ED18BAA82" alt="file" data-sourcepos="5:1-5:105"></p>
<p data-sourcepos="7:1-7:111">这部分内容主要涉及代码层面的知识，如果大家有什么疑问，欢迎来社区找我交流！</p>
<h2 data-sourcepos="9:1-9:9"><a id="%E5%BC%95%E8%A8%80" class="anchor"></a>引言</h2>
<p data-sourcepos="11:1-11:235">大部分数据开发工程师基于Apache SeaTunnel的二次开发，可能做的就是任务提交，任务的一些监控，还有在任务没有跑起来之前，我们可能需要预先知道跑起来之后的可能一些结果。</p>
<p data-sourcepos="13:1-13:66">基于以上内容，我将从五个部分来分享相关内容：</p>
<ol data-sourcepos="15:1-20:0">
<li data-sourcepos="15:1-15:22">SeaTunnel介绍</li>
<li data-sourcepos="16:1-16:31">SeaTunnel的启动能力</li>
<li data-sourcepos="17:1-17:31">任务监控的定制化</li>
<li data-sourcepos="18:1-20:0">行为预览与Sink的关联</li>
</ol>
<p data-sourcepos="21:1-21:200">Apache SeaTunnel 是一个高性能的实时和离线数据批处理平台，自加入Apache软件基金会以来已有两年多时间，期间社区不断发展，增加了许多新功能和特性。</p>
<p data-sourcepos="23:1-23:68">感兴趣的同学可以访问官网：<a href="https://seatunnel.apache.org/" rel="noopener nofollow">https://seatunnel.apache.org/</a></p>
<h2 data-sourcepos="26:1-26:34"><a id="apache-seatunnel%E7%9A%84%E6%A0%B8%E5%BF%83%E7%89%B9%E6%80%A7" class="anchor"></a>Apache SeaTunnel的核心特性</h2>
<h3 data-sourcepos="28:1-28:19"><a id="%E5%A4%9A%E5%BC%95%E6%93%8E%E6%94%AF%E6%8C%81" class="anchor"></a>多引擎支持</h3>
<p data-sourcepos="29:1-29:251">SeaTunnel支持多种数据处理引擎，包括市场上流行的开源引擎如Spark和Flink，以及SeaTunnel自研的Zeta引擎。这使得SeaTunnel能够灵活应对不同的数据处理需求，无论是大规模数据集还是实时数据流。</p>
<h3 data-sourcepos="31:1-31:19"><a id="%E6%B5%B7%E9%87%8F%E8%BF%9E%E6%8E%A5%E5%99%A8" class="anchor"></a>海量连接器</h3>
<p data-sourcepos="32:1-32:231">项目提供了广泛的连接器支持，使得SeaTunnel可以轻松接入各种数据源和目的地，从而简化了数据集成过程。这一特性对于需要将数据从多个源汇总到单一系统的企业尤为重要。</p>
<h3 data-sourcepos="34:1-34:14"><a id="http%E6%94%AF%E6%8C%81" class="anchor"></a>HTTP支持</h3>
<p data-sourcepos="35:1-35:221">对HTTP的支持是SeaTunnel的又一亮点，特别是对于开发者来说，因为它可以显著降低适配成本。通过HTTP支持，开发者可以更容易地将SeaTunnel集成到现有的Web应用和服务中。</p>
<h3 data-sourcepos="37:1-37:16"><a id="%E6%B5%81%E6%89%B9%E4%B8%80%E4%BD%93" class="anchor"></a>流批一体</h3>
<p data-sourcepos="38:1-38:201">SeaTunnel的流批一体功能确保了无缝的数据处理，无论是流处理还是批处理，都能在同一个平台上高效运行。这一特性简化了架构，减少了维护的复杂性。</p>
<h3 data-sourcepos="40:1-40:16"><a id="%E6%B5%81%E9%80%9F%E6%8E%A7%E5%88%B6" class="anchor"></a>流速控制</h3>
<p data-sourcepos="41:1-41:234">作为一个数据同步引擎，SeaTunnel提供了流速控制功能，这对保护下游系统不被过载非常关键。尤其是在上游数据量大而下游系统承载能力有限的场景中，流速控制显得尤为重要。</p>
<h3 data-sourcepos="43:1-43:16"><a id="%E8%87%AA%E5%8A%A8%E5%BB%BA%E8%A1%A8" class="anchor"></a>自动建表</h3>
<p data-sourcepos="44:1-44:240">自动建表功能可以极大地帮助简化数据处理流程，特别是对下游系统来说。这一功能允许SeaTunnel根据数据自动创建表结构，减少了手动介入的需要，提高了数据管道的灵活性和效率。</p>
<h2 data-sourcepos="47:1-47:21"><a id="seatunnel%E7%9A%84%E5%90%AF%E5%8A%A8" class="anchor"></a>SeaTunnel的启动</h2>
<p data-sourcepos="50:1-50:204">一般来讲，我们基于开源软件二开，第一步就是启动，而启动SeaTunnel任务的第一步是准备用户界面，确保二开后的用户可以通过界面触发或定时提交任务。</p>
<p data-sourcepos="52:1-52:89">一旦用户界面设置完成，以下是使用Shell脚本提交任务的基本步骤：</p>
<p data-sourcepos="56:1-56:92">编写Shell脚本：创建一个Shell脚本，用于封装启动命令和任务参数。</p>
<p data-sourcepos="58:1-58:105"><img src="http://openwrite-whaleops.oss-cn-zhangjiakou.aliyuncs.com/31504_84EBBC86D7C74FDFB36307848F6743CB" alt="file" data-sourcepos="58:1-58:105"></p>
<p data-sourcepos="60:1-60:78">执行命令：通过执行Shell脚本来提交任务到SeaTunnel引擎。</p>
<h2 data-sourcepos="63:1-63:27"><a id="job-id%E7%9A%84%E8%8E%B7%E5%8F%96%E4%B8%8E%E7%AE%A1%E7%90%86" class="anchor"></a>Job ID的获取与管理</h2>
<p data-sourcepos="65:1-65:62">在任务提交时，我们的引擎会返回一个任务ID。</p>
<p data-sourcepos="67:1-67:142">这个ID在使用脚本模式启动时只会打印在日志文件中。如果需要监控任务，需要解析日志文件以获取任务ID。</p>
<p data-sourcepos="69:1-69:113">然而，这种方式比较滞后，因为ID是引擎端生成的，可能需要等待一段时间才能得到。</p>
<p data-sourcepos="71:1-71:253">为了解决这个问题，我们新增了一个功能，允许在提交任务时配置自定义ID。这个ID可以由第三方服务或集成SeaTunnel的平台生成，然后传递给SeaTunnel，SeaTunnel会使用该ID作为任务的唯一标识。</p>
<p data-sourcepos="73:1-73:128">这项功能虽然小，但对于二次开发或集成非常有用，避免了解析日志或等待SeaTunnel生成ID的过程。</p>
<h2 data-sourcepos="75:1-75:30"><a id="%E6%8F%90%E4%BA%A4%E4%BB%BB%E5%8A%A1%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F" class="anchor"></a>提交任务的三种方式</h2>
<h3 data-sourcepos="77:1-77:15"><a id="shell%E6%A8%A1%E5%BC%8F" class="anchor"></a>Shell模式</h3>
<p data-sourcepos="79:1-79:76">通过Shell脚本启动任务时，可以在日志文件中获取任务ID。</p>
<h3 data-sourcepos="81:1-81:18"><a id="rest-api%E6%A8%A1%E5%BC%8F" class="anchor"></a>REST API模式</h3>
<p data-sourcepos="83:1-83:115">我们也支持通过HTTP提交任务。这种方式无需额外启动客户端，对第三方集成更加友好。</p>
<p data-sourcepos="85:1-85:105"><img src="http://openwrite-whaleops.oss-cn-zhangjiakou.aliyuncs.com/31504_D0E7B06558034C7AA0AE1E27C0E1211C" alt="file" data-sourcepos="85:1-85:105"></p>
<p data-sourcepos="87:1-87:49">HTTP提交任务的方式更加自然和通用。</p>
<h3 data-sourcepos="89:1-89:28"><a id="seatunnel-client%E6%A8%A1%E5%BC%8F" class="anchor"></a>SeaTunnel Client 模式</h3>
<p data-sourcepos="91:1-91:100">对于更深度、精细化和功能更强大的任务提交方式，推荐使用SeaTunnel Client。</p>
<p data-sourcepos="94:1-94:105"><img src="http://openwrite-whaleops.oss-cn-zhangjiakou.aliyuncs.com/31504_B7C8DCD2FE234839BC2AED7B1523A7EA" alt="file" data-sourcepos="94:1-94:105"></p>
<p data-sourcepos="97:1-97:178">SeaTunnel Client是一个核心类，通过它可以提交所有任务。无论是引擎内部代码还是外部集成代码，都可以使用这个Client提交任务到集群。</p>
<p data-sourcepos="99:1-99:247">通过SeaTunnel Client，我们可以在JVM进程中直接提交任务。例如，在一个Spring服务中，用户点击启动按钮后，后端可以直接使用SeaTunnel Client提交任务，而不需要启动一个额外的HTTP或Java进程。</p>
<p data-sourcepos="101:1-101:30">这种方式的好处包括：</p>
<ul data-sourcepos="103:1-107:0">
<li data-sourcepos="103:1-103:96">及时响应任务状态：任务的状态可以通过回调机制及时返回客户端。</li>
<li data-sourcepos="104:1-104:177">异步操作：任务执行时，客户端会返回一个Future，可以通过Future进行异步操作。例如，任务结束时注册回调函数来处理业务逻辑。</li>
<li data-sourcepos="105:1-107:0">深度集成：这种方式使SeaTunnel与二次开发的平台集成更加深度和紧密。</li>
</ul>
<h2 data-sourcepos="108:1-108:16"><a id="%E4%BB%BB%E5%8A%A1%E7%9B%91%E6%8E%A7" class="anchor"></a>任务监控</h2>
<p data-sourcepos="109:1-109:84">启动任务后，我们需要对SeaTunnel进行监控，以了解任务的状态。</p>
<p data-sourcepos="111:1-111:237">例如，任务是否启动成功？运行了多久？数据是否成功读取？任务是否失败？失败的原因是什么？这些都是二次开发时需要关注的内容，因为我们不能保证所有任务都能正常运行。</p>
<h3 data-sourcepos="113:1-113:22"><a id="%E7%9B%91%E6%8E%A7%E4%BB%BB%E5%8A%A1%E7%8A%B6%E6%80%81" class="anchor"></a>监控任务状态</h3>
<p data-sourcepos="114:1-114:57">我们可以通过以下三种方式监控任务状态：</p>
<ol data-sourcepos="115:1-118:0">
<li data-sourcepos="115:1-115:119">Shell脚本：通过Shell脚本查看所有任务的状态，例如任务是正在运行、失败还是完成。</li>
<li data-sourcepos="116:1-116:96">HTTP：通过HTTP接口获取任务状态，例如任务是否失败以及失败原因。</li>
<li data-sourcepos="117:1-118:0">SeaTunnel Client：SeaTunnel Client不仅可以提交和取消任务，还可以查询任务状态。</li>
</ol>
<p data-sourcepos="119:1-119:58">比如说下面的截图，这个就是一个<code><span class="Apple-converted-space">&nbsp;job result</span></code></p>
<p data-sourcepos="122:1-123:118"><img src="http://openwrite-whaleops.oss-cn-zhangjiakou.aliyuncs.com/31504_F3D0EBF4F4E642F98A51201096220874" alt="file" data-sourcepos="122:1-122:105"><br>然后这个<span class="Apple-converted-space">&nbsp;<code>job result</code><span class="Apple-converted-space">&nbsp;也是我们SeaTunnel client 返给我们的，然后我们就可以看到里面的状态。</span></span></p>
<p data-sourcepos="125:1-126:35"><img src="http://openwrite-whaleops.oss-cn-zhangjiakou.aliyuncs.com/31504_C539BFCB3A144BA598F3139D7ECB393D" alt="file" data-sourcepos="125:1-125:105"><br>如何调用SeaTunnel Client？</p>
<p data-sourcepos="128:1-128:220">传入任务ID即可获取任务状态，任务是正在运行还是失败。对于集成开发来说，获取任务异常信息非常重要。如果通过Shell脚本查看日志，用户需要手动解析日志文件。</p>
<p data-sourcepos="130:1-130:113">这在集成的Web页面中并不方便。因此，我们推荐通过HTTP或SeaTunnel Client获取异常信息。</p>
<h2 data-sourcepos="133:1-133:28"><a id="%E6%8C%87%E6%A0%87%E7%9B%91%E6%8E%A7%EF%BC%88metrics%EF%BC%89" class="anchor"></a>指标监控（Metrics）</h2>
<p data-sourcepos="134:1-134:60">除了监控任务状态之外，我们还需要有指标。</p>
<p data-sourcepos="136:1-136:177">例如，任务虽然在运行，但它是否真正读取到了数据？读取了多少数据？写入了多少数据？吞吐量是多少？这些都是需要关注的指标。</p>
<p data-sourcepos="138:1-141:79">SeaTunnel引擎内部提供了对应的指标获取方式，有以下三种方式：<br>1.Shell脚本：通过Shell脚本可以查询任务的各项指标。<br>2.HTTP：通过HTTP接口可以获取任务的各项指标。<br>3.SeaTunnel Client：通过SeaTunnel Client可以查询任务的各项指标。</p>
<h3 data-sourcepos="143:1-143:22"><a id="%E6%A0%B8%E5%BF%83%E7%9B%91%E6%8E%A7%E6%8C%87%E6%A0%87" class="anchor"></a>核心监控指标</h3>
<p data-sourcepos="144:1-144:42">我们可以监控的核心指标包括：</p>
<ul data-sourcepos="146:1-152:0">
<li data-sourcepos="146:1-146:14">读取数量</li>
<li data-sourcepos="147:1-147:20">读取的字节数</li>
<li data-sourcepos="148:1-148:26">QPS（每秒查询率）</li>
<li data-sourcepos="149:1-149:17">每秒字节数</li>
<li data-sourcepos="150:1-150:14">写入数量</li>
<li data-sourcepos="151:1-152:0">写入的字节数</li>

</ul>
<p data-sourcepos="153:1-153:151">对于CDC（Change Data Capture），我们比较关心的是CDC的延迟，即从CDC源端的数据产生到SeaTunnel读取到它的延迟是多少。</p>
<p data-sourcepos="155:1-155:234">目前，我们的支持是每个任务级别的，但对于每个任务中的每张表的支持还比较弱，因为SeaTunnel支持多表任务，即一个任务可以读取和写入多张表。我们正在改进这方面的支持。</p>
<h3 data-sourcepos="157:1-157:16"><a id="%E6%8C%87%E6%A0%87%E6%9A%B4%E9%9C%B2" class="anchor"></a>指标暴露</h3>
<p data-sourcepos="158:1-158:127">除了查询指标外，我们还可以将指标定时对外暴露，例如暴露到Prometheus或SeaTunnel的指标体系中。</p>
<p data-sourcepos="160:1-160:184">目前，SeaTunnel对这方面的支持还比较弱，但我们希望在未来能更好地支持将指标对外抛出到第三方组件，如Prometheus，这样对用户会更友好。</p>
<h3 data-sourcepos="163:1-163:19"><a id="%E5%AE%9A%E5%88%B6%E5%8C%96%E6%8C%87%E6%A0%87" class="anchor"></a>定制化指标</h3>
<p data-sourcepos="165:1-165:156">我们提供的默认指标可能不能满足所有用户或开发者的需求。那么，如何定制属于内部系统或二次开发系统的指标呢？</p>
<p data-sourcepos="168:1-168:105"><img src="http://openwrite-whaleops.oss-cn-zhangjiakou.aliyuncs.com/31504_FC76182DB1E446D5B575ADA4C147B5AD" alt="file" data-sourcepos="168:1-168:105"></p>
<p data-sourcepos="170:1-170:187">定制化指标集成实际上很简单。可以通过我们的context对象来实现。这个context对象包含一个MetricsContext对象，我们可以向其中注册自定义指标。</p>
<p data-sourcepos="173:1-173:105"><img src="http://openwrite-whaleops.oss-cn-zhangjiakou.aliyuncs.com/31504_A66ED5EC938C4C988D46FA4F69A507D0" alt="file" data-sourcepos="173:1-173:105"></p>
<ol data-sourcepos="176:1-179:0">
<li data-sourcepos="176:1-176:76">定义指标名称：这是一个字符串，代表指标的名称。</li>
<li data-sourcepos="177:1-177:72">注册指标：通过MetricsContext对象注册自定义指标。</li>
<li data-sourcepos="178:1-179:0">更新指标值：当需要更新指标值时，通过调用提供的方法将值更新到对象中。</li>

</ol>
<p data-sourcepos="180:1-180:157">这样就完成了定制化指标的集成，通过这种方式注册的自定义指标，可以通过HTTP、Shell脚本或SeaTunnel Client查询和展示。</p>
<h3 data-sourcepos="182:1-182:16"><a id="%E4%BA%8B%E4%BB%B6%E7%B3%BB%E7%BB%9F" class="anchor"></a>事件系统</h3>
<p data-sourcepos="183:1-183:159">除了指标外，如果需要一些瞬发性的事件处理，例如在某些事件发生时收到通知，可以使用SeaTunnel内部设计的事件系统。</p>
<p data-sourcepos="185:1-185:105"><img src="http://openwrite-whaleops.oss-cn-zhangjiakou.aliyuncs.com/31504_685796C6A12642E08F63EBC079F6D3D7" alt="file" data-sourcepos="185:1-185:105"></p>
<p data-sourcepos="188:1-188:16">事件示例</p>
<p data-sourcepos="190:1-190:51">SeaTunnel的事件系统可以处理以下事件：</p>
<ul data-sourcepos="191:1-195:0">
<li data-sourcepos="191:1-191:29">Reader打开和关闭事件</li>
<li data-sourcepos="192:1-192:27">Task打开和关闭事件</li>
<li data-sourcepos="193:1-195:0">自定义事件<br>当这些事件发生时，SeaTunnel会将事件汇总，并发送到Master节点进行处理。</li>

</ul>
<p data-sourcepos="196:1-196:105"><img src="http://openwrite-whaleops.oss-cn-zhangjiakou.aliyuncs.com/31504_1A2D20A2590043F38308D33A4C77FA56" alt="file" data-sourcepos="196:1-196:105"></p>
<h2 data-sourcepos="201:1-201:13"><a id="ddl%E4%BA%8B%E4%BB%B6" class="anchor"></a>DDL 事件</h2>
<p data-sourcepos="203:1-203:189">后续我们会实现DDL事件的发送功能。社区正在开发的DDL功能主要是为了应对schema变化，例如在MySQL CDC运行过程中，schema发生变化会产生DDL事件。</p>
<p data-sourcepos="205:1-205:231">我们可以将这些DDL事件包装成对应的事件发送出去。外部系统可以接收到这些事件，比如某个表增加了一列或删除了一列，然后进行相应的展示或处理。这是事件系统的作用。</p>
<p data-sourcepos="207:1-207:19">自定义事件</p>
<p data-sourcepos="209:1-209:182">就像我们可以自定义metrics一样，事件也可以自定义。自定义事件的方式与metrics非常相似。用户可以实现自己的事件来处理特定业务需求。</p>
<p data-sourcepos="212:1-212:105"><img src="http://openwrite-whaleops.oss-cn-zhangjiakou.aliyuncs.com/31504_E80BD6B9F9BB49539595E5754C6F3A93" alt="file" data-sourcepos="212:1-212:105"></p>
<h3 data-sourcepos="216:1-216:28"><a id="%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6%E7%9A%84%E5%AE%9E%E7%8E%B0" class="anchor"></a>自定义事件的实现</h3>
<p data-sourcepos="218:1-218:179">在metrics中，可以通过context对象获取MetricsContext。同样地，在事件系统中，我们可以获取EventListener，然后通过它注册和处理自定义事件。</p>
<p data-sourcepos="222:1-222:166">我们提供了对应的接口EventHandler，它是一个SPI实现。用户可以实现自己的handler，然后将其放到lib目录下，或者打包到应用中。</p>
<p data-sourcepos="225:1-225:105"><img src="http://openwrite-whaleops.oss-cn-zhangjiakou.aliyuncs.com/31504_18D63786DC094C02888465C356DD81C9" alt="file" data-sourcepos="225:1-225:105"></p>
<p data-sourcepos="228:1-228:161">有了这个handler之后，Master节点会发现所有的EventHandler，并调用它们的handle方法。具体的事件处理逻辑由实现的handler决定。</p>
<h3 data-sourcepos="230:1-230:28"><a id="%E9%BB%98%E8%AE%A4%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E5%AE%9E%E7%8E%B0" class="anchor"></a>默认事件处理实现</h3>
<p data-sourcepos="231:1-231:149">我们内部提供了一个默认的实现：JobEventHttpReporterHandler。这个handler会将事件通过HTTP接口发送到用户配置的地址。</p>
<p data-sourcepos="234:1-234:105"><img src="http://openwrite-whaleops.oss-cn-zhangjiakou.aliyuncs.com/31504_7E66D9AFDDB040C88207FFF60DCA4361" alt="file" data-sourcepos="234:1-234:105"></p>
<p data-sourcepos="237:1-237:111">用户可以通过这个接口接收引擎中的事件，例如任务开始、任务结束、数据到达等。</p>
<p data-sourcepos="240:1-240:315">事件系统不仅用于捕获运行时的事件，还可以用于DDL事件。例如，MySQL CDC运行过程中，schema变化会产生DDL事件。我们可以将这些DDL事件包装并发送出去，外部系统可以接收到这些事件并进行相应处理，例如展示schema变化、执行后续操作等。</p>
<h2 data-sourcepos="242:1-242:33"><a id="%E9%9B%86%E7%BE%A4%E8%8A%82%E7%82%B9%E5%81%A5%E5%BA%B7%E7%8A%B6%E5%86%B5%E7%9B%91%E6%8E%A7" class="anchor"></a>集群节点健康状况监控</h2>
<p data-sourcepos="244:1-244:208">除了任务级别的监控，我们还需要关注集群节点的健康状况。作为一个集群系统，了解整个集群是否正常运作非常重要。这些信息可以通过SeaTunnel Client获取。</p>
<p data-sourcepos="247:1-247:105"><img src="http://openwrite-whaleops.oss-cn-zhangjiakou.aliyuncs.com/31504_505399447C6C427F86A5A7A1249BAEEE" alt="file" data-sourcepos="247:1-247:105"></p>
<h3 data-sourcepos="250:1-250:28"><a id="%E8%8E%B7%E5%8F%96%E9%9B%86%E7%BE%A4%E5%81%A5%E5%BA%B7%E4%BF%A1%E6%81%AF" class="anchor"></a>获取集群健康信息</h3>
<p data-sourcepos="252:1-252:109">通过SeaTunnel Client，我们可以获取到集群的一些健康信息。这些信息包括但不限于：</p>
<ul data-sourcepos="254:1-258:0">
<li data-sourcepos="254:1-254:20">内存使用情况</li>
<li data-sourcepos="255:1-255:10">GC次数</li>
<li data-sourcepos="256:1-256:17">RPC操作延迟</li>
<li data-sourcepos="257:1-258:0">RPC请求次数</li>

</ul>
<p data-sourcepos="259:1-259:99">这些与性能和集群稳定性相关的信息能够帮助我们更好地监控和维护系统。</p>
<p data-sourcepos="261:1-261:222">例如，我们可以通过SeaTunnel Client获取集群节点的健康状况，并在页面上展示出来。如果在3个节点的集群中，只有2个节点正常，我们可以通过接口判断并处理异常节点。</p>
<h3 data-sourcepos="263:1-263:12"><a id="savemode" class="anchor"></a>SaveMode</h3>
<p data-sourcepos="265:1-265:162">SaveMode与Sink密切相关，决定了在写入数据之前执行的一系列操作。这些操作包括自动建表、表重建、数据清空或数据追加。</p>
<p data-sourcepos="267:1-267:75">通过配置schema_save_mode和data_save_mode，可以定义这些行为。</p>
<h4 data-sourcepos="269:1-269:25"><a id="savemode%E9%85%8D%E7%BD%AE%E7%A4%BA%E4%BE%8B" class="anchor"></a>SaveMode配置示例</h4>
<ul data-sourcepos="271:1-273:0">
<li data-sourcepos="271:1-271:118">schema_save_mode：定义如何处理schema。例如，是否重新创建schema，或者在不存在时创建。</li>
<li data-sourcepos="272:1-273:0">data_save_mode：定义如何处理数据。例如，是否清空数据，或者追加数据。</li>

</ul>
<h3 data-sourcepos="274:1-274:16"><a id="%E8%A1%8C%E4%B8%BA%E9%A2%84%E8%A7%88" class="anchor"></a>行为预览</h3>
<p data-sourcepos="276:1-276:190">我们预览的核心是 SaveMode 到底会怎么操作。这一块是纯代码层面，如果要集成的话，肯定需要写代码。虽然不像 HTTP 那么简单，但它非常有用。</p>
<p data-sourcepos="278:1-278:346">例如，我现在任务还没开始跑，或者即将定时运行。我想知道在配置了表重建的情况下，任务到底会创建表还是不会创建表。在任务运行前，我们可以通过行为预览确定 SaveMode 和 data SaveMode 的行为。这对于涉及表操作的情况尤其重要，因为表操作可能比较敏感。</p>
<h3 data-sourcepos="280:1-280:25"><a id="%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E5%8F%98%E5%8C%96" class="anchor"></a>数据结构的变化</h3>
<p data-sourcepos="282:1-282:124">比如说我们从 source 端读取的是 MySQL 的表，MySQL 表在二次开发中可能会涉及到一个 CatalogTable。</p>
<p data-sourcepos="285:1-285:105"><img src="http://openwrite-whaleops.oss-cn-zhangjiakou.aliyuncs.com/31504_AF758E52428C496D8AF3309F402FF83A" alt="file" data-sourcepos="285:1-285:105"></p>
<p data-sourcepos="288:1-288:153">我们会将外部系统的表抽象成内部统一的 CatalogTable。例如，从 MySQL 读取一张表，然后转换成系统内部的 CatalogTable。</p>
<p data-sourcepos="290:1-290:105"><img src="http://openwrite-whaleops.oss-cn-zhangjiakou.aliyuncs.com/31504_26F6A8FE5C0E48338851AC9FD51A87D4" alt="file" data-sourcepos="290:1-290:105"></p>
<h3 data-sourcepos="293:1-293:19"><a id="%E8%A1%A8%E7%BB%93%E6%9E%84%E9%A2%84%E8%A7%88" class="anchor"></a>表结构预览</h3>
<p data-sourcepos="295:1-295:107">如果任务配置读取表 a，我们可以通过页面上的一些操作，预览表 a 的输出结构。</p>
<p data-sourcepos="298:1-298:105"><img src="http://openwrite-whaleops.oss-cn-zhangjiakou.aliyuncs.com/31504_A4130357F3D245FAAEC4931495B56317" alt="file" data-sourcepos="298:1-298:105"></p>
<p data-sourcepos="300:1-300:21">具体步骤如下：</p>
<ol data-sourcepos="302:1-306:0">
<li data-sourcepos="302:1-302:31">获取 TableSourceFactory。</li>
<li data-sourcepos="303:1-303:42">将配置传入，构建 TableSource。</li>
<li data-sourcepos="304:1-306:0">通过 source 提供的方法获取 productCatalogTable。</li>

</ol>
<p data-sourcepos="307:1-307:105"><img src="http://openwrite-whaleops.oss-cn-zhangjiakou.aliyuncs.com/31504_D03AE3610D4E422CB852CC203A83778E" alt="file" data-sourcepos="307:1-307:105"></p>
<p data-sourcepos="310:1-310:111">这种预览在任务还没有真正跑起来时就可以执行，确保任务读取的表结构是正确的。</p>
<h4 data-sourcepos="312:1-312:21"><a id="transform%E9%A2%84%E8%A7%88" class="anchor"></a>Transform 预览</h4>
<p data-sourcepos="314:1-314:129">例如，我们有 SQL 作为 transform 操作，希望在 SQL 中改一个字段的类型，同时增加和删除一些字段。</p>
<p data-sourcepos="317:1-317:105"><img src="http://openwrite-whaleops.oss-cn-zhangjiakou.aliyuncs.com/31504_5B3AD14701D24866B8BFDFF45A2EEFAC" alt="file" data-sourcepos="317:1-317:105"></p>
<p data-sourcepos="320:1-320:78">预览功能可以在任务运行前确认这些操作是否会如期执行。</p>
<p data-sourcepos="322:1-322:21">具体步骤如下：</p>
<ol data-sourcepos="324:1-327:0">
<li data-sourcepos="324:1-324:48">获取 TransformFactory，构建 transform。</li>
<li data-sourcepos="325:1-325:66">将配置传入，并传入 source 端生成的 CatalogTable。</li>
<li data-sourcepos="326:1-327:0">获取 transform 输出的表结构，确认 transform 操作是否正确。</li>

</ol>
<h3 data-sourcepos="328:1-328:24"><a id="sink%E7%AB%AF%E6%93%8D%E4%BD%9C%E9%A2%84%E8%A7%88" class="anchor"></a>Sink 端操作预览</h3>
<p data-sourcepos="330:1-330:157">从 transform 输出的表结构，需要传入 Sink 进行写入操作。涉及到自动建表时，我们可以通过 SaveModeHandler 确认以下内容：</p>
<ol data-sourcepos="332:1-335:0">
<li data-sourcepos="332:1-332:29">Sink 是否需要建表？</li>
<li data-sourcepos="333:1-333:21">表名是什么？</li>
<li data-sourcepos="334:1-335:0">字段有哪些？</li>

</ol>
<p data-sourcepos="336:1-336:123">SaveMode handler 会根据 schema_save_mode 和 data_save_mode 配置，以及 catalog 中的表判断是否需要建表。</p>
<h4 data-sourcepos="338:1-338:31"><a id="savemode-handler%E7%9A%84%E4%BD%9C%E7%94%A8" class="anchor"></a>SaveMode Handler 的作用</h4>
<p data-sourcepos="339:1-339:223">当我们具体操作Catalog，比如说Catalog 有一个 exist 的方法去判断我们的 table pass ，根据我们的 schema_save_mode， data_save_mode 去判断我们的接下来的这一块的行为到底是什么？</p>
<p data-sourcepos="341:1-341:44">SaveMode Handler 提供了能力，例如：</p>
<ul data-sourcepos="343:1-346:0">
<li data-sourcepos="343:1-343:63">判断当前的 schema_save_mode 和 data_save_mode 配置。</li>
<li data-sourcepos="344:1-344:38">处理表的路径（TablePath）。</li>
<li data-sourcepos="345:1-346:0">调用 catalog 提供的方法判断表是否存在。</li>

</ul>
<p data-sourcepos="347:1-347:122">通过 SaveModeHandler 提供的能力，可以预览和确认任务在运行时是否会创建表或进行其他操作。</p>
<h4 data-sourcepos="349:1-349:22"><a id="%E6%89%A7%E8%A1%8Csql%E9%A2%84%E8%A7%88" class="anchor"></a>执行 SQL 预览</h4>
<p data-sourcepos="351:1-351:72">我们执行 SQL 时，可以提前看到将要建表的 SQL。例如：</p>
<ul data-sourcepos="353:1-355:0">
<li data-sourcepos="353:1-353:54">对于某些用户来说，SQL 可能比较敏感。</li>
<li data-sourcepos="354:1-355:0">预先知道 SQL 是否合理，如果不合理，可以在基础上修改后手动创建。</li>

</ul>
<p data-sourcepos="356:1-356:102">我们提供了 Catalog 预览功能，调用 preAction 方法可以预览建表或删除表的 SQL。</p>
<p data-sourcepos="360:1-360:141">在建表时，输出表结构的类型非常重要。我们需要知道内存中看到的类型在自动建表时会被建成什么类型。</p>
<p data-sourcepos="362:1-362:70">为此，SeaTunnel 内部有一套叫 TypeConverter 的接口体系。</p>
<h4 data-sourcepos="364:1-364:28"><a id="typeconverter%E7%9A%84%E4%BD%9C%E7%94%A8" class="anchor"></a>TypeConverter 的作用</h4>
<ol data-sourcepos="366:1-368:0">
<li data-sourcepos="366:1-366:75">类型转换：将 SeaTunnel 的类型转换成数据库的类型。</li>
<li data-sourcepos="367:1-368:0">反向转换：读取表时，将数据库的类型转换成 SeaTunnel 的类型。</li>

</ol>
<p data-sourcepos="369:1-369:225">通过 TypeConverter，我们可以预览并确认 SeaTunnel 和数据库之间的字段类型交互。例如，通过转换和反向转换，我们可以知道表字段类型在 SeaTunnel 和数据库之间的具体表现。</p>
<h3 data-sourcepos="372:1-372:35"><a id="%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%EF%BC%88typeconverter%EF%BC%89" class="anchor"></a>类型转换（TypeConverter）</h3>
<p data-sourcepos="374:1-374:210">在行为预览中，我们可以通过 TypeConverter 接口体系实现类型转换的预览。预览与实际运行时的转换结果一致，因为实际运行中也是通过这套代码进行类型转换。</p>
<h4 data-sourcepos="376:1-376:11"><a id="%E7%A4%BA%E4%BE%8B" class="anchor"></a>示例</h4>
<p data-sourcepos="378:1-378:91">通过集成 Type Converter 接口，我们可以在预览时确认建表的具体类型。</p>
<p data-sourcepos="380:1-380:105"><img src="http://openwrite-whaleops.oss-cn-zhangjiakou.aliyuncs.com/31504_8269C9C5D3E04299981E847DC669A38C" alt="file" data-sourcepos="380:1-380:105"></p>
<p data-sourcepos="383:1-383:9">例如：</p>
<ul data-sourcepos="385:1-387:0">
<li data-sourcepos="385:1-385:49">将 SeaTunnel 类型转换为数据库类型。</li>
<li data-sourcepos="386:1-387:0">读取表字段时，确认数据库字段类型在 SeaTunnel 中的表现。</li>

</ul>
<h2 data-sourcepos="388:1-388:9"><a id="%E6%80%BB%E7%BB%93" class="anchor"></a>总结</h2>
<p data-sourcepos="390:1-390:45">今天给大家主要分享了以下内容：</p>
<ol data-sourcepos="392:1-399:0">
<li data-sourcepos="392:1-392:64">多种启动方式：包括三种主要的启动方式。</li>
<li data-sourcepos="393:1-393:49">指标获取：如何获取指标信息。</li>
<li data-sourcepos="394:1-394:64">错误信息获取：如何获取并处理错误信息。</li>
<li data-sourcepos="395:1-395:64">自定义指标：如何创建和获取自定义指标。</li>
<li data-sourcepos="396:1-396:109">事件系统：如何创建、读取和处理事件，包括自定义事件和现有事件的读取。</li>
<li data-sourcepos="397:1-397:88">系统相关信息获取：如何获取集群和节点的健康状况等信息。</li>
<li data-sourcepos="398:1-399:0">数据结构预览：如何预览数据结构、建表 SQL 和外部系统的交互类型。</li>

</ol>
<p data-sourcepos="400:1-400:124">SeaTunnel 内部已经实现了许多功能，通过集成这些功能，可以实现更高效、更兼容的二次开发。</p>
<p data-sourcepos="402:1-402:221">希望这些接口和设计能让大家在集成和二次开发时更加简单和高效，欢迎大家基于这些标准化体系进行扩展，并将实现的功能回馈给社区，使 SeaTunnel 更加丰富和强大。</p>
<p data-sourcepos="404:1-404:167">通过本文的分享，能够帮助大家对 SeaTunnel 的二次开发有更深入的了解。如果大家有任何问题，欢迎随时与我交流。谢谢大家！</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.16815529638078705" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-19 18:14">2025-05-19 18:13</span>&nbsp;
<a href="https://www.cnblogs.com/seatunnel">ApacheSeaTunnel</a>&nbsp;
阅读(<span id="post_view_count">13</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18884674);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18884674', targetLink: 'https://www.cnblogs.com/seatunnel/p/18884674', title: '实战案例分享：如何基于Apache SeaTunnel全方位进行高效二次开发' })">举报</a>
</div>
        