
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/IwishIcould/p/19023809" title="发布于 2025-08-07 08:53">
    <span role="heading" aria-level="2">js实现根据汉字的拼音按照a-z的方式进行排序</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h4 id="需求的产生">需求的产生</h4>
<p>今天在需求评审的过程中，遇见一个排序问题<br>
地区的拼音按照a-z的顺序进行排序。<br>
研究了一下，主要有下面三种做法。<br>
1,使用 String.prototype.localeCompare()<br>
2,new Intl.Collator()<br>
3,使用第3方库 pinyin<br>
下面我们来详细的介绍一下3种实现方法。</p>
<h4 id="localecompare-的介绍">localeCompare 的介绍</h4>
<p>localeCompare：用于比较两个字符串，并返回一个数字，表示哪个字符串应该排在前面。<br>
语法：string.localeCompare(compareString, locales, options)</p>
<p>localeCompare 的第2个参数说明：<br>
默认情况下，中文会按 Unicode 编码排序。<br>
添加 'zh-Hans-CN' 后自动启用拼音顺序。<br>
'zh-CN'：zh-CN 是地区导向的标签（中国大陆中文）<br>
'zh-Hans-CN': zh-Hans-CN 是脚本+地区导向的标签（中国大陆简体中文）<br>
需要精确控制时选zh-Hans-CN，追求通用兼容时选zh-CN</p>
<p>localeCompare 的第3个参数options说明：（可选）：一个对象，指定比较的行为。<br>
ignorePunctuation：true, 忽略标点符号。<br>
caseFirst：控制大小写排序顺序。'upper'：大写字母优先, 'lower'：小写字母优先。<br>
numeric：设为true时,按数字顺序比较字符串。如“苹果10”排在“苹果2”之后。<br>
sensitivity ：控制比较敏感度。有下面这些值<br>
'base'：仅比较基础字符（忽略重音和大小写）。<br>
'case'：考虑大小写差异。</p>
<h4 id="localecompare的排序原理">localeCompare的排序原理：</h4>
<p>string.localeCompare(compareString, 'zh-CN')<br>
在中文环境下会使用拼音（声母→韵母→声调）的字典顺序进行排序。<br>
示例：'北方', 会排在 '北京' 的前面。</p>
<h4 id="localecompare实现排序">localeCompare实现排序</h4>
<pre><code>const arr = [
  '南宁','阿坝州', '河池', '柳州', 
  '桂林','北安州', '贺州', '梧州','北院', '北京'
 ];
const newArr = arr.sort((a, b) =&gt; a.localeCompare(b, 'zh-Hans-CN'));
console.log(newArr, arr);
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1425695/202508/1425695-20250804190959735-2027596719.png" alt="image" loading="lazy"></p>
<pre><code>const nameArr = [
  {"text": "北京", "value": "北京"},
  {"text": "阿坝州", "value": "阿坝州"},
  {"text": "桂林", "value": "桂林"},
  {"text": "南宁", "value": "南宁"},
];

const newArr = nameArr.sort((a, b) =&gt; a.text.localeCompare(b.text, 'zh-Hans-CN'));
console.log(newArr, nameArr);
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1425695/202508/1425695-20250804191258917-1771062948.png" alt="image" loading="lazy"></p>
<p>我们发现使用localeCompare确实可以按照拼音进行排序啦。<br>
有机智的小伙伴会说：如果浏览器不支持呢？<br>
我查询过资料，确实会有这样的情况、<br>
如:localeCompare函数在X5内核(android版的微信浏览器)的浏览器不兼容该函数，请注意使用。<br>
我们可以先去检查一下，是否支持排序，如果不支持就不进行排序。<br>
因为：不排序总比报错要强上不少。<br>
<img src="https://img2024.cnblogs.com/blog/1425695/202508/1425695-20250805185705441-688994051.png" alt="image" loading="lazy"></p>
<h4 id="避免依赖localecompare的返回值">避免依赖localeCompare的返回值</h4>
<p>ECMAScript 规范仅要求localeCompare返回正/负/零。<br>
但是不同浏览器可能返回 -1、-2、1、2 等</p>
<h4 id="检查浏览器是否支持localecompare排序">检查浏览器是否支持localeCompare排序</h4>
<p>在使用 localeCompare 方法之前，先检测浏览器是否支持 localeCompare 方法。<br>
如果支持，则返回 true，否则返回 false。</p>
<pre><code>function isPinYinSupported() {
  try {
    // 创建测试字符串
    const testArr = ['北京', '上海','成都']
    testArr.sort((a, b) =&gt; a.localeCompare(b, 'zh-Hans-CN'))
    // 如果未抛出错误，表示支持排序
    return true
  } catch (e) {
    // 如果抛出错误，表示不支持
    return false
  }
}
</code></pre>
<h4 id="intlcollator-的介绍">Intl.Collator 的介绍</h4>
<p>Intl.Collator 用于根据语言环境对字符串进行比较和排序。<br>
是国际化（i18n）API 的核心组件。<br>
语法：new Intl.Collator(locales, options)<br>
locales: 指定区域设置，如'zh-CN'表示简体中文<br>
options是一个对象，有下面这些值<br>
-caseFirst：控制大小写排序顺序，可选upper（大写优先）, lower（小写优先）<br>
-numeric：设为true时,按数字顺序比较字符串。如“苹果10”排在“苹果2”之后。<br>
-ignorePunctuation：设为true时忽略标点符号，例 “你好,世界” 和 “你好世界” 会被视为相同<br>
-sensitivity:控制比较的敏感度。<br>
--它的值有:case（考虑大小写）,base（仅比较基础字符,忽略重音和大小写）</p>
<h4 id="排序时忽略标点符号">排序时，忽略标点符号</h4>
<pre><code>// gnorePunctuation：设为true时忽略标点符号
const collatorIgnorePunct = new Intl.Collator('zh-CN', { ignorePunctuation: true });  
console.log(collatorIgnorePunct.compare('你好,世界', '你好世界')); // 输出0，表示相等  
</code></pre>
<h4 id="排序时照数字排序">排序时，照数字排序</h4>
<pre><code>// 按照数字排序  
const arr = ['苹果10', '苹果14','苹果2']
// 缓存collator实例
const collator = new Intl.Collator('zh-CN', { numeric: true });
const sortedArr = arr.sort((a,b)=&gt; collator.compare(a,b));
console.log(sortedArr); // ['苹果2', '苹果10', '苹果14']
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1425695/202508/1425695-20250805185924197-1478305149.png" alt="image" loading="lazy"></p>
<h4 id="intlcollator-的排序-a-z进行排序">Intl.Collator 的排序 a-z进行排序</h4>
<pre><code>const arr = [
  '南宁','阿坝州', '河池', '柳州', '北方', '大连',
  '桂林','北安州', '贺州', '梧州','北院', '北京'
];
// 缓存collator实例，使用Intl.Collator进行拼音排序，
const collator = new Intl.Collator('zh-CN');
const sortedArr = arr.sort((a,b)=&gt; collator.compare(a,b));
console.log(sortedArr);
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1425695/202508/1425695-20250805185938595-552907252.png" alt="image" loading="lazy"></p>
<pre><code>const arr = [
  '南宁','阿坝州', '河池', '柳州', '北方', '大连',
  '桂林','北安州', '贺州', '梧州','北院', '北京'
];
// 缓存collator实例，使用Intl.Collator进行拼音排序
const collator = new Intl.Collator('zh-CN');
const sortedArr = arr.sort(collator.compare);
console.log(sortedArr);
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1425695/202508/1425695-20250805185956854-268756682.png" alt="image" loading="lazy"></p>
<h4 id="intlcollator-的排序-z-a进行排序">Intl.Collator 的排序 z-a进行排序</h4>
<pre><code>const arr = [
  '南宁','阿坝州', '河池', '柳州', '北方', '大连',
  '桂林','北安州', '贺州', '梧州','北院', '北京'
];
// 缓存collator实例
const collator = new Intl.Collator('zh-CN');
// 在compare的时候使用compare(b, a)就是z-a进行排序了
const sortedArr = arr.sort((a, b) =&gt; collator.compare(b, a));
console.log(sortedArr);
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1425695/202508/1425695-20250805190010088-1993785040.png" alt="image" loading="lazy"></p>
<h4 id="检查浏览器是否支持-intlcollator">检查浏览器是否支持 Intl.Collator</h4>
<pre><code>function supportIntlCollator(){
  // 基础兼容性检查
  if (typeof Intl === 'undefined' || typeof Intl.Collator !== 'function') {
    return false;
  }
  // 区域支持检测
  try {
    new Intl.Collator('zh-CN');
    return true;
  } catch (e) {
    // 捕获两种错误类，说明不支持：
    return false;
  }
}
console.log(supportIntlCollator())
</code></pre>
<h4 id="intlcollator-和-localecompare-的区别">Intl.Collator 和 localeCompare 的区别</h4>
<p>当需重复比较大量字符串（如万级数组排序）时，Intl.Collator 相比localeCompare更高效。<br>
Intl.Collator适合多次重复比较，localeCompare 适合单次比较。<br>
因为 Intl.Collator 预先缓存语言规则。<br>
[重要]频繁排序时，建议缓存collator实例以提高性能</p>
<h4 id="sort排序会改变原数组">sort排序会改变原数组</h4>
<pre><code>const nameArr = [
  {"text": "北京", "value": "北京"},
  {"text": "阿坝州", "value": "阿坝州"},
  {"text": "桂林", "value": "桂林"},
  {"text": "南宁", "value": "南宁"},
];

const newArr = nameArr.sort((a, b) =&gt; a.text.localeCompare(b.text, 'zh-Hans-CN'));
console.log('新数组', newArr);
console.log('原数组', nameArr);
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1425695/202508/1425695-20250805190132399-1931523605.png" alt="image" loading="lazy"></p>

</div>
<div id="MySignature" role="contentinfo">
    <div style="width:818px;background:#f5f5f5; padding: 10px 10px 10px 10px; border: 1px dashed rgb(224, 224, 224); font-family: 微软雅黑; font-size: 13px;">
            <h1 style="font-size: 24px;"> 遇见问题，这是你成长的机会，如果你能够解决，这就是收获。 </h1>
		    <div style="padding:10px">
		        作者：<a href="https://www.cnblogs.com/IwishIcould/" target="_blank">晚来南风晚相识</a> <br>
		        出处：<a href="https://www.cnblogs.com/IwishIcould/">https://www.cnblogs.com/IwishIcould/</a> <br>
                        <p> 想问问题，打赏了卑微的博主，求求你备注一下的扣扣或者微信；这样我好联系你；(っ•̀ω•́)っ✎⁾⁾！</p>
		        <p>如果觉得这篇文章对你有小小的帮助的话，记得在右下角点个“推荐”哦，或者关注博主，在此感谢！</p>
		        <p> 万水千山总是情，打赏5毛买辣条行不行，所以如果你心情还比较高兴，也是可以扫码打赏博主(っ•̀ω•́)っ✎⁾⁾！</p>
                        <p> 想问问题，打赏了卑微的博主，求求你备注一下的扣扣或者微信；这样我好联系你；(っ•̀ω•́)っ✎⁾⁾！</p>
				<div style="display: flex;">
					<div style="margin-right: 100px;text-align: center;">
						<img src="//images.cnblogs.com/cnblogs_com/IwishIcould/1900124/t_201214043958支付宝收款码.jpg?a=1607924145179">
						<div>
							支付宝
						</div>
					</div>
					<div style="text-align: center;">
						<img src="//images.cnblogs.com/cnblogs_com/IwishIcould/1900124/t_20121604194271E6E296CCB71A007F4E22073D5EB64A.jpg">
						<div>微信</div>
					</div>
				</div>
		        本文版权归作者所有，欢迎转载，未经作者同意须保留此段声明，在文章页面明显位置给出原文连接 <br>
		        如果文中有什么错误，欢迎指出。以免更多的人被误导。 <br>
               
		    </div>
           
            
		</div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-08-07 08:53">2025-08-07 08:53</span>&nbsp;
<a href="https://www.cnblogs.com/IwishIcould">南风晚来晚相识</a>&nbsp;
阅读(<span id="post_view_count">176</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19023809);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19023809', targetLink: 'https://www.cnblogs.com/IwishIcould/p/19023809', title: 'js实现根据汉字的拼音按照a-z的方式进行排序' })">举报</a>
</div>
        