
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/guoxiaoyu/p/18675216" title="发布于 2025-01-23 10:57">
    <span role="heading" aria-level="2">混元API的加密机制与原生集成实战</span>
    

</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>今天，我们将重点讨论在对接混元大模型时需要特别关注的几个要点。首先，最为关键的一点是，混元大模型的加密方式相比于其他大模型更为复杂和严密。在对接过程中，我们通常避免使用混元官方提供的SDK进行集成，主要是因为官方SDK的应用场景存在一定的限制。若能实现原生对接，将能够提供更加灵活和高效的接入方式，同时也能更好地适应我们具体的应用场景。</p>
<p>接下来，我们将直接分析混元大模型的加密机制，深入了解如何通过非SDK方式进行安全可靠的对接。有关混元加密方式的详细信息，可以参考官方文档，链接如下：<a href="https://cloud.tencent.com/document/api/1729/101843" target="_blank" rel="noopener nofollow">腾讯云混元文档</a>。</p>
<h1 id="签名方法v3">签名方法v3</h1>
<p>我们将直接使用最新的签名方法进行集成，文中提供了相应的Java代码示例。你可以方便地将这些代码示例复制并粘贴到您的项目中，从而快速实现功能，如下图所示：</p>
<p><img src="https://img2024.cnblogs.com/blog/1423484/202501/1423484-20250116161959116-389427071.png" alt="image" loading="lazy"></p>
<p>这里由于混元大模型不需要region，自己自行删除即可。</p>
<h2 id="申请秘钥">申请秘钥</h2>
<p>接下来需要申请相关的秘钥信息，可以来这里申请：</p>
<p><img src="https://img2024.cnblogs.com/blog/1423484/202501/1423484-20250116162004596-430190800.png" alt="image" loading="lazy"></p>
<p>申请好后，直接写到环境变量中，或者单独提取出来放到构造器中赋值都可以。</p>
<h2 id="maven依赖">maven依赖</h2>
<p>在 JDK 17 中，默认不再包含 <code>javax.xml.bind.DatatypeConverter</code> 相关的包依赖，因此如果你使用的是 JDK 17 或更高版本，可能会遇到缺少该类导致的编译或运行时错误。为了解决这个问题，你需要手动添加一些额外的依赖。具体如下：</p>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;javax.xml.bind&lt;/groupId&gt;
    &lt;artifactId&gt;jaxb-api&lt;/artifactId&gt;
    &lt;version&gt;2.3.0&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.sun.xml.bind&lt;/groupId&gt;
    &lt;artifactId&gt;jaxb-impl&lt;/artifactId&gt;
    &lt;version&gt;2.3.0&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.sun.xml.bind&lt;/groupId&gt;
    &lt;artifactId&gt;jaxb-core&lt;/artifactId&gt;
    &lt;version&gt;2.3.0&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;javax.activation&lt;/groupId&gt;
    &lt;artifactId&gt;activation&lt;/artifactId&gt;
    &lt;version&gt;1.1.1&lt;/version&gt;
&lt;/dependency&gt;

</code></pre>
<h2 id="参数加密">参数加密</h2>
<p>这个问题也是一个典型的“坑”。由于加密过程必须包含请求参数，所以报错的几率随之大幅增加。当时，我使用的是 Fastjson 来进行记录（record）转 JSON 操作，但 Fastjson 默认会对字段进行排序。而与此同时，使用 RestClient 类发起请求时，字段并没有进行排序，这一点并不明显，需要特别注意。更为棘手的是，这种差异通常不易察觉，必须通过拦截器才能显现出来，才能有效避免因字段顺序不同而导致的潜在错误。</p>
<p>这是原来使用的转json方法：JSONObject.from(payload)，json结果如下：</p>
<blockquote>
<p>{"Messages":[{"Content":"你好！","Role":"user"}],"Model":"hunyuan-pro","Stream":false,"Temperature":0.8}</p>
</blockquote>
<p>但是restclient正常请求拦截后打印：</p>
<p><img src="https://img2024.cnblogs.com/blog/1423484/202501/1423484-20250116162012438-2098337468.png" alt="image" loading="lazy"></p>
<p>所以后来我直接改成了使用objectMapper。如下所示：</p>
<pre><code class="language-java">ObjectMapper objectMapper = new ObjectMapper();
try {
    return objectMapper.writeValueAsString(record);
} catch (Exception e) {
    e.printStackTrace();
    return "";
}

</code></pre>
<p>也需要添加mvn依赖，如下所示：</p>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;
    &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;
    &lt;version&gt;${jackson.version}&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<p>因为在进行抓包操作时，直接访问混元API会遇到各种证书验证问题，导致无法直接查看请求体的具体内容。因此，为了能够准确查看请求体的结构和数据，我们改成直连本地即可，只查看请求体到底是什么样子。</p>
<blockquote>
<p>public static final String DEFAULT_BASE_URL = "<a href="http://127.0.0.1:8888" target="_blank" rel="noopener nofollow">http://127.0.0.1:8888</a>";</p>
</blockquote>
<p>在经过测试并确认没有问题之后，我们将系统配置恢复到原来的设置。经过一系列调整和验证，最终成功完成了对接任务。</p>
<h1 id="总结">总结</h1>
<p>通过本文的讨论，我们详细分析了在对接混元大模型时需要关注的关键要点，特别是加密机制、SDK的替代方案以及如何处理参数加密等挑战。为了确保系统的高效、安全对接，我们深入探讨了如何避免常见的错误，如字段排序问题，并提供了实用的代码示例。经过反复测试和验证，最终我们成功实现了与混元大模型的原生对接。希望这些经验能为大家在实际操作中提供有价值的参考，帮助更顺利地完成集成任务。</p>
<hr>
<p>我是努力的小雨，一个正经的 Java 东北服务端开发，整天琢磨着 AI 技术这块儿的奥秘。特爱跟人交流技术，喜欢把自己的心得和大家分享。还当上了腾讯云创作之星，阿里云专家博主，华为云云享专家，掘金优秀作者。各种征文、开源比赛的牌子也拿了。</p>
<p>💡 想把我在技术路上走过的弯路和经验全都分享出来，给你们的学习和成长带来点启发，帮一把。</p>
<p>🌟 欢迎关注努力的小雨，咱一块儿进步！🌟</p>

</div>
<div class="clear"></div>

		</div>
		<div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.5597428040844907" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-23 10:58">2025-01-23 10:57</span>&nbsp;
<a href="https://www.cnblogs.com/guoxiaoyu">努力的小雨</a>&nbsp;
阅读(<span id="post_view_count">109</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18675216" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18675216);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18675216', targetLink: 'https://www.cnblogs.com/guoxiaoyu/p/18675216', title: '混元API的加密机制与原生集成实战' })">举报</a>
</div>
	