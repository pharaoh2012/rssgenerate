
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/mytudousi/p/18940865" title="发布于 2025-06-21 22:42">
    <span role="heading" aria-level="2">.Net 9.0环境下WebApi发布到IIS</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p><span style="font-size: 16px"><a id="3060-1621846615933"></a><span style="font-size: 18px">一、在Visual Studio里发布</span></span></p>
<p><a id="lbYg-1750479758171"></a>右键点击WebApi工程，点击发布按钮，如下图所示。</p>
<p><img src="https://img2024.cnblogs.com/blog/146887/202506/146887-20250621224430764-254389155.png" alt="" loading="lazy"></p>
<p><a id="p7KX-1750479811088"></a>点击【发布】按钮后，系统弹出发布对话框，如下图所示。</p>
<p><a id="Sh23-1750479887105"></a><img src="https://img2024.cnblogs.com/blog/146887/202506/146887-20250621224116934-438795664.png" alt="image.png" width="889" height="624"></p>
<p><a id="Uswa-1750479847311"></a>选择文件夹，点击【下一步】。</p>
<p><a id="rzIk-1750479935941"></a><img src="https://img2024.cnblogs.com/blog/146887/202506/146887-20250621224116828-1235226071.png" alt="image.png" width="879" height="617"></p>
<p><a id="ewBp-1750479935944"></a>在该界面选择发布输出的目录，一般默认即可，发布到IIS时，我们把此处的文件再拷贝实际在IIS上发布的目录。然后点击【完成】按钮。</p>
<p><a id="Ryvy-1750480015952"></a><img src="https://img2024.cnblogs.com/blog/146887/202506/146887-20250621224116841-1127893541.png" alt="image.png" width="896" height="628"></p>
<p><a id="F5DW-1750480022682"></a>在该界面点击【关闭】按钮。Visual Studio会显示如下界面。</p>
<p><a id="1215-1750480091986"></a><img src="https://img2024.cnblogs.com/blog/146887/202506/146887-20250621224116816-357779741.png" alt="image.png" width="895" height="314"></p>
<p><a id="zc67-1750480097480"></a>点击【显示所有设置】按钮，弹出的设置对话框如下图所示。</p>
<p><a id="M4zg-1750515407015"></a><img src="https://img2024.cnblogs.com/blog/146887/202506/146887-20250621224116507-381356183.png" alt="image.png" width="893" height="705"></p>
<p><a id="N0j4-1750484260263"></a>【配置】项包含Debug和Release，我们发布的话，选择Release即可。</p>
<p><a id="KJUR-1750484286267"></a>【目标框架】选择.net9.0。</p>
<p><a id="3i2u-1750484565806"></a>【部署模式】包括框架依赖和独立两种，如果选择独立，会把依赖的.Net 9.0的dll文件也会拷贝到发布目录下，我们是把Web API发布到IIS上，我们会部署好.net 9.0的环境，所以这里设置框架依赖即可。</p>
<p><a id="cduo-1750484621660"></a>【目标运行时】用来设置发布的目标，包括win-x86、win-x64、win-arm、win-arm64、osx-x64、osx-arm64linux-x64、inux-arm、linux-arm64多个目标平台，根据自己的需求选择。我们要发布到Windows的IIS上，选择win-x64即可。</p>
<p><a id="SHpb-1750484737518"></a>【生成单个文件】，勾选可把所有的文件打包成一个exe文件，我一般不勾选该项，实际效果未做过测试。</p>
<p><a id="1q3i-1750484788900"></a>【启用 ReadyToRun 编译】，‌是一种 ‌AOT（Ahead-of-Time）预编译技术‌，它通过将 IL（中间语言）代码预先编译为本机机器码，显著提升应用程序的启动性能和运行时效率。可根据自己的实际情况选择是否勾选。</p>
<p><a id="sNWY-1750485595958"></a>【裁剪未使用的代码】，通过静态分析移除应用程序中未使用的代码（如未引用的程序集、类型、方法等）来优化应用体积。对体积大小敏感的程序可勾选该选项。例如MAUI开发的移动端程序，Blazor程序等，这样通过删除未被执行的代码（如未使用的库、反射未触及的类型），可显著减小应用程序包大小。WebAPI是发布到服务器端的程序，该选项勾不勾选都可以。</p>
<p><a id="nrAj-1750485835677"></a>【在发布前删除所有现有文件】作用是 ‌清空目标发布目录中的所有旧文件‌，确保发布过程在一个干净的环境中进行，避免残留文件干扰新版本的部署。建议勾选。</p>
<p><a id="ZXGs-1750486628619"></a>【数据库】项目基本上不用，数据库一般我们都会独立的部署。</p>
<p><a id="fr4p-1750486652399"></a>设置完这些参数后，点击【保存】按钮。此时该对话框关闭，新的设置显示到visual Studio界面上，如下图所示。</p>
<p><a id="U5lN-1750486727338"></a><img src="https://img2024.cnblogs.com/blog/146887/202506/146887-20250621224116764-79834672.png" alt="image.png" width="793" height="407"></p>
<p><a id="EAa1-1750486733774"></a>点击右上角的【发布】按钮，执行发布操作。发布成功后，Visual Studio的界面如下图所示。</p>
<p><a id="1GHv-1750486846184"></a><img src="https://img2024.cnblogs.com/blog/146887/202506/146887-20250621224116740-681430051.png" alt="image.png" width="776" height="427"></p>
<p><a id="jY7A-1750484253865"></a>点击【目标位置】项右侧的路径链接，可以快速定位到发布的目录。如下图所示。</p>
<p><img src="https://img2024.cnblogs.com/blog/146887/202506/146887-20250621224948037-2070552964.png" alt="" width="785" height="402" loading="lazy"></p>
<p>&nbsp;</p>
<p><a id="b2wG-1750486922208"></a>把该目录下的所有文件，都拷贝到我们要发布的目录下。下一步就可以在IIS中发布了。</p>
<p><span style="font-size: 18px"><a id="Cw3s-1750486949627"></a>二、在IIS中发布</span></p>
<p><a id="pqJm-1750487200734"></a>首先我们要安装环境，如果没有IIS的话，可以搜索把IIS启用的方法，启用IIS即可。我们主要说下安装.net 9.0 在IIS下的运行环境安装。</p>
<p><a id="a36L-1750487269101"></a>通过<a href="https://dotnet.microsoft.com/zh-cn/download/dotnet/9.0" rel="noopener nofollow">https://dotnet.microsoft.com/zh-cn/download/dotnet/9.0</a>可以进入.net 9.0的各开发包和运行环境的下载页面，如下图所示。</p>
<p><a id="3aYJ-1750490440222"></a><img src="https://img2024.cnblogs.com/blog/146887/202506/146887-20250621224117387-995888937.png" alt="image.png"></p>
<p><a id="bQBg-1750486928177"></a>我们选择下载【ASP.NET Core 运行时】,因为我们是部署到IIS上，所以选择Windows那一栏中的【Hosting Bundle】，这个安装包专为 IIS 部署设计‌，集成以下组件：ASP.NET Core 运行时、.NET 运行时和IIS 模块（ANCM - AspNetCoreModule）。如果要部署到Nginx等环境下，可下载X64版本。</p>
<p><a id="JQUD-1750490642857"></a>下载后，直接双击，按照提示默认安装即可。安装后，重启一下IIS。</p>
<p><a id="eZDi-1750491022490"></a>打开IIS，点击到根节点，然后在右侧双击【模块】按钮。如下图所示。</p>
<p><a id="B5v7-1750491281499"></a><img src="https://img2024.cnblogs.com/blog/146887/202506/146887-20250621224117839-2030228923.png" alt="image.png"></p>
<p><a id="KX3f-1750491281503"></a>弹出的模块内容如下图所示。</p>
<p><a id="g3lN-1750491371526"></a><img src="https://img2024.cnblogs.com/blog/146887/202506/146887-20250621224117839-1588842251.png" alt="image.png"></p>
<p><a id="0C6C-1750491371530"></a>如果包含了【AspNetCoreModuleV2】项，基本上就可以认为是安装成功了。</p>
<p><a id="CqHc-1750491420299"></a>右键点击【应用程序池】，点击【新建应用程序池】弹出对话框如下图所示。</p>
<p><img src="https://img2024.cnblogs.com/blog/146887/202506/146887-20250621224834977-1075070962.png" alt="" width="928" height="473" loading="lazy"></p>
<p><a id="nMR2-1750491571537"></a>【名称】可根据自己需要命名，建议可以和发布的项目名称保持一致。【.NET CLR 版本】选择无托管代码，其他保持默认设置即可。最后点击【确定】按钮，完成程序池的新建工作。</p>
<p><a id="6MuQ-1750491668878"></a>右键点击【网站】节点，在弹出的右键菜单中点击【新建网站】按钮，弹出【新建网站】对话框。如下图所示。</p>
<p><a id="LrVd-1750515742105"></a><img src="https://img2024.cnblogs.com/blog/146887/202506/146887-20250621224116986-708224154.png" alt="image.png" width="888" height="665"></p>
<p><a id="gwik-1750491656996"></a>输入网站的名称，选择程序池，设置发布程序存储的路径，并设置好端口，点击确定即可，此时该网站就会添加到IIS中。如下图所示。</p>
<p><a id="cNue-1750491919596"></a><img src="https://img2024.cnblogs.com/blog/146887/202506/146887-20250621224117602-581971282.png" alt="image.png"></p>
<p><a id="bDLc-1750491836185"></a>选中刚发布的WebAPI，点击右侧的浏览按钮，可以在浏览器中测试是否可以查看。默认是访问不到任务信息，会显示HTTP ERROR 404错误。可以直接测试某个API或则打开Swagger页面，如果能打开则发布成功。但正式发布的时候，要禁用Swagger。</p>
<p><a id="cxDw-1750515931124"></a><img src="https://img2024.cnblogs.com/blog/146887/202506/146887-20250621224116779-614155134.png" alt="image.png" width="808" height="306"></p>
<p>&nbsp;</p>
<p><span style="font-size: 18px"><a id="z5BT-1750515975691"></a>三、发布的时候的一些注意事项：</span></p>
<p><a id="QLxK-1750515982871"></a>1、发布的网站名称和使用的程序池名称尽量保持一致，并且创建的时候一次性命名，如果命名错误，不要修改，直接删除，重新创建。这样可能会避免一些错误。（原因没有深究，只是平常使用的时候经常遇到这样的问题）</p>
<p><a id="xN7J-1750516122262"></a>2、程序池的启动模式可以修改为AlwaysRunning，就是一直运行，另外一个设置是当第一次请求的时候才启动。</p>
<p><a id="AE5f-1750516268433"></a>3、发布的内容所在的目录给其最高权限，例如给Everyone所有的权限等。</p>
<p>&nbsp;</p>
<p>&nbsp;<span style="font-size: 18pt">四、连接数据库的时候可能出现的问题</span></p>
<div>我们系统一般使用SqlServer数据库，并且和WebAPI以及WebApp部署在一台服务器上。所以WebAPI连接数据库的时候，一般使用Windows连接方式。连接字符串配置如下。</div>
<div>Server=数据库服务实例;Database=数据库名称;Trusted_Connection=True;TrustServerCertificate=True;&nbsp;</div>
<div>如果一切按照默认设置，虽然WebAPI可以访问了，但真正执行的时候，WebAPI访问数据库可能会出现以下错误。如下图所示。</div>
<div>无法打开登录所请求的数据库 "【xxx】"。登录失败。</div>
<div>用户 'IIS APPPOOL\【yyyy】' 登录失败。</div>
<div>其中【xxx】是数据库名称，【yyyy】是WebAPI在IIS发布的时候使用的程序集池的名称。</div>
<div>这个时候我们就在SqlServer中创建一个名为IIS APPPOOL\【yyyy】的用户，该用户指向我们的目标数据库，然后设置相应的权限就可以了。如果实在不放心，把所有的权限都给这个用户即可。</div>
<div><img src="https://img2024.cnblogs.com/blog/146887/202506/146887-20250622111724810-1061838823.png" alt="0" width="446" height="331" data-media-type="image"></div>
<div>在弹出的新建登录名【常规】选项卡可以做如下设置。</div>
<div><img src="https://img2024.cnblogs.com/blog/146887/202506/146887-20250622111724938-2121526109.png" alt="0" width="800" height="656" data-media-type="image"></div>
<div>【登录名】为IIS APPPOOL\应用程序池名称，【默认数据库】设置为我们的目标数据库即可。</div>
<div>然后切换到【用户映射】选项卡，设置如下所示。</div>
<div><img src="https://img2024.cnblogs.com/blog/146887/202506/146887-20250622111724901-541287754.png" alt="0" width="745" height="614" data-media-type="image"></div>
<div>在【映射到此登录名的用户】列表中，勾选我们使用的目标数据库，在下面的【数据库角色成员身份】列表中可根据需要选择，我们一般选择db_datareader、db_datawriter&nbsp;和db_owner即可。public是默认勾选的。</div>
<div>设置完成后，可以重启下数据库，再去尝试调用，应该就可以了。</div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.5541666666666667" data-date-updated="2025-06-22 12:00">2025-06-21 22:42</span>&nbsp;
<a href="https://www.cnblogs.com/mytudousi">mytudousi</a>&nbsp;
阅读(<span id="post_view_count">191</span>)&nbsp;
评论(<span id="post_comment_count">6</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18940865);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18940865', targetLink: 'https://www.cnblogs.com/mytudousi/p/18940865', title: '.Net 9.0环境下WebApi发布到IIS' })">举报</a>
</div>
        