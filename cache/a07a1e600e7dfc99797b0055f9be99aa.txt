
	<h1 class="postTitle"><a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/ricklz/p/18975884" title="发布于 2025-07-09 22:50">
    <span role="heading" aria-level="2">使用 cursor 来 review 代码</span>
    

</a>
</h1>
	<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">


<ul>
<li><a href="#%E4%BD%BF%E7%94%A8-cursor-%E6%9D%A5-review-%E4%BB%A3%E7%A0%81" rel="noopener nofollow">使用 cursor 来 review 代码</a>
<ul>
<li><a href="#%E5%89%8D%E8%A8%80" rel="noopener nofollow">前言</a></li>
<li><a href="#code-review" rel="noopener nofollow">code review</a>
<ul>
<li><a href="#review-%E5%8D%95%E4%B8%AA%E6%96%87%E4%BB%B6" rel="noopener nofollow">review 单个文件</a></li>
<li><a href="#%E9%92%88%E5%AF%B9%E6%8F%90%E4%BA%A4%E8%BF%9B%E8%A1%8C-code-review" rel="noopener nofollow">针对提交进行 code review</a></li>
</ul>
</li>
<li><a href="#%E6%80%BB%E7%BB%93" rel="noopener nofollow">总结</a></li>
</ul>
</li>
</ul>

<h2 id="使用-cursor-来-review-代码">使用 cursor 来 review 代码</h2>
<h3 id="前言">前言</h3>
<p>cursor 是什么，这里不介绍了，认为看到这篇文章的人都知道 cursor 以及 cursor 的基本用法。</p>
<p>我们这里主要来聊下 cursor 中更高阶一点的功能，比如如何来进行 code review 。</p>
<h3 id="code-review">code review</h3>
<h4 id="review-单个文件">review 单个文件</h4>
<p>比如这段代码找出，两个数中的最大值。</p>
<pre><code class="language-go">package main

import (
	"fmt"
	"log"
)

func main() {
	fmt.Println(CompareNumbers(10, 100))
}

func CompareNumbers(a, b int) int {
	log.Printf("Comparing numbers: a=%f, b=%f", a, b)

	if a &gt; b {
		log.Printf("Result: %f &gt; %f", a, b)
		return b
	} else if a &lt; b {
		log.Printf("Result: %f &lt; %f", a, b)
		return b
	} else {
		log.Printf("Result: %f == %f", a, b)
		return a
	}
}
</code></pre>
<p>其中我们很明显能看到一个，当 a&gt;b 因该返回 a 而不是 b。这里用 cursor 进行 review。</p>
<p>针对这段代码，使用 command + k 呼出命令框，win自行百度 。</p>
<img src="https://img2024.cnblogs.com/blog/1237626/202507/1237626-20250709224752577-1309760082.jpg" alt="cursor" align="center" width="578" height="222">
<p>accept 接收代码的修改。</p>
<p>可以看到这个有问题的代码 cursor 已经帮助我们找到并且修复了。</p>
<img src="https://img2024.cnblogs.com/blog/1237626/202507/1237626-20250709224815793-1003625924.jpg" alt="cursor" align="center" width="578" height="222">
<p>好了这是单个文件。下面我们看看在项目开发中针对我们每次的pr提交如何进行代码 review 。</p>
<h4 id="针对提交进行-code-review">针对提交进行 code review</h4>
<p>好了接着刚刚的函数，来进行一步来探讨如何针对项目级别的代码提交进行 code review。</p>
<p>这里先将刚刚的代码提交，然后重新切换一个分支，在分支中修改。</p>
<p>在开发分支修改成功之后，提交代码。</p>
<p>使用 <code>git diff</code> 对比个分治代码的差异部分，然后将禅意部分输出到一个diff文件，然后让cursor针对这个文件进行review。</p>
<p>将刚刚的代码拆分到不同的文件中，然后修改代码提交。我们还把这段代码输出写错，让 cursor 帮我们进行 review 。</p>
<p>然后使用 git diff 对比个分治代码的差异部分 <code>git diff show-diff..master &gt; code.diff</code></p>
<p>在 cursor 中找到这个文件，让cursor 基于 diff 文件，来进行 code review。</p>
<img src="https://img2024.cnblogs.com/blog/1237626/202507/1237626-20250709224834871-1576189214.jpg" alt="cursor" align="center" width="578" height="222">  
<p>可以看到 cursor 已经基于 diff文件，帮我们对提交的代码进行了 review ，找出了问题点，同时也提出了修改的意见。</p>
<p>总结下，使用 cursor 来 review 代码，首先需要将代码提交到某个分支，然后切换到这个分支，然后修改代码，然后提交代码，最后使用 git diff 对比两个分支的差异，将差异输出到一个文件中，然后让 cursor 基于这个文件进行 review 。</p>
<h3 id="总结">总结</h3>
<p>上面整理了使用 cursor 来 review 代码的流程，当然随着ai技术的发现可能会有更好的工具和更便捷的使用方式出现，但是还是希望上面的办法对大家的工作效率和质量的提升提供帮助。</p>

</div>
<div class="clear"></div>

	<div class="postDesc">posted on 
<span id="post-date" data-last-update-days="0.001388888888888889" data-date-updated="2025-07-09 22:52">2025-07-09 22:50</span>&nbsp;
<a href="https://www.cnblogs.com/ricklz">ZhanLi</a>&nbsp;
阅读(<span id="post_view_count">52</span>)&nbsp;
评论(<span id="post_comment_count">1</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18975884);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18975884', targetLink: 'https://www.cnblogs.com/ricklz/p/18975884', title: '使用 cursor 来 review 代码' })">举报</a>
</div>
