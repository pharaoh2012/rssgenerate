
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/wp-960505/p/18624606" title="发布于 2024-12-23 17:29">
    <span role="heading" aria-level="2">Java调用与发布Webservice接口（一）</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>​</p>
<h1 id="一-准备工作">一&nbsp; 准备工作</h1>
<h2 id="一开发环境">（一）开发环境</h2>
<p>demo以springboot为基础框架，使用到了httpclient、hutool等依赖，详情如下：<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;springboot版本：</p>
<parent>
        <groupid>org.springframework.boot</groupid>
        <artifactid>spring-boot-starter-parent</artifactid>
        <version>2.7.8</version>
        <relativepath>
</relativepath></parent>
<p>cxf与httpclient&nbsp;、hutool依赖：</p>

<pre><code>    &lt;dependency&gt;
        &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;
        &lt;artifactId&gt;httpclient&lt;/artifactId&gt;
    &lt;/dependency&gt;
</code></pre>

<pre><code>    &lt;dependency&gt;
        &lt;groupId&gt;cn.hutool&lt;/groupId&gt;
        &lt;artifactId&gt;hutool-all&lt;/artifactId&gt;
        &lt;version&gt;5.8.20&lt;/version&gt;
    &lt;/dependency&gt;
</code></pre>
<h1 id="二-发布接口">二 发布接口</h1>
<p>首先创建一个测试接口，@WebService声明这是一个webservice接口，name为接口名称，targetNamespace 很重要，表明webservice接口的命名空间。@WebMethod()声明这是一个接口下的函数方法，@WebParam声明函数需要的参数。</p>
<p>@WebService(name = "UnifySearchService", targetNamespace = "<a href="http://com.test.webservice/service" target="_blank" rel="noopener nofollow">http://com.test.webservice/service</a>")<br>
public interface UnifySearchService {</p>
<pre><code>@WebMethod()
String testService(@WebParam(name = "parameter") String parameter);
</code></pre>
<p>}</p>
<p>创建该接口的实现类就可以在函数种编写业务处理代码：</p>
<pre><code>@Override
public String testService(String parameter) {
    // code
    
    return "parameter：" + parameter;
}
</code></pre>
<p>创建发布webservice接口的配置文件：</p>
<p>@Configuration<br>
public class CxfWebServiceConfig {</p>
<pre><code>@Resource
private UnifySearchService unifySearchService;

@Bean(name = Bus.DEFAULT_BUS_ID)
public SpringBus springBus() {
    return new SpringBus();
}

/**
 * 访问地址 http://127.0.0.1:8085/ws/service?wsdl
 */
@Bean
public Endpoint endpoint() {
    EndpointImpl endpoint = new EndpointImpl(springBus(), unifySearchService);
    endpoint.publish("/service");
    return endpoint;
}
</code></pre>
<p>}</p>
<p>在applicaiton.properties中，添加以下配置：<br>
<img src="https://img2024.cnblogs.com/blog/1265762/202412/1265762-20241223172708993-2081806895.png" alt="image" loading="lazy"></p>
<p>创建完毕后运行项目，访问http://127.0.0.1:8085/ws/service?wsdl，可见以下内容：</p>
<p>到此，webservice接口就发布成功了。</p>
<h1 id="三-接口调用">三&nbsp; 接口调用</h1>
<h2 id="一httpclient调用">（一）httpclient调用</h2>
<p>webservice接口调用在此展示两种最简单的方式，先说最简单的调用方法，httpclient方法调用，需要使用soapUI工具生成xml请求体：</p>
<p>再创建httpclient请求，将上面的xml请求体作为请求参数soapXml，发送POST请求：</p>
<pre><code>public static String doPostSoap(String postUrl, String soapAction, String soapXml) throws IOException {
    String retStr = "";
    CloseableHttpClient httpClient = CustomerHttpClient4.getHttpClient();
    HttpPost httpPost = new HttpPost(postUrl);
    httpPost.setHeader("Content-Type", "text/xml;charset=UTF-8");
    httpPost.setHeader("SOAPAction", soapAction);
    StringEntity data = new StringEntity(soapXml, Charset.forName("UTF-8"));
    httpPost.setEntity(data);
    try (CloseableHttpResponse response = httpClient.execute(httpPost)) {
        HttpEntity httpEntity = response.getEntity();
        String entity = EntityUtils.toString(httpEntity, "UTF-8");
        if (response.getStatusLine().getStatusCode() == 200) {
            retStr = entity;
        }
    }
    return retStr;
}

public static void main(String[] args) {
    String result;
    String xmlParam = "&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ser=\"http://com.wp.webservice/service\"&gt;&lt;soapenv:Header/&gt;&lt;soapenv:Body&gt;&lt;ser:testService&gt;&lt;parameter&gt;HTTP client请求&lt;/parameter&gt;&lt;/ser:testService&gt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt;";
    try {
        result = doPostSoap("http://localhost:8085/ws/service?wsdl", "", xmlParam);
    } catch (IOException e) {
        throw new RuntimeException(e);
    }
    System.out.println(result);
}
</code></pre>
<p>调用结果：<br>
<img src="https://img2024.cnblogs.com/blog/1265762/202412/1265762-20241223172909828-1365640330.png" alt="image" loading="lazy"></p>
<h2 id="二hutool工具调用">（二）hutool工具调用</h2>
<p>基于hutool提供的SoapClient工具创建webservice请求调用：</p>
<pre><code>public static String request(String url, String method, String targetNamespace, Map&lt;String, Object&gt; param) {
    SoapClient client = SoapClient.create(url).setMethod(method, targetNamespace).setParams(param, false);
    // 打印组装xml请求体
    Console.log(client.getMsgStr(true));

    String result = client.send();
    return result;
}

public static void main(String[] args) {
    Map&lt;String, Object&gt; param = new HashMap&lt;&gt;();
    param.put("parameter", "hutool请求webservice接口");
    String result = request("http://localhost:8085/ws/service?wsdl",
            "ser:testService",
            "http://com.wp.webservice/service",
            param
    );
    System.out.println(result);
}
</code></pre>
<p>调用结果：<br>
<img src="https://img2024.cnblogs.com/blog/1265762/202412/1265762-20241223172839891-349592427.png" alt="image" loading="lazy"></p>
<p>调用webservice接口除以上两种简便的方式外，还可使用cxf提供的工具类进行调用，具体的调用方法后续有时间再贴出来。</p>
<p>此外我在工作中遇到的是带有head认证的webservice接口，刚开始使用cxf框架，在拦截器中进行头部参数认证，但实际效果并不好，因此查找了以上两种方法，第一种可以适配所有情况，第二种需要进一步完善代码才可以，在后续的文章中会贴出代码，包括如何使用hutool调用带有head认证的webservice接口与cxf动态调用webservice接口，敬请期待。</p>
<p>​</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.032458903921296293" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2024-12-23 17:30">2024-12-23 17:29</span>&nbsp;
<a href="https://www.cnblogs.com/wp-960505">MrLaoBai</a>&nbsp;
阅读(<span id="post_view_count">19</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18624606" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18624606);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18624606', targetLink: 'https://www.cnblogs.com/wp-960505/p/18624606', title: 'Java调用与发布Webservice接口（一）' })">举报</a>
</div>
        