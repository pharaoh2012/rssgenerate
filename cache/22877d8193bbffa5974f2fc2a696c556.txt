
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/dennyLee2025/p/18793797" title="发布于 2025-03-29 10:38">
    <span role="heading" aria-level="2">掌握设计模式--迭代器模式</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="迭代器模式iterator-pattern">迭代器模式（Iterator Pattern）</h2>
<p>迭代器模式（Iterator Pattern）是一种行为设计模式，用于在不暴露对象内部表示的情况下顺序访问集合对象的元素。它提供了一种统一的方式来遍历集合元素，而无需了解集合的底层实现。</p>
<p><strong>核心思想</strong>是分离集合对象的遍历行为，将遍历逻辑封装在迭代器中，从而为不同集合提供一致的遍历接口。</p>
<h3 id="主要组成部分">主要组成部分</h3>
<ul>
<li>
<p><strong>Iterator（迭代器接口）</strong><br>
定义访问和遍历元素的接口，例如<code>hasNext()</code>和<code>next()</code>方法。</p>
</li>
<li>
<p><strong>Concrete Iterator（具体迭代器）</strong><br>
实现<code>Iterator</code>接口，负责具体集合的遍历逻辑。</p>
</li>
<li>
<p><strong>Aggregate（聚合接口）</strong><br>
定义创建迭代器对象的方法，如<code>createIterator()</code>。</p>
</li>
<li>
<p><strong>Concrete Aggregate（具体聚合类）</strong><br>
实现聚合接口，返回具体的迭代器实例，并存储集合的元素。</p>
</li>
</ul>
<h2 id="案例实现">案例实现</h2>
<p>一个简单的迭代器模式实现，使用聚合类为自定义集合。为了简化代码，聚合类本质是List集合。</p>
<h3 id="案例类图">案例类图</h3>
<p><img src="https://img2024.cnblogs.com/blog/1209017/202503/1209017-20250326145753581-979405334.png" alt="image" loading="lazy"></p>
<h3 id="聚合接口">聚合接口</h3>
<pre><code class="language-java">public interface Aggregate&lt;T&gt; {
    Iterator&lt;T&gt; createIterator();
}
</code></pre>
<h3 id="具体聚合类">具体聚合类</h3>
<p>为了简化代码，直接使用List 集合</p>
<pre><code class="language-java">public class ConcreteAggregate&lt;T&gt; implements Aggregate&lt;T&gt; {
    private final List&lt;T&gt; items = new ArrayList&lt;&gt;();

    public void add(T item) {
        items.add(item);
    }

    @Override
    public Iterator&lt;T&gt; createIterator() {
        return new ConcreteIterator&lt;&gt;(items);
    }
}
</code></pre>
<h3 id="迭代器接口">迭代器接口</h3>
<pre><code class="language-java">// 迭代器接口
public interface Iterator&lt;T&gt; {
    boolean hasNext();
    T next();
}
</code></pre>
<h3 id="具体迭代器类">具体迭代器类</h3>
<p>List 集合的迭代器简易实现</p>
<pre><code class="language-java">public class ConcreteIterator&lt;T&gt; implements Iterator&lt;T&gt; {
    private final List&lt;T&gt; items;
    private int position = 0;

    public ConcreteIterator(List&lt;T&gt; items) {
        this.items = items;
    }

    @Override
    public boolean hasNext() {
        return position &lt; items.size();
    }

    @Override
    public T next() {
        if (!hasNext()) {
            throw new NoSuchElementException();
        }
        return items.get(position++);
    }
}
</code></pre>
<h3 id="测试代码">测试代码</h3>
<pre><code class="language-java">public class IteratorDemo {
    public static void main(String[] args) {
        ConcreteAggregate&lt;String&gt; aggregate = new ConcreteAggregate&lt;&gt;();
        aggregate.add("Item 1");
        aggregate.add("Item 2");
        aggregate.add("Item 3");

        System.out.println("遍历集合元素：");
        Iterator&lt;String&gt; iterator = aggregate.createIterator();
        while (iterator.hasNext()) {
            System.out.println(iterator.next());
        }
    }
}
</code></pre>
<h3 id="测试结果">测试结果</h3>
<pre><code>遍历集合元素：
Item 1
Item 2
Item 3
</code></pre>
<h2 id="优缺点和使用场景">优缺点和使用场景</h2>
<h3 id="优点">优点</h3>
<ul>
<li><strong>支持多种遍历方式</strong>：可以实现不同的迭代逻辑，例如正序、倒序、条件过滤等；</li>
<li><strong>隐藏集合的内部实现</strong>：迭代器通过抽象集合的底层逻辑，实现集合元素的访问，而用户无需关心集合的底层结构；</li>
<li><strong>提供统一接口</strong>：方便替换或扩展集合类型。</li>
</ul>
<h3 id="缺点">缺点</h3>
<ul>
<li><strong>类的数量增加</strong>：迭代器服务于特定的集合，需要为每个集合实现具体的迭代器；</li>
<li><strong>可能影响性能</strong>：为每次遍历创建新的迭代器对象，增加了开销。</li>
</ul>
<h3 id="使用场景">使用场景</h3>
<ul>
<li>
<p>需要访问一个集合对象的内容，但不希望暴露其内部表示</p>
</li>
<li>
<p>需要支持多种方式遍历集合</p>
</li>
<li>
<p>需要为不同集合类型提供一致的遍历接口</p>
</li>
</ul>
<h2 id="java-标准库中的迭代器模式">Java 标准库中的迭代器模式</h2>
<p>在 Java 中，<code>java.util.Iterator</code> 和 <code>java.util.Enumeration</code> 是迭代器模式的典型实现，用于遍历集合类（如<code>List</code>、<code>Set</code>和<code>Map</code>）。</p>
<p>例如：</p>
<pre><code class="language-java">List&lt;String&gt; list = Arrays.asList("A", "B", "C");
Iterator&lt;String&gt; iterator = list.iterator();
while (iterator.hasNext()) {
    System.out.println(iterator.next());
}
</code></pre>
<h2 id="总结">总结</h2>
<p>迭代器模式是一种行为设计模式，其核心在于通过提供一个迭代器对象，<strong>将聚合对象（如集合）的遍历行为与其内部表示分离</strong>，使得客户端能够以一致的方式访问聚合对象中的元素，而无需了解其底层实现，支持多种遍历方式且不影响集合对象的封装性。</p>
<p><img src="https://img2024.cnblogs.com/blog/1209017/202503/1209017-20250326145740458-521330087.gif" alt="image" loading="lazy"></p>
<p>需要查看往期设计模式文章的，可以在个人主页中或者文章开头的集合中查看，可关注我，持续更新中。。。</p>
<hr>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzI5NDM5NDM1NA==&amp;mid=2247486066&amp;idx=1&amp;sn=e8c7423105ddd0562f50892010941efc&amp;scene=21#wechat_redirect" target="_blank" rel="noopener nofollow">超实用的SpringAOP实战之日志记录</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzI5NDM5NDM1NA==&amp;mid=2247485873&amp;idx=1&amp;sn=08b58de61c716e5c57ff2fddb947f0d8&amp;scene=21#wechat_redirect" target="_blank" rel="noopener nofollow">2023年下半年软考考试重磅消息</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzI5NDM5NDM1NA==&amp;mid=2247485909&amp;idx=1&amp;sn=e20f3b7b413310ca78f90c13305972ab&amp;scene=21#wechat_redirect" target="_blank" rel="noopener nofollow">通过软考后却领取不到实体证书？</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzI5NDM5NDM1NA==&amp;mid=2247485802&amp;idx=1&amp;sn=863cf239124b98d39ec551b6cb67845c&amp;scene=21#wechat_redirect" target="_blank" rel="noopener nofollow">计算机算法设计与分析（第5版）</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzI5NDM5NDM1NA==&amp;mid=2247485015&amp;idx=1&amp;sn=862bc2b379726b89cdb396ec0d325cc0&amp;scene=21#wechat_redirect" target="_blank" rel="noopener nofollow">Java全栈学习路线、学习资源和面试题一条龙</a></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzI5NDM5NDM1NA==&amp;mid=2247485956&amp;idx=1&amp;sn=57407d9f7921254ba19ed70fa3bd6a2d&amp;chksm=ec62ca99db15438f13f2cf96d17a3e282028fa7960af56126caec68fb6eafd46d6e04a10ad0c&amp;scene=21#wechat_redirect" target="_blank" rel="noopener nofollow">软考证书=职称证书？</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzI5NDM5NDM1NA==&amp;mid=2247485837&amp;idx=1&amp;sn=b9b17dfd252882468b8eea31012df6fc&amp;scene=21#wechat_redirect" target="_blank" rel="noopener nofollow">软考中级--软件设计师毫无保留的备考分享</a></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.012497824377314814" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-29 10:38">2025-03-29 10:38</span>&nbsp;
<a href="https://www.cnblogs.com/dennyLee2025">渊渟岳</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18793797" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18793797);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18793797', targetLink: 'https://www.cnblogs.com/dennyLee2025/p/18793797', title: '掌握设计模式--迭代器模式' })">举报</a>
</div>
        