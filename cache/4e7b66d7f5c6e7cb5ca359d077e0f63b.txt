<!----> <meta itemprop="headline" content="这次终于轮到前端给后端兜底了🤣"> <meta itemprop="keywords" content="前端,JavaScript,Vue.js"> <meta itemprop="datePublished" content="2025-03-28T06:47:50.000Z"> <meta itemprop="image" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-128.png~tplv-t2oaga2asx-image.image"> <div itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><meta itemprop="name" content="howcode"> <meta itemprop="url" content="https://juejin.cn/user/3870758380505431"></div> <div itemprop="publisher" itemscope="itemscope" itemtype="http://schema.org/Organization"><meta itemprop="name" content="掘金"> <div itemprop="logo" itemscope="itemscope" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-white-180.png~tplv-t2oaga2asx-image.image"> <meta itemprop="width" content="180"> <meta itemprop="height" content="180"></div></div> <h1 class="article-title" data-v-5111268e="">
            这次终于轮到前端给后端兜底了🤣
            <!----> <!----></h1> <div class="author-info-block block-hidden" data-v-5111268e=""><div class="author-info-box" data-v-5111268e=""><div class="author-name" data-v-5111268e=""><a href="/user/3870758380505431/posts" target="_blank" rel="" class="jj-link username username ellipsis" data-v-65b50b51="" data-v-6a576a98="" data-v-5111268e=""><span class="name" style="max-width:160px;" data-v-65b50b51="" data-v-6a576a98="">
    howcode
  </span> <!----> <!----> <!----> </a></div> <div class="meta-box" data-v-5111268e=""><time datetime="2025-03-28T06:47:50.000Z" title="Fri Mar 28 2025 06:47:50 GMT+0000 (Coordinated Universal Time)" class="time" data-v-5111268e="">
                    2025-03-28
                  </time> <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" class="read-icon" data-v-5111268e=""><path d="M7.90078 2.80078C4.49278 2.80078 1.74745 6.11672 0.800781 7.77469C1.74745 9.58339 4.49278 13.2008 7.90078 13.2008C11.3088 13.2008 14.0541 9.58339 15.0008 7.77469C14.0541 6.11672 11.3088 2.80078 7.90078 2.80078Z" stroke="currentColor" data-v-5111268e=""></path><circle cx="7.89922" cy="8.00078" r="2.2" stroke="currentColor" data-v-5111268e=""></circle></svg> <span class="views-count" data-v-5111268e="">
                    17,594
                  </span> <span class="read-time" data-v-5111268e=""><svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" data-v-5111268e=""><rect width="16" height="16" fill="none" data-v-5111268e=""></rect><circle cx="8" cy="8" r="5.65625" stroke="#8A919F" data-v-5111268e=""></circle><path d="M7.69141 5.18652V8.30924H10.8141" stroke="#8A919F" stroke-linecap="round" stroke-linejoin="round" data-v-5111268e=""></path></svg>
                    阅读8分钟
                  </span> <!----></div></div> <div style="flex:1;" data-v-5111268e=""></div> <!----> <!----></div> <!----> <!----> <!----> <!----> <div id="article-root" itemprop="articleBody" class="main" data-v-5111268e=""><div class="article-viewer markdown-body cache result"><p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/c44a86f85a20404e81b3479e8ed6ed13~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgaG93Y29kZQ==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1748831286&amp;x-signature=GcX1Lfsv7JRJmhKV%2FVoaV4R7W34%3D" alt="封面.png" loading="lazy"></p>
<h2 data-id="heading-0">需求交代</h2>
<p>最近我们项目组开发了个互联网采集的功能，也就是后端合理抓取了第三方的文章，数据结构大致如下：</p>
<pre><code class="hljs language-html" lang="html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>前端人<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>学好前端，走遍天下都不怕<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
</code></pre>
<p>数据抓取到后，存储到数据库，然后前端请求接口获取到数据，直接在页面预览</p>
<pre><code class="hljs language-html" lang="html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">'articleContent'</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
</code></pre>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/2b32ea73542b43e09cad9ef5b1acb30d~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgaG93Y29kZQ==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1748831286&amp;x-signature=htQm88r1pNDKNejrdc%2FDaU5r6CY%3D" alt="image.png" loading="lazy"></p>
<p>整个需求已经交代清楚</p>
<h2 data-id="heading-1">这个需求有点为难后端了</h2>
<p>前天，客户说要新增一个文章的pdf导出功能，但就是这么一个合情合理的需求，却把后端为难住了，原因是部分数据采集过来的结构可能是这样的：</p>
<pre><code class="hljs language-html" lang="html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>前端人<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>学好前端，走遍天下都不怕<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>前端强，前端狂，交互特效我称王！
<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>JS 写得好，需求改不了！<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>React Vue 两手抓，高薪 offer 到你家！<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>浏览器里横着走， bug 见我都绕道！&lt;/p
<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Chrome 调试一声笑， IE 泪洒旧时光！<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Git 提交不留情，版本回退我最行！
</code></pre>
<p>仔细的人就能发现问题了，很多html元素存在没有完整的闭合情况</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/3c8fe968e3c248d69076afef5c63937c~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgaG93Y29kZQ==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1748831286&amp;x-signature=djLm9UB3b%2F%2B2dtrGy5IJtJG0s3I%3D" alt="image.png" loading="lazy"></p>
<p>但浏览器是强大的，丝毫不影响渲染效果，原来浏览器自动帮我们补全结构了</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/bc56b06a3c0542ca83d019d9f52fca0e~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgaG93Y29kZQ==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1748831286&amp;x-signature=WKa6PLUqOYddwtJvFcT77yg6TA4%3D" alt="image.png" loading="lazy"></p>
<p>可后端处理这件事就没那么简单了，爬取到的数据也比我举例的要复杂的多，使用第三方插件将html转pdf时会识别标签异常等问题，因此程序会抛异常</p>
<h2 data-id="heading-2">来自后端的建议</h2>
<p>苦逼的后端折腾了很久，还是没折腾出来，终于他发现前端页面有个右键打印的功能，也就是：</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/070143a6e12543539d29c4caf08af5bc~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgaG93Y29kZQ==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1748831286&amp;x-signature=CdsgbII5HFcOkiie3%2B72850e6KE%3D" alt="image.png" loading="lazy"></p>
<p>于是他说：浏览器这玩意整挺好啊，前端能不能研究研究，尝试从前端实现导出</p>
<h2 data-id="heading-3">那就研究研究</h2>
<p>我印象中，确实有个叫<code>vue-print-nb</code>的前端插件，可以实现这个功能</p>
<p>但.......等等，这个插件仅仅是唤起打印的功能，我总不能真做成这样，让用户另存为pdf吧</p>
<p>于是，只能另辟蹊径，终于我找到了这么个仓库：<a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fburc-li%2Fvue-pdf" target="_blank" title="https://github.com/burc-li/vue-pdf" ref="nofollow noopener noreferrer">github.com/burc-li/vue…</a></p>
<p>里面实现了dom元素导出pdf的功能</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/4a81a9967b194a8186b99b1d27d1fc44~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgaG93Y29kZQ==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1748831286&amp;x-signature=Qj31w7PR7fsqipC2CDewmgW7QsU%3D" alt="image.png" loading="lazy"></p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/69b83ec298b1419f96a1d8fc14186e84~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgaG93Y29kZQ==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1748831286&amp;x-signature=BWQ7va%2F8Vt81KGnVmGt8Gf%2BcTNc%3D" alt="image.png" loading="lazy"></p>
<p>效果很不错，技术用到了<code>jspdf</code>、<code>html2canvas</code>这两个第三方库，代码十分简单</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">downLoadPdfA4Single</span> = (<span class="hljs-params"></span>) =&gt; {
  <span class="hljs-keyword">const</span> pdfContaniner = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">'#pdfContaniner'</span>)
  <span class="hljs-title function_">html2canvas</span>(pdfContaniner).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">canvas</span> =&gt;</span> {
    <span class="hljs-comment">// 返回图片dataURL，参数：图片格式和清晰度(0-1)</span>
    <span class="hljs-keyword">const</span> pageData = canvas.<span class="hljs-title function_">toDataURL</span>(<span class="hljs-string">'image/jpeg'</span>, <span class="hljs-number">1.0</span>)

    <span class="hljs-comment">// 方向纵向，尺寸ponits，纸张格式 a4 即 [595.28, 841.89]</span>
    <span class="hljs-keyword">const</span> A4Width = <span class="hljs-number">595.28</span>
    <span class="hljs-keyword">const</span> A4Height = <span class="hljs-number">841.89</span> <span class="hljs-comment">// A4纸宽</span>
    <span class="hljs-keyword">const</span> pageHeight = A4Height &gt;= A4Width * canvas.<span class="hljs-property">height</span> / canvas.<span class="hljs-property">width</span> ? A4Height :  A4Width * canvas.<span class="hljs-property">height</span> / canvas.<span class="hljs-property">width</span>
    <span class="hljs-keyword">const</span> pdf = <span class="hljs-keyword">new</span> <span class="hljs-title function_">jsPDF</span>(<span class="hljs-string">'portrait'</span>, <span class="hljs-string">'pt'</span>, [A4Width, pageHeight])

    <span class="hljs-comment">// addImage后两个参数控制添加图片的尺寸，此处将页面高度按照a4纸宽高比列进行压缩</span>
    pdf.<span class="hljs-title function_">addImage</span>(
      pageData,
      <span class="hljs-string">'JPEG'</span>,
      <span class="hljs-number">0</span>,
      <span class="hljs-number">0</span>,
      A4Width,
      A4Width * canvas.<span class="hljs-property">height</span> / canvas.<span class="hljs-property">width</span>,
    )
    pdf.<span class="hljs-title function_">save</span>(<span class="hljs-string">'下载一页PDF（A4纸）.pdf'</span>)
  })
}
</code></pre>
<p>技术流程大致就是：</p>
<ul>
<li>dom -&gt; canvas</li>
<li>canvas -&gt; image</li>
<li>image -&gt; pdf</li>
</ul>
<p>似乎一切都将水到渠成了</p>
<h2 data-id="heading-4">困在眼前的难题</h2>
<p>这个技术栈，最核心的就是：必须要用到dom元素渲染</p>
<p>如果你尝试将打印的元素设置样式：</p>
<pre><code class="hljs language-css" lang="css"><span class="hljs-attribute">display</span>: none;
</code></pre>
<p>或</p>
<pre><code class="hljs language-css" lang="css"><span class="hljs-attribute">visibility</span>: hidden;

</code></pre>
<p>或</p>
<pre><code class="hljs language-css" lang="css"><span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;
</code></pre>
<p>执行导出功能都将抛异常或者只能导出一个空白的pdf</p>
<p>这时候有人会问了：为什么要设置dom元素为不可见？</p>
<p>试想一下，你做了一个导出功能，总不能让客户必须先打开页面等html渲染完后，再导出吧？</p>
<p>客户的理想状态是：在列表的操作列里，有个导出按钮，点击就可以导出pdf了</p>
<p>何况还需要实现批量勾选导出的功能，总不能程序控制，导出一个pdf就open一个窗口渲染html吧</p>
<h2 data-id="heading-5">寻找新方法</h2>
<p>此路不通，就只能重新寻找新的方向，不过也没费太多功夫，就找到了另外一个插件<code>html2pdf.js</code>解决了这事</p>
<p>这插件用起来也极其简单</p>
<pre><code class="hljs language-bash" lang="bash">npm install html2pdf.js
</code></pre>
<pre><code class="hljs language-html" lang="html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"generatePDF"</span>&gt;</span>下载PDF<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript">
<span class="hljs-keyword">import</span> html2pdf <span class="hljs-keyword">from</span> <span class="hljs-string">'html2pdf.js'</span>

<span class="hljs-comment">// 使用示例</span>
<span class="hljs-keyword">let</span> element = <span class="hljs-string">`
    &lt;h1&gt;前端人&lt;/h1&gt;
    &lt;p&gt;学好前端，走遍天下都不怕&lt;/p&gt;
    &lt;div&gt;前端强，前端狂，交互特效我称王！
    &lt;p&gt;JS 写得好，需求改不了！&lt;/p&gt;
    &lt;p&gt;React Vue 两手抓，高薪 offer 到你家！&lt;p&gt;
    &lt;p&gt;浏览器里横着走， bug 见我都绕道！&lt;/p
    &lt;p&gt;Chrome 调试一声笑， IE 泪洒旧时光！&lt;/p&gt;
    &lt;span&gt;Git 提交不留情，版本回退我最行！
`</span>;

<span class="hljs-keyword">function</span> <span class="hljs-title function_">generatePDF</span>(<span class="hljs-params"></span>) {
    <span class="hljs-comment">// 配置选项</span>
    <span class="hljs-keyword">const</span> opt = {
      <span class="hljs-attr">margin</span>:       <span class="hljs-number">10</span>,
      <span class="hljs-attr">filename</span>:     <span class="hljs-string">'hello_world.pdf'</span>,
      <span class="hljs-attr">image</span>:        { <span class="hljs-attr">type</span>: <span class="hljs-string">'jpeg'</span>, <span class="hljs-attr">quality</span>: <span class="hljs-number">0.98</span> },
      <span class="hljs-attr">html2canvas</span>:  { <span class="hljs-attr">scale</span>: <span class="hljs-number">2</span> },
      <span class="hljs-attr">jsPDF</span>:        { <span class="hljs-attr">unit</span>: <span class="hljs-string">'mm'</span>, <span class="hljs-attr">format</span>: <span class="hljs-string">'a4'</span>, <span class="hljs-attr">orientation</span>: <span class="hljs-string">'portrait'</span> }
    };
    <span class="hljs-comment">// 生成PDF并导出</span>
    <span class="hljs-title function_">html2pdf</span>().<span class="hljs-title function_">from</span>(element).<span class="hljs-title function_">set</span>(opt).<span class="hljs-title function_">save</span>();
}
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>

</code></pre>
<p>功能正常，似乎一切都完美</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/e75e7378a5d64ea99d092e71268292a9~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgaG93Y29kZQ==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1748831286&amp;x-signature=iSNlm1h33plKYHXUDDiyqncZRUE%3D" alt="image.png" loading="lazy"></p>
<h2 data-id="heading-6">问题没有想的那么简单</h2>
<p>如果我们的<code>html</code>是纯文本元素，这程序跑起来没有任何问题，但我们抓取的信息都源于互联网，<code>html</code>结构怎么可能会这么简单？如果我们的<code>html</code>中包含图片信息，例如：</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-comment">// 使用示例</span>
<span class="hljs-keyword">let</span> element = <span class="hljs-string">`
  &lt;div&gt;
    &lt;img src='http://t13.baidu.com/it/u=2041049195,1001882902&amp;fm=224&amp;app=112&amp;f=JPEG?w=500&amp;h=500' style="width: 300px;" /&gt;
    &lt;p&gt;职业：前端&lt;/p&gt;
    &lt;p&gt;技能：唱、跳、rap&lt;/p&gt;
  &lt;/div&gt;
`</span>;
</code></pre>
<p>此时你会发现，导出来的pdf，图片占位处是个空白块</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/fd8a77a6eaf14e1e9b7538de6946e692~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgaG93Y29kZQ==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1748831286&amp;x-signature=GK%2BMbSxhwIkQXFWorlYxkw2gvk0%3D" alt="image.png" loading="lazy"></p>
<blockquote>
<p>思考一下：类似案例中的图片加载方式，都是get方式的异步请求，而异步请求就会导致图片还没渲染完成，但导出的程序已经执行完成情况（最直接的观察方式就是，把这个元素放到浏览器上渲染，会发现图片也是过一会才慢慢加载完成的）</p>
<p>不过我不确定<code>html2pdf.js</code>这个插件是否会发起图片请求，但不管发不发起，导出的行为明显是在图片渲染前完成的，就导致了这个空白块的存在</p>
</blockquote>
<h2 data-id="heading-7">问题分析完了，那就解决吧</h2>
<p>既然图片异步加载不行，那就使用图片同步加载吧</p>
<p>不是吧，你问我：什么是图片同步加载？我也不晓得，这个词是我自己当下凭感觉造的，如有雷同，纯属巧合了</p>
<p>那我理解的图片同步加载是什么意思呢？简单来说，就是将图片转成<code>Base64</code>，因为这种方式，即使说无网的情况也能正常加载图片，因此我凭感觉断定，这就是图片同步加载</p>
<p>基于这个思路，我写了个demo</p>
<pre><code class="hljs language-html" lang="html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"generatePDF"</span>&gt;</span>下载PDF<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript">
<span class="hljs-keyword">import</span> html2pdf <span class="hljs-keyword">from</span> <span class="hljs-string">'html2pdf.js'</span>

<span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">convertImagesToBase64</span>(<span class="hljs-params">htmlString</span>) {
  <span class="hljs-comment">// 创建一个临时DOM元素来解析HTML</span>
  <span class="hljs-keyword">const</span> tempDiv = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">'div'</span>);
  tempDiv.<span class="hljs-property">innerHTML</span> = htmlString;

  <span class="hljs-comment">// 获取所有图片元素</span>
  <span class="hljs-keyword">const</span> images = tempDiv.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">'img'</span>);

  <span class="hljs-comment">// 遍历每个图片并转换</span>
  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> img <span class="hljs-keyword">of</span> images) {
    <span class="hljs-keyword">try</span> {
      <span class="hljs-keyword">const</span> base64 = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getBase64FromUrl</span>(img.<span class="hljs-property">src</span>);
      img.<span class="hljs-property">src</span> = base64;
    } <span class="hljs-keyword">catch</span> (error) {
      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`无法转换图片 <span class="hljs-subst">${img.src}</span>:`</span>, error);
      <span class="hljs-comment">// 保留原始URL如果转换失败</span>
    }
  }

  <span class="hljs-comment">// 返回转换后的HTML</span>
  <span class="hljs-keyword">return</span> tempDiv.<span class="hljs-property">innerHTML</span>;
}

<span class="hljs-comment">// 图片转base64</span>
<span class="hljs-keyword">function</span> <span class="hljs-title function_">getBase64FromUrl</span>(<span class="hljs-params">url</span>) {
  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {
    <span class="hljs-keyword">const</span> img = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Image</span>();
    img.<span class="hljs-property">crossOrigin</span> = <span class="hljs-string">'Anonymous'</span>; <span class="hljs-comment">// 处理跨域问题</span>

    img.<span class="hljs-property">onload</span> = <span class="hljs-function">() =&gt;</span> {
      <span class="hljs-keyword">const</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">'canvas'</span>);
      canvas.<span class="hljs-property">width</span> = img.<span class="hljs-property">width</span>;
      canvas.<span class="hljs-property">height</span> = img.<span class="hljs-property">height</span>;

      <span class="hljs-keyword">const</span> ctx = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">'2d'</span>);
      ctx.<span class="hljs-title function_">drawImage</span>(img, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);

      <span class="hljs-comment">// 获取Base64数据</span>
      <span class="hljs-keyword">const</span> dataURL = canvas.<span class="hljs-title function_">toDataURL</span>(<span class="hljs-string">'image/png'</span>);
      <span class="hljs-title function_">resolve</span>(dataURL);
    };

    img.<span class="hljs-property">onerror</span> = <span class="hljs-function">() =&gt;</span> {
      <span class="hljs-title function_">reject</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">'图片加载失败'</span>));
    };

    img.<span class="hljs-property">src</span> = url;
  });
}

<span class="hljs-comment">// 使用示例</span>
<span class="hljs-keyword">let</span> element = <span class="hljs-string">`
  &lt;div&gt;
    &lt;img src='http://t13.baidu.com/it/u=2041049195,1001882902&amp;fm=224&amp;app=112&amp;f=JPEG?w=500&amp;h=500' style="width: 300px;" /&gt;
    &lt;p&gt;职业：前端&lt;/p&gt;
    &lt;p&gt;技能：唱、跳、rap&lt;/p&gt;
  &lt;/div&gt;
`</span>;

<span class="hljs-keyword">function</span> <span class="hljs-title function_">generatePDF</span>(<span class="hljs-params"></span>) {
  <span class="hljs-title function_">convertImagesToBase64</span>(element)
  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">convertedHtml</span> =&gt;</span> {
    <span class="hljs-comment">// 配置选项</span>
    <span class="hljs-keyword">const</span> opt = {
      <span class="hljs-attr">margin</span>:       <span class="hljs-number">10</span>,
      <span class="hljs-attr">filename</span>:     <span class="hljs-string">'前端大法好.pdf'</span>,
      <span class="hljs-attr">image</span>:        { <span class="hljs-attr">type</span>: <span class="hljs-string">'jpeg'</span>, <span class="hljs-attr">quality</span>: <span class="hljs-number">0.98</span> },
      <span class="hljs-attr">html2canvas</span>:  { <span class="hljs-attr">scale</span>: <span class="hljs-number">2</span> },
      <span class="hljs-attr">jsPDF</span>:        { <span class="hljs-attr">unit</span>: <span class="hljs-string">'mm'</span>, <span class="hljs-attr">format</span>: <span class="hljs-string">'a4'</span>, <span class="hljs-attr">orientation</span>: <span class="hljs-string">'portrait'</span> }
    };

    <span class="hljs-comment">// 生成PDF并导出</span>
    <span class="hljs-title function_">html2pdf</span>().<span class="hljs-title function_">from</span>(convertedHtml).<span class="hljs-title function_">set</span>(opt).<span class="hljs-title function_">save</span>();
  })
  .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">'转换过程中出错:'</span>, error);
  });
}
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>

</code></pre>
<p>此时就大功告成啦！不过得提一句：图片的URL链接必须是同源或者允许跨越的，否则就会存在图片加载异常的问题</p>
<h2 data-id="heading-8">修复图片过大的问题</h2>
<p>部分图片的宽度会过大，导致图片加载不全的问题，这在预览的情况下也存在</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/a0a0201a409b49fd8480013652220a52~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgaG93Y29kZQ==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1748831286&amp;x-signature=q9boA8xloQ7kKGc61lpwGwrF0JU%3D" alt="image.png" loading="lazy"></p>
<p>因为需要加上样式限定</p>
<pre><code class="hljs language-css" lang="css"><span class="hljs-selector-tag">img</span> {
  <span class="hljs-attribute">max-width</span>: <span class="hljs-number">100%</span>;
  <span class="hljs-attribute">max-height</span>: <span class="hljs-number">100%</span>;
  <span class="hljs-attribute">vertical-align</span>: middle;
  <span class="hljs-attribute">height</span>: auto <span class="hljs-meta">!important</span>;
  <span class="hljs-attribute">width</span>: auto <span class="hljs-meta">!important</span>;
  <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> <span class="hljs-number">0</span>;
}
</code></pre>
<p>这样就正常啦</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/9dee06fec27741a7a5c98a1146fea851~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgaG93Y29kZQ==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1748831286&amp;x-signature=sDxxULvat5PyXm0DOZCrbE2XRdA%3D" alt="image.png" loading="lazy"></p>
<p>故此需要在导出pdf前，给元素添加一个图片的样式限定</p>
<pre><code class="hljs language-js" lang="js">element =<span class="hljs-string">`&lt;style&gt;
img {
  max-width: 100%;
  max-height: 100%;
  vertical-align: middle;
  height: auto !important;
  width: auto !important;
  margin: 10px 0;
}
&lt;/style&gt;`</span> + element;
</code></pre>
<p>完整代码：</p>
<pre><code class="hljs language-html" lang="html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"generatePDF"</span>&gt;</span>下载PDF<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript">
<span class="hljs-keyword">import</span> html2pdf <span class="hljs-keyword">from</span> <span class="hljs-string">'html2pdf.js'</span>
<span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">convertImagesToBase64</span>(<span class="hljs-params">htmlString</span>) {
  <span class="hljs-comment">// 创建一个临时DOM元素来解析HTML</span>
  <span class="hljs-keyword">const</span> tempDiv = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">'div'</span>);
  tempDiv.<span class="hljs-property">innerHTML</span> = htmlString;

  <span class="hljs-comment">// 获取所有图片元素</span>
  <span class="hljs-keyword">const</span> images = tempDiv.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">'img'</span>);

  <span class="hljs-comment">// 遍历每个图片并转换</span>
  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> img <span class="hljs-keyword">of</span> images) {
    <span class="hljs-keyword">try</span> {
      <span class="hljs-keyword">const</span> base64 = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getBase64FromUrl</span>(img.<span class="hljs-property">src</span>);
      img.<span class="hljs-property">src</span> = base64;
    } <span class="hljs-keyword">catch</span> (error) {
      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`无法转换图片 <span class="hljs-subst">${img.src}</span>:`</span>, error);
      <span class="hljs-comment">// 保留原始URL如果转换失败</span>
    }
  }

  <span class="hljs-comment">// 返回转换后的HTML</span>
  <span class="hljs-keyword">return</span> tempDiv.<span class="hljs-property">innerHTML</span>;
}
<span class="hljs-comment">// 图片转base64</span>
<span class="hljs-keyword">function</span> <span class="hljs-title function_">getBase64FromUrl</span>(<span class="hljs-params">url</span>) {
  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {
    <span class="hljs-keyword">const</span> img = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Image</span>();
    img.<span class="hljs-property">crossOrigin</span> = <span class="hljs-string">'Anonymous'</span>; <span class="hljs-comment">// 处理跨域问题</span>

    img.<span class="hljs-property">onload</span> = <span class="hljs-function">() =&gt;</span> {
      <span class="hljs-keyword">const</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">'canvas'</span>);
      canvas.<span class="hljs-property">width</span> = img.<span class="hljs-property">width</span>;
      canvas.<span class="hljs-property">height</span> = img.<span class="hljs-property">height</span>;

      <span class="hljs-keyword">const</span> ctx = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">'2d'</span>);
      ctx.<span class="hljs-title function_">drawImage</span>(img, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);

      <span class="hljs-comment">// 获取Base64数据</span>
      <span class="hljs-keyword">const</span> dataURL = canvas.<span class="hljs-title function_">toDataURL</span>(<span class="hljs-string">'image/png'</span>);
      <span class="hljs-title function_">resolve</span>(dataURL);
    };

    img.<span class="hljs-property">onerror</span> = <span class="hljs-function">() =&gt;</span> {
      <span class="hljs-title function_">reject</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">'图片加载失败'</span>));
    };

    img.<span class="hljs-property">src</span> = url;
  });
}

<span class="hljs-comment">// 使用示例</span>
<span class="hljs-keyword">let</span> element = <span class="hljs-string">`
  &lt;div&gt;
    &lt;img src='http://t13.baidu.com/it/u=2041049195,1001882902&amp;fm=224&amp;app=112&amp;f=JPEG?w=500&amp;h=500' style="width: 300px;" /&gt;
    &lt;p&gt;职业：前端&lt;/p&gt;
    &lt;p&gt;技能：唱、跳、rap&lt;/p&gt;
  &lt;/div&gt;
`</span>;

<span class="hljs-keyword">function</span> <span class="hljs-title function_">generatePDF</span>(<span class="hljs-params"></span>) {
  element =<span class="hljs-string">`&lt;style&gt;
  img {
      max-width: 100%;
      max-height: 100%;
      vertical-align: middle;
      height: auto !important;
      width: auto !important;
      margin: 10px 0;
    }
  &lt;/style&gt;`</span> + element;
  <span class="hljs-title function_">convertImagesToBase64</span>(element)
  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">convertedHtml</span> =&gt;</span> {
    <span class="hljs-comment">// 配置选项</span>
    <span class="hljs-keyword">const</span> opt = {
      <span class="hljs-attr">margin</span>:       <span class="hljs-number">10</span>,
      <span class="hljs-attr">filename</span>:     <span class="hljs-string">'前端大法好.pdf'</span>,
      <span class="hljs-attr">image</span>:        { <span class="hljs-attr">type</span>: <span class="hljs-string">'jpeg'</span>, <span class="hljs-attr">quality</span>: <span class="hljs-number">0.98</span> },
      <span class="hljs-attr">html2canvas</span>:  { <span class="hljs-attr">scale</span>: <span class="hljs-number">2</span> },
      <span class="hljs-attr">jsPDF</span>:        { <span class="hljs-attr">unit</span>: <span class="hljs-string">'mm'</span>, <span class="hljs-attr">format</span>: <span class="hljs-string">'a4'</span>, <span class="hljs-attr">orientation</span>: <span class="hljs-string">'portrait'</span> }
    };

    <span class="hljs-comment">// 生成PDF</span>
    <span class="hljs-title function_">html2pdf</span>().<span class="hljs-title function_">from</span>(convertedHtml).<span class="hljs-title function_">set</span>(opt).<span class="hljs-title function_">save</span>();
  })
  .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">'转换过程中出错:'</span>, error);
  });
}
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>

</code></pre>
<h2 data-id="heading-9">3.31更新</h2>
<h3 data-id="heading-10">前端和后端联合解决方案</h3>
<p>评论区有位热心市民 <a href="https://juejin.cn/user/659362709247992" target="_blank" title="https://juejin.cn/user/659362709247992">一名爱小惠的前端</a>提到：就让后端做，你在前端渲染出来后，让它提供一个接口，你在把 innerHTML 发给它（浏览器自动补全了）</p>
<p>基于这个思路，我尝试了前端补全html，提交到后端，后端则可顺利pdf流</p>
<pre><code class="hljs language-xml" lang="xml">// 使用示例，纯在标签闭合不完整的情况
let element = `
  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">'http://t13.baidu.com/it/u=2041049195,1001882902&amp;fm=224&amp;app=112&amp;f=JPEG?w=500&amp;h=500'</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"width: 300px;"</span> &gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>职业：前端<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>技能：唱、跳、rap&lt;/p
  &lt;/div
`;

function generatePDF() {
  element =`<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">
  <span class="hljs-selector-tag">img</span> {
      <span class="hljs-attribute">max-width</span>: <span class="hljs-number">100%</span>;
      <span class="hljs-attribute">max-height</span>: <span class="hljs-number">100%</span>;
      <span class="hljs-attribute">vertical-align</span>: middle;
      <span class="hljs-attribute">height</span>: auto <span class="hljs-meta">!important</span>;
      <span class="hljs-attribute">width</span>: auto <span class="hljs-meta">!important</span>;
      <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> <span class="hljs-number">0</span>;
    }
  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>` + element;
  const tempDiv = document.createElement('div');
  tempDiv.innerHTML = element;
  // 获取到完整的html结构，提交给后端处理
  console.log(tempDiv.innerHTML);
}
</code></pre>
<h3 data-id="heading-11">后端解决方案</h3>
<p>使用<code>com.itextpdf.html2pdf</code>解决</p>
<pre><code class="hljs language-xml" lang="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.itextpdf<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>html2pdf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>
</code></pre>
<p>闹腾一圈下来，原来后端也有自己的html2pdf库，不过这个库不需要将图片转成<code>base64</code>，但需要设置中文字体，不设置的话中文将解析异常</p>
<h2 data-id="heading-12">后话</h2>
<p>前天提的需求，昨天兜的底，今天写的文章记录</p>
<p>这种问题，理应该后端处理，但后端和我吐槽过他处理起来的困难与问题，寻求前端帮助时，我也会积极配合。可在现实中，我遇过很多后端，死活不愿意配合前端，例如日期格式化、数据id类型bigint过大不字符化返回给前端等等，主打一个本着前端可以做就前端做的原则，说实在：属实下头</p>
<p>前后端本应该就是相互打配合的关系，谁方便就行个方便，没必要僵持不下</p>
<p>今天的分享就到此结束，如果你对技术/行业交流有兴趣，欢迎添加<code>howcoder</code>微信，邀你进群交流</p>
<h2 data-id="heading-13">往期精彩</h2>
<p><a href="https://juejin.cn/post/7467869746236571683" target="_blank" title="https://juejin.cn/post/7467869746236571683">《你不了解的Grid布局》</a></p>
<p><a href="https://juejin.cn/post/7459005223173554213" target="_blank" title="https://juejin.cn/post/7459005223173554213">《就你小子还不会 Grid布局是吧？》</a></p>
<p><a href="https://juejin.cn/post/7452197534352031770" target="_blank" title="https://juejin.cn/post/7452197534352031770">《超硬核：从零到一部署指南》</a></p>
<p><a href="https://juejin.cn/post/7451168270878097434" target="_blank" title="https://juejin.cn/post/7451168270878097434">《私活2年，我赚到了人生的第一桶金》</a></p>
<p><a href="https://juejin.cn/post/7431761042194055183" target="_blank" title="https://juejin.cn/post/7431761042194055183">《接入AI后，开源项目瞬间有趣了😎》</a></p>
<p><a href="https://juejin.cn/post/7380200984058839066" target="_blank" title="https://juejin.cn/post/7380200984058839066">《肝了两个月，我们无偿开源了》</a></p>
<p><a href="https://juejin.cn/post/7336014826336747520" target="_blank" title="https://juejin.cn/post/7336014826336747520">《彻底不NG前端路由》</a></p>
<p><a href="https://juejin.cn/post/7246997498572619831" target="_blank" title="https://juejin.cn/post/7246997498572619831">《vue项目部署自动检测更新》</a></p>
<p><a href="https://juejin.cn/post/7237295525707530295" target="_blank" title="https://juejin.cn/post/7237295525707530295">《一个公告滚动播放功能引发的背后思考》</a></p>
<p><a href="https://juejin.cn/post/7119498429117988872" target="_blank" title="https://juejin.cn/post/7119498429117988872">《前端值得学习的开源socket应用》</a></p></div></div>