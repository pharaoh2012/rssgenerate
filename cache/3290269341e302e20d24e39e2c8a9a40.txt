
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/ACaiGarden/p/18940020" title="发布于 2025-06-21 13:33">
    <span role="heading" aria-level="2">20250620 - Bonding 攻击事件: 项目方不创建的池子由我攻击者来创建</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>背景信息<br>
本次攻击涉及 Bonding 和 LBM 两种代币，用户可以通过 Bonding.buy() 用 USDC 购买 Bonding，当 Bonding 合约中的 USDC 累积超过一定阈值时会触发回购机制将 USDC 兑换成 LBM，随后向 [Bonding, LBM] pool 添加流动性。<br>
造成本次攻击的原因是添加流动性所采用的 pool 并未提前创建（代码逻辑是第一次触发时不存在则创建），攻击者先创建了比例失衡的恶意 [Bonding, LBM] pool。然后通过闪电贷大量的 USDC 来购买 Bonding 触发回购机制，当协议将大量的 LBM 添加到 pool 中后，攻击者将手上的 Bonding 兑换成 USDC 完成获利（Bonding -&gt; LBM -&gt; WETH -&gt; USDC 完成获利）。损失金额 4884 USDC。</p>
<p>攻击交易：<a href="https://app.blocksec.com/explorer/tx/base/0x9d724db325de76b3d88368ed9948acd85e6b67b464eb0aac9f5d2bc3fdebf190" target="_blank" rel="noopener nofollow">https://app.blocksec.com/explorer/tx/base/0x9d724db325de76b3d88368ed9948acd85e6b67b464eb0aac9f5d2bc3fdebf190</a><br>
漏洞合约：<a href="https://basescan.org/address/0xffa1ed9c565a4e635543123b29889e96bcafa184#code" target="_blank" rel="noopener nofollow">https://basescan.org/address/0xffa1ed9c565a4e635543123b29889e96bcafa184#code</a></p>
<p>Trace 分析<br>
<img src="https://img2024.cnblogs.com/blog/1483609/202506/1483609-20250621132544167-454651826.png" alt="image" loading="lazy"></p>
<ol>
<li>
<p>闪电贷获得 100000 USDC</p>
</li>
<li>
<p>攻击者创建了Bonding 的价格极高的 [Bonding, LBM] pool</p>
</li>
<li>
<p>攻击者通过 Bonding.buy() 用 11949 USDC 换取 1194.9 Bonding</p>
</li>
<li>
<p>触发 Bonding 的回购机制</p>
</li>
<li>
<p>用 17100 USDC 换取 332874 LBM</p>
</li>
<li>
<p>将 332874 LBM 和 0 Bonding 作为流动性添加到攻击者创建的 pool 中<br>
<img src="https://img2024.cnblogs.com/blog/1483609/202506/1483609-20250621132813983-793960895.png" alt="image" loading="lazy"></p>
</li>
<li>
<p>攻击者在恶意构造的 pool 中用 0.01 Bonding 换出 332874 LBM，随后按照 Bonding -&gt; LBM -&gt; WETH -&gt; USDC  这个路径获得 16833 USDC</p>
</li>
<li>
<p>归还闪电贷 100000 USDC，获利 4884 USDC。<br>
代码分析<br>
Bonding 和 LBM 组成一个双代币协议，LBM 作为 Bonding 的 feeToken。本次漏洞产生的原因主要在 Bonding 代币中。攻击者通过购入大量的 Bonding 代币触发回购机制。<br>
<a href="https://vscode.blockscan.com/8453/0x8D2Eb55F429aC689134ee547C74720BC41219F39" target="_blank" rel="noopener nofollow">https://vscode.blockscan.com/8453/0x8D2Eb55F429aC689134ee547C74720BC41219F39</a><br>
<img src="https://img2024.cnblogs.com/blog/1483609/202506/1483609-20250621132824736-1095320132.png" alt="image" loading="lazy"></p>
</li>
</ol>
<p>在 <code>_finalizeSale()</code> 函数中，首先将 USDC 换成 LBM<br>
<img src="https://img2024.cnblogs.com/blog/1483609/202506/1483609-20250621132834838-1234806253.png" alt="image" loading="lazy"></p>
<p>随后检查需要添加流动性的 [Bonding, LBM] pool ，通过注释可以看出，项目方是故意先不部署池子的，等到实际触发回购机制的时候再创建，这就给了攻击者可乘之机。<br>
<img src="https://img2024.cnblogs.com/blog/1483609/202506/1483609-20250621132843104-1104791570.png" alt="image" loading="lazy"></p>
<p>由于攻击者已经创建好了 [Bonding, LBM] pool ，所以这里 pool 地址为非零地址。最终使得协议按照攻击者设置的 LBM 价格极高的比例向 pool 添加流动性，攻击者可以用极少的 Bonding 套取大量的 LBM，转而出售成 USDC 完成获利。<br>
<img src="https://img2024.cnblogs.com/blog/1483609/202506/1483609-20250621132851234-923960938.png" alt="image" loading="lazy"></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-06-21 13:34">2025-06-21 13:33</span>&nbsp;
<a href="https://www.cnblogs.com/ACaiGarden">ACai_sec</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18940020);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18940020', targetLink: 'https://www.cnblogs.com/ACaiGarden/p/18940020', title: '20250620 - Bonding 攻击事件: 项目方不创建的池子由我攻击者来创建' })">举报</a>
</div>
        