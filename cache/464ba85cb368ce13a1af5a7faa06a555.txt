<!----> <meta itemprop="headline" content="前端啊，拿Lottie炫个动画吧"> <meta itemprop="keywords" content="前端,SVG,Canvas"> <meta itemprop="datePublished" content="2024-10-28T06:15:03.000Z"> <meta itemprop="image" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-128.png~tplv-t2oaga2asx-image.image"> <div itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><meta itemprop="name" content="德育处主任"> <meta itemprop="url" content="https://juejin.cn/user/2673620576140030"></div> <div itemprop="publisher" itemscope="itemscope" itemtype="http://schema.org/Organization"><meta itemprop="name" content="掘金"> <div itemprop="logo" itemscope="itemscope" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/icon/icon-white-180.png~tplv-t2oaga2asx-image.image"> <meta itemprop="width" content="180"> <meta itemprop="height" content="180"></div></div> <h1 class="article-title" data-v-7cdd11fb="">
            前端啊，拿Lottie炫个动画吧
            <!----> <!----></h1> <div class="author-info-block block-hidden" data-v-7cdd11fb=""><div class="author-info-box" data-v-7cdd11fb=""><div class="author-name" data-v-7cdd11fb=""><a href="/user/2673620576140030/posts" target="_blank" rel="" class="jj-link username username ellipsis" data-v-65b50b51="" data-v-1800aadb="" data-v-7cdd11fb=""><span class="name" style="max-width:160px;" data-v-65b50b51="" data-v-1800aadb="">
    德育处主任
  </span> <!----> <!----> <!----> </a></div> <div class="meta-box" data-v-7cdd11fb=""><time datetime="2024-10-28T06:15:03.000Z" title="Mon Oct 28 2024 06:15:03 GMT+0000 (Coordinated Universal Time)" class="time" data-v-7cdd11fb="">
                    2024-10-28
                  </time> <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" class="read-icon" data-v-7cdd11fb=""><path d="M7.90078 2.80078C4.49278 2.80078 1.74745 6.11672 0.800781 7.77469C1.74745 9.58339 4.49278 13.2008 7.90078 13.2008C11.3088 13.2008 14.0541 9.58339 15.0008 7.77469C14.0541 6.11672 11.3088 2.80078 7.90078 2.80078Z" stroke="currentColor" data-v-7cdd11fb=""></path><circle cx="7.89922" cy="8.00078" r="2.2" stroke="currentColor" data-v-7cdd11fb=""></circle></svg> <span class="views-count" data-v-7cdd11fb="">
                    10,026
                  </span> <span class="read-time" data-v-7cdd11fb=""><svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" data-v-7cdd11fb=""><rect width="16" height="16" fill="none" data-v-7cdd11fb=""></rect><circle cx="8" cy="8" r="5.65625" stroke="#8A919F" data-v-7cdd11fb=""></circle><path d="M7.69141 5.18652V8.30924H10.8141" stroke="#8A919F" stroke-linecap="round" stroke-linejoin="round" data-v-7cdd11fb=""></path></svg>
                    阅读11分钟
                  </span> <!----></div></div> <div style="flex:1;" data-v-7cdd11fb=""></div> <!----> <!----></div> <!----> <!----> <!----> <div id="article-root" itemprop="articleBody" class="main" data-v-7cdd11fb=""><div class="article-viewer markdown-body result"><p><strong>点赞 + 关注 + 收藏 = 学会了</strong></p>
<h2 data-id="heading-0">本文简介</h2>
<p>有时候在网页上看到一些很炫酷的小动画，比如loading特效，还能控制这个动画的状态，真的觉得很神奇。</p>
<p>大部分做后端的不想碰前端，做前端的不想碰动画特效。</p>
<p>其实啊，很多时候不需要自己写炫酷的特效，会调用第三方库已经挺厉害的了。比如今天要介绍的 Lottie。</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/c7a2421175fd438c94e820eb268e715b~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5b636IKy5aSE5Li75Lu7:q75.awebp?rk3s=f64ab15b&amp;x-expires=1735538310&amp;x-signature=pzzOcXK9v8dytv%2FTmz%2BcnltdxQ4%3D" alt="01.gif" loading="lazy"></p>
<h2 data-id="heading-1">Lottie 是什么？</h2>
<blockquote>
<p>🔗Lottie官网 <a href="https://link.juejin.cn?target=https%3A%2F%2Fairbnb.io%2Flottie%2F" target="_blank" title="https://airbnb.io/lottie/" ref="nofollow noopener noreferrer">airbnb.io/lottie/</a></p>
</blockquote>
<p>Lottie 是一个适用于 Android、iOS、Web 和 Windows 的库，它可以解析使用 <a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fairbnb%2Flottie-web" target="_blank" title="https://github.com/airbnb/lottie-web" ref="nofollow noopener noreferrer">Bodymovin</a> 导出为 JSON 的 <a href="https://link.juejin.cn?target=http%3A%2F%2Fwww.adobe.com%2Fproducts%2Faftereffects.html" target="_blank" title="http://www.adobe.com/products/aftereffects.html" ref="nofollow noopener noreferrer">Adobe After Effects</a> 动画，并在移动设备和 Web 上本地渲染它们！</p>
<p>After Effects 是什么？Bodymovin 又是什么？</p>
<p>别怕，这些我也不会。作为前端，我会拿别人做好的东西来用😁</p>
<p>简单来说，Lottie 是 Airbnb 开发的动画库，特别适合前端开发人员。它可以轻松实现复杂的动画效果，不需要手写大量代码，只需引入现成的 JSON 文件即可。</p>
<p>今天不讲iOS，不讲Android，只讲如何在前端使用 Lottie。</p>
<h2 data-id="heading-2">安装 Lottie Web</h2>
<p>要在前端项目中使用 Lottie，要么用 CDN 的方式引入，要么通过 NPM 下载。</p>
<h3 data-id="heading-3">CDN</h3>
<p>在这个网址可以找到 Lottie 的各个版本的JS文件： <a href="https://link.juejin.cn?target=https%3A%2F%2Fcdnjs.com%2Flibraries%2Fbodymovin" target="_blank" title="https://cdnjs.com/libraries/bodymovin" ref="nofollow noopener noreferrer">cdnjs.com/libraries/b…</a></p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/fa71ed7a2ece4247b4c7a80e6ace33a4~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5b636IKy5aSE5Li75Lu7:q75.awebp?rk3s=f64ab15b&amp;x-expires=1735538310&amp;x-signature=Rowu4HQceNh87%2B6N6I7G4TEMKY8%3D" alt="02.png" loading="lazy"></p>
<p>我使用的是 5.12.2 这个版本</p>
<pre><code class="hljs language-html" lang="html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">
    <span class="hljs-selector-id">#lottie</span> {
      <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;
      <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;
    }
  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"lottie"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>

  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdnjs.cloudflare.com/ajax/libs/bodymovin/5.12.2/lottie.min.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">
    <span class="hljs-keyword">var</span> animation = lottie.<span class="hljs-title function_">loadAnimation</span>({
      <span class="hljs-attr">container</span>: <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">'lottie'</span>), <span class="hljs-comment">// 渲染动画的容器</span>
      <span class="hljs-attr">renderer</span>: <span class="hljs-string">'svg'</span>, <span class="hljs-comment">// 渲染方式</span>
      <span class="hljs-attr">loop</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 是否循环</span>
      <span class="hljs-attr">autoplay</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 是否自动播放</span>
      <span class="hljs-attr">path</span>: <span class="hljs-string">'./Animation_1.json'</span> <span class="hljs-comment">// 动画 JSON 文件的路径</span>
    });
  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span>
</code></pre>
<p><code>Animation_1.json</code> 是我下载的一个动画文件，这个文件我放在同级目录里。这个动画文件在哪可以下载我接下来会介绍。这里先了解一下 CDN 的方式怎么引入 Lottie 即可。</p>
<h3 data-id="heading-4">NPM</h3>
<p>用下面这个命令将 Lottie 下载到你的项目里。</p>
<pre><code class="hljs">npm install lottie-web
</code></pre>
<h2 data-id="heading-5">动画资源下载</h2>
<p>前面介绍到，动画是用 AE 做好，然后用 Bodymovin 插件将动画转换成一个 JSON 文件，前端就可以使用 lottie-web 将这个 JSON 文件的内容转换成图像渲染到浏览器页面上。</p>
<p>如果想要现成的动画资源可以在这些地方找找</p>
<ul>
<li><strong>lottiefiles</strong>：<a href="https://link.juejin.cn?target=https%3A%2F%2Flottiefiles.com%2F" target="_blank" title="https://lottiefiles.com/" ref="nofollow noopener noreferrer">lottiefiles.com/</a></li>
<li><strong>iconfont的lottie模块</strong>：<a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.iconfont.cn%2Flotties%2Findex%3Fspm%3Da313x.activity_lists.i3.11.50913a81XAlei7" target="_blank" title="https://www.iconfont.cn/lotties/index?spm=a313x.activity_lists.i3.11.50913a81XAlei7" ref="nofollow noopener noreferrer">www.iconfont.cn/lotties/ind…</a></li>
<li><strong>Creattie</strong>：<a href="https://link.juejin.cn?target=https%3A%2F%2Fcreattie.com%2F" target="_blank" title="https://creattie.com/" ref="nofollow noopener noreferrer">creattie.com/</a></li>
<li><strong>Lottielab（自己编辑、下载）</strong>：<a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.lottielab.com%2F" target="_blank" title="https://www.lottielab.com/" ref="nofollow noopener noreferrer">www.lottielab.com/</a></li>
</ul>
<p>我这里也给大家准备了一个动画文件，大家可以拿它来练手。</p>
<ul>
<li>【百度网盘】链接: <a href="https://link.juejin.cn?target=https%3A%2F%2Fpan.baidu.com%2Fs%2F1Qnp3BAAT7r7ja7_gzYcXSw" target="_blank" title="https://pan.baidu.com/s/1Qnp3BAAT7r7ja7_gzYcXSw" ref="nofollow noopener noreferrer">pan.baidu.com/s/1Qnp3BAAT…</a> 提取码: d7gt</li>
<li>【阿里云盘】链接：<a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.alipan.com%2Fs%2FsfMVak2XhBf" target="_blank" title="https://www.alipan.com/s/sfMVak2XhBf" ref="nofollow noopener noreferrer">www.alipan.com/s/sfMVak2Xh…</a> 提取码：35kw</li>
</ul>
<h2 data-id="heading-6">实现第一个 Lottie 动画</h2>
<p>我通过 <code>React</code> 脚手架创建了一个 <code>React</code> 项目来举例说明如何使用 Lottie，在 <code>Vue</code> 里的用法也是一样的。</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/13cd4129f0b84e36b75bc4e8bc69b9cb~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5b636IKy5aSE5Li75Lu7:q75.awebp?rk3s=f64ab15b&amp;x-expires=1735538310&amp;x-signature=FrWqB6rIHhr9hIwwYjwD9D%2B41aE%3D" alt="03.gif" loading="lazy"></p>
<pre><code class="hljs language-react" lang="react">import React, { useEffect, useRef } from 'react';
import lottie from 'lottie-web';
import animationData from './assets/animations/Animation.json';

function App() {
  const containerRef = useRef(null);

  useEffect(() =&gt; {
    const anim = lottie.loadAnimation({
      container: containerRef.current,
      renderer: 'svg',
      loop: true,
      autoplay: true,
      animationData: animationData
    });
  }, []);

  return &lt;div ref={containerRef} style={{width: "300px", height: "300px"}}&gt;&lt;/div&gt;;
}

export default App;

</code></pre>
<p>在 HTML 文件中，创建一个容器，用于放置 Lottie 动画。在这个例子中我创建了一个宽和高都是 <code>300px</code> 的 <code>div</code> 元素。</p>
<p>然后引入 <code>lottie-web</code> 以及放在前端项目里的 <code>Animation.json</code> 动画文件。</p>
<p>最后调用 <code>lottie.loadAnimation()</code> 来启动动画。它将一个对象作为唯一参数。</p>
<ul>
<li><code>container</code>：动画容器，这个例子通过 <code>React</code> 提供的语法获取到 <code>DOM</code> 元素。</li>
<li><code>renderer</code>：渲染方式，可选 <code>svg</code>、<code>canvas</code> 和 <code>html</code>。</li>
<li><code>loop</code>：是否循环播放。</li>
<li><code>autoplay</code>：是否自动播放。</li>
<li><code>animationData</code>：本地的动画数据的对象。</li>
</ul>
<p>这里需要注意，<code>animationData</code> 接收的动画对象是存放在前端项目的 <code>JSON</code> 文件，如果你的动画文件是存在别的服务器，需要通过一个 <code>URL</code> 引入的话就不能用 <code>animationData</code> 来接收了，而是要改成 <code>path</code>。</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-keyword">const</span> anim = lottie.<span class="hljs-title function_">loadAnimation</span>({
      <span class="hljs-attr">container</span>: containerRef.<span class="hljs-property">current</span>,
      <span class="hljs-attr">renderer</span>: <span class="hljs-string">'svg'</span>,
      <span class="hljs-attr">loop</span>: <span class="hljs-literal">true</span>,
      <span class="hljs-attr">autoplay</span>: <span class="hljs-literal">true</span>,
      <span class="hljs-attr">path</span>: <span class="hljs-string">'https://lottie.host/68bd36a3-b21d-4909-9b61-9be6b0947943/gInO8owFG1.json'</span>
    });
</code></pre>
<h2 data-id="heading-7">Lottie 常用功能</h2>
<h3 data-id="heading-8">播放、暂停、停止</h3>
<p>控制动画的播放、暂停、停止是很常用的功能。</p>
<ul>
<li><strong>播放</strong>：使用 <code>play()</code> 方法。顾名思义就是让动画动起来。</li>
<li><strong>暂停</strong>：使用 <code>pause()</code>方法。暂停可以让动画在当前帧停下来。可以这么理解，你在看视频一个10秒的短视频，播放到第7秒的时候你按了“暂停”，画面就停在第7秒的地方了。</li>
<li><strong>停止</strong>：使用 <code>stop()</code> 方法。停止和暂停都是让动画停下来，而停止会让动画返回第1帧画面的地方停下来。</li>
</ul>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/706c739af27d401aafa00e399cf7df43~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5b636IKy5aSE5Li75Lu7:q75.awebp?rk3s=f64ab15b&amp;x-expires=1735538310&amp;x-signature=XfGShNHS4PuZKMxzaTqkk8i5EOg%3D" alt="04.gif" loading="lazy"></p>
<pre><code class="hljs language-react" lang="react">import lottie from 'lottie-web';
import React, { useEffect, useRef } from 'react';
import animationData from './assets/animations/Animation.json';

function App() {
  const containerRef = useRef(null);

  let anim = null

  useEffect(() =&gt; {

    anim = lottie.loadAnimation({
      container: containerRef.current,
      renderer: 'svg',
      loop: true,
      autoplay: true,
      animationData: animationData,
    });
  }, []);

	// 播放动画
  function play() {
    anim.play()
  }

  // 暂停动画
  function pause() {
    anim.pause()
  }

  // 停止动画
  function stop() {
    anim.stop()
  }

  return &lt;&gt;
    &lt;div ref={containerRef} style={{width: "300px", height: "300px"}}&gt;&lt;/div&gt;
    &lt;button onClick={play}&gt;播放&lt;/button&gt;
    &lt;button onClick={pause}&gt;暂停&lt;/button&gt;
    &lt;button onClick={stop}&gt;停止&lt;/button&gt;
  &lt;/&gt;;
}

export default App;
</code></pre>
<p>代码放这，建议自己运行起来体验一下。</p>
<h3 data-id="heading-9">设置动画播放速度</h3>
<p>使用 <code>setSpeed()</code> 方法可以设置动画的播放速度，传入一个数字即可。默认的播放速度是1。</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/428ae94754d744eeaeb7c424af4d11a1~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5b636IKy5aSE5Li75Lu7:q75.awebp?rk3s=f64ab15b&amp;x-expires=1735538310&amp;x-signature=CE32O6DkamcAfqFklcjkRxuyzgo%3D" alt="05.gif" loading="lazy"></p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-comment">// 省略部分代码</span>

<span class="hljs-comment">// 2倍速度播放</span>
anim.<span class="hljs-title function_">setSpeed</span>(<span class="hljs-number">2</span>)
</code></pre>
<p>这个参数支持正数（包括非整数）、0、负数。</p>
<ul>
<li>大于1的正数：比默认速度快</li>
<li>大于0小于1：比默认速度慢</li>
<li>0：画面停止在第一帧不动了</li>
<li>小于0大于-1：动画倒放，而且速度比默认值慢</li>
<li>-1：动画倒放，速度和默认值一样</li>
<li>小于-1：动画倒放，速度比默认值快</li>
</ul>
<h3 data-id="heading-10">设置动画播放方向</h3>
<p>这里说的播放方向指的是「正着放」还是「倒着放」。前面用 <code>setSpeed()</code> 方法可以做到这点。但还有一个叫 <code>setDirection()</code> 的方法也能做到。</p>
<p><code>setDirection()</code> 接收一个数字参数，这个参数大于等于0时是正着播放，负数时是倒着播放。通常情况下，想倒着播放会传入 -1。</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/892b23fee0e64c6b8b328ece1556b855~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5b636IKy5aSE5Li75Lu7:q75.awebp?rk3s=f64ab15b&amp;x-expires=1735538310&amp;x-signature=1zuGQzfGX4Rnlqs72p%2Fd0JzFL%2Fc%3D" alt="06.gif" loading="lazy"></p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-comment">// 省略部分代码</span>

anim.<span class="hljs-title function_">setDirection</span>(-<span class="hljs-number">1</span>)
</code></pre>
<p>看，面是吐出来的。</p>
<h3 data-id="heading-11">设置动画进度</h3>
<p>通过 <code>goToAndStop()</code> 方法可以控制动画跳转到指定帧或时间并停止。</p>
<p><code>goToAndStop(value, isFrame)</code> 接收2个参数。</p>
<ul>
<li><code>value</code>：数值，表示要跳转到的帧数或时间点。</li>
<li><code>isFrame</code>：布尔值，默认为 <code>false</code>。如果设置为 <code>true</code>，则 <code>value</code> 参数表示帧数；如果设置为 <code>false</code>，则 <code>value</code> 参数表示时间（以毫秒为单位）。</li>
</ul>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/a659692eb07a4d35b26a5b600d20bb66~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5b636IKy5aSE5Li75Lu7:q75.awebp?rk3s=f64ab15b&amp;x-expires=1735538310&amp;x-signature=37XQDIU9UifNU5CuWuWF%2FQ9byyk%3D" alt="07.png" loading="lazy"></p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">goToAndStop</span>(<span class="hljs-params"></span>) {
  anim.<span class="hljs-title function_">goToAndStop</span>(<span class="hljs-number">1000</span>, <span class="hljs-literal">false</span>)
}

<span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">{containerRef}</span> <span class="hljs-attr">style</span>=<span class="hljs-string">{{width:</span> "<span class="hljs-attr">300px</span>", <span class="hljs-attr">height:</span> "<span class="hljs-attr">300px</span>"}}&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{goToAndStop}</span>&gt;</span>跳转到1秒<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
<span class="hljs-tag">&lt;/&gt;</span></span>;
</code></pre>
<p>如果 <code>goToAndStop</code> 第二个参数为 <code>true</code> 则表示要跳转到指定帧数，这个值不能超过动画的总帧数。</p>
<h3 data-id="heading-12">销毁动画实例</h3>
<p>有些场景在某个时刻需要将动画元素删除掉，比如在数据加载时需要显示 loading，数据加载成功或者失败后需要隐藏 loading，此时可以用 <code>destroy</code> 将 Lottie 动画实例销毁掉。</p>
<pre><code class="hljs language-javascript" lang="javascript"><span class="hljs-comment">// 省略部分代码</span>

anim.<span class="hljs-title function_">destroy</span>()
</code></pre>
<h3 data-id="heading-13">动画监听事件</h3>
<p>动画有很多个状态，比如动画数据加载完成/失败、动画播放结束、循环下一次播放、进入新的一帧。Lottie 为我们提供了几个常用的监听方法。</p>
<p>而要监听这些事件，需要在 <code>lottie</code> 实例上用 <code>addEventListener</code> 方法绑定各个事件。</p>
<h4 data-id="heading-14">动画数据加载情况</h4>
<p>监听动画数据（JSON文件）加载成功或者失败，可以用这两个方法。</p>
<ul>
<li><code>data_ready</code>：数据加载成功后执行。</li>
<li><code>data_failed</code>：数据加载失败后执行。</li>
</ul>
<p>需要注意，这两个方法只适用 <code>path</code> 的方式加载数据时触发。<code>animationData</code> 加载的是本地数据，并不会触发这两个方法。</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-comment">// 省略部分代码</span>

<span class="hljs-keyword">let</span> anim = <span class="hljs-literal">null</span>;

<span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> {
  anim = lottie.<span class="hljs-title function_">loadAnimation</span>({
    <span class="hljs-attr">container</span>: containerRef.<span class="hljs-property">current</span>,
    <span class="hljs-attr">renderer</span>: <span class="hljs-string">'svg'</span>,
    <span class="hljs-attr">loop</span>: <span class="hljs-literal">true</span>,
    <span class="hljs-attr">autoplay</span>: <span class="hljs-literal">true</span>,
    <span class="hljs-attr">path</span>: <span class="hljs-string">'https://lottie.host/68bd36a3-b21d-4909-9b61-9be6b0947943/gInO8owFG1.json'</span>
  });

  anim.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">'data_ready'</span>, <span class="hljs-function">() =&gt;</span> {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">'数据加载完成'</span>);
  });

  anim.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">'data_failed'</span>, <span class="hljs-function">() =&gt;</span> {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">'数据加载失败'</span>);
  })
}, []);
</code></pre>
<h4 data-id="heading-15">初始配置完成后</h4>
<p>在数据加载前，还可以通过 <code>config_ready</code> 监听初始化配置的完成情况。</p>
<p>要让 <code>config_ready</code> 生效，同样需要通过 <code>path</code> 的方式加载数据。</p>
<p><code>config_ready</code> 的执行顺序排在 <code>data_ready</code> 之前。</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-comment">// 省略部分代码</span>

<span class="hljs-keyword">let</span> anim = <span class="hljs-literal">null</span>;

<span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> {
  anim = lottie.<span class="hljs-title function_">loadAnimation</span>({
    <span class="hljs-attr">container</span>: containerRef.<span class="hljs-property">current</span>,
    <span class="hljs-attr">renderer</span>: <span class="hljs-string">'svg'</span>,
    <span class="hljs-attr">loop</span>: <span class="hljs-literal">true</span>,
    <span class="hljs-attr">autoplay</span>: <span class="hljs-literal">true</span>,
    <span class="hljs-attr">path</span>: <span class="hljs-string">'https://lottie.host/68bd36a3-b21d-4909-9b61-9be6b0947943/gInO8owFG1.json'</span>
  });

  anim.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">'data_ready'</span>, <span class="hljs-function">() =&gt;</span> {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">'数据加载完成'</span>);
  });
  
  anim.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">'config_ready'</span>, <span class="hljs-function">() =&gt;</span> {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">'初始化成功'</span>);
  });
}, []);
</code></pre>
<h4 data-id="heading-16">动画播放结束</h4>
<p>当动画播放结束时，会触发 <code>complete</code> 事件。</p>
<p>如果 <code>loop</code> 为 <code>true</code> 的话时不会触发 <code>complete</code> 的，因为一直循环的话动画是没有结束的那天。</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-comment">// 省略部分代码</span>

<span class="hljs-keyword">let</span> anim = <span class="hljs-literal">null</span>;

<span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> {

  anim = lottie.<span class="hljs-title function_">loadAnimation</span>({
    <span class="hljs-attr">container</span>: containerRef.<span class="hljs-property">current</span>,
    <span class="hljs-attr">renderer</span>: <span class="hljs-string">'svg'</span>,
    <span class="hljs-attr">loop</span>: <span class="hljs-literal">false</span>,
    <span class="hljs-attr">autoplay</span>: <span class="hljs-literal">true</span>,
    <span class="hljs-attr">animationData</span>: animationData,
  });

  anim.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">'complete'</span>, <span class="hljs-function">() =&gt;</span> {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">'动画播完了'</span>);
  });
}, []);
</code></pre>
<h4 data-id="heading-17">动画循环播放结束</h4>
<p>当 <code>loop</code> 为 <code>true</code> 时，每循环播放完一次就会触发 <code>loopComplete</code> 事件。</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-comment">// 省略部分代码</span>

<span class="hljs-keyword">let</span> anim = <span class="hljs-literal">null</span>;

<span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> {

  anim = lottie.<span class="hljs-title function_">loadAnimation</span>({
    <span class="hljs-attr">container</span>: containerRef.<span class="hljs-property">current</span>,
    <span class="hljs-attr">renderer</span>: <span class="hljs-string">'svg'</span>,
    <span class="hljs-attr">loop</span>: <span class="hljs-literal">true</span>,
    <span class="hljs-attr">autoplay</span>: <span class="hljs-literal">true</span>,
    <span class="hljs-attr">animationData</span>: animationData,
  });

  anim.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">'loopComplete'</span>, <span class="hljs-function">() =&gt;</span> {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">'循环结束，准备进入下一次循环'</span>);
  });
}, []);
</code></pre>
<p>当你通过 <code>pause()</code> 暂停了动画，过一阵用 <code>play()</code> 继续播放，也会等这次动画完整播放完才会触发 <code>loopComplete</code>。</p>
<h4 data-id="heading-18">进入新的一帧</h4>
<p>一个动画由很多个画面组成，每个画面都属于1帧。动画每进入一帧时都会触发 <code>enterFrame</code> 事件。</p>
<pre><code class="hljs language-js" lang="js"><span class="hljs-comment">// 省略部分代码</span>

<span class="hljs-keyword">let</span> anim = <span class="hljs-literal">null</span>;

<span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> {

  anim = lottie.<span class="hljs-title function_">loadAnimation</span>({
    <span class="hljs-attr">container</span>: containerRef.<span class="hljs-property">current</span>,
    <span class="hljs-attr">renderer</span>: <span class="hljs-string">'svg'</span>,
    <span class="hljs-attr">loop</span>: <span class="hljs-literal">true</span>,
    <span class="hljs-attr">autoplay</span>: <span class="hljs-literal">true</span>,
    <span class="hljs-attr">animationData</span>: animationData,
    <span class="hljs-comment">// path: 'https://lottie.host/68bd36a3-b21d-4909-9b61-9be6b0947943/gInO8owFG1.json'</span>
  });

  anim.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">'enterFrame'</span>, <span class="hljs-function">() =&gt;</span> {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">'进入新帧'</span>);
  });
}, []);
</code></pre>
<h2 data-id="heading-19">自己手写一个动画JSON？</h2>
<p>手写 Lottie 的 JSON 动画文件相对复杂，因为需要对 Lottie 的 JSON 结构有较深入的理解。Lottie 的 JSON 文件基于 Bodymovin 插件输出的格式，主要包含静态资源、图层、形状以及帧动画信息。</p>
<p>由于相对复杂，所以不建议真的自己手写，这会显得你很傻。</p>
<p>Lottie JSON 文件由多个部分组成，主要包括：</p>
<ol>
<li><strong><code>assets</code></strong>：动画中使用的资源（图片等）。</li>
<li><strong><code>layers</code></strong>：动画中的每一层（类似于 Photoshop 图层）。</li>
<li><strong><code>shapes</code></strong>：定义图形、路径等基本元素及其动画。</li>
<li><strong><code>animations</code></strong>：定义每一帧的动画数据，包括位置、缩放、透明度等。</li>
</ol>
<p>太复杂的元素我确实手写不出来，只能写一个简单的圆形从左向右移动演示一下。</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/5c25be84d57e4cd4b5c34ad289237ff0~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5b636IKy5aSE5Li75Lu7:q75.awebp?rk3s=f64ab15b&amp;x-expires=1735538310&amp;x-signature=x%2B3UpyTz6hioyEU1cWu38KGshDY%3D" alt="08.gif" loading="lazy"></p>
<pre><code class="hljs language-json" lang="json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">"v"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"5.6.10"</span><span class="hljs-punctuation">,</span>           <span class="hljs-comment">// Lottie 版本</span>
  <span class="hljs-attr">"fr"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">30</span><span class="hljs-punctuation">,</span>                <span class="hljs-comment">// 帧率 (Frames per second)</span>
  <span class="hljs-attr">"ip"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>                 <span class="hljs-comment">// 动画开始帧 (In Point)</span>
  <span class="hljs-attr">"op"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">60</span><span class="hljs-punctuation">,</span>                <span class="hljs-comment">// 动画结束帧 (Out Point)</span>
  <span class="hljs-attr">"w"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">500</span><span class="hljs-punctuation">,</span>                <span class="hljs-comment">// 画布宽度</span>
  <span class="hljs-attr">"h"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">500</span><span class="hljs-punctuation">,</span>                <span class="hljs-comment">// 画布高度</span>
  <span class="hljs-attr">"nm"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"circle animation"</span><span class="hljs-punctuation">,</span><span class="hljs-comment">// 动画名称</span>
  <span class="hljs-attr">"ddd"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>                <span class="hljs-comment">// 是否是 3D 动画</span>
  <span class="hljs-attr">"assets"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>            <span class="hljs-comment">// 静态资源（如图片等）</span>
  <span class="hljs-attr">"layers"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>              <span class="hljs-comment">// 动画的图层</span>
    <span class="hljs-punctuation">{</span>
      <span class="hljs-attr">"ddd"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>            <span class="hljs-comment">// 图层是否是 3D</span>
      <span class="hljs-attr">"ind"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span>            <span class="hljs-comment">// 图层索引</span>
      <span class="hljs-attr">"ty"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span>             <span class="hljs-comment">// 图层类型，4 代表形状图层</span>
      <span class="hljs-attr">"nm"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"circle"</span><span class="hljs-punctuation">,</span>      <span class="hljs-comment">// 图层名称</span>
      <span class="hljs-attr">"sr"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span>             <span class="hljs-comment">// 图层的播放速度</span>
      <span class="hljs-attr">"ks"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>              <span class="hljs-comment">// 图层的关键帧属性（动画数据）</span>
        <span class="hljs-attr">"o"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>             <span class="hljs-comment">// 不透明度动画</span>
          <span class="hljs-attr">"a"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>          <span class="hljs-comment">// 不透明度动画为 0，表示不设置动画</span>
          <span class="hljs-attr">"k"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">100</span>         <span class="hljs-comment">// 不透明度固定为 100%</span>
        <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
        <span class="hljs-attr">"r"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>             <span class="hljs-comment">// 旋转动画</span>
          <span class="hljs-attr">"a"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>          <span class="hljs-comment">// 不设置动画</span>
          <span class="hljs-attr">"k"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span>           <span class="hljs-comment">// 旋转角度为 0</span>
        <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
        <span class="hljs-attr">"p"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>             <span class="hljs-comment">// 位置动画 (Position)</span>
          <span class="hljs-attr">"a"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span>          <span class="hljs-comment">// a 为 1 表示位置有动画</span>
          <span class="hljs-attr">"k"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>
            <span class="hljs-punctuation">{</span>
              <span class="hljs-attr">"i"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span> <span class="hljs-attr">"x"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0.667</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">"y"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span> <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>  <span class="hljs-comment">// 起始位置插值</span>
              <span class="hljs-attr">"o"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span> <span class="hljs-attr">"x"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0.333</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">"y"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span> <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>  <span class="hljs-comment">// 终止位置插值</span>
              <span class="hljs-attr">"n"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"0p667_1_0p333_0"</span><span class="hljs-punctuation">,</span>       <span class="hljs-comment">// 插值模式名称</span>
              <span class="hljs-attr">"t"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>                       <span class="hljs-comment">// 起始帧</span>
              <span class="hljs-attr">"s"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-number">50</span><span class="hljs-punctuation">,</span> <span class="hljs-number">250</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>            <span class="hljs-comment">// 起始位置 (x: 50, y: 250)</span>
              <span class="hljs-attr">"e"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-number">450</span><span class="hljs-punctuation">,</span> <span class="hljs-number">250</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>           <span class="hljs-comment">// 结束位置 (x: 450, y: 250)</span>
              <span class="hljs-attr">"to"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-number">66.66667</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>       <span class="hljs-comment">// 起始插值控制点</span>
              <span class="hljs-attr">"ti"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-number">-66.66667</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">]</span>       <span class="hljs-comment">// 终止插值控制点</span>
            <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
            <span class="hljs-punctuation">{</span> <span class="hljs-attr">"t"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">60</span> <span class="hljs-punctuation">}</span>                     <span class="hljs-comment">// 在 60 帧时结束动画</span>
          <span class="hljs-punctuation">]</span>
        <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
        <span class="hljs-attr">"a"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>             <span class="hljs-comment">// 锚点动画（用于旋转或缩放中心）</span>
          <span class="hljs-attr">"a"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>
          <span class="hljs-attr">"k"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">]</span>   <span class="hljs-comment">// 锚点固定在 (0, 0)</span>
        <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
        <span class="hljs-attr">"s"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>             <span class="hljs-comment">// 缩放动画 (Scale)</span>
          <span class="hljs-attr">"a"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>
          <span class="hljs-attr">"k"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-number">100</span><span class="hljs-punctuation">,</span> <span class="hljs-number">100</span><span class="hljs-punctuation">,</span> <span class="hljs-number">100</span><span class="hljs-punctuation">]</span>  <span class="hljs-comment">// 保持 100% 缩放</span>
        <span class="hljs-punctuation">}</span>
      <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">"ao"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>             <span class="hljs-comment">// 自动定向</span>
      <span class="hljs-attr">"shapes"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>          <span class="hljs-comment">// 图形数组，定义图层中的形状</span>
        <span class="hljs-punctuation">{</span>
          <span class="hljs-attr">"ty"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"el"</span><span class="hljs-punctuation">,</span>      <span class="hljs-comment">// 图形类型 'el' 代表 ellipse（椭圆/圆形）</span>
          <span class="hljs-attr">"p"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>           <span class="hljs-comment">// 椭圆的中心点</span>
            <span class="hljs-attr">"a"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>
            <span class="hljs-attr">"k"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">]</span>
          <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
          <span class="hljs-attr">"s"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>           <span class="hljs-comment">// 椭圆的大小</span>
            <span class="hljs-attr">"a"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>
            <span class="hljs-attr">"k"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-number">100</span><span class="hljs-punctuation">,</span> <span class="hljs-number">100</span><span class="hljs-punctuation">]</span>  <span class="hljs-comment">// 圆的宽和高为 100px</span>
          <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
          <span class="hljs-attr">"nm"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"ellipse"</span>
        <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
        <span class="hljs-punctuation">{</span>
          <span class="hljs-attr">"ty"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"st"</span><span class="hljs-punctuation">,</span>      <span class="hljs-comment">// 图形类型 'st' 代表 stroke（描边）</span>
          <span class="hljs-attr">"c"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>           <span class="hljs-comment">// 描边颜色</span>
            <span class="hljs-attr">"a"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>
            <span class="hljs-attr">"k"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">]</span>  <span class="hljs-comment">// 红色 [R: 1, G: 0, B: 0, Alpha: 1]</span>
          <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
          <span class="hljs-attr">"o"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>           <span class="hljs-comment">// 描边不透明度</span>
            <span class="hljs-attr">"a"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>
            <span class="hljs-attr">"k"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">100</span>
          <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
          <span class="hljs-attr">"w"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>           <span class="hljs-comment">// 描边宽度</span>
            <span class="hljs-attr">"a"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>
            <span class="hljs-attr">"k"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">10</span>
          <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
          <span class="hljs-attr">"lc"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span>         <span class="hljs-comment">// 线帽样式</span>
          <span class="hljs-attr">"lj"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span>         <span class="hljs-comment">// 线接样式</span>
          <span class="hljs-attr">"ml"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span>          <span class="hljs-comment">// 折线限制</span>
        <span class="hljs-punctuation">}</span>
      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">"ip"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>             <span class="hljs-comment">// 图层开始帧</span>
      <span class="hljs-attr">"op"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">60</span><span class="hljs-punctuation">,</span>            <span class="hljs-comment">// 图层结束帧</span>
      <span class="hljs-attr">"st"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>             <span class="hljs-comment">// 图层起始时间</span>
      <span class="hljs-attr">"bm"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span>              <span class="hljs-comment">// 混合模式</span>
    <span class="hljs-punctuation">}</span>
  <span class="hljs-punctuation">]</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<ul>
<li>
<p><strong><code>v</code></strong>: 表示 Lottie 动画的版本。</p>
</li>
<li>
<p><strong><code>fr</code></strong>: 帧率，表示每秒多少帧。在这个示例中，每秒播放 30 帧。</p>
</li>
<li>
<p><strong><code>ip</code></strong> 和 <strong><code>op</code></strong>: 分别代表动画的起始帧和结束帧。本例中，动画从第 0 帧开始，到第 60 帧结束。</p>
</li>
<li>
<p><strong><code>layers</code></strong>: 图层数组。每个图层包含 <code>ks</code> (关键帧属性)，用于控制位置、缩放、旋转等动画参数。</p>
<ul>
<li><strong><code>ty: 4</code></strong>: 图层类型为形状图层。</li>
<li><strong><code>p</code></strong>: 定义了位置动画，从帧 0 开始，圆形从 (50, 250) 移动到 (450, 250) 的位置，表示从画布左侧移动到右侧。</li>
</ul>
</li>
<li>
<p><strong><code>shapes</code></strong>: 定义了图形的属性。</p>
<ul>
<li>
<p><strong><code>el</code></strong>: 表示一个椭圆形，即我们定义的圆形。</p>
</li>
<li>
<p><strong><code>st</code></strong>: 表示圆形的描边，颜色为红色，宽度为 10px。</p>
</li>
</ul>
</li>
</ul>
<hr>
<p>以上就是本文的全部内容，如果本文对你有帮助，欢迎转发给你的朋友。</p>
<p><img src="https://p3-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/bebc7c93e0214e2e8f5a8beafd6bfe49~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5b636IKy5aSE5Li75Lu7:q75.awebp?rk3s=f64ab15b&amp;x-expires=1735538310&amp;x-signature=0LBmSjI8H1EQ7rfeUIkkO3zDSnY%3D" alt="IMG_4387 2.GIF" loading="lazy"></p>
<p><strong>点赞 + 关注 + 收藏 = 学会了</strong></p></div></div>