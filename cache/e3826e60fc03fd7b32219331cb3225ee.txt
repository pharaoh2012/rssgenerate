
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/elvi/p/18619260" title="发布于 2024-12-31 12:00">
    <span role="heading" aria-level="2">飞书lark机器人 自动化发版</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        开发飞书机器人接收消息并调用构建接口, 实现自动化发版  
发送指令 -&gt; 机器人接收指令 -&gt; 调用jenkins-job远程构建与部署
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h3 align="center">飞书lark机器人 自动化发版</h3>
<h4 id="1-介绍">#1 介绍</h4>
<ul>
<li>
<p>开发飞书机器人接收消息并调用构建接口, 实现自动化发版</p>
</li>
<li>
<p>发送指令 -&gt; 机器人接收指令 -&gt; 调用jenkins-job远程构建与部署</p>
</li>
<li>
<p>jenkins配置,勾选job配置的<code>触发远程构建</code>并设置<code>身份验证令牌</code></p>
</li>
</ul>
<pre><code class="language-bash">#测试 触发远程构建
curl -ks -u user:user_token -X POST \
  jenkins_url/job/job_name/buildWithParameters?token=job_token
</code></pre>
<hr>
<h4 id="2创建机器人">#2、创建机器人</h4>
<h5 id="21-登录开放平台">#2.1 登录开放平台</h5>
<p>飞书  <a href="https://open.feishu.cn/" target="_blank" rel="noopener nofollow">https://open.feishu.cn/</a><br>
lark <a href="https://open.larksuite.com/" target="_blank" rel="noopener nofollow">https://open.larksuite.com/</a></p>
<blockquote>
<p>lark是飞书国际版</p>
</blockquote>
<h5 id="22-创建应用">#2.2 创建应用</h5>
<ul>
<li>创建应用 -&gt; 创建企业自建应用cici -&gt;添加应用能力<code>机器人</code></li>
<li>凭证与基础信息 -&gt; 复制<code>App ID</code>和<code>App Secret</code></li>
<li>事件与回调 -&gt; 加密策略 -&gt; 复制<code>Verification Token</code></li>
<li>权限管理，添加如下权限：
<ul>
<li>获取与更新群组信息</li>
<li>以应用的身份发消息</li>
<li>接收群聊中@机器人消息事件</li>
</ul>
</li>
</ul>
<h5 id="23-运行机器人服务">#2.3 运行机器人服务</h5>
<p>配置环境变量文件.env_lark</p>
<pre><code class="language-bash">#vim .env_lark 
APP_ID=cli_a7e8508040f99999
APP_SECRET=0iD0HYbmUPrI9aHfHX0NyhL0fy699999
VERIFICATION_TOKEN=vk0SOUPy8MViGxVesPJSAeI5wA799999
ENCRYPT_KEY=""
LARK_HOST=https://open.larksuite.com
#FLASK_ENV=production
JenkinsBaseUrl=https://user:user_token@jenkins.elvin.vip/job/
</code></pre>
<p>使用docker启动机器人服务</p>
<pre><code>docker rm -f robot-lark &amp;&gt;/dev/null
docker run -dit --name robot-lark \
 --restart=always -h robot-lark --net=host\
 -v $(pwd):/opt --env-file .env_lark \
registry.aliyuncs.com/elvin/python:lark-robot \
python3 /opt/lark-robot.py
</code></pre>
<blockquote>
<p><a href="https://gitee.com/alivv/elvin-demo/raw/master/robot-lark/lark-robot.py" target="_blank" rel="noopener nofollow">lark-robot.py </a>实例在https://gitee.com/alivv/elvin-demo</p>
</blockquote>
<p>nignx配置域名和lark反向代理</p>
<pre><code class="language-bash">#lark
location ~ ^/(url_verification|lark-cicd) {
    proxy_pass http://127.0.0.1:8092;
    proxy_set_header Host $host:$server_port;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
}
</code></pre>
<h5 id="24-发布应用">#2.4 发布应用</h5>
<p><strong>2.4.1 配置事件与回调</strong></p>
<ul>
<li>事件配置,填写请求地址如 <a href="http://test.elvin.vip/lark-cicd" target="_blank" rel="noopener nofollow">http://test.elvin.vip/lark-cicd</a></li>
<li>添加事件，接收消息v2.0</li>
</ul>
<p><img src="http://imgs.elvin.vip/2024/lark-event.jpg" alt="" loading="lazy"></p>
<p><strong>2.4.2 版本管理与发布，创建版本，申请线上发布</strong></p>
<hr>
<h4 id="3-发送消息测试">#3 发送消息测试</h4>
<ul>
<li>创建lark群，添加机器人，发送消息测试<br>
<img src="https://imgs.elvin.vip/2024/lark-robot_test.jpg" alt="" loading="lazy"></li>
</ul>
<hr>
<h4 id="4-源码">#4 源码</h4>
<p>python实例如下:</p>
<pre><code class="language-bash">#!/usr/bin/env python3
#lark-robot.py

import os
import logging
import json
import uuid
from flask import Flask, request, jsonify
import lark_oapi as lark
from lark_oapi.api.im.v1 import CreateMessageRequest, CreateMessageRequestBody
from datetime import datetime, timedelta
import requests

# 创建 Flask 应用实例
app = Flask(__name__)

# 配置日志
logger = logging.getLogger('lark-robot')
logger.setLevel(logging.INFO)
handler = logging.StreamHandler()
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler)

# 存储已经处理过的 request_id
processed_request_ids = set()

# 处理所有请求的前置方法
@app.before_request
def handle_all_requests():
    path = request.path
    if path == '/url_verification' or path == '/lark-cicd':
        return None  # 让请求继续传递给相应的路由处理
    else:
        if 'X-Forwarded-For' in request.headers:
            ip = request.headers['X-Forwarded-For'].split(',')[0]
        else:
            ip = request.remote_addr
        return ip + "\n", 200, [("Server", "Go"), ("City", "Shanghai")]

# URL 验证接口
@app.route('/url_verification', methods=["POST"])
def url_verification():
    req = request.json
    if req.get("token") != VERIFICATION_TOKEN:
        raise Exception("VERIFICATION_TOKEN is invalid")
    return jsonify({"challenge": req.get("challenge")})

# 主业务逻辑接口
@app.route('/lark-cicd', methods=["POST"])
def index():
    req = request.json
    request_id = str(uuid.uuid4())
    # logger.info(f"Received request with ID: {request_id}, data: {req}")
    header = req.get("header", {})
    event_type = header.get("event_type")
    create_time = header.get("create_time")

    if req.get("type") == "url_verification":
        return url_verification()
    elif event_type == "im.message.receive_v1":
        event = req.get("event")
        message = event.get("message")
        group_id = message.get("chat_id")
        msg_content = json.loads(message.get("content")).get("text").split('@')[0]
        msg_content = msg_content.rstrip()

        # 检查 request_id 是否已经被处理过
        if request_id in processed_request_ids:
            logger.info(f"Request ID: {request_id} - Request already processed")
            return "succeed"
        else:
            processed_request_ids.add(request_id)  # 标记 request_id 为已处理
            if create_time: #检查消息是否在10秒以内
                try:
                    create_time_dt = datetime.fromtimestamp(int(create_time) / 1000)  # 转换为datetime对象
                    current_time_dt = datetime.now()
                    if current_time_dt - create_time_dt &gt; timedelta(seconds=10):
                        logger.info(f"Request: {request_id} - {msg_content} - Message is too old")
                        return "succeed"
                except ValueError:
                    logger.error(f"Request ID: {request_id} - Invalid create_time format")
                    return "succeed"
            else:
                logger.error(f"Request ID: {request_id} - Missing create_time")
                return "succeed"

            if msg_content:  # 检查 msg_content 是否为空
                msg_name = next((mention.get("name") for mention in message.get("mentions", []) if mention.get("name")), None)
                logger.info(f"Msg: {msg_content} @{msg_name}")
                response_content = f"已收到 \n{msg_content}"
                # send_event_message(group_id, response_content)
                msg_cicd(group_id, msg_content)
                return "succeed"
            else:
                logger.warning(f"Request ID: {request_id} - message content is empty")
                return "succeed"
    else:
        logger.warning(f"Request ID: {request_id} - Unsupported event type: {event_type}")
        return "succeed"

# 发送消息到群聊
def send_event_message(group_id, response_content):
    client = lark.Client.builder() \
        .app_id(APP_ID) \
        .app_secret(APP_SECRET) \
        .domain(LARK_HOST) \
        .enable_set_token(True) \
        .log_level(lark.LogLevel.ERROR) \
        .build()

    request_body = CreateMessageRequestBody.builder() \
        .receive_id(group_id) \
        .msg_type("text") \
        .content(json.dumps({"text": response_content})) \
        .uuid(os.urandom(16).hex()) \
        .build()

    request = CreateMessageRequest.builder() \
        .receive_id_type("chat_id") \
        .request_body(request_body) \
        .build()

    response = client.im.v1.message.create(request)

    if not response.success():
        lark.logger.error(
            f"client.im.v1.message.create failed, code: {response.code}, msg: {response.msg}, log_id: {response.get_log_id()}, resp: \n{json.dumps(json.loads(response.raw.content), indent=4, ensure_ascii=False)}")
        return

    lark.logger.info(lark.JSON.marshal(response.data, indent=4))
    return "succeed"


##########
#cicd

#筛选消息，执行指令
def msg_cicd(group_id,text):
    msg = text
    #print(datetime.now().strftime('%Y-%m-%d %H:%M:%S'), "msg-&gt;: ",  msg)
    
    #check group
    #test oc_492604c3bb7382afeb47448b726e0a7d
    if group_id != "oc_492604c3bb7382afeb47448b726e0a7d__":
        appInfoMap = dict(appProd, **appProdTest)
        myMenu = {"help", "prod", "test"}
        L = msg.split(" ")
        L = list(filter(lambda x: x != '', L))
        Len = len(L)
        if msg in appInfoMap:
            app_env = appInfoMap[msg][0]
            app_name = appInfoMap[msg][1]
            if msg.startswith("b"):
                app_url = appInfoMap[msg][2] + appInfoMap[msg][0]
            else:
                app_url = appInfoMap[msg][2]
                app_url = app_url + app_env + "&amp;app_list=" + app_name
            if app_env != "":
                #执行通知
                msg = "env:  %s\napp  %s" % (app_env, app_name)
                send_event_message(group_id, msg)
                
                #向webhook发起post请求
                head = { 'User-Agent': "webhook-robot" }
                res = requests.post(url=app_url, headers=head)
                print(datetime.now().strftime('%Y-%m-%d %H:%M:%S'), "webhook", app_env, app_name, res.reason)
                return "succeed"
            else:
                print(msg, "nothing")
                return "succeed"
        elif msg in myMenu:
            #打印命令列表
            print(datetime.now().strftime('%Y-%m-%d %H:%M:%S'), "Send menu")
            msgTitle = "#命令  名称\n"
            if msg == "help":
                msgTitle2 = "#命令  获取列表\n"
                msg = msgTitle2 + "prod  app-prod-list\ntest  app-test-list"
            elif msg == "prod":
                msg = msgTitle
                for i in appProd:
                    msg = msg + i + "  " + appInfoMap[i][1] + "\n"
            elif msg == "test":
                msg = msgTitle
                for i in appProdTest:
                    msg = msg + i + "  " + appInfoMap[i][1] + "\n"
            msg = msg.rstrip('\n')
            send_event_message(group_id, msg)
            return "succeed"
        #多个app部署
        elif Len &gt; 1:
            app = ""
            apps = ""
            app_env = ""
            for n in L:
                if n in appInfoMap:
                    app_name = appInfoMap[n][1]
                    app = app + app_name + " \n"
                    apps = apps + app_name + " "
                    app_env = appInfoMap[n][0]
                    app_url = appInfoMap[n][2]
            if app_env != "":
                #执行通知
                app = app.rstrip('\n')
                msg = f"env:  {app_env}\napp-list: \n{app}"
                send_event_message(group_id, msg)
                
                #向webhook发起post请求
                app_url = app_url + app_env + "&amp;app_list=" + app
                head = { 'User-Agent': "webhook-robot" }
                res = requests.post(url=app_url, headers=head)
                print(datetime.now().strftime('%Y-%m-%d %H:%M:%S'), "webhook", app_env, apps, res.reason)
                return "succeed"
            else:
                msg = f"已收到: \n{msg} \n发送 help@cici 查看支持指令"
                send_event_message(group_id, msg)
                return "succeed"
        else:
            msg = f"已收到: \n{msg} \n发送 help@cici 查看支持指令"
            send_event_message(group_id, msg)
            return "succeed"

    else:
        print("group_id no found",group_id)
        return "succeed"


# 从环境变量加载配置
APP_ID = os.getenv("APP_ID")
APP_SECRET = os.getenv("APP_SECRET")
VERIFICATION_TOKEN = os.getenv("VERIFICATION_TOKEN")
LARK_HOST = os.getenv("LARK_HOST", "https://open.larksuite.com")

##########
#cicd list

#webhook url for jenkins 
JenkinsBaseUrl = os.getenv("JenkinsBaseUrl")

#job
appDeploy = "test-app-deploy/buildWithParameters?token=cicdTest&amp;app_branch=master&amp;app_build=true&amp;docker_build=true&amp;create_git_tag=false&amp;notice_msg=true&amp;app_deploy=true&amp;image_update=true&amp;input_pass=true&amp;deploy_tag=tag&amp;deploy_env="

#ci url
appDeployUrl = JenkinsBaseUrl + appDeploy

appProd = {
"#app-prod-k8s-list:": ["","", ""],
"s101": ["prod","app-web", appDeployUrl],
"s102": ["prod","app-svc", appDeployUrl],
"s103": ["prod","app-api", appDeployUrl],
"s104": ["prod","app-event", appDeployUrl],
"s105": ["prod","app-admin", appDeployUrl],
}

appProdTest = {
"#app-test-k8s-list:": ["","", ""],
"s201": ["test","app-web", appDeployUrl],
"s202": ["test","app-svc", appDeployUrl],
"s203": ["test","app-api", appDeployUrl],
"s204": ["test","app-event", appDeployUrl],
"s205": ["test","app-admin", appDeployUrl],
}

##########

# 启动 Flask 应用
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8092, debug=False)
</code></pre>
<p>source: <a href="https://gitee.com/alivv/elvin-demo" target="_blank" rel="noopener nofollow">https://gitee.com/alivv/elvin-demo</a></p>

</div>
<div id="MySignature" role="contentinfo">
    <p>本文来自博客园，作者：<a href="https://www.cnblogs.com/elvi/" target="_blank">blog-elvin-vip</a>，转载请注明原文链接：<a href="https://www.cnblogs.com/elvi/p/18619260" target="_blank">https://www.cnblogs.com/elvi/p/18619260</a></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.012367510274305556" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2024-12-31 12:00">2024-12-31 12:00</span>&nbsp;
<a href="https://www.cnblogs.com/elvi">blog-elvin-vip</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18619260" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18619260);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18619260', targetLink: 'https://www.cnblogs.com/elvi/p/18619260', title: '飞书lark机器人 自动化发版' })">举报</a>
</div>
        