
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/MoyuAndHan/p/18891870" title="发布于 2025-05-22 19:17">
    <span role="heading" aria-level="2">excel/wps, 转code128字体宏, 部分字符串出现空格, 导致条码断裂无法扫描的解决方案</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p class="md-end-block md-p md-focus"><span class="md-plain md-expand">原宏是网上抄的, 传播比较广的那个.</span></p>
<p class="md-end-block md-p"><span class="md-plain">后来发现, 部分条码出现空格断裂, 导致PDA无法扫描, 经搜索在一个帖子里, 发现是因为: 宏计算条码时, 会出现校验位刚好是空格的情况, 而空格在code128字体里是不显示的, 所以最后的现象就是条码断裂, 无法扫描</span></p>
<p class="md-end-block md-p"><span class="md-plain">解决思路, 如果校验位为空格, 那么修改起始位或者结束位, 来达到修改校验位的结果</span></p>
<p class="md-end-block md-p md-focus"><span class="md-plain">修改之后的宏如下: 其中<span class="md-pair-s"><code>function encodeToCode128()</code><span class="md-plain md-expand">函数由AI重写完成(原来的该函数已被注释), 经我测试没有发现问题</span></span></span></p>
<div class="cnblogs_code"><img src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" id="code_img_closed_97fd200a-3e37-4826-aed7-c54e512e8c13" class="code_img_closed"><img src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" id="code_img_opened_97fd200a-3e37-4826-aed7-c54e512e8c13" class="code_img_opened" style="display: none">
<div id="cnblogs_code_open_97fd200a-3e37-4826-aed7-c54e512e8c13" class="cnblogs_code_hide">
<pre><span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> toSetC(text) {
</span><span style="color: rgba(0, 0, 255, 1)">return</span> text.match(/\d{2}/g).map((ascii, index) =&gt;<span style="color: rgba(0, 0, 0, 1)"> {
</span><span style="color: rgba(0, 0, 255, 1)">var</span> codeC =<span style="color: rgba(0, 0, 0, 1)"> Number(ascii);
</span><span style="color: rgba(0, 0, 255, 1)">var</span> charCode = codeC &gt; 94 ? codeC + 100 : codeC + 32<span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> String.fromCharCode(charCode)
}).join(</span>''<span style="color: rgba(0, 0, 0, 1)">);
}

</span><span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> checkSum128(data, startCode) {
</span><span style="color: rgba(0, 0, 255, 1)">var</span> sum =<span style="color: rgba(0, 0, 0, 1)"> startCode;
</span><span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(0, 0, 255, 1)">var</span> i = 0; i &lt; data.length; i++<span style="color: rgba(0, 0, 0, 1)">) {
</span><span style="color: rgba(0, 0, 255, 1)">var</span> code =<span style="color: rgba(0, 0, 0, 1)"> data.charCodeAt(i);
</span><span style="color: rgba(0, 0, 255, 1)">var</span> value = code &gt; 199 ? code - 100 : code - 32<span style="color: rgba(0, 0, 0, 1)">;
sum </span>+= (i + 1) *<span style="color: rgba(0, 0, 0, 1)"> (value);
}
</span><span style="color: rgba(0, 0, 255, 1)">var</span> checksum = (sum % 103) + 32<span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 0, 255, 1)">if</span> (checksum &gt; 126) checksum = checksum + 68<span style="color: rgba(0, 0, 0, 1)"> ;
</span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> String.fromCharCode(checksum);
}

</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">function encodeToCode128(text, codeABC = "B") {</span><span style="color: rgba(0, 128, 0, 1)">
//</span><span style="color: rgba(0, 128, 0, 1)">text = text.Text ?? text</span><span style="color: rgba(0, 128, 0, 1)">
//</span><span style="color: rgba(0, 128, 0, 1)">var startCode = String.fromCharCode(codeABC.toUpperCase().charCodeAt() + 138);</span><span style="color: rgba(0, 128, 0, 1)">
//</span><span style="color: rgba(0, 128, 0, 1)">var stop = String.fromCharCode(206);</span><span style="color: rgba(0, 128, 0, 1)">
//</span><span style="color: rgba(0, 128, 0, 1)">text = codeABC == 'C' &amp;&amp; toSetC(text) || text;</span><span style="color: rgba(0, 128, 0, 1)">
//</span><span style="color: rgba(0, 128, 0, 1)">var check = checkSum128(text, startCode.charCodeAt(0) - 100);</span><span style="color: rgba(0, 128, 0, 1)">
//</span><span style="color: rgba(0, 128, 0, 1)">//text = text.replace(" ", String.fromCharCode(194));</span><span style="color: rgba(0, 128, 0, 1)">
//</span><span style="color: rgba(0, 128, 0, 1)">return startCode + text + check + stop;</span><span style="color: rgba(0, 128, 0, 1)">
//</span><span style="color: rgba(0, 128, 0, 1)">}</span>

<span style="color: rgba(0, 0, 255, 1)">function</span> encodeToCode128(text, codeABC = "B"<span style="color: rgba(0, 0, 0, 1)">) {
    text </span>= text.Text ??<span style="color: rgba(0, 0, 0, 1)"> text;
    </span><span style="color: rgba(0, 0, 255, 1)">var</span> originalStartCode = codeABC.toUpperCase().charCodeAt() + 138; <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> e.g., 'B' → 204</span>
    <span style="color: rgba(0, 0, 255, 1)">var</span> startCode =<span style="color: rgba(0, 0, 0, 1)"> originalStartCode;
    </span><span style="color: rgba(0, 0, 255, 1)">var</span> stopCode = 206<span style="color: rgba(0, 0, 0, 1)">;
    </span><span style="color: rgba(0, 0, 255, 1)">var</span> encodedText = codeABC == 'C' ?<span style="color: rgba(0, 0, 0, 1)"> toSetC(text) : text;
    
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 计算默认校验位</span>
    <span style="color: rgba(0, 0, 255, 1)">var</span> check = checkSum128(encodedText, startCode - 100<span style="color: rgba(0, 0, 0, 1)">);
    </span><span style="color: rgba(0, 0, 255, 1)">var</span> checksum = check.charCodeAt(0<span style="color: rgba(0, 0, 0, 1)">);
    
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 仅在校验位为空格（32）时尝试调整起始符和结束符</span>
    <span style="color: rgba(0, 0, 255, 1)">if</span> (checksum === 32<span style="color: rgba(0, 0, 0, 1)">) {
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 尝试不同的起始符（A/B/C）</span>
        <span style="color: rgba(0, 0, 255, 1)">var</span> startOptions =<span style="color: rgba(0, 0, 0, 1)"> [
            </span>203, <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Start A</span>
            204, <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Start B</span>
            205  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Start C</span>
<span style="color: rgba(0, 0, 0, 1)">        ];
        
        </span><span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(0, 0, 255, 1)">var</span> i = 0; i &lt; startOptions.length; i++<span style="color: rgba(0, 0, 0, 1)">) {
            </span><span style="color: rgba(0, 0, 255, 1)">var</span> newStartCode =<span style="color: rgba(0, 0, 0, 1)"> startOptions[i];
            </span><span style="color: rgba(0, 0, 255, 1)">if</span> (newStartCode === originalStartCode) <span style="color: rgba(0, 0, 255, 1)">continue</span>; <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 跳过原始起始符（已经计算过）</span>
<span style="color: rgba(0, 0, 0, 1)">            
            check </span>= checkSum128(encodedText, newStartCode - 100<span style="color: rgba(0, 0, 0, 1)">);
            checksum </span>= check.charCodeAt(0<span style="color: rgba(0, 0, 0, 1)">);
            
            </span><span style="color: rgba(0, 0, 255, 1)">if</span> (checksum !== 32<span style="color: rgba(0, 0, 0, 1)">) {
                </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 找到非空格校验位，使用新的起始符</span>
                startCode =<span style="color: rgba(0, 0, 0, 1)"> newStartCode;
                </span><span style="color: rgba(0, 0, 255, 1)">break</span><span style="color: rgba(0, 0, 0, 1)">;
            }
        }
        
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 如果所有起始符都导致空格校验位，尝试修改停止符（206→238）</span>
        <span style="color: rgba(0, 0, 255, 1)">if</span> (checksum === 32<span style="color: rgba(0, 0, 0, 1)">) {
            stopCode </span>= 238<span style="color: rgba(0, 0, 0, 1)">;
            check </span>= checkSum128(encodedText, startCode - 100); <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 重新计算校验位</span>
<span style="color: rgba(0, 0, 0, 1)">        }
    }
    
    </span><span style="color: rgba(0, 0, 255, 1)">return</span> String.fromCharCode(startCode) + encodedText + check +<span style="color: rgba(0, 0, 0, 1)"> String.fromCharCode(stopCode);
}</span></pre>
</div>
<span class="cnblogs_code_collapse">View Code</span></div>
<p>&nbsp;</p>
<p class="md-end-block md-p md-focus"><span class="md-plain">&nbsp;</span></p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.05140458002662037" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-22 19:17">2025-05-22 19:17</span>&nbsp;
<a href="https://www.cnblogs.com/MoyuAndHan">穿过旷野的风</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18891870);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18891870', targetLink: 'https://www.cnblogs.com/MoyuAndHan/p/18891870', title: 'excel/wps, 转code128字体宏, 部分字符串出现空格, 导致条码断裂无法扫描的解决方案' })">举报</a>
</div>
        