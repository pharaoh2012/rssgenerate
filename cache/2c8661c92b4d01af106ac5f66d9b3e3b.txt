
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/cyhbyw/p/18810527" title="发布于 2025-04-06 09:37">
    <span role="heading" aria-level="2">在类 Unix 系统中将 Nginx 源码导入 CLion 并调试运行</span>
    

</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h1>零、写在最前面</h1>
<h2><span style="font-size: 18px">0.1 关于系统</span></h2>
<p><span style="font-size: 18px">如标题所述，本文的操作需要一个类 Unix 系统（MacOS、CentOS、Ubuntu 等）。</span></p>
<p><span style="font-size: 18px">同时这些类 Unix 系统还需要有 gcc 编译器。具体如何搞定这些编译器的内容不在本文范围内，忽略之。</span></p>
<p><span style="font-size: 18px">提示：MacOS 自带 C 语言编译器，比较方便，推荐使用。</span></p>
<h2><span style="font-size: 18px">0.2 关于版本</span></h2>
<p><span style="font-size: 18px">本文作者测试过的 Nginx 源码版本是 1.16.0 &amp; 1.20.0 &amp; 1.25.0，基本上认为在 [1.16.0 - 1.25.0] 之间的版本都是 OK 的，其他版本请注意区别。</span></p>
<p><span style="font-size: 18px">作者学习 Nginx 源码的版本是 1.16.0，可以和这个版本保持一致。</span></p>
<p>&nbsp;</p>
<h1>一、背景</h1>
<p><span style="font-size: 18px; font-family: &quot;Microsoft YaHei&quot;">想要对 Nginx 源码进行深入学习并了解：</span></p>
<ul>
<li><span style="font-size: 18px; font-family: &quot;Microsoft YaHei&quot;">架构是怎样的？</span></li>
<li><span style="font-size: 18px; font-family: &quot;Microsoft YaHei&quot;">多进程还是多线程？</span></li>
<li><span style="font-size: 18px; font-family: &quot;Microsoft YaHei&quot;">哪些高级数据结构？</span></li>
<li><span style="font-size: 18px; font-family: &quot;Microsoft YaHei&quot;">内存如何管理？</span></li>
<li><span style="font-size: 18px; font-family: &quot;Microsoft YaHei&quot;">配置文件如何解析，如何热加载？</span></li>
<li><span style="font-size: 18px; font-family: &quot;Microsoft YaHei&quot;">Epoll 事件机制？</span></li>
<li><span style="font-size: 18px; font-family: &quot;Microsoft YaHei&quot;">负载均衡如何实现的，如何扩展？</span></li>
</ul>
<p><span style="font-size: 18px; font-family: &quot;Microsoft YaHei&quot;">但是 Nginx 源码是用 C 语言编写的，且默认使用 Makefile 来构建，不利于导入 CLion 和调试。</span></p>
<p><span style="font-size: 18px; font-family: &quot;Microsoft YaHei&quot;">于是，需要想办法将其转换为 CMake 工程，这样用 CLion 调试和运行很方便。</span></p>
<p>&nbsp;</p>
<h1>二、获取 Nginx 源码</h1>
<p><span style="font-size: 18px">方式一（不太推荐）：<a href="https://nginx.org/en/download.html" target="_blank" rel="noopener nofollow">官网链接</a></span></p>
<p><span style="font-size: 18px">注意下载合适的版本</span></p>
<p><span style="font-size: 18px">方式二（推荐）：<a href="https://github.com/nginx/nginx" target="_blank" rel="noopener nofollow">Github 链接</a></span></p>
<p><span style="font-size: 18px">下载后切换到合适的版本</span></p>
<p>&nbsp;</p>
<h1>三、生成 CMakeLists.txt</h1>
<h2><strong><span style="font-size: 14pt">3.1 创建 bash 脚本文件 cmake</span></strong></h2>
<p><span style="font-size: 14pt">执行命令：&nbsp; &nbsp;&nbsp;</span><strong><span style="font-size: 14pt">cd /home/cyh/nginx&nbsp; （作者的 Nginx 根目录、后续都是这个目录）</span></strong></p>
<p><span style="font-size: 18px">执行命令：&nbsp; &nbsp; <strong>vim auto/cmake</strong></span><br><span style="font-size: 18px">	cmake 文件的内容一共 46 行，具体如下：</span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 128, 1)"> 1</span> #!/usr/bin/<span style="color: rgba(0, 0, 255, 1)">env</span><span style="color: rgba(0, 0, 0, 1)"> bash
</span><span style="color: rgba(0, 128, 128, 1)"> 2</span> NGX_CMAKE_FILE=<span style="color: rgba(0, 0, 0, 1)">CMakeLists.txt
</span><span style="color: rgba(0, 128, 128, 1)"> 3</span> NGX_CMAKE_TMP=$NGX_OBJS/<span style="color: rgba(0, 0, 0, 1)">tmp
</span><span style="color: rgba(0, 128, 128, 1)"> 4</span> 
<span style="color: rgba(0, 128, 128, 1)"> 5</span> <span style="color: rgba(0, 0, 0, 1)">#output includes
</span><span style="color: rgba(0, 128, 128, 1)"> 6</span> cmake_ngx_incs=`<span style="color: rgba(0, 0, 255, 1)">echo</span><span style="color: rgba(0, 0, 0, 1)"> $CORE_INCS $NGX_OBJS $HTTP_INCS $MAIL_INCS \
</span><span style="color: rgba(0, 128, 128, 1)"> 7</span>              <span style="color: rgba(0, 0, 255, 1)">sed</span> -e <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">s/  *\([^ ][^ ]*\)/$ngx_regex_cont\1/g</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)"> \
</span><span style="color: rgba(0, 128, 128, 1)"> 8</span>                    -e <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">s/\//$ngx_regex_dirsep/g</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">`
</span><span style="color: rgba(0, 128, 128, 1)"> 9</span> <span style="color: rgba(0, 0, 255, 1)">cat</span> &lt;&lt; END                                  &gt;<span style="color: rgba(0, 0, 0, 1)"> $NGX_CMAKE_TMP
</span><span style="color: rgba(0, 128, 128, 1)">10</span> cmake_minimum_required(VERSION <span style="color: rgba(128, 0, 128, 1)">3.6</span><span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 128, 128, 1)">11</span> <span style="color: rgba(0, 0, 0, 1)">include_directories(
</span><span style="color: rgba(0, 128, 128, 1)">12</span> <span style="color: rgba(0, 0, 0, 1)">    .
</span><span style="color: rgba(0, 128, 128, 1)">13</span> <span style="color: rgba(0, 0, 0, 1)">    $cmake_ngx_incs)
</span><span style="color: rgba(0, 128, 128, 1)">14</span> <span style="color: rgba(0, 0, 0, 1)">END
</span><span style="color: rgba(0, 128, 128, 1)">15</span> 
<span style="color: rgba(0, 128, 128, 1)">16</span> <span style="color: rgba(0, 0, 0, 1)">#output src
</span><span style="color: rgba(0, 128, 128, 1)">17</span> cmake_ngx_src=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">$CORE_SRCS $HTTP_SRCS $MAIL_SRCS $NGX_MISC_SRCS $NGX_ADDON_SRCS $NGX_SHARED_SRCS</span><span style="color: rgba(128, 0, 0, 1)">"</span>
<span style="color: rgba(0, 128, 128, 1)">18</span> 
<span style="color: rgba(0, 128, 128, 1)">19</span> cmake_ngx_src=`<span style="color: rgba(0, 0, 255, 1)">echo</span> $cmake_ngx_src | <span style="color: rgba(0, 0, 255, 1)">sed</span> -e <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">s/  *\([^ ][^ ]*\)/$ngx_regex_cont\1/g</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">\
</span><span style="color: rgba(0, 128, 128, 1)">20</span>                              -e <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">s/\//$ngx_regex_dirsep/g</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">`
</span><span style="color: rgba(0, 128, 128, 1)">21</span> 
<span style="color: rgba(0, 128, 128, 1)">22</span> <span style="color: rgba(0, 0, 255, 1)">cat</span> &lt;&lt; END                                    &gt;&gt;<span style="color: rgba(0, 0, 0, 1)"> $NGX_CMAKE_TMP
</span><span style="color: rgba(0, 128, 128, 1)">23</span> <span style="color: rgba(0, 0, 0, 1)">set(SOURCE_FILES
</span><span style="color: rgba(0, 128, 128, 1)">24</span>     $NGX_OBJS/<span style="color: rgba(0, 0, 0, 1)">ngx_modules.c
</span><span style="color: rgba(0, 128, 128, 1)">25</span> <span style="color: rgba(0, 0, 0, 1)">    $cmake_ngx_src)
</span><span style="color: rgba(0, 128, 128, 1)">26</span> <span style="color: rgba(0, 0, 0, 1)">END
</span><span style="color: rgba(0, 128, 128, 1)">27</span> 
<span style="color: rgba(0, 128, 128, 1)">28</span> <span style="color: rgba(0, 0, 0, 1)">#output target
</span><span style="color: rgba(0, 128, 128, 1)">29</span> <span style="color: rgba(0, 0, 255, 1)">cat</span> &lt;&lt; END                                   &gt;&gt;<span style="color: rgba(0, 0, 0, 1)"> $NGX_CMAKE_TMP
</span><span style="color: rgba(0, 128, 128, 1)">30</span> <span style="color: rgba(0, 0, 0, 1)">add_executable(nginx \${SOURCE_FILES})
</span><span style="color: rgba(0, 128, 128, 1)">31</span> <span style="color: rgba(0, 0, 0, 1)">END
</span><span style="color: rgba(0, 128, 128, 1)">32</span> 
<span style="color: rgba(0, 128, 128, 1)">33</span> 
<span style="color: rgba(0, 128, 128, 1)">34</span> <span style="color: rgba(0, 0, 0, 1)">#output lib
</span><span style="color: rgba(0, 128, 128, 1)">35</span> <span style="color: rgba(0, 0, 255, 1)">echo</span><span style="color: rgba(0, 0, 0, 1)"> ${CORE_LIBS}
</span><span style="color: rgba(0, 128, 128, 1)">36</span> CMAKE_CORE_LIBS=`<span style="color: rgba(0, 0, 255, 1)">echo</span> ${CORE_LIBS} | <span style="color: rgba(0, 0, 255, 1)">sed</span> -e <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">s/-l//g</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">`
</span><span style="color: rgba(0, 128, 128, 1)">37</span> 
<span style="color: rgba(0, 128, 128, 1)">38</span> <span style="color: rgba(0, 0, 255, 1)">cat</span> &lt;&lt; END                                   &gt;&gt;<span style="color: rgba(0, 0, 0, 1)"> $NGX_CMAKE_TMP
</span><span style="color: rgba(0, 128, 128, 1)">39</span> <span style="color: rgba(0, 0, 0, 1)">target_link_libraries(nginx $CMAKE_CORE_LIBS)
</span><span style="color: rgba(0, 128, 128, 1)">40</span> <span style="color: rgba(0, 0, 0, 1)">END
</span><span style="color: rgba(0, 128, 128, 1)">41</span> 
<span style="color: rgba(0, 128, 128, 1)">42</span> <span style="color: rgba(0, 0, 255, 1)">if</span> [ -<span style="color: rgba(0, 0, 0, 1)">f $NGX_CMAKE_TMP ]
</span><span style="color: rgba(0, 128, 128, 1)">43</span> <span style="color: rgba(0, 0, 255, 1)">then</span>
<span style="color: rgba(0, 128, 128, 1)">44</span>     (<span style="color: rgba(0, 0, 255, 1)">cat</span> $NGX_CMAKE_TMP | <span style="color: rgba(0, 0, 255, 1)">sed</span> -e <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">s/\\\//g</span><span style="color: rgba(128, 0, 0, 1)">"</span>) &gt;<span style="color: rgba(0, 0, 0, 1)"> $NGX_CMAKE_FILE
</span><span style="color: rgba(0, 128, 128, 1)">45</span>     <span style="color: rgba(0, 0, 255, 1)">rm</span><span style="color: rgba(0, 0, 0, 1)"> $NGX_CMAKE_TMP
</span><span style="color: rgba(0, 128, 128, 1)">46</span> <span style="color: rgba(0, 0, 255, 1)">fi</span></pre>
</div>
<p><span style="font-size: 18px">继续执行命令：&nbsp; &nbsp;&nbsp;<strong>vim auto/configure</strong></span></p>
<p><span style="font-size: 18px">在原来的 . auto/make 的前面，添加一行，内容是：&nbsp; &nbsp; <strong>. auto/cmake</strong></span></p>
<p><span style="font-size: 18px">如下图所示：</span></p>
<p><img src="https://img2024.cnblogs.com/blog/319547/202504/319547-20250405221835536-1042462571.png" alt="" loading="lazy"></p>
<h2>3.2 执行 configure 脚本生成 CMakeLists.txt 文件</h2>
<p><span style="font-size: 18px">执行命令：&nbsp; &nbsp; <strong>./auto/configure --prefix="./" --without-http_rewrite_module --without-http_gzip_module</strong></span><strong style="font-size: 18px"><br></strong></p>
<p><span style="font-size: 18px">命令说明：</span></p>
<ol>
<li><span style="font-size: 18px">执行 auto/configure 这个脚本</span></li>
<li><span style="font-size: 18px">--prefix 指定前缀</span></li>
<li><span style="font-size: 18px">--without-http_rewrite_module 编译时不要 HTTP 重写模块（要的话，需要安装其他的依赖包，增加复杂度）</span></li>
<li><span style="font-size: 18px">--without-http_gzip_module 编译时不要 HTTP 压缩模块（要的话，需要安装其他的依赖包，增加复杂度）</span></li>







</ol>
<p><span style="font-size: 18px">命令执行成功的效果，如下图所示：</span></p>
<p><img src="https://img2024.cnblogs.com/blog/319547/202504/319547-20250406083846598-1710043292.png" alt="" width="556" height="420" loading="lazy"></p>
<p><span style="font-size: 18px">最终在 nginx 源码根目录会生成一个 CMakeLists.txt 文件。同时会生成 objs 目录以及里面的几个文件。</span></p>
<p><span style="font-size: 18px">如下图所示：</span></p>
<p><img src="https://img2024.cnblogs.com/blog/319547/202504/319547-20250406084547729-949851849.png" alt="" width="354" height="286" loading="lazy"></p>
<h2>3.3 用 CLion 打开这个 Nginx 工程</h2>
<p><span style="font-size: 18px">此步骤起提示作用，具体操作省略。</span></p>
<p><img src="https://img2024.cnblogs.com/blog/319547/202504/319547-20250406085915324-1585925021.png" alt="" width="335" height="407" loading="lazy"></p>
<h2>3.4 修改 CMakeLists.txt 文件<br>	</h2>
<p><span style="font-size: 18px">将 include_directories 指令进行修改，内容如下，否则 clion 会将 /root 目录也作为头文件的搜索路径，这是没有必要的。</span>&nbsp;</p>
<div class="cnblogs_code">
<pre>include_directories(
    .
    src/core src/event src/event/modules src/os/unix objs src/http src/http/modules)</pre>
</div>
<p><span style="font-size: 18px">注意查看生成的&nbsp;CMakeLists.txt 文件的内容，如果缺少下图中的这一行的话，自行补充上去一下。</span>&nbsp;</p>
<p><span style="font-size: 18px">具体如图所示：</span></p>
<p><img src="https://img2024.cnblogs.com/blog/319547/202504/319547-20250406084943464-1790692000.png" alt="" width="817" height="150" loading="lazy"></p>
<p>&nbsp;</p>
<h1>四、创建 nginx 运行时必要的目录和文件<span style="font-size: 18px"><br></span></h1>
<p><span style="font-size: 18px">CLion 这个编辑器，调试过程中的产物都位于 cmake-build-debug 目录下，因此需要在这个目录下创建相关文件。</span></p>
<p><span style="font-size: 18px">方式一：执行如下的命令</span><br><strong><span style="font-size: 18px">	　　mkdir -p cmake-build-debug/logs</span></strong><br><strong><span style="font-size: 18px">	　　cp -fr conf cmake-build-debug/</span></strong><br><strong><span style="font-size: 18px">	　　cp -fr html cmake-build-debug/</span></strong><br><span style="font-size: 18px">	方式二：鼠标右键操作</span><br><span style="font-size: 18px">打开 CLion 后，直接通过鼠标拷贝，效果是一样的。</span></p>
<p><span style="font-size: 18px">最终的想要效果，如下图所示：</span></p>
<p><img src="https://img2024.cnblogs.com/blog/319547/202504/319547-20250405223307963-2091398712.png" alt="" width="433" height="650" loading="lazy"></p>
<p>&nbsp;</p>
<h1>五、修改 nginx 配置文件</h1>
<p><span style="font-size: 18px">方式一：执行如下的命令</span></p>
<p><span style="font-size: 18px">　　<strong>vim cmake-build-debug/conf/nginx.conf</strong></span><br><span style="font-size: 18px">方式二：直接在 CLion 中编辑文件</span><br><span style="font-size: 18px">不管那种方式，最终的目标是在文件开头新增如下两行内容，表示 nginx 处于前台运行并且是单进程模式工作。</span></p>
<div class="cnblogs_code">
<pre>daemon off;
master_process off;</pre>
</div>
<p><span style="font-size: 18px">最终的效果如下：</span></p>
<p><img src="https://img2024.cnblogs.com/blog/319547/202504/319547-20250405223559940-809916794.png" alt="" width="641" height="173" loading="lazy"></p>
<p>&nbsp;</p>
<h1>六、clion 打开 nginx 源码进行调试</h1>
<p><span style="font-size: 18px"> 在 src/core/nginx.c 中找 main() 方法，右键点击运行或者调试。</span></p>
<p><img src="https://img2024.cnblogs.com/blog/319547/202504/319547-20250405223815364-2100690758.png" alt="" width="735" height="251" loading="lazy"></p>
<p><span style="font-size: 18px">运行成功后，打开浏览器输入 localhost 或者 locaolhost:80 就可以看到 Nginx 的那个标准首页了。</span></p>
<p><span style="font-size: 18px">如图所示：</span></p>
<p><img src="https://img2024.cnblogs.com/blog/319547/202504/319547-20250406090249504-394597289.png" alt="" width="666" height="261" loading="lazy"></p>
<p>&nbsp;</p>
<h1>七、总结</h1>
<p><span style="font-size: 18px"> 使用 CLion 调试 nginx 需要依赖于 CMakeLists.txt 文件。</span><br><span style="font-size: 18px">	而 CMakeLists.txt 文件是通过 nginx 源码目录下的 auto/configure 脚本来生成。</span><br><span style="font-size: 18px">	有了 CMakeLists.txt 文件，只需要创建 nginx 运行时必须使用到的目录和文件，打开 clion 找到 main 方法点击调试即可。</span></p>
<p>&nbsp;</p>
<h1>八、我的 Nginx 源码</h1>
<p><a href="https://gitee.com/cyhbyw/nginx/tree/cyh-release-1.16.0/" target="_blank" rel="noopener nofollow"><span style="font-size: 18px">在这里</span></a></p>
<p>&nbsp;</p>
<h1>九、参考文档</h1>
<p><a href="https://blog.csdn.net/nangonghen/article/details/133975239" target="_blank" rel="noopener nofollow"><span style="font-size: 18px">clion本地调试nginx-1.22.1</span></a><br><a href="https://blog.csdn.net/jackaing/article/details/133926039" target="_blank" rel="noopener nofollow"><span style="font-size: 18px">使用 CLion debug 跟踪 nginx/OpenResty 源码</span></a></p>
<p>&nbsp;</p>
<h1>十、书籍推荐</h1>
<table style="height: 401px; width: 1367px" border="0" align="left">
<tbody>
<tr>
<td><strong><span style="font-size: 18px">书名</span></strong></td>
<td><strong><span style="font-size: 18px">作者</span></strong></td>
<td><strong><span style="font-size: 18px">版次</span></strong></td>
<td><strong><span style="font-size: 18px">Nginx 源码版本</span></strong></td>
<td><strong><span style="font-size: 18px">推荐指数</span></strong></td>
<td><strong><span style="font-size: 18px">其他信息</span></strong></td>









</tr>
<tr>
<td><span style="font-size: 18px">《Nginx 底层设计与源码分析》</span></td>
<td><span style="font-size: 18px">&nbsp;聂松松，赵禹，施洪宝</span></td>
<td><span style="font-size: 18px">2023.12</span></td>
<td><span style="font-size: 18px">1.16.0</span></td>
<td><span style="font-size: 18px">4星</span></td>
<td>
<p><span style="font-size: 18px">版本较新，内容全面，难易适中</span></p>
<p><span style="font-size: 18px">作为第一本学习 Nginx 的书籍</span></p>




</td>









</tr>
<tr>
<td><span style="font-size: 18px">《深入理解 Nginx 模块开发与架构解析》</span></td>
<td><span style="font-size: 18px">&nbsp;陶辉</span></td>
<td><span style="font-size: 18px">2019.09&nbsp;</span></td>
<td><span style="font-size: 18px">1.0.14</span></td>
<td><span style="font-size: 18px">3星</span></td>
<td>
<p><span style="font-size: 18px">书很好，但是版本比较老了，内容比较深</span></p>
<p><span style="font-size: 18px">作为第二本学习 Nginx 的书籍&nbsp;</span></p>




</td>









</tr>
<tr>
<td><span style="font-size: 18px">《Nginx 高性能Web服务开发详解》</span></td>
<td><span style="font-size: 18px">&nbsp;苗泽</span></td>
<td><span style="font-size: 18px">2013.10</span></td>
<td><span style="font-size: 18px">1.2.3</span></td>
<td><span style="font-size: 18px">2星</span></td>
<td><span style="font-size: 18px">版本比较老，后续有空再来学习吧</span></td>









</tr>









</tbody>









</table>
</div>
<div class="clear"></div>

		</div>
		<div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.520655209556713" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-06 09:45">2025-04-06 09:37</span>&nbsp;
<a href="https://www.cnblogs.com/cyhbyw">cyhbyw</a>&nbsp;
阅读(<span id="post_view_count">49</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18810527" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18810527);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18810527', targetLink: 'https://www.cnblogs.com/cyhbyw/p/18810527', title: '在类 Unix 系统中将 Nginx 源码导入 CLion 并调试运行' })">举报</a>
</div>
	