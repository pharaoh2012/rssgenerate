
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/GuZhenYin/p/18781724" title="发布于 2025-03-19 20:22">
    <span role="heading" aria-level="2">.NET Core奇技淫巧之WinForm使用Python.NET并打包</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<div style="text-align: center; background-color: rgba(136, 136, 136, 1)"><span style="font-size: 24px; line-height: 40px; color: rgba(255, 255, 255, 1)">前言</span></div>
<p><strong>之前整了一个<strong>GZY.EFCoreCompare 的库,可以用做对比实体与数据库结构.感兴趣可以去看看,地址:<a class="d-block overflow-x-hidden color-fg-default" href="https://github.com/l2999019/GZY.EFCoreCompare" data-pjax="#repo-content-pjax-container" data-turbo-frame="repo-content-turbo-frame" data-immersive-translate-walked="e10df532-dca7-4117-a1e7-032f10e23dfc" rel="noopener nofollow">GZY.EFCoreCompare</a></strong></strong></p>
<p><strong><strong>但是只能导出execl表格.</strong></strong></p>
<p><strong>后来大佬用Python写了个类,可以将<strong>execl表格直接生成SQL语句.&nbsp; 但是需要通过开发工具 或者python环境去运行.</strong></strong></p>
<p><strong><strong>对现场的非技术人员很不友好..所以就想着用WinForm包装一个UI界面.</strong></strong></p>
<p>废话不多说,我们开始正文</p>
<p>&nbsp;</p>
<div style="text-align: center; background-color: rgba(136, 136, 136, 1)"><span style="font-size: 24px; line-height: 40px; color: rgba(255, 255, 255, 1)">正文</span></div>
<p>.NET Core目前主流的和python交互的类库有两个.&nbsp;<a href="https://github.com/tonybaloney/CSnakes" data-pjax="#repo-content-pjax-container" data-turbo-frame="repo-content-turbo-frame" rel="noopener nofollow">CSnakes</a>&nbsp;和&nbsp;<a href="https://github.com/pythonnet/pythonnet" target="_blank" rel="noopener nofollow">Python.NET</a></p>
<p>我是两个类库都试过了,虽然CSnakes性能可能更好,但是需要采用依赖注入的形式去使用,</p>
<p>而且虚拟环境需要科技上网才能下载,对WinForm并不太友好,所以后来放弃了.</p>
<p><a href="https://github.com/pythonnet/pythonnet" target="_blank" rel="noopener nofollow">Python.NET</a>则可以直接使用嵌入式的python版本来作为环境,相对WinForm比较友好,所以这里采用<a href="https://github.com/pythonnet/pythonnet" target="_blank" rel="noopener nofollow">Python.NET</a>来与python进行交互</p>
<h2>1.下载嵌入式的python</h2>
<ul>
<li>打开链接:&nbsp;<a href="https://www.python.org/downloads/windows/" rel="noopener nofollow" target="_blank">https://www.python.org/downloads/windows/</a></li>
<li>下载 Windows embeddable package (64-bit) 版本</li>
</ul>
<h2>2.处理嵌入式的python无法使用pip的问题</h2>
<ul>
<li>解压后编辑 python313._pth (这里是3.13版本,根据版本编辑)，取消注释&nbsp;<code>import site</code></li>
<li>下载&nbsp;<a href="https://bootstrap.pypa.io/pip/get-pip.py" rel="noopener nofollow" target="_blank">https://bootstrap.pypa.io/pip/get-pip.py</a>&nbsp;到python.exe所在文件夹</li>
<li>执行命令:&nbsp;
<div class="cnblogs_code">
<pre>.\python.exe get-pip.py</pre>
</div>
<p>&nbsp;</p>
</li>
<li>然后执行命令:
<div class="cnblogs_code">
<pre>.\python.exe -m pip</pre>
</div>
<p>这样,我们就发现pip可以正常使用了</p>
</li>
</ul>
<h2>3.通过pip命令下载所需的包.</h2>
<p>&nbsp; &nbsp;我这里因为使用的pandas解析的excel所以需要安装pandas,命令如下:</p>
<div class="cnblogs_code">
<pre>.\python.exe -m pip install --upgrade pandas -t Lib\site-packages\</pre>
</div>
<div class="cnblogs_code">
<pre>.\python.exe -m pip install --upgrade openpyxl -t Lib\site-packages\</pre>
</div>
<p>这里我们通过-t 指定下载到嵌入式python的相对文件夹下,方便我们打包</p>
<h2>4.将安装好包的python目录复制到Winfrom项目下,并设置复制到输出目录.</h2>
<p>类似如图:</p>
<p><img src="https://img2024.cnblogs.com/blog/653851/202503/653851-20250319200347945-901746530.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<h2>5.通过Nuget安装<a href="https://github.com/pythonnet/pythonnet" target="_blank" rel="noopener nofollow">Python.NET</a>包.</h2>
<p>如图:</p>
<p><img src="https://img2024.cnblogs.com/blog/653851/202503/653851-20250319200611796-1084373892.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<h2>6.编写WinFrom加载和点击事件</h2>
<p>这里就不贴其他控件了,没啥内容.</p>
<p>我们在窗体加载的时候初始化python的环境,代码如下:</p>
<div class="cnblogs_code">
<pre> <span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span> AdminForm_Load(<span style="color: rgba(0, 0, 255, 1)">object</span><span style="color: rgba(0, 0, 0, 1)"> sender, EventArgs e)
 {

     </span><span style="color: rgba(0, 0, 255, 1)">string</span> pythonPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">pythone</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
     </span><span style="color: rgba(0, 0, 255, 1)">string</span> pythonDll = Path.Combine(pythonPath, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">python313.dll</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
     Runtime.PythonDLL </span>=<span style="color: rgba(0, 0, 0, 1)"> pythonDll;
     PythonEngine.Initialize();

 }</span></pre>
</div>
<p>在按钮点击的时候,调用python类,去生成对应的SQL语句,代码如下:</p>
<div class="cnblogs_code">
<pre>        <span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span> button2_Click(<span style="color: rgba(0, 0, 255, 1)">object</span><span style="color: rgba(0, 0, 0, 1)"> sender, EventArgs e)
        {
            </span><span style="color: rgba(0, 0, 255, 1)">if</span> (<span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)">.IsNullOrEmpty(textBox1.Text))
            {
                MessageBox.Show(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">请选择文件!</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
                </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)">;
            }
          
            </span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> (Py.GIL())
            {
                </span><span style="color: rgba(0, 0, 255, 1)">dynamic</span> sys = Py.Import(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">sys</span><span style="color: rgba(128, 0, 0, 1)">"</span>); <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">导入sys模块</span>
                <span style="color: rgba(0, 0, 255, 1)">string</span> sitePackagesPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">pythone</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Lib</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">site-packages</span><span style="color: rgba(128, 0, 0, 1)">"</span>); <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">设置site-packages路径</span>
                <span style="color: rgba(0, 0, 255, 1)">string</span> scripts= Path.Combine(AppDomain.CurrentDomain.BaseDirectory);<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">设置python脚本所在路径</span>
                sys.path.append(sitePackagesPath);<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">添加site-packages路径</span>
                sys.path.append(scripts);<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">添加python脚本路径</span>
                <span style="color: rgba(0, 0, 255, 1)">dynamic</span> np = Py.Import(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">gen_sql_fromexcel</span><span style="color: rgba(128, 0, 0, 1)">"</span>); <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">导入python脚本</span>
<span style="color: rgba(0, 0, 0, 1)">

                np.generate_sql_from_excel(textBox1.Text, Environment.CurrentDirectory </span>+ <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">/output.sql</span><span style="color: rgba(128, 0, 0, 1)">"</span>); <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">调用python脚本中的方法</span>
<span style="color: rgba(0, 0, 0, 1)">
            }
            MessageBox.Show(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">生成成功!请到根目录查看.</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);

        }</span></pre>
</div>
<p>注释里已经解释了对应代码的作用<strong>.(注意,一定要设置依赖包的路径&nbsp; 也就是site-packages路径的)</strong></p>
<p><strong>这样就完成了整个调用的过程.</strong></p>
<p>&nbsp;</p>
</div>
<div id="MySignature" role="contentinfo">
    作者：顾振印
出处：http://www.cnblogs.com/GuZhenYin/
如果您觉得阅读本文对您有帮助，请点一下“推荐”按钮，您的“推荐”将是我最大的写作动力！本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="1.0267421783703703" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-19 20:22">2025-03-19 20:22</span>&nbsp;
<a href="https://www.cnblogs.com/GuZhenYin">GuZhenYin</a>&nbsp;
阅读(<span id="post_view_count">530</span>)&nbsp;
评论(<span id="post_comment_count">2</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18781724" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18781724);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18781724', targetLink: 'https://www.cnblogs.com/GuZhenYin/p/18781724', title: '.NET Core奇技淫巧之WinForm使用Python.NET并打包' })">举报</a>
</div>
        