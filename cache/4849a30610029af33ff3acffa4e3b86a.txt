
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/minuhy/p/18824208" title="发布于 2025-04-14 09:41">
    <span role="heading" aria-level="2">【Linux】基于Exynos4412的U-Boot引导程序移植</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="linux基于exynos4412的u-boot引导程序移植">【Linux】基于Exynos4412的U-Boot引导程序移植</h1>
<h2 id="零准备">零、准备</h2>
<p>首先我们得去下载好U-Boot的源码，因为用的芯片是2012年出的Exynos4412，因此我们选择这个时间节点附近的U-Boot版本。本文选择U-Boot的v2013.01.01版本。</p>
<p>U-Boot官方网站：<a href="https://www.u-boot.org/" target="_blank" rel="noopener nofollow">https://www.u-boot.org/</a><br>
U-Boot下载页面：<a href="https://ftp.denx.de/pub/u-boot/" target="_blank" rel="noopener nofollow">https://ftp.denx.de/pub/u-boot/</a><br>
U-Boot-v2013.01.01版本下载页面：<a href="https://source.denx.de/u-boot/u-boot/-/tree/v2013.01.01" target="_blank" rel="noopener nofollow">https://source.denx.de/u-boot/u-boot/-/tree/v2013.01.01</a><br>
U-Boot-v2013.01.01版本下载链接：<a href="https://ftp.denx.de/pub/u-boot/u-boot-2013.01.01.tar.bz2" target="_blank" rel="noopener nofollow">https://ftp.denx.de/pub/u-boot/u-boot-2013.01.01.tar.bz2</a></p>
<p>下载后得到如下文件：<br>
<img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250414093939818-1942965878.png" alt="alt text" loading="lazy"></p>
<p>另外我们需要一套ARM的交叉编译工具链，交叉编译工具本文不介绍。</p>
<h2 id="壹初次编译">壹、初次编译</h2>
<h3 id="1-解压">1. 解压</h3>
<p>使用如下命令解压：</p>
<pre><code class="language-bash">yu@Yubuntu:~/ex4412/uboot$ tar -vxf u-boot-2013.01.01.tar.bz2
</code></pre>
<p>得到如下文件夹：<br>
<img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250414093939799-444310381.png" alt="alt text" loading="lazy"></p>
<p>进入到<code>u-boot-2013.01.01</code>文件夹中去，准备移植工作。</p>
<h3 id="2-设置编译器">2. 设置编译器</h3>
<p>我们在编译U-Uoot源码之前需要指定我们使用的处理器架构和编译器，指定的方式有两种，一种是通过make命令参数临时指定，一种是修改<code>Makefile</code>文件永久指定，两种方式各有优缺点。<br>
因为我们是针对于ARM处理器的移植，所以选择修改<code>Makefile</code>更方便些。</p>
<p>使用如下命令修改<code>Makefile</code>文件：</p>
<pre><code class="language-bash">yu@Yubuntu:~/ex4412/uboot/u-boot-2013.01.01$ vi Makefile
</code></pre>
<p>将185行的变量<code>CROSS_COMPILE</code>直接指定为我们交叉编译工具的前缀<code>arm-none-linux-gnueabi-</code>，注意后面不要有空格。<br>
<img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250414093940484-1713730587.png" alt="alt text" loading="lazy"><br>
修改好后保存退出。</p>
<h3 id="3-添加板子board信息">3. 添加板子（Board）信息</h3>
<p>每个人使用的开发板都有可能不同，U-Boot不可能支持所有的开发板，故有时候需要我们自己在U-Boot中添加对我们板子的支持。<br>
U-Boot中支持了一部分板子，为了减少工作量提高效率，我们可以选择一款与我们板子相近的板子作为基础，我们可以在此基础之上进行针对我们板子的修改。<br>
这边我选择的是Samsung公司的Origen。</p>
<h4 id="31">3.1</h4>
<p>使用如下命令把Origen的代码复制一份并且重命名：</p>
<pre><code class="language-bash">yu@Yubuntu:~/ex4412/uboot/u-boot-2013.01.01$ cp -rf board/samsung/origen/ board/samsung/ex4412                  # 复制源码
yu@Yubuntu:~/ex4412/uboot/u-boot-2013.01.01$ mv board/samsung/ex4412/origen.c board/samsung/ex4412/ex4412.c     # 重命名     
yu@Yubuntu:~/ex4412/uboot/u-boot-2013.01.01$
yu@Yubuntu:~/ex4412/uboot/u-boot-2013.01.01$ cp include/configs/origen.h include/configs/ex4412.h               # 复制头文件
</code></pre>
<h4 id="32">3.2</h4>
<p>复制代码后，我们还需要对<code>Makefile</code>文件进行修改，让我们复制出来的代码能够正常编译。</p>
<p>使用如下命令修改<code>Makefile</code>文件：</p>
<pre><code class="language-bash">yu@Yubuntu:~/ex4412/uboot/u-boot-2013.01.01$ vi board/samsung/ex4412/Makefile
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250414093940774-2086159389.png" alt="alt text" loading="lazy"><br>
把31行的<code>COBJS += origen.o</code>改为<code>COBJS   += ex4412.o</code>后保存退出。</p>
<h4 id="33">3.3</h4>
<p>我们还需要让我们的代码能够被编译进U-Boot中，即添加U-Boot对我们板子的支持，类似于在U-Boot中注册我们的板子。</p>
<p>使用如下命令编辑U-Boot的配置文件：</p>
<pre><code class="language-bash">yu@Yubuntu:~/ex4412/uboot/u-boot-2013.01.01$ vi boards.cfg
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250414093941028-965085556.png" alt="alt text" loading="lazy"><br>
我们把我们参考的板子的配置信息复制一行，修改为我们的板子。修改完成后保存退出，这样我们就在U-Boot中注册了我们的板子了。</p>
<h4 id="34">3.4</h4>
<p>为了区别于其他板子的U-Boot程序，我们有时候需要在程序运行时输出一些提示信息，此类信息对程序运行影响不大，主要是供开发者调试，因此是可选的操作。</p>
<p>若要修改提示信息，可以使用如下命令编辑头文件中的宏定义：</p>
<pre><code class="language-bash">yu@Yubuntu:~/ex4412/uboot/u-boot-2013.01.01$ vi include/configs/ex4412.h
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250414093941367-1706807037.png" alt="alt text" loading="lazy"><br>
这里主要是104行的宏<code>CONFIG_SYS_PROMPT</code>和133行的宏<code>CONFIG_IDENT_STRING</code>，宏<code>CONFIG_SYS_PROMPT</code>定义的是U-Boot的系统提示，出现在命令行的前面，而宏<code>CONFIG_IDENT_STRING</code>定义的是U-Boot的识别字符串，出现在U-Boot输出内容的第一行。<br>
修改完成后保存退出即可。</p>
<h3 id="4-第一次编译代码">4. 第一次编译代码</h3>
<h4 id="41">4.1</h4>
<p>首先我们要指定板子信息，使用如下命令指定：</p>
<pre><code class="language-bash">yu@Yubuntu:~/ex4412/uboot/u-boot-2013.01.01$ make ex4412_config
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250414093939821-2075078551.png" alt="alt text" loading="lazy"><br>
其中，<code>ex4412</code>为前面我们添加到<code>boards.cfg</code>文件中的<code>Board name</code>（第4）列的字符串。</p>
<h4 id="42">4.2</h4>
<p>然后，我们就可以开始编译U-Boot了！<br>
使用如下命令开始编译U-Boot：</p>
<pre><code class="language-bash">yu@Yubuntu:~/ex4412/uboot/u-boot-2013.01.01$ make
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250414093941510-919802298.png" alt="alt text" loading="lazy"><br>
好，我们遇到了一个错误。</p>
<h4 id="43">4.3</h4>
<p>打开错误中提到的文件：</p>
<pre><code class="language-bash">yu@Yubuntu:~/ex4412/uboot/u-boot-2013.01.01$ vi spl/u-boot-spl.lds
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250414093940971-40702533.png" alt="alt text" loading="lazy"><br>
看样子是我们刚刚修改的代码出问题了，<code>lds</code>文件不支持<code>//</code>注释，因此我们重新修改刚刚的文件，把使用<code>//</code>的注释行改用<code>/* */</code>注释。</p>
<p>编辑我们的头文件：</p>
<pre><code class="language-bash">yu@Yubuntu:~/ex4412/uboot/u-boot-2013.01.01$ vi include/configs/ex4412.h
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250414093941342-22928432.png" alt="alt text" loading="lazy"><br>
保存退出。</p>
<h4 id="44">4.4</h4>
<p>再重新编译：</p>
<pre><code class="language-bash">yu@Yubuntu:~/ex4412/uboot/u-boot-2013.01.01$ make
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250414093941459-1005121124.png" alt="alt text" loading="lazy"><br>
编译成功！</p>
<p>可以看到在U-Boot源码目录下生成了<code>u-boot.bin</code>文件：<br>
<img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250414093941172-2110953606.png" alt="alt text" loading="lazy"></p>
<h3 id="5-总结">5. 总结</h3>
<p>本小节初步完成了对U-Boot的编译操作，认识到了<code>lds</code>文件不支持<code>//</code>注释，后面尽可能用<code>/* */</code>注释。但是仅是编译的话，U-Boot可能还不能在我们板子上正常运行，我们还得针对我们的板子做更多的优化，此小节算是我们的板子仅在U-Boot中注册了吧。</p>
<h2 id="贰移植">贰、移植</h2>
<p>本小节不一定适用于所有人，移植操作需要针对目标板子做特别的操作，因此对大多数人来说，本小节能参考的只是移植的步骤。<br>
每完成一个移植可以尝试编译运行检查错误，以免将来找错误困难，此步骤本文省略。</p>
<h3 id="1-集成板子加密引导代码">1. 集成板子加密引导代码</h3>
<p>有时为保障芯片启动的安全性，其初始引导需要经过特定的加密处理后，才能引导运行U-Boot。因此，我们需在U-Boot源码中添加芯片公司提供的特定的加密处理代码。</p>
<p>本芯片的加密处理代码如下：<br>
<img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250414093941109-1678617911.png" alt="alt text" loading="lazy"></p>
<h4 id="11">1.1</h4>
<p>使用如下命令复制到U-Boot目录下：</p>
<pre><code class="language-bash">yu@Yubuntu:~/ex4412/secure$ cp -rf CodeSign4SecureBoot ~/ex4412/uboot/u-boot-2013.01.01
yu@Yubuntu:~/ex4412/secure$ cp -rf sdfuse_q ~/ex4412/uboot/u-boot-2013.01.01
</code></pre>
<h4 id="12">1.2</h4>
<p>加密代码也需要被编译进U-Boot，故我们修改<code>Makefile</code>文件：</p>
<pre><code class="language-bash">yu@Yubuntu:~/ex4412/uboot/u-boot-2013.01.01$ vi Makefile
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250414093940584-837449331.png" alt="alt text" loading="lazy"><br>
这段代码主要是对编译后的U-Boot可执行文件进行处理，先将其分割成固定大小的文件，然后编译<code>sdfuse_q</code>下的代码，运行的<code>chksum</code>和<code>add_padding</code>脚本。</p>
<h4 id="13">1.3</h4>
<p>在使用<code>make</code>命令编译时，默认情况下只会链接U-Boot源码里的相关代码到<code>u-boot.bin</code>中，而我们添加的初始引导加密代码不会被链接到<code>u-boot.bin</code>中。<br>
为了解决这个问题，我们需要自行编写一个编译脚本把我们添加的初始引导加密代码链接到<code>u-boot.bin</code>中。</p>
<pre><code class="language-bash">yu@Yubuntu:~/ex4412/uboot/u-boot-2013.01.01$ touch build.sh
yu@Yubuntu:~/ex4412/uboot/u-boot-2013.01.01$ chmod +x build.sh
yu@Yubuntu:~/ex4412/uboot/u-boot-2013.01.01$ vi build.sh
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250414093941142-1558441143.png" alt="alt text" loading="lazy"><br>
我们首先对U-Boot源码进行配置和编译，之后把初始引导加密代码链接到<code>u-boot.bin</code>上。最终，脚本会生成一个完整的U-Boot镜像：<code>u-boot-ex4412.bin</code>。</p>
<h4 id="14">1.4</h4>
<p>运行结果：<br>
<img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250414093941424-483232017.png" alt="alt text" loading="lazy"><br>
成功生成<code>u-boot-ex4412.bin</code>~</p>
<h3 id="2-添加相关调试代码">2. 添加相关调试代码</h3>
<p>为了方便我们识别问题，我们可以在U-Boot源码中针对我们的板子添加一段点亮LED的代码，这样U-Boot有没有在运行我们通过LED的状态就可以得知。</p>
<p>我们编辑U-Boot的启动代码，把点亮LED的代码加入其中：</p>
<pre><code class="language-bash">yu@Yubuntu:~/ex4412/uboot/u-boot-2013.01.01$ vi arch/arm/cpu/armv7/start.S
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250414093940793-685897436.png" alt="alt text" loading="lazy"><br>
编辑完成后保存退出。</p>
<h3 id="3-实现串口输出">3. 实现串口输出</h3>
<p>为了方便调试，我们需要针对我们的开发板调整UART的代码，让U-Boot支持我们开发板的串口功能。</p>
<p>编辑U-Boot处理器低级初始化代码文件<code>lowlevel_init.S</code>：</p>
<pre><code class="language-bash">yu@Yubuntu:~/ex4412/uboot/u-boot-2013.01.01$ vi board/samsung/ex4412/lowlevel_init.S
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250414093940080-1998441325.png" alt="alt text" loading="lazy"><br>
初始化临时栈<br>
<img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250414093940713-1415461580.png" alt="alt text" loading="lazy"><br>
关掉看门狗<br>
<img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250414093940664-1305784398.png" alt="alt text" loading="lazy"><br>
初始化串口<br>
<img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250414093940604-680869495.png" alt="alt text" loading="lazy"><br>
跳过初始化TrustZone保护控制器</p>
<h3 id="4-网卡移植">4. 网卡移植</h3>
<p>我们有时候要从电脑上通过网口下载一些程序到开发板上运行，因此需要让U-Boot支持我们开发板的网卡才行。</p>
<h4 id="41-1">4.1</h4>
<p>编辑我们的板级代码：</p>
<pre><code class="language-bash">yu@Yubuntu:~/ex4412/uboot/u-boot-2013.01.01$ vi board/samsung/ex4412/ex4412.c
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250414093941437-34795300.png" alt="alt text" loading="lazy"><br>
初始化DM9000相关代码<br>
<img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250414093940816-879137205.png" alt="alt text" loading="lazy"><br>
调用DM9000初始化代码<br>
<img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250414093940674-176519745.png" alt="alt text" loading="lazy"><br>
网络初始化代码</p>
<p>保存退出~</p>
<h4 id="42-1">4.2</h4>
<p>编辑我们的板级代码头文件：</p>
<pre><code class="language-bash">yu@Yubuntu:~/ex4412/uboot/u-boot-2013.01.01$ vi include/configs/ex4412.h
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250414093940749-1607244250.png" alt="alt text" loading="lazy"><br>
配置支持<code>ping</code>命令和网络<br>
<img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250414093941111-721595727.png" alt="alt text" loading="lazy"><br>
配置网络相关的宏</p>
<p>保存退出~</p>
<h3 id="5-emmc移植">5. eMMC移植</h3>
<p>有时候我们需要设置U-Boot的环境变量来完成自动启动内核的操作，而U-Boot的环境变量要想下次启动时还有效就得保存在eMMC（或其他非易失性存储器）上，因此我们有必要让U-Boot支持我们的eMMC。</p>
<p>准备如下相关文件，这些文件改写于一些开源项目：<br>
<img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250414093940523-1979599229.png" alt="alt text" loading="lazy"></p>
<h4 id="51">5.1</h4>
<p>把这些文件复制到项目中去：</p>
<pre><code class="language-bash">yu@Yubuntu:~/ex4412/uboot/eMMC$ cp movi.c ../u-boot-2013.01.01/arch/arm/cpu/armv7/exynos/
yu@Yubuntu:~/ex4412/uboot/eMMC$ cp cmd_movi.c cmd_mmc.c cmd_mmc_fdisk.c ../u-boot-2013.01.01/common/
yu@Yubuntu:~/ex4412/uboot/eMMC$ cp mmc.c s5p_mshc.c ../u-boot-2013.01.01/drivers/mmc/
yu@Yubuntu:~/ex4412/uboot/eMMC$ cp mmc.h movi.h s5p_mshc.h ../u-boot-2013.01.01/include/
</code></pre>
<h4 id="52">5.2</h4>
<p>然后修改对应的<code>Makefile</code>，让这些代码能被正确编译进U-Boot中：</p>
<h5 id="521">5.2.1</h5>
<pre><code class="language-bash">yu@Yubuntu:~/ex4412/uboot/u-boot-2013.01.01$ vi arch/arm/cpu/armv7/exynos/Makefile
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250414093940485-1406038690.png" alt="alt text" loading="lazy"><br>
把<code>movi.c</code>编译进U-Boot，<code>movi.c</code>中实现的是从 eMMC复制U-Boot到内存的功能。</p>
<h5 id="522">5.2.2</h5>
<pre><code class="language-bash">yu@Yubuntu:~/ex4412/uboot/u-boot-2013.01.01$ vi common/Makefile
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250414093940622-1571862311.png" alt="alt text" loading="lazy"><br>
<code>cmd_mmc_fdisk</code>主要实现了对eMMC进行分区管理的功能，<code>cmd_movi</code>主要实现了对eMMC上的不同镜像进行读写操作的功能。</p>
<h5 id="523">5.2.3</h5>
<pre><code class="language-bash">yu@Yubuntu:~/ex4412/uboot/u-boot-2013.01.01$ vi drivers/mmc/Makefile
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250414093940890-523967871.png" alt="alt text" loading="lazy"><br>
<code>s5p_mshc</code>是针对Exynos4412的MMC主机控制器驱动，提供的功能有初始化、时钟管理、数据传输准备、传输模式设置、命令发送和FIFO管理等，使得U-Boot能够与eMMC进行有效的通信和数据交互。</p>
<h4 id="53">5.3</h4>
<p>然后我们要修改板级文件，让开发板支持eMMC相关的操作：</p>
<pre><code class="language-bash">yu@Yubuntu:~/ex4412/uboot/u-boot-2013.01.01$ vi board/samsung/ex4412/ex4412.c
</code></pre>
<h5 id="531">5.3.1</h5>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250414093940577-891382600.png" alt="alt text" loading="lazy"><br>
导入头文件。</p>
<h5 id="532">5.3.2</h5>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250414093941293-22809247.png" alt="alt text" loading="lazy"><br>
这段代码的主要作用是对eMMC控制器的时钟和GPIO进行配置，并调用一些初始化函数，让eMMC设备能够正常工作。</p>
<h5 id="533">5.3.3</h5>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250414093940634-618718436.png" alt="alt text" loading="lazy"><br>
调用刚刚写的eMMC初始化代码。</p>
<h5 id="534">5.3.4</h5>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250414093941001-305841391.png" alt="alt text" loading="lazy"><br>
这段代码的主要是在系统启动后期检测启动设备（eMMC或SD卡），并输出相应的启动模式信息。</p>
<p>保存退出~</p>
<h4 id="54">5.4</h4>
<p>最后我们需要修改配置文件：</p>
<pre><code class="language-bash">yu@Yubuntu:~/ex4412/uboot/u-boot-2013.01.01$ vi include/configs/ex4412.h
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250414093941088-473737985.png" alt="alt text" loading="lazy"><br>
一些eMMC相关的宏配置。</p>
<p>保存退出~</p>
<h3 id="6-电源管理移植">6. 电源管理移植</h3>
<p>U-Boot源码里有关于电源管理芯片的代码与我们的板子是不匹配的，后续可能会造成内核启动时卡死。所以我们需要调整一下电源管理芯片相关的代码。</p>
<p>准备好芯片公司为我们提供的代码：<br>
<img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250414093939807-811353113.png" alt="alt text" loading="lazy"></p>
<h4 id="61">6.1</h4>
<p>把<code>pmic_s5m8767.c</code>复制到U-Boot源码中去：</p>
<pre><code class="language-bash">yu@Yubuntu:~/ex4412/uboot/pm$ cp pmic_s5m8767.c ../u-boot-2013.01.01/drivers/power/pmic/
</code></pre>
<h4 id="62">6.2</h4>
<p>修改<code>Makefile</code>文件，将<code>pmic_s5m8767.c</code>添加到编译列表中去：</p>
<pre><code class="language-bash">yu@Yubuntu:~/ex4412/uboot/u-boot-2013.01.01$ vi drivers/power/pmic/Makefile
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250414093940959-512168568.png" alt="alt text" loading="lazy"><br>
保存退出~</p>
<h4 id="63">6.3</h4>
<p>把代码内相关的函数在头文件中声明：</p>
<pre><code class="language-bash">yu@Yubuntu:~/ex4412/uboot/u-boot-2013.01.01$ vi include/power/pmic.h
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250414093940832-2138895910.png" alt="alt text" loading="lazy"><br>
保存退出~</p>
<h4 id="64">6.4</h4>
<p>修改配置文件，启用相关代码：</p>
<pre><code class="language-bash">yu@Yubuntu:~/ex4412/uboot/u-boot-2013.01.01$ vi include/configs/ex4412.h
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250414093940999-1284940171.png" alt="alt text" loading="lazy"><br>
保存退出~</p>
<h4 id="65">6.5</h4>
<p>修改板级文件，在文件中添加电源相关的初始化代码：</p>
<pre><code class="language-bash">yu@Yubuntu:~/ex4412/uboot/u-boot-2013.01.01$ vi board/samsung/ex4412/ex4412.c
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250414093940809-170230407.png" alt="alt text" loading="lazy"><br>
保存退出~</p>
<h4 id="66">6.6</h4>
<p>禁用原有的电源管理：</p>
<pre><code class="language-bash">yu@Yubuntu:~/ex4412/uboot/u-boot-2013.01.01$ vi drivers/power/Makefile
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250414093940917-751763485.png" alt="alt text" loading="lazy"><br>
保存退出~</p>
<h4 id="67">6.7</h4>
<p>在架构代码中添加对我们的电源管理代码的支持：</p>
<pre><code class="language-bash">yu@Yubuntu:~/ex4412/uboot/u-boot-2013.01.01$ vi arch/arm/cpu/armv7/s5p-common/cpu_info.c
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250414093940858-1808241978.png" alt="alt text" loading="lazy"><br>
保存退出~</p>
<h2 id="叁编译运行">叁、编译运行</h2>
<p>完成上述移植相关代码的修改后，我们尝试编译到开发板上运行。</p>
<h3 id="1-编译">1. 编译</h3>
<p>使用如下命令进行编译：</p>
<pre><code class="language-bash">yu@Yubuntu:~/ex4412/uboot/u-boot-2013.01.01$ ./build.sh
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250414093941384-57330384.png" alt="alt text" loading="lazy"><br>
编译成功~</p>
<h3 id="2-制作启动镜像">2. 制作启动镜像</h3>
<p>原本<code>u-boot-ex4412.bin</code>应该是可以直接运行的，但是SD卡有对应的格式，我们需要在其前面加上512字节的空白内容。<br>
使用如下命令制作SD卡格式的U-Boot程序镜像：</p>
<pre><code class="language-bash">yu@Yubuntu:~/ex4412/uboot/u-boot-2013.01.01$ sudo dd if=/dev/zero of=blank.bin count=1
yu@Yubuntu:~/ex4412/uboot/u-boot-2013.01.01$ cat blank.bin u-boot-ex4412.bin &gt; u-boot-ex4412-sd.bin
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250414093940916-1852082432.png" alt="alt text" loading="lazy"></p>
<h3 id="3-在开发板上运行">3. 在开发板上运行</h3>
<p>将上一步得到的<code>u-boot-ex4412-sd.bin</code>，从SD卡的0扇区开始连续写入，完成后把SD卡插到开发板上，设置开发板从SD卡启动。<br>
<img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250414093940740-1678612977.png" alt="alt text" loading="lazy"><br>
能够正常运行，但是有问题，<code>help</code>命令都提示找不到。</p>
<h3 id="4-解决问题">4. 解决问题</h3>
<blockquote>
<p>可看我的另外一篇博客：《【U-Boot】解决U-Boot的“Unknown command 'help' - try 'help'”问题》</p>
</blockquote>
<h4 id="41-解释与分析">4.1 解释与分析</h4>
<p>经研究与<code>common/command.c</code>、<code>include/u-boot.lst</code>和<code>u-boot.map</code>相关的文件代码发现，是<code>helper.mk</code>中的排序出了问题。<br>
<img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250414093940964-440877591.png" alt="alt text" loading="lazy"><br>
其中<code>$(1)</code>和<code>$(2)</code>传入的分别是<code>include/u-boot.lst</code>和编译要用到的一些<code>.o</code>文件。</p>
<p><strong>1.</strong><br>
行<code>$(1): $(2)</code>表示<code>$(1)</code>依赖于<code>$(2)</code>，<code>$(2)</code>中的内容变了之后<code>$(1)</code>要重新生成。</p>
<p><strong>2.</strong><br>
行<code>$(OBJDUMP) -h $(2)</code>表示用objdump工具把传入的所有<code>.o</code>文件的段信息输出。</p>
<p><strong>3.</strong><br>
接下来是使用<code>sed</code>（Stream Editor：流编辑器）命令对刚刚输出的段信息进行编辑，所有的<code>-n</code>表示启用安静模式，即仅打印显式指定的行。</p>
<p><strong>（1）.</strong><br>
<code>-e '/.*\.u_boot_list[^ ]\+/ ! {d;n}'</code>表示对不符合正则表达<code>.*.u_boot_list[^ ]+</code>的行删除掉，即只要包含有<code>u_boot_list</code>的行。</p>
<p>示例：<code>  4 .u_boot_list.cmd.bdinfo 00000018  00000000  00000000  00016484  2**2</code>。</p>
<p><strong>（2）.</strong><br>
<code>-e 's/.*\(\.u_boot_list[^ ]\+\).*$$$$/\1/'</code>表示只保留中间的<code>.u_boot_list[^ ]+</code>部分。</p>
<ul>
<li><code>s/a/b</code>表示把<code>a</code>替换成<code>b</code>；</li>
<li><code>$$$$</code>实际在正则表达式中为<code>$</code>，<code>makefile</code>替换后变成<code>$$</code>，<code>sed</code>替换后变成<code>$</code>，表示行尾；</li>
<li><code>\1</code>表示正则表达式捕获到的expr子模式，即括号里的内容。</li>
</ul>
<p>示例：<code>.u_boot_list.cmd.bdinfo</code>。</p>
<p><strong>（3）.</strong><br>
<code>-e 's/\.[^\.]\+$$$$//'</code>表示把符合正则表达式<code>.[^.]+$</code>的部分替换为空字符串，即删除掉。</p>
<p>示例：<code>.u_boot_list.cmd</code>。</p>
<p><strong>（4）.</strong><br>
<code>-e ':s /^.\+$$$$/ { p;s/^\(.*\)\.[^\.]*$$$$/\1/;b s }'</code>表示提取所有“上级域名”，有点复杂。</p>
<ul>
<li><code>:s</code>表示标签，后面<code>b s</code>表示跳转回<code>s</code>的位置，这样可以达到循环处理的目的。</li>
<li><code>^.\+$$$$</code>表示正则表达式<code>^.+$</code>，匹配非空行。</li>
<li><code>{...}</code>是命令块，表示在非空行上进行这样的处理。</li>
<li>命令块中<code>p</code>表示打印当前行。</li>
<li><code>^\(.*\)\.[^\.]*$$$$</code>表示正则表达式<code>^(.*).[^.]*$</code>，配合替换命令即表示删除最后一个点及这个点之后的数据。</li>
</ul>
<p>总结就是把<code>.a.b</code>这样的转换成<code>.a</code>和<code>.a.b</code>两行。</p>
<p>示例：<code>.u_boot_list.cmd</code>和<code>.u_boot_list</code>。</p>
<p><strong>（5）.</strong><br>
<code>-e 'h;s/$$$$/\a/p;g;s/$$$$/@/p;g;s/$$$$/~/p;'</code>表示在行后面分别加上<code>\a</code>、<code>@</code>和<code>~</code>。</p>
<ul>
<li><code>h</code>表示将当前行的内容复制到保持空间方便后面使用。</li>
<li><code>$$$$</code>表示正则表达式<code>$</code>，匹配行尾，则<code>s/$$$$/\a/</code>表示在行尾加上<code>\a</code>。</li>
<li><code>p</code>表示打印替换后的行，即打印<code>当前行 + \a</code>。</li>
<li><code>g</code>表示从保持空间中恢复，即恢复到在行尾加<code>\a</code>之前的状态。</li>
</ul>
<p>后面就是在原始行行尾后加<code>@</code>和<code>~</code>，然后打印。</p>
<p>示例：<code>.u_boot_list.cmd\a</code>、<code>.u_boot_list.cmd@</code>、<code>.u_boot_list.cmd~</code>、<code>.u_boot_list\a</code>、<code>.u_boot_list@</code>和<code>.u_boot_list~</code>。</p>
<p><strong>4.</strong><br>
接下来的<code>LC_COLLATE=C sort -u</code>是对之前的数据进行去重和排序，问题就出现在这里，我们来分析一下：</p>
<ul>
<li><code>LC_COLLATE=C</code>表示设置字符排序规则为C locale，即基于ASCII二进制值的排序。</li>
<li><code>sort -u</code>表示排序和去重。</li>
</ul>
<p>接着上面“3”中的示例，得到的结果如下：</p>
<pre><code class="language-lst">.u_boot_list 
.u_boot_list@
.u_boot_list~
.u_boot_list.cmd 
.u_boot_list.cmd@
.u_boot_list.cmd~
</code></pre>
<p>这个顺序就有问题，见我另外一篇博客的结论：<br>
<img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250414093941458-243451653.png" alt="alt text" loading="lazy"><br>
因此，我们很容易想到一个解决方案，我们希望把前三行和后三行，或者说三行为一个整体进行倒序以解决问题。</p>
<p>代码要整体分析，我们先看最后一个<code>sed</code>语句。</p>
<p><strong>5.</strong><br>
最后一个<code>sed</code>语句是对之前行尾的<code>\a</code>、<code>@</code>和<code>~</code>进行替换，以完成一个完整的<code>lst</code>文件。</p>
<ul>
<li><code>-e '/\a$$$$/ { s/\./_/g;s/\a$$$$/__start = .;/p; }'</code>表示在以<code>\a</code>结尾的行中，把<code>.</code>替换成<code>_</code>（<code>g</code>表示全部替换），把行尾的<code>\a</code>替换成<code>__start = .;</code>并打印。</li>
<li><code>-e '/~$$$$/ { s/\./_/g;s/~$$$$/__end = .;/p; }''</code>表示在以<code>~</code>结尾的行中，把<code>.</code>替换成<code>_</code>（<code>g</code>表示全部替换），把行尾的<code>~</code>替换成<code>__end = .;</code>并打印。</li>
<li><code>-e '/@$$$$/ { s/\(.*\)@$$$$/*(SORT(\1.*));/p }'</code>表示在以<code>@</code>结尾的行中，把除了<code>@</code>的部分放入<code>*(SORT(\1.*));</code>中（替换<code>\1</code>）并打印。</li>
</ul>
<p>接着上面“4”中的示例，得到的结果如下：</p>
<pre><code class="language-lst">_u_boot_list__start = .;
*(SORT(.u_boot_list.*));
_u_boot_list__end = .;
_u_boot_list_cmd__start = .;
*(SORT(.u_boot_list.cmd.*));_u_boot_list_cmd__end = .;
</code></pre>
<p>可以发现，是有顺序的，必须是“start”、“SORT”和“end”，因此我们需要对三行整体考虑。</p>
<h4 id="42-解决问题">4.2 解决问题</h4>
<p>我们只需要达到三行一个单位倒序的目的即可。</p>
<p>编辑<code>helper.mk</code>文件：<br>
<img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250414093941383-483316398.png" alt="alt text" loading="lazy"><br>
保存退出~</p>
<p>然后我们还要改<code>Makefile</code>文件，把调用的函数改改：<br>
<img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250414093940949-1906600162.png" alt="alt text" loading="lazy"><br>
改成调用我们刚刚修改好的<code>make_u_boot_list_reverse</code>，保存退出~</p>
<h3 id="5-再次运行">5. 再次运行</h3>
<p>重新编译并制作SD卡镜像：<br>
<img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250414093941436-65198432.png" alt="alt text" loading="lazy"></p>
<p>写入到SD卡上再在开发板上运行：<br>
<img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250414093940948-1998425089.png" alt="alt text" loading="lazy"><br>
成功~</p>
<p>再看看能正常从TFTP服务器上下载并启动Linux不：<br>
<img src="https://img2024.cnblogs.com/blog/2010295/202504/2010295-20250414093941170-1979267988.png" alt="alt text" loading="lazy"><br>
一切顺利~</p>
<hr>
<p>至此，U-Boot成功移植~</p>
<h2 id="肆参考资料">肆、参考资料：</h2>
<ol>
<li><a href="https://www.jyshare.com/front-end/854/" target="_blank" rel="noopener nofollow">https://www.jyshare.com/front-end/854/</a></li>
<li><a href="https://www.cnblogs.com/minuhy/p/18811980" target="_blank">https://www.cnblogs.com/minuhy/p/18811980</a></li>
<li><a href="https://lxblog.com/qianwen/share?shareId=7ab98f18-4b94-436e-bbfc-10022aa87326" target="_blank" rel="noopener nofollow">https://lxblog.com/qianwen/share?shareId=7ab98f18-4b94-436e-bbfc-10022aa87326</a></li>
<li><a href="https://blog.csdn.net/darnell888/article/details/118973763" target="_blank" rel="noopener nofollow">https://blog.csdn.net/darnell888/article/details/118973763</a></li>
<li><a href="https://github.com/u-boot/u-boot/tree/master" target="_blank" rel="noopener nofollow">https://github.com/u-boot/u-boot/tree/master</a></li>
<li><a href="https://www.runoob.com/linux/linux-comm-cp.html" target="_blank" rel="noopener nofollow">https://www.runoob.com/linux/linux-comm-cp.html</a></li>
<li><a href="https://www.runoob.com/linux/linux-comm-sed.html" target="_blank" rel="noopener nofollow">https://www.runoob.com/linux/linux-comm-sed.html</a></li>
<li><a href="https://www.doubao.com/thread/w40d04aaeeb82c564" target="_blank" rel="noopener nofollow">https://www.doubao.com/thread/w40d04aaeeb82c564</a></li>
<li><a href="https://www.doubao.com/thread/w7d9ddf38f957e916" target="_blank" rel="noopener nofollow">https://www.doubao.com/thread/w7d9ddf38f957e916</a></li>
<li><a href="https://www.doubao.com/thread/wd0b531c77beb984e" target="_blank" rel="noopener nofollow">https://www.doubao.com/thread/wd0b531c77beb984e</a></li>
<li><a href="https://www.doubao.com/thread/wc35b8284ddfc468a" target="_blank" rel="noopener nofollow">https://www.doubao.com/thread/wc35b8284ddfc468a</a></li>
<li><a href="https://www.doubao.com/thread/wdda5f7c62f0d8423" target="_blank" rel="noopener nofollow">https://www.doubao.com/thread/wdda5f7c62f0d8423</a></li>
</ol>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.6938723368368056" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-14 09:42">2025-04-14 09:41</span>&nbsp;
<a href="https://www.cnblogs.com/minuhy">清风来叙</a>&nbsp;
阅读(<span id="post_view_count">62</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18824208);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18824208', targetLink: 'https://www.cnblogs.com/minuhy/p/18824208', title: '【Linux】基于Exynos4412的U-Boot引导程序移植' })">举报</a>
</div>
        