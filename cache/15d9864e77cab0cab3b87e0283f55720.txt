
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/mingupupu/p/19033566" title="发布于 2025-08-12 12:49">
    <span role="heading" aria-level="2">WPF优秀项目推荐：Stylet 一个非常轻量但强大的 ViewModel-First MVVM 框架</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="stylet介绍">Stylet介绍</h2>
<p>Stylet 是一个小型但功能强大的 ViewModel 优先的 MVVM 框架，适用于 WPF (.NET 4.5.2+ 和 .NET Core 3.0+)，它允许您编写易于测试的可维护和可扩展的代码。</p>
<p>Stylet 的目标是：</p>
<p>解决没有框架时阻碍 MVVM 开发的障碍、烦恼和不便，使用简单但强大的概念。</p>
<p>对于第一次接触您项目的人员来说是显而易见的：几乎没有什么魔法。</p>
<p>易于验证/验证。代码行数较少，并附有非常全面的测试套件。代码编写良好且文档齐全。</p>
<p>提供灵活性同时提供合理的默认值。框架的几乎任何部分都可以根据需要重写，但您可能不需要这样做。</p>
<p>它受到 Caliburn.Micro 的启发，分享了其许多概念，但去除了大多数魔法（用更强大的替代方案替换），并通过仅针对 MVVM、WPF 和 .NET 4.5.2 大幅简化了部分功能。</p>
<p>GitHub地址：<a href="https://github.com/canton7/Stylet" target="_blank" rel="noopener nofollow">https://github.com/canton7/Stylet</a></p>
<p><img alt="image-20250811225734949" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3288240/202508/3288240-20250812124906085-2065294095.png" class="lazyload"></p>
<h2 id="如何快速入门">如何快速入门</h2>
<p>第一，有一个Samples，克隆代码之后，可以先打开这个示例项目。</p>
<p>通过运行这几个项目，可以快速了解Stylet提供了什么功能。</p>
<p><img alt="image-20250811230504582" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3288240/202508/3288240-20250812124905882-1638296285.png" class="lazyload"></p>
<p>第二，查看官方文档。</p>
<p>Style的官方文档地址：<a href="https://github.com/canton7/Stylet/wiki" target="_blank" rel="noopener nofollow">https://github.com/canton7/Stylet/wiki</a></p>
<p>作者通过这几个方面进行了说明：</p>
<p><img alt="image-20250811230613931" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3288240/202508/3288240-20250812124906160-1766880681.png" class="lazyload"></p>
<p>现在就一起简单地看看Stylet的一些概念与设计！！</p>
<p>首先最重要的就是<strong>ViewModel优先！！</strong></p>
<p>经典的MVVM结构中，视图知道如何实例化其ViewModel，而ViewModel通常不会直接通信，这种模式被称为视图优先。然而，反转这种模式——自己实例化ViewModel，然后让视图自动附加——提供了许多优势，使你可以以一种非常熟悉的方式组合你的ViewModel。这种ViewModel优先的方法是Stylet唯一支持的方法。</p>
<p>在Stylet中可以通过ViewModel自动绑定到对应的View，这样的话，就可以这样写：</p>
<p><img alt="image-20250811231018609" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3288240/202508/3288240-20250812124905857-1490507708.png" class="lazyload"></p>
<p>在xaml文件中可以通过ViewModel找到对应的视图，非常方便！！</p>
<p>第二点就是<strong>Action！！</strong></p>
<p>WPF 中使用的 ICommand 接口功能强大，但在 MVVM 架构中使用时显得笨拙。让 ViewModel 中响应按钮点击等操作的方法表示为属性而不是方法似乎不合逻辑。一个简单的 <button command="{s:Action DoSomething}"> 将导致每次点击按钮时调用 ViewModel 中的 DoSomething()。此外，如果你有一个名为 CanDoSomething 的布尔属性，它会被观察并用于确定按钮是否应启用或禁用。<p></p>
<p>Action还可以与事件一起使用，例如 </p></button><button mouseenter="{s:Action DoSomethingElse}">。<p></p>
<p>在WPF中如果想要实现原生的命令还是挺麻烦的，虽然现在也有很多库可以简化了，但是看到Stylet这样的写法还是会被惊艳到，真的很方便！！</p>
<p>比如你在ViewModel中写了一个这样的方法：</p>
<pre><code class="language-csharp"> public void NavigateToPage1() =&gt; this.navigationController.NavigateToPage1();
</code></pre>
<p>在xaml中，你只要这样写就可以绑定上：</p>
<p><img alt="image-20250811231739972" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3288240/202508/3288240-20250812124905846-840448160.png" class="lazyload"></p>
<p>第三点就是<strong>属性通知的简化写法</strong></p>
<p><img alt="image-20250811231851653" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3288240/202508/3288240-20250812124905862-516920281.png" class="lazyload"></p>
<p>Stylet自己封装了一个SetAndNotify，简洁了一点。</p>
<p>第四点就是<strong>实现了一个简单的IOC容器</strong>，在程序开始时会扫描程序集，把ViewModel都自动瞬态注入进去，因此你可以在Bootstrtapper中不需要自己显示注册，这样也方便了很多，体现了约定大于配置的思想吧。</p>
<p>当然也可以自己显示注册，比如这样的写法：</p>
<pre><code class="language-csharp"> protected override void ConfigureIoC(IStyletIoCBuilder builder)
 {
     builder.Bind&lt;NavigationController&gt;().And&lt;INavigationController&gt;().To&lt;NavigationController&gt;().InSingletonScope();     
 }
</code></pre>
<p>第5点就是<strong>实现了一个基类Screen</strong></p>
<p><img alt="image-20250812122544788" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3288240/202508/3288240-20250812124905865-1230122432.png" class="lazyload"></p>
<p><code>Screen</code> 实现了 <strong><code>IActivate</code>、<code>IDeactivate</code>、<code>IGuardClose</code></strong> 等接口，允许你在视图模型激活、关闭时执行逻辑。</p>
<table>
<thead>
<tr>
<th style="text-align: left">方法/属性</th>
<th style="text-align: left">作用说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left"><code>OnActivate()</code></td>
<td style="text-align: left">当 ViewModel 被导航到或激活时调用</td>
</tr>
<tr>
<td style="text-align: left"><code>OnDeactivate(bool close)</code></td>
<td style="text-align: left">当 ViewModel 被关闭或导航销毁时调用</td>
</tr>
<tr>
<td style="text-align: left"><code>TryClose(bool? dialogResult = null)</code></td>
<td style="text-align: left">请求关闭当前 Screen</td>
</tr>
</tbody>
</table>
<p>第六点是<strong>提供了一个WindowManager</strong></p>
<p><img alt="image-20250812123054483" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3288240/202508/3288240-20250812124906032-1660424539.png" class="lazyload"></p>
<p>Stylet已经自动注册了，可以直接通过构造函数注入。</p>
<p><img alt="image-20250812123149754" loading="lazy" data-src="https://img2024.cnblogs.com/blog/3288240/202508/3288240-20250812124905844-251514620.png" class="lazyload"></p>
<p>使用也很简单，有ShowDialog，这个会阻塞，适合需要用户确认才执行的情况；有ShowWindow，这个不会阻塞会直接显示一个窗体。</p>
<p>需要注意的是ViewModel对应的View需要继承自Window。</p>
<p>第7点是<strong>自带了一个The EventAggregator</strong></p>
<p>也是跟WindowManager开箱即用，非常方便。</p>
<h2 id="最后">最后</h2>
<p>虽然这个框架已经有一年多没有更新了，但是说实话这个框架用来构建中小型项目还是很方便的，感谢开源者的付出，感兴趣的朋友也可以探索一下这个框架。这个框架确实配的上它的简介：Stylet 一个非常轻量但强大的 ViewModel-First MVVM 框架。</p>
</button></p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-08-12 12:49">2025-08-12 12:49</span>&nbsp;
<a href="https://www.cnblogs.com/mingupupu">mingupupup</a>&nbsp;
阅读(<span id="post_view_count">51</span>)&nbsp;
评论(<span id="post_comment_count">1</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19033566);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19033566', targetLink: 'https://www.cnblogs.com/mingupupu/p/19033566', title: 'WPF优秀项目推荐：Stylet 一个非常轻量但强大的 ViewModel-First MVVM 框架' })">举报</a>
</div>
        