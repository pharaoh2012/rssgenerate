
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/seven97-top/p/18892482" title="发布于 2025-05-27 09:00">
    <span role="heading" aria-level="2">Linux常用命令介绍-文档编辑</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="cat命令---在终端设备上显示文件内容">cat命令 - 在终端设备上显示文件内容</h2>
<p>cat命令来自英文词组concatenate files and print的缩写，其功能是在终端设备上显示文件内容。在Linux系统中有很多用于查看文件内容的命令，例如more、tail、head等，每个命令都有各自的特点。cat命令适合查看内容较少的纯文本文件。 对于内容较多的文件，使用cat命令查看后会在屏幕上快速滚屏，用户往往看不清所显示的具体内容，只好按Ctrl+C组合键中断命令执行，所以对于大文件，干脆用more命令‍显示吧。</p>
<h3 id="语法格式">语法格式</h3>
<pre><code class="language-shell">cat [选项] [文件]
</code></pre>
<p>常用参数：</p>
<ul>
<li><code>-n</code>：显示行号，会在输出的每一行前加上行号。</li>
<li><code>-b</code>：显示行号，但只对非空行进行编号。</li>
<li><code>-s</code>：压缩连续的空行，只显示一个空行。</li>
<li><code>-E</code>：在每一行的末尾显示 <code>$</code> 符号。</li>
<li><code>-T</code>：将 Tab 字符显示为 <code>^I</code>。</li>
<li><code>-v</code>：显示一些非打印字符。</li>
</ul>
<p><strong>使用说明：</strong></p>
<ul>
<li>显示文件内容：<code>cat filename</code> 会将指定文件的内容输出到终端上。</li>
<li>连接文件：<code>cat file1 file2 &gt; combined_file</code> 可以将 file1 和 file2 的内容连接起来，并将结果输出到 combined_file 中。</li>
<li>创建文件：可以使用 <code>cat</code> 命令来创建文件，例如 <code>cat &gt; filename</code>，然后你可以输入文本，按 <code>Ctrl+D</code> 来保存并退出。</li>
<li>在终端显示文件：可以将 <code>cat</code> 与管道（<code>|</code>）结合使用，用来显示其他命令的输出，例如 <code>ls -l | cat</code> 会将 <code>ls -l</code> 的输出通过 <code>cat</code> 打印到终端上。</li>
</ul>
<h3 id="实例">实例</h3>
<p><strong>查看文件内容：</strong>显示文件 filename 的内容。</p>
<pre><code class="language-shell">cat filename
</code></pre>
<p><strong>创建文件：</strong>将标准输入重定向到文件 filename，覆盖该文件的内容。</p>
<pre><code class="language-shell">cat &gt; filename
</code></pre>
<p><strong>追加内容到文件：</strong>将标准输入追加到文件 filename 的末尾。</p>
<pre><code class="language-shell">cat &gt;&gt; filename
</code></pre>
<p><strong>连接文件：</strong>将 file1 和 file2 的内容合并到 file3 中。</p>
<pre><code class="language-shell">cat file1 file2 &gt; file3
</code></pre>
<p><strong>显示多个文件的内容：</strong>同时显示 file1 和 file2 的内容。</p>
<pre><code class="language-shell">cat file1 file2
</code></pre>
<p><strong>使用管道：</strong>将 cat 命令的输出作为另一个命令的输入。</p>
<pre><code class="language-shell">cat filename | command
</code></pre>
<p><strong>查看文件的最后几行：</strong>显示文件 filename 的最后 10 行。</p>
<pre><code class="language-shell">cat filename | tail -n 10
</code></pre>
<p><strong>使用 -n 选项显示行号：</strong>显示文件 filename 的内容，并在每行的前面加上行号。</p>
<pre><code class="language-shell">cat -n filename
</code></pre>
<p>使用 -b 选项仅显示非空行的行号：</p>
<pre><code class="language-shell">cat -b filename
</code></pre>
<p><strong>使用 -s 选项合并空行：</strong>显示文件 filename 的内容，并合并连续的空行。</p>
<pre><code class="language-shell">cat -s filename
</code></pre>
<p><strong>使用 -t 选项显示制表符：</strong>显示文件 filename 的内容，并用 ^I 表示制表符。</p>
<pre><code class="language-shell">cat -t filename
</code></pre>
<p><strong>使用 -e 选项显示行结束符：</strong>显示文件 filename 的内容，并用 $ 表示行结束。</p>
<pre><code class="language-shell">cat -e filename
</code></pre>
<p>把 textfile1 的文档内容加上行号后输入 textfile2 这个文档里：</p>
<pre><code class="language-shell">cat -n textfile1 &gt; textfile2
</code></pre>
<p>把 textfile1 和 textfile2 的文档内容加上行号（空白行不加）之后将内容附加到 textfile3 文档里：</p>
<pre><code class="language-shell">cat -b textfile1 textfile2 &gt;&gt; textfile3
</code></pre>
<p>清空 /etc/test.txt 文档内容：</p>
<pre><code class="language-shell">cat /dev/null &gt; /etc/test.txt
</code></pre>
<p>cat 也可以用来制作镜像文件。例如要制作软盘的镜像文件，将软盘放好后输入：</p>
<pre><code class="language-shell">cat /dev/fd0 &gt; OUTFILE
</code></pre>
<p>相反的，如果想把 image file 写到软盘，输入：</p>
<pre><code class="language-shell">cat IMG_FILE &gt; /dev/fd0
</code></pre>
<p><strong>注</strong>：</p>
<ul>
<li>OUTFILE ：指输出的镜像文件名。</li>
<li>IMG_FILE ：指镜像文件。</li>
<li>若从镜像文件写回 device 时，device 容量需与相当。</li>
<li>通常用制作开机磁片。</li>
</ul>
<h2 id="rm命令---删除文件或目录">rm命令 - 删除文件或目录</h2>
<p>rm命令来自英文单词remove的缩写，中文译为“消除”，其功能是删除文件或目录，一次可以删除多个文件，或递归删除目录及其内的所有子文件。</p>
<p>rm也是一个很危险的命令，使用的时候要特别当心，尤其对于新手更要格外注意。例如，执行rm -rf /*命令会清空系统中所有的文件，甚至无法恢复回来。所以我们在执行之前一定要再次确认在在哪个目录中、到底要删除什么文件，考虑好后再敲击Enter键，要时刻保持清醒的头‍脑。</p>
<h3 id="语法格式-1">语法格式</h3>
<pre><code class="language-shell">rm [options] name...
</code></pre>
<p><strong>常用参数</strong>：</p>
<ul>
<li>-i ：删除前逐一询问确认。</li>
<li>-f ：即使原档案属性设为唯读，亦直接删除，无需逐一确认。</li>
<li>-r ：将目录及以下之档案亦逐一删除。</li>
</ul>
<h3 id="实例-1">实例</h3>
<p>删除文件可以直接使用rm命令，若删除目录则必须配合选项"-r"，例如：</p>
<pre><code class="language-shell"># rm  test.txt 
rm：是否删除 一般文件 "test.txt"? y  
# rm  homework  
rm: 无法删除目录"homework": 是一个目录  
# rm  -r  homework  
rm：是否删除 目录 "homework"? y 
</code></pre>
<p>删除当前目录下的所有文件及目录，命令行为：</p>
<pre><code class="language-shell">rm  -r  * 
</code></pre>
<p>文件一旦通过rm命令删除，则无法恢复，所以必须格外小心地使用该命令。</p>
<h2 id="echo命令---输出字符串或提取后的变量值">echo命令 - 输出字符串或提取后的变量值</h2>
<p>echo命令的功能是在终端设备上输出指定字符串或变量提取后的值，能够给用户一些简单的提醒信息，亦可以将输出的指定字符串内容同管道符一起传递给后续命令作为标准输入信息进行二次处理，还可以同输出重定向符一起操作，将信息直接写入文件。如需提取变量值，需在变量名称前加入$符号，变量名称一般均为大写形‍式。</p>
<h3 id="语法格式-2">语法格式：</h3>
<pre><code class="language-shell">echo string
</code></pre>
<h3 id="实例-2">实例</h3>
<ol>
<li>显示普通字符串:</li>
</ol>
<pre><code class="language-shell">echo "It is a test"
</code></pre>
<p>这里的双引号完全可以省略，以下命令与上面实例效果一致：</p>
<pre><code class="language-shell">echo It is a test
</code></pre>
<ol start="2">
<li>显示转义字符</li>
</ol>
<pre><code class="language-shell">echo "\"It is a test\""
</code></pre>
<p>结果将是:</p>
<pre><code class="language-shell">"It is a test"
</code></pre>
<p>同样，双引号也可以省略</p>
<ol start="3">
<li>显示变量</li>
</ol>
<p>read 命令从标准输入中读取一行,并把输入行的每个字段的值指定给 shell 变量</p>
<pre><code class="language-shell">#!/bin/sh
read name 
echo "$name It is a test"
</code></pre>
<p>以上代码保存为 test.sh，name 接收标准输入的变量，结果将是:</p>
<pre><code class="language-shell">[root@www ~]# sh test.sh
OK                     #标准输入
OK It is a test        #输出
</code></pre>
<ol start="4">
<li>显示换行</li>
</ol>
<pre><code class="language-shell">echo -e "OK! \n" # -e 开启转义
echo "It is a test"
</code></pre>
<p>输出结果：</p>
<pre><code class="language-shell">OK!

It is a test
</code></pre>
<ol start="5">
<li>显示不换行</li>
</ol>
<pre><code class="language-shell">#!/bin/sh
echo -e "OK! \c" # -e 开启转义 \c 不换行
echo "It is a test"
</code></pre>
<p>输出结果：</p>
<pre><code class="language-shell">OK! It is a test
</code></pre>
<ol start="6">
<li>显示结果定向至文件</li>
</ol>
<pre><code class="language-shell">echo "It is a test" &gt; myfile
</code></pre>
<ol start="7">
<li>原样输出字符串，不进行转义或取变量(用单引号)</li>
</ol>
<pre><code class="language-shell">echo '$name\"'
</code></pre>
<p>输出结果：</p>
<pre><code class="language-shell">$name\"
</code></pre>
<ol start="8">
<li>显示命令执行结果</li>
</ol>
<pre><code class="language-shell">echo `date`
</code></pre>
<p><strong>注意：</strong> 这里使用的是反引号 <strong>`</strong>, 而不是单引号 <strong>'</strong>。</p>
<p>结果将显示当前日期</p>
<pre><code class="language-shell">Thu Jul 24 10:08:46 CST 2014
</code></pre>
<h2 id="grep命令---强大的文本搜索工具">grep命令 - 强大的文本搜索工具</h2>
<p>grep命令来自英文词组global search regular expression and print out the line的缩写，意思是用于全面搜索的正则表达式，并将结果输出。人们通常会将grep命令与正则表达式搭配使用，参数作为搜索过程中的补充或对输出结果的筛选，命令模式十分灵‍活。</p>
<p>与之容易混淆的是egrep命令和fgrep命令。如果把grep命令当作标准搜索命令，那么egrep则是扩展搜索命令，等价于grep -E命令，支持扩展的正则表达式。而fgrep则是快速搜索命令，等价于grep -F命令，不支持正则表达式，直接按照字符串内容进行匹配。</p>
<h3 id="语法格式-3">语法格式</h3>
<pre><code class="language-shell">grep [options] pattern [files]
</code></pre>
<ul>
<li>pattern - 表示要查找的字符串或正则表达式。</li>
<li>files - 表示要查找的文件名，可以同时查找多个文件，如果省略 files 参数，则默认从标准输入中读取数据。</li>
</ul>
<p>常用参数：</p>
<ul>
<li><code>-i</code>：忽略大小写进行匹配。</li>
<li><code>-v</code>：反向查找，只打印不匹配的行。</li>
<li><code>-n</code>：显示匹配行的行号。</li>
<li><code>-r</code>：递归查找子目录中的文件。</li>
<li><code>-l</code>：只打印匹配的文件名。</li>
<li><code>-c</code>：只打印匹配的行数。</li>
</ul>
<p>更多参数说明：</p>
<ul>
<li><strong>-a 或 --text</strong> : 不要忽略二进制的数据。</li>
<li><strong>-A&lt;显示行数&gt; 或 --after-context=&lt;显示行数&gt;</strong> : 除了显示符合范本样式的那一列之外，并显示该行之后的内容。</li>
<li><strong>-b 或 --byte-offset</strong> : 在显示符合样式的那一行之前，标示出该行第一个字符的编号。</li>
<li><strong>-B&lt;显示行数&gt; 或 --before-context=&lt;显示行数&gt;</strong> : 除了显示符合样式的那一行之外，并显示该行之前的内容。</li>
<li><strong>-c 或 --count</strong> : 计算符合样式的列数。</li>
<li><strong>-C&lt;显示行数&gt; 或 --context=&lt;显示行数&gt;或-&lt;显示行数&gt;</strong> : 除了显示符合样式的那一行之外，并显示该行之前后的内容。</li>
<li><strong>-d &lt;动作&gt; 或 --directories=&lt;动作&gt;</strong> : 当指定要查找的是目录而非文件时，必须使用这项参数，否则grep指令将回报信息并停止动作。</li>
<li><strong>-e&lt;范本样式&gt; 或 --regexp=&lt;范本样式&gt;</strong> : 指定字符串做为查找文件内容的样式。</li>
<li><strong>-E 或 --extended-regexp</strong> : 将样式为延伸的正则表达式来使用。</li>
<li><strong>-f&lt;规则文件&gt; 或 --file=&lt;规则文件&gt;</strong> : 指定规则文件，其内容含有一个或多个规则样式，让grep查找符合规则条件的文件内容，格式为每行一个规则样式。</li>
<li><strong>-F 或 --fixed-regexp</strong> : 将样式视为固定字符串的列表。</li>
<li><strong>-G 或 --basic-regexp</strong> : 将样式视为普通的表示法来使用。</li>
<li><strong>-h 或 --no-filename</strong> : 在显示符合样式的那一行之前，不标示该行所属的文件名称。</li>
<li><strong>-H 或 --with-filename</strong> : 在显示符合样式的那一行之前，表示该行所属的文件名称。</li>
<li><strong>-i 或 --ignore-case</strong> : 忽略字符大小写的差别。</li>
<li><strong>-l 或 --file-with-matches</strong> : 列出文件内容符合指定的样式的文件名称。</li>
<li><strong>-L 或 --files-without-match</strong> : 列出文件内容不符合指定的样式的文件名称。</li>
<li><strong>-n 或 --line-number</strong> : 在显示符合样式的那一行之前，标示出该行的列数编号。</li>
<li><strong>-o 或 --only-matching</strong> : 只显示匹配PATTERN 部分。</li>
<li><strong>-q 或 --quiet或--silent</strong> : 不显示任何信息。</li>
<li><strong>-r 或 --recursive</strong> : 此参数的效果和指定"-d recurse"参数相同。</li>
<li><strong>-s 或 --no-messages</strong> : 不显示错误信息。</li>
<li><strong>-v 或 --invert-match</strong> : 显示不包含匹配文本的所有行。</li>
<li><strong>-V 或 --version</strong> : 显示版本信息。</li>
<li><strong>-w 或 --word-regexp</strong> : 只显示全字符合的列。</li>
<li><strong>-x --line-regexp</strong> : 只显示全列符合的列。</li>
<li><strong>-y</strong> : 此参数的效果和指定"-i"参数相同。</li>
</ul>
<h3 id="实例-3">实例</h3>
<ol>
<li>在文件 file.txt 中查找字符串 "hello"，并打印匹配的行：</li>
</ol>
<pre><code class="language-shell">grep hello file.txt
</code></pre>
<ol start="2">
<li>在文件夹 dir 中递归查找所有文件中匹配正则表达式 "pattern" 的行，并打印匹配行所在的文件名和行号：</li>
</ol>
<pre><code class="language-shell">grep -r -n pattern dir/
</code></pre>
<ol start="3">
<li>在标准输入中查找字符串 "world"，并只打印匹配的行数：</li>
</ol>
<pre><code class="language-shell">echo "hello world" | grep -c world
</code></pre>
<ol start="4">
<li>在当前目录中，查找后缀有 file 字样的文件中包含 test 字符串的文件，并打印出该字符串的行。此时，可以使用如下命令：</li>
</ol>
<pre><code class="language-shell">grep test *file 
</code></pre>
<p>结果如下所示：</p>
<pre><code class="language-shell">$ grep test test* #查找前缀有“test”的文件包含“test”字符串的文件  
testfile1:This a Linux testfile! #列出testfile1 文件中包含test字符的行  
testfile_2:This is a linux testfile! #列出testfile_2 文件中包含test字符的行  
testfile_2:Linux test #列出testfile_2 文件中包含test字符的行 
</code></pre>
<ol start="5">
<li>以递归的方式查找符合条件的文件。例如，查找指定目录/etc/acpi 及其子目录（如果存在子目录的话）下所有文件中包含字符串"update"的文件，并打印出该字符串所在行的内容，使用的命令为：</li>
</ol>
<pre><code class="language-shell">grep -r update /etc/acpi 
</code></pre>
<p>输出结果如下：</p>
<pre><code class="language-shell">$ grep -r update /etc/acpi #以递归的方式查找“etc/acpi”  
#下包含“update”的文件  
/etc/acpi/ac.d/85-anacron.sh:# (Things like the slocate updatedb cause a lot of IO.)  
Rather than  
/etc/acpi/resume.d/85-anacron.sh:# (Things like the slocate updatedb cause a lot of  
IO.) Rather than  
/etc/acpi/events/thinkpad-cmos:action=/usr/sbin/thinkpad-keys--update 
</code></pre>
<ol start="6">
<li>反向查找。前面各个例子是查找并打印出符合条件的行，通过"-v"参数可以打印出不符合条件行的内容。</li>
</ol>
<p>查找文件名中包含 test 的文件中不包含test 的行，此时，使用的命令为：</p>
<pre><code class="language-shell">grep -v test *test*
</code></pre>
<p>结果如下所示：</p>
<pre><code class="language-shell">$ grep-v test* #查找文件名中包含test 的文件中不包含test 的行  
testfile1:helLinux!  
testfile1:Linis a free Unix-type operating system.  
testfile1:Lin  
testfile_1:HELLO LINUX!  
testfile_1:LINUX IS A FREE UNIX-TYPE OPTERATING SYSTEM.  
testfile_1:THIS IS A LINUX TESTFILE!  
testfile_2:HELLO LINUX!  
testfile_2:Linux is a free unix-type opterating system.  
</code></pre>
<h2 id="tail命令---查看文件尾部内容">tail命令 - 查看文件尾部内容</h2>
<p>tail命令的功能是查看文件尾部内容，例如默认会在终端界面上显示指定文件的末尾10行，如果指定了多个文件，则会在显示的每个文件内容前面加上文件名来加以区分。高阶玩法的-f参数的作用是持续显示文件的尾部最新内容，类似于机场候机厅的大屏幕，总会把最新的消息展示给用户，对阅读日志文件尤为适合，再也不需要手动刷新了。</p>
<h3 id="语法格式-4">语法格式</h3>
<pre><code class="language-shell">tail [参数] [文件]  
</code></pre>
<p>常用参数：</p>
<ul>
<li>-f： 循环读取</li>
<li>-q ：不显示处理信息</li>
<li>-v ：显示详细的处理信息</li>
<li>-c&lt;数目&gt; ：显示的字节数</li>
<li>-n&lt;行数&gt; ：显示文件的尾部 n 行内容</li>
<li>--pid=PID ：与-f合用,表示在进程ID,PID死掉之后结束</li>
<li>-q, --quiet, --silent ：从不输出给出文件名的首部</li>
<li>-s, --sleep-interval=S ：与-f合用,表示在每次反复的间隔休眠S秒</li>
</ul>
<h3 id="实例-4">实例</h3>
<p>要显示 notes.log 文件的最后 10 行，请输入以下命令：</p>
<pre><code class="language-shell">tail notes.log         # 默认显示最后 10 行
</code></pre>
<p>要跟踪名为 notes.log 的文件的增长情况，请输入以下命令：</p>
<pre><code class="language-shell">tail -f notes.log
</code></pre>
<p>此命令显示 notes.log 文件的最后 10 行。当将某些行添加至 notes.log 文件时，tail 命令会继续显示这些行。 显示一直继续，直到您按下（Ctrl-C）组合键停止显示。</p>
<p>显示文件 notes.log 的内容，从第 20 行至文件末尾:</p>
<pre><code class="language-shell">tail -n +20 notes.log
</code></pre>
<p>显示文件 notes.log 的最后 10 个字符:</p>
<pre><code class="language-shell">tail -c 10 notes.log
</code></pre>
<h2 id="rmdir命令---删除空目录文件">rmdir命令 - 删除空目录文件</h2>
<p>rmdir命令来自英文词组remove directory的缩写，其功能是删除空目录文件。rmdir命令仅能删除空内容的目录文件，如需删除非空目录时，需要使用带有-R参数的rm命令进行操作。而rmdir命令的递归删除操作（-p参数使用）并不意味着能删除目录中已有的文件，而是要求每个子目录都必须是空的。</p>
<h3 id="语法格式-5">语法格式</h3>
<pre><code class="language-shell">rmdir [-p] dirName
</code></pre>
<ul>
<li>-p 是当子目录被删除后使它也成为空目录的话，则顺便一并删除。</li>
</ul>
<h3 id="实例-5">实例</h3>
<p>将工作目录下，名为 AAA 的子目录删除 :</p>
<pre><code class="language-shell">rmdir AAA
</code></pre>
<p>在工作目录下的 BBB 目录中，删除名为 Test 的子目录。若 Test 删除后，BBB 目录成为空目录，则 BBB 亦予删除。</p>
<pre><code class="language-shell">rmdir -p BBB/Test
</code></pre>
<h2 id="sed命令---批量编辑文本文件">sed命令 - 批量编辑文本文件</h2>
<p>sed命令来自英文词组stream editor的缩写，其功能是利用语法/脚本对文本文件进行批量的编辑操作。sed命令最初由贝尔实验室开发，后被众多Linux系统集成，能够通过正则表达式对文件进行批量编辑，让重复性的工作不再浪费时间。</p>
<h3 id="语法格式-6">语法格式</h3>
<pre><code class="language-shell">sed [-hnV][-e&lt;script&gt;][-f&lt;script文件&gt;][文本文件]
</code></pre>
<p>常用参数：</p>
<ul>
<li>-e&lt;script&gt;或--expression=&lt;script&gt; 以选项中指定的script来处理输入的文本文件。</li>
<li>-f&lt;script文件&gt;或--file=&lt;script文件&gt; 以选项中指定的script文件来处理输入的文本文件。</li>
<li>-h或--help 显示帮助。</li>
<li>-n或--quiet或--silent 仅显示script处理后的结果。</li>
<li>-V或--version 显示版本信息。</li>
</ul>
<p>动作说明：</p>
<ul>
<li>a ：新增， a 的后面可以接字串，而这些字串会在新的一行出现(目前的下一行)～</li>
<li>c ：取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行！</li>
<li>d ：删除，因为是删除啊，所以 d 后面通常不接任何东东；</li>
<li>i ：插入， i 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)；</li>
<li>p ：打印，亦即将某个选择的数据印出。通常 p 会与参数 sed -n 一起运行～</li>
<li>s ：取代，可以直接进行取代的工作哩！通常这个 s 的动作可以搭配正则表达式！例如 1,20s/old/new/g 就是啦！</li>
</ul>
<h3 id="实例-6">实例</h3>
<p>我们先创建一个 <strong>testfile</strong> 文件，内容如下：</p>
<pre><code class="language-shell">$ cat testfile #查看testfile 中的内容  
HELLO LINUX!  
Linux is a free unix-type opterating system.  
This is a linux testfile!  
Linux test 
Google
Taobao
Runoob
Tesetfile
Wiki
</code></pre>
<ol>
<li>在 <strong>testfile</strong> 文件的第四行后添加一行，并将结果输出到标准输出，在命令行提示符下输入如下命令：</li>
</ol>
<pre><code class="language-shell">sed -e 4a\newLine testfile 
</code></pre>
<p>使用 <strong>sed</strong> 命令后，输出结果如下：</p>
<pre><code class="language-shell">$ sed -e 4a\newLine testfile 
HELLO LINUX!  
Linux is a free unix-type opterating system.  
This is a linux testfile!  
Linux test 
newLine
Google
Taobao
Runoob
Tesetfile
Wiki
</code></pre>
<ol start="2">
<li>以行为单位的新增/删除：</li>
</ol>
<p>将 <strong>testfile</strong> 的内容列出并且列印行号，同时，请将第 2~5 行删除！</p>
<pre><code class="language-shell">$ nl testfile | sed '2,5d'
     1  HELLO LINUX!  
     6  Taobao
     7  Runoob
     8  Tesetfile
     9  Wiki
</code></pre>
<p>sed 的动作为 <strong>2,5d</strong>，那个 <strong>d</strong> 是删除的意思，因为删除了 2-5 行，所以显示的数据就没有 2-5 行了， 另外，原本应该是要下达 sed -e 才对，但没有 -e 也是可以的，同时也要注意的是， sed 后面接的动作，请务必以 <strong>'...'</strong> 两个单引号括住喔！</p>
<p>只要删除第 2 行：</p>
<pre><code class="language-shell">$ nl testfile | sed '2d' 
     1  HELLO LINUX!  
     3  This is a linux testfile!  
     4  Linux test 
     5  Google
     6  Taobao
     7  Runoob
     8  Tesetfile
     9  Wiki
</code></pre>
<p>要删除第 3 到最后一行：</p>
<pre><code class="language-shell">$ nl testfile | sed '3,$d' 
     1  HELLO LINUX!  
     2  Linux is a free unix-type opterating system.  
</code></pre>
<p>在第二行后(即加在第三行) 加上<strong>drink tea?</strong> 字样：</p>
<pre><code class="language-shell">$ nl testfile | sed '2a drink tea'
     1  HELLO LINUX!  
     2  Linux is a free unix-type opterating system.  
drink tea
     3  This is a linux testfile!  
     4  Linux test 
     5  Google
     6  Taobao
     7  Runoob
     8  Tesetfile
     9  Wiki
</code></pre>
<p>如果是要在第二行前，命令如下：</p>
<pre><code class="language-shell">$ nl testfile | sed '2i drink tea' 
     1  HELLO LINUX!  
drink tea
     2  Linux is a free unix-type opterating system.  
     3  This is a linux testfile!  
     4  Linux test 
     5  Google
     6  Taobao
     7  Runoob
     8  Tesetfile
     9  Wiki
</code></pre>
<p>如果是要增加两行以上，在第二行后面加入两行字，例如 <strong>Drink tea or .....</strong> 与 <strong>drink beer?</strong></p>
<pre><code class="language-shell">$ nl testfile | sed '2a Drink tea or ......\
drink beer ?'

1  HELLO LINUX!  
     2  Linux is a free unix-type opterating system.  
Drink tea or ......
drink beer ?
     3  This is a linux testfile!  
     4  Linux test 
     5  Google
     6  Taobao
     7  Runoob
     8  Tesetfile
     9  Wiki
</code></pre>
<p>每一行之间都必须要以反斜杠 <code>\ </code>来进行新行标记。上面的例子中，我们可以发现在第一行的最后面就有 <code>\ </code>存在。</p>
<ol start="3">
<li>以行为单位的替换与显示</li>
</ol>
<p>将第 <strong>2-5</strong> 行的内容取代成为 <strong>No 2-5 number</strong> 呢？</p>
<pre><code class="language-shell">$ nl testfile | sed '2,5c No 2-5 number'
     1  HELLO LINUX!  
No 2-5 number
     6  Taobao
     7  Runoob
     8  Tesetfile
     9  Wiki
</code></pre>
<p>透过这个方法就能够将数据整行取代了。</p>
<p>仅列出 testfile 文件内的第 5-7 行：</p>
<pre><code class="language-shell">$ nl testfile | sed -n '5,7p'
     5  Google
     6  Taobao
     7  Runoob
</code></pre>
<p>可以透过这个 sed 的以行为单位的显示功能， 就能够将某一个文件内的某些行号选择出来显示。</p>
<ol start="4">
<li>数据的搜寻并显示</li>
</ol>
<p>搜索 testfile 有 <strong>oo</strong> 关键字的行:</p>
<pre><code class="language-shell">$ nl testfile | sed -n '/oo/p'
     5  Google
     7  Runoob
</code></pre>
<p>如果 root 找到，除了输出所有行，还会输出匹配行。</p>
<ol start="5">
<li>数据的搜寻并删除</li>
</ol>
<p>删除 testfile 所有包含 <strong>oo</strong> 的行，其他行输出</p>
<pre><code class="language-shell">$ nl testfile | sed  '/oo/d'
     1  HELLO LINUX!  
     2  Linux is a free unix-type opterating system.  
     3  This is a linux testfile!  
     4  Linux test 
     6  Taobao
     8  Tesetfile
     9  Wiki
</code></pre>
<ol start="6">
<li>数据的搜寻并执行命令</li>
</ol>
<p>搜索 testfile，找到 <strong>oo</strong> 对应的行，执行后面花括号中的一组命令，每个命令之间用分号分隔，这里把 <strong>oo</strong> 替换为 <strong>kk</strong>，再输出这行：</p>
<pre><code class="language-shell">$ nl testfile | sed -n '/oo/{s/oo/kk/;p;q}'  
     5  Gkkgle
</code></pre>
<p>最后的 <strong>q</strong> 是退出。</p>
<ol start="7">
<li>数据的查找与替换</li>
</ol>
<p>除了整行的处理模式之外， sed 还可以用行为单位进行部分数据的查找与替换&lt;。</p>
<p>sed 的查找与替换的与 <strong>vi</strong> 命令类似，语法格式如下：</p>
<pre><code class="language-shell">sed 's/要被取代的字串/新的字串/g'
</code></pre>
<p>将 testfile 文件中每行第一次出现的 oo 用字符串 kk 替换，然后将该文件内容输出到标准输出:</p>
<pre><code class="language-shell">sed -e 's/oo/kk/' testfile
</code></pre>
<p><strong>g</strong> 标识符表示全局查找替换，使 sed 对文件中所有符合的字符串都被替换，修改后内容会到标准输出，不会修改原文件：</p>
<pre><code class="language-shell">sed -e 's/oo/kk/g' testfile
</code></pre>
<p>选项 <strong>i</strong> 使 sed 修改文件:</p>
<pre><code class="language-shell">sed -i 's/oo/kk/g' testfile
</code></pre>
<p>批量操作当前目录下以 <strong>test</strong> 开头的文件：</p>
<pre><code class="language-shell">sed -i 's/oo/kk/g' ./test*
</code></pre>
<p>接下来使用 /sbin/ifconfig 查询 IP：</p>
<pre><code class="language-shell">$ /sbin/ifconfig eth0
eth0 Link encap:Ethernet HWaddr 00:90:CC:A6:34:84
inet addr:192.168.1.100 Bcast:192.168.1.255 Mask:255.255.255.0
inet6 addr: fe80::290:ccff:fea6:3484/64 Scope:Link
UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1
.....(以下省略).....
</code></pre>
<p>本机的 ip 是 192.168.1.100。</p>
<p>将 IP 前面的部分予以删除：</p>
<pre><code class="language-shell">$ /sbin/ifconfig eth0 | grep 'inet addr' | sed 's/^.*addr://g'
192.168.1.100 Bcast:192.168.1.255 Mask:255.255.255.0
</code></pre>
<p>接下来则是删除后续的部分，即：<strong>192.168.1.100 Bcast:192.168.1.255 Mask:255.255.255.0</strong>。</p>
<p>将 IP 后面的部分予以删除:</p>
<pre><code class="language-shell">$ /sbin/ifconfig eth0 | grep 'inet addr' | sed 's/^.*addr://g' | sed 's/Bcast.*$//g'
192.168.1.100
</code></pre>
<ol start="8">
<li>多点编辑</li>
</ol>
<p>一条 sed 命令，删除 testfile 第三行到末尾的数据，并把 HELLO 替换为 RUNOOB :</p>
<pre><code class="language-shell">$ nl testfile | sed -e '3,$d' -e 's/HELLO/RUNOOB/'
     1  RUNOOB LINUX!  
     2  Linux is a free unix-type opterating system.  
</code></pre>
<p>-e 表示多点编辑，第一个编辑命令删除 testfile 第三行到末尾的数据，第二条命令搜索 HELLO 替换为 RUNOOB。</p>
<ol start="9">
<li>直接修改文件内容(危险动作)</li>
</ol>
<p>sed 可以直接修改文件的内容，不必使用管道命令或数据流重导向！ 不过，由于这个动作会直接修改到原始的文件，所以请你千万不要随便拿系统配置来测试！ 我们还是使用文件 regular_express.txt 文件来测试看看吧！</p>
<p>regular_express.txt 文件内容如下：</p>
<pre><code class="language-shell">$ cat regular_express.txt 
runoob.
google.
taobao.
facebook.
zhihu-
weibo-
</code></pre>
<p>利用 sed 将 regular_express.txt 内每一行结尾若为 . 则换成 !</p>
<pre><code class="language-shell">$ sed -i 's/\.$/\!/g' regular_express.txt
$ cat regular_express.txt 
runoob!
google!
taobao!
facebook!
zhihu-
weibo-
</code></pre>
<p>利用 sed 直接在 regular_express.txt 最后一行加入 <strong># This is a test</strong>:</p>
<pre><code class="language-shell">$ sed -i '$a # This is a test' regular_express.txt
$ cat regular_express.txt 
runoob!
google!
taobao!
facebook!
zhihu-
weibo-
# This is a test
</code></pre>
<p>由于 $ 代表的是最后一行，而 a 的动作是新增，因此该文件最后新增 <strong># This is a test</strong>！</p>
<p>sed 的 <strong>-i</strong> 选项可以直接修改文件内容，这功能非常有帮助！举例来说，如果你有一个 100 万行的文件，你要在第 100 行加某些文字，此时使用 vim 可能会疯掉！因为文件太大了！那怎办？就利用 sed 啊！透过 sed 直接修改/取代的功能，甚至不需要使用 vim 去修订！</p>

</div>
<div id="MySignature" role="contentinfo">
    <p>本文来自在线网站：seven的菜鸟成长之路，作者：seven，转载请注明原文链接：www.seven97.top</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.14046750711574074" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-27 09:00">2025-05-27 09:00</span>&nbsp;
<a href="https://www.cnblogs.com/seven97-top">程序员Seven</a>&nbsp;
阅读(<span id="post_view_count">10</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18892482);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18892482', targetLink: 'https://www.cnblogs.com/seven97-top/p/18892482', title: 'Linux常用命令介绍-文档编辑' })">举报</a>
</div>
        