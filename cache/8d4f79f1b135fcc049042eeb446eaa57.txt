
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/yupi/p/19053195" title="发布于 2025-08-22 17:24">
    <span role="heading" aria-level="2">这套 Java 监控系统太香了！我连夜给项目加上了</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        <img src="https://img2024.cnblogs.com/blog/2225420/202508/2225420-20250822171541509-539537171.png" alt="这套 Java 监控系统太香了！我连夜给项目加上了" class="desc_img">
        希望大家掌握这些技术、以及实现可观测性的套路，能够为项目搭建合理的监控分析系统，构建更可靠的 AI 应用。
    </div>
<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p class="md-end-block md-heading"><span class="md-plain">大家好，我是程序员鱼皮。之前已经带大家完成了 <span class="md-meta-i-c  md-link"><a href="https://github.com/liyupi/yu-ai-code-mother" rel="noopener nofollow"><span class="md-plain">AI 零代码应用生成平台</span></a><span class="md-plain"> 的核心功能，能够一句话生成复杂网站，并支持实时浏览和可视化修改。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1753332332820-9ec614de-65a2-496d-b9b2-dc89c20d06c9-20250821102223301.png"><img data-src="https://pic.yupi.icu/1/1753332332820-9ec614de-65a2-496d-b9b2-dc89c20d06c9-20250821102223301.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">但是作为一个对标大厂的项目，光实现功能怎么足够呢？</span></p>
<p class="md-end-block md-p"><span class="md-plain">我们还要为项目添加全面的 <span class="md-pair-s "><strong>可观测性</strong><span class="md-plain"> 能力，让系统运行状态变得透明可见，为用户提供可靠稳定的服务。可观测性不仅有利于性能优化，也是现代软件架构的必备技能。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">说直白一点，这也是玩具项目和企业级项目的重要区别。我相信很多朋友的项目应该是做完了就扔那了，压根儿没想到要去监控它的运行状态吧。</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/image-20250821101537962.png"><img data-src="https://pic.yupi.icu/1/image-20250821101537962.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">下面就来带大家学习可观测性相关的技术，依然是保姆级教程：</span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">可观测性介绍</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">ARMS 系统监控</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">Prometheus + Grafana 业务监控</span></p>
</li>
</ul>
<p class="md-end-block md-p"><span class="md-plain">⭐️ 推荐观看视频版：<span class="md-link md-pair-s"><a href="https://bilibili.com/video/BV1QPYDztEtW" rel="noopener nofollow">https://bilibili.com/video/BV1QPYDztEtW</a></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">本项目代码开源：<span class="md-link md-pair-s"><a href="https://github.com/liyupi/yu-ai-code-mother" rel="noopener nofollow">https://github.com/liyupi/yu-ai-code-mother</a></span></span></p>
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://codefather.cn/" rel="noopener nofollow"><span class="md-plain">编程导航</span></a><span class="md-plain"> 的朋友们可以看到完整的项目教程：</span></span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/image-20250821101836759.png"><img data-src="https://pic.yupi.icu/1/image-20250821101836759.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h2 class="md-end-block md-heading"><span class="md-plain">一、可观测性介绍</span></h2>
<p class="md-end-block md-p"><span class="md-plain">可观测性（Observability）指通过系统的外部输出推断其内部状态的能力。在软件开发中，可观测性是指通过日志、指标和追踪等数据，全面了解系统的运行状况，<span class="md-pair-s "><strong>以便及时发现和解决问题</strong><span class="md-plain">。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">你可以简单将其理解为 “监控”，但它又比监控的概念更广更深。</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">相关概念</span></h3>
<p class="md-end-block md-p"><span class="md-plain">接下来，我们了解一些和可观测性有关的概念。</span></p>
<h4 class="md-end-block md-heading"><span class="md-plain">维度和指标</span></h4>
<p class="md-end-block md-p"><span class="md-plain">维度是用来描述和分类数据的标签属性，比如用户 ID、应用 ID、模型名称等，关注 “是什么”。</span></p>
<p class="md-end-block md-p"><span class="md-plain">指标是用来量化的数值数据，比如请求次数、响应时间、Token 消耗量等，关注 “有多少”。</span></p>
<p class="md-end-block md-p"><span class="md-plain">简单来说，维度是可以用来筛选的标签，指标是用来计算的数值。</span></p>
<p class="md-end-block md-p"><span class="md-plain">举个例子：</span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">维度：user_id=12345, app_id=67890, model_name=deepseek-chat</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">指标：requests_total=100, response_time=1.5s, tokens_used=2000</span></p>
</li>
</ul>
<p class="md-end-block md-p">&nbsp;</p>
<h4 class="md-end-block md-heading"><span class="md-plain">监控的数据分类</span></h4>
<p class="md-end-block md-p"><span class="md-plain">在实现可观测性时，我们需要关注多种不同类型的数据：</span></p>
<p class="md-end-block md-p"><span class="md-plain">1）系统指标：包括 CPU 使用率、内存占用、磁盘 I/O、网络流量等基础设施层面的监控数据。</span></p>
<p class="md-end-block md-p"><span class="md-plain">2）应用指标：涵盖接口响应时间、QPS（每秒查询率）、错误率、JVM 状态等应用层面的性能数据。</span></p>
<p class="md-end-block md-p"><span class="md-plain">3）业务指标：针对我们平台的特定业务逻辑，比如 AI 模型调用次数、Token 消耗量、用户活跃度等。</span></p>
<p class="md-end-block md-p"><span class="md-plain">4）调用链：在分布式系统中，一个请求可能经过多个服务组件。<span class="md-pair-s "><strong>Trace</strong><span class="md-plain"> 表示一个完整请求的调用链路，而 <span class="md-pair-s "><strong>Span</strong><span class="md-plain"> 则代表调用链中的一个操作单元。通过分析 Trace 和 Span，我们可以清晰地看到请求在系统中的流转过程，快速定位性能瓶颈。</span></span></span></span></span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/2eb4c75d129972d1888e4f0a8c294e70.svg"><img class="md-svg-img lazyload" data-src="https://pic.yupi.icu/1/2eb4c75d129972d1888e4f0a8c294e70.svg"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h4 class="md-end-block md-heading"><span class="md-pair-s ">百分位数</span></h4>
<p class="md-end-block md-p"><span class="md-plain">在性能监控中，我们经常会看到 P50、P75、P90、P99 这些指标，它们被称为 <span class="md-pair-s "><strong>百分位数</strong><span class="md-plain">。</span></span></span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">P50：中位数，表示 50% 的请求响应时间都在这个值以下</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">P75：75% 的请求响应时间都在这个值以下 </span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">P90：90% 的请求响应时间都在这个值以下</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">P99：99% 的请求响应时间都在这个值以下</span></p>
</li>
</ul>
<p class="md-end-block md-p"><span class="md-plain">举个例子，如果一个接口的 P99 响应时间是 500ms，这意味着 99% 的请求都能在 500ms 内完成，只有 1% 的请求可能超过这个时间。P99 指标对于发现系统中的异常情况特别有用，因为它能反映出那些偶发的长尾延迟问题。</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1755076276666-ed6c2280-262d-4ae4-9973-c651672f4e00.png"><img data-src="https://pic.yupi.icu/1/1755076276666-ed6c2280-262d-4ae4-9973-c651672f4e00.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">💡 注意，别把这玩意跟优先级 P0、P1、P2 搞混了。</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">怎么实现？</span></h3>
<p class="md-end-block md-p"><span class="md-plain">要构建完善的可观测性体系，我们需要解决几个核心问题：</span></p>
<p class="md-end-block md-p"><span class="md-plain">1）统计什么？ </span></p>
<p class="md-end-block md-p"><span class="md-plain">需要根据业务特点确定关键指标，既要覆盖 <span class="md-pair-s "><strong>系统层面</strong><span class="md-plain"> 的通用指标，也要包含 <span class="md-pair-s "><strong>业务特有</strong><span class="md-plain"> 的监控维度。</span></span></span></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">2）如何收集？ </span></p>
<p class="md-end-block md-p"><span class="md-plain">数据收集是可观测性的基础，可以通过代码埋点、探针技术、日志分析等多种方式实现。</span></p>
<p class="md-end-block md-p"><span class="md-plain">3）如何存储？ </span></p>
<p class="md-end-block md-p"><span class="md-plain">监控数据通常量大且连续，需要选择合适的存储方案，比如时序数据库或专门的监控系统。</span></p>
<p class="md-end-block md-p"><span class="md-plain">4）如何展示？ </span></p>
<p class="md-end-block md-p"><span class="md-plain">最终需要通过直观的图表和仪表板将数据呈现给用户，一般会实时监控（页面自动刷新）。</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1753333524767-c89b8d1b-bc57-4094-ace7-1b37876f3f0b-20250821100951295.png"><img data-src="https://pic.yupi.icu/1/1753333524767-c89b8d1b-bc57-4094-ace7-1b37876f3f0b-20250821100951295.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">接下来，在本项目中，我会带大家实战下面 2 种主流的可观测性实现方式：</span></p>
<p class="md-end-block md-p"><span class="md-plain">1）利用 ARMS 平台进行系统指标监控：这是一种开箱即用的方案，通过集成阿里云 ARMS 等监控平台，可以快速获得系统层面的全面监控能力。</span></p>
<p class="md-end-block md-p"><span class="md-plain">2）利用 Prometheus + Grafana 自定义业务指标监控：这是目前最主流的开源监控方案，提供了强大的自定义能力和丰富的生态支持。</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h2 class="md-end-block md-heading"><span class="md-plain">二、ARMS 系统监控</span></h2>
<h3 class="md-end-block md-heading"><span class="md-plain">什么是 ARMS？</span></h3>
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://armsnext.console.aliyun.com/" rel="noopener nofollow"><span class="md-plain">ARMS</span></a><span class="md-plain"> 是阿里云提供的应用实时监控服务，采用了探针技术，<span class="md-pair-s "><strong>能够在不修改应用代码的情况下</strong><span class="md-plain">，自动收集和分析应用性能数据，快速构建实时的监控能力。</span></span></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">还记得我们刚刚讲的 “怎么实现可观测性” 的 4 个核心问题么？ARMS 给出了这样的答案：</span></p>
<p class="md-end-block md-p"><span class="md-plain">1）统计什么？</span></p>
<p class="md-end-block md-p"><span class="md-plain">ARMS 能够监控 Java 应用性能（CPU、内存、线程、GC 等）、应用调用链追踪、异常分析诊断、请求数、错误数、平均耗时、连接池/线程池监控等全方位指标。</span></p>
<p class="md-end-block md-p"><span class="md-plain">2）如何收集？</span></p>
<p class="md-end-block md-p"><span class="md-plain">通过 Java Agent 技术，在 JVM 启动时加载监控代理，实现无侵入式的数据收集。</span></p>
<p class="md-end-block md-p"><span class="md-plain">3）如何存储？</span></p>
<p class="md-end-block md-p"><span class="md-plain">数据存储在阿里云的分布式存储系统中，用户无需关心存储细节。</span></p>
<p class="md-end-block md-p"><span class="md-plain">4）如何展示？</span></p>
<p class="md-end-block md-p"><span class="md-plain">ARMS 提供了丰富的 Web 控制台，支持多维度的数据分析和可视化展示。</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1755076588398-9c316b43-dfe3-4327-872b-1f390f2017b1.png"><img data-src="https://pic.yupi.icu/1/1755076588398-9c316b43-dfe3-4327-872b-1f390f2017b1.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">接入 ARMS</span></h3>
<p class="md-end-block md-p"><span class="md-plain">在使用任何云产品之前，我们都需要先了解其 <span class="md-meta-i-c  md-link"><a href="https://help.aliyun.com/zh/arms/application-monitoring/product-overview/billing-description" rel="noopener nofollow"><span class="md-plain">计费规则</span></a><span class="md-plain">，保护好自己的 money。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">好在 ARMS 提供的免费资源，一般足够个人测试使用：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1754921488550-4b8169e7-f581-4a45-a5c9-c031879a1520.png"><img data-src="https://pic.yupi.icu/1/1754921488550-4b8169e7-f581-4a45-a5c9-c031879a1520.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">下面我们来接入 ARMS，首先访问 <span class="md-meta-i-c  md-link"><a href="https://arms.console.aliyun.com/?accounttraceid=f665b274f2dd4a82b30ae1ac90df7514lmmw#/intgr/integrations?menu=server-app" rel="noopener nofollow"><span class="md-plain">ARMS 控制台</span></a><span class="md-plain">，第一次使用需要开通服务。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">进入接入中心，选择 Java 应用监控：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1754921615535-41804983-4fbb-4143-8bfa-0a62cc2455c2.png"><img data-src="https://pic.yupi.icu/1/1754921615535-41804983-4fbb-4143-8bfa-0a62cc2455c2.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">选择手动安装 Agent：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1754921730914-9d76249c-9ffa-4a17-bf0e-d399342517c2.png"><img data-src="https://pic.yupi.icu/1/1754921730914-9d76249c-9ffa-4a17-bf0e-d399342517c2.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">按照指引下载 Agent 包：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1754921830797-1ac25cf8-4626-4d5e-95eb-9123dc1f2b2d.png"><img data-src="https://pic.yupi.icu/1/1754921830797-1ac25cf8-4626-4d5e-95eb-9123dc1f2b2d.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">下载完成后解压到合适的位置。</span></p>
<p class="md-end-block md-p"><span class="md-plain">复制启动命令，注意替换目录路径和应用名称。你也可以选择开启应用安全功能，它能够提供 <span class="md-meta-i-c  md-link"><a href="https://help.aliyun.com/zh/arms/application-security/product-overview/what-is-application-security?spm=5176.arms.console-base_help.dexternal.7c48f167HlhHqR" rel="noopener nofollow"><span class="md-plain">应用层面的安全监控能力</span></a><span class="md-plain">，帮你抵御一些漏洞攻击。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1754921972003-74a41339-343f-4983-9757-dcbdbaf20634.png"><img data-src="https://pic.yupi.icu/1/1754921972003-74a41339-343f-4983-9757-dcbdbaf20634.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">在 IDE 中编辑项目的启动配置，将复制的命令参数添加到 <span class="md-pair-s"><code>VM options</code><span class="md-plain"> 中：</span></span></span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-attribute">-javaagent:/Users/yupi/Tools/AliyunJavaAgent/aliyun-java-agent.jar<br><span><span class="cm-attribute">-Darms<span class="cm-def">.licenseKey<span class="cm-operator">=xxx<br><span><span class="cm-attribute">-Darms<span class="cm-def">.appName<span class="cm-operator">=yu-ai-code-mother</span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1754922510767-ebcf8ccf-be77-4161-ac4b-9019ca2645a2.png"><img data-src="https://pic.yupi.icu/1/1754922510767-ebcf8ccf-be77-4161-ac4b-9019ca2645a2.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">接下来启动项目。启动会比平时慢一些，这是正常的，因为引入 Agent 会拖慢启动速度。</span></p>
<p class="md-end-block md-p"><span class="md-plain">看到下图信息就表示启动成功了，默认数据会上报到杭州区域：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1754923708569-c9502bca-22c2-4267-853a-0e8568e2d962.png"><img data-src="https://pic.yupi.icu/1/1754923708569-c9502bca-22c2-4267-853a-0e8568e2d962.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">最后，回到 ARMS 控制台的应用列表页面，就能看到刚刚接入的应用了：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1754923764157-34715d02-7c88-43aa-bf83-78c7ee788275.png"><img data-src="https://pic.yupi.icu/1/1754923764157-34715d02-7c88-43aa-bf83-78c7ee788275.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">指标监控</span></h3>
<p class="md-end-block md-p"><span class="md-plain">下面我们来看看 ARMS 都提供了哪些指标的监控，有个印象就好。</span></p>
<h4 class="md-end-block md-heading"><span class="md-plain">应用概览</span></h4>
<p class="md-end-block md-p"><span class="md-plain">点击进入应用详情页，首先看到的是应用概览 Tab。建议切换到新版视图，豁然开朗。</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1754924023389-39496e78-f22b-47e7-9a67-651acd06a18b.png"><img data-src="https://pic.yupi.icu/1/1754924023389-39496e78-f22b-47e7-9a67-651acd06a18b.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">在这个页面可以看到应用的核心性能指标，包括请求数、响应时间、错误数等关键数据。</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h4 class="md-end-block md-heading"><span class="md-plain">应用拓扑</span></h4>
<p class="md-end-block md-p"><span class="md-plain">应用拓扑页面展示了项目的依赖关系图，可以清晰地看到应用和各种中间件的连接情况：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1754924142105-a70776b7-3bef-4e98-b4ec-b5ccc0017146.png"><img data-src="https://pic.yupi.icu/1/1754924142105-a70776b7-3bef-4e98-b4ec-b5ccc0017146.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">这个视图对于理解系统架构和排查依赖问题有用。</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h4 class="md-end-block md-heading"><span class="md-plain">提供服务</span></h4>
<p class="md-end-block md-p"><span class="md-plain">提供服务页面能够统一展示所有接口的调用情况，包括请求量、错误数、平均耗时等核心指标：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1754924383093-53041835-0c77-4ead-b0ff-00a59f459a5d.png"><img data-src="https://pic.yupi.icu/1/1754924383093-53041835-0c77-4ead-b0ff-00a59f459a5d.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">点击具体接口还可以深入分析该接口的详细数据（这就是所谓的 “下钻分析”）：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1754924408199-36b8301c-70ce-40b5-be11-834a6c7c57b9.png"><img data-src="https://pic.yupi.icu/1/1754924408199-36b8301c-70ce-40b5-be11-834a6c7c57b9.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">ARMS 还提供了 SQL 调用分析功能，能够监控数据库操作的性能：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1754924439170-3db103da-3bc4-4b84-8b16-be50a13aade0.png"><img data-src="https://pic.yupi.icu/1/1754924439170-3db103da-3bc4-4b84-8b16-be50a13aade0.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">以及 NoSQL（如 Redis）的调用分析：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1754924455330-9deb017b-975a-4dc3-b39f-ffba74459a7c.png"><img data-src="https://pic.yupi.icu/1/1754924455330-9deb017b-975a-4dc3-b39f-ffba74459a7c.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">还提供了异常分析功能，可以帮助快速定位和解决应用中的异常问题：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1754924472874-8195a707-e372-4438-b8d3-69251de4877c.png"><img data-src="https://pic.yupi.icu/1/1754924472874-8195a707-e372-4438-b8d3-69251de4877c.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h4 class="md-end-block md-heading"><span class="md-plain">调用链分析</span></h4>
<p class="md-end-block md-p"><span class="md-plain">调用链分析是 ARMS 的核心功能之一，可以深度分析单次请求的完整调用路径，快速定位瓶颈点：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1754925074445-1eaa6b6b-595a-4a7a-8b7c-fdf603f5e456.png"><img data-src="https://pic.yupi.icu/1/1754925074445-1eaa6b6b-595a-4a7a-8b7c-fdf603f5e456.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">点击具体的调用记录，在 Trace 详情页面可以看到请求经过的每个环节和对应的耗时，右侧还能显示当时的 JVM 状态：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1754925195118-7efe1b70-fc6e-4aec-b66e-70c7eaa30528.png"><img data-src="https://pic.yupi.icu/1/1754925195118-7efe1b70-fc6e-4aec-b66e-70c7eaa30528.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">在全链路聚合页面可以清晰地看到树形的调用结构：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1754925347602-87d9ed18-55bc-43ba-993c-f32769b30436.png"><img data-src="https://pic.yupi.icu/1/1754925347602-87d9ed18-55bc-43ba-993c-f32769b30436.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">点击分析后，会根据特定的 serviceName 和 span 进行过滤分析：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1754925433901-78c5e870-c6f8-4e8a-b760-29922c9c5792.png"><img data-src="https://pic.yupi.icu/1/1754925433901-78c5e870-c6f8-4e8a-b760-29922c9c5792.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">其中，错误 / 慢 Trace 分析功能特别实用，能够一秒定位到性能瓶颈：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1754925558728-1488ca2d-ba32-4f56-ae52-91cf3ce20abc.png"><img data-src="https://pic.yupi.icu/1/1754925558728-1488ca2d-ba32-4f56-ae52-91cf3ce20abc.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h4 class="md-end-block md-heading"><span class="md-plain">依赖服务</span></h4>
<p class="md-end-block md-p"><span class="md-plain">依赖服务页面专门监控应用对外部服务的调用情况，比如数据库、缓存等：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1754924642853-e390c508-d9fe-4621-9af7-01594f636295.png"><img data-src="https://pic.yupi.icu/1/1754924642853-e390c508-d9fe-4621-9af7-01594f636295.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">可以深入到具体依赖的详情页面，比如数据库详情：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1754924684024-fd71c7d9-34eb-44f1-aeb2-1357cb69d9d7.png"><img data-src="https://pic.yupi.icu/1/1754924684024-fd71c7d9-34eb-44f1-aeb2-1357cb69d9d7.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">这里能够看到执行的具体 SQL 语句和慢 SQL，一目了然！</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1754924701745-dec61da9-8ed2-400e-a2fd-3decdcbd7fd1.png"><img data-src="https://pic.yupi.icu/1/1754924701745-dec61da9-8ed2-400e-a2fd-3decdcbd7fd1.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">还能分析哪些请求对数据库的消耗最大：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1754924724312-a5350d02-2103-42a4-95a4-c11427ddc357.png"><img data-src="https://pic.yupi.icu/1/1754924724312-a5350d02-2103-42a4-95a4-c11427ddc357.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h4 class="md-end-block md-heading"><span class="md-plain">实例监控</span></h4>
<p class="md-end-block md-p"><span class="md-plain">实例监控页面展示服务器本身的运行状态：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1754925605137-006f33e0-c313-456e-9b7a-6ff1cfe1812f.png"><img data-src="https://pic.yupi.icu/1/1754925605137-006f33e0-c313-456e-9b7a-6ff1cfe1812f.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">可以深入查看某个实例的详细信息：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1754925633791-4ecdcfc3-4fb0-458e-860e-b28c2abb4e45.png"><img data-src="https://pic.yupi.icu/1/1754925633791-4ecdcfc3-4fb0-458e-860e-b28c2abb4e45.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">JVM 监控提供了堆内存、垃圾回收等关键指标：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1754925652119-aad032ed-49b6-4c2c-a62a-7c43337b7175.png"><img data-src="https://pic.yupi.icu/1/1754925652119-aad032ed-49b6-4c2c-a62a-7c43337b7175.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">线程池监控帮助了解线程的使用情况：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1754925665715-1732197d-3af4-4175-977d-ae3322ebb4bd.png"><img data-src="https://pic.yupi.icu/1/1754925665715-1732197d-3af4-4175-977d-ae3322ebb4bd.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">甚至还有连接池监控，比如数据库连接池：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1754925687520-59490704-7bdf-416a-857e-81a474108cb6.png"><img data-src="https://pic.yupi.icu/1/1754925687520-59490704-7bdf-416a-857e-81a474108cb6.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">机器负载监控显示了系统层面的资源使用情况，比如 CPU、内存利用率，如果发现利用率较高，可能要考虑升配；较低则表示可能存在浪费。</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1754925727084-e6278d2f-14ba-4c7a-b514-90f2c68b992a.png"><img data-src="https://pic.yupi.icu/1/1754925727084-e6278d2f-14ba-4c7a-b514-90f2c68b992a.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h4 class="md-end-block md-heading"><span class="md-plain">场景化分析</span></h4>
<p class="md-end-block md-p"><span class="md-plain">ARMS 还提供了 5 大场景化分析功能：</span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">异常分析</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">日志分析 </span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">数据库分析</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">调用链分布</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">上下游分析</span></p>
</li>
</ul>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">我感觉异常分析比较实用，能够按照异常名称进行分类展示，可以快速查看某类异常的出现情况，以及查看异常堆栈信息，从而快速定位错误：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1754925858200-05d4450b-3c6c-4202-8a63-6687fb045797.png"><img data-src="https://pic.yupi.icu/1/1754925858200-05d4450b-3c6c-4202-8a63-6687fb045797.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h4 class="md-end-block md-heading"><span class="md-plain">事件分析</span></h4>
<p class="md-end-block md-p"><span class="md-plain">事件分析页面用于管理各种告警事件：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1754973003728-a924ee6c-c4ee-4c1e-add4-a2387245bf3b.png"><img data-src="https://pic.yupi.icu/1/1754973003728-a924ee6c-c4ee-4c1e-add4-a2387245bf3b.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h4 class="md-end-block md-heading"><span class="md-plain">应用配置</span></h4>
<p class="md-end-block md-p"><span class="md-plain">在应用配置页面可以设置数据采样率、自定义探针收集的指标：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1754926196602-752bf42b-a87c-4a94-a616-904d12c634b4.png"><img data-src="https://pic.yupi.icu/1/1754926196602-752bf42b-a87c-4a94-a616-904d12c634b4.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">还可以开启一些高级功能，比如 Arthas 监控、持续性能剖析等：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1754926311687-6549272e-f682-4379-a2ce-efbfd922744c.png"><img data-src="https://pic.yupi.icu/1/1754926311687-6549272e-f682-4379-a2ce-efbfd922744c.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">💡 不过需要注意的是，收集的数据越多，费用也会相应增加，请按需开启。测试完成后记得关闭不必要的监控功能，避免产生不必要的费用。</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">告警能力</span></h3>
<p class="md-end-block md-p"><span class="md-plain">监控和告警天生一对，通常是配套使用的，告警机制能够在问题发生时及时通知相关人员。</span></p>
<p class="md-end-block md-p"><span class="md-plain">创建告警规则的流程很简单：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1754972594746-d6939c62-b9c7-42e8-8a49-2cd6f3af1be5.png"><img data-src="https://pic.yupi.icu/1/1754972594746-d6939c62-b9c7-42e8-8a49-2cd6f3af1be5.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">ARMS 支持阈值检测和区间检测两种模式。以监控慢 SQL 次数为例：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1754972818557-b9543687-6511-49a9-bb87-4c0adb91e33a.png"><img data-src="https://pic.yupi.icu/1/1754972818557-b9543687-6511-49a9-bb87-4c0adb91e33a.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">可以配置告警通知方式、时间段、重复策略等：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1754972855047-366a3b8c-d708-44c8-b6fb-c522a5af6a76.png"><img data-src="https://pic.yupi.icu/1/1754972855047-366a3b8c-d708-44c8-b6fb-c522a5af6a76.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">创建完成后，可以在告警规则列表中看到，并且支持测试功能：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1754972940335-63e62946-0aef-4e38-9d91-1f9227f20ad9.png"><img data-src="https://pic.yupi.icu/1/1754972940335-63e62946-0aef-4e38-9d91-1f9227f20ad9.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">还有一些常见的告警配置，比如应用响应时间超过阈值、错误率超过阈值、数据库连接数过高、JVM 内存使用率过高等。</span></p>
<p class="md-end-block md-p"><span class="md-plain">💡 不过要注意合理配置告警，而且要配置分级告警，否则可能就会出现大家对告警已经麻了，有告警也不处理的情况。</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">扩展知识 - 怎么自己实现监控平台？</span></h3>
<p class="md-end-block md-p"><span class="md-plain">可能有同学好奇，为什么 ARMS 只是在启动命令中加了几个参数，就能实现这么全面的监控功能？而且能够支持那么灵活的筛选？这背后的技术原理是什么？</span></p>
<h4 class="md-end-block md-heading"><span class="md-plain">探针技术</span></h4>
<p class="md-end-block md-p"><span class="md-plain">首先，数据是通过探针技术 <span class="md-pair-s"><code>Java Agent</code><span class="md-plain"> 收集的。Java Agent 是 JVM 提供的机制，允许在 Java 应用启动时或运行时动态修改字节码，从而实现无侵入式的监控。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">利用探针进行监控的原理如下：</span></p>
<ol class="ol-list" start="">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">字节码增强：Java Agent 通过 Java Instrumentation API 在类加载时拦截字节码，动态插入监控代码。</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">方法织入：在关键方法（如 HTTP 请求处理、数据库调用等）的入口和出口处织入监控逻辑，记录执行时间、参数、返回值等信息。</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">数据收集：织入的监控代码会收集各种性能数据，并通过网络传输到监控平台。</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">链路追踪：通过在请求上下文中传递唯一标识，将分布式调用链串联起来，形成完整的 Trace。</span></p>
</li>
</ol>
<p class="md-end-block md-p"><span class="md-plain">这种方式的优势在于完全不需要修改业务代码，只需要在 JVM 启动时指定 Agent，就能获得全面的监控能力。</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/322d71d2a171abaadf5649af473c786e.svg"><img class="md-svg-img lazyload" data-src="https://pic.yupi.icu/1/322d71d2a171abaadf5649af473c786e.svg"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h4 class="md-end-block md-heading"><span class="md-plain">数据的维度划分</span></h4>
<p class="md-end-block md-p"><span class="md-plain">监控平台之所以能提供如此灵活的筛选和分析能力，关键在于合理的数据维度设计。</span></p>
<p class="md-end-block md-p"><span class="md-plain">以一个 HTTP 请求为例，监控系统会记录 <span class="md-pair-s "><strong>最细粒度</strong><span class="md-plain"> 的维度信息：</span></span></span></p>
<table class="md-table">
<thead>
<tr class="md-end-block"><th><span class="td-span"><span class="md-plain">维度</span></span></th><th><span class="td-span"><span class="md-plain">示例值</span></span></th><th><span class="td-span"><span class="md-plain">说明</span></span></th></tr>
</thead>
<tbody>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">时间戳</span></span></td>
<td><span class="td-span"><span class="md-plain">2025-08-14 19:30:10</span></span></td>
<td><span class="td-span"><span class="md-plain">请求发生的精确时间</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">应用名</span></span></td>
<td><span class="td-span"><span class="md-plain">yu-ai-code-mother</span></span></td>
<td><span class="td-span"><span class="md-plain">应用标识</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">接口路径</span></span></td>
<td><span class="td-span"><span class="md-plain">/api/app/generate</span></span></td>
<td><span class="td-span"><span class="md-plain">具体的接口</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">HTTP 方法</span></span></td>
<td><span class="td-span"><span class="md-plain">POST</span></span></td>
<td><span class="td-span"><span class="md-plain">请求方法</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">响应状态码</span></span></td>
<td><span class="td-span"><span class="md-plain">200</span></span></td>
<td><span class="td-span"><span class="md-plain">请求结果</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">响应时间</span></span></td>
<td><span class="td-span"><span class="md-plain">150ms</span></span></td>
<td><span class="td-span"><span class="md-plain">接口耗时</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">客户端 IP</span></span></td>
<td><span class="td-span"><span class="md-plain">127.0.0.1</span></span></td>
<td><span class="td-span"><span class="md-plain">请求来源</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">用户 ID</span></span></td>
<td><span class="td-span"><span class="md-plain">12345</span></span></td>
<td><span class="td-span"><span class="md-plain">业务维度</span></span></td>
</tr>
</tbody>
</table>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">基于这些最细粒度的数据，监控平台就可以进行各种维度的聚合分析，比如：</span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">按时间聚合：统计每分钟/小时/天的请求量</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">按接口聚合：分析各接口的性能表现</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">按状态码聚合：计算成功率和错误率</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">按用户聚合：分析用户行为模式</span></p>
</li>
</ul>
<p class="md-end-block md-p">&nbsp;</p>
<h2 class="md-end-block md-heading"><span class="md-plain">三、Prometheus + Grafana 业务监控</span></h2>
<p class="md-end-block md-p"><span class="md-plain">前面我们通过 ARMS 实现了系统级的监控，这种方式简单高效，适合快速获得全面的监控能力。但 ARMS 主要关注通用的系统指标，如果我们想监控业务特有的指标，比如大模型的 Token 使用量、用户的活跃度等，就需要自定义的监控方案。</span></p>
<p class="md-end-block md-p"><span class="md-plain">回到最初的几个核心问题，都需要我们自己来考虑了：</span></p>
<ol class="ol-list" start="">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">统计什么？监控 AI 模型调用相关的业务指标</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">如何收集？通过在代码中埋点的方式主动收集数据。</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">如何存储？使用 Prometheus 时序数据库存储指标数据。</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">如何展示？通过 Grafana 构建可视化监控仪表板。</span></p>
</li>
</ol>
<p class="md-end-block md-p"><span class="md-plain">下面我们进入方案设计阶段，依次对这几个问题进行展开。</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">监控指标设计</span></h3>
<p class="md-end-block md-p"><span class="md-plain">首先我们需要明确要监控哪些维度和业务指标。根据 <span class="md-meta-i-c  md-link"><a href="https://docs.langchain4j.dev/tutorials/observability" rel="noopener nofollow"><span class="md-plain">LangChain4j 可观测性文档</span></a><span class="md-plain">，我们可以获取到以下数据：</span></span></span></p>
<h4 class="md-end-block md-heading"><span class="md-plain">维度</span></h4>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">用户 ID</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">应用 ID </span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">模型名称</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">最大输出 Token 数（maxOutputTokens）</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">AI 回复消息内容</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">模型生成停止的原因（Finish Reason）</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">调用状态（成功或失败）</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">请求时间</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">调用失败时的错误信息</span></p>
</li>
</ul>
<h4 class="md-end-block md-heading"><span class="md-plain">指标</span></h4>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">输入 Token 数量</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">输出 Token 数量 </span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">总消耗 Token 数量</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">响应时长</span></p>
</li>
</ul>
<h4 class="md-end-block md-heading"><span class="md-plain">分析能力</span></h4>
<p class="md-end-block md-p"><span class="md-plain">有了上面这些数据，我们能够进行很多分析：</span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">模型调用分析：统计不同时间窗口（分钟/小时/天）内各模型、用户、应用的调用次数趋势</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">模型性能分析：分析各模型的平均响应时间，以及响应时间分布的 P50/P90/P95/P99 百分位数</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">Token 消耗分析：监控不同时间窗口（分钟/小时/天）内输入 Token、输出 Token、总 Token 的消耗</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">热门应用排行：按调用次数对应用进行排序，识别调用 AI 最频繁的应用</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">用户活跃排行：按调用次数对用户进行排序，识别调用 AI 最频繁的用户</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">应用 Token 消耗排行：按 Token 消耗量对应用进行排序，识别消耗最高的应用</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">用户 Token 消耗排行：按 Token 消耗量用户进行排序，识别消耗最高的用户</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">错误分析：统计各模型的失败次数，以及不同错误类型的分布占比</span></p>
</li>
</ul>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">数据收集方式</span></h3>
<p class="md-end-block md-p"><span class="md-plain">在业务监控中，数据收集需要开发者手动埋点，因为只有业务开发者才知道要收集什么信息、从哪里收集、什么时候收集。</span></p>
<p class="md-end-block md-p"><span class="md-plain">跟业界主流的可观测性实现方案一样，我们的策略是在业务层收集 <span class="md-pair-s "><strong>最原始、最细粒度</strong><span class="md-plain"> 的数据，这样在查询层就能进行灵活的聚合分析。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">怎么获取原始数据呢？</span></p>
<p class="md-end-block md-p"><span class="md-plain">LangChain4j 提供了 <span class="md-meta-i-c  md-link"><a href="https://docs.langchain4j.dev/tutorials/observability/" rel="noopener nofollow"><span class="md-plain">可观测性支持</span></a><span class="md-plain">，通过定义 Listener 来获取大模型的调用信息。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1755078455681-be03ac57-5b07-4b3a-ba41-13b302c2a58b.png"><img data-src="https://pic.yupi.icu/1/1755078455681-be03ac57-5b07-4b3a-ba41-13b302c2a58b.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">数据存储方案 - Prometheus</span></h3>
<p class="md-end-block md-p"><span class="md-plain">即使没有学过 Prometheus，也应该知道可以通过数据库存储的方式实现监控统计。</span></p>
<p class="md-end-block md-p"><span class="md-plain">比如将监控数据存储到 MySQL 等关系型数据库中（或者 Elasticsearch），之后从数据库中读取。适合需要持久化保存详细数据的场景，而且比较灵活，可以自己写 SQL 实现复杂的查询和关联分析。</span></p>
<p class="md-end-block md-p"><span class="md-plain">但缺点是收集监控数据可能会比较频繁，需要频繁写入数据库，容易对应用性能产生影响。</span></p>
<p class="md-end-block md-p"><span class="md-plain">因此，专业的事情交给专业的中间件来做吧！</span></p>
<h4 class="md-end-block md-heading"><span class="md-plain">什么是 Prometheus？</span></h4>
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://prometheus.io/docs/introduction/overview/" rel="noopener nofollow"><span class="md-plain">Prometheus</span></a><span class="md-plain"> 是一个开源的监控系统，专门为时序数据的收集、存储和查询而设计。</span></span></p>
<p class="md-end-block md-p"><span class="md-plain">Prometheus 的核心理念是将所有监控数据以 <span class="md-pair-s "><strong>时间序列</strong><span class="md-plain"> 的形式存储。根据它的 <span class="md-meta-i-c  md-link"><a href="https://prometheus.io/docs/concepts/data_model/" rel="noopener nofollow"><span class="md-plain">数据模型</span></a><span class="md-plain">，每个时间序列都由指标名称和一组标签唯一标识。比如 <span class="md-pair-s"><code>http_requests_total{method="POST", handler="/api/yupi"}</code><span class="md-plain"> 就表示一个记录 POST 请求接口总数的时间序列。</span></span></span></span></span></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">这样一来，Prometheus 能够高效地处理监控场景中的时间范围查询，比如过去一小时内各个接口的平均响应时间、CPU 使用率超过 80% 的服务器列表等。</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h4 class="md-end-block md-heading"><span class="md-plain">核心组件架构</span></h4>
<p class="md-end-block md-p"><span class="md-plain">Prometheus 包含几个关键组件，职责明确：</span></p>
<p class="md-end-block md-p"><span class="md-plain">1）Prometheus Server：整个系统的核心，负责数据收集、存储和查询。它定期从配置的目标 <span class="md-pair-s "><strong>拉取</strong><span class="md-plain"> 指标数据，将数据存储在本地的时序数据库中，并提供 PromQL 查询语言来支持复杂的数据分析。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">2）Exporter：翻译器，将第三方系统（如数据库、操作系统、消息队列等）的指标转换为 Prometheus 格式。比如 Node Exporter 可以收集 Linux 系统的 CPU、内存、磁盘等指标，MySQL Exporter 可以收集数据库的性能指标。</span></p>
<p class="md-end-block md-p"><span class="md-plain">3）Alertmanager：处理告警规则和通知分发。当指标触发预设的告警条件时，它负责将告警信息发送给相应的人员或系统，支持邮件等多种通知方式。</span></p>
<p class="md-end-block md-p"><span class="md-plain">4）客户端库：提供各种编程语言的 SDK，方便开发者在应用代码中埋点收集自定义指标。这些库封装了指标类型的创建和管理，让开发者能够专注于业务逻辑。</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1754975743800-29954d3b-80e4-457f-85fb-5bb75a1abd8c-20250821100957592.png"><img data-src="https://pic.yupi.icu/1/1754975743800-29954d3b-80e4-457f-85fb-5bb75a1abd8c-20250821100957592.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h4 class="md-end-block md-heading"><span class="md-plain">数据收集原理</span></h4>
<p class="md-end-block md-p"><span class="md-plain">Prometheus 采用 <span class="md-pair-s "><strong>拉取模式</strong><span class="md-plain"> 来收集指标数据，而不是由项目主动推送数据，这是它的核心特征。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">它会定期向配置的目标发起 HTTP 请求，从 <span class="md-pair-s"><code>/metrics</code><span class="md-plain"> 端点获取指标数据。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">拉模式的好处是：</span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">简单可靠：基于标准 HTTP 协议，无需复杂的消息队列或特殊的网络配置</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">监控目标的发现和管理更加灵活：Prometheus 可以通过服务发现机制自动发现新的监控目标。而且将监控的控制权交给 Prometheus，可以避免目标服务的监控数据推送失败影响业务逻辑。</span></p>
</li>
</ul>
<p class="md-end-block md-p"><span class="md-plain">我们可以通过 <span class="md-meta-i-c  md-link"><a href="https://prometheus.io/docs/concepts/jobs_instances/" rel="noopener nofollow"><span class="md-plain">Jobs 和 Instances</span></a><span class="md-plain"> 配置需要拉取的数据任务和服务实例，当 Prometheus 抓取目标时，会自动为每个时间序列添加 <span class="md-pair-s"><code>job</code><span class="md-plain"> 和 <span class="md-pair-s"><code>instance</code><span class="md-plain"> 标签来标识数据来源。同时还会生成一些元指标，比如 <span class="md-pair-s"><code>up</code><span class="md-plain"> 指标表示目标是否可达，<span class="md-pair-s"><code>scrape_duration_seconds</code><span class="md-plain"> 记录抓取耗时，这些信息对于监控系统自身的健康检查非常有用。</span></span></span></span></span></span></span></span></span></span></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h4 class="md-end-block md-heading"><span class="md-plain">指标类型</span></h4>
<p class="md-end-block md-p"><span class="md-plain">如果想在项目中自定义指标收集，需要先了解 Prometheus 的 4 种核心 <span class="md-meta-i-c  md-link"><a href="https://prometheus.io/docs/concepts/metric_types/" rel="noopener nofollow"><span class="md-plain">指标类型</span></a><span class="md-plain">，每种类型都针对不同的监控场景进行了优化。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">1）Counter：累积计数器，只能增加或重置为零，适合统计请求总数、错误次数等单调递增的指标。在我们的 AI 监控场景中，<span class="md-pair-s"><code>ai_model_requests_total</code><span class="md-plain"> 大模型请求总数就是一个典型的 Counter 指标。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">2）Gauge：仪表盘类型，数值可以任意上下波动，适合记录当前状态值，比如内存使用量、当前在线用户数、队列长度等。</span></p>
<p class="md-end-block md-p"><span class="md-plain">3）Histogram：直方图类型，用于观察数据分布情况，比如请求响应时间的分布。它会自动生成多个时间序列，包括各个桶的计数、总和以及总数，可以用来计算百分位数等统计指标。</span></p>
<p class="md-end-block md-p"><span class="md-plain">4）Summary：和 Histogram 类似，但它在客户端预先计算百分位数，适合需要精确百分位数计算但对网络传输有要求的场景。</span></p>
<p class="md-end-block md-p"><span class="md-plain">通过合理选择指标类型，我们可以用最小的存储开销获得最大的监控价值。</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h4 class="md-end-block md-heading"><span class="md-plain">存储机制</span></h4>
<p class="md-end-block md-p"><span class="md-plain">提到拉模式，可能会有朋友误以为 Prometheus 不存储数据，实际上它拥有自己的高性能时间序列数据库 <span class="md-meta-i-c  md-link"><a href="https://prometheus.io/docs/prometheus/latest/storage/" rel="noopener nofollow"><span class="md-plain">TSDB</span></a><span class="md-plain">，单节点就能处理数百万个时间序列，满足大部分企业的监控需求。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">新写入的数据首先存储在内存中，达到时间阈值（每 2 小时一个数据块）后批量写入磁盘，这种设计在保证查询性能的同时也提供了良好的写入吞吐量。预写日志 WAL 机制确保了数据的可靠性，即使系统崩溃也不会丢失数据。</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/aa1106e8aa5be543fc615dc8b5f3b834.svg"><img class="md-svg-img lazyload" data-src="https://pic.yupi.icu/1/aa1106e8aa5be543fc615dc8b5f3b834.svg"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">什么是 Grafana？</span></h3>
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://grafana.com/" rel="noopener nofollow"><span class="md-plain">Grafana</span></a><span class="md-plain"> 是一个开源的数据可视化平台，专门用于创建监控看板。它可以连接多种数据源（包括 Prometheus、MySQL、PostgreSQL、Elasticsearch 等），并提供丰富的图表类型和可视化选项。</span></span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1755099918658-cda02e5f-a4c9-4258-ac42-836d2dddf323.png"><img data-src="https://pic.yupi.icu/1/1755099918658-cda02e5f-a4c9-4258-ac42-836d2dddf323.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">虽然 Grafana 是一个功能非常丰富的企业级产品，拥有告警管理、用户权限控制、插件生态、云服务集成等高级特性，但对于我们目前的需求来说，将它当作一个看板工具来使用，知道怎么创建看板和接入数据进行展示就足够了。</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">环境准备</span></h3>
<p class="md-end-block md-p"><span class="md-plain">接下来我们先开始搭建 Prometheus + Grafana 监控环境。</span></p>
<p class="md-end-block md-p"><span class="md-plain">为了照顾不便安装 Docker 或不熟悉 Docker 的同学，我这里使用普通的安装方式，会 Docker 的同学用 Docker 启动更方便。</span></p>
<h4 class="md-end-block md-heading"><span class="md-plain">Prometheus 安装</span></h4>
<p class="md-end-block md-p"><span class="md-plain">1）访问 <span class="md-meta-i-c  md-link"><a href="https://prometheus.io/download/" rel="noopener nofollow"><span class="md-plain">Prometheus 下载页面</span></a><span class="md-plain">，选择对应的操作系统和架构。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">2）下载并解压到不包含中文路径的目录。</span></p>
<p class="md-end-block md-p"><span class="md-plain">3）查看默认配置文件 <span class="md-pair-s"><code>prometheus.yml</code><span class="md-plain">，关键配置如下：</span></span></span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-comment"># 抓取配置<br><span><span class="cm-atom">scrape_configs<span class="cm-meta">:<br><span>&nbsp;<span class="cm-comment"># Prometheus 自身监控<br><span><span class="cm-meta">-&nbsp;<span class="cm-atom">job_name<span class="cm-meta">:&nbsp;<span class="cm-string">"prometheus"<br><span><span class="cm-atom">&nbsp; static_configs<span class="cm-meta">:<br><span><span class="cm-meta">&nbsp; &nbsp; -&nbsp;<span class="cm-atom">targets<span class="cm-meta">: [<span class="cm-string">"localhost:9090"<span class="cm-meta">]<br><span><span class="cm-atom">&nbsp; &nbsp; &nbsp; labels<span class="cm-meta">:<br><span><span class="cm-atom">&nbsp; &nbsp; &nbsp; &nbsp; app<span class="cm-meta">:&nbsp;<span class="cm-string">"prometheus"</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">默认配置会监控 Prometheus 自己，这样我们可以先测试环境是否正常。</span></p>
<p class="md-end-block md-p"><span class="md-plain">4）启动 Prometheus：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>./prometheus&nbsp;<span class="cm-attribute">--config<span class="cm-def">.file<span class="cm-operator">=prometheus.yml</span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">启动成功后会在 9090 端口提供服务。</span></p>
<p class="md-end-block md-p"><span class="md-plain">5）访问 <span class="md-meta-i-c  md-link"><a href="http://localhost:9090/" rel="noopener nofollow"><span class="md-plain">http://localhost:9090</span></a><span class="md-plain"> 进入管理界面，建议开启本地时间（不然时间可能少 8 个小时）：</span></span></span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1754977358261-326f8db3-081c-4e25-b1ff-1adee0bc34b7.png"><img data-src="https://pic.yupi.icu/1/1754977358261-326f8db3-081c-4e25-b1ff-1adee0bc34b7.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">访问 <span class="md-link md-pair-s"><a href="http://localhost:9090/metrics" rel="noopener nofollow">http://localhost:9090/metrics</a><span class="md-plain"> 可以看到 Prometheus 自身暴露的指标数据：</span></span></span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1754977389225-918baf6a-1dac-4311-bed9-efa406b4149a.png"><img data-src="https://pic.yupi.icu/1/1754977389225-918baf6a-1dac-4311-bed9-efa406b4149a.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">这就是 Prometheus 期望的指标数据格式，每个应用都需要在 <span class="md-pair-s"><code>/metrics</code><span class="md-plain"> 端点暴露类似的数据。</span></span></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">6）在 Prometheus 查询界面可以输入 <span class="md-meta-i-c  md-link"><a href="https://prometheus.io/docs/prometheus/latest/querying/basics/" rel="noopener nofollow"><span class="md-plain">PromQL 表达式</span></a><span class="md-plain"> 查看指标：</span></span></span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>prometheus_target_interval_length_seconds</span></pre>
<p class="md-end-block md-p"><span class="md-plain">这个指标记录了 Prometheus 抓取目标之间的实际时间间隔，比如你配置每 15 秒抓取一次，但实际可能是 14.8 秒或 15.2 秒，这个指标就记录这些实际值。</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1754976382092-e570f4ff-11d0-46fb-8294-2609a68a4506.png"><img data-src="https://pic.yupi.icu/1/1754976382092-e570f4ff-11d0-46fb-8294-2609a68a4506.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">7）在 Graph 页签可以查看可视化图表，比如计算过去 1 分钟内 Prometheus 每秒平均创建的内存数据块数：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>rate(prometheus_tsdb_head_chunks_created_total[1m])</span></pre>
<p class="md-end-block md-p"><span class="md-plain">如图：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1754976765459-3900cb61-1608-4f11-a638-e75be3005470.png"><img data-src="https://pic.yupi.icu/1/1754976765459-3900cb61-1608-4f11-a638-e75be3005470.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h4 class="md-end-block md-heading"><span class="md-plain">Grafana 安装</span></h4>
<p class="md-end-block md-p"><span class="md-plain">1）访问 <span class="md-meta-i-c  md-link"><a href="https://grafana.com/grafana/download" rel="noopener nofollow"><span class="md-plain">Grafana 下载页面</span></a><span class="md-plain">，根据操作系统选择对应的安装包。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">2）按照对应系统的 <span class="md-meta-i-c  md-link"><a href="https://grafana.com/docs/grafana/latest/setup-grafana/installation/" rel="noopener nofollow"><span class="md-plain">安装文档</span></a><span class="md-plain"> 进行安装。比如 Windows 系统直接执行 <span class="md-pair-s"><code>grafana-server.exe</code><span class="md-plain">，Mac 系统执行下列命令：</span></span></span></span></span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>./bin/grafana server</span></pre>
<p class="md-end-block md-p"><span class="md-plain">3）访问 <span class="md-meta-i-c  md-link"><a href="http://localhost:3000/" rel="noopener nofollow"><span class="md-plain">http://localhost:3000</span></a><span class="md-plain"> 查看看板，默认登录账号密码都是 <span class="md-pair-s"><code>admin</code><span class="md-plain">：</span></span></span></span></span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1754989329074-6b7ef9ba-deba-4b2e-b1ad-4b6f65e74d7f.png"><img data-src="https://pic.yupi.icu/1/1754989329074-6b7ef9ba-deba-4b2e-b1ad-4b6f65e74d7f.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h4 class="md-end-block md-heading"><span class="md-plain">Grafana 整合 Prometheus</span></h4>
<p class="md-end-block md-p"><span class="md-plain">Grafana 与 Prometheus 打配合的 <span class="md-meta-i-c  md-link"><a href="https://grafana.com/docs/grafana/latest/datasources/prometheus/" rel="noopener nofollow"><span class="md-plain">工作原理</span></a><span class="md-plain"> 很简单：Grafana 通过 HTTP API 从 Prometheus 查询数据，然后以图表形式展示。用户可以编写 PromQL 表达式来实现灵活的数据分析。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">下面我们先来跑通一下整合流程。</span></p>
<p class="md-end-block md-p"><span class="md-plain">1）参考 <span class="md-meta-i-c  md-link"><a href="https://grafana.com/docs/grafana/latest/getting-started/get-started-grafana-prometheus/" rel="noopener nofollow"><span class="md-plain">官方文档</span></a><span class="md-plain">，登录 Grafana 后，需要先添加 Prometheus 作为数据源：</span></span></span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1754989547540-2e7e7c8c-919a-4896-852b-42a786cb6315.png"><img data-src="https://pic.yupi.icu/1/1754989547540-2e7e7c8c-919a-4896-852b-42a786cb6315.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">配置 Prometheus 服务器地址，然后测试连接：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1754989860103-6b93433a-c728-41b2-bdff-ccec92dc47e8.png"><img data-src="https://pic.yupi.icu/1/1754989860103-6b93433a-c728-41b2-bdff-ccec92dc47e8.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">2）快速导入现成的仪表板模板：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1754989617939-1d76807b-e062-44f5-afb5-f682f0be37d9.png"><img data-src="https://pic.yupi.icu/1/1754989617939-1d76807b-e062-44f5-afb5-f682f0be37d9.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">3）进入看板页面，查看导入的看板：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1754989643232-3eb02205-ed68-47e8-8773-01fde52f264e.png"><img data-src="https://pic.yupi.icu/1/1754989643232-3eb02205-ed68-47e8-8773-01fde52f264e.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">4）查看看板详情，一个仪表板可以包含多个 Panel（图表面板）：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1754990146126-1dc34e6e-ba27-428f-9d59-236be2fd7698.png"><img data-src="https://pic.yupi.icu/1/1754990146126-1dc34e6e-ba27-428f-9d59-236be2fd7698.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">每个 Panel 都可以查看具体的数据、状态和查询语句：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1754990178425-46532cdc-3e4a-4c23-8d57-9e7f149ab6ad.png"><img data-src="https://pic.yupi.icu/1/1754990178425-46532cdc-3e4a-4c23-8d57-9e7f149ab6ad.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">开发实现</span></h3>
<p class="md-end-block md-p"><span class="md-plain">环境准备就绪后，接下来在我们的 AI 零代码应用生成平台中实现业务监控功能。</span></p>
<h4 class="md-end-block md-heading"><span class="md-plain">1、引入依赖</span></h4>
<p class="md-end-block md-p"><span class="md-plain">在 <span class="md-pair-s"><code>pom.xml</code><span class="md-plain"> 中添加必要的依赖：</span></span></span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-tag cm-bracket">&lt;<span class="cm-tag">dependency<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">groupId<span class="cm-tag cm-bracket">&gt;org.springframework.boot<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">groupId<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">artifactId<span class="cm-tag cm-bracket">&gt;spring-boot-starter-actuator<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">artifactId<span class="cm-tag cm-bracket">&gt;<br><span><span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">dependency<span class="cm-tag cm-bracket">&gt;<br><span><span class="cm-tag cm-bracket">&lt;<span class="cm-tag">dependency<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">groupId<span class="cm-tag cm-bracket">&gt;io.micrometer<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">groupId<span class="cm-tag cm-bracket">&gt;<br><span>&nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;<span class="cm-tag">artifactId<span class="cm-tag cm-bracket">&gt;micrometer-registry-prometheus<span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">artifactId<span class="cm-tag cm-bracket">&gt;<br><span><span class="cm-tag cm-bracket">&lt;/<span class="cm-tag">dependency<span class="cm-tag cm-bracket">&gt;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">建议大家理解每个依赖的作用：</span></p>
<p class="md-end-block md-p"><span class="md-plain">1）<span class="md-meta-i-c  md-link"><a href="https://docs.spring.io/spring-boot/reference/actuator/enabling.html" rel="noopener nofollow"><span class="md-plain">spring-boot-starter-actuator</span></a><span class="md-plain">：Actuator 提供生产就绪的监控基础设施，暴露各种管理和监控端点。它是应用与外部监控系统交互的窗口，但本身不负责指标数据的收集。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">2）micrometer-core：Micrometer 是真正的指标收集引擎，负责收集 JVM、HTTP、数据库等各种指标数据。它提供统一的 API 让开发者可以创建自定义指标（类似于一个门面），是整个监控体系的数据生产者。</span></p>
<p class="md-end-block md-p"><span class="md-plain">3）<span class="md-meta-i-c  md-link"><a href="https://docs.micrometer.io/micrometer/reference/" rel="noopener nofollow"><span class="md-plain">micrometer-registry-prometheus</span></a><span class="md-plain">：Prometheus Registry 专门负责将 Micrometer 收集的指标数据转换为 Prometheus 格式。它创建 <span class="md-meta-i-c  md-link"><a href="https://docs.spring.io/spring-boot/reference/actuator/metrics.html#actuator.metrics.export.prometheus" rel="noopener nofollow"><span class="md-plain">/actuator/prometheus</span></a><span class="md-plain"> 端点，让 Prometheus 服务器可以直接拉取标准格式的监控数据。</span></span></span></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">Prometheus 可以定期访问 <span class="md-pair-s"><code>/actuator/prometheus</code><span class="md-plain"> 端点拉取指标数据，实现对 Spring Boot 应用的持续监控和告警。</span></span></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h4 class="md-end-block md-heading"><span class="md-plain">2、编写配置</span></h4>
<p class="md-end-block md-p"><span class="md-plain">在 <span class="md-pair-s"><code>application.yml</code><span class="md-plain"> 中添加 Actuator 配置，暴露监控端点：</span></span></span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-atom">management<span class="cm-meta">:<br><span><span class="cm-atom">endpoints<span class="cm-meta">:<br><span><span class="cm-atom">&nbsp; web<span class="cm-meta">:<br><span><span class="cm-atom">&nbsp; &nbsp; exposure<span class="cm-meta">:<br><span><span class="cm-atom">&nbsp; &nbsp; &nbsp; include<span class="cm-meta">:&nbsp;health,info,prometheus<br><span><span class="cm-atom">endpoint<span class="cm-meta">:<br><span><span class="cm-atom">&nbsp; health<span class="cm-meta">:<br><span><span class="cm-atom">&nbsp; &nbsp; show-details<span class="cm-meta">:&nbsp;always</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">重启项目后，可以访问端点验证配置。比如 Prometheus 指标端点：<span class="md-link md-pair-s"><a href="http://localhost:8123/api/actuator/prometheus" rel="noopener nofollow">http://localhost:8123/api/actuator/prometheus</a><span class="md-plain">，可以看到 Spring Boot 默认提供的各种系统指标。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1755062896980-40900a1a-f1c9-4201-ac7e-1bd861cecc67.png"><img data-src="https://pic.yupi.icu/1/1755062896980-40900a1a-f1c9-4201-ac7e-1bd861cecc67.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h4 class="md-end-block md-heading"><span class="md-plain">3、监控上下文</span></h4>
<p class="md-end-block md-p"><span class="md-plain">由于需要在监听器中获取业务维度信息（比如 appId、userId），我们可以通过 ThreadLocal 来传递这些参数。</span></p>
<p class="md-end-block md-p"><span class="md-plain">1）在 <span class="md-pair-s"><code>monitor</code><span class="md-plain"> 包下定义上下文类 MonitorContext：</span></span></span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-meta">@Data<br><span><span class="cm-meta">@Builder<br><span><span class="cm-meta">@NoArgsConstructor<br><span><span class="cm-meta">@AllArgsConstructor<br><span><span class="cm-keyword">public&nbsp;<span class="cm-keyword">class&nbsp;<span class="cm-def">MonitorContext&nbsp;<span class="cm-keyword">implements&nbsp;<span class="cm-variable">Serializable&nbsp;{<br><span><span>​<br><span>&nbsp; &nbsp;<span class="cm-keyword">private&nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">userId;<br><span><span>​<br><span>&nbsp; &nbsp;<span class="cm-keyword">private&nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">appId;<br><span><span>​<br><span>&nbsp; &nbsp;<span class="cm-meta">@Serial<br><span>&nbsp; &nbsp;<span class="cm-keyword">private&nbsp;<span class="cm-keyword">static&nbsp;<span class="cm-keyword">final&nbsp;<span class="cm-variable-3">long&nbsp;<span class="cm-variable">serialVersionUID&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-number">1L;<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">还可以按需添加 <span class="md-pair-s"><code>requestId</code><span class="md-plain">、<span class="md-pair-s"><code>chatHistoryId</code><span class="md-plain"> 等字段。</span></span></span></span></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">2）定义上下文持有者 MonitorContextHolder，提供 ThreadLocal 的读、写、清除方法：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-meta">@Slf4j<br><span><span class="cm-keyword">public&nbsp;<span class="cm-keyword">class&nbsp;<span class="cm-def">MonitorContextHolder&nbsp;{<br><span><span>​<br><span>&nbsp; &nbsp;<span class="cm-keyword">private&nbsp;<span class="cm-keyword">static&nbsp;<span class="cm-keyword">final&nbsp;<span class="cm-variable">ThreadLocal<span class="cm-operator">&lt;<span class="cm-variable">MonitorContext<span class="cm-operator">&gt;&nbsp;<span class="cm-variable">CONTEXT_HOLDER&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-keyword">new&nbsp;<span class="cm-variable">ThreadLocal<span class="cm-operator">&lt;&gt;();<br><span><span>​<br><span>&nbsp; &nbsp;<span class="cm-comment">/**<br><span>&nbsp; &nbsp;&nbsp;<span class="cm-comment">* 设置监控上下文<br><span>&nbsp; &nbsp;&nbsp;<span class="cm-comment">*/<br><span>&nbsp; &nbsp;<span class="cm-keyword">public&nbsp;<span class="cm-keyword">static&nbsp;<span class="cm-variable-3">void&nbsp;<span class="cm-variable">setContext(<span class="cm-variable">MonitorContext&nbsp;<span class="cm-variable">context) {<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">CONTEXT_HOLDER.<span class="cm-variable">set(<span class="cm-variable">context);<br><span>&nbsp; }<br><span><span>​<br><span>&nbsp; &nbsp;<span class="cm-comment">/**<br><span>&nbsp; &nbsp;&nbsp;<span class="cm-comment">* 获取当前监控上下文<br><span>&nbsp; &nbsp;&nbsp;<span class="cm-comment">*/<br><span>&nbsp; &nbsp;<span class="cm-keyword">public&nbsp;<span class="cm-keyword">static&nbsp;<span class="cm-variable">MonitorContext&nbsp;<span class="cm-variable">getContext() {<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">return&nbsp;<span class="cm-variable">CONTEXT_HOLDER.<span class="cm-variable">get();<br><span>&nbsp; }<br><span><span>​<br><span>&nbsp; &nbsp;<span class="cm-comment">/**<br><span>&nbsp; &nbsp;&nbsp;<span class="cm-comment">* 清除监控上下文<br><span>&nbsp; &nbsp;&nbsp;<span class="cm-comment">*/<br><span>&nbsp; &nbsp;<span class="cm-keyword">public&nbsp;<span class="cm-keyword">static&nbsp;<span class="cm-variable-3">void&nbsp;<span class="cm-variable">clearContext() {<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">CONTEXT_HOLDER.<span class="cm-variable">remove();<br><span>&nbsp; }<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">3）在 <span class="md-pair-s"><code>AppServiceImpl</code><span class="md-plain"> 的 <span class="md-pair-s"><code>chatToGenCode</code><span class="md-plain"> 方法中设置上下文，并在 AI 调用流结束时清理：</span></span></span></span></span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-comment">// 5. 通过校验后，添加用户消息到对话历史<br><span><span class="cm-variable">chatHistoryService.<span class="cm-variable">addChatMessage(<span class="cm-variable">appId,&nbsp;<span class="cm-variable">message,&nbsp;<span class="cm-variable">ChatHistoryMessageTypeEnum.<span class="cm-variable">USER.<span class="cm-variable">getValue(),&nbsp;<span class="cm-variable">loginUser.<span class="cm-variable">getId());<br><span><span class="cm-comment">// 6. 设置监控上下文<br><span><span class="cm-variable">MonitorContextHolder.<span class="cm-variable">setContext(<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">MonitorContext.<span class="cm-variable">builder()<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">userId(<span class="cm-variable">loginUser.<span class="cm-variable">getId().<span class="cm-variable">toString())<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">appId(<span class="cm-variable">appId.<span class="cm-variable">toString())<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">build()<br><span>);<br><span><span class="cm-comment">// 7. 调用 AI 生成代码（流式）<br><span><span class="cm-variable">Flux<span class="cm-operator">&lt;<span class="cm-variable-3">String<span class="cm-operator">&gt;&nbsp;<span class="cm-variable">codeStream&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">aiCodeGeneratorFacade.<span class="cm-variable">generateAndSaveCodeStream(<span class="cm-variable">message,&nbsp;<span class="cm-variable">codeGenTypeEnum,&nbsp;<span class="cm-variable">appId);<br><span><span class="cm-comment">// 8. 收集 AI 响应内容并在完成后记录到对话历史<br><span><span class="cm-keyword">return&nbsp;<span class="cm-variable">streamHandlerExecutor.<span class="cm-variable">doExecute(<span class="cm-variable">codeStream,&nbsp;<span class="cm-variable">chatHistoryService,&nbsp;<span class="cm-variable">appId,&nbsp;<span class="cm-variable">loginUser,&nbsp;<span class="cm-variable">codeGenTypeEnum)<br><span>&nbsp; &nbsp; &nbsp; .<span class="cm-variable">doFinally(<span class="cm-variable">signalType&nbsp;<span class="cm-operator">-&gt;&nbsp;{<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">// 流结束时清理（无论成功/失败/取消）<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">MonitorContextHolder.<span class="cm-variable">clearContext();<br><span>&nbsp; &nbsp; &nbsp; });</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">注意清理时机应该是在流结束时，而不是方法返回值之前，这样能确保整个请求周期内都能获取到上下文信息。</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h4 class="md-end-block md-heading"><span class="md-plain">4、指标收集器</span></h4>
<p class="md-end-block md-p"><span class="md-plain">编写指标收集器，负责收集业务数据并转换为 Prometheus 指标。</span></p>
<p class="md-end-block md-p"><span class="md-plain">这一步不用想太多，尽量把 <span class="md-pair-s "><strong>最细粒度的数据</strong><span class="md-plain"> 按照维度分类统计就好。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">指标收集器需要提供几个方法，分别统计请求信息、错误信息、Token 消耗、响应时间，下面仅列举部分代码：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-meta">@Component<br><span><span class="cm-meta">@Slf4j<br><span><span class="cm-keyword">public&nbsp;<span class="cm-keyword">class&nbsp;<span class="cm-def">AiModelMetricsCollector&nbsp;{<br><span><span>​<br><span>&nbsp; &nbsp;<span class="cm-meta">@Resource<br><span>&nbsp; &nbsp;<span class="cm-keyword">private&nbsp;<span class="cm-variable">MeterRegistry&nbsp;<span class="cm-variable">meterRegistry;<br><span><span>​<br><span>&nbsp; &nbsp;<span class="cm-comment">// 缓存已创建的指标，避免重复创建（按指标类型分离缓存）<br><span>&nbsp; &nbsp;<span class="cm-keyword">private&nbsp;<span class="cm-keyword">final&nbsp;<span class="cm-variable">ConcurrentMap<span class="cm-operator">&lt;<span class="cm-variable-3">String,&nbsp;<span class="cm-variable">Counter<span class="cm-operator">&gt;&nbsp;<span class="cm-variable">requestCountersCache&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-keyword">new&nbsp;<span class="cm-variable">ConcurrentHashMap<span class="cm-operator">&lt;&gt;();<br><span>&nbsp; &nbsp;<span class="cm-keyword">private&nbsp;<span class="cm-keyword">final&nbsp;<span class="cm-variable">ConcurrentMap<span class="cm-operator">&lt;<span class="cm-variable-3">String,&nbsp;<span class="cm-variable">Timer<span class="cm-operator">&gt;&nbsp;<span class="cm-variable">responseTimersCache&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-keyword">new&nbsp;<span class="cm-variable">ConcurrentHashMap<span class="cm-operator">&lt;&gt;();<br><span><span>​<br><span>&nbsp; &nbsp;<span class="cm-comment">/**<br><span>&nbsp; &nbsp;&nbsp;<span class="cm-comment">* 记录请求次数<br><span>&nbsp; &nbsp;&nbsp;<span class="cm-comment">*/<br><span>&nbsp; &nbsp;<span class="cm-keyword">public&nbsp;<span class="cm-variable-3">void&nbsp;<span class="cm-variable">recordRequest(<span class="cm-variable-3">String&nbsp;<span class="cm-variable">userId,&nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">appId,&nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">modelName,&nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">status) {<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">key&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable-3">String.<span class="cm-variable">format(<span class="cm-string">"%s_%s_%s_%s",&nbsp;<span class="cm-variable">userId,&nbsp;<span class="cm-variable">appId,&nbsp;<span class="cm-variable">modelName,&nbsp;<span class="cm-variable">status);<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">Counter&nbsp;<span class="cm-variable">counter&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">requestCountersCache.<span class="cm-variable">computeIfAbsent(<span class="cm-variable">key,&nbsp;<span class="cm-variable">k&nbsp;<span class="cm-operator">-&gt;<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">Counter.<span class="cm-variable">builder(<span class="cm-string">"ai_model_requests_total")<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">description(<span class="cm-string">"AI模型总请求次数")<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">tag(<span class="cm-string">"user_id",&nbsp;<span class="cm-variable">userId)<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">tag(<span class="cm-string">"app_id",&nbsp;<span class="cm-variable">appId)<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">tag(<span class="cm-string">"model_name",&nbsp;<span class="cm-variable">modelName)<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">tag(<span class="cm-string">"status",&nbsp;<span class="cm-variable">status)<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">register(<span class="cm-variable">meterRegistry)<br><span>&nbsp; &nbsp; &nbsp; );<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">counter.<span class="cm-variable">increment();<br><span>&nbsp; }<br><span><span>​<br><span><span class="cm-tab"><span class="cm-comment">// 省略记录错误和记录 Token 消耗的代码<br><span><span>​<br><span>&nbsp; &nbsp;<span class="cm-comment">/**<br><span>&nbsp; &nbsp;&nbsp;<span class="cm-comment">* 记录响应时间<br><span>&nbsp; &nbsp;&nbsp;<span class="cm-comment">*/<br><span>&nbsp; &nbsp;<span class="cm-keyword">public&nbsp;<span class="cm-variable-3">void&nbsp;<span class="cm-variable">recordResponseTime(<span class="cm-variable-3">String&nbsp;<span class="cm-variable">userId,&nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">appId,&nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">modelName,&nbsp;<span class="cm-variable">Duration&nbsp;<span class="cm-variable">duration) {<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">key&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable-3">String.<span class="cm-variable">format(<span class="cm-string">"%s_%s_%s",&nbsp;<span class="cm-variable">userId,&nbsp;<span class="cm-variable">appId,&nbsp;<span class="cm-variable">modelName);<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">Timer&nbsp;<span class="cm-variable">timer&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">responseTimersCache.<span class="cm-variable">computeIfAbsent(<span class="cm-variable">key,&nbsp;<span class="cm-variable">k&nbsp;<span class="cm-operator">-&gt;<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">Timer.<span class="cm-variable">builder(<span class="cm-string">"ai_model_response_duration_seconds")<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">description(<span class="cm-string">"AI模型响应时间")<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">tag(<span class="cm-string">"user_id",&nbsp;<span class="cm-variable">userId)<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">tag(<span class="cm-string">"app_id",&nbsp;<span class="cm-variable">appId)<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">tag(<span class="cm-string">"model_name",&nbsp;<span class="cm-variable">modelName)<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">register(<span class="cm-variable">meterRegistry)<br><span>&nbsp; &nbsp; &nbsp; );<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">timer.<span class="cm-variable">record(<span class="cm-variable">duration);<br><span>&nbsp; }<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">这里的几个关键点：</span></p>
<ol class="ol-list" start="">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">选择合适的指标类型：Counter 用于计数（请求次数、错误次数、Token 数量）；Timer 用于时间测量（AI 模型响应时间）</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">使用缓存避免统计对象重复注册：Micrometer 会为相同的维度组合创建唯一的指标，通过缓存可以重用同一个 Counter / Timer 对象，避免每次调用都执行 <span class="md-pair-s"><code>Counter.builder()...register()</code><span class="md-plain"> 操作。</span></span></span></p>
</li>
</ol>
<p class="md-end-block md-p">&nbsp;</p>
<h4 class="md-end-block md-heading"><span class="md-plain">5、AI 调用监听器</span></h4>
<p class="md-end-block md-p"><span class="md-plain">编写 LangChain4j 监听器来触发指标收集，这是整个监控体系的核心。下面列举监听 AI 请求和响应的代码：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-meta">@Component<br><span><span class="cm-meta">@Slf4j<br><span><span class="cm-keyword">public&nbsp;<span class="cm-keyword">class&nbsp;<span class="cm-def">AiModelMonitorListener&nbsp;<span class="cm-keyword">implements&nbsp;<span class="cm-variable">ChatModelListener&nbsp;{<br><span><span>​<br><span>&nbsp; &nbsp;<span class="cm-comment">// 用于存储请求开始时间的键<br><span>&nbsp; &nbsp;<span class="cm-keyword">private&nbsp;<span class="cm-keyword">static&nbsp;<span class="cm-keyword">final&nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">REQUEST_START_TIME_KEY&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-string">"request_start_time";<br><span>&nbsp; &nbsp;<span class="cm-comment">// 用于监控上下文传递（因为请求和响应事件的触发不是同一个线程）<br><span>&nbsp; &nbsp;<span class="cm-keyword">private&nbsp;<span class="cm-keyword">static&nbsp;<span class="cm-keyword">final&nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">MONITOR_CONTEXT_KEY&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-string">"monitor_context";<br><span>&nbsp; &nbsp;<br><span>&nbsp; &nbsp;<span class="cm-meta">@Resource<br><span>&nbsp; &nbsp;<span class="cm-keyword">private&nbsp;<span class="cm-variable">AiModelMetricsCollector&nbsp;<span class="cm-variable">aiModelMetricsCollector;<br><span><span>​<br><span>&nbsp; &nbsp;<span class="cm-meta">@Override<br><span>&nbsp; &nbsp;<span class="cm-keyword">public&nbsp;<span class="cm-variable-3">void&nbsp;<span class="cm-variable">onRequest(<span class="cm-variable">ChatModelRequestContext&nbsp;<span class="cm-variable">requestContext) {<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">// 记录请求开始时间<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">requestContext.<span class="cm-variable">attributes().<span class="cm-variable">put(<span class="cm-variable">REQUEST_START_TIME_KEY,&nbsp;<span class="cm-variable">Instant.<span class="cm-variable">now());<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">// 从监控上下文中获取信息<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">MonitorContext&nbsp;<span class="cm-variable">context&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">MonitorContextHolder.<span class="cm-variable">getContext();<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">userId&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">context.<span class="cm-variable">getUserId();<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">appId&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">context.<span class="cm-variable">getAppId();<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">requestContext.<span class="cm-variable">attributes().<span class="cm-variable">put(<span class="cm-variable">MONITOR_CONTEXT_KEY,&nbsp;<span class="cm-variable">context);<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">// 获取模型名称<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">modelName&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">requestContext.<span class="cm-variable">chatRequest().<span class="cm-variable">modelName();<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">// 记录请求指标<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">aiModelMetricsCollector.<span class="cm-variable">recordRequest(<span class="cm-variable">userId,&nbsp;<span class="cm-variable">appId,&nbsp;<span class="cm-variable">modelName,&nbsp;<span class="cm-string">"started");<br><span>&nbsp; }<br><span><span>​<br><span>&nbsp; &nbsp;<span class="cm-meta">@Override<br><span>&nbsp; &nbsp;<span class="cm-keyword">public&nbsp;<span class="cm-variable-3">void&nbsp;<span class="cm-variable">onResponse(<span class="cm-variable">ChatModelResponseContext&nbsp;<span class="cm-variable">responseContext) {<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">// 从属性中获取监控信息（由 onRequest 方法存储）<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">Map<span class="cm-operator">&lt;<span class="cm-variable-3">Object,&nbsp;<span class="cm-variable-3">Object<span class="cm-operator">&gt;&nbsp;<span class="cm-variable">attributes&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">responseContext.<span class="cm-variable">attributes();<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">// 从监控上下文中获取信息<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">MonitorContext&nbsp;<span class="cm-variable">context&nbsp;<span class="cm-operator">=&nbsp;(<span class="cm-variable">MonitorContext)&nbsp;<span class="cm-variable">attributes.<span class="cm-variable">get(<span class="cm-variable">MONITOR_CONTEXT_KEY);<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">userId&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">context.<span class="cm-variable">getUserId();<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">appId&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">context.<span class="cm-variable">getAppId();<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">// 获取模型名称<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">modelName&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">responseContext.<span class="cm-variable">chatResponse().<span class="cm-variable">modelName();<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">// 记录成功请求<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">aiModelMetricsCollector.<span class="cm-variable">recordRequest(<span class="cm-variable">userId,&nbsp;<span class="cm-variable">appId,&nbsp;<span class="cm-variable">modelName,&nbsp;<span class="cm-string">"success");<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">// 记录响应时间<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">recordResponseTime(<span class="cm-variable">attributes,&nbsp;<span class="cm-variable">userId,&nbsp;<span class="cm-variable">appId,&nbsp;<span class="cm-variable">modelName);<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">// 记录 Token 使用情况<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">recordTokenUsage(<span class="cm-variable">responseContext,&nbsp;<span class="cm-variable">userId,&nbsp;<span class="cm-variable">appId,&nbsp;<span class="cm-variable">modelName);<br><span>&nbsp; }<br><span><span>​<br><span><span class="cm-tab"><span class="cm-tab"><span class="cm-comment">// 省略监听错误的代码<br><span><span>​<br><span><span>​<br><span>&nbsp; &nbsp;<span class="cm-comment">/**<br><span>&nbsp; &nbsp;&nbsp;<span class="cm-comment">* 记录响应时间<br><span>&nbsp; &nbsp;&nbsp;<span class="cm-comment">*/<br><span>&nbsp; &nbsp;<span class="cm-keyword">private&nbsp;<span class="cm-variable-3">void&nbsp;<span class="cm-variable">recordResponseTime(<span class="cm-variable">Map<span class="cm-operator">&lt;<span class="cm-variable-3">Object,&nbsp;<span class="cm-variable-3">Object<span class="cm-operator">&gt;&nbsp;<span class="cm-variable">attributes,&nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">userId,&nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">appId,&nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">modelName) {<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">Instant&nbsp;<span class="cm-variable">startTime&nbsp;<span class="cm-operator">=&nbsp;(<span class="cm-variable">Instant)&nbsp;<span class="cm-variable">attributes.<span class="cm-variable">get(<span class="cm-variable">REQUEST_START_TIME_KEY);<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">Duration&nbsp;<span class="cm-variable">responseTime&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">Duration.<span class="cm-variable">between(<span class="cm-variable">startTime,&nbsp;<span class="cm-variable">Instant.<span class="cm-variable">now());<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">aiModelMetricsCollector.<span class="cm-variable">recordResponseTime(<span class="cm-variable">userId,&nbsp;<span class="cm-variable">appId,&nbsp;<span class="cm-variable">modelName,&nbsp;<span class="cm-variable">responseTime);<br><span>&nbsp; }<br><span><span>​<br><span>&nbsp; &nbsp;<span class="cm-comment">/**<br><span>&nbsp; &nbsp;&nbsp;<span class="cm-comment">* 记录Token使用情况<br><span>&nbsp; &nbsp;&nbsp;<span class="cm-comment">*/<br><span>&nbsp; &nbsp;<span class="cm-keyword">private&nbsp;<span class="cm-variable-3">void&nbsp;<span class="cm-variable">recordTokenUsage(<span class="cm-variable">ChatModelResponseContext&nbsp;<span class="cm-variable">responseContext,&nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">userId,&nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">appId,&nbsp;<span class="cm-variable-3">String&nbsp;<span class="cm-variable">modelName) {<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">TokenUsage&nbsp;<span class="cm-variable">tokenUsage&nbsp;<span class="cm-operator">=&nbsp;<span class="cm-variable">responseContext.<span class="cm-variable">chatResponse().<span class="cm-variable">metadata().<span class="cm-variable">tokenUsage();<br><span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">if&nbsp;(<span class="cm-variable">tokenUsage&nbsp;<span class="cm-operator">!=&nbsp;<span class="cm-atom">null) {<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">aiModelMetricsCollector.<span class="cm-variable">recordTokenUsage(<span class="cm-variable">userId,&nbsp;<span class="cm-variable">appId,&nbsp;<span class="cm-variable">modelName,&nbsp;<span class="cm-string">"input",&nbsp;<span class="cm-variable">tokenUsage.<span class="cm-variable">inputTokenCount());<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">aiModelMetricsCollector.<span class="cm-variable">recordTokenUsage(<span class="cm-variable">userId,&nbsp;<span class="cm-variable">appId,&nbsp;<span class="cm-variable">modelName,&nbsp;<span class="cm-string">"output",&nbsp;<span class="cm-variable">tokenUsage.<span class="cm-variable">outputTokenCount());<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">aiModelMetricsCollector.<span class="cm-variable">recordTokenUsage(<span class="cm-variable">userId,&nbsp;<span class="cm-variable">appId,&nbsp;<span class="cm-variable">modelName,&nbsp;<span class="cm-string">"total",&nbsp;<span class="cm-variable">tokenUsage.<span class="cm-variable">totalTokenCount());<br><span>&nbsp; &nbsp; &nbsp; }<br><span>&nbsp; }<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">有几个重要细节需要注意：</span></p>
<ol class="ol-list" start="">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">线程切换问题：请求监听在主线程，但响应监听可能在另一个线程，所以要通过 AI context 的 attributes 传递参数。</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">时间计算：在请求开始时记录时间戳，在响应完成时计算耗时。</span></p>
</li>
</ol>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">然后需要将监听器注册到 AI 模型配置中。修改 <span class="md-pair-s"><code>ReasoningStreamingChatModelConfig</code><span class="md-plain"> 和 <span class="md-pair-s"><code>StreamingChatModelConfig</code><span class="md-plain">：</span></span></span></span></span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-meta">@Resource<br><span><span class="cm-keyword">private&nbsp;<span class="cm-variable">AiModelMonitorListener&nbsp;<span class="cm-variable">aiModelMonitorListener;<br><span><span>​<br><span><span class="cm-meta">@Bean<br><span><span class="cm-meta">@Scope(<span class="cm-string">"prototype")<br><span><span class="cm-keyword">public&nbsp;<span class="cm-variable">StreamingChatModel&nbsp;<span class="cm-def">streamingChatModelPrototype() {<br><span>&nbsp; &nbsp;<span class="cm-keyword">return&nbsp;<span class="cm-variable">OpenAiStreamingChatModel.<span class="cm-variable">builder()<br><span><span class="cm-tab"><span class="cm-tab"><span class="cm-tab"><span class="cm-tab"><span class="cm-tab"><span class="cm-tab"><span class="cm-comment">// ... 省略其他配置<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">listeners(<span class="cm-variable">List.<span class="cm-variable">of(<span class="cm-variable">aiModelMonitorListener))<br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<span class="cm-variable">build();<br><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<h4 class="md-end-block md-heading"><span class="md-plain">6、测试验证</span></h4>
<p class="md-end-block md-p"><span class="md-plain">通过前端发起一次 AI 对话请求（需要调用 chatToGenCode 方法），看看会不会触发监听器的方法。</span></p>
<p class="md-end-block md-p"><span class="md-plain">成功触发请求监听，能够获取到上下文信息：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1755067504938-1d3090cd-cafe-4d9f-a612-629dc2a11d23.png"><img data-src="https://pic.yupi.icu/1/1755067504938-1d3090cd-cafe-4d9f-a612-629dc2a11d23.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">触发响应监听，能够获取到请求时间和上下文信息：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1755067556169-acb4d6cc-614c-412b-b184-671cd30fec76.png"><img data-src="https://pic.yupi.icu/1/1755067556169-acb4d6cc-614c-412b-b184-671cd30fec76.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">查看指标数据：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1755067736987-68e87f31-c56b-4a8a-a343-c82aef154ced.png"><img data-src="https://pic.yupi.icu/1/1755067736987-68e87f31-c56b-4a8a-a343-c82aef154ced.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-plain">可以看到相同维度的指标自动进行了聚合，确认各个指标统计正确。</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h4 class="md-end-block md-heading"><span class="md-plain">7、Prometheus 配置</span></h4>
<p class="md-end-block md-p"><span class="md-plain">现在需要配置 Prometheus 定期从我们的应用拉取监控数据，增加一个抓取任务：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-comment"># 抓取配置<br><span><span class="cm-atom">scrape_configs<span class="cm-meta">:<br><span>&nbsp;<span class="cm-comment"># Prometheus 自身监控<br><span><span class="cm-meta">-&nbsp;<span class="cm-atom">job_name<span class="cm-meta">:&nbsp;<span class="cm-string">'prometheus'<br><span><span class="cm-atom">&nbsp; static_configs<span class="cm-meta">:<br><span><span class="cm-meta">&nbsp; &nbsp; -&nbsp;<span class="cm-atom">targets<span class="cm-meta">: [<span class="cm-string">'localhost:9090'<span class="cm-meta">]<br><span><span>​<br><span>&nbsp;<span class="cm-comment"># Spring Boot 应用监控<br><span><span class="cm-meta">-&nbsp;<span class="cm-atom">job_name<span class="cm-meta">:&nbsp;<span class="cm-string">'yu-ai-code-mother'<br><span><span class="cm-atom">&nbsp; metrics_path<span class="cm-meta">:&nbsp;<span class="cm-string">'/api/actuator/prometheus'&nbsp;&nbsp;<span class="cm-comment"># Spring Boot Actuator 端点<br><span><span class="cm-atom">&nbsp; static_configs<span class="cm-meta">:<br><span><span class="cm-meta">&nbsp; &nbsp; -&nbsp;<span class="cm-atom">targets<span class="cm-meta">: [<span class="cm-string">'localhost:8123'<span class="cm-meta">]&nbsp;&nbsp;<span class="cm-comment"># 应用服务器地址<br><span><span class="cm-atom">&nbsp; scrape_interval<span class="cm-meta">:&nbsp;10s &nbsp;<span class="cm-comment"># 每 10 秒抓取一次<br><span><span class="cm-atom">&nbsp; scrape_timeout<span class="cm-meta">:&nbsp;10s &nbsp;&nbsp;<span class="cm-comment"># 抓取超时时间</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">然后使用新配置启动 Prometheus：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>./prometheus&nbsp;<span class="cm-attribute">--config<span class="cm-def">.file<span class="cm-operator">=&lt;配置文件路径&gt;</span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">测试查询我们自定义的指标：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1755068492693-14dd9333-6377-411a-921f-d61a9928eba1.png"><img data-src="https://pic.yupi.icu/1/1755068492693-14dd9333-6377-411a-921f-d61a9928eba1.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h4 class="md-end-block md-heading"><span class="md-plain">8、Grafana 可视化监控配置</span></h4>
<p class="md-end-block md-p"><span class="md-plain">有了数据后，接下来在 Grafana 中创建可视化看板。</span></p>
<p class="md-end-block md-p"><span class="md-plain">一个个手动创建图表会比较麻烦，更高效的方式是让 AI 帮我们生成完整的看板 JSON 配置。需要给 AI 提供需求说明、数据样例和 Grafana 规范。</span></p>
<p class="md-end-block md-p"><span class="md-plain">可以通过导入生成的 JSON 配置快速创建完整的看板：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1754990356239-b8f88310-c273-4675-b263-819c0256e079.png"><img data-src="https://pic.yupi.icu/1/1754990356239-b8f88310-c273-4675-b263-819c0256e079.png" class="lazyload"></span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1755070031859-90877294-a59c-434a-9548-95e54f6d98cc.png"><img data-src="https://pic.yupi.icu/1/1755070031859-90877294-a59c-434a-9548-95e54f6d98cc.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">看板代码可以在源码仓库获取：<span class="md-link md-pair-s"><a href="https://github.com/liyupi/yu-ai-code-mother/blob/master/grafana/ai_model_grafana_config.json" rel="noopener nofollow">https://github.com/liyupi/yu-ai-code-mother/blob/master/grafana/ai_model_grafana_config.json</a><span class="md-plain">（记得点个 star 再走哦，感谢支持！）</span></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">效果如图：</span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="https://pic.yupi.icu/1/1755099021246-329ed3d8-b29c-4511-9cb1-0023058a933f.png"><img data-src="https://pic.yupi.icu/1/1755099021246-329ed3d8-b29c-4511-9cb1-0023058a933f.png" class="lazyload"></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<div class="md-hr md-end-block"><hr></div>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">OK，就分享到这里。希望大家掌握这些技术、以及实现可观测性的套路，能够为项目搭建合理的监控分析系统，构建更可靠的 AI 应用。</span></p>
<h2 class="md-end-block md-heading"><span class="md-plain">更多编程学习资源</span></h2>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/course" rel="noopener nofollow"><span class="md-plain">Java前端程序员必做项目实战教程+毕设网站</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/" rel="noopener nofollow"><span class="md-plain">程序员免费编程学习交流社区（自学必备）</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/course/cv" rel="noopener nofollow"><span class="md-plain">程序员保姆级求职写简历指南（找工作必备）</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.mianshiya.com/" rel="noopener nofollow"><span class="md-plain">程序员免费面试刷题网站工具（找工作必备）</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1640584449888772098" rel="noopener nofollow"><span class="md-plain">最新Java零基础入门学习路线 + Java教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1640586673306091521" rel="noopener nofollow"><span class="md-plain">最新Python零基础入门学习路线 + Python教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1640586014108303362" rel="noopener nofollow"><span class="md-plain">最新前端零基础入门学习路线 + 前端教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1640586867363954689" rel="noopener nofollow"><span class="md-plain">最新数据结构和算法零基础入门学习路线 + 算法教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1644279832026075138" rel="noopener nofollow"><span class="md-plain">最新C++零基础入门学习路线、C++教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1641797333479903234" rel="noopener nofollow"><span class="md-plain">最新数据库零基础入门学习路线 + 数据库教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1640589994284695553" rel="noopener nofollow"><span class="md-plain">最新Redis零基础入门学习路线 + Redis教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1641035880439271426" rel="noopener nofollow"><span class="md-plain">最新计算机基础入门学习路线 + 计算机基础教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1641366118197153793" rel="noopener nofollow"><span class="md-plain">最新小程序入门学习路线 + 小程序开发教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="http://sqlmother.yupi.icu/" rel="noopener nofollow"><span class="md-plain">最新SQL零基础入门学习路线 + SQL教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1640586295529324545" rel="noopener nofollow"><span class="md-plain">最新Linux零基础入门学习路线 + Linux教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1640588753362108417" rel="noopener nofollow"><span class="md-plain">最新Git/GitHub零基础入门学习路线 + Git教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1640587909942099969" rel="noopener nofollow"><span class="md-plain">最新操作系统零基础入门学习路线 + 操作系统教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1640588119619551233" rel="noopener nofollow"><span class="md-plain">最新计算机网络零基础入门学习路线 + 计算机网络教程</span></a></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-meta-i-c  md-link"><a href="https://www.code-nav.cn/post/1640588392073150465" rel="noopener nofollow"><span class="md-plain">最新设计模式零基础入门学习路线 + 设计模式教程</span></a></span></p>
</li>
<li class="md-list-item md-focus-container">
<p class="md-end-block md-p md-focus"><span class="md-meta-i-c md-link md-expand"><a href="https://www.code-nav.cn/post/1640648711119892481" rel="noopener nofollow"><span class="md-plain">最新软件工程零基础入门学习路线 + 软件工程教程</span></a></span></p>
</li>
</ul>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-08-22 17:25">2025-08-22 17:24</span>&nbsp;
<a href="https://www.cnblogs.com/yupi">程序员鱼皮</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19053195);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19053195', targetLink: 'https://www.cnblogs.com/yupi/p/19053195', title: '这套 Java 监控系统太香了！我连夜给项目加上了' })">举报</a>
</div>
        