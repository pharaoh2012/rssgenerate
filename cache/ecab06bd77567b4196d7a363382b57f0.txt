
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/xuxueli/p/18947083" title="发布于 2025-06-25 00:18">
    <span role="heading" aria-level="2">XXL-JOB v3.1.1 | 分布式任务调度平台（Dify工作流调度增强）</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h3 id="release-notes">Release Notes</h3>
<ul>
<li>1、【调整】AI任务（difyWorkflowJobHandler）优化：针对 “baseUrl、apiKey” 等Dify配置信息，从执行器侧文件类配置调整至调度中心“任务参数”动态配置，支持多Dify应用集成并提升研发效率；</li>
<li>2、【优化】合并PR-2417，修复任务管理时JobHandler录入空格问题；</li>
<li>3、【优化】合并PR-2504，规避SQL注入问题；</li>
<li>4、【升级】多个项目依赖升级至较新稳定版本，涉及 netty、spring/springboot、groovy 等；</li>
</ul>
<h3 id="代码接入示例ai任务">代码接入示例：AI任务</h3>
<p>此处以  difyWorkflowJobHandler 为例，注意需要前置部署AI执行器（xxl-job-executor-sample-ai），可参考官方文档说明。</p>
<h5 id="步骤一调度中心新建-difyworkflowjobhandler-任务">步骤一：调度中心，新建 difyWorkflowJobHandler 任务</h5>
<p><img alt="image" loading="lazy" data-src="https://img2024.cnblogs.com/blog/554415/202506/554415-20250625001604762-925798677.png" class="lazyload"></p>
<h4 id="步骤二任务执行查看任务进度及日志">步骤二：任务执行，查看任务进度及日志</h4>
<p><img alt="image" loading="lazy" data-src="https://img2024.cnblogs.com/blog/554415/202506/554415-20250625001614095-938306942.png" class="lazyload"></p>
<h3 id="代码接入示例常规任务">代码接入示例：常规任务</h3>
<p>XXL-JOB支持多模式任务，下文以简单的“Bean模式任务”为例介绍，三步快速开发接入。</p>
<h5 id="步骤一执行器开发job方法">步骤一：执行器，开发Job方法</h5>
<pre><code>@XxlJob("demoJobHandler")
 public void demoJobHandler() throws Exception {
    XxlJobHelper.log("XXL-JOB, Hello World.");
}
</code></pre>
<h4 id="步骤二调度中心新建调度任务">步骤二：调度中心，新建调度任务</h4>
<p><img alt="image" loading="lazy" data-src="https://img2024.cnblogs.com/blog/554415/202506/554415-20250625001626303-323743879.png" class="lazyload"></p>
<h4 id="步骤三任务执行查看任务进度及日志">步骤三：任务执行，查看任务进度及日志</h4>
<p><img alt="image" loading="lazy" data-src="https://img2024.cnblogs.com/blog/554415/202506/554415-20250625001635425-860990842.png" class="lazyload"></p>
<h3 id="简介">简介</h3>
<p>XXL-JOB是一个轻量级分布式任务调度平台，其核心设计目标是开发迅速、学习简单、轻量级、易扩展。现已开放源代码并接入多家公司线上产品线，开箱即用。</p>
<ul>
<li><a href="http://www.xuxueli.com/xxl-job/" target="_blank" rel="noopener nofollow">中文文档：http://www.xuxueli.com/xxl-job/ </a></li>
<li><a href="http://www.xuxueli.com/page/community.html" target="_blank" rel="noopener nofollow">社区交流：http://www.xuxueli.com/page/community.html </a></li>
</ul>
<p><img alt="image" loading="lazy" data-src="https://img2024.cnblogs.com/blog/554415/202506/554415-20250625001812791-252779448.png" class="lazyload"></p>
<h3 id="特性">特性</h3>
<ul>
<li>1、简单：支持通过Web页面对任务进行CRUD操作，操作简单，一分钟上手；</li>
<li>2、动态：支持动态修改任务状态、启动/停止任务，以及终止运行中任务，即时生效；</li>
<li>3、调度中心HA（中心式）：调度采用中心式设计，“调度中心”自研调度组件并支持集群部署，可保证调度中心HA；</li>
<li>4、执行器HA（分布式）：任务分布式执行，任务"执行器"支持集群部署，可保证任务执行HA；</li>
<li>5、注册中心: 执行器会周期性自动注册任务, 调度中心将会自动发现注册的任务并触发执行。同时，也支持手动录入执行器地址；</li>
<li>6、弹性扩容缩容：一旦有新执行器机器上线或者下线，下次调度时将会重新分配任务；</li>
<li>7、触发策略：提供丰富的任务触发策略，包括：Cron触发、固定间隔触发、固定延时触发、API（事件）触发、人工触发、父子任务触发；</li>
<li>8、调度过期策略：调度中心错过调度时间的补偿处理策略，包括：忽略、立即补偿触发一次等；</li>
<li>9、阻塞处理策略：调度过于密集执行器来不及处理时的处理策略，策略包括：单机串行（默认）、丢弃后续调度、覆盖之前调度；</li>
<li>10、任务超时控制：支持自定义任务超时时间，任务运行超时将会主动中断任务；</li>
<li>11、任务失败重试：支持自定义任务失败重试次数，当任务失败时将会按照预设的失败重试次数主动进行重试；其中分片任务支持分片粒度的失败重试；</li>
<li>12、任务失败告警；默认提供邮件方式失败告警，同时预留扩展接口，可方便的扩展短信、钉钉等告警方式；</li>
<li>13、路由策略：执行器集群部署时提供丰富的路由策略，包括：第一个、最后一个、轮询、随机、一致性HASH、最不经常使用、最近最久未使用、故障转移、忙碌转移等；</li>
<li>14、分片广播任务：执行器集群部署时，任务路由策略选择"分片广播"情况下，一次任务调度将会广播触发集群中所有执行器执行一次任务，可根据分片参数开发分片任务；</li>
<li>15、动态分片：分片广播任务以执行器为维度进行分片，支持动态扩容执行器集群从而动态增加分片数量，协同进行业务处理；在进行大数据量业务操作时可显著提升任务处理能力和速度。</li>
<li>16、故障转移：任务路由策略选择"故障转移"情况下，如果执行器集群中某一台机器故障，将会自动Failover切换到一台正常的执行器发送调度请求。</li>
<li>17、任务进度监控：支持实时监控任务进度；</li>
<li>18、Rolling实时日志：支持在线查看调度结果，并且支持以Rolling方式实时查看执行器输出的完整的执行日志；</li>
<li>19、GLUE：提供Web IDE，支持在线开发任务逻辑代码，动态发布，实时编译生效，省略部署上线的过程。支持30个版本的历史版本回溯。</li>
<li>20、脚本任务：支持以GLUE模式开发和运行脚本任务，包括Shell、Python、NodeJS、PHP、PowerShell等类型脚本;</li>
<li>21、命令行任务：原生提供通用命令行任务Handler（Bean任务，"CommandJobHandler"）；业务方只需要提供命令行即可；</li>
<li>22、任务依赖：支持配置子任务依赖，当父任务执行结束且执行成功后将会主动触发一次子任务的执行, 多个子任务用逗号分隔；</li>
<li>23、一致性：“调度中心”通过DB锁保证集群分布式调度的一致性, 一次任务调度只会触发一次执行；</li>
<li>24、自定义任务参数：支持在线配置调度任务入参，即时生效；</li>
<li>25、调度线程池：调度系统多线程触发调度运行，确保调度精确执行，不被堵塞；</li>
<li>26、数据加密：调度中心和执行器之间的通讯进行数据加密，提升调度信息安全性；</li>
<li>27、邮件报警：任务失败时支持邮件报警，支持配置多邮件地址群发报警邮件；</li>
<li>28、推送maven中央仓库: 将会把最新稳定版推送到maven中央仓库, 方便用户接入和使用;</li>
<li>29、运行报表：支持实时查看运行数据，如任务数量、调度次数、执行器数量等；以及调度报表，如调度日期分布图，调度成功分布图等；</li>
<li>30、全异步：任务调度流程全异步化设计实现，如异步调度、异步运行、异步回调等，有效对密集调度进行流量削峰，理论上支持任意时长任务的运行；</li>
<li>31、跨语言/OpenAPI：调度中心与执行器提供语言无关的 OpenApi（RESTful 格式），第三方任意语言可据此对接调度中心或者实现执行器，实现多语言支持。除此之外，还提供了 “多任务模式”和“httpJobHandler”等其他跨语言方案；</li>
<li>32、国际化：调度中心支持国际化设置，提供中文、英文两种可选语言，默认为中文；</li>
<li>33、容器化：提供官方docker镜像，并实时更新推送dockerhub，进一步实现产品开箱即用；</li>
<li>34、线程池隔离：调度线程池进行隔离拆分，慢任务自动降级进入"Slow"线程池，避免耗尽调度线程，提高系统稳定性；</li>
<li>35、用户管理：支持在线管理系统用户，存在管理员、普通用户两种角色；</li>
<li>36、权限控制：执行器维度进行权限控制，管理员拥有全量权限，普通用户需要分配执行器权限后才允许相关操作；</li>
<li>37、AI任务：原生提供AI执行器，并内置多个AI任务Handler，与spring-ai、ollama、dify等集成打通，支持快速开发AI类任务。</li>
</ul>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-06-25 00:18">2025-06-25 00:18</span>&nbsp;
<a href="https://www.cnblogs.com/xuxueli">许雪里</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18947083);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18947083', targetLink: 'https://www.cnblogs.com/xuxueli/p/18947083', title: 'XXL-JOB v3.1.1 | 分布式任务调度平台（Dify工作流调度增强）' })">举报</a>
</div>
        