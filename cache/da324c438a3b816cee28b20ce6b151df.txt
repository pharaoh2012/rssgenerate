
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/niceWk/p/18980134" title="发布于 2025-07-12 07:14">
    <span role="heading" aria-level="2">Rust修仙之道 第十三章 并行境 · 多线程、共享与消息灵道</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="第十三章并行境--多线程共享与消息灵道">第十三章：并行境 · 多线程、共享与消息灵道</h2>
<blockquote>
<p><em>“术者一身不可至万处，分灵影可并行化心。”</em></p>
</blockquote>
<p>顾行云于静室冥修，心观符阵延迟，渐悟：“纵术法再快，若不能并行，终受瓶颈所限。”</p>
<p>他毅然踏入<strong>并行殿</strong>，学习 Rust 修真界最安全的“多线程术”。</p>
<h3 id="一灵影分身术--threadspawn">一、灵影分身术 · <code>thread::spawn()</code></h3>
<p>最初的并发术式，乃是将灵气复制为影：</p>
<pre><code class="language-rust">use std::thread;

fn main() {
    let handle = thread::spawn(|| {
        println!("🌪 分身执行灵术！");
    });
    println!("🧙 本体继续修炼");
    handle.join().unwrap(); // 等待分身结束
}
</code></pre>
<blockquote>
<p>分身 <code>spawn()</code> 生成后可独立运转，<code>join()</code> 阶段合体归一。</p>
</blockquote>
<h3 id="二共享灵枢--arct原灵复刻术">二、共享灵枢 · <code>Arc&lt;T&gt;</code>（原灵复刻术）</h3>
<p>若多个分身需访问同一份灵术卷轴，该如何控制所有权？</p>
<pre><code class="language-rust">use std::sync::Arc;
let scroll = Arc::new(String::from("风刃卷轴"));

for _ in 0..3 {
    let s = Arc::clone(&amp;scroll);
    thread::spawn(move || {
        println!("👤 分身施展：{}", s);
    });
}
</code></pre>
<blockquote>
<p><code>Arc&lt;T&gt;</code> 即<strong>原灵复刻容器</strong>，共享所有权、只读稳定，但不可变更。</p>
</blockquote>
<h3 id="三互斥之印--mutext共享可变封印">三、互斥之印 · <code>Mutex&lt;T&gt;</code>（共享可变封印）</h3>
<p>若多个分身还需修改灵力？此时需加封“互斥印”：</p>
<pre><code class="language-rust">use std::sync::{Mutex, Arc};

let mana = Arc::new(Mutex::new(100));

for _ in 0..4 {
    let m = Arc::clone(&amp;mana);
    thread::spawn(move || {
        let mut mana_pool = m.lock().unwrap();
        *mana_pool += 10;
    });
}
</code></pre>
<ul>
<li>
<p><code>Mutex::new(value)</code> 创建封印灵池；</p>
</li>
<li>
<p><code>.lock().unwrap()</code> 打开封印、取得灵气所有权；</p>
</li>
<li>
<p><code>Arc</code> 包裹共享引用，避免灵权争夺。</p>
</li>
</ul>
<blockquote>
<p>顾行云自创口诀：“共享不争者为 Arc；共改需封者用 Mutex。”</p>
</blockquote>
<h3 id="四通灵信道--mpscchannel灵意传讯术">四、通灵信道 · <code>mpsc::channel()</code>（灵意传讯术）</h3>
<p>除了共享，分身还可通过“信道”传递意念：</p>
<pre><code class="language-rust">use std::sync::mpsc;
use std::thread;

let (tx, rx) = mpsc::channel();

thread::spawn(move || {
    tx.send("🌩 任务完成！").unwrap();
});

let received = rx.recv().unwrap();
println!("主术士收到：{}", received);
</code></pre>
<ul>
<li>
<p><code>channel()</code> 创建信道双口：发出端 <code>tx</code>，接收端 <code>rx</code>；</p>
</li>
<li>
<p>可用于<strong>多源汇集、任务分发、事件驱动</strong>等多灵协作法。</p>
</li>
</ul>
<h3 id="灵术术式对比总结">灵术术式对比总结</h3>
<table>
<thead>
<tr>
<th>技术术式</th>
<th>功效</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>thread::spawn()</code></td>
<td>创建灵影任务</td>
<td>异步执行子任务</td>
</tr>
<tr>
<td><code>Arc&lt;T&gt;</code></td>
<td>多分身共享灵气</td>
<td>多线程共享只读数据</td>
</tr>
<tr>
<td><code>Mutex&lt;T&gt;</code></td>
<td>灵气封印池</td>
<td>多线程共享可变数据</td>
</tr>
<tr>
<td><code>channel()</code></td>
<td>灵意传讯术</td>
<td>跨线程通讯 / 事件驱动</td>
</tr>
</tbody>
</table>
<h3 id="并发心诀--分身之理">并发心诀 · 分身之理</h3>
<blockquote>
<p><em>术不再身施，而在并行调度；控共改之界，避冲突之灾，方为上乘“灵影之术”。</em></p>
</blockquote>
<hr>
<h2 id="️-上一章下一章-待续️">⬅️ <a href="https://www.cnblogs.com/niceWk/p/18979519" target="_blank">上一章</a>　　　　　　　　　　　　[下一章 待续➡️]</h2>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.002777777777777778" data-date-updated="2025-07-12 07:18">2025-07-12 07:14</span>&nbsp;
<a href="https://www.cnblogs.com/niceWk">NiceWk</a>&nbsp;
阅读(<span id="post_view_count">49</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18980134);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18980134', targetLink: 'https://www.cnblogs.com/niceWk/p/18980134', title: 'Rust修仙之道 第十三章 并行境 &amp;#183; 多线程、共享与消息灵道' })">举报</a>
</div>
        