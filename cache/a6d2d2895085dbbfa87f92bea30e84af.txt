
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/fffffff/p/18933341" title="发布于 2025-06-17 17:36">
    <span role="heading" aria-level="2">vue3 + springboot实现微信登录</span>
    

</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			    <div id="cnblogs_post_description" style="display: none">
        <img src="https://img2024.cnblogs.com/blog/3575900/202506/3575900-20250617173606184-1843698971.png" alt="vue3 + springboot实现微信登录" class="desc_img">
        vue3 + springboot实现微信登录
    </div>
<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<div class="lake-content">
<h2 id="BngF7" style="font-size: 24px; line-height: 32px; margin: 21px 0 5px"><span class="ne-text">创建VUE3项目</span></h2>
<h4 id="W7Gjc" style="font-size: 16px; line-height: 24px; margin: 10px 0 5px"><span class="ne-text">创建初始文件</span></h4>
<p id="u10fd4c8c" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">进入项目存放位置</span></p>
<p id="u532376d0" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">右键用命令行打开（终端打开）</span></p>
<pre id="eRE8x" class="ne-codeblock language-plain highlighter-hljs" style="border: 1px solid rgba(232, 232, 232, 1); border-radius: 2px; background: rgba(249, 249, 249, 1); padding: 16px; font-size: 13px; color: rgba(89, 89, 89, 1)" data-language="plain"><code> npm create vite@latest wechat-report --template vue</code></pre>
<p id="ud5c122b5" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">npm：包管理需要安装node.js</span></p>
<p id="u6c101cc8" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">Vite：用于热部署和生成、打包项目</span></p>
<p id="uc5a8202d" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">--template vue：模板指定为vue</span></p>
<p id="ue6da9b01" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"></p>
<h4 id="I3dRj" style="font-size: 16px; line-height: 24px; margin: 10px 0 5px"><span class="ne-text">可能报错： 因为在此系统上禁止运行脚本。有关详细信息</span></h4>
<h4 id="yKK9T" style="font-size: 16px; line-height: 24px; margin: 10px 0 5px"><span class="ne-text">会提示是否继续：</span></h4>
<p id="u604108d6" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">Ok to proceed? (y) </span></p>
<p id="uaf3f7bc0" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">输入y回车</span></p>
<h4 id="Min82" style="font-size: 16px; line-height: 24px; margin: 10px 0 5px"><span class="ne-text">会让选择版本和类型：</span></h4>
<p id="u69f6467c" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">如：◆ Select a framework:</span></p>
<p id="u115966ed" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">│ ○ Vanilla</span></p>
<p id="u14cdbead" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">│ ● Vue</span></p>
<p id="u2123d9c7" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">│ ○ React</span></p>
<p id="u24f8f518" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">用方向键移动到VUE，回车</span></p>
<p id="ubd678683" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">用方向键移动到JavaScript ，回车 </span></p>
<h4 id="v36M4" style="font-size: 16px; line-height: 24px; margin: 10px 0 5px"><span class="ne-text">移动到创建好的项目中初始化</span></h4>
<pre id="kCGpw" class="ne-codeblock language-plain highlighter-hljs" style="border: 1px solid rgba(232, 232, 232, 1); border-radius: 2px; background: rgba(249, 249, 249, 1); padding: 16px; font-size: 13px; color: rgba(89, 89, 89, 1)" data-language="plain"><code>cd wechat-report
npm install</code></pre>
<h4 id="FBGt9" style="font-size: 16px; line-height: 24px; margin: 10px 0 5px"><span class="ne-text">安装Element Plus</span></h4>
<pre id="csU19" class="ne-codeblock language-plain highlighter-hljs" style="border: 1px solid rgba(232, 232, 232, 1); border-radius: 2px; background: rgba(249, 249, 249, 1); padding: 16px; font-size: 13px; color: rgba(89, 89, 89, 1)" data-language="plain"><code># 安装Element Plus
npm install element-plus @element-plus/icons-vue

# 安装自动导入插件（可选但推荐）
npm install -D unplugin-vue-components unplugin-auto-import</code></pre>
<p id="u69e24fa0" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">第一行安装elementPlus 和图标库</span></p>
<p id="ufd34052a" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">第二行是自动导入插件：自动按需导入 Vue 组件（如 Element Plus 的 </span><code class="ne-code" style="font-family: SFMono-Regular, Consolas, Liberation Mono, Menlo, Courier, monospace; background-color: rgba(0, 0, 0, 0.06); border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; padding: 0 2px"><span class="ne-text">&lt;el-button&gt;</span></code><span class="ne-text">），无需手动 </span><code class="ne-code" style="font-family: SFMono-Regular, Consolas, Liberation Mono, Menlo, Courier, monospace; background-color: rgba(0, 0, 0, 0.06); border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; padding: 0 2px"><span class="ne-text">import</span></code></p>
<ul class="ne-ul" style="margin: 0; padding-left: 23px">
<li id="u5aca9730" data-lake-index-type="0"><code class="ne-code" style="font-family: SFMono-Regular, Consolas, Liberation Mono, Menlo, Courier, monospace; background-color: rgba(0, 0, 0, 0.06); border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; padding: 0 2px"><strong><span class="ne-text">unplugin-auto-import</span></strong></code><span class="ne-text">：自动导入 Vue 相关的 API（如 </span><code class="ne-code" style="font-family: SFMono-Regular, Consolas, Liberation Mono, Menlo, Courier, monospace; background-color: rgba(0, 0, 0, 0.06); border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; padding: 0 2px"><span class="ne-text">ref</span></code><span class="ne-text">、</span><code class="ne-code" style="font-family: SFMono-Regular, Consolas, Liberation Mono, Menlo, Courier, monospace; background-color: rgba(0, 0, 0, 0.06); border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; padding: 0 2px"><span class="ne-text">reactive</span></code><span class="ne-text">、</span><code class="ne-code" style="font-family: SFMono-Regular, Consolas, Liberation Mono, Menlo, Courier, monospace; background-color: rgba(0, 0, 0, 0.06); border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; padding: 0 2px"><span class="ne-text">onMounted</span></code><span class="ne-text"> 等），减少手动导入的代码。</span></li>
</ul>
<ul class="ne-ul" style="margin: 0; padding-left: 23px">
<li id="u7ca63e85" data-lake-index-type="0"><strong><span class="ne-text">减少代码量</span></strong><span class="ne-text">：不用手动写 </span><code class="ne-code" style="font-family: SFMono-Regular, Consolas, Liberation Mono, Menlo, Courier, monospace; background-color: rgba(0, 0, 0, 0.06); border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; padding: 0 2px"><span class="ne-text">import { ElButton } from 'element-plus'</span></code><span class="ne-text">。</span></li>
<li id="ude42280e" data-lake-index-type="0"><strong><span class="ne-text">优化打包体积</span></strong><span class="ne-text">：只打包实际用到的组件，避免全量引入。</span></li>
</ul>
<p id="uf54b3544" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"></p>
<h4 id="UpFCc" style="font-size: 16px; line-height: 24px; margin: 10px 0 5px"><span class="ne-text">配置项目</span></h4>
<p id="u9bc6fabc" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">进入项目，找到</span></p>
<p id="ub5c8b4f1" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">修改</span><code class="ne-code" style="font-family: SFMono-Regular, Consolas, Liberation Mono, Menlo, Courier, monospace; background-color: rgba(0, 0, 0, 0.06); border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; padding: 0 2px"><span class="ne-text">vite.config.js</span></code><span class="ne-text">：</span></p>
<p id="u0b804813" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">设置elementui,@/路径功能，后台地址映射</span></p>
<pre id="KX2aE" class="ne-codeblock language-plain highlighter-hljs" style="border: 1px solid rgba(232, 232, 232, 1); border-radius: 2px; background: rgba(249, 249, 249, 1); padding: 16px; font-size: 13px; color: rgba(89, 89, 89, 1)" data-language="plain"><code>import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'
import { fileURLToPath, URL } from 'node:url'
import AutoImport from 'unplugin-auto-import/vite'
import Components from 'unplugin-vue-components/vite'
import { ElementPlusResolver } from 'unplugin-vue-components/resolvers'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [
    vue(),
    AutoImport({
      resolvers: [ElementPlusResolver()],
    }),
    Components({
      resolvers: [ElementPlusResolver()],
    }),
  ],
  resolve: {
    alias: {
      '@': fileURLToPath(new URL('./src', import.meta.url)) // 使用现代ESM方式
    }
  },
  server: {
    proxy: {
      '/api': {
        target: 'http://your-backend-api.com', // 替换为实际后端地址
        changeOrigin: true,
        rewrite: path =&gt; path.replace(/^\/api/, '')
      }
    }
  }
})</code></pre>
<h4 id="PwIKJ" style="font-size: 16px; line-height: 24px; margin: 10px 0 5px"><span class="ne-text">安装微信JSSDK</span></h4>
<pre id="ZgGuI" class="ne-codeblock language-plain highlighter-hljs" style="border: 1px solid rgba(232, 232, 232, 1); border-radius: 2px; background: rgba(249, 249, 249, 1); padding: 16px; font-size: 13px; color: rgba(89, 89, 89, 1)" data-language="plain"><code>npm install weixin-js-sdk</code></pre>
<h4 id="Dytu8" style="font-size: 16px; line-height: 24px; margin: 10px 0 5px"><span class="ne-text">创建API服务</span></h4>
<p id="uda4da018" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">在</span><code class="ne-code" style="font-family: SFMono-Regular, Consolas, Liberation Mono, Menlo, Courier, monospace; background-color: rgba(0, 0, 0, 0.06); border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; padding: 0 2px"><span class="ne-text">src/api</span></code><span class="ne-text">目录下创建</span><code class="ne-code" style="font-family: SFMono-Regular, Consolas, Liberation Mono, Menlo, Courier, monospace; background-color: rgba(0, 0, 0, 0.06); border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; padding: 0 2px"><span class="ne-text">wechat.js</span></code><span class="ne-text">：</span></p>
<pre id="LOELf" class="ne-codeblock language-plain highlighter-hljs" style="border: 1px solid rgba(232, 232, 232, 1); border-radius: 2px; background: rgba(249, 249, 249, 1); padding: 16px; font-size: 13px; color: rgba(89, 89, 89, 1)" data-language="plain"><code>import axios from 'axios'

const service = axios.create({
  baseURL: '/api', // 根据实际后端API地址配置
  timeout: 5000
})

// 获取校验url,用于登录
export function getAuthorizationUrl(url) {
    return service({
        method: 'post',
        url: '/api/emergency/wxLoginReport/getAuthorizationUrl',
        data: { url }
    })
}

// 其他API...</code></pre>
<h4 id="xXYjT" style="font-size: 16px; line-height: 24px; margin: 10px 0 5px"><span class="ne-text">修改App.vue</span></h4>
<p id="uf2eb5ed2" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">清空内容</span></p>
<pre id="a7SCw" class="ne-codeblock language-plain highlighter-hljs" style="border: 1px solid rgba(232, 232, 232, 1); border-radius: 2px; background: rgba(249, 249, 249, 1); padding: 16px; font-size: 13px; color: rgba(89, 89, 89, 1)" data-language="plain"><code>&lt;template&gt;
  &lt;router-view /&gt;
&lt;/template&gt;

&lt;script&gt;
export default {
  name: 'App',
  setup() {
    return {}
  }
}
&lt;/script&gt;

&lt;style&gt;
/* 全局样式 */
#app {
  font-family: Avenir, Helvetica, Arial, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  color: #2c3e50;
  max-width: 100vw;
  min-height: 100vh;
  background-color: #f5f5f5;
}
&lt;/style&gt;</code></pre>
<h4 id="DmGhJ" style="font-size: 16px; line-height: 24px; margin: 10px 0 5px"><span class="ne-text">配置路由</span></h4>
<p id="u8294fdca" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">安装Vue Router：</span></p>
<pre id="XkNIi" class="ne-codeblock language-plain highlighter-hljs" style="border: 1px solid rgba(232, 232, 232, 1); border-radius: 2px; background: rgba(249, 249, 249, 1); padding: 16px; font-size: 13px; color: rgba(89, 89, 89, 1)" data-language="plain"><code>npm install vue-router@4</code></pre>
<p id="u3deaeaf5" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">创建</span><code class="ne-code" style="font-family: SFMono-Regular, Consolas, Liberation Mono, Menlo, Courier, monospace; background-color: rgba(0, 0, 0, 0.06); border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; padding: 0 2px"><span class="ne-text">src/router/index.js</span></code><span class="ne-text">：</span></p>
<p id="ud14c42b3" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">创建登录页面和结果页面</span></p>
<pre id="t9Zv8" class="ne-codeblock language-plain highlighter-hljs" style="border: 1px solid rgba(232, 232, 232, 1); border-radius: 2px; background: rgba(249, 249, 249, 1); padding: 16px; font-size: 13px; color: rgba(89, 89, 89, 1)" data-language="plain"><code>import { createRouter, createWebHashHistory } from 'vue-router'

const routes = [
    //登录页面
    {
        path: '/',
        name: 'Home',
        component: () =&gt; import('@/views/Home.vue')
    },
    //登录结果
    {
        path: '/Home2',
        name: 'Home2',
        component: () =&gt; import('@/views/Home2.vue')
    },
    // 其他路由...
]

const router = createRouter({
    history: createWebHashHistory(), // 使用hash模式，兼容微信公众号
    routes
})

export default router</code></pre>
<h4 id="JItPS" style="font-size: 16px; line-height: 24px; margin: 10px 0 5px"><span class="ne-text">创建示例页面</span></h4>
<p id="u62ac1bb4" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">创建</span><code class="ne-code" style="font-family: SFMono-Regular, Consolas, Liberation Mono, Menlo, Courier, monospace; background-color: rgba(0, 0, 0, 0.06); border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; padding: 0 2px"><span class="ne-text">src/views/Home.vue</span></code><span class="ne-text">：</span></p>
<p id="u8ccfe3f2" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">用于测试微信功能登录</span></p>
<pre id="XGhmI" class="ne-codeblock language-plain highlighter-hljs" style="border: 1px solid rgba(232, 232, 232, 1); border-radius: 2px; background: rgba(249, 249, 249, 1); padding: 16px; font-size: 13px; color: rgba(89, 89, 89, 1)" data-language="plain"><code>&lt;template&gt;
  &lt;div class="home"&gt;
    &lt;el-card class="box-card"&gt;
      &lt;template #header&gt;
        &lt;div class="card-header"&gt;
          &lt;span&gt;微信公众号示例&lt;/span&gt;
        &lt;/div&gt;
      &lt;/template&gt;
      &lt;el-button @click="loginAuth"&gt;登录&lt;/el-button&gt;
    &lt;/el-card&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
import {getAuthorizationUrl} from '@/api/wechat'

export default {
  name: 'Home',
  setup() {

    const loginAuth = () =&gt; {
      // let url = window.location.href;
      let url = 'http://192.168.10.213:5173/#/Home2';
      // console.log(url)
      getAuthorizationUrl(url).then(res =&gt; {
        console.log(res.data.msg)
        window.location.href = res.data.msg;
      })
    };
    return {
      loginAuth
    }
  }
}
&lt;/script&gt;

&lt;style scoped&gt;
.home {
  padding: 20px;
}

.box-card {
  max-width: 500px;
  margin: 0 auto;
}

.card-header {
  font-size: 18px;
  font-weight: bold;
}

&lt;/style&gt;</code></pre>
<p id="u69bda0d9" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">创建</span><code class="ne-code" style="font-family: SFMono-Regular, Consolas, Liberation Mono, Menlo, Courier, monospace; background-color: rgba(0, 0, 0, 0.06); border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; padding: 0 2px"><span class="ne-text">src/views/Home2.vue</span></code><span class="ne-text">：</span></p>
<p id="u4f1df665" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">登录结果页面</span></p>
<pre id="q7kjo" class="ne-codeblock language-plain highlighter-hljs" style="border: 1px solid rgba(232, 232, 232, 1); border-radius: 2px; background: rgba(249, 249, 249, 1); padding: 16px; font-size: 13px; color: rgba(89, 89, 89, 1)" data-language="plain"><code>&lt;template&gt;
  &lt;div class="wechat-auth-result"&gt;
    &lt;!-- 加载状态 --&gt;
    &lt;div v-if="loading" class="loading"&gt;加载中...&lt;/div&gt;

    &lt;!-- 成功状态 --&gt;
    &lt;div v-if="userInfo &amp;&amp; !error" class="success"&gt;
      &lt;div class="header"&gt;
        &lt;h2&gt;微信登录成功&lt;/h2&gt;
        &lt;p&gt;{{ userInfo.message }}&lt;/p&gt;
      &lt;/div&gt;

      &lt;div class="profile"&gt;
        &lt;img :src="userInfo.headimgurl" alt="用户头像" class="avatar"&gt;
        &lt;div class="details"&gt;
          &lt;h3&gt;{{ userInfo.nickname }}&lt;/h3&gt;
&lt;!--          &lt;button @click="goToDashboard" class="btn btn-primary"&gt;进入首页&lt;/button&gt;--&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;

    &lt;!-- 错误状态 --&gt;
    &lt;div v-if="error" class="error"&gt;
      &lt;h2&gt;登录失败&lt;/h2&gt;
      &lt;p&gt;{{ error }}&lt;/p&gt;
      &lt;button @click="retryLogin" class="btn btn-secondary"&gt;重新登录&lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
import {ref, onMounted} from 'vue';
import {useRoute, useRouter} from 'vue-router';

export default {
  setup() {
    const route = useRoute();
    const router = useRouter();
    const userInfo = ref(null);
    const loading = ref(true);
    const error = ref(null);

    // 获取并处理URL参数
    const parseUserInfo = () =&gt; {
      try {
        if (route.query.openid) {
          userInfo.value = {
            openid: route.query.openid,
            nickname: decodeURIComponent(route.query.nickname || '未知用户'),
            headimgurl: decodeURIComponent(route.query.headimgurl || ''),
            message: decodeURIComponent(route.query.msg || '登录成功')
          };

          // 清理URL
          window.history.replaceState({}, '', window.location.pathname);

          // 这里可以添加将用户信息存储到Vuex/Pinia或发送到后端验证的逻辑
        } else {
          error.value = '未获取到用户信息';
        }
      } catch (e) {
        error.value = '解析用户信息失败: ' + e.message;
      } finally {
        loading.value = false;
      }
    };

    // const goToDashboard = () =&gt; {
    //   router.push('/dashboard');
    // };

    const retryLogin = () =&gt; {
      router.push('/');
    };

    onMounted(() =&gt; {
      parseUserInfo();
    });

    return {userInfo, loading, error,  retryLogin};
  }
};
&lt;/script&gt;

&lt;style scoped&gt;
.wechat-auth-result {
  max-width: 500px;
  margin: 0 auto;
  padding: 20px;
}

.loading {
  text-align: center;
  padding: 40px 0;
}

.success .header {
  text-align: center;
  margin-bottom: 30px;
}

.profile {
  display: flex;
  align-items: center;
  gap: 20px;
  margin-top: 20px;
}

.avatar {
  width: 80px;
  height: 80px;
  border-radius: 50%;
  object-fit: cover;
}

.details {
  flex: 1;
}

.error {
  color: #dc3545;
  text-align: center;
  padding: 40px 0;
}

.btn {
  margin-top: 15px;
  padding: 8px 16px;
  border-radius: 4px;
  cursor: pointer;
}

.btn-primary {
  background-color: #007bff;
  color: white;
  border: none;
}

.btn-secondary {
  background-color: #6c757d;
  color: white;
  border: none;
}
&lt;/style&gt;</code></pre>
<h4 id="aZ7c3" style="font-size: 16px; line-height: 24px; margin: 10px 0 5px"><span class="ne-text">修改main.js</span></h4>
<pre id="JtAUC" class="ne-codeblock language-plain highlighter-hljs" style="border: 1px solid rgba(232, 232, 232, 1); border-radius: 2px; background: rgba(249, 249, 249, 1); padding: 16px; font-size: 13px; color: rgba(89, 89, 89, 1)" data-language="plain"><code>import { createApp } from 'vue'
import App from './App.vue'
import router from './router'

// 引入Element Plus样式
import 'element-plus/dist/index.css'

const app = createApp(App)

app.use(router)
app.mount('#app')</code></pre>
<h4 id="Me6he" style="font-size: 16px; line-height: 24px; margin: 10px 0 5px"><span class="ne-text">package.json</span></h4>
<p id="u4a0ec919" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">加上--host，用与显示内容</span></p>
<pre id="tPW6F" class="ne-codeblock language-plain highlighter-hljs" style="border: 1px solid rgba(232, 232, 232, 1); border-radius: 2px; background: rgba(249, 249, 249, 1); padding: 16px; font-size: 13px; color: rgba(89, 89, 89, 1)" data-language="plain"><code>"scripts": {
  "dev": "vite --host"
}</code></pre>
<p id="u9b779a36" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">npm run dev 启动</span></p>
<p id="u42836e87" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"></p>
<h2 id="oiKdb" style="font-size: 24px; line-height: 32px; margin: 21px 0 5px"><span class="ne-text">springboot后台</span></h2>
<h4 id="CJ5Pz" style="font-size: 16px; line-height: 24px; margin: 10px 0 5px"><span class="ne-text">controller层</span></h4>
<p id="u3e5d6f95" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">用于拼接微信调用地址与处理回调信息</span></p>
<pre id="mYrzC" class="ne-codeblock language-plain highlighter-hljs" style="border: 1px solid rgba(232, 232, 232, 1); border-radius: 2px; background: rgba(249, 249, 249, 1); padding: 16px; font-size: 13px; color: rgba(89, 89, 89, 1)" data-language="plain"><code>package yunline.controller;

import yunline.entity.TdSspUserEntity;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import yunline.base.ActionResult;
import yunline.service.TdSspUserService;
import yunline.utils.WxReportUtils;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.*;

@Api(tags = "应急排班系统", value = "emergency")
@RestController
@RequestMapping("/api/emergency/wxLoginReport")
public class WxReportController {
    @Autowired
    private TdSspUserService tdSspUserService;

    @ApiOperation("获取微信授权地址")
    @PostMapping("/getAuthorizationUrl")
    public ActionResult getAuthorizationUrl(@RequestBody Map&lt;String, String&gt; params) throws Exception {
        System.out.println("进入");
        String url = params.get("url");
        url = URLEncoder.encode(url, StandardCharsets.UTF_8.toString());
        return ActionResult.success(WxReportUtils.getAuthorizationUrl(url));
    }


    /**
     * 当用户授权后，微信会重定向到你指定的URI，并携带一个code参数。你需要捕获这个请求并提取code。
     */
    @ApiOperation("捕获微信授权回执")
    @GetMapping("/handleAuthorizationCallback")
    public void handleAuthorizationCallback(HttpServletRequest request, HttpServletResponse response) throws Exception {
        String code = request.getParameter("code");
        String state = request.getParameter("state");
        Map&lt;String, String[]&gt; c = request.getParameterMap();

        if (code == null) {
            // 处理错误情况
//            response.getWriter().println("授权失败，请重试！");
//            return ActionResult.fail("授权失败，请重试！");

            String frontendUrl = URLDecoder.decode(state, "UTF-8")
                    +"?openid="
                    +"&amp;msg=授权失败！";
            response.sendRedirect(frontendUrl);
            return ;
        }
        // 获取access_token和openid
        Map&lt;String, String&gt; tokenInfo = WxReportUtils.getTokenInfo(code);

        if (tokenInfo == null || !tokenInfo.containsKey("access_token") || !tokenInfo.containsKey("openid")) {
//            response.getWriter().println("获取access_token失败，请重试！");
//            return ActionResult.fail("获取access_token失败，请重试！");

            String frontendUrl = URLDecoder.decode(state, "UTF-8")
                    +"?openid="
                    +"&amp;msg=获取access_token失败！";
            response.sendRedirect(frontendUrl);
            return ;
        }

        String accessToken = tokenInfo.get("access_token");
        String openid = tokenInfo.get("openid");

        // 获取用户信息
        Map&lt;String, Object&gt; userInfo = WxReportUtils.getUserInfo(accessToken, openid);

        if (userInfo == null || !userInfo.containsKey("nickname") || !userInfo.containsKey("headimgurl")) {
//            response.getWriter().println("获取用户信息失败，请重试！");
//            return ActionResult.fail("获取用户信息失败，请重试！");

            String frontendUrl = URLDecoder.decode(state, "UTF-8")
                    +"?openid="
                    +"&amp;msg=获取用户信息失败！";
            response.sendRedirect(frontendUrl);
            return ;
        }

        // 完成本地用户认证
        String nickname = (String) userInfo.get("nickname");
        String headimgurl = (String) userInfo.get("headimgurl");
//        String sex = (String) userInfo.get("sex");
        Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();
        int has = tdSspUserService.lambdaQuery().eq(TdSspUserEntity::getRemark, openid).count();
        if (has &gt; 0) {
            //修改
            tdSspUserService.lambdaUpdate().eq(TdSspUserEntity::getRemark, openid)
                    .set(TdSspUserEntity::getPhotopath,headimgurl)
                    .set(TdSspUserEntity::getUserId,nickname).update();
        }else{
            //创建
            TdSspUserEntity entity = new TdSspUserEntity();
            entity.setUserId(nickname);
            entity.setPhotopath(headimgurl);
            entity.setRemark(openid);
            entity.setNickName(nickname);
            entity.setUserRegdate(new Date());
            tdSspUserService.create(entity);
        }
        map.put("userInfo", userInfo);
        map.put("openid", openid);
//        return ActionResult.success(map);
        //重定向
        String frontendUrl = URLDecoder.decode(state, "UTF-8")
                +"?openid=" + openid
                +"&amp;msg=登录成功"
                +"&amp;nickname="+nickname
                +"&amp;headimgurl="+headimgurl
                ;
        response.sendRedirect(frontendUrl);

//        return null;
    }

}</code></pre>
<p id="u4f20994f" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">创建</span><span class="ne-text" style="color: rgba(8, 8, 8, 1); background-color: rgba(255, 255, 255, 1)">WxReportUtils，用于对接微信</span></p>
<pre id="P7Aqv" class="ne-codeblock language-plain highlighter-hljs" style="border: 1px solid rgba(232, 232, 232, 1); border-radius: 2px; background: rgba(249, 249, 249, 1); padding: 16px; font-size: 13px; color: rgba(89, 89, 89, 1)" data-language="plain"><code>package yunline.utils;

import cn.hutool.json.JSONUtil;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.*;
import java.nio.charset.StandardCharsets;
import java.util.Map;

public class WxReportUtils {
    private static final String IP = getIP();
    private static final String APPID = "你的appid";
    private static final String APPSECRET = "你的APPSECRET";
//    private static final String SCOPE = "snsapi_base";
//    private static final String SCOPE = "snsapi_login";
    private static final String SCOPE = "snsapi_userinfo";
    private static final String PORT = "28888";
    private static final String STATE = "STATE";

    private static final String REDIRECT_URI = "后台调用地址,就是controller层的callback";

    private static String getIP() {
        try {
            InetAddress localhost = InetAddress.getLocalHost();
//            IP=localhost.getHostAddress();
            return localhost.getHostAddress();
        } catch (UnknownHostException e) {
            e.printStackTrace();
        }
        return "";
    }

    public static String getAuthorizationUrl() throws Exception {
        return getAuthorizationUrl(STATE);
    }
    public static String getAuthorizationUrl(String url) throws Exception {
        return "https://open.weixin.qq.com/connect/oauth2/authorize?"
                + "appid=" + APPID
                + "&amp;redirect_uri=" + URLEncoder.encode(REDIRECT_URI, StandardCharsets.UTF_8.toString())
                + "&amp;response_type=code"
                + "&amp;scope=" + SCOPE
//                + "&amp;state=" + STATE
                + "&amp;state=" + url
                + "#wechat_redirect";
    }


    /**
     * 获取token和openid
     *
     * @param code
     * @return
     * @throws Exception
     */
    public static Map&lt;String, String&gt; getTokenInfo(String code) throws Exception {
        String url = "https://api.weixin.qq.com/sns/oauth2/access_token?"
                + "appid=" + APPID
                + "&amp;secret=" + APPSECRET
                + "&amp;code=" + code
                + "&amp;grant_type=authorization_code";

        HttpURLConnection connection = (HttpURLConnection) new URL(url).openConnection();
        connection.setRequestMethod("GET");

        int responseCode = connection.getResponseCode();
        if (responseCode == 200) {
            BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            String inputLine;
            StringBuilder content = new StringBuilder();
            while ((inputLine = in.readLine()) != null) {
                content.append(inputLine);
            }
            in.close();
            connection.disconnect();
            return JSONUtil.toBean(content.toString(), Map.class, false);
        } else {
            throw new RuntimeException("请求失败：" + responseCode);
        }
    }

    /**
     * 获取用户信息
     *
     * @param accessToken
     * @param openId
     * @return
     * @throws Exception
     */
    public static Map&lt;String, Object&gt; getUserInfo(String accessToken, String openId) throws Exception {
        String url = "https://api.weixin.qq.com/sns/userinfo?"
                + "access_token=" + accessToken
                + "&amp;openid=" + openId
                + "&amp;lang=zh_CN";

        HttpURLConnection connection = (HttpURLConnection) new URL(url).openConnection();
        connection.setRequestMethod("GET");

        int responseCode = connection.getResponseCode();
        if (responseCode == 200) {
            BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            String inputLine;
            StringBuilder content = new StringBuilder();
            while ((inputLine = in.readLine()) != null) {
                content.append(inputLine);
            }
            in.close();
            connection.disconnect();

            return JSONUtil.toBean(content.toString(), Map.class, false);
        } else {
            throw new RuntimeException("请求失败：" + responseCode);
        }
    }
}</code></pre>
<p id="u9cb1559b" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"></p>
<h2 id="DPrpG" style="font-size: 24px; line-height: 32px; margin: 21px 0 5px"><span class="ne-text">微信配置</span></h2>
<h4 id="KbHf5" style="font-size: 16px; line-height: 24px; margin: 10px 0 5px"><span class="ne-text">进入微信测试地址：</span></h4>
<p id="ua01131df" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><a class="ne-link" href="https://mp.weixin.qq.com/debug/cgi-bin/sandboxinfo" target="_blank" rel="noopener nofollow" data-href="https://mp.weixin.qq.com/debug/cgi-bin/sandboxinfo"><span class="ne-text">https://mp.weixin.qq.com/debug/cgi-bin/sandboxinfo</span></a></p>
<h4 id="UML33" style="font-size: 16px; line-height: 24px; margin: 10px 0 5px"><span class="ne-text">注册后进行配置</span></h4>
<p id="ufb0fbe36" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><img src="https://img2024.cnblogs.com/blog/3575900/202506/3575900-20250617173433515-1504319131.webp"></p>
<p id="ud8550903" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"></p>
<p id="u7e30e081" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">配置获取用户信息的权限，配置一下域名</span></p>
<p class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"><img src="https://img2024.cnblogs.com/blog/3575900/202506/3575900-20250617173459873-957534447.webp"></span></p>
<h4 id="g0LWj" style="font-size: 16px; line-height: 24px; margin: 10px 0 5px"><span class="ne-text">内网穿透（可选</span></h4>
<p id="uccb42d56" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">这里我使用的是花生壳网穿透获得的外网地址，用了10块钱巨款</span></p>
<p id="u194e1ed9" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><img src="https://img2024.cnblogs.com/blog/3575900/202506/3575900-20250617173509710-159724587.webp"></p>
<h2 id="ljxnC" style="font-size: 24px; line-height: 32px; margin: 21px 0 5px"><span class="ne-text">结果演示</span></h2>
<p id="u3829b4bd" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><img src="https://img2024.cnblogs.com/blog/3575900/202506/3575900-20250617173519260-2105131550.webp"></p>
<p class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><img src="https://img2024.cnblogs.com/blog/3575900/202506/3575900-20250617173525980-117587180.webp"></p>
<p id="u72d3e41e" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"></p>
</div>
</div>
<div class="clear"></div>

		</div>
		<div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-06-17 17:37">2025-06-17 17:36</span>&nbsp;
<a href="https://www.cnblogs.com/fffffff">七烦</a>&nbsp;
阅读(<span id="post_view_count">17</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18933341);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18933341', targetLink: 'https://www.cnblogs.com/fffffff/p/18933341', title: 'vue3 + springboot实现微信登录' })">举报</a>
</div>
	