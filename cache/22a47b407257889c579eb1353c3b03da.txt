
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/kazusarua/p/18775040" title="发布于 2025-03-16 15:23">
    <span role="heading" aria-level="2">zstd压缩算法概述与基本使用</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>本文仅关注zstd的使用，并不关心其算法的具体实现</p>
<p>并没有尝试使用zstd的所有功能模式，但是会简单介绍每种模式的应用场景，用到的时候去查api吧</p>
<h1 id="step-0why-zstd">step 0：why zstd？</h1>
<p>zstd是facebook开源的压缩算法，可以在这里找到：<a href="https://github.com/facebook/zstd" target="_blank" rel="noopener nofollow">https://github.com/facebook/zstd</a></p>
<p>官方使用文档：<a href="https://facebook.github.io/zstd/zstd_manual.html" target="_blank" rel="noopener nofollow">https://facebook.github.io/zstd/zstd_manual.html</a></p>
<p>根据传闻（自己评估），zstd在通用任务场景下，其压缩速度和压缩比都有相对优秀的表现，相对于gzip和zlib等同行值得一试。</p>
<p>但是，具体采用哪种压缩算法，需要根据你自己的工作场景选择，最好提供一些sample files在benchmark上跑一下试试。</p>
<p>此处代码为C++，也支持其他的语言版本，可以到官网中查找。</p>
<h1 id="step-1下载并安装zstd">step 1：下载并安装zstd</h1>
<pre><code>git clone https://github.com/facebook/zstd.git
cd zstd/
make
sudo make install
make check
</code></pre>
<p>至此，应该正常完成zstd的安装和测试，可以<code>cd examples/</code>来尝试编译并运行部分demo代码</p>
<h1 id="step-2zstd的使用">step 2：zstd的使用</h1>
<h2 id="step-21基本功能api">step 2.1：基本功能api</h2>
<h2 id="step-211通用压缩">step 2.1.1：通用压缩</h2>
<p>单个文件压缩：<code>ZSTD_compress</code>和<code>ZSTD_decompress</code>成对使用，过程中需要提前分配内存空间，参见demo吧</p>
<p>多个文件批量压缩：一个最为重大的误区是对<code>ZSTD_compressCCtx</code>的理解，该函数只会将多个文件压缩为多个<code>.zst</code>，实际上<code>ZSTD_compressCCtx</code>并不会将多个文件打包为一个<code>.zst</code>。<br>
其意义在于重复使用<code>ZSTD_CCtx</code>上下文，避免多次重复申请和释放内存，用于批量压缩单个文件</p>
<h2 id="step-212流式压缩">step 2.1.2：流式压缩</h2>
<p>流式压缩：本质是对文件进行<strong>分块</strong>压缩，通常适用于大文件而不是小文件，比如<strong>日志，视频流，数据库等</strong>。<br>
分块读取数据，相比于一次性读取<strong>减少了内存占用</strong>，并且分块也可以支持<strong>多线程并发</strong>。<br>
解压缩同理，分块读取并解压缩。<br>
<code>ZSTD_compressStream</code>和<code>ZSTD_decompressStream</code>成对使用</p>
<p><strong>注意，<code>ZSTD_decompress</code>和<code>ZSTD_decompressStream</code>都能够正确解压文件，只是性能有区别</strong></p>
<p><code>ZSTD_c_compressionLevel</code>：是调整压缩速度和压缩率的trade-off，默认等级为3，当前范围是 1 ~ ZSTD_maxCLevel()</p>
<h2 id="step-213字典压缩">step 2.1.3：字典压缩</h2>
<p>官方提出了以下讨论：</p>
<blockquote>
<p>The smaller the amount of data to compress, the more difficult it is to compress. This problem is common to all compression algorithms, and reason is, compression algorithms learn from past data how to compress future data. But at the beginning of a new data set, there is no "past" to build upon.</p>
</blockquote>
<p>压缩算法的本质是对过去内容<strong>pattern</strong>的学习，直觉上有点类似ai中的模式识别。</p>
<p>提出了一个方法：使用一个预训练的字典对多个文件进行压缩，以提高压缩率和速度。<br>
适用于<strong>小文件、多文件</strong>压缩，比标准压缩更高效。</p>
<p><code>zstd --train FullPathToTrainingSet/* -o dictionaryName</code>，提前训练所需的字典文件</p>
<p>代码中使用的API为：</p>
<ul>
<li><code>ZSTD_createCDict</code>：创建字典结构</li>
<li><code>ZSTD_compress_usingCDict</code>：实际压缩</li>
<li><code>ZSTD_decompress_usingDDict</code>：实际解压</li>
</ul>
<h2 id="step-22文件夹压缩保持原有的文件结构">step 2.2：文件夹压缩保持原有的文件结构</h2>
<p>以上压缩结果均为单对单，已有的zstd API不支持将多个文件保持原有的树状文件结构并压缩为一个文件。</p>
<p>Q: 所以，想要将多个文件压缩成一个压缩包，一定有办法的吧？<br>
A: 那当然！<br>
我们常见的处理方式是混合使用<code>tar</code>和<code>zst</code>，<code>tar</code>工具保持原有的文件结构，打包为一个文件。<br>
之后使用<code>zst</code>将单个文件压缩。</p>
<p>还有另一种方法是使用流式压缩，将递归遍历的路径结构写入压缩内容，需要在文件之间添加<strong>分隔符或元数据</strong>。<br>
这种做法会比较复杂，在性能瓶颈不严重的情况下我个人不太喜欢。</p>
<h1 id="step-3一个小case">step 3：一个小case</h1>
<p>注意，约定被压缩后的文件后缀为<code>.zst</code></p>
<p>最近在，一般会在工具函数（命名为<code>utils.h</code>或者<code>common.h</code>）等部分设置一个check函数，在对应环境下有统一的判断和返回处理。</p>
<p>这种操作可以避免你每次都写相同的错误处理，这在实际的编程实践中可以显著减少代码行数并增加可读性，是优秀且值得借鉴的。</p>
<p>类似zstd中的：</p>
<pre><code>/*! CHECK
 * Check that the condition holds. If it doesn't print a message and die.
 */
#define CHECK(cond, ...)                        \
    do {                                        \
        if (!(cond)) {                          \
            fprintf(stderr,                     \
                    "%s:%d CHECK(%s) failed: ", \
                    __FILE__,                   \
                    __LINE__,                   \
                    #cond);                     \
            fprintf(stderr, "" __VA_ARGS__);    \
            fprintf(stderr, "\n");              \
            exit(1);                            \
        }                                       \
    } while (0)

/*! CHECK_ZSTD
 * Check the zstd error code and die if an error occurred after printing a
 * message.
 */
#define CHECK_ZSTD(fn)                                           \
    do {                                                         \
        size_t const err = (fn);                                 \
        CHECK(!ZSTD_isError(err), "%s", ZSTD_getErrorName(err)); \
    } while (0)

</code></pre>
<p>和cuda中的：</p>
<pre><code>#define CHECK(call)\
{\
  const cudaError_t error=call;\
  if(error!=cudaSuccess)\
  {\
      printf("ERROR: %s:%d,",__FILE__,__LINE__);\
      printf("code:%d,reason:%s\n",error,cudaGetErrorString(error));\
      exit(1);\
  }\
}

</code></pre>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.5359858526018518" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-16 15:24">2025-03-16 15:23</span>&nbsp;
<a href="https://www.cnblogs.com/kazusarua">真昼小天使daisuki</a>&nbsp;
阅读(<span id="post_view_count">52</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18775040" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18775040);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18775040', targetLink: 'https://www.cnblogs.com/kazusarua/p/18775040', title: 'zstd压缩算法概述与基本使用' })">举报</a>
</div>
        