
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/linx/p/18826165" title="发布于 2025-04-15 09:46">
    <span role="heading" aria-level="2">Web前端入门第 34 问：CSS 常见布局</span>
    

</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>Web 网页中，所有元素都是盒模型构成的，一个大盒子套一个或者多个小盒子，再用更大的盒子把大盒子给圈起来，这就构成了基本的 HTML 结构，再利用 CSS 把盒子装修得好看一些，最后把它放在正确位置，就是我们所看到的网页。</p>
<p>布局的作用就是要把元素摆放在合适的位置，让网页看起来不显得空闹闹的，也不要显得拥挤。</p>
<p>要摆放元素到合适的位置不是设置某一个元素能达到效果的，而是经常需要父元素和子元素配合，才能达到目标。</p>

<h2 id="元素堆叠">元素堆叠</h2>
<p>看这么一段的代码，没有任何控制布局情况下，元素会按照出现顺序进行堆叠显示</p>
<pre><code class="language-html">&lt;div class="box"&gt;
  &lt;div class="item"&gt;1&lt;/div&gt;
  &lt;div class="item"&gt;2&lt;/div&gt;
  &lt;div class="item"&gt;3&lt;/div&gt;
  &lt;div class="item"&gt;4&lt;/div&gt;
  &lt;div class="item"&gt;5&lt;/div&gt;
&lt;/div&gt;
&lt;style&gt;
  .box {
    font-size: 20px;
    margin: 20px;
    width: 250px;
    height: 180px;
    border: 2px solid #ff4757;
  }
  .box .item {
    border: 2px solid rgba(0,255,0,1);
    width: 30px;
    height: 30px;
  }
&lt;/style&gt;
</code></pre>
<p>效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250415094543442-808236202.png" alt="" loading="lazy"></p>
<h2 id="需求一">需求一</h2>
<p>现要求元素控制在一行显示。</p>
<h3 id="flex-弹性盒子">flex 弹性盒子</h3>
<p>给外层盒子添加 <code>display: flex;</code> 即可将元素改为弹性盒子。</p>
<pre><code class="language-css">.box {
  display: flex;
}
</code></pre>
<p>效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250415094547911-1062508695.png" alt="" loading="lazy"></p>
<h3 id="grid-网格">grid 网格</h3>
<p>让外层盒子变为网格，可让元素在一行中显示。</p>
<pre><code class="language-css">.box {
  display: grid;
  grid-template-columns: repeat(auto-fit, 30px);
}
</code></pre>
<p>效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250415094552546-767580798.png" alt="" loading="lazy"></p>
<h3 id="inline-block-内联块">inline-block 内联块</h3>
<p>除了 <code>flex</code>，还可以控制子元素显示为内联块 <code>inline-block</code>，让元素在一行中显示。</p>
<pre><code class="language-css">.box .item {
  display: inline-block;
}
</code></pre>
<p>效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250415094557492-2078947363.png" alt="" loading="lazy"></p>
<p>注意：<code>inline-block</code> 让元素变为了内联块，会像文字、图片一样排版，所以元素之间会存在空隙，其空隙其实是元素之间的换行符造成的，可设置 <code>font-size</code> 为 0，让元素之间没有空隙。</p>
<h3 id="float-元素浮动">float 元素浮动</h3>
<p>还可以给元素添加浮动，让元素在一行中显示。</p>
<pre><code class="language-css">.box .item {
  float: left;
}
</code></pre>
<p>效果：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250415094602635-1987316435.png" alt="" loading="lazy"></p>
<h2 id="需求二">需求二</h2>
<p>现要求元素在盒子中居中显示。</p>
<h3 id="flex-弹性盒子-1">flex 弹性盒子</h3>
<pre><code class="language-css">.box {
  display: flex;
  justify-content: center;
}
</code></pre>
<h3 id="grid-网格-1">grid 网格</h3>
<pre><code class="language-css">.box {
  display: grid;
  grid-template-columns: repeat(auto-fit, 30px);
  justify-content: center;
}
</code></pre>
<h3 id="inline-block-内联块-1">inline-block 内联块</h3>
<pre><code class="language-css">.box {
  text-align: center;
}
.box .item {
  display: inline-block;
}
</code></pre>
<h3 id="效果">效果</h3>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250415094609279-266134787.png" alt="" loading="lazy"></p>
<p>为什么没有 float ？float 没办法做到元素居中显示，嗯...也不是做不到，只是需要通过计算获得元素 <code>margin</code> 或 <code>padding</code>，用边距做出出居中效果。</p>
<h2 id="需求三">需求三</h2>
<p>元素两端对齐显示。</p>
<h3 id="flex-弹性盒子-2">flex 弹性盒子</h3>
<pre><code class="language-css">.box {
  display: flex;
  justify-content: space-between;
}
</code></pre>
<h3 id="grid-网格-2">grid 网格</h3>
<pre><code class="language-css">.box {
  display: grid;
  grid-template-columns: repeat(auto-fit, 30px);
  justify-content: space-between;
}
</code></pre>
<h3 id="效果-1">效果</h3>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250415094614845-364902596.png" alt="" loading="lazy"></p>
<p>可以明显看到，随着需求越来越复杂，能用的方法就越少了。</p>
<p>其实 <code>float</code> 和 <code>inline-block</code> 也不是做不到这种效果，还是像上面说的一样，必须要通过计算获得边距，才能做出我们想要的样子。</p>
<h2 id="需求四">需求四</h2>
<p>元素等宽间距显示。</p>
<h3 id="flex-弹性盒子-3">flex 弹性盒子</h3>
<pre><code class="language-css">.box {
  display: flex;
  justify-content: space-around;
}
</code></pre>
<h3 id="grid-网格-3">grid 网格</h3>
<pre><code class="language-css">.box {
  display: grid;
  grid-template-columns: repeat(auto-fit, 30px);
  justify-content: space-around;
}
</code></pre>
<h3 id="效果-2">效果</h3>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250415094619919-796182350.png" alt="" loading="lazy"></p>
<h2 id="需求五">需求五</h2>
<p>如果元素大小不统一，默认显示效果是这样：</p>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250415094624209-1296077593.png" alt="" loading="lazy"></p>
<p>怎么让元素垂直居中显示？</p>
<h3 id="flex-弹性盒子-4">flex 弹性盒子</h3>
<pre><code class="language-css">.box {
  display: flex;
  justify-content: space-around;
  align-items: center;
}
</code></pre>
<h3 id="grid-网格-4">grid 网格</h3>
<pre><code class="language-css">.box {
  display: grid;
  grid-template-columns: repeat(auto-fit, 30px);
  justify-content: space-around;
  align-items: center;
}
</code></pre>
<h3 id="效果-3">效果</h3>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250415094629275-1366936272.png" alt="" loading="lazy"></p>
<h2 id="需求六">需求六</h2>
<p>第二个元素定位在盒子右上角。</p>
<p>这时候 <code>flex</code>、<code>grid</code> 都不能实现，只能通过 <code>position</code> 来实现了。</p>
<h3 id="position-元素定位">position 元素定位</h3>
<p>position 属性对应的值有：</p>
<ul>
<li><code>static</code> 默认值，元素在正常文档流中显示。</li>
<li><code>relative</code> 相对定位，元素在正常文档流中显示，但可以通过 <code>top</code>、<code>right</code>、<code>bottom</code>、<code>left</code> 属性来定位。</li>
<li><code>absolute</code> 绝对定位，元素脱离正常文档流，且不再占用文档流空间，可以通过 <code>top</code>、<code>right</code>、<code>bottom</code>、<code>left</code> 属性来设置位置，其位置相对于最近的非 <code>static</code> 祖先元素，如果找不到，则相对于浏览器窗口。</li>
<li><code>sticky</code> 粘性定位，如果元素正常显示，则跟 <code>static</code> 一样，如果元素跑到视口之外，则跟 <code>absolute</code> 一样，但其位置相对 <code>可滚动</code> 的祖先元素。</li>
<li><code>fixed</code> 固定定位，元素脱离正常文档流，切不再占用文档流空间，可以通过 <code>top</code>、<code>right</code>、<code>bottom</code>、<code>left</code> 属性来设置位置，其位置相对于浏览器窗口。</li>
</ul>
<p><strong>实现需求：</strong></p>
<pre><code class="language-css">.box {
  position: relative;
}
.box .item:nth-child(2) {
  position: absolute;
  right: 0;
  top: 0;
}
</code></pre>
<h3 id="效果-4">效果</h3>
<p><img src="https://img2024.cnblogs.com/blog/596097/202504/596097-20250415094515906-938191163.png" alt="" loading="lazy"></p>
<h2 id="总结">总结</h2>
<p>本文仅介绍了常见的布局场景，开发中的需求千奇百怪，本文介绍的方法可能无法满足需求，这时候就需要发挥想象，在这些基础的布局方法上进行组合了。</p>

</div>
<div id="MySignature" role="contentinfo">
    <p>&nbsp;</p>
<p style="font-size: 18px;font-weight: bold;"><span style="color:rgb(255, 71, 87)">文章正在持续更新中...</span>，首发微信公众号【<span style="color:rgb(255, 71, 87)">前端路引</span>】，欢迎关注公众号获取最新文章。</p>
<p>
  <img style="max-width: 320px;" src="https://images.cnblogs.com/cnblogs_com/linx/2447020/o_250228035031_%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.png">
</p>
<p>本文来自博客园，作者：<a href="https://www.cnblogs.com/linx/" target="_blank">前端路引</a>，转载请注明原文链接：<a href="https://www.cnblogs.com/linx/p/18826165" target="_blank">https://www.cnblogs.com/linx/p/18826165</a></p>
<p>&nbsp;</p>
</div>
<div class="clear"></div>

		</div>
		<div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.19155480861458332" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-15 09:47">2025-04-15 09:46</span>&nbsp;
<a href="https://www.cnblogs.com/linx">前端路引</a>&nbsp;
Views(<span id="post_view_count">0</span>)&nbsp;
Comments(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18826165);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18826165', targetLink: 'https://www.cnblogs.com/linx/p/18826165', title: 'Web前端入门第 34 问：CSS 常见布局' })">举报</a>
</div>
	