
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/netcore5/p/18721767" title="发布于 2025-02-18 13:13">
    <span role="heading" aria-level="2">深入集成：使用 DeepSeek SDK for .NET 实现自然语言处理功能</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="快速上手deepseek-sdk-for-net-全面指南">快速上手：DeepSeek SDK for .NET 全面指南</h1>
<h2 id="简介">简介</h2>
<p><code>Ater.DeepSeek.AspNetCore </code> 是专门为 .NET 开发者提供的 <a href="https://www.deepseek.com" target="_blank" rel="noopener nofollow">DeepSeek</a> API SDK。它旨在简化与 DeepSeek AI 平台的集成，使开发者能够快速构建和部署基于自然语言处理的应用程序。</p>
<h2 id="功能特性">功能特性</h2>
<ul>
<li><strong>列出模型</strong>: 获取 DeepSeek 提供的所有可用模型。</li>
<li><strong>对话补全（包含流式）</strong>: 实现与 DeepSeek 的对话交互，支持实时流式响应。</li>
<li><strong>FIM实例（包含流式）</strong>: 支持 Fine-tuned Inference Model (FIM) 实例的调用，同样支持流式响应。</li>
<li><strong>查询余额</strong>: 检查账户中的余额，确保有足够的资金进行 API 调用。</li>
<li><strong>支持调用本地模型</strong>: 可以通过自定义 <code>HttpClient</code> 调用本地部署的 DeepSeek 模型。</li>
<li><strong>对 ASP.NET Core 的集成支持</strong>: 提供了与 ASP.NET Core 的无缝集成，方便在 Web 应用中使用。</li>
</ul>
<h3 id="注册并获取-api-key">注册并获取 API Key</h3>
<p>请访问 <a href="https://platform.deepseek.com/" target="_blank" rel="noopener nofollow">DeepSeek 官方网站</a>，注册账号并申请 <code>ApiKey</code>。</p>
<h2 id="在-aspnet-core-中使用">在 ASP.NET Core 中使用</h2>
<pre><code class="language-shell">dotnet add package Ater.DeepSeek.AspNetCore
</code></pre>
<h4 id="示例">示例</h4>
<p>在 <code>Program.cs</code> 或 <code>Startup.cs</code> 中配置 <code>DeepSeekClient</code>：</p>
<pre><code class="language-csharp">using DeepSeek.AspNetCore;
using DeepSeek.Core;
using DeepSeek.Core.Models;
using Microsoft.AspNetCore.Mvc;

var builder = WebApplication.CreateBuilder(args);

var apiKey = builder.Configuration["DeepSeekApiKey"];
builder.Services.AddDeepSeek(option =&gt;
{
    option.BaseAddress = new Uri("https://api.deepseek.com");
    option.Timeout = TimeSpan.FromSeconds(300);
    option.DefaultRequestHeaders.TryAddWithoutValidation("Authorization", "Bearer " + apiKey);
});

var app = builder.Build();

app.MapGet("/test", async ([FromServices] DeepSeekClient client) =&gt;
{
    var res = await client.ChatAsync(new ChatRequest
    {
        Messages = new List&lt;Message&gt;
        {
            Message.NewUserMessage("Why dotnet is good?")
        },
        MaxTokens = 200
    }, CancellationToken.None);

    return res?.Choices.First().Message?.Content;
});

app.Run();
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1920368/202502/1920368-20250218111407989-1121528847.png" alt="" loading="lazy"></p>
<h4 id="流式返回示例">流式返回示例</h4>
<pre><code class="language-csharp">app.MapGet("/chat", async (HttpContext context, [FromServices] DeepSeekClient client, CancellationToken token) =&gt;
{
    context.Response.ContentType = "text/plain;charset=utf-8";
    try
    {
        var choices = client.ChatStreamAsync(new ChatRequest
        {
            Messages = new List&lt;Message&gt;
            {
                Message.NewUserMessage("Why dotnet is good?")
            },
            MaxTokens = 200
        }, token);

        if (choices != null)
        {
            await foreach (var choice in choices)
            {
                await context.Response.WriteAsync(choice.Delta!.Content);
            }
        }
    }
    catch (Exception ex)
    {
        await context.Response.WriteAsync("暂时无法提供服务" + ex.Message);
    }
    await context.Response.CompleteAsync();
});
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/1920368/202502/1920368-20250218112531694-783465694.png" alt="" loading="lazy"></p>
<h2 id="其他集成">其他集成</h2>
<pre><code class="language-shell">dotnet add package Ater.DeepSeek.Core
</code></pre>
<h3 id="实例化-deepseekclient">实例化 <code>DeepSeekClient</code></h3>
<p>SDK 提供了两种方式来实例化 <code>DeepSeekClient</code>：</p>
<ol>
<li>
<p><strong>仅提供 API Key</strong>:</p>
<pre><code class="language-csharp">var client = new DeepSeekClient(apiKey);
</code></pre>
</li>
<li>
<p><strong>提供自定义的 <code>HttpClient</code> 和 API Key</strong>:</p>
<p>这种方式适合通过 <code>HttpClientFactory</code> 来管理 <code>HttpClient</code>，从而更好地控制连接池和超时设置。</p>
<pre><code class="language-csharp">var httpClient = new HttpClient();
var client = new DeepSeekClient(httpClient, apiKey);
</code></pre>
<blockquote>
<p><strong>注意</strong>: 内部 <code>HttpClient</code> 的默认超时时间为 120 秒，可以通过 <code>SetTimeout()</code> 方法或 <code>CancellationTokenSource</code> 设置具体请求的超时时间。</p>
</blockquote>
</li>
</ol>
<h3 id="调用方法">调用方法</h3>
<p><code>DeepSeekClient</code> 类提供了多个异步方法来调用 DeepSeek 的 API：</p>
<ul>
<li>
<p><strong>列出模型</strong>:</p>
<pre><code class="language-csharp">var modelResponse = await client.ListModelsAsync(CancellationToken.None);
if (modelResponse != null)
{
    foreach (var model in modelResponse.Data)
    {
        Console.WriteLine(model);
    }
}
else
{
    Console.WriteLine(client.ErrorMsg);
}
</code></pre>
<p>输出：<br>
Model { Id = deepseek-chat, Object = model, OwnedBy = deepseek }<br>
Model</p>
</li>
<li>
<p><strong>获取对话</strong>:</p>
<pre><code class="language-csharp">var request = new ChatRequest
{
    Messages = [
        Message.NewSystemMessage("你是一个语言翻译家"),
        Message.NewUserMessage("请翻译'它们害怕极了！'为英语!")
    ],
    Model = Constant.Model.ChatModel
};

var chatResponse = await client.ChatAsync(request, CancellationToken.None);
Console.WriteLine(chatResponse?.Choices.First().Message?.Content);
</code></pre>
</li>
</ul>
<p>输出："They were extremely scared!"</p>
<ul>
<li>
<p><strong>获取对话（流式）</strong>:</p>
<pre><code class="language-csharp">var choices = client.ChatStreamAsync(request, CancellationToken.None);
await foreach (var choice in choices ?? Enumerable.Empty&lt;Choice&gt;())
{
    Console.Write(choice.Delta?.Content);
}
Console.WriteLine();
</code></pre>
</li>
<li>
<p><strong>调用本地模型</strong>:</p>
<p>如果需要调用本地部署的模型，可以自定义 <code>HttpClient</code> 并设置 <code>BaseAddress</code> 为本地地址。</p>
<pre><code class="language-csharp">var httpClient = new HttpClient
{
    BaseAddress = new Uri("http://localhost:5000"),
    Timeout = TimeSpan.FromSeconds(300),
};
var localClient = new DeepSeekClient(httpClient);
localClient.SetChatEndpoint("/chat");
localClient.SetCompletionEndpoint("/completions");

var res = await localClient.ChatAsync(new ChatRequest
{
    Messages = new List&lt;Message&gt;
    {
        Message.NewUserMessage("hello")
    }
}, CancellationToken.None);
Console.WriteLine(res?.Choices.First().Message?.Content);
</code></pre>
</li>
</ul>
<h2 id="更多资源">更多资源</h2>
<ul>
<li><a href="https://github.com/niltor/DeepSeekSDK-NET" target="_blank" rel="noopener nofollow">GitHub 仓库</a></li>
<li><a href="https://github.com/niltor/DeepSeekSDK-NET/tree/dev/sample" target="_blank" rel="noopener nofollow">更多使用示例</a></li>
</ul>
<p><img src="https://img2024.cnblogs.com/blog/1920368/202502/1920368-20250218131348285-1209513597.png" alt="" loading="lazy"></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.04643567583449074" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-18 13:14">2025-02-18 13:13</span>&nbsp;
<a href="https://www.cnblogs.com/netcore5">今晚打老虎！</a>&nbsp;
阅读(<span id="post_view_count">152</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18721767" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18721767);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18721767', targetLink: 'https://www.cnblogs.com/netcore5/p/18721767', title: '深入集成：使用 DeepSeek SDK for .NET 实现自然语言处理功能' })">举报</a>
</div>
        