
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/codecaster/p/18742310" title="发布于 2025-02-27 23:16">
    <span role="heading" aria-level="2">他来了，为大模型量身定制的响应式编程范式（1） —— 从接入 DeepSeek 开始吧</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        <img src="https://img2024.cnblogs.com/blog/3608354/202502/3608354-20250227231439090-883933133.png" alt="他来了，为大模型量身定制的响应式编程范式（1） —— 从接入 DeepSeek 开始吧" class="desc_img">
        🔥【Java开发者速看！FEL大模型编程神器降临】🚀

想让Java也能玩转大模型？FEL——Java版LangChain来了！三步轻松接入爆款模型DeepSeek，用响应式编程解锁智能应用开发！🌟 内置RAG检索、提示词模板、多轮记忆等硬核功能，复杂业务流用代码秒编排，还能自定义扩展！无论对话系统还是AI代理，FEL让你告别碎片化代码，5行配置玩转大模型生态！

👉 附实战教程，即刻克隆示例项目开启智能编程：
🔗 https://github.com/ModelEngine-Group/fit-framework
🔗 https://gitcode.com/ModelEngine/fit-framework
#Java #AI编程 #技术革新
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>哒哒哒，他来了！👋 今天我们要介绍一种新型的 Java 响应式大模型编程范式 —— <strong>FEL</strong>。你可能听说过 langchain，那么你暂且可以把 FEL 看作是 Java 版本的 langchain。😎 话不多说，今天我们就从接入当前热门的 <strong>DeepSeek</strong> 开始，带大家认识一下 FEL。通过 FEL，你可以轻松实现大模型应用的编排和运行，开启智能编程的新篇章！🎉</p>
<h2 id="️-快速上手轻松接入-deepseek">🛠️ 快速上手：轻松接入 DeepSeek</h2>
<h3 id="1-准备环境">1. 准备环境</h3>
<p>首先，进入老生常谈的环节 —— 准备环境。进入 <a href="https://github.com/ModelEngine-Group/fit-framework" target="_blank" rel="noopener nofollow">FIT-Framework 项目地址</a>，下载项目代码。根据<a href="https://github.com/ModelEngine-Group/fit-framework" target="_blank" rel="noopener nofollow">入门指南</a>，你可以快速部署 FIT 环境，并参考 FEL 的指导手册，掌握 FEL 模块的强大功能。FEL 模块不仅支持 DeepSeek 的接入，还能支持任何符合 OpenAI API 标准的大模型。此外，它还提供了丰富的工具和大模型操作原语，帮助你快速构建智能应用。🛠️</p>
<p>以下示例地址为 <a href="https://github.com/ModelEngine-Group/fit-framework/tree/main/examples/fel-example/01-model" target="_blank" rel="noopener nofollow">FEL 示例：01-model</a>，你可以通过该代码快速上手。具体细节可以参考 <a href="https://github.com/ModelEngine-Group/fit-framework/blob/main/docs/framework/fel/java/quick-start-guide/01.%20%E6%A8%A1%E5%9E%8B.md" target="_blank" rel="noopener nofollow">FEL 指导手册：聊天模型使用</a>。</p>
<h3 id="2-启动运行">2. 启动运行</h3>
<h4 id="关键代码">关键代码</h4>
<p>这里我们使用 FEL 最基础的大模型接入能力来接入 DeepSeek。通过 <code>ChatModel</code> 的默认实现，你可以指定大模型进行调用。这里展示下示例中关于普通调用和流式调用的关键代码。</p>
<p>普通调用：</p>
<pre><code class="language-java">public ChatMessage chat(@RequestParam("query") String query) {
    ChatOption option = ChatOption.custom().model(this.modelName).stream(false).build();
    return this.chatModel.generate(ChatMessages.from(new HumanMessage(query)), option).first().block().get();
}
</code></pre>
<p>流式调用：</p>
<pre><code class="language-java">public Choir&lt;ChatMessage&gt; chatStream(@RequestParam("query") String query) {
    ChatOption option = ChatOption.custom().model(this.modelName).stream(true).build();
    return this.chatModel.generate(ChatMessages.from(new HumanMessage(query)), option);
}
</code></pre>
<blockquote>
<ol>
<li><strong>ChatOption</strong> 中指定要调用的大模型名称和是否流式返回的标识（设置为 <code>true</code> 则表示是通过流式方式获取结果）。</li>
<li>然后调用 <code>generate</code> 方法开始一次调用。返回的结果是一个响应式流对象，可以通过它来获取执行结果。</li>
<li>至此，一个简单的接入代码就写完了！🎉</li>
</ol>
</blockquote>
<h4 id="配置-deepseek">配置 DeepSeek</h4>
<p>在示例的配置文件 <code>resources/application.yml</code> 中，配置你的 DeepSeek API 密钥、API 地址以及模型名称。示例配置如下：</p>
<blockquote>
<p>这里大家可以使用硅基流动平台，上面有一定的免费额度可供大家使用，注册账号后创建<code>API密钥</code>。这里的配置示例中配置的就是其平台的信息，其中将<code>api-key</code>替换为你创建的<code>API密钥</code>即可。</p>
</blockquote>
<pre><code class="language-yaml">fel:
  openai:
    api-base: 'https://api.siliconflow.cn/v1'
    api-key: 'your-api-key'
example:
  model: 'deepseek-ai/DeepSeek-R1'
</code></pre>
<h4 id="启动程序">启动程序</h4>
<ol>
<li>配置完成后，就可以启动你的应用程序啦。这里可以通过 <code>IDEA</code> 直接启动 DemeApplication</li>
<li>当控制台看到如下信息时，则表明你已经启动成功。</li>
</ol>
<pre><code class="language-bash">Start netty http server successfully.
</code></pre>
<h4 id="体验你的成果">体验你的成果</h4>
<h5 id="普通调用">普通调用</h5>
<p>在浏览器中输入示例请求地址，例如：<code>http://localhost:8080/ai/example/chat?query=你好，DeepSeek</code>。你可能看到类似如下的响应：</p>
<pre><code class="language-json">{
  "content": "&lt;think&gt;\n\n&lt;/think&gt;\n\n你好！我是DeepSeek-R1，一个由深度求索公司开发的智能助手，我会尽我所能为你提供帮助。请问有什么可以为你服务的？",
  "toolCalls": []
}
</code></pre>
<h5 id="流式调用">流式调用</h5>
<p>在浏览器中输入示例请求地址，例如：<code>http://localhost:8080/ai/example/chat-stream?query=你好，DeepSeek</code>。你可能看到类似如下的响应：</p>
<pre><code class="language-json">data:{"content":"&lt;think&gt;","toolCalls":[]}

data:{"content":"\n\n","toolCalls":[]}

data:{"content":"&lt;/think&gt;","toolCalls":[]}

data:{"content":"\n\n","toolCalls":[]}

data:{"content":"你好","toolCalls":[]}

data:{"content":"！","toolCalls":[]}

data:{"content":"我是","toolCalls":[]}

data:{"content":"Deep","toolCalls":[]}

data:{"content":"Se","toolCalls":[]}

data:{"content":"ek","toolCalls":[]}

...
</code></pre>
<h2 id="-fel-框架有哪些优点">🌟 FEL 框架有哪些优点？</h2>
<p>上面这个示例还只是我们最基本的功能哦！我们还有更加炫酷的使用方式等你来探索。当然，接下来的时间里，我们会陆续编写一系列文章来让你更加了解我们。😉</p>
<h3 id="1-直观的编排方式">1. <strong>直观的编排方式</strong></h3>
<p>FEL 框架提供了直观的编排方式，帮助开发者轻松构建复杂的应用逻辑。无论是简单的对话系统，还是复杂的多任务处理，FEL 都能通过简洁的配置和代码，实现高效的应用编排。</p>
<p>比如，一个包含知识库、大模型的大模型应用编排代码可能如下：</p>
<pre><code class="language-java">AiProcessFlow&lt;String, String&gt; smartAssistantFlow = AiFlows.&lt;String&gt;create()
    .map(query -&gt; Tip.from("query", query)) // 将用户输入转换为内部格式
    .retrieve(new DefaultVectorRetriever(vectorStore)) // 检索相关信息
    .generate(new ChatFlowModel(chatModel, chatOption)) // 调用大模型生成回答
    .format(new JsonOutputParser(serializer, Response.class)) // 格式化输出
    .close();
</code></pre>
<h3 id="2-丰富的大模型操作原语">2. <strong>丰富的大模型操作原语</strong></h3>
<p>FEL 框架内置了丰富的大模型相关操作原语，包括：</p>
<ul>
<li><strong>RAG检索（retrieve）</strong>：从海量数据中快速提取相关信息。</li>
<li><strong>提示词模板（prompt）</strong>：通过预定义的模板，快速生成结构化的输出。</li>
<li><strong>大模型接入（generate）</strong>：无缝接入 DeepSeek 等大模型，实现智能对话和生成。</li>
<li><strong>记忆（memory）</strong>：支持多轮对话的记忆功能，提升用户体验。</li>
<li><strong>Agent（delegate）</strong>：通过智能体实现复杂的任务分解与执行。</li>
</ul>
<p>这些操作原语为开发者提供了强大的整合串联能力，另外还有一些通用的流操作原语等。有了这些，就能够帮助你轻松应对各种智能应用场景啦！🚀</p>
<h3 id="3-灵活的扩展性">3. <strong>灵活的扩展性</strong></h3>
<p>FEL 框架设计灵活，我们的多种原语操作都是基于接口设计（这个也是我们 FIT 编程框架的核心思想哦），如果你有自定义的一些功能，你可以轻松集成，打造你的专属智能应用。🛠️</p>
<h2 id="-未来展望智能应用的无限可能">🌈 未来展望：智能应用的无限可能</h2>
<p>我们相信，FEL 框架将成为你探索智能世界的得力助手。通过不断的技术创新和优化，我们将持续拓展框架的功能，提供更加易用和丰富的操作，助力每一位开发者在智能时代中脱颖而出。</p>
<p>未来，FEL 框架将支持更多的大模型接入，提供更强大的编排能力，帮助你构建更加智能、高效的应用。无论是企业级解决方案，还是个人项目，FEL 都将为你提供全方位的支持。🌟</p>
<p><strong>项目地址：</strong> <a href="https://github.com/ModelEngine-Group/fit-framework" target="_blank" rel="noopener nofollow">Github: FIT-Framework</a> <a href="https://gitcode.com/ModelEngine/fit-framework" target="_blank" rel="noopener nofollow">GitCode: FIT-Framework</a></p>
<p><strong>思考题：</strong> 如果你的团队采用 FIT，你会用它解决哪些历史痛点？欢迎评论区讨论！</p>
<p><strong>技术人，用代码说话，用架构思考</strong></p>
<p>关注我们，探索更多「优雅解耦」的工程实践！ 🛠️</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.20800750752777777" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-27 23:16">2025-02-27 23:16</span>&nbsp;
<a href="https://www.cnblogs.com/codecaster">CodeCaster</a>&nbsp;
阅读(<span id="post_view_count">22</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18742310" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18742310);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18742310', targetLink: 'https://www.cnblogs.com/codecaster/p/18742310', title: '他来了，为大模型量身定制的响应式编程范式（1） —— 从接入 DeepSeek 开始吧' })">举报</a>
</div>
        