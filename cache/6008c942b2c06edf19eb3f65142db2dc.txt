
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/fatmanhappycode/p/19041969" title="发布于 2025-08-17 10:31">
    <span role="heading" aria-level="2">记一次OOM</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h1>事件概述</h1>
<p><span style="color: rgba(255, 0, 0, 1)"><strong>事件1：</strong></span>8月1号晚上18点50分某服务宕机，容器OOM，随后非常快速的，该服务的4台容器全都宕机。</p>
<p>由于未添加HeapDumpOnOutOfMemoryError参数，无dump文件，排查近期上线功能内容，无果，且xxjob也有分流到其他容器，排除定时任务的影响，数据库也没死锁，<strong>只能添加-XX:HeapDumpPath参数待下次问题复现</strong></p>
<p><br><strong><span style="color: rgba(255, 0, 0, 1)">事件2：</span></strong>8月6号早上10点40分发生宕机，容器再次OOM，从时间上看也并没有什么规律。</p>
<p>再次灰度发布新容器、扩容的同时，登陆旧容器应用查看dump文件，发现没有dump文件。排查发现是因为添加了-XX:+ExitOnOutOfMemoryError参数，于是在容器OOM时应用立即重启，<strong>未留下dump文件。</strong></p>
<p>吸取本次教训，这次在测试环境配置参数后做混沌实验，注入OOM，测试能否正常dump文件，<strong>确保参数无误，下次出现问题能留下dump文件排查</strong></p>
<p>&nbsp;</p>
<p><strong><span style="color: rgba(255, 0, 0, 1)">事件3：</span></strong>8月15号晚上19点左右发生宕机，容器再次OOM，这次终于抓到dump文件了，灰发扩容的同时开始排查问题</p>
<p>&nbsp;</p>
<h1>问题排查和定位</h1>
<h2>使用MAT加载dump文件（Eclipse Memory Analyzer）</h2>
<p>左上角 File &gt;&gt; Open Heap Dump &gt;&gt; 打开文件加载dump文件</p>
<p>PS：如果打开提示报错Out Of Memory ，需要在MAT的安装目录下找到MemoryAnalyzer.ini文件，并修改-Xmx改到比你的dump文件稍大些（我这里dump文件9G，直接给我的MAT干OOM了 😅）</p>
<p><img src="https://img2024.cnblogs.com/blog/1576191/202508/1576191-20250816112646601-1414814562.png" alt="image" loading="lazy"></p>
<h2>看Reports</h2>
<h3>点击Leak Suspects 查看有内存泄漏嫌疑的地方&nbsp;</h3>
<p><img src="https://img2024.cnblogs.com/blog/1576191/202508/1576191-20250816114910035-1333331699.png" alt="image" width="1483" height="867" loading="lazy"></p>
<h2>看Problem Suspect 1（问题嫌疑，有嫌疑的地方1）</h2>
<p><img src="https://img2024.cnblogs.com/blog/1576191/202508/1576191-20250816152618418-446307418.png" alt="image" loading="lazy"></p>
<p>圈红圈的地方，<strong>org.postgresql.core.v3.QueryExecutorImpl.processResults</strong>，从这里可以看出端疑，从方法名称可以看出来是对返回结果的处理，基本可以猜测是某个查询方法返回的对象过大或者过多导致的OOM<strong>（</strong>Problem Suspect 2也是指向这个方法<strong>）</strong></p>
<p>Keywords</p>
<ul title="Keywords">
<li>java.lang.Object[]</li>
<li>org.postgresql.core.v3.QueryExecutorImpl.processResults(Lorg/postgresql/core/ResultHandler;I)V</li>
<li>QueryExecutorImpl.java:2252</li>
</ul>
<p><img src="https://img2024.cnblogs.com/blog/1576191/202508/1576191-20250817101421030-1445543472.png" alt="image" width="195" height="147" loading="lazy"></p>
<h2>看Details&nbsp;</h2>
<p>接下来我们点击Details看看具体的堆栈信息</p>
<p><img src="https://img2024.cnblogs.com/blog/1576191/202508/1576191-20250816153830075-1977495780.png" alt="image" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/1576191/202508/1576191-20250816161614936-1169721345.png" alt="image" loading="lazy"></p>
<h2>Accumulated Objects by Class in Dominator Tree（按类聚合数据）</h2>
<p>往下拉，这里可以看到&nbsp;Accumulated Objects by Class in Dominator Tree<span class="Apple-converted-space">&nbsp;</span></p>
<p><span class="Apple-converted-space">可以看到Tuple这个类有128万个，总共占用了3335MB，接近3个G的内存</span></p>
<p><img src="https://img2024.cnblogs.com/blog/1576191/202508/1576191-20250816163059853-1792412312.png" alt="image" loading="lazy"></p>
<p>&nbsp;查官方的文档可以看到这个类是&nbsp;Class representing a row in a&nbsp;<a title="class or interface in java.sql" href="https://docs.oracle.com/javase/8/docs/api/java/sql/ResultSet.html?is-external=true" rel="noopener nofollow"><code>ResultSet</code></a>. 也就是表示查出来的一个结果行，查了100多万个结果出来，那基本可以确定是有异常的sql了，多半是没有传递查询条件之类的，我们接着看</p>
<p><img src="https://img2024.cnblogs.com/blog/1576191/202508/1576191-20250817101755398-1380462694.png" alt="image" width="576" height="306" loading="lazy"></p>
<p>&nbsp;</p>
<h2>&nbsp;看Thread Stack</h2>
<p>和我们平时看报错的堆栈信息一样去看，这里已经可以定位到具体的查询方法了，大概长这样(代码经过脱敏处理，隐去实际业务对象名称等)：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">@Override
</span><span style="color: rgba(0, 0, 255, 1)">public</span> List&lt;XXObject&gt; getByXxIds(List&lt;String&gt;<span style="color: rgba(0, 0, 0, 1)"> xxIds) {
        QueryParam queryParam </span>= <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> QueryParam();
        queryParam.setXxIds(xxIds);
        List</span>&lt;XXObject&gt; xxObjectPOList =<span style="color: rgba(0, 0, 0, 1)"> xxObjectRepository.listLines(queryParam);
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">.translate(xxObjectPOList);
}<br></span></pre>
</div>
<p>这里已经开始猜测xxIds为空，无传入参数导致全表查询出了几百万行数据</p>
<p><img src="https://img2024.cnblogs.com/blog/1576191/202508/1576191-20250816165055378-1009648228.png" alt="image" loading="lazy"></p>
<p>但是为了实锤，本着严谨的态度，我们接着看</p>
<h2>Thread Overview and Stacks</h2>
<p>回到能看到线程的Shortest Paths To the Accumulation Point，右键》》Java Basics 》》Thread Overview and Stacks</p>
<p><img src="https://img2024.cnblogs.com/blog/1576191/202508/1576191-20250816172348007-1812616684.png" alt="image" loading="lazy"></p>
<p>&nbsp;这里可以看到刚刚占用内存的processResults结果处理方法，不过这里我们要看的是sql和入参，所以应该关注PreparedStatement方法</p>
<p><img src="https://img2024.cnblogs.com/blog/1576191/202508/1576191-20250816172707363-1262953882.png" alt="image" loading="lazy"></p>
<p>&nbsp;这里我们层层打开，可以看到preparedQuery，也就是加载的sql，其中的key就是就是执行的sql</p>
<p><img src="https://img2024.cnblogs.com/blog/1576191/202508/1576191-20250816173602539-460130617.png" alt="image" loading="lazy"></p>
<p>&nbsp;而paramValues也就是对应的入参了，可以看到是空的，那就基本实锤了</p>
<p><img src="https://img2024.cnblogs.com/blog/1576191/202508/1576191-20250816173921750-1050574891.png" alt="image" loading="lazy"></p>
<p>最后结合日志，查看该方法操作的时间和系统三次宕机的时间是否对得上，结果是都对上了</p>
<p>这个是历史功能，按理说以前也应该会有这样的问题，那么为什么不会呢</p>
<p>继续排查日志，发现诱因是前端调整导致用户可以对已经操作过的单据再次执行该操作，而这时候已经没有需要操作的数据了，因而导致了后续的问题</p>
<p>&nbsp;</p>
<h1>根因分析</h1>
<p>根本原因还是底层通用逻辑没有做好参数校验，接口的健壮性没有做好</p>
<p>&nbsp;</p>
<h1>长期解决方案及改进措施</h1>
<p>1. 对整个系统中类似的查询接口审查参数校验是否完整</p>
<p>2. 检查其他服务的dump配置是否添加</p>
<p>3.&nbsp;制定好规范、代码审查标准</p>
<p>4. 熔断，虽然本次事件没产生雪崩效应，但是没做熔断也是事实</p>
<p>5. 完善监控告警</p>
<p>6. 也许有时间（<span style="text-decoration: line-through">不可能</span>）应该AOP做默认分页，超出一定数量的数据查询，需要自己评估并传递参数</p>
<div>&nbsp;</div>
<p>&nbsp;</p>
<p>PS:遇到OOM问题第一时间灰发新容器，加内存</p>
<p>遇到问题第一时间想到的肯定是灰发新容器，加内存等等，但是我个人加的还是比较扣扣搜搜，没舍得一次加到位，4台机器加到6台，8G加到10G，但是实际用户一次操作，十几G的内存就出来了，连点几下，一下子全挂了，下次遇到问题还是需要直接加倍，先稳住生产环境（<span style="text-decoration: line-through">机器多又不花我钱</span> 🐶），稳住了才有精力去排查问题</p>
<p><img src="https://img2024.cnblogs.com/blog/1576191/202508/1576191-20250817010211681-868159753.png" alt="image" width="377" height="417" loading="lazy"></p>
<p>&nbsp;</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-08-17 10:32">2025-08-17 10:31</span>&nbsp;
<a href="https://www.cnblogs.com/fatmanhappycode">肥宅快乐码</a>&nbsp;
阅读(<span id="post_view_count">231</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19041969);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19041969', targetLink: 'https://www.cnblogs.com/fatmanhappycode/p/19041969', title: '记一次OOM' })">举报</a>
</div>
        