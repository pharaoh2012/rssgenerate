
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/kuangdaoyizhimei/p/18805084" title="发布于 2025-04-01 22:28">
    <span role="heading" aria-level="2">langchain0.3教程：聊天机器人进阶之方法调用</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        大语言模型只能聊天吗？本篇文章将会介绍OpenAI的Function calling原理，以及在Langchain中对应的Tools Calling如何使用，最后将工具调用集成到gradio实现可视化聊天界面。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>我们思考一个问题：大语言模型是否能帮我们做更多的事情，比如帮我们发送邮件。默认情况下让大模型帮我们发送邮件，大模型会这样回复我们：</p>
<p><img src="https://img2024.cnblogs.com/blog/516671/202504/516671-20250401222155550-535012437.png" alt="image" loading="lazy"></p>
<p>可以看到，大模型无法发送邮件，它只会帮我们生成一个邮件模板，然后让我们自己手动发送出去。如何让大模型拥有发送邮件的能力呢？这里就引入来了一个概念：<code>function calling</code>。</p>
<h2 id="一概念function-calling">一、概念：Function calling</h2>
<p>简单来说，Function calling让大语言模型拥有了调用外部接口的能力，使用这种能力，大模型能做一些比如实时获取天气信息、发送邮件等和现实世界交互的事情。</p>
<h3 id="1原理">1、原理</h3>
<p>在发送信息给大模型的时候，携带着“工具”列表，这些工具列表代表着大模型能使用的工具。当大模型遇到用户提出的问题时，会先思考是否应该调用工具解决问题，如果需要调用工具，和普通消息不同，这种情况下会返回“function_call”类型的消息，请求方根据返回结果调用对应的工具得到工具输出，然后将之前的信息加上工具输出的信息一起发送给大模型，让大模型整合起来综合判断给出结果。</p>
<p>以获取天气信息为例，官网给出了获取天气的流程图</p>
<img src="https://img2024.cnblogs.com/blog/516671/202504/516671-20250401221450339-813763586.png" alt="Function Calling Diagram Steps" style="zoom: 25%">
<h3 id="2案例">2、案例</h3>
<p>OpenAI官网Function calling文档：<a href="https://platform.openai.com/docs/guides/function-calling?api-mode=responses&amp;example=get-weather" target="_blank" rel="noopener nofollow">https://platform.openai.com/docs/guides/function-calling?api-mode=responses&amp;example=get-weather</a></p>
<p>文档中给了获取天气、发送邮件、搜索本地知识库这三个例子，以获取天气为例：</p>
<pre><code class="language-python">from openai import OpenAI

client = OpenAI()

tools = [{
    "type": "function",
    "name": "get_weather",
    "description": "Get current temperature for a given location.",
    "parameters": {
        "type": "object",
        "properties": {
            "location": {
                "type": "string",
                "description": "City and country e.g. Bogotá, Colombia"
            }
        },
        "required": [
            "location"
        ],
        "additionalProperties": False
    }
}]

response = client.responses.create(
    model="gpt-4o",
    input=[{"role": "user", "content": "What is the weather like in Paris today?"}],
    tools=tools
)

print(response.output)
</code></pre>
<p>结果输出：</p>
<pre><code class="language-python">[{
    "type": "function_call",
    "id": "fc_12345xyz",
    "call_id": "call_12345xyz",
    "name": "get_weather",
    "arguments": "{\"location\":\"Paris, France\"}"
}]
</code></pre>
<p>可以看到，使用OpenAI的官方API调用很繁琐，而且定义工具列表需要使用json格式的字符串，非常的不友好，lagnchain则解决了这些麻烦。</p>
<h2 id="二langchain中的tool-calling">二、langchain中的Tool calling</h2>
<p>langchain中的<code>Function calling</code>换了个更直接的名字：<code>Tool calling</code>，翻译过来叫做“工具调用”，实际上底层还是使用的Function calling。</p>
<p>Tools概念：<a href="https://python.langchain.com/docs/concepts/tools/" target="_blank" rel="noopener nofollow">https://python.langchain.com/docs/concepts/tools/</a></p>
<p>Tool calling概念：<a href="https://python.langchain.com/docs/concepts/tool_calling/" target="_blank" rel="noopener nofollow">https://python.langchain.com/docs/concepts/tool_calling/</a></p>
<h3 id="1工具定义">1、工具定义</h3>
<p>定义工具很简单，使用装饰器<code>@tool</code>，比如定义两数相乘的工具如下：</p>
<pre><code class="language-python">from langchain_core.tools import tool

@tool
def multiply(a: int, b: int) -&gt; int:
   """Multiply two numbers."""
   return a * b
</code></pre>
<p>可以看到，定义一个工具方法很简单，普通方法加上装饰器<code>@tool</code>即可（关于复杂方法后续再讲）。</p>
<p>工具定义完成，可以使用</p>
<pre><code class="language-python">print(
    json.dumps(
        multiply.args_schema.model_json_schema(),
        indent=4,
        ensure_ascii=False,
    )
)
</code></pre>
<p>打印scheme信息：</p>
<pre><code class="language-json">{
    "description": "Multiply two numbers.",
    "properties": {
        "a": {
            "title": "A",
            "type": "integer"
        },
        "b": {
            "title": "B",
            "type": "integer"
        }
    },
    "required": [
        "a",
        "b"
    ],
    "title": "multiply",
    "type": "object"
}
</code></pre>
<h3 id="2工具调用">2、工具调用</h3>
<p>上面我们已经定义好了两数相乘的工具：</p>
<pre><code class="language-python">from langchain_core.tools import tool

@tool
def multiply(a: int, b: int) -&gt; int:
   """Multiply two numbers."""
   return a * b
</code></pre>
<p>接下来使用携带该工具访问大模型：</p>
<pre><code class="language-python"># Tool 创建
tools = [multiply]
# Tool 绑定
model_with_tools = model.bind_tools(tools)
# Tool 调用 
response = model_with_tools.invoke("2乘以2等于多少？")
</code></pre>
<p>输出大模型返回的function_tool信息：</p>
<pre><code class="language-python">print(json.dumps(response.tool_calls, indent=4))
</code></pre>
<p>结果如下所示：</p>
<pre><code class="language-json">[
    {
        "name": "multiply",
        "args": {
            "a": 2,
            "b": 3
        },
        "id": "chatcmpl-tool-83c83e9537ae4820bc3b1123fec3570b",
        "type": "tool_call"
    }
]
</code></pre>
<p>它告诉我们要调用multiply方法，参数是a=2和b=3，如何调用呢？</p>
<h3 id="3工具执行">3、工具执行</h3>
<p>大模型已经告诉我们要执行的方法以及调用的参数了，接下来如何执行呢？</p>
<p>第一步：转换tool列表为字典</p>
<pre><code class="language-python">tool_dic = {tool.name: tool for tool in tools}
</code></pre>
<p>第二步：依次执行tool_call列表中的方法</p>
<pre><code class="language-python">for tool_call in response.tool_calls:
    selected_tool = tool_dic[tool_call["name"].lower()]
    tool_msg = selected_tool.invoke(tool_call)
    print(type(tool_msg))
</code></pre>
<p>这样就可以执行目标方法了。注意这里返回的tool_msg信息类型是ToolMessage。</p>
<p>接下来需要将上下文信息带着最后输出的工具输出的信息一起打包给大模型，让大模型整合结果输出给出最终答案。</p>
<h3 id="4整合到大模型">4、整合到大模型</h3>
<p>调用完工具之后需要将结果告诉大模型，让大模型综合上下文得到后续答案。如何告诉大模型呢？在上一篇文章《<a href="https://blog.kdyzm.cn/post/294" target="_blank" rel="noopener nofollow">大模型开发之langchain0.3（二）：构建带有记忆功能的聊天机器人</a>》中告诉大模型上下文，也即是历史记录的方法就是构造Message列表，上一步工具执行的结果返回类型是ToolMessage，我们将它加入列表即可；最后将message列表一起发送给大模型，让大模型给出答案。</p>
<p>完整代码如下所示：</p>
<pre><code class="language-python">from langchain.chat_models import init_chat_model
from langchain_core.messages import HumanMessage
from langchain_core.tools import tool


@tool
def multiply(a: int, b: int) -&gt; int:
    """Multiply a and b."""
    print("multiply 方法被执行")
    return a * b


model = init_chat_model("gpt-3.5-turbo")
# Tool 创建
tools = [multiply]
# Tool 绑定
model_with_tools = model.bind_tools(tools)
# Tool 调用
history = [HumanMessage("2乘以3等于多少？")]
ai_message = model_with_tools.invoke(history)
history.append(ai_message)
tool_dic = {tool.name: tool for tool in tools}
for tool_call in ai_message.tool_calls:
    selected_tool = tool_dic[tool_call["name"].lower()]
    tool_msg = selected_tool.invoke(tool_call)
    history.append(tool_msg)

ai_message = model_with_tools.invoke(history)
print(ai_message.content)
if __name__ == '__main__':
    pass

</code></pre>
<p>结果：</p>
<pre><code class="language-python">multiply 方法被执行
2乘以3等于6。
</code></pre>
<h2 id="三整合gradio">三、整合gradio</h2>
<p>为了更直观的查看工具调用的情况，将本节内容整合到gradio是个不错的选择，同时需要兼容上篇文章《<a href="https://blog.kdyzm.cn/post/294" target="_blank" rel="noopener nofollow">大模型开发之langchain0.3（二）：构建带有记忆功能的聊天机器人</a>》中记忆功能、Context Window限制功能，由于使用了工具调用，暂时没想好如何实现工具调用显示和正文部分流式输出的组合。</p>
<h3 id="1代码整合">1、代码整合</h3>
<p>核心点在于如何显示方法调，可以参考文档：<a href="https://www.gradio.app/docs/gradio/chatbot#demos" target="_blank" rel="noopener nofollow">https://www.gradio.app/docs/gradio/chatbot#demos</a>  案例中的<code>chatbot_with_tools</code> 章节。</p>
<pre><code class="language-python">from gradio import ChatMessage
from langchain.chat_models import init_chat_model
from langchain_core.messages import HumanMessage, AIMessage, trim_messages
from langchain_core.tools import tool
import gradio as gr


@tool
def multiply(a: int, b: int) -&gt; int:
    """Multiply a and b."""
    print("multiply 方法被执行")
    return a * b


model = init_chat_model("gpt-3.5-turbo")
# Tool 创建
tools = [multiply]
# Tool 绑定
model_with_tools = model.bind_tools(tools)

trimmer = trim_messages(
    max_tokens=300,
    strategy="last",
    token_counter=model,
    include_system=True,
    allow_partial=False,
    start_on="human",
)


def response(input_message, gradio_history):
    # Tool 调用
    history = [HumanMessage(i["content"]) if i["role"] == 'user' else AIMessage(i["content"]) for i in gradio_history]
    history.append(HumanMessage(input_message))
    local_gradio_history = list()
    ai_message = model_with_tools.invoke(trimmer.invoke(history))

    if ai_message.tool_calls:
        tool_dic = {tool_item.name: tool_item for tool_item in tools}
        for tool_call in ai_message.tool_calls:
            tool_name = tool_call["name"].lower()
            selected_tool = tool_dic[tool_name]
            tool_msg = selected_tool.invoke(tool_call)
            history.append(tool_msg)
            local_gradio_history.append(
                ChatMessage(
                    role="assistant",
                    content=f"tool '{tool_name}' invoke result is {tool_msg}",
                    metadata={"title": f"🛠️ Used tool '{tool_name}'"},
                )
            )
            yield local_gradio_history
            ai_message = model_with_tools.invoke(trimmer.invoke(history))

    local_gradio_history.append(
        ChatMessage(
            role="assistant",
            content=ai_message.content,
        )
    )
    yield local_gradio_history


demo = gr.ChatInterface(
    fn=response,
    type="messages",
    flagging_mode="manual",
    flagging_options=["Like", "Spam", "Inappropriate", "Other"],
    save_history=True,
)

if __name__ == '__main__':
    demo.launch()

</code></pre>
<h3 id="2运行界面">2、运行界面</h3>
<img src="https://img2024.cnblogs.com/blog/516671/202504/516671-20250401221908539-2074605232.gif" alt="动画24_resize" style="zoom: 50%">
<p>可以看到，大模型会根据用户请求的问题决定是否要调用相关的工具；新增加的方法调用正常发挥作用，同时以前的上下文记忆功能也没有受到影响。</p>
<h2 id="四注意事项">四、注意事项</h2>
<p>注意，并非所有的大模型都支持function_call，不支持function_call的大模型输出返回的AIMessage的tool_calls字段一直是空的。</p>
<br>
最后，欢迎关注我的博客呀~
<p><a href="https://blog.kdyzm.cn" target="_blank" rel="noopener nofollow">https://blog.kdyzm.cn</a></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.07936003880555556" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-01 22:28">2025-04-01 22:28</span>&nbsp;
<a href="https://www.cnblogs.com/kuangdaoyizhimei">狂盗一枝梅</a>&nbsp;
阅读(<span id="post_view_count">8</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18805084" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18805084);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18805084', targetLink: 'https://www.cnblogs.com/kuangdaoyizhimei/p/18805084', title: 'langchain0.3教程：聊天机器人进阶之方法调用' })">举报</a>
</div>
        