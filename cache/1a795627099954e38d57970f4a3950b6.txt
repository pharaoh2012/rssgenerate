
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/charlee44/p/19061628" title="发布于 2025-08-27 20:56">
    <span role="heading" aria-level="2">CMake构建学习笔记21-通用的CMake构建脚本</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        通过提取通用逻辑，将CMake构建流程封装为可复用的PowerShell脚本，提升构建配置的维护效率。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>在之前使用CMake构建程序的脚本（<a href="https://charlee44.com/post.html?id=a1671c83735546cfa5c69b7ae7e37403" target="_blank" rel="noopener nofollow">CMake构建学习笔记-目录</a>）中，大部分内容都有比较强的相似性，那么是不是可以这些相似的内容提取出来作为一个单独的脚本，在构建具体的程序的时候再去调用这个脚本呢？这样做的好处是如果构建的配置有什么变动，就不用每个程序的构建脚本都修改了，只用修改这个通用的脚本就可以了。</p>
<p>具体的脚本cmake-build.ps1如下，适用于PowerShell终端：</p>
<pre><code class="language-cmake">param(
    [string]$SourceLocalPath,
    [string]$BuildDir,
    [string]$Generator,
    [string]$InstallDir,
    [string]$SymbolDir,
    [string[]]$PdbFiles,
    [hashtable]$CMakeCacheVariables,
    [bool]$MultiConfig = $false  # 控制是否使用多配置类型
)

# 清除旧的构建目录
if (Test-Path $BuildDir) {
    Remove-Item -Path $BuildDir -Recurse -Force
}
New-Item -ItemType Directory -Path $BuildDir

# 构建CMake命令行参数
$CMakeArgs = @(
    "-B", "`"$BuildDir`"",
    "-G", "`"$Generator`"",
    "-A", "x64"
)

if ($MultiConfig) {
    $CMakeArgs += "-DCMAKE_CONFIGURATION_TYPES=RelWithDebInfo"
}
else {
    $CMakeArgs += "-DCMAKE_BUILD_TYPE=RelWithDebInfo"
}

$CMakeArgs += (
    "-DCMAKE_PREFIX_PATH=`"$InstallDir`"",
    "-DCMAKE_INSTALL_PREFIX=`"$InstallDir`""
)

# 添加额外的CMake缓存变量
foreach ($key in $CMakeCacheVariables.Keys) {
    $CMakeArgs += "-D$key=$($CMakeCacheVariables[$key])"
}

# 配置CMake
cmake $SourceLocalPath $CMakeArgs

# 构建阶段，指定构建类型
cmake --build $BuildDir --config RelWithDebInfo --parallel

# 安装阶段，指定构建类型和安装目标
cmake --build $BuildDir --config RelWithDebInfo --target install

# 复制符号库
foreach ($file in $PdbFiles) {  
    Write-Output $file
    if (Test-Path $file) {
        Copy-Item -Path $file -Destination $SymbolDir
    }
    else {
        Write-Output "Warning: PDB file not found: $file"
    }
}

# 清理构建目录
#Remove-Item -Path $BuildDir -Recurse -Force
</code></pre>
<p>这段脚本的关键在于以下几点：</p>
<ol>
<li>CMake配置参数<code>$CMakeArgs</code>。首先是通用配置，<code>-B</code>表示生成的目录；<code>-G</code>表示生成器，比如"Ninja"或者"Visual Studio 17 2022"；<code>-A</code>表示目标平台的架构。然后是构建目标的类型，有的库使用<code>CMAKE_CONFIGURATION_TYPES</code>,有的库使用<code>CMAKE_BUILD_TYPE</code>，值设置成<code>RelWithDebInfo</code>表示Release版本，但是带调试信息。接下来是设置依赖库查找路径<code>CMAKE_PREFIX_PATH</code>和安装路径<code>CMAKE_INSTALL_PREFIX</code>。最后是添加额外的CMake缓存变量，这些缓存变量通常与要构建的库有关。</li>
<li>使用生成的配置参数<code>$CMakeArgs</code>进行项目配置：<code>cmake $SourceLocalPath $CMakeArgs</code>。这一步会把设置的参数固定成具体的项目参数，如果使用Visual Studio进行构建，就是生成sln项目。</li>
<li>编译、链接，生成构建目标：<code>cmake --build $BuildDir --config RelWithDebInfo --parallel</code>。这里的<code>--parallel</code>的意思是并行构建，会采用多线程的方式构建项目，自动决定线程数。</li>
<li>安装构建目标<code>cmake --build $BuildDir --config RelWithDebInfo --target install</code>。</li>
<li>最后一步复制符号库的作用是将生成的符号库文件复制到特定的目录中进行管理，这样在程序崩溃之后，可以通过符号库找到相应的代码，便于进行错误排查。</li>
</ol>
<p>那么有没有具体使用这个cmake-build.ps1脚本的例子呢？后续文章中的程序构建会使用这个脚本，敬请期待。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-08-27 20:56">2025-08-27 20:56</span>&nbsp;
<a href="https://www.cnblogs.com/charlee44">charlee44</a>&nbsp;
阅读(<span id="post_view_count">15</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19061628);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19061628', targetLink: 'https://www.cnblogs.com/charlee44/p/19061628', title: 'CMake构建学习笔记21-通用的CMake构建脚本' })">举报</a>
</div>
        