
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/feffery/p/18964220" title="发布于 2025-07-03 19:06">
    <span role="heading" aria-level="2">Python全栈应用开发利器Dash 3.x新版本介绍（1）</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<center style="font-size: 18px; font-weight: bold; padding-top: 40px">更多Dash应用开发干货知识、案例，欢迎关注“玩转Dash”微信公众号👇</center>
<p><img src="https://img2024.cnblogs.com/blog/1344061/202507/1344061-20250703190053776-1837084116.png" alt="image" loading="lazy"></p>
<p>大家好我是费老师，<code>Dash</code>作为<code>Python</code>生态中<u>强大</u>且<u>灵活</u>的<em>全栈应用开发</em>框架，早在几个月前就发布了其<code>3.0</code>新版本，作为一次大版本更新，最开始或多或少都会存在一些小bug，需要经历若干小版本的迭代更新后，才可以在日常项目中稳定使用。</p>
<p>截至本文写作时，<code>Dash</code>已迭代更新至<code>3.1.1</code>正式版本，充分修复了新版本的相关bug，并陆续增加了不少的新功能特性。从本篇文章开始，我将分几期来详细介绍<code>Dash</code>在<code>3.x</code>新版本中为我们带来的丰富新功能内容及相关变化，一起get更高效的<code>Python</code>全栈应用开发能力😉~</p>
<center><img src="https://img2024.cnblogs.com/blog/1344061/202507/1344061-20250703185221467-2102373332.png" width="50%"></center>
<h1 id="1-dash及常用组件库更新指南">1 Dash及常用组件库更新指南</h1>
<h2 id="11-dash-3x版本更新指南">1.1 Dash 3.x版本更新指南</h2>
<p><em>强烈建议</em>读者朋友们使用虚拟环境来支撑日常项目，以<code>conda/mamba</code>为例，我们首先<u>新建</u>示例虚拟环境（<code>Python</code>版本在<code>3.8</code>到<code>3.12</code>之间均可）：</p>
<pre><code class="language-bash">mamba create -n dash3.x-test-env python=3.10 -y
</code></pre>
<p>激活环境：</p>
<pre><code class="language-bash">mamba activate dash3.x-test-env
</code></pre>
<p>接着我们直接执行下列命令安装最新版本的<code>Dash</code>即可：</p>
<pre><code class="language-bash">pip install dash -U
</code></pre>
<p>查看已安装的<code>Dash</code>版本相关信息：</p>
<center><img src="https://img2024.cnblogs.com/blog/1344061/202507/1344061-20250703185223925-933096453.png"></center>
<h2 id="12-常用组件库适配版本更新指南">1.2 常用组件库适配版本更新指南</h2>
<p>为了从底层适配新版本<code>Dash</code>，常用的组件库版本参考范围如下</p>
<h3 id="121-facfeffery-antd-components">1.2.1 fac（feffery-antd-components）</h3>
<p>针对通用功能组件库<code>fac</code>，其<code>&gt;=0.4.0</code>版本对应适配新版本<code>Dash</code>，参考下列安装命令：</p>
<pre><code class="language-bash">pip install feffery-antd-components --pre -U
</code></pre>
<h3 id="122-fucfeffery-utils-components">1.2.2 fuc（feffery-utils-components）</h3>
<p>针对实用工具组件库<code>fuc</code>，其<code>&gt;=0.3.0</code>版本对应适配新版本<code>Dash</code>，参考下列安装命令：</p>
<pre><code class="language-bash">pip install feffery-utils-components --pre -U
</code></pre>
<h3 id="123-fmcfeffery-markdown-components">1.2.3 fmc（feffery-markdown-components）</h3>
<p>针对<code>markdown</code>渲染组件库<code>fmc</code>，其<code>&gt;=0.4.0</code>版本对应适配新版本<code>Dash</code>，参考下列安装命令：</p>
<pre><code class="language-bash">pip install feffery-markdown-components --pre -U
</code></pre>
<h3 id="124-factfeffery-antd-charts">1.2.4 fact（feffery-antd-charts）</h3>
<p>针对数据可视化组件库<code>fact</code>，其<code>&gt;=0.2.0</code>版本对应适配新版本<code>Dash</code>，参考下列安装命令：</p>
<pre><code class="language-bash">pip install feffery-antd-charts --pre -U
</code></pre>
<p>其他组件库类似，参考上面的方式进行更新即可。</p>
<h1 id="2-dash-3x版本部分新功能变化">2 Dash 3.x版本部分新功能&amp;变化</h1>
<p>篇幅有限，本期文章我们先介绍<code>Dash</code>新版本中比较<em>简单直接</em>的一些新功能及变化：</p>
<h2 id="21-组件参数支持静态类型注解">2.1 组件参数支持静态类型注解</h2>
<p>新版本中为组件参数增加了<em>静态类型注解</em>相关支持，最直接的，我们在编写组件代码时，可以配合现代IDE中自动的提示功能，更轻松的编写参数，下面是<em>部分场景示例</em>：</p>
<ul>
<li>枚举型参数</li>
</ul>
<p>以<code>fac</code>中的按钮组件为例，在编写如<code>type</code>这种枚举型参数时，直接就可以获得合法参数项提示：</p>
<center><img src="https://img2024.cnblogs.com/blog/1344061/202507/1344061-20250703185225925-1277579531.gif"></center>
<ul>
<li>字典型参数</li>
</ul>
<p>以<code>fac</code>中的输入框组件为例，在编写如<code>autoSize</code>这种字典型参数时，可以自动提示出合法的子参数键名：</p>
<center><img src="https://img2024.cnblogs.com/blog/1344061/202507/1344061-20250703185227996-938459405.gif"></center>
<ul>
<li>更复杂的参数</li>
</ul>
<p><code>Dash</code>新版本中的组件参数类型注解，对结构比较复杂的参数也适配的很好，譬如<code>fac</code>中表格组件用于定义表格字段的<code>columns</code>参数：</p>
<center><img src="https://img2024.cnblogs.com/blog/1344061/202507/1344061-20250703185230500-1263453559.gif"></center>
<p>并且在各种现代化IDE中，可配合<em>类型检查</em>功能，更及时直观的发现参数书写错误问题，以<code>vscode</code>为例，在打开<em>类型检查</em>功能后：</p>
<center><img src="https://img2024.cnblogs.com/blog/1344061/202507/1344061-20250703185232489-1982477804.png"></center>
<p>对应<code>Dash</code>应用代码中，不合规的组件参数都会醒目地标记出来：</p>
<center><img src="https://img2024.cnblogs.com/blog/1344061/202507/1344061-20250703185235365-636201484.gif"></center>
<h2 id="22-开发者工具重构">2.2 开发者工具重构</h2>
<p>新版本中对<code>Dash</code>应用<code>debug</code>调试模式下运行时，应用页面中自带的<em>开发者工具</em>进行重构，由老版本中经典的“小蓝圈”，调整为页面右下角更不易遮挡应用界面的折叠图标形式：</p>
<center><img src="https://img2024.cnblogs.com/blog/1344061/202507/1344061-20250703185237485-348978698.gif"></center>
<p>并且附带了当前<code>Dash</code>版本信息，且当<code>Dash</code>版本滞后于已发布的最新版本时，会有相应的可更新提示，比如我们故意将<code>Dash</code>降级到<code>3.1.0</code>之后：</p>
<center><img src="https://img2024.cnblogs.com/blog/1344061/202507/1344061-20250703185239478-1507032037.png"></center>
<h2 id="23-正式移除run_server方法">2.3 正式移除run_server()方法</h2>
<p>从比较早版本就开始使用<code>Dash</code>的朋友们可能还习惯用<code>app.run_server()</code>方式进行应用的<em>临时启动</em>，在<code>3.x</code>版本中，该方法被正式移除，请大家统一使用<code>app.run()</code>形式。</p>
<h2 id="24-app实例直接兼容wsgi形式应用部署">2.4 app实例直接兼容WSGI形式应用部署</h2>
<p>在之前的版本中，无论是<em>玩转Dash</em>公众号中的文章，还是<em>玩转Dash</em>知识星球中的视频课程里，涉及到使用<code>gunicorn</code>、<code>waitress</code>、<code>granian</code>等工具正式部署<code>Dash</code>应用时，我都会强调需要额外编写类似下面的代码，将<code>Dash</code>应用实例变量的<code>server</code>属性取出，方可用于在相关<code>WSGI</code>部署命令中作为目标（<code>Dash</code>应用高性能部署具体视频教程参考：<a href="https://t.zsxq.com/Feqzs" target="_blank" rel="noopener nofollow">https://t.zsxq.com/Feqzs</a> ）：</p>
<pre><code class="language-python"># 单独取得server属性，即Dash实例对应内置的Flask应用实例
server = app.server
</code></pre>
<p>而在<code>&gt;=3.1.0</code>版本中，我们可以直接将<code>Dash</code>应用实例作为目标进行应用部署，以<code>gunicorn</code>为例：</p>
<center><img src="https://img2024.cnblogs.com/blog/1344061/202507/1344061-20250703185241492-776853583.png"></center>
<h2 id="25-底层react依赖版本更新至1831">2.5 底层React依赖版本更新至18.3.1</h2>
<p><code>Dash</code>从<code>3.0.0</code>版本开始，底层用于前端渲染控制的<code>React</code>依赖版本升至<code>18.3.1</code>，如果你需要从底层开发<code>Dash</code>组件库，或在<code>Dash</code>应用中基于浏览器端回调集成使用譬如<code>univer</code>之类的受<code>React</code>版本影响的框架，这一更新项可以留意下：</p>
<center><img src="https://img2024.cnblogs.com/blog/1344061/202507/1344061-20250703185243347-569793773.png"></center>
<hr>
<p>篇幅有限，本期文章就先介绍到这里，有关<code>Dash</code>新版本中更丰富强大的其他<em>重磅</em>更新内容，我会在接下来的数篇文章中为大家详细介绍，敬请期待~</p>
<hr>
<p>　　以上就是本文的全部内容，对<code>Dash</code>应用开发感兴趣的朋友，欢迎添加微信号<code>CNFeffery</code>，备注“dash学习”加入我们的技术交流群，一起成长一起进步。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.0006944444444444445" data-date-updated="2025-07-03 19:07">2025-07-03 19:06</span>&nbsp;
<a href="https://www.cnblogs.com/feffery">费弗里</a>&nbsp;
阅读(<span id="post_view_count">4</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18964220);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18964220', targetLink: 'https://www.cnblogs.com/feffery/p/18964220', title: 'Python全栈应用开发利器Dash 3.x新版本介绍（1）' })">举报</a>
</div>
        