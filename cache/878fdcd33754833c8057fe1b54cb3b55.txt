
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/hnzhengfy/p/18668760/Nginx_Practical2" title="发布于 2025-02-12 16:30">
    <span role="heading" aria-level="2">nginx 简单实践：正向代理、反向代理【nginx 实践系列之二】</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        本文为 nginx 简单实践系列文章之一，主要简单实践了两个内容：正向代理、反向代理的简单实现，仅供参考。
    </div>
<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h2>〇、前言</h2>
<p>本文为 nginx 简单实践系列文章之二，主要简单实践了两个内容：正向代理、反向代理，仅供参考。</p>
<p>关于 Nginx 基础，以及安装和配置详解，可以参考博主过往文章：</p>
<p><span style="font-size: 12px"><em><a title="https://www.cnblogs.com/hnzhengfy/p/Nginx.html" href="https://www.cnblogs.com/hnzhengfy/p/Nginx.html" target="_blank" rel="noopener">https://www.cnblogs.com/hnzhengfy/p/Nginx.html</a>&nbsp;</em></span></p>
<p><span style="color: rgba(0, 0, 0, 1); background-color: rgba(251, 238, 184, 1)"><strong><span style="font-size: 12px; background-color: rgba(251, 238, 184, 1)"><em>注意：可以使用测试域名，但前提是要修改 hosts 文件。</em></span></strong></span></p>
<p><span style="font-size: 12px"><em>路径和重启：Linux（/etc/hosts）（重启命令：<span class="hljs-operator">/</span>etc<span class="hljs-operator">/</span>init.d<span class="hljs-operator">/</span>network restart）；Windows（C:\Windows\System32\drivers\etc\hosts）。</em></span></p>
<p><span style="font-size: 12px"><em>例如：192.168.1.1 www.testczzj.com</em></span></p>
<h2>一、正向代理</h2>
<h3>1.1 正向代理简介</h3>
<p>正向代理主要是为了客户端服务，位于客户端和目标服务器之间。</p>
<p>当客户端（如 Web 浏览器或移动应用程序）需要访问互联网上的资源时，它会向正向代理发送一个请求，并指定目标服务器。然后，正向代理会代替客户端向目标服务器转发这个请求。一旦目标服务器处理了请求并生成了响应，正向代理会将这个响应返回给客户端。</p>
<p>  <img src="https://img2024.cnblogs.com/blog/1868241/202403/1868241-20240315143313704-169055957.png" class="medium-zoom-image" height="279" width="323"></p>
<p>主要用途：</p>
<ul>
<li>正向代理常用于在防火墙内的局域网客户端提供访问 Internet 的途径。例如，公司内部网络，<strong>通过一个或多个代理服务器访问互联网资源</strong>，以节省带宽、提高访问速度或进行<strong>内容过滤</strong>。</li>
<li>正向代理可以用于<strong>提高网络性能</strong>，例如通过缓存经常访问的内容来减少带宽使用量。</li>
<li>正向代理还可以隐藏客户端的真实身份，客户端主动使用代理服务器，<strong>服务端不知道实际发起请求的客户端</strong>，使客户端能够访问一些原本无法直接访问的资源，如Google、YouTube等。</li>
</ul>
<p>&nbsp;</p>
<h3>1.2 正向代理的示例</h3>
<p>Nginx 默认情况下是作为反向代理服务器使用的。为了让其充当正向代理，需要通过配置文件进行修改。</p>
<p>配置文件的路径：/usr/local/nginx/conf/nginx.conf。配置内容如下：</p>
<pre class="language-nginx highlighter-hljs"><code>server {
    listen 8888;
    resolver 8.8.8.8 ipv6=off;

    access_log  /var/log/nginx/access.log;
    error_log  /var/log/nginx/error.log;

    location / {
            proxy_pass $scheme://$host;
            proxy_set_header Host $host;
            allow all;

            #if ($request_method = "CONNECT") {
            #        proxy_pass https://$host;
            #}

            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_connect_timeout 60;
            proxy_send_timeout 60;
            proxy_read_timeout 60;
    }
}</code></pre>
<p>如下示例，通过正向代理方式，访问百度首页：</p>
<pre class="language-javascript highlighter-hljs"><code>[root@www ~]# curl -x http://www.testczzj.com:8888 http://www.baidu.com
&lt;!DOCTYPE html&gt;
&lt;!--STATUS OK--&gt;&lt;html&gt; &lt;head&gt;&lt;meta http-equiv=content-type content=text/html;charset=utf-8&gt;&lt;meta http-equiv=X-UA-Compatible content=IE=Edge&gt;&lt;meta content=always name=referrer&gt;&lt;link rel=stylesheet type=text/css href=http://s1.bdstatic.com/r/www/cache/bdorz/baidu.min.css&gt;&lt;title&gt;百度一下，你就知道&lt;/title&gt;&lt;/head&gt; &lt;body link=#0000cc&gt; &lt;div id=wrapper&gt; &lt;div id=head&gt; &lt;div class=head_wrapper&gt; &lt;div class=s_form&gt; &lt;div class=s_form_wrapper&gt; &lt;div id=lg&gt; &lt;img hidefocus=true src=//www.baidu.com/img/bd_logo1.png width=270 height=129&gt; &lt;/div&gt; &lt;form id=form name=f action=//www.baidu.com/s class=fm&gt; &lt;input type=hidden name=bdorz_come value=1&gt; &lt;input type=hidden name=ie value=utf-8&gt; &lt;input type=hidden name=f value=8&gt; &lt;input type=hidden name=rsv_bp value=1&gt; &lt;input type=hidden name=rsv_idx value=1&gt; &lt;input type=hidden name=tn value=baidu&gt;&lt;span class="bg s_ipt_wr"&gt;&lt;input id=kw name=wd class=s_ipt value maxlength=255 autocomplete=off autofocus&gt;&lt;/span&gt;&lt;span class="bg s_btn_wr"&gt;&lt;input type=submit id=su value=百度一下 class="bg s_btn"&gt;&lt;/span&gt; &lt;/form&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id=u1&gt; &lt;a href=http://news.baidu.com name=tj_trnews class=mnav&gt;新闻&lt;/a&gt; &lt;a href=http://www.hao123.com name=tj_trhao123 class=mnav&gt;hao123&lt;/a&gt; &lt;a href=http://map.baidu.com name=tj_trmap class=mnav&gt;地图&lt;/a&gt; &lt;a href=http://v.baidu.com name=tj_trvideo class=mnav&gt;视频&lt;/a&gt; &lt;a href=http://tieba.baidu.com name=tj_trtieba class=mnav&gt;贴吧&lt;/a&gt; &lt;noscript&gt; &lt;a href=http://www.baidu.com/bdorz/login.gif?login&amp;amp;tpl=mn&amp;amp;u=http%3A%2F%2Fwww.baidu.com%2f%3fbdorz_come%3d1 name=tj_login class=lb&gt;登录&lt;/a&gt; &lt;/noscript&gt; &lt;script&gt;document.write('&lt;a href="http://www.baidu.com/bdorz/login.gif?login&amp;tpl=mn&amp;u='+ encodeURIComponent(window.location.href+ (window.location.search === "" ? "?" : "&amp;")+ "bdorz_come=1")+ '" name="tj_login" class="lb"&gt;登录&lt;/a&gt;');&lt;/script&gt; &lt;a href=//www.baidu.com/more/ name=tj_briicon class=bri style="display: block;"&gt;更多产品&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id=ftCon&gt; &lt;div id=ftConw&gt; &lt;p id=lh&gt; &lt;a href=http://home.baidu.com&gt;关于百度&lt;/a&gt; &lt;a href=http://ir.baidu.com&gt;About Baidu&lt;/a&gt; &lt;/p&gt; &lt;p id=cp&gt;&amp;copy;2017&amp;nbsp;Baidu&amp;nbsp;&lt;a href=http://www.baidu.com/duty/&gt;使用百度前必读&lt;/a&gt;&amp;nbsp; &lt;a href=http://jianyi.baidu.com/ class=cp-feedback&gt;意见反馈&lt;/a&gt;&amp;nbsp;京ICP证030173号&amp;nbsp; &lt;img src=//www.baidu.com/img/gs.gif&gt; &lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt;
[root@www ~]# curl -x https://www.testczzj.com:8888 https://www.baidu.com
curl: (56) Received HTTP code 400 from proxy after CONNECT
[root@www ~]# </code></pre>
<p>注意，百度首页的协议为 https 时，会返回 400 错误，此问题尚未解决，有哪位大佬知道烦请指教，再做补充。</p>
<p><span style="font-size: 12px"><em>参考：<a title="https://blog.csdn.net/qq_42978535/article/details/142653929" href="https://blog.csdn.net/qq_42978535/article/details/142653929" target="_blank" rel="noopener nofollow">https://blog.csdn.net/qq_42978535/article/details/142653929</a></em></span></p>
<p><span style="font-size: 12px"><em><a title="https://blog.csdn.net/weixin_43334761/article/details/135863106" href="https://blog.csdn.net/weixin_43334761/article/details/135863106" target="_blank" rel="noopener nofollow">https://blog.csdn.net/weixin_43334761/article/details/135863106</a></em></span></p>
<h2>二、反向代理</h2>
<h3>2.1 反向代理简介</h3>
<ul>
<li>位于服务器端和客户端之间，主要用于服务器端的<strong>负载均衡、缓存静态内容、加密和SSL加速、安全防护</strong>等。</li>
<li>服务器主动使用代理服务器，<strong>客户端不知道实际提供服务的服务端</strong>。</li>
<li>常用于网站后端，将客户端的请求转发到内部服务器，然后将响应返回给客户端，<strong>对外表现为统一的服务地址</strong>。</li>
</ul>
<p>  <img src="https://img2024.cnblogs.com/blog/1868241/202403/1868241-20240315143344915-295159126.png" class="medium-zoom-image" height="339" width="336"></p>
<p>当我们在外网访问百度的时候，其实会进行一个转发，代理到内网去，这就是所谓的反向代理，即反向代理“代理”的是服务器端，而且这一个过程对于客户端而言是无感的。</p>
<p>反向代理广泛应用于网站托管、大型分布式系统以及需要高效管理网络流量的各种场景中。</p>
<p>&nbsp;</p>
<h3>2.2 反向代理示例一：加载新地址的页面，但 url 不进行跳转</h3>
<p>例如，将 http://www.testczzj.com:8888 的请求转发至示例地址 http://www.testczzj.com:5000。</p>
<p>先准备一个示例项目：</p>
<p><img src="https://img2024.cnblogs.com/blog/1868241/202502/1868241-20250212161228947-1725565003.png"></p>
<p><span style="font-size: 12px"><em>注：通过<code>dotnet new mvc</code>和<code>dotnet run</code>，运行一个示例网站，配置为："applicationUrl": "https://www.testczzj.com:5001;http://www.testczzj.com:5000"。（另外，代码行<code>app.UseHttpsRedirection();</code>需注释掉，否则 url 会自动重写到 https）</em></span></p>
<p>下面是 nginx 的配置详情：</p>
<pre class="language-nginx highlighter-hljs"><code>server {
    listen 8888;
    server_name www.testczzj.com;

    #charset utf-8;
    #charset koi8-r;

    access_log  /var/log/nginx/access.log;
    error_log  /var/log/nginx/error.log;

    location / {
            root /usr/tmp/dotnet_project_test;
            index index.html index.htm test_page.html;
            proxy_pass http://www.testczzj.com:5000;
    }
}</code></pre>
<p>如下图，自动加载页面 http://www.testczzj.com:5000 的内容，同时 url 未跳转：</p>
<p><img src="https://img2024.cnblogs.com/blog/1868241/202502/1868241-20250212143124632-1313003415.png"></p>
<h3>2.3 反向代理示例二：根据路径访问不同的地址</h3>
<p>例如，根据路径中的 user1、user2，将请求转发到不同的端口：</p>
<ul>
<li>访问地址：http://www.testczzj.com:8888/user1/，转发至：http://www.testczzj.com:5000。</li>
<li>访问地址：http://www.testczzj.com:8888/user2/，转发至：http://www.testczzj.com:5003。</li>
</ul>
<p>先准备两个示例项目：</p>
<p><img src="https://img2024.cnblogs.com/blog/1868241/202502/1868241-20250212160800008-691396919.png"></p>
<p>nginx 配置示例：</p>
<pre class="language-nginx highlighter-hljs"><code>server {
    listen 8888;
    server_name www.testczzj.com;

    #charset utf-8;
    #charset koi8-r;

    access_log  /var/log/nginx/access.log;
    error_log  /var/log/nginx/error.log;

    location /user1/ {
            rewrite ^/user1/(.*)$ /$1 break; # 通过重写，将路径中的 /user1/ 去掉
            proxy_pass http://www.testczzj.com:5000;
    }

    location  /user2/  {
            rewrite ^/user2/(.*)$ /$1 break; # 将路径中的 /user2/ 去掉
            proxy_pass http://www.testczzj.com:5003;
    }
}</code></pre>
<p>效果如下：</p>
<p><img src="https://img2024.cnblogs.com/blog/1868241/202502/1868241-20250212160618041-143126630.png"></p>
<p><span style="font-size: 12px"><em>参考：<a title="https://zhuanlan.zhihu.com/p/451825018" href="https://zhuanlan.zhihu.com/p/451825018" target="_blank" rel="noopener nofollow">https://zhuanlan.zhihu.com/p/451825018</a></em></span></p>
</div>
<div id="MySignature" role="contentinfo">
    <img src="https://images.cnblogs.com/cnblogs_com/blogs/683398/galleries/2417207/o_221441c4.png">
<p>本文来自博客园，作者：<a href="https://www.cnblogs.com/hnzhengfy/" target="_blank">橙子家</a>，欢迎微信扫码关注博主【橙子家czzj】，有任何疑问欢迎沟通，共同成长！</p>
<div><p style="float: left;">转载本文请注明原文链接：<a href="https://www.cnblogs.com/hnzhengfy/p/18668760/Nginx_Practical2" target="_blank">https://www.cnblogs.com/hnzhengfy/p/18668760/Nginx_Practical2</a></p></div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.0736713280162037" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-12 16:30">2025-02-12 16:30</span>&nbsp;
<a href="https://www.cnblogs.com/hnzhengfy">橙子家</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18668760" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18668760);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18668760', targetLink: 'https://www.cnblogs.com/hnzhengfy/p/18668760/Nginx_Practical2', title: 'nginx 简单实践：正向代理、反向代理【nginx 实践系列之二】' })">举报</a>
</div>
        