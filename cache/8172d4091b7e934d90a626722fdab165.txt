
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/ishoulgodo/p/18696237" title="发布于 2025-02-01 12:12">
    <span role="heading" aria-level="2">java中的HsahMap</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h4 id="hsahmap">HsahMap</h4>
<p>HashMap 是 Java 中最常用的集合类之一，它实现了 Map 接口，基于哈希表存储键值对<br>
HashMap的存储是无顺序的<br>
HashMap存储的是键值对(key-value)其中键key是唯一的，值（value）可以重复。<br>
HashMap的底层是数组和链表</p>
<h4 id="hashmap的常见方法">HashMap的常见方法</h4>
<pre><code>添加方法:
1,put(K key, V value):将键值对插入到 HashMap 中。如果添加的是新的内容，返回null。如果键已经存在，则更新对应的值,返回更新前的值
2,putIfAbsent(K key, V value) 如果没有这个key,新增上去。有这个key,就不新增上去

更改方法:
1,replace(K key, V value) 修改数据,将key是张三的，更新为19。如果没有这个key，则不做替换(理解什么也不做)

获取方法:
1,get(Object key):根据键获取对应的值。如果键不存在，返回 null。  
2,keySet():返回的类型是Set， 返回的值是HashMap中所有键的集合。
3,values():返回类型是Collection，返回的值是HashMap 中所有值的集合。
4,entrySet():返回 HashMap 中所有键值对的集合。返回的是Set类型。
5,size(): 返回 HashMap 中键值对的数量。返回类型是int

删除方法:
1,remove(Object key):根据键删除对应的键值对。移除不存在的键名，返回的是 null  
2,remove(Object key,Object value):删除对应的键名和对应的值。返回的类型是布尔
3,clear():清空 HashMap，移除所有键值对。

检查元素:
1,containsKey(Object key):返回的类型是布尔，判断 HashMap 中是否包含指定的键。
2,containsValue(V value) 检查是否包含某个value值，如果包含返回true,不包含返回false
3,isEmpty(): 检查 HashMap 是否为空。返回的是布尔值。

克隆方法：
1,lone()来复制一个 HashMap 对象，返回值是一个对象，因此需要使用强制转化，是一个浅拷贝。
总结：下次学习某个类型的方法，也像这样归一下类。会好很多。
</code></pre>
<h4 id="新增数据-put">新增数据 put</h4>
<pre><code class="language-java">package part;
// HashMap在java-&gt;util这个包下
import java.util.HashMap;
public class Java01 {
    public static void main(String[] args)  {
        HashMap map = new HashMap();
        map.put("zhangsan", "18");
        map.put("lisi", "17");
        // 输出 {lisi=17, zhangsan=18}
        System.out.println(map);
    }
}
</code></pre>
<h4 id="put新增内容返回null-如果键已经存在则更新对应的值">put新增内容，返回null, 如果键已经存在，则更新对应的值</h4>
<pre><code class="language-java">package part;
// HashMap在java-&gt;util这个包下
import java.util.HashMap;
public class Java01 {
    public static void main(String[] args)  {
        HashMap map = new HashMap();
        map.put("zhangsan", "18");
        // 如果添加的是新的内容，返回null。
        System.out.println(map.put("lisi", "17"));
        // 这次的键名和第一次的键名，重复了，就会出现覆盖哈。因为键名是唯一的。如果键已经存在,返回更新前的值。输出18
        System.out.println( map.put("zhangsan", "25"));
        // 输出 {lisi=17, zhangsan=25}
        System.out.println(map);
    }
}
</code></pre>
<h4 id="hashmap存储的是键值对键key是唯一的">HashMap存储的是键值对,键key是唯一的</h4>
<pre><code class="language-java">
package part;
// HashMap在java-&gt;util这个包下
import java.util.HashMap;
public class Java01 {
    public static void main(String[] args)  {
        HashMap map = new HashMap();
        map.put("zhangsan", "18");
        map.put("lisi", "17");
        // 这次的键名和第一次的键名，重复了，就会出现覆盖哈。因为键名是唯一的
        map.put("zhangsan", "25");
        // 输出 {lisi=17, zhangsan=25}
        System.out.println(map);
    }
}
</code></pre>
<h4 id="putifabsent-如果没有这个key新增上去-有这个key就不新增上去">putIfAbsent 如果没有这个key，新增上去。 有这个key,就不新增上去</h4>
<pre><code class="language-java">package part;
// HashMap在java-&gt;util这个包下
import java.util.HashMap;
public class Java01 {
    public static void main(String[] args) {
        HashMap map = new HashMap();
        map.put("zhangsan", "18");
        // 如果没有这个key，新增上去。 有这个key,就不新增上去
        map.putIfAbsent("zhangsan", "19");
        System.out.println(map);
    }
}
</code></pre>
<h4 id="修改数据替换replace">修改数据:替换replace</h4>
<pre><code class="language-java">package part;
// HashMap在java-&gt;util这个包下
import java.util.HashMap;
public class Java01 {
    public static void main(String[] args) {
        HashMap map = new HashMap();
        map.put("zhangsan", "18");
        // 将key是张三的，更新为19。如果没有这个key，则不做替换(理解什么也不做)
        map.replace("zhangsan", "199");
        // 什么也不会做
        map.replace("lisi", "19");
        System.out.println(map); // {zhangsan=199}
    }
}
</code></pre>
<h4 id="keyset返回-hashmap-中所有键的集合">keySet():返回 HashMap 中所有键的集合。</h4>
<pre><code class="language-java">
package part;
// HashMap在java-&gt;util这个包下
import java.util.HashMap;
import java.util.Set;
public class Java01 {
    public static void main(String[] args) {
        HashMap map = new HashMap();
        map.put("zhangsan", "18");
        map.put("lisi", "19");
        // keySet():返回 HashMap 中所有键的集合，返回类型是Set
        Set set = map.keySet();
        System.out.println(set); // [lisi, zhangsan]
    }
}
</code></pre>
<h4 id="values返回-hashmap-中所有值的集合">values():返回 HashMap 中所有值的集合</h4>
<pre><code class="language-java">package part;
// HashMap在java-&gt;util这个包下
import java.util.Collection;
import java.util.HashMap;
import java.util.Set;

public class Java01 {
    public static void main(String[] args) {
        HashMap map = new HashMap();
        map.put("zhangsan", "18");
        map.put("lisi", "19");
        // map.values():返回 HashMap 中所有值的集合。类型是: Collection
        Collection list = map.values();
        System.out.println(list); // [19, 18]
    }
}
</code></pre>
<h4 id="增强for循环遍历">增强for循环遍历</h4>
<pre><code class="language-java">public class Java01 {
    public static void main(String[] args) {
        HashMap map = new HashMap();
        map.put("zhangsan", "18");
        map.put("lisi", "19");
        // 获取所有键名的集合
        Set set = map.keySet();
        for (Object key : set) {
            // 输出 19  18
            System.out.println(map.get(key));
        }
    }
}
</code></pre>
<h4 id="containskeyobject-key判断-hashmap-中是否包含指定的键返回是一个布尔值">containsKey(Object key):判断 HashMap 中是否包含指定的键,返回是一个布尔值</h4>
<pre><code class="language-java">package part;
// HashMap在java-&gt;util这个包下
import java.util.Collection;
import java.util.HashMap;
import java.util.Set;

public class Java01 {
    public static void main(String[] args) {
        HashMap map = new HashMap();
        map.put("zhangsan", "18");
        map.put("lisi", "19");
        // containsKey(Object key):判断 HashMap 中是否包含指定的键。返回是一个布尔值
        Boolean bool = map.containsKey("zhangsan");
        System.out.println(bool); // true
    }
}
</code></pre>
<h4 id="containsvaluev-value-检查是否包含某个value值如果包含返回true不包含返回false">containsValue(V value) 检查是否包含某个value值，如果包含返回true,不包含返回false</h4>
<pre><code class="language-java">
package part;
// HashMap在java-&gt;util这个包下
import java.util.Collection;
import java.util.HashMap;
import java.util.Set;

public class Java01 {
    public static void main(String[] args) {
        HashMap map = new HashMap();
        map.put("zhangsan", "18");
        map.put("lisi", "19");
        // containsValue(V value) 检查是否包含某个value值，如果包含返回true,不包含返回false
        System.out.println( map.containsValue("19")); // true
    }
}
</code></pre>
<h4 id="entryset返回-hashmap-中所有键值对的集合">entrySet():返回 HashMap 中所有键值对的集合。</h4>
<pre><code class="language-java">
package part;
// HashMap在java-&gt;util这个包下
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

public class Java01 {
    public static void main(String[] args) {
        // 键名是字符串，键值也是字符串，我们使用的是泛型进行约束
        HashMap&lt;String, String&gt; map = new HashMap();
        map.put("zhangsan", "18");
        map.put("lisi", "19");
        // 下面的 Map.Entry 是一个接口，固定这样写的
        Set&lt;Map.Entry&lt;String, String&gt;&gt; keyItem = map.entrySet();
        for (Map.Entry&lt;String, String&gt; entry : keyItem) {
            // 遍历每一项 
            // lisi 19
            // zhangsan 18
            System.out.println(entry);
        }
    }
}
</code></pre>
<h4 id="removeobject-key-删除">remove(Object key) 删除</h4>
<pre><code class="language-java">package part;
import java.util.HashMap;
public class Java01 {
    public static void main(String[] args) {
        // 键名是字符串，键值也是字符串，我们使用的是泛型进行约束
        HashMap&lt;String, String&gt; map = new HashMap();
        map.put("zhangsan", "18");
        map.put("lisi", "19");
        // 会把张三这个键名给删除掉。此时map就只有lisi这一项了
        map.remove("zhangsan");
        // 删除 键名是lisi,它的值是 100的这一项，返回值是一个布尔类型的
        Boolean flag= map.remove("lisi","100");
        System.out.println(flag); // false
        System.out.println(map);
    }
}
</code></pre>
<h4 id="clone浅拷贝返回类型是对象需要强制转换">clone浅拷贝，返回类型是对象，需要强制转换</h4>
<pre><code class="language-java">package part;
import java.util.HashMap;
public class Java01 {
    public static void main(String[] args) {
        // 键名是字符串，键值也是字符串，我们使用的是泛型进行约束
        HashMap&lt;String, String&gt; map = new HashMap();
        map.put("zhangsan", "18");
        map.put("lisi", "19");
        // clone是浅拷贝，并且返回来的是一个对象，因此需要强制转换的哈
        HashMap&lt;String,String&gt; newMap= (HashMap&lt;String,String&gt;)map.clone();
        // {zhangsan=18, lisi=19}
        System.out.println(newMap);
    }
}
</code></pre>
<h4 id="尾声">尾声</h4>
<p>准备开始学习java了。<br>
今天学习的第五天，每天都会发文章，我要卷起来。<br>
请小伙伴们监督我，奥利给</p>

</div>
<div id="MySignature" role="contentinfo">
    <div style="width:818px;background:#f5f5f5; padding: 10px 10px 10px 10px; border: 1px dashed rgb(224, 224, 224); font-family: 微软雅黑; font-size: 13px;">
		    <div style="padding:10px">
		        作者：<a href="https://www.cnblogs.com/ishoulgodo/" target="_blank">流年少年</a> <br>
		        出处：<a href="https://www.cnblogs.com/ishoulgodo/">https://www.cnblogs.com/ishoulgodo/</a> <br>
                        <p> 想问问题，打赏了卑微的博主，求求你备注一下的扣扣或者微信；这样我好联系你；(っ•̀ω•́)っ✎⁾⁾！</p>
		        <p>如果觉得这篇文章对你有小小的帮助的话，记得在右下角点个“推荐”哦，或者关注博主，在此感谢！</p>
		        <p> 万水千山总是情，打赏5毛买辣条行不行，所以如果你心情还比较高兴，也是可以扫码打赏博主(っ•̀ω•́)っ✎⁾⁾！</p>
                        <p> 想问问题，打赏了卑微的博主，求求你备注一下的扣扣或者微信；这样我好联系你；(っ•̀ω•́)っ✎⁾⁾！</p>
				<div style="display: flex;">
					<div style="margin-right: 100px;text-align: center;">
						<img src="//images.cnblogs.com/cnblogs_com/IwishIcould/1900124/t_201214043958支付宝收款码.jpg?a=1607924145179">
						<div>
							支付宝
						</div>
					</div>
					<div style="text-align: center;">
						<img src="//images.cnblogs.com/cnblogs_com/IwishIcould/1900124/t_20121604194271E6E296CCB71A007F4E22073D5EB64A.jpg">
						<div>微信</div>
					</div>
				</div>
		        本文版权归作者所有，欢迎转载，未经作者同意须保留此段声明，在文章页面明显位置给出原文连接 <br>
		        如果文中有什么错误，欢迎指出。以免更多的人被误导。 <br>
		    </div>
		</div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="1.8660806407523147" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-01 12:19">2025-02-01 12:12</span>&nbsp;
<a href="https://www.cnblogs.com/ishoulgodo">何人陪我共长生</a>&nbsp;
阅读(<span id="post_view_count">72</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18696237" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18696237);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18696237', targetLink: 'https://www.cnblogs.com/ishoulgodo/p/18696237', title: 'java中的HsahMap' })">举报</a>
</div>
        