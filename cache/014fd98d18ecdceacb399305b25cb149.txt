
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/cicada-smile/p/18818799" title="发布于 2025-04-10 16:11">
    <span role="heading" aria-level="2">搭建Trae+Vue3的AI开发环境</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        <img src="https://img2024.cnblogs.com/blog/1691717/202504/1691717-20250410160458867-55451197.png" alt="搭建Trae+Vue3的AI开发环境" class="desc_img">
        从2024年2025年，不断的有各种AI工具会在自媒体中火起来，号称各种效率王炸，而在AI是否会替代打工人的话题中，程序员又首当其冲。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>从2024年2025年，不断的有各种AI工具会在自媒体中火起来，号称各种效率王炸，而在AI是否会替代打工人的话题中，程序员又首当其冲。</p>
<p>作为一个后端开发，这篇文章基于Trae工具，来创建和运行一个简单的Vue前端应用。（下一篇试试Cursor）</p>
<p>Trae官网上这样简介：</p>
<p>是国内首个AI-IDE，深度理解中文开发场景。AI高度集成于IDE环境之中，为你带来比AI插件更加流畅、准确、优质的开发体验。</p>
<p>刷到的各种短视频中，都说AI编程工具可以让小白快速上手，只需要简单的输入几句中文指令即可，实际上可能作者本身就是程序员。</p>
<p>AI具备跨行业跨岗位的能力，不代表使用AI的人也能横跳。</p>
<p>身为后端研发，在Trae中跑完Vue3的入门应用，前后也花了大半天的时间，这还是建立在编程工具和环境搭建都轻车熟路的基础之上。</p>
<p>首先搭建Vue3的运行环境，通过相关文档可知，Vue3依赖Node.js的18.3版本或者更高，这里选择20的稳定版。</p>
<p>在Mac电脑中，使用brew工具安装NodeJS的基本流程。</p>
<pre><code class="language-bash"># 1、查看brew版本
brew -v
Homebrew 4.1.0

# 2、查询支持的node版本
brew search node
==&gt; Formulae
node@18          node@22        node@20  

# 3、选择安装node@20
brew install node@20
==&gt; node@20
node@20 is keg-only, which means it was not symlinked into /usr/local,
because this is an alternate version of another formula.

# 注意这里的环境配置
If you need to have node@20 first in your PATH, run:
  echo 'export PATH="/usr/local/opt/node@20/bin:$PATH"' &gt;&gt; /Users/yourmac/.bash_profile

For compilers to find node@20 you may need to set:
  export LDFLAGS="-L/usr/local/opt/node@20/lib"
  export CPPFLAGS="-I/usr/local/opt/node@20/include"

# 4、添加配置，不同的电脑路径有差异，需要注意
echo 'export PATH="/usr/local/opt/node@20/bin:$PATH"' &gt;&gt; /Users/yourmac/.bash_profile

# 5、刷新配置
source ~/.bash_profile

# 6、查看Node版本，安装成功
node -v
v20.19.0
</code></pre>
<p>然后就是Trae开发工具，直接从官网下载默认的最新版本，安装到电脑本地。</p>
<p>启动Trae工具后，新建一个Demo工程，就是一个<code>ai-code</code>空文件夹，然后在Trae中打开。</p>
<p><img src="https://img2024.cnblogs.com/blog/1691717/202504/1691717-20250410160211398-1493871450.png" alt="" loading="lazy"></p>
<p>在对话框中输入开发需求，注意这里支持DeepSeek和豆包两款大模型，个人倾向选择最新的版本。</p>
<p>提示词：使用vue3框架，创建一个简单应用，可以参考官方案例。</p>
<p><img src="https://img2024.cnblogs.com/blog/1691717/202504/1691717-20250410160216679-1417672591.png" alt="" loading="lazy"></p>
<p>TraeAI大概把需求拆分了三步，没接触过前端，选择直接照做。</p>
<p><img src="https://img2024.cnblogs.com/blog/1691717/202504/1691717-20250410160221282-1216136960.png" alt="" loading="lazy"></p>
<p>第一步：创建项目，在<code>路径/ai-code</code>目录下面，然后执行初始化命令，直接点击图中的运行即可。</p>
<pre><code class="language-bash">npm init vue@latest .
</code></pre>
<p>注意下面的初始化日志，有两个地方需要自行输入。</p>
<pre><code class="language-bash">ai-code % npm init vue@latest .

&gt; npx
&gt; create-vue .

┌  Vue.js - The Progressive JavaScript Framework
│
◇  当前目录 非空，是否覆盖？
│  Yes  ←【自行输入】
│
◇  请输入包名称：
│  src  ←【自行输入】
│
◇  请选择要包含的功能： (↑/↓ 切换，空格选择，a
全选，回车确认)
│  none

正在初始化项目 ./Desktop/document/ai-code...
│
└  项目初始化完成，可执行以下命令：

   npm install
   npm run dev

| 可选：使用以下命令在项目目录中初始化 Git：
   
   git init &amp;&amp; git add -A &amp;&amp; git commit -m "initial commit"
</code></pre>
<p>初始化完成后，也可以直接执行第三步打包运行，服务是正常的。</p>
<p>第二步：Vue应用源码，包括一个简单的<code>index.html</code>主页，一个<code>main.js</code>脚本，还有就是<code>App.vue</code>源码，点击应用即可把AI生成的代码，添加到初始化的工程中。</p>
<pre><code class="language-html">&lt;!-- main.js --&gt;

import { createApp } from 'vue'
import App from './App.vue'

createApp(App).mount('#app')

&lt;!-- App.vue --&gt;
&lt;template&gt;
  &lt;div class="app"&gt;
    &lt;h1&gt;{{ title }}&lt;/h1&gt;
    &lt;p&gt;点击次数: {{ count }}&lt;/p&gt;
    &lt;button @click="increment"&gt;点击&lt;/button&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script setup&gt;
import { ref } from 'vue'

const title = ref('Vue 3 示例应用')
const count = ref(0)

const increment = () =&gt; {
  count.value++
}
&lt;/script&gt;

&lt;style&gt;
.app {
  text-align: center;
  margin-top: 60px;
}
button {
  padding: 8px 16px;
  background-color: #42b983;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}
&lt;/style&gt;

&lt;!-- index.html --&gt;
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;Vue 3 示例&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div id="app"&gt;&lt;/div&gt;
  &lt;script type="module" src="/src/main.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>第三步：安装依赖并运行项目的命令。</p>
<pre><code class="language-bash">npm install
npm run dev
</code></pre>
<p>这里可以看下启动日志，有服务的端口号，实际上与后端服务启动的原理相似。</p>
<pre><code class="language-bash">ai-code % npm install
npm run dev

added 143 packages, and audited 144 packages in 24s

42 packages are looking for funding
  run `npm fund` for details

found 0 vulnerabilities

ai-code % npm run dev

&gt; src@0.0.0 dev
&gt; vite


  VITE v6.2.5  ready in 842 ms

  ➜  Local:   http://localhost:5173/
  ➜  Network: use --host to expose
  ➜  Vue DevTools: Open http://localhost:5173/__devtools__/ as a separate window
  ➜  Vue DevTools: Press Option(⌥)+Shift(⇧)+D in App to toggle the Vue DevTools
  ➜  press h + enter to show help
</code></pre>
<p>可以在Trae工具中预览，也可以在浏览器里直接访问，在命令行中按 <code>Ctrl + C</code>即可退出服务。</p>
<p><img src="https://img2024.cnblogs.com/blog/1691717/202504/1691717-20250410160226042-1590715336.png" alt="" loading="lazy"></p>
<p>这样一个初步的入门案例就完成了，下面再尝试指定源码位置修改。</p>
<p>选中<code>index.html</code>代码添加到对话中，然后需求提示词：添加一个贪吃蛇的小游戏。</p>
<p><img src="https://img2024.cnblogs.com/blog/1691717/202504/1691717-20250410160229934-875771926.png" alt="" loading="lazy"></p>
<p>贪吃蛇游戏源码，还是点击应用到工程中，经测试可以运行。</p>
<p><img src="https://img2024.cnblogs.com/blog/1691717/202504/1691717-20250410160233716-144513802.png" alt="" loading="lazy"></p>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;Vue 3 示例&lt;/title&gt;
  &lt;style&gt;
    #game-container {
      display: flex;
      flex-direction: column;
      align-items: center;
      margin-top: 20px;
    }
    canvas {
      border: 1px solid #000;
    }
    .score {
      margin-bottom: 10px;
      font-size: 20px;
    }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div id="app"&gt;&lt;/div&gt;
  &lt;div id="game-container"&gt;
    &lt;div class="score"&gt;分数: &lt;span id="score"&gt;0&lt;/span&gt;&lt;/div&gt;
    &lt;canvas id="game" width="400" height="400"&gt;&lt;/canvas&gt;
  &lt;/div&gt;
  
  &lt;script type="module" src="/src/main.js"&gt;&lt;/script&gt;
  &lt;script&gt;
    // 贪吃蛇游戏逻辑
    const canvas = document.getElementById('game');
    const ctx = canvas.getContext('2d');
    const scoreElement = document.getElementById('score');
    
    const gridSize = 20;
    const tileCount = canvas.width / gridSize;
    
    let snake = [{x: 10, y: 10}];
    let food = {x: 5, y: 5};
    let direction = {x: 0, y: 0};
    let score = 0;
    let gameSpeed = 100;
    let gameLoop;
    
    function drawGame() {
      // 清空画布
      ctx.fillStyle = 'white';
      ctx.fillRect(0, 0, canvas.width, canvas.height);
      
      // 绘制蛇
      ctx.fillStyle = 'green';
      snake.forEach(segment =&gt; {
        ctx.fillRect(segment.x * gridSize, segment.y * gridSize, gridSize, gridSize);
      });
      
      // 绘制食物
      ctx.fillStyle = 'red';
      ctx.fillRect(food.x * gridSize, food.y * gridSize, gridSize, gridSize);
    }
    
    function updateGame() {
      // 移动蛇
      const head = {x: snake[0].x + direction.x, y: snake[0].y + direction.y};
      snake.unshift(head);
      
      // 检查是否吃到食物
      if (head.x === food.x &amp;&amp; head.y === food.y) {
        score++;
        scoreElement.textContent = score;
        placeFood();
      } else {
        snake.pop();
      }
      
      // 检查碰撞
      if (
        head.x &lt; 0 || head.x &gt;= tileCount || 
        head.y &lt; 0 || head.y &gt;= tileCount ||
        snake.slice(1).some(segment =&gt; segment.x === head.x &amp;&amp; segment.y === head.y)
      ) {
        clearInterval(gameLoop);
        alert('游戏结束! 分数: ' + score);
        resetGame();
      }
    }
    
    function placeFood() {
      food = {
        x: Math.floor(Math.random() * tileCount),
        y: Math.floor(Math.random() * tileCount)
      };
      
      // 确保食物不会出现在蛇身上
      while (snake.some(segment =&gt; segment.x === food.x &amp;&amp; segment.y === food.y)) {
        food = {
          x: Math.floor(Math.random() * tileCount),
          y: Math.floor(Math.random() * tileCount)
        };
      }
    }
    
    function resetGame() {
      snake = [{x: 10, y: 10}];
      direction = {x: 0, y: 0};
      score = 0;
      scoreElement.textContent = score;
      placeFood();
      gameLoop = setInterval(() =&gt; {
        updateGame();
        drawGame();
      }, gameSpeed);
    }
    
    // 键盘控制
    document.addEventListener('keydown', e =&gt; {
      switch(e.key) {
        case 'ArrowUp':
          if (direction.y === 0) direction = {x: 0, y: -1};
          break;
        case 'ArrowDown':
          if (direction.y === 0) direction = {x: 0, y: 1};
          break;
        case 'ArrowLeft':
          if (direction.x === 0) direction = {x: -1, y: 0};
          break;
        case 'ArrowRight':
          if (direction.x === 0) direction = {x: 1, y: 0};
          break;
      }
    });
    
    // 开始游戏
    resetGame();
  &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>虽然游戏可以正常运行，但是移动速度太快不好操控，继续使用提示词修改：蛇的速度太快，把移速降低一半。</p>
<p>源码定位和修改都是正确的，但是把<code>gameSpeed</code>变量丢了，打工人这么写没问题，但是AI这么写必须吐槽一句：不够智能。</p>
<p><img src="https://img2024.cnblogs.com/blog/1691717/202504/1691717-20250410160237497-1795792138.png" alt="" loading="lazy"></p>
<p>最后客观的总结一句：在AI的加持下，可以高效的实现很多简单需求的编程，但是要说小白也可以轻松上手，显然也不现实。</p>
<p>所谓AI原生的IDE开发工具，其核心能力还是看底层的大模型，如果不够智能，输出的编码漏洞百出，根本起不到提升效率的作用。</p>
<p>从五花八门的AI应用体验来看，模型即产品。</p>

</div>
<div id="MySignature" role="contentinfo">
    
<b>Gitee主页：</b> <a target="three" href="https://gitee.com/cicadasmile/butte-java-note">https://gitee.com/cicadasmile/butte-java-note</a>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.00698637177199074" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-10 16:12">2025-04-10 16:11</span>&nbsp;
<a href="https://www.cnblogs.com/cicada-smile">七号楼</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18818799" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18818799);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18818799', targetLink: 'https://www.cnblogs.com/cicada-smile/p/18818799', title: '搭建Trae+Vue3的AI开发环境' })">举报</a>
</div>
        