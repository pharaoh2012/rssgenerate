
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/wang_yb/p/18663675" title="发布于 2025-01-10 11:30">
    <span role="heading" aria-level="2">manim边做边学--动画更新</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>今天介绍<code>Manim</code>中用于动画更新的<strong>3个类</strong>，分别是：</p>
<ol>
<li><code>UpdateFromFunc</code>：根据自定义的函数来动态更新 <code>Mobject</code> 的属性</li>
<li><code>UpdateFromAlphaFunc</code>：根据动画的进度来平滑地改变 <code>Mobject</code> 的属性</li>
<li><code>MaintainPositionRelativeTo</code>：保持多个 <code>Mobject</code> 之间的相对位置关系</li>
</ol>
<p>这<strong>3个类</strong>分别从自定义更新、基于进度的过渡以及相对位置保持这三个重要方面，为 <code>Manim</code> 动画的创作提供有力的帮助。</p>
<h1 id="1-动画概述">1. 动画概述</h1>
<h2 id="11-updatefromfunc">1.1. UpdateFromFunc</h2>
<p><code>UpdateFromFunc</code>赋予动画极高的自定义能力。</p>
<p>主要作用是允许用户依据自定义的函数来动态更新 <code>Mobject</code> 的属性。</p>
<p>这一灵活性使得它在各种复杂的动画场景中都能发挥作用，无论是模拟物理过程中物体的动态变化，还是实现复杂的交互动画效果，都能通过定义合适的更新函数来实现对 Mobject 的精确控制，从而创造出符合特定需求的动画效果。</p>
<p>它的参数主要有：</p>
<table>
<thead>
<tr>
<th><strong>参数名称</strong></th>
<th><strong>类型</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>mobject</td>
<td>Mobject</td>
<td>要应用更新函数的对象</td>
</tr>
<tr>
<td>update_function</td>
<td>func</td>
<td>定义如何更新 mobject 的状态的函数</td>
</tr>
<tr>
<td>suspend_mobject_updating</td>
<td>bool</td>
<td>用于暂停或恢复 mobject 的更新操作</td>
</tr>
</tbody>
</table>
<h2 id="12-updatefromalphafunc">1.2. UpdateFromAlphaFunc</h2>
<p><code>UpdateFromAlphaFunc</code>专注于基于动画进度的属性更新,<code>alpha</code> 值代表了动画的完成度，范围从 <strong>0 到 1</strong>。</p>
<p>利用这个类，用户可以根据动画的进度来平滑地改变 <code>Mobject</code> 的属性，例如淡入淡出、缩放、旋转等过渡效果。</p>
<p>这种基于进度的更新方式使得动画过渡自然流畅，与整个动画的时间线紧密结合，特别适合用于创建需要精准控制过渡效果的动画场景。</p>
<p>它的参数主要有：</p>
<table>
<thead>
<tr>
<th><strong>参数名称</strong></th>
<th><strong>类型</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>mobject</td>
<td>Mobject</td>
<td>要进行更新操作的对象</td>
</tr>
<tr>
<td>update_function</td>
<td>func</td>
<td>根据动画进度（alpha 值）对 Mobject 进行相应的更新操作</td>
</tr>
<tr>
<td>suspend_mobject_updating</td>
<td>bool</td>
<td>用于暂停或恢复 mobject 的更新操作</td>
</tr>
</tbody>
</table>
<h2 id="13-maintainpositionrelativeto">1.3. MaintainPositionRelativeTo</h2>
<p><code>MaintainPositionRelativeTo</code>的核心作用是保持多个 <code>Mobject</code> 之间的相对位置关系。</p>
<p>在复杂的动画场景中，常常需要确保某些对象之间的位置关系在动画过程中保持固定，比如一个物体围绕另一个物体运动，或者一个图标始终跟随某个特定对象移动。</p>
<p>这个类能够自动处理这些相对位置的逻辑，开发者无需手动计算和更新每个对象的位置，大大简化了动画的实现过程，使整个场景在动画过程中保持逻辑一致性和视觉上的合理性。</p>
<p>它的参数主要有：</p>
<table>
<thead>
<tr>
<th><strong>参数名称</strong></th>
<th><strong>类型</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>mobject</td>
<td>Mobject</td>
<td>需要保持相对位置的对象</td>
</tr>
<tr>
<td>tracked_mobject</td>
<td>Mobject</td>
<td>被跟踪的对象，mobject 会相对于 tracked_mobject 来维持位置关系</td>
</tr>
</tbody>
</table>
<h1 id="2-使用示例">2. 使用示例</h1>
<p>这3个动画类的使用不是那么直观，下面通过简单示例来演示如何使用这3个类。</p>
<h2 id="21-updatefromfunc-正方形匀速旋转">2.1. UpdateFromFunc 正方形匀速旋转</h2>
<p>首先构建一个函数<code>square_rotation</code>用来匀速旋转图形，然后通过<code>UpdateFromFunc</code>将图形与函数关联起来。</p>
<p>这样，在<code>run_time</code>时间内，<code>Manim</code>会不断调用<code>square_rotation</code>函数来旋转图形。</p>
<pre><code class="language-python"># 创建一个正方形
s = Square()
self.add(s)

def square_rotation(square):
    square.rotate(PI / 100)

self.play(UpdateFromFunc(s, square_rotation), run_time=3)
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202501/83005-20250110112918603-1260082824.gif" alt="" loading="lazy"></p>
<h2 id="22-updatefromalphafunc-圆形逐渐变色">2.2. UpdateFromAlphaFunc 圆形逐渐变色</h2>
<p>首先构造一个控制颜色变化的函数<code>circle_color</code>，这个函数根据<code>alpha</code>值（也就是动画执行的进度）来逐渐更新图形颜色。</p>
<p>通过<code>UpdateFromAlphaFunc</code>将图形和函数关联起来，使得颜色随着动画的进度逐渐变化。</p>
<pre><code class="language-python"># 创建一个圆形
c = Circle()
self.add(c)

def circle_color(circle, alpha):
    # 基于 alpha 值更新圆形的颜色
    new_color = interpolate_color(BLUE, RED, alpha)
    circle.set_color(new_color)

# 使用 UpdateFromAlphaFunc 进行动画
self.play(UpdateFromAlphaFunc(c, circle_color), run_time=3)
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202501/83005-20250110112918552-1762966176.gif" alt="" loading="lazy"></p>
<h2 id="23-maintainpositionrelativeto-固定两个元素的相对位置">2.3. MaintainPositionRelativeTo 固定两个元素的相对位置</h2>
<p>首先构造两个图形<code>Circle</code>和<code>Square</code>，然后在动画中只移动<code>Circle</code>的位置。</p>
<p>同时用<code>MaintainPositionRelativeTo</code>来保持<code>Square</code>与<code>Circle</code>的相对位置，</p>
<p>这样，<code>Square</code>会随着<code>Circle</code>一起移动，并保持两者相对位置不变。</p>
<pre><code class="language-python">c = Circle().shift(UP + LEFT * 2)
s = Square().next_to(c, DOWN)
self.add(c, s)

self.play(
    c.animate.shift(RIGHT * 3),
    MaintainPositionRelativeTo(s, c),
    run_time=2,
)
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202501/83005-20250110112918676-493368357.gif" alt="" loading="lazy"></p>
<h1 id="3-附件">3. 附件</h1>
<p>文中的代码只是关键部分的截取，完整的代码共享在网盘中（<code>anim_update.py</code>），</p>
<p>下载地址: <a href="https://url11.ctfile.com/d/45455611-64223578-4fb7ee?p=6872" target="_blank" rel="noopener nofollow">完整代码</a> (访问密码: 6872)</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.03351025965625" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-10 11:30">2025-01-10 11:30</span>&nbsp;
<a href="https://www.cnblogs.com/wang_yb">wang_yb</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18663675" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18663675);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18663675', targetLink: 'https://www.cnblogs.com/wang_yb/p/18663675', title: 'manim边做边学--动画更新' })">举报</a>
</div>
        