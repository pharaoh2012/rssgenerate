
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/huangxincheng/p/18842230" title="发布于 2025-04-23 09:58">
    <span role="heading" aria-level="2">记一次 .NET某工控任务调度系统 卡死分析</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="一背景">一：背景</h2>
<h3 id="1-讲故事">1. 讲故事</h3>
<p>前段时间有位朋友加我微信，来了就要进我的训练营，并且附带着纠结了他几个月的一个疑难杂症，让我帮忙看下怎么回事，问题描述截图如下：</p>
<p><img src="https://img2024.cnblogs.com/blog/214741/202504/214741-20250423095748426-367361453.png" alt="" loading="lazy"></p>
<p>由于这个定时任务是 furion 写的，刚好这位学员是VIP客户，找了小僧大佬，大佬需要最小化的问题代码，由于不能本地复现，也就没下文了，毕竟也是触发了 13w 次之后才出现的问题，确实比较难搞，截图如下：</p>
<p><img src="https://img2024.cnblogs.com/blog/214741/202504/214741-20250423095748437-664250305.png" alt="" loading="lazy"></p>
<p>像这种带着问题进训练营的朋友还是蛮多的，对这类需求我也是严格，谨慎，认真的对待，毕竟是骡子是马，得要拉出来溜溜。</p>
<h2 id="二为什么会任务延迟">二：为什么会任务延迟</h2>
<h3 id="1-初步分析">1. 初步分析</h3>
<p>经过和学员的沟通和截图确认，是一个叫 <code>M71EnterPortService</code> 的服务出现的延迟，这种问题相对来说比较简单，可能任务卡死在某个地方，通过 <code>~*e !clrstack</code> 观察下各个线程栈上是否有 <code>M71EnterPortService</code> 字样就能知道，截图如下：</p>
<p><img src="https://img2024.cnblogs.com/blog/214741/202504/214741-20250423095748440-1231664907.png" alt="" loading="lazy"></p>
<p>从卦中看，尼玛，居然没有 <code>M71EnterPortService</code> 关键词，这说明任务压根就没执行？难度是任务被意外退出了吗？ 但朋友截图出来的面板信息还是蛮全的，而且底层框架对这些容错性应该还是非常强的，所以个人推论，大概率不应该是任务退出，说实话，有点进入迷雾了。。。</p>
<h3 id="2-走出迷雾">2. 走出迷雾</h3>
<p>要想走出迷雾，需要回头看下 <code>M71EnterPortService</code> 类的调度方法，源码方法参考如下：</p>
<pre><code class="language-C#">        [JobDetail("job_M71xxx", Description = "M7-1xxx作业", GroupName = "default", Concurrent = false)]
        [Period(500L, TriggerId = "trigger_M71xxx", Description = "M7-1xxx作业")]
        public class M71EnterPortService : IJob
        {
            public static string processCode = "M7-1A";

            public async Task ExecuteAsync(JobExecutingContext context, CancellationToken stoppingToken)
            {
                _ = string.Empty;

                try
                {
                    plcProcessPara = await xxxService.CheckProcess(processCode);
                    if (!plcProcessPara.IsProcess)
                    {
                        return;
                    }
                    ...
                    if (string.IsNullOrWhiteSpace(rFIDReaderResultModel.RfidUid))
                    {
                        PLCxxxDriver.WritePlcxxxData($"PLC/{processCode}/xxxIPC", "2");
                        await Task.Delay(2000);
                    }
                    await Task.CompletedTask;
                }
                catch (Exception ex)
                {
                    xxxService.xxxWarn(produceRecord, plcProcessPara, ex);
                }
                await Task.CompletedTask;
            }
        }

</code></pre>
<p>从源码看，这是一个纯异步的写法，看到这个纯异步我就想到了新版的sos提供了一个 <code>!dumpasync</code> 命令，专门观察状态机链的，输出如下：</p>
<pre><code class="language-C#">
0:000&gt; !dumpasync
...

STACK 9
0000025fc3a02f78 00007ff90f3f75e8 (-1) xxx.ComProcessService+&lt;CheckProcess&gt;d__1 @ 7ff90fdf02b0
  0000025fc3a03008 00007ff90f3f82c0 (0) xxx.M71EnterPortService+&lt;ExecuteAsync&gt;d__3 @ 7ff90fe15a80
    0000025fc3a03090 00007ff90f3f8a60 (0) Furion.Schedule.ScheduleHostedService+&lt;&gt;c__DisplayClass23_3+&lt;&lt;BackgroundProcessing&gt;b__3&gt;d @ 7ff90fdf0000
      0000025fc3a030f8 00007ff90f3f8f58 (0) Furion.FriendlyException.Retry+&lt;InvokeAsync&gt;d__1 @ 7ff90fdef840
        0000025fc3a03198 00007ff90f3f93d0 (1) Furion.Schedule.ScheduleHostedService+&lt;&gt;c__DisplayClass23_2+&lt;&lt;BackgroundProcessing&gt;b__2&gt;d @ 7ff90fded340
...

</code></pre>
<p>我去，真的卡在 <code>M71EnterPortService</code> 下的 <code>CheckProcess</code> 中，接下来拿 <code>CheckProcess</code> 在所有线程栈上再次搜索，本以为有惊喜，同样毛都没有，我去。。。截图如下。</p>
<p><img src="https://img2024.cnblogs.com/blog/214741/202504/214741-20250423095748421-1998237858.png" alt="" loading="lazy"></p>
<p>这就有点无语了，接下来我们观察下状态机地址0x0000025fc3a02f78 中的内部字段，从内部字段的赋值情况观察代码执行流，输出如下：</p>
<pre><code class="language-C#">
0:000&gt; !dumpasync --address 0x0000025fc3a02f78   --fields
STACK 1
0000025fc3a02f78 00007ff90f3f75e8 (-1) xxx.ComProcessService+&lt;CheckProcess&gt;d__1 @ 7ff90fdf02b0
                 Address               MT Type                                        Value Name
        0000025fc3a02fe0 00007ff90c3f7408 System.Int32                                   -1 &lt;&gt;1__state
        0000025fc3a02fe8 00007ff90d872010 ...y.PLCPara.xxx&gt; 0000025fc3a02ff0            &lt;&gt;t__builder
        0000025f80683200 00007ff90c44bf40 System.String                             "M7-1A" processCode
        0000025fc3a028e0 00007ff90d822c00 ...ty.PLCPara.xxx 0000025fc3a028e0 &lt;result&gt;5__2
        0000025fc3a02978 00007ff90c4f5b00 System.IDisposable 0000025fc3a02978 &lt;&gt;7__wrap2
        0000025faf0ac600 00007ff90d8228d0 ...tity.PLCPara.xxx 0000025faf0ac600 &lt;processMark&gt;5__4
        0000025fc3a0aaf8 00007ff90d824358 ...ntity.PLCPara.xxx 0000025fc3a0aaf8 &lt;plcPara&gt;5__5
        0000025fc3a02ff0 00007ff90d872118 ...tity.PLCPara.xxx&gt; 0000025fc3a02ff8 &lt;&gt;u__1
        0000025fc3a02ff8 00007ff90c98b920 ....CompilerServices.TaskAwaiter 0000025fc3a03000 &lt;&gt;u__2
  0000025fc3a03008 00007ff90f3f82c0 (0) xxx.M71EnterPortService+&lt;ExecuteAsync&gt;d__3 @ 7ff90fe15a80
                   Address               MT Type                                        Value Name
          0000025fc3a03058 00007ff90c3f7408 System.Int32                                    0 &lt;&gt;1__state
          0000025fc3a03060 00007ff90c98b540 ...rvices.AsyncTaskMethodBuilder 0000025fc3a03068 &lt;&gt;t__builder
          0000000000000000 00007ff90d82ec98 ....DBModel.xxx             null &lt;produceRecord&gt;5__2
          0000000000000000 00007ff90d822c00 ...ty.PLCPara.xxx             null &lt;plcProcessPara&gt;5__3
          0000025fc3a03068 00007ff90d878de0 ...y.PLCPara.xxx&gt; 0000025fc3a03070 &lt;&gt;u__1
          0000025fc3a03070 00007ff90d879368 ...DBModel.xxx&gt; 0000025fc3a03078 &lt;&gt;u__2
          0000025fc3a03078 00007ff90d878eb8 ...Entity.xxx&gt; 0000025fc3a03080 &lt;&gt;u__3
          0000025fc3a03080 00007ff90c98b920 ....CompilerServices.TaskAwaiter 0000025fc3a03088 &lt;&gt;u__4
    0000025fc3a03090 00007ff90f3f8a60 (0) Furion.Schedule.ScheduleHostedService+&lt;&gt;c__DisplayClass23_3+&lt;&lt;BackgroundProcessing&gt;b__3&gt;d @ 7ff90fdf0000
                     Address               MT Type                                        Value Name
            0000025fc3a030d8 00007ff90c3f7408 System.Int32                                    0 &lt;&gt;1__state
            0000025fc3a030e0 00007ff90c98b540 ...rvices.AsyncTaskMethodBuilder 0000025fc3a030e8 &lt;&gt;t__builder
            0000025fc3a02560 00007ff90cbbc378 ...Service+&lt;&gt;c__DisplayClass23_3 0000025fc3a02560 &lt;&gt;4__this
            0000025fc3a030e8 00007ff90c98b920 ....CompilerServices.TaskAwaiter 0000025fc3a030f0 &lt;&gt;u__1
      0000025fc3a030f8 00007ff90f3f8f58 (0) Furion.FriendlyException.Retry+&lt;InvokeAsync&gt;d__1 @ 7ff90fdef840
                       Address               MT Type                                        Value Name
              0000025fc3a03168 00007ff90c3f7408 System.Int32                                    0 &lt;&gt;1__state
              0000025fc3a03180 00007ff90c98b540 ...rvices.AsyncTaskMethodBuilder 0000025fc3a03188 &lt;&gt;t__builder
              0000025fc3a02860 00007ff90dd040f8 ...&lt;System.Threading.Tasks.Task&gt; 0000025fc3a02860 action
              0000025fc3a0316c 00007ff90c3f7408 System.Int32                                    0 numRetries
              0000025fc3a03178 00007ff90c3f2f78 System.Boolean                               true finalThrow
              0000000000000000 00007ff90f237fc8 ... System.Threading.Tasks.Task&gt;             null fallbackPolicy
              0000000000000000 00007ff90c528d80 System.Type[]                                null exceptionTypes
              0000000000000000 00007ff90cbd2f28 ...on.Retry+&lt;&gt;c__DisplayClass1_0             null &lt;&gt;8__1
              0000025fc3a028a0 00007ff90f233868 ...n&lt;System.Int32, System.Int32&gt; 0000025fc3a028a0 retryAction
              0000025fc3a03170 00007ff90c3f7408 System.Int32                                 1000 retryTimeout
              0000025fc3a03174 00007ff90c3f7408 System.Int32                                    0 &lt;totalNumRetries&gt;5__2
              0000025fc3a03188 00007ff90c98b920 ....CompilerServices.TaskAwaiter 0000025fc3a03190 &lt;&gt;u__1
              0000000000000000 00007ff90c334730 System.Object                                null &lt;&gt;7__wrap2
              ...
</code></pre>
<p>要想理解上面的字段，需要大家对状态机内部的有一些了解，比如：</p>
<ol>
<li><code>5__xxx</code>   表示 await 的返回值。</li>
<li><code>1__state</code> 表示当一个方法中有多个await 时，这个字段会阶段性的记录当前是第几个await。</li>
</ol>
<p>结合 <code>5__xxx</code> 赋值情况 和 <code>processMark</code> 的数据标记情况，推测出是卡死在 <code>SavePlcPara</code> 中，截图如下：</p>
<p><img src="https://img2024.cnblogs.com/blog/214741/202504/214741-20250423095748434-1213270043.png" alt="" loading="lazy"></p>
<p>下钻找到了 SavePlcPara 之后，继续回头从 <code>~*e !clrstack</code>中找结果，终于水滴石穿，真有一个线程在 SavePlcPara 方法中，截图如下：</p>
<p><img src="https://img2024.cnblogs.com/blog/214741/202504/214741-20250423095748410-137431475.png" alt="" loading="lazy"></p>
<p>从卦中看，没找到M71EnterPortService关键词应该是被栈inline了，根据调用栈，可以发现是查询时序数据库 <code>TDengine</code> 时卡住导致的雪崩，<code>TDengine</code> 虽然我没用过，但听说是一个好东西，放一下描述给大家。</p>
<blockquote>
<p>TDengine 是一款 开源、高性能、云原生 的时序数据库（Time Series Database, TSDB）, 它专为物联网、车联网、工业互联网、金融、IT 运维等场景优化设计。同时它还带有内建的缓存、流式计算、数据订阅等系统功能，能大幅减少系统设计的复杂度，降低研发和运营成本，是一款极简的时序数据处理平台。</p>
</blockquote>
<p>最后就是让朋友重点观察下 TDengine.Driver.Impl.NativeMethods.NativeMethods.QueryWithReqid 方法，可以用排除法观察。</p>
<h2 id="三总结">三：总结</h2>
<p>这次任务延迟事故在分析过程中还是有相当大的迷惑性，如果你缺乏对状态机的理解以及不知<code>!dumpasync</code>命令的使用，我相信这个问题你很难搞定。<br>
<img src="https://images.cnblogs.com/cnblogs_com/huangxincheng/345039/o_210929020104最新消息优惠促销公众号关注二维码.jpg" width="700" height="300" alt="图片名称" align="center"></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.7637986388576389" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-23 09:58">2025-04-23 09:58</span>&nbsp;
<a href="https://www.cnblogs.com/huangxincheng">一线码农</a>&nbsp;
阅读(<span id="post_view_count">342</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18842230);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18842230', targetLink: 'https://www.cnblogs.com/huangxincheng/p/18842230', title: '记一次 .NET某工控任务调度系统 卡死分析' })">举报</a>
</div>
        