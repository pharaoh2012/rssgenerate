
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/whojie/p/18864069" title="发布于 2025-05-07 13:42">
    <span role="heading" aria-level="2">C#实现ModbusTCP从站（三）</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
C#实现ModbusTCP从站（三）
<div class="stackedit__html">
<h1><a id="_1"></a>前言</h1>
<ul>
<li>【作者】：<a href="!mp.weixin.qq.com/s/EerOuTF2HK72ykNHJS1duQ" rel="noopener nofollow">编程笔记in</a></li>
<li>【原文】：<a href="!mp.weixin.qq.com/s/EerOuTF2HK72ykNHJS1duQ" rel="noopener nofollow">mp.weixin.qq.com/s/EerOuTF2HK72ykNHJS1duQ</a></li>
<li>本文描述如何使用C#原生的Socket类实现ModbusTCP从站功能。</li>
<li>ModbusTCP从站是作为响应设备（服务器端）被动接收并处理主站（客户端）的请求，通过使用Socket创建从站服务，用于侦听主站（客户端）连接，获取请求及数据响应。</li>
</ul>
<h1><a id="_9"></a>项目介绍</h1>
<ul>
<li>项目实现了线圈（Coils）和保持寄存器（Holding Registers）的数据临时缓存功能，其中线圈是2进制数据，寄存器是16位整形数据。所以可以创建bool数组（boo[]）和ushort数组（ushort[]）存储数据。</li>
<li>使用Socket接收发送，在接收数据后，按照Modbus的协议格式转换数据，再将转换后的数据发送回去，达到通讯效果。</li>
<li>下面是实现的数据处理功能。</li>
</ul>
<h3><a id="1_14"></a>1、处理客户端功能码：</h3>
<ul>
<li class="task-list-item"><input class="task-list-item-checkbox" type="checkbox" checked="checked" disabled="disabled"> ① 处理线圈读取（功能码0x01）。</li>
<li class="task-list-item"><input class="task-list-item-checkbox" type="checkbox" checked="checked" disabled="disabled"> ② 处理保持寄存器读取（功能码0x03）。</li>
<li class="task-list-item"><input class="task-list-item-checkbox" type="checkbox" checked="checked" disabled="disabled"> ③ 处理线圈写入（功能码0x05）。</li>
<li class="task-list-item"><input class="task-list-item-checkbox" type="checkbox" checked="checked" disabled="disabled"> ④ 处理寄存器写入（功能码0x06）。</li>
<li class="task-list-item"><input class="task-list-item-checkbox" type="checkbox" checked="checked" disabled="disabled"> ⑤ 处理多线圈写入（功能码0x0F）。</li>
<li class="task-list-item"><input class="task-list-item-checkbox" type="checkbox" checked="checked" disabled="disabled"> ⑥ 处理多寄存器写入（功能码0x10）。</li>
</ul>
<h3><a id="2_24"></a>2、实现功能：</h3>
<ul>
<li>
<p>创建设置和获取线圈和寄存器数据的方法，基本功能如(①②③④)，方法是直接设置或获取数组的值，没有使用Modbus协议。属于测试功能，仅限测试时使用（正常情况不建议直接修改值）。</p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" type="checkbox" checked="checked" disabled="disabled"> ① 获取单个或多个线圈的值。</p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" type="checkbox" checked="checked" disabled="disabled"> ② 获取单个或多个寄存器的值。</p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" type="checkbox" checked="checked" disabled="disabled"> ③ 设置单个或多个线圈。</p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" type="checkbox" checked="checked" disabled="disabled"> ④ 设置单个或多个寄存器。</p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" type="checkbox" checked="checked" disabled="disabled"> ⑤ 支持多客户端连接。</p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" type="checkbox" checked="checked" disabled="disabled"> ⑥ 显示或隐藏请求报文。</p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" type="checkbox" checked="checked" disabled="disabled"> ⑦ 显示或隐藏相应报文。</p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" type="checkbox" checked="checked" disabled="disabled"> ⑧ 定时读取功能。</p>
</li>
</ul>
<h1><a id="_39"></a>运行环境</h1>
<ul>
<li class="task-list-item"><input class="task-list-item-checkbox" type="checkbox" checked="checked" disabled="disabled"> 操作系统：Windows11</li>
<li class="task-list-item"><input class="task-list-item-checkbox" type="checkbox" checked="checked" disabled="disabled"> 编程软件：Visual Studio 2022</li>
<li class="task-list-item"><input class="task-list-item-checkbox" type="checkbox" checked="checked" disabled="disabled"> Net版本：.Net Framework 4.8.0</li>
</ul>
<h1><a id="_44"></a>预览</h1>
<h3><a id="_45"></a>（一）运行效果</h3>
<p><img src="https://img2024.cnblogs.com/blog/1427274/202505/1427274-20250507133800119-1129982221.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<h2><a id="_47"></a>代码</h2>
<h3><a id="MainForm_48"></a>（一）MainForm代码</h3>
<ul>
<li>界面代码大概如下，实现了基本的连接、读取、写入、是否显示报文功能（下面仅是基本的字段和方法 方法签名，完整内容文末自行下载）。</li>
</ul>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">partial</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> MainForm : Form
{
ModbusTcpSlave modbusTcpSlave;
</span><span style="color: rgba(0, 0, 255, 1)">ushort</span> startAddress = <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 0, 255, 1)">ushort</span> dataLength = <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">;
Timer timerRead;

</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> MainForm(){ InitializeComponent(); }
</span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span> MainForm_Load(<span style="color: rgba(0, 0, 255, 1)">object</span><span style="color: rgba(0, 0, 0, 1)"> sender, EventArgs e){}
</span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span> MainForm_FormClosing(<span style="color: rgba(0, 0, 255, 1)">object</span><span style="color: rgba(0, 0, 0, 1)"> sender, FormClosingEventArgs e){}
</span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> Initialize(){}
</span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span> TimerRead_Tick(<span style="color: rgba(0, 0, 255, 1)">object</span><span style="color: rgba(0, 0, 0, 1)"> sender, EventArgs e){}

</span><span style="color: rgba(0, 0, 255, 1)">#region</span> 事件方法
<span style="color: rgba(0, 0, 255, 1)">#region</span> 按钮事件
<span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span> btn_Connect_Click(<span style="color: rgba(0, 0, 255, 1)">object</span><span style="color: rgba(0, 0, 0, 1)"> sender, EventArgs e){}
</span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span> btn_ReadData_Click(<span style="color: rgba(0, 0, 255, 1)">object</span><span style="color: rgba(0, 0, 0, 1)"> sender, EventArgs e){}
</span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span> btn_SendData_Click(<span style="color: rgba(0, 0, 255, 1)">object</span><span style="color: rgba(0, 0, 0, 1)"> sender, EventArgs e){}
</span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span> btn_ClearMessage_Click(<span style="color: rgba(0, 0, 255, 1)">object</span><span style="color: rgba(0, 0, 0, 1)"> sender, EventArgs e){}
</span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span> btn_ClearSendData_Click(<span style="color: rgba(0, 0, 255, 1)">object</span><span style="color: rgba(0, 0, 0, 1)"> sender, EventArgs e){}
</span><span style="color: rgba(0, 0, 255, 1)">#endregion</span>
<span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span> ModbusTcpSlave_MessageCallabck(<span style="color: rgba(0, 0, 255, 1)">object</span><span style="color: rgba(0, 0, 0, 1)"> sender, ModbusMessageEvents message){}
</span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span> ModbusTcpSlave_RequestCallabck(<span style="color: rgba(0, 0, 255, 1)">object</span><span style="color: rgba(0, 0, 0, 1)"> sender, ModbusMessageEvents message){}
</span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span> ModbusTcpSlave_ResponseCallback(<span style="color: rgba(0, 0, 255, 1)">object</span><span style="color: rgba(0, 0, 0, 1)"> sender, ModbusMessageEvents message){}
</span><span style="color: rgba(0, 0, 255, 1)">#endregion</span>

<span style="color: rgba(0, 0, 255, 1)">#region</span> 控件状态更新
<span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> ControlStateUpdate(){}
</span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span> checkBox_TimedRead_CheckedChanged(<span style="color: rgba(0, 0, 255, 1)">object</span><span style="color: rgba(0, 0, 0, 1)"> sender, EventArgs e){}
</span><span style="color: rgba(0, 0, 255, 1)">#endregion</span>

<span style="color: rgba(0, 0, 255, 1)">#region</span> 操作消息更新
<span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span> MessageUpdate(<span style="color: rgba(0, 0, 255, 1)">string</span> data, Color color, <span style="color: rgba(0, 0, 255, 1)">string</span> appendText = <span style="color: rgba(0, 0, 255, 1)">null</span>, <span style="color: rgba(0, 0, 255, 1)">int</span> maxLineNum = <span style="color: rgba(128, 0, 128, 1)">1000</span>, <span style="color: rgba(0, 0, 255, 1)">bool</span> isAppendTime = <span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">){}
</span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span> SetTextColor(RichTextBox rtb, <span style="color: rgba(0, 0, 255, 1)">int</span> startIndex, <span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> length, Color color){}
</span><span style="color: rgba(0, 0, 255, 1)">#endregion</span>

<span style="color: rgba(0, 0, 255, 1)">#region</span> 参数变更
<span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span> nudx_StartAddress_ValueChanged(<span style="color: rgba(0, 0, 255, 1)">object</span><span style="color: rgba(0, 0, 0, 1)"> sender, EventArgs e){}
</span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span> nudx_DataLength_ValueChanged(<span style="color: rgba(0, 0, 255, 1)">object</span><span style="color: rgba(0, 0, 0, 1)"> sender, EventArgs e){}
</span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span> cbx_FuncCode_SelectedIndexChanged(<span style="color: rgba(0, 0, 255, 1)">object</span><span style="color: rgba(0, 0, 0, 1)"> sender, EventArgs e){}
</span><span style="color: rgba(0, 0, 255, 1)">#endregion</span><span style="color: rgba(0, 0, 0, 1)">
}</span></pre>
</div>
<p>&nbsp;</p>
<h3><a id="ModbusTcpSlave_96"></a>（二）ModbusTcpSlave代码</h3>
<ul>
<li>在这里声明创建从站用到的字段、属性、事件、及相关的方法，相关方法声明如下（下面仅是类的字段和方法，方法签名，完整内容文末自行下载）。</li>
</ul>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> ModbusTcpSlave
{
    </span><span style="color: rgba(0, 0, 255, 1)">#region</span> 字段|属性|事件
    <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">event</span> EventHandler&lt;ModbusMessageEvents&gt;<span style="color: rgba(0, 0, 0, 1)"> MessageCallback;
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">event</span> EventHandler&lt;ModbusMessageEvents&gt;<span style="color: rgba(0, 0, 0, 1)"> RequestCallabck;
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">event</span> EventHandler&lt;ModbusMessageEvents&gt;<span style="color: rgba(0, 0, 0, 1)"> ResponseCallback;
    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">int</span> _port = <span style="color: rgba(128, 0, 128, 1)">502</span><span style="color: rgba(0, 0, 0, 1)">;
    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)"> _address;
    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">int</span> unitId = <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">;
    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">bool</span><span style="color: rgba(0, 0, 0, 1)"> _isRunning;
    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">ushort</span><span style="color: rgba(0, 0, 0, 1)">[] _holdingRegisters;
    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">readonly</span> <span style="color: rgba(0, 0, 255, 1)">int</span> MaxDataCount = <span style="color: rgba(128, 0, 128, 1)">65536</span><span style="color: rgba(0, 0, 0, 1)">;
    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">bool</span><span style="color: rgba(0, 0, 0, 1)">[] _coils;
    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">int</span> MaxConnections = <span style="color: rgba(128, 0, 128, 1)">5</span><span style="color: rgba(0, 0, 0, 1)">;
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">int</span> ReceiveTimeout { <span style="color: rgba(0, 0, 255, 1)">get</span>; <span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">set</span>; } = <span style="color: rgba(128, 0, 128, 1)">3000</span><span style="color: rgba(0, 0, 0, 1)">;
    </span><span style="color: rgba(0, 0, 255, 1)">private</span> Thread listenerThread = <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">;
    </span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> Socket slaveSocket;
    </span><span style="color: rgba(0, 0, 255, 1)">private</span> Dictionary&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>, Thread&gt;<span style="color: rgba(0, 0, 0, 1)"> clientThreadList;
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">bool</span> IsRunning { <span style="color: rgba(0, 0, 255, 1)">get</span> =&gt;<span style="color: rgba(0, 0, 0, 1)"> _isRunning; }
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">string</span> FuncCode { <span style="color: rgba(0, 0, 255, 1)">get</span>; <span style="color: rgba(0, 0, 255, 1)">set</span>; } = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">01</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;
    </span><span style="color: rgba(0, 0, 255, 1)">#endregion</span>
    <span style="color: rgba(0, 0, 255, 1)">#region</span> 构造函数|对象参数初始化
    <span style="color: rgba(0, 0, 255, 1)">public</span> ModbusTcpSlave(<span style="color: rgba(0, 0, 255, 1)">string</span> ipAddress = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">127.0.0.1</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(0, 0, 255, 1)">int</span> port = <span style="color: rgba(128, 0, 128, 1)">502</span>, <span style="color: rgba(0, 0, 255, 1)">byte</span> unitId = <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">){}
    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> Initialize(){}
    </span><span style="color: rgba(0, 0, 255, 1)">#endregion</span>
    <span style="color: rgba(0, 0, 255, 1)">#region</span> 启动|停止
    <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> Start(){}
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> Stop(){}
    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> ListenClient(){}
    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span> HandleClientConnect(<span style="color: rgba(0, 0, 255, 1)">object</span><span style="color: rgba(0, 0, 0, 1)"> socket){}
    </span><span style="color: rgba(0, 0, 255, 1)">#endregion</span>
    <span style="color: rgba(0, 0, 255, 1)">#region</span> 数据转换
    <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">string</span> ArrayToString&lt;T&gt;(T[] values, <span style="color: rgba(0, 0, 255, 1)">string</span> sep = <span style="color: rgba(128, 0, 0, 1)">"</span> <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">){}
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">string</span> ArrayToHex&lt;T&gt;(T[] values, <span style="color: rgba(0, 0, 255, 1)">string</span> sep = <span style="color: rgba(128, 0, 0, 1)">"</span> <span style="color: rgba(128, 0, 0, 1)">"</span>) <span style="color: rgba(0, 0, 255, 1)">where</span> T : <span style="color: rgba(0, 0, 255, 1)">struct</span><span style="color: rgba(0, 0, 0, 1)">, IConvertible{}
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> T[] StringToArray&lt;T&gt;(<span style="color: rgba(0, 0, 255, 1)">string</span> input, <span style="color: rgba(0, 0, 255, 1)">char</span> sep = <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">,</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">){}
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> T[] TryStringToArray&lt;T&gt;(<span style="color: rgba(0, 0, 255, 1)">string</span> input, <span style="color: rgba(0, 0, 255, 1)">char</span> sep = <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">,</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">){}
    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">ushort</span>[] ConvertRequestMessage(<span style="color: rgba(0, 0, 255, 1)">byte</span><span style="color: rgba(0, 0, 0, 1)">[] request){}
    </span><span style="color: rgba(0, 0, 255, 1)">#endregion</span>
    <span style="color: rgba(0, 0, 255, 1)">#region</span> 数据变更处理
    <span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">byte</span>[] ProcessRequest(<span style="color: rgba(0, 0, 255, 1)">byte</span>[] request, <span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> length){}
    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">byte</span>[] HandleReadCoils(<span style="color: rgba(0, 0, 255, 1)">byte</span>[] request, <span style="color: rgba(0, 0, 255, 1)">ushort</span> startAddress, <span style="color: rgba(0, 0, 255, 1)">ushort</span><span style="color: rgba(0, 0, 0, 1)"> numberOfPoint){}
    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">byte</span>[] HandleReadHoldingRegisters(<span style="color: rgba(0, 0, 255, 1)">byte</span>[] request, <span style="color: rgba(0, 0, 255, 1)">ushort</span> startAddress, <span style="color: rgba(0, 0, 255, 1)">ushort</span><span style="color: rgba(0, 0, 0, 1)"> numberOfPoint){}
    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">byte</span>[] HandleWriteSingleCoil(<span style="color: rgba(0, 0, 255, 1)">byte</span>[] request, <span style="color: rgba(0, 0, 255, 1)">ushort</span> address, <span style="color: rgba(0, 0, 255, 1)">ushort</span><span style="color: rgba(0, 0, 0, 1)"> value){}
    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">byte</span>[] HandleWriteSingleRegister(<span style="color: rgba(0, 0, 255, 1)">byte</span>[] request, <span style="color: rgba(0, 0, 255, 1)">ushort</span> address, <span style="color: rgba(0, 0, 255, 1)">ushort</span><span style="color: rgba(0, 0, 0, 1)"> value){}
    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">byte</span>[] HandleWriteMultipleCoils(<span style="color: rgba(0, 0, 255, 1)">byte</span>[] request, <span style="color: rgba(0, 0, 255, 1)">ushort</span> startAddress, <span style="color: rgba(0, 0, 255, 1)">ushort</span><span style="color: rgba(0, 0, 0, 1)"> numberOfPoint){}
    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">byte</span>[] HandleWriteMultipleRegisters(<span style="color: rgba(0, 0, 255, 1)">byte</span>[] request, <span style="color: rgba(0, 0, 255, 1)">ushort</span> startAddress, <span style="color: rgba(0, 0, 255, 1)">ushort</span><span style="color: rgba(0, 0, 0, 1)"> numberOfPoint){}
    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">byte</span>[] CreateErrorResponse(<span style="color: rgba(0, 0, 255, 1)">byte</span>[] request, <span style="color: rgba(0, 0, 255, 1)">byte</span><span style="color: rgba(0, 0, 0, 1)"> errorCode){}
    </span><span style="color: rgba(0, 0, 255, 1)">#endregion</span>
    <span style="color: rgba(0, 0, 255, 1)">#region</span> 数据变更处理-强制处理
    <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">bool</span> SetSingleCoils(<span style="color: rgba(0, 0, 255, 1)">ushort</span> address, <span style="color: rgba(0, 0, 255, 1)">bool</span><span style="color: rgba(0, 0, 0, 1)"> value){}
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">bool</span> SetSingleRegister(<span style="color: rgba(0, 0, 255, 1)">ushort</span> address, <span style="color: rgba(0, 0, 255, 1)">ushort</span><span style="color: rgba(0, 0, 0, 1)"> value){}
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">bool</span> SetMultipleCoils(<span style="color: rgba(0, 0, 255, 1)">ushort</span> startAddress, <span style="color: rgba(0, 0, 255, 1)">bool</span><span style="color: rgba(0, 0, 0, 1)">[] data){}
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">bool</span> SetMultipleRegister(<span style="color: rgba(0, 0, 255, 1)">ushort</span> startAddress, <span style="color: rgba(0, 0, 255, 1)">ushort</span><span style="color: rgba(0, 0, 0, 1)">[] data){}
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">bool</span>[] GetCoils(<span style="color: rgba(0, 0, 255, 1)">ushort</span> address, <span style="color: rgba(0, 0, 255, 1)">ushort</span><span style="color: rgba(0, 0, 0, 1)"> numberOfPoint){}
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">ushort</span>[] GetRegisters(<span style="color: rgba(0, 0, 255, 1)">ushort</span> address, <span style="color: rgba(0, 0, 255, 1)">ushort</span><span style="color: rgba(0, 0, 0, 1)"> numberOfPoint){}
    </span><span style="color: rgba(0, 0, 255, 1)">#endregion</span>
    <span style="color: rgba(0, 0, 255, 1)">#region</span> 回调触发方法
    <span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> OnMessageCallabck(ModbusMessageEvents message){}
    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> OnRequestCallabck(ModbusMessageEvents message){}
    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> OnResponseCallabck(ModbusMessageEvents message){}
    </span><span style="color: rgba(0, 0, 255, 1)">#endregion</span><span style="color: rgba(0, 0, 0, 1)">
}</span></pre>
</div>
<p>&nbsp;</p>
<h1><a id="_164"></a>结语</h1>
<ul>
<li>
<p>通过该项目学习如何使用C# 实现ModbuTCP通讯的从站功能，之前写过使用Socket实现TCP通讯，个人理解从站是在此基础上做了数据保存处理、在发送接收数据时遵从Modbus协议，最后根据情况将数据格式转换，更多功能会在后续添加，写文章是用于记录和分享、在写的过程中加深印象。</p>
</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" type="checkbox" checked="checked" disabled="disabled"> <strong>项目源码</strong> gitee.com/incodenotes/csharp-modbus<br>
<img src="https://i-blog.csdnimg.cn/direct/09e97b59380648a8806c0c150845e712.png#pic_center" alt="在这里插入图片描述"></p>


</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" type="checkbox" checked="checked" disabled="disabled"> 如果你觉得这篇文章对你有帮助，不妨点个赞再走呗！</p>


</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" type="checkbox" checked="checked" disabled="disabled"> 如有其他疑问，欢迎评论区留言讨论！</p>


</li>
<li class="task-list-item">
<p><input class="task-list-item-checkbox" type="checkbox" checked="checked" disabled="disabled"> 也可以加入微信公众号 [<strong>编程笔记in</strong>] ，一起交流学习！</p>


</li>


</ul>


</div>
</div>
<div id="MySignature" role="contentinfo">
    <p>本文来自博客园，作者：<a href="https://www.cnblogs.com/whojie/" target="_blank">编程笔记in</a>，转载请注明原文链接：<a href="https://www.cnblogs.com/whojie/p/18864069" target="_blank">https://www.cnblogs.com/whojie/p/18864069</a></p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="1.3600090024027778" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-07 13:42">2025-05-07 13:42</span>&nbsp;
<a href="https://www.cnblogs.com/whojie">编程笔记in</a>&nbsp;
阅读(<span id="post_view_count">431</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18864069);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18864069', targetLink: 'https://www.cnblogs.com/whojie/p/18864069', title: 'C#实现ModbusTCP从站（三）' })">举报</a>
</div>
        