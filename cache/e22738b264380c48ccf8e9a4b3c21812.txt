
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/liyongqiang-cc/p/18640777" title="发布于 2025-01-13 10:15">
    <span role="heading" aria-level="2">深入理解ASP.NET Core 管道的工作原理</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<blockquote>
<p>在 .NET Core 中，管道（Pipeline）是处理 HTTP 请求和响应的中间件组件的有序集合。每个中间件组件都可以对请求进行处理，并将其传递给下一个中间件组件，直到请求到达最终的处理程序。管道的概念类似于流水线，每个中间件组件都是流水线中的一个步骤。</p>
</blockquote>
<h3 id="1-管道的基本概念">1. 管道的基本概念</h3>
<p>在 .NET Core 中，管道是一个请求处理流程，由多个中间件按顺序组成。每个中间件都是一个处理单元，负责处理 HTTP 请求或响应。管道的主要作用是将复杂的请求处理逻辑分解为多个小的、可重用的组件。</p>
<p>管道的工作流程可以分为两个阶段：</p>
<ul>
<li>请求阶段：<br>
*    HTTP 请求进入管道后，依次经过每个中间件。<br>
*    每个中间件可以对请求进行处理，并决定是否调用下一个中间件。<br>
*    如果某个中间件不调用下一个中间件，管道会短路，后续中间件不会执行。</li>
<li>响应阶段：<br>
*    当某个中间件生成响应后，响应会逆向经过每个中间件。<br>
*    每个中间件可以对响应进行处理，最终返回给客户端。</li>
</ul>
<hr>
<h3 id="2-管道的底层机制">2. 管道的底层机制</h3>
<p>管道的核心是基于委托（Delegate）和上下文（Context）的机制。</p>
<p><code>RequestDelegate</code>：表示处理 HTTP 请求的委托，其签名为 <code>Task(HttpContext)</code>。</p>
<pre><code>public&nbsp;delegate&nbsp;Task&nbsp;RequestDelegate(HttpContext&nbsp;context);
</code></pre>
<ul>
<li><code>HttpContext</code>：封装了 HTTP 请求和响应的所有信息，包括请求头、请求体、响应头、响应体等。</li>
</ul>
<p>每个中间件本质上是一个 <code>RequestDelegate</code>，它接收 <code>HttpContext</code> 并处理请求，同时可以选择调用下一个中间件。</p>
<hr>
<h3 id="3-中间件的实现细节">3. 中间件的实现细节</h3>
<p>中间件是管道的基本组成单元，通常通过 <code>Use</code>、<code>Run</code> 或 <code>Map</code> 方法添加到管道中。</p>
<p><code>Use</code> 方法：用于添加一个可以调用下一个中间件的中间件。</p>
<pre><code>app.Use(async&nbsp;(context,&nbsp;next)&nbsp;=&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;处理请求
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;await&nbsp;next();&nbsp;//&nbsp;调用下一个中间件
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;处理响应
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});
</code></pre>
<p><code>Run</code> 方法：用于添加一个终止中间件，不会调用下一个中间件。</p>
<pre><code>app.Run(async&nbsp;context&nbsp;=&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;await&nbsp;context.Response.WriteAsync("终止中间件!");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});
</code></pre>
<p><code>Map</code> 方法：用于根据请求路径分支管道。</p>
<pre><code>app.Map("/admin",&nbsp;adminApp&nbsp;=&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;adminApp.Run(async&nbsp;context&nbsp;=&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;await&nbsp;context.Response.WriteAsync("Index");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});
</code></pre>
<hr>
<h3 id="4-管道的构建过程">4. 管道的构建过程</h3>
<p>管道的构建是在应用程序启动时完成的，通常在 <code>Startup</code> 类的 <code>Configure</code> 方法中定义。</p>
<p><code>Configure</code> 方法：用于配置中间件管道。</p>
<pre><code>public&nbsp;class&nbsp;Startup
{
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;Configure(IApplicationBuilder&nbsp;app,&nbsp;IHostingEnvironment&nbsp;env)
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;在这里配置管道
&nbsp;&nbsp;&nbsp;&nbsp;}
}
</code></pre>
<p><code>IApplicationBuilder</code> 是构建管道的核心接口，用于构建和配置中间件管道。它内部维护了一个中间件列表，按添加顺序执行。它提供了以下方法：</p>
<ul>
<li><code>Use</code>：添加一个可以调用下一个中间件的中间件。</li>
<li><code>Run</code>：添加一个终止中间件，不会调用下一个中间件。</li>
<li><code>Map</code>：根据请求路径分支管道。</li>
<li><code>UseMiddleware</code>：添加自定义中间件。</li>
</ul>
<hr>
<h3 id="5-管道的执行流程">5. 管道的执行流程</h3>
<p>管道的执行流程可以分为以下几个步骤：</p>
<ol>
<li>接收请求：HTTP 请求到达服务器，被封装为 <code>HttpContext</code> 对象。</li>
<li>中间件处理：请求依次经过每个中间件，每个中间件可以对 <code>HttpContext</code> 进行处理。<br>
*    如果中间件调用 <code>next()</code>，请求会传递给下一个中间件。<br>
*    如果中间件不调用 <code>next()</code>，管道会短路，后续中间件不会执行。</li>
<li>生成响应：某个中间件生成响应后，响应会逆向经过每个中间件，最终返回给客户端。</li>
</ol>
<hr>
<h3 id="6-自定义中间件">6. 自定义中间件</h3>
<p>通过自定义中间件，可以扩展管道的功能。自定义中间件通常是一个类，实现 <code>Invoke</code> 或 <code>InvokeAsync</code> 方法。</p>
<p>自定义中间件示例：</p>
<pre><code>public&nbsp;class&nbsp;CustomMiddleware
{
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;readonly&nbsp;RequestDelegate&nbsp;_next;

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;CustomMiddleware(RequestDelegate&nbsp;next)
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_next&nbsp;=&nbsp;next;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;async&nbsp;Task&nbsp;InvokeAsync(HttpContext&nbsp;context)
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;处理请求
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;await&nbsp;context.Response.WriteAsync("调用之前。。。");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;await&nbsp;_next(context);&nbsp;//&nbsp;调用下一个中间件
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;处理响应
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;await&nbsp;context.Response.WriteAsync("调用之后。。。");
&nbsp;&nbsp;&nbsp;&nbsp;}
}

//&nbsp;扩展方法，用于注册中间件
public&nbsp;static&nbsp;class&nbsp;CustomMiddlewareExtensions
{
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;IApplicationBuilder&nbsp;UseCustomMiddleware(this&nbsp;IApplicationBuilder&nbsp;builder)
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;builder.UseMiddleware&lt;CustomMiddleware&gt;();
&nbsp;&nbsp;&nbsp;&nbsp;}
}

//&nbsp;在&nbsp;Configure&nbsp;方法中使用自定义中间件
public&nbsp;void&nbsp;Configure(IApplicationBuilder&nbsp;app)
{
&nbsp;&nbsp;&nbsp;&nbsp;app.UseCustomMiddleware();
&nbsp;&nbsp;&nbsp;&nbsp;app.Run(async&nbsp;context&nbsp;=&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;await&nbsp;context.Response.WriteAsync("自定义中间件!");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});
}
</code></pre>
<hr>
<h3 id="7-管道的核心组件">7. 管道的核心组件</h3>
<ul>
<li><code>IApplicationBuilder</code>：用于构建和配置中间件管道。</li>
<li><code>HttpContext</code>：封装了 HTTP 请求和响应的上下文信息。</li>
<li><code>RequestDelegate</code>：表示处理 HTTP 请求的委托。</li>
</ul>
<hr>
<h3 id="8-管道的生命周期">8. 管道的生命周期</h3>
<p>管道的生命周期从应用程序启动时开始，到应用程序关闭时结束。在 <code>Startup</code> 类中，通过 <code>Configure</code> 方法定义管道的结构。</p>
<hr>
<h3 id="9-实际应用场景">9. 实际应用场景</h3>
<ul>
<li>日志记录：通过中间件记录请求和响应的日志。</li>
<li>身份验证和授权：使用 <code>UseAuthentication</code> 和 <code>UseAuthorization</code> 中间件。</li>
<li>异常处理：使用 <code>UseExceptionHandler</code> 中间件捕获和处理异常。</li>
<li>路由和终结点：使用 <code>UseRouting</code> 和 <code>UseEndpoints</code> 中间件定义路由和终结点。</li>
</ul>
<hr>
<h3 id="10-调试和优化管道">10. 调试和优化管道</h3>
<ul>
<li>调试：通过日志或调试工具观察中间件的执行顺序和效果。</li>
<li>优化：减少不必要的中间件，确保中间件的顺序合理，避免性能瓶颈。</li>
</ul>
<hr>
<h3 id="11总结">11.总结</h3>
<p>ASP.NET Core 管道是请求处理的核心机制，它由一系列中间件组成。每个中间件都可以对请求进行处理，并将请求传递给下一个中间件，或者直接生成响应。通过理解管道的工作原理，我们可以更好地掌握 ASP.NET Core 的请求处理流程，并灵活地构建和扩展应用程序。</p>
<p><img src="https://img2024.cnblogs.com/blog/2063798/202412/2063798-20241230133832752-107706291.png" alt="" loading="lazy"></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="1.6690533442800926" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-13 10:16">2025-01-13 10:15</span>&nbsp;
<a href="https://www.cnblogs.com/liyongqiang-cc">代码拾光</a>&nbsp;
阅读(<span id="post_view_count">389</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18640777" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18640777);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18640777', targetLink: 'https://www.cnblogs.com/liyongqiang-cc/p/18640777', title: '深入理解ASP.NET Core 管道的工作原理' })">举报</a>
</div>
        