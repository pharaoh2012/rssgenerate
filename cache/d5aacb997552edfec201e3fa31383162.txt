
    <a name="top"></a>
    <h2><a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/jyzhao/p/19003856/sqlcl-bu-jin-shi-sqlplus-de-ji-ren-zhe-geng-shi-ai" title="发布于 2025-07-25 08:31">
    <span role="heading" aria-level="2">SQLcl：不仅是 SQL*Plus 的继任者，更是 AI 时代的连接器</span>
    

</a>
</h2>
    <small>
<span id="post-date" data-last-update-days="0" data-date-updated="2025-07-25 08:32">2025-07-25 08:31</span>&nbsp;
<a href="https://www.cnblogs.com/jyzhao">AlfredZhao</a>&nbsp;
阅读(<span id="post_view_count">245</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19003856);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19003856', targetLink: 'https://www.cnblogs.com/jyzhao/p/19003856/sqlcl-bu-jin-shi-sqlplus-de-ji-ren-zhe-geng-shi-ai', title: 'SQLcl：不仅是 SQL*Plus 的继任者，更是 AI 时代的连接器' })">举报</a>
</small>
    <div class="entry">
        <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>在 Oracle 数据库的世界里，<code>SQL*Plus</code> 是开发和管理工作的标配工具。但随着数据库技术的演进和 AI 能力的嵌入，传统工具已无法满足现代数据开发、智能交互和自动化运维的需求。</p>
<p>Oracle 官方推出的现代化命令行工具 <strong>SQLcl（SQL Command Line）</strong> 正在取代 SQL*Plus，成为新时代的标准接口，特别是在 AI 与数据库深度融合的背景下，它是目前 <strong>唯一原生支持 MCP（Model Context Protocol）</strong> 的 CLI 工具。</p>
<hr>
<h2 id="一sqlplus-的功成身退">一、SQL*Plus 的功成身退</h2>
<p>SQL*Plus 陪伴 DBA 和开发者几十年，以其稳定和简洁而闻名，但也暴露出诸多局限：</p>
<ul>
<li>❌ 无命令历史、无自动补全</li>
<li>❌ 交互体验落后，难以支持现代开发</li>
<li>❌ 无法格式化 SQL，无语法高亮</li>
<li>❌ 输出格式有限，不支持 JSON、CSV 等</li>
<li>❌ 无法与 AI 模型协同工作</li>
</ul>
<p>随着 Oracle 进入 23ai 时代，这些缺陷愈发明显。</p>
<p>而且细心的你可能已经发现，现在Oracle数据库安装完成后，其实SQLcl工具也已经默认安装了。</p>
<hr>
<h2 id="二sqlcl为现代数据库工作者而生">二、SQLcl：为现代数据库工作者而生</h2>
<p><strong>SQLcl</strong> 是 Oracle 官方提供的现代化 SQL 命令行工具，<strong>兼容 SQL*Plus 的全部命令</strong>，同时引入了丰富的现代特性，需要注意的是，SQLcl工具并非最近才推出，但最近火起来，真正成为 AI 与数据库交互的重要接口工具，是因为其对 MCP（Model Context Protocol） 的支持，至此 SQLcl 迈入了智能化新阶段（当前最新为25.2版本）。</p>
<h3 id="关键功能一览">关键功能一览</h3>
<table>
<thead>
<tr>
<th>功能</th>
<th>SQL*Plus</th>
<th>SQLcl</th>
</tr>
</thead>
<tbody>
<tr>
<td>SQL 格式化（<code>format</code>）</td>
<td>❌</td>
<td>✅</td>
</tr>
<tr>
<td>命令历史、多行编辑</td>
<td>❌</td>
<td>✅</td>
</tr>
<tr>
<td>SQL 高亮</td>
<td>❌</td>
<td>✅</td>
</tr>
<tr>
<td>输出格式（JSON/CSV/XML）</td>
<td>❌</td>
<td>✅（<code>set sqlformat</code>）</td>
</tr>
<tr>
<td>支持 JavaScript 脚本</td>
<td>❌</td>
<td>✅</td>
</tr>
<tr>
<td>内建 Liquibase 支持</td>
<td>❌</td>
<td>✅</td>
</tr>
<tr>
<td>与 MCP 集成，调用 AI 模型</td>
<td>❌</td>
<td>✅</td>
</tr>
</tbody>
</table>
<h3 id="示例启动更简单">示例：启动更简单</h3>
<pre><code class="language-bash"># 过去（SQL*Plus）
sqlplus / as sysdba

# 现在（SQLcl）
sql / as sysdba
</code></pre>
<p>曾经那个调侃入门级DBA，敲完 <code>sqlplus / as sysdba</code> 然后不会了的笑话，如今也可以改成敲完 <code>sql / as sysdba</code> 然后不会了..</p>
<p>嗯，其实还可以敲个help看看丰富的帮助指引 <sup>_</sup></p>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/635610/202507/635610-20250725083137725-1133437109.jpg" class="lazyload"></p>
<p>可以看到SQLcl的功能实在是太多了，举例一个输出格式的细节示例：</p>
<pre><code class="language-sql">--默认格式，我们直接查询某张表数据：
SQL&gt; select * from countries fetch first 2 rows only;

COUNTRY_ID CO COUNTRY_NAME                             COUNTRY_SUBREGION              COUNTRY_SUBREGION_ID COUNTRY_REGION       COUNTRY_REGION_ID COUNTRY_TOTA COUNTRY_TOTAL_ID
---------- -- ---------------------------------------- ------------------------------ -------------------- -------------------- ----------------- ------------ ----------------
     52790 US 美国                                       北美洲                                           52797 美洲                               52801 世界汇总                    52806
     52776 DE 德国                                       西欧                                            52799 欧洲                               52803 世界汇总                    52806

--通过设置可以支持csv格式，效果如下：
SQL&gt; set sqlformat csv
SQL&gt; select * from countries fetch first 2 rows only;
"COUNTRY_ID","COUNTRY_ISO_CODE","COUNTRY_NAME","COUNTRY_SUBREGION","COUNTRY_SUBREGION_ID","COUNTRY_REGION","COUNTRY_REGION_ID","COUNTRY_TOTAL","COUNTRY_TOTAL_ID"
52790,"US","美国","北美洲",52797,"美洲",52801,"世界汇总",52806
52776,"DE","德国","西欧",52799,"欧洲",52803,"世界汇总",52806

--通过设置可以支持json格式，效果如下：
SQL&gt; set sqlformat json
SQL&gt; select * from countries fetch first 2 rows only;
{"results":[{"columns":[{"name":"COUNTRY_ID","type":"NUMBER"},{"name":"COUNTRY_ISO_CODE","type":"CHAR"},{"name":"COUNTRY_NAME","type":"VARCHAR2"},{"name":"COUNTRY_SUBREGION","type":"VARCHAR2"},{"name":"COUNTRY_SUBREGION_ID","type":"NUMBER"},{"name":"COUNTRY_REGION","type":"VARCHAR2"},{"name":"COUNTRY_REGION_ID","type":"NUMBER"},{"name":"COUNTRY_TOTAL","type":"VARCHAR2"},{"name":"COUNTRY_TOTAL_ID","type":"NUMBER"}],"items":
[
{"country_id":52790,"country_iso_code":"US","country_name":"美国","country_subregion":"北美洲","country_subregion_id":52797,"country_region":"美洲","country_region_id":52801,"country_total":"世界汇总","country_total_id":52806}
,{"country_id":52776,"country_iso_code":"DE","country_name":"德国","country_subregion":"西欧","country_subregion_id":52799,"country_region":"欧洲","country_region_id":52803,"country_total":"世界汇总","country_total_id":52806}
]}]}

--还有更多输出格式可以使用 help set sqlformat 来查看，按需使用
</code></pre>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/635610/202507/635610-20250725083137917-179953272.jpg" class="lazyload"></p>
<h2 id="三让-sqlcl-说人话mcp-server-引领自然语言交互">三、让 SQLcl 说“人话”：MCP Server 引领自然语言交互</h2>
<p>如果说上面的这些功能没能打动你，那么 Oracle SQLcl 的 MCP Server 为与 Oracle 数据库的交互方式带来重大革新，支持直接通过 AI 应用实现自然语言操作。</p>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/635610/202507/635610-20250725083137383-1249057887.jpg" class="lazyload"></p>
<p>是的，借助 MCP Server，你可以用自然语言对话方式直接查询Oracle数据、生成报表并执行数据库操作，大幅提升效率与易用性。</p>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/635610/202507/635610-20250725083137506-648715292.jpg" class="lazyload"></p>
<p>目前，SQLcl MCP Server 提供如下工具:</p>
<ul>
<li>list-connections：自动发现并列出你电脑上保存的所有 Oracle 数据库连接。</li>
<li>connect：连接到你指定的数据库连接名称。</li>
<li>disconnect：断开当前正在使用的 Oracle 数据库连接。</li>
<li>run-sql：在已连接的数据库上执行标准 SQL 查询和 PL/SQL 代码块。</li>
<li>run-sqlcl：执行 SQLcl 的专属命令和扩展功能。</li>
</ul>
<p>另外值得我们注意的是，Oracle基于现有的SQLcl工具，增强开发MCP功能，而不是另起炉灶，这是Oracle比较独特的地方，算是一个关键决策。</p>
<p>这种复用已有 CLI 工具的技术路径，体现了其工程上的务实与产品一致性思维。不仅保护了已有投资，还能快速将 AI 交互能力带入 Oracle 开发者熟悉的工作流中，这是目前其他主流数据库厂商尚未采用的路径。</p>
<p><strong>下面来看我们具体该如何快速体验用起来？</strong></p>
<p>SQLcl需要注意的就是版本要在25.2以上，运行需要依赖JDK环境。</p>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/635610/202507/635610-20250725083137470-1629763498.jpg" class="lazyload"></p>
<p>我这里是在mac笔记本上直接安装的SQLcl，直接使用brew安装：</p>
<pre><code class="language-BASH">brew install sqlcl
</code></pre>
<p>起初我安装的版本是25.2.0，可还没来及测试就被其他事情耽误了。</p>
<pre><code class="language-BASH">alfredzhao@alfredzhaodeMacBook-Air ~ % sql -V
SQLcl：发行版 25.2.0.0 Production 工作版本：25.2.0.184.2054
</code></pre>
<p>等想起来继续测试时，听同事说最开始的版本有些小问题，所以干脆就把之前的版本直接升级到最新25.2.2，避免重复踩坑浪费时间：</p>
<pre><code class="language-BASH">brew upgrade sqlcl
</code></pre>
<p>按提示在mac配置新的环境变量：vi ~/.zprofile</p>
<pre><code>export PATH=/opt/homebrew/Caskroom/sqlcl/25.2.2.199.0918/sqlcl/bin:"$PATH"
</code></pre>
<p>升级后是这个版本：</p>
<pre><code class="language-BASH">alfredzhao@alfredzhaodeMacBook-Air ~ % sql -V
SQLcl：发行版 25.2.2.0 Production 工作版本：25.2.2.199.0918
</code></pre>
<p>配置数据库连接，可以配置多个连接，在国外同事讲的这张片子中，可以看到配置非常灵活：</p>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/635610/202507/635610-20250725083137627-1001057844.jpg" class="lazyload"></p>
<p>这些配置都是存在你SQLcl的本地电脑中的，保证了安全性。而且建议不要上来就给高权限用户，避免泄露敏感数据，比如我这里只配置了两个测试数据的连接信息，保证不会读取到关键敏感数据。</p>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/635610/202507/635610-20250725083137065-1442807652.jpg" class="lazyload"></p>
<p>测试启动mcp server：</p>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/635610/202507/635610-20250725083137251-1707075577.jpg" class="lazyload"></p>
<p>接下来就看MCP Server具体如何在其他工具中配置和使用？</p>
<p>我们选择在 VSCode 中配置 Cline来演示。</p>
<p>为什么选择这种方式？因为这个最流行且最简单，可以直接按照下面这个SQLcl的官方手册，一步步操作即可完成：</p>
<ul>
<li><a href="https://docs.oracle.com/en/database/oracle/sql-developer-command-line/25.2/sqcug/starting-and-managing-sqlcl-mcp-server.html#GUID-42167832-B364-4A3E-8A17-9FAE1F6CCFD3" target="_blank" rel="noopener nofollow">https://docs.oracle.com/en/database/oracle/sql-developer-command-line/25.2/sqcug/starting-and-managing-sqlcl-mcp-server.html#GUID-42167832-B364-4A3E-8A17-9FAE1F6CCFD3</a></li>
</ul>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/635610/202507/635610-20250725083137938-1490959827.jpg" class="lazyload"></p>
<p>文档中详细描述了如何在VSCode中下载安装Cline插件：<br>
<img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/635610/202507/635610-20250725083137404-1715552830.jpg" class="lazyload"></p>
<p>如何配置好SQLcl的路径，注意因为我这里升级过SQLcl版本，需要重新修改：<br>
<img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/635610/202507/635610-20250725083137711-1974755825.jpg" class="lazyload"><br>
修改为新版本的SQLcl路径：<br>
<img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/635610/202507/635610-20250725083137760-1557937672.jpg" class="lazyload"></p>
<p>起初我deepseek欠费了，所以临时用openai兼容的一个免费模型，但总是有问题，后来干脆充值换回deepseek来试，这个deepseek是直接在模型配置列表中存在可以选择的，测试起来就非常顺利。</p>
<p>这里先测试一个简单的业务问题“今年主要产品销售情况”，看下表现如何：</p>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/635610/202507/635610-20250725083137733-1540211342.jpg" class="lazyload"></p>
<p>使用自然语言提问，最终它也直接使用自然语言返回答复，体验还挺好的。</p>
<p>当我再次提问相同问题，看它在这种情况下是如何反应的？</p>
<p>结果它非常聪明的识别到是相同问题，猜我是想获取更多维度的信息，还直接给我提供了一些维度选择，非常贴心！</p>
<p><img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/635610/202507/635610-20250725083137615-1381479725.jpg" class="lazyload"></p>
<p>当我选择按季度汇总时，就进一步得到了想要的业务结果：<br>
<img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/635610/202507/635610-20250725083137572-809462592.jpg" class="lazyload"></p>
<p>我这里是构建的测试数据，这个方案下的所有数据都可以随便丢给LLM去分析，但我们从这个测试中也可以看到，在惊叹其功能强大的同时，也切身感受到数据安全显得比以往任何时候都重要，就像国外同事的这张片子中描述的，如今这些AI/LLM/MCP技术的应用，实际上进一步凸显了数据安全的重要性。<br>
<img alt="" loading="lazy" data-src="https://img2024.cnblogs.com/blog/635610/202507/635610-20250725083137681-113662909.jpg" class="lazyload"></p>
<p>在这个AI时代，SQLcl 是传统与未来的接点，也是 Oracle DBA 走向智能化世界的桥梁。</p>
<p><strong>附：本文在编写过程中参考的文章和视频</strong></p>
<ul>
<li><a href="https://blogs.oracle.com/database/post/introducing-mcp-server-for-oracle-database?source=:so:tw:or:awr:exd:::RC_DEVT250603P00091:ODB23ai&amp;SC=:so:tw:or:awr:exd:::RC_DEVT250603P00091:ODB23ai&amp;pcode=DEVT250603P00091" target="_blank" rel="noopener nofollow">https://blogs.oracle.com/database/post/introducing-mcp-server-for-oracle-database?source=:so:tw:or:awr:exd:::RC_DEVT250603P00091:ODB23ai&amp;SC=:so:tw:or:awr:exd:::RC_DEVT250603P00091:ODB23ai&amp;pcode=DEVT250603P00091</a></li>
<li><a href="https://docs.oracle.com/en/database/oracle/sql-developer-command-line/25.2" target="_blank" rel="noopener nofollow">https://docs.oracle.com/en/database/oracle/sql-developer-command-line/25.2</a></li>
<li><a href="https://youtu.be/hj6WoZVGUBg?si=yveiUlF83oB_BF8U" target="_blank" rel="noopener nofollow">https://youtu.be/hj6WoZVGUBg?si=yveiUlF83oB_BF8U</a></li>
</ul>

</div>
<div id="MySignature" role="contentinfo">
    AlfredZhao©版权所有「从Oracle起航，领略精彩的IT技术。」
</div>
<div class="clear"></div>

        <div class="clear"></div>
        
</div>
    <ul class="postmetadata">
        <vc:categories-tags blog-app="jyzhao" blog-id="186567" post-id="19003856"></vc:categories-tags>
    </ul>
