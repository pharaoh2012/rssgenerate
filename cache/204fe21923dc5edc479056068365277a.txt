
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/GreenShade/p/18667671" title="发布于 2025-01-13 01:05">
    <span role="heading" aria-level="2">互联网不景气了那就玩玩嵌入式吧，用纯.NET开发并制作一个智能桌面机器人（一）：从.NET IoT入门开始</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="前言">前言</h2>
<p>为什么我会想着制作一个智能桌面机器人呢？自问自答一下，看过我之前文章的小伙伴应该都知道我之前有为稚晖君开源的<a href="https://github.com/peng-zhihui/ElectronBot" target="_blank" rel="noopener nofollow">ElectronBot</a>桌面机器人开发过一个桌面上位机软件叫<a href="https://github.com/maker-community/ElectronBot.DotNet" target="_blank" rel="noopener nofollow">电子脑壳</a>,由于<a href="https://github.com/peng-zhihui/ElectronBot" target="_blank" rel="noopener nofollow">ElectronBot</a>桌面机器人必须连接电脑才能使用，所以限制比较多，网友又对独立版本的桌面机器人呼声比较高，我本人也比较感兴趣，所以就准备动手做一个了。<br>
<img src="https://img2023.cnblogs.com/blog/1690009/202501/1690009-20250113004826073-833806002.png" alt="效果图" loading="lazy"></p>
<p>上图为使用树莓派Zero 2W开发板结合.NET IoT库和两个屏幕实现的机器人，外壳是我使用Fusion 360软件设计制作的。现在是大语言模型的爆发时期，目前只依赖服务端大语言模型就可以实现高阶AI了，所以做出一个配置不高的独立版本的机器人可玩性还是很高的，目前软件部分完善中……</p>
<p>下图是本人做的Fusion360 3D建模展示<br>
<img src="https://img2023.cnblogs.com/blog/1690009/202501/1690009-20250113004852124-1468429237.png" alt="img" loading="lazy"></p>
<h2 id="硬件功能">硬件功能</h2>
<ul>
<li>树莓派Zero 2W一个，完整运行Linux系统，用于运行.NET程序。</li>
<li>2.4寸主屏幕,1.47寸副屏幕，总共两个屏幕。可以分别显示自定义内容。</li>
<li>舵机驱动板子一个，控制两个9克舵机，可以实现头上下旋转和底座左右旋转。</li>
<li>语音板子一个，通过树莓派USB拓展口和和树莓派连接，板子附加喇叭，麦克风，以及一个摄像头。可以实现声音播放，声音录制，和拍照。<br>
<img src="https://img2023.cnblogs.com/blog/1690009/202501/1690009-20250113004906900-665044369.png" alt="raspi" loading="lazy"></li>
</ul>
<h2 id="技术介绍">技术介绍</h2>
<h3 id="树莓派开发板">树莓派开发板</h3>
<p><a href="https://www.raspberrypi.com/" target="_blank" rel="noopener nofollow">树莓派</a>是运行完整Linux系统的卡片电脑，体积小巧，适合DIY各种硬件，搭配上无所不能的.NET技术栈，能够实现各种各样的好玩的功能。</p>
<h3 id="net">.NET</h3>
<p><a href="https://dotnet.microsoft.com/zh-cn/" target="_blank" rel="noopener nofollow">.NET</a> 是免费的、开源的、跨平台的框架，用于构建新式应用和强大的云服务。</p>
<p><img src="https://img2023.cnblogs.com/blog/1690009/202411/1690009-20241126162300305-1617249552.png" alt=".NET" loading="lazy"></p>
<h3 id="net-iot"><a href="https://dotnet.microsoft.com/zh-cn/apps/iot" target="_blank" rel="noopener nofollow">.NET IoT</a></h3>
<p>使用 .NET 为你最喜爱的设备和传感器生成<a href="https://dotnet.microsoft.com/zh-cn/apps/iot" target="_blank" rel="noopener nofollow">物联网 (IoT) </a>应用程序<br>
<img src="https://img2023.cnblogs.com/blog/1690009/202501/1690009-20250113004931435-253342151.png" alt="img" loading="lazy"></p>
<h2 id="开发环境搭建">开发环境搭建</h2>
<h3 id="树莓派系统初始化">树莓派系统初始化</h3>
<ol>
<li>首先电脑下载安装<a href="https://www.raspberrypi.com/software/" target="_blank" rel="noopener nofollow">Raspberry Pi Imager</a>,安装打开软件选择镜像类型，然后准备一个SD卡，通过读卡器连接到电脑上备用。<br>
<img src="https://img2023.cnblogs.com/blog/1690009/202501/1690009-20250113004950109-1692561278.png" alt="img" loading="lazy"></li>
<li>由于我用的是树莓派Zero 2W配置比较低，所以我采用安装的是无图形界面的版本。<br>
<img src="https://img2023.cnblogs.com/blog/1690009/202501/1690009-20250113005004577-624457785.png" alt="img" loading="lazy"></li>
<li>配置镜像网络和ssh配置，点击配置选项按钮，然后进入配置页面，并且记住自己的配置。<br>
<img src="https://img2023.cnblogs.com/blog/1690009/202501/1690009-20250113005014561-673836485.png" alt="img" loading="lazy"><br>
各种配置一定要填好，尤其是用户名要记住。<br>
<img src="https://img2023.cnblogs.com/blog/1690009/202501/1690009-20250113005026554-2028938856.png" alt="img" loading="lazy"></li>
<li>然后开始烧录镜像，当烧录完成之后，将SD卡插到树莓派上，正常情况下树莓派就会自动连上网络，如果不能登录到路由器后台，可以下载可以查看网络上的设备ip的软件，手机端可以下载Fing电脑端也可以下载<a href="https://www.fing.com/" target="_blank" rel="noopener nofollow">Fing</a><br>
<img src="https://img2023.cnblogs.com/blog/1690009/202501/1690009-20250113005800612-73081185.png" alt="img" loading="lazy"><br>
通过断电和上电来判断树莓派的IP用于SSH登录使用。<br>
<img src="https://img2023.cnblogs.com/blog/1690009/202501/1690009-20250113005041253-462051310.png" alt="img" loading="lazy"></li>
<li>下载安装FileZilla用于文件上传，包含程序和.NET离线安装文件。<br>
<img src="https://img2023.cnblogs.com/blog/1690009/202501/1690009-20250113005053908-1879842087.png" alt="img" loading="lazy"><br>
如果SSH能够登录，就可以进行系统操作了，如果大家用国外的源比较卡，建议大家切成国内源，这个大家根据系统版本自行搜索解决这个就不详细说了。</li>
</ol>
<h3 id="net开发环境安装">.NET开发环境安装</h3>
<ol>
<li>首先下载Arm64版本的.NET，我以.NET 8为例，因为.NET 9刚出不久，所以暂时先不使用，大家可以根据需要自己决定安装哪个版本的。<br>
<strong>注意事项：由于微软没有给Arm64 linux制作包源版本，所以需要我们下载压缩包解压安装。</strong><br>
<a href="https://dotnet.microsoft.com/zh-cn/download/dotnet/8.0" target="_blank" rel="noopener nofollow">下载地址:</a><br>
<img src="https://img2023.cnblogs.com/blog/1690009/202501/1690009-20250113005118942-1308170910.png" alt="img" loading="lazy"><br>
下载上传到树莓派家目录。<br>
<img src="https://img2023.cnblogs.com/blog/1690009/202501/1690009-20250113005137269-1916688932.png" alt="img" loading="lazy"></li>
<li>参考官方的脚本<a href="https://learn.microsoft.com/zh-cn/dotnet/core/install/linux-scripted-manual#manual-install" target="_blank" rel="noopener nofollow">安装文档</a>：<br>
通过修改官方的安装脚本给脚本附加执行权限进行执行，脚本内容如下：<br>
<img src="https://img2023.cnblogs.com/blog/1690009/202501/1690009-20250113005148579-814183317.png" alt="img" loading="lazy"><pre><code class="language-bash">DOTNET_FILE=dotnet-sdk-8.0.404-linux-arm64.tar.gz
export DOTNET_ROOT=$(pwd)/.dotnet

mkdir -p "$DOTNET_ROOT" &amp;&amp; tar zxf "$DOTNET_FILE" -C "$DOTNET_ROOT"

export PATH=$PATH:$DOTNET_ROOT:$DOTNET_ROOT/tools
</code></pre>
依次执行下面指令：<pre><code>sudo chmod 777 install.sh

./install.sh
</code></pre>
执行完这些指令之后会在家目录的.dotnet产生对应的框架文件。<br>
这些操作执行完，需要将路径加入到环境变量里，这样就可以全局执行dotnet指令了。<br>
执行下面的指令编辑~/.bashrc<pre><code>sudo nano ~/.bashrc
</code></pre>
在最下面添加图上的内容<pre><code>export DOTNET_ROOT=$HOME/.dotnet
export PATH=$PATH:$DOTNET_ROOT:$DOTNET_ROOT/tools
</code></pre>
<img src="https://img2023.cnblogs.com/blog/1690009/202501/1690009-20250113005217930-1097082738.png" alt="img" loading="lazy"><br>
最好执行sudo reboot指令重启系统。<br>
然后我们就可以执行dotnet指令来查看指令是否正常。<br>
如下图一样就是环境正常了。<br>
<img src="https://img2023.cnblogs.com/blog/1690009/202501/1690009-20250113005231395-485199330.png" alt="img" loading="lazy"></li>
</ol>
<h3 id="运行hello-world程序">运行hello world程序</h3>
<ol>
<li>首先安装<a href="https://visualstudio.microsoft.com/" target="_blank" rel="noopener nofollow">Visual Studio</a>，下载最新的社区版本就行，安装对应的负载，和对应的.NET版本。<br>
<img src="https://img2023.cnblogs.com/blog/1690009/202501/1690009-20250113005246632-479252456.png" alt="img" loading="lazy"></li>
<li>大家可以参考我选择的工作负载，安装启动Visual Studio。<br>
<img src="https://img2023.cnblogs.com/blog/1690009/202501/1690009-20250113005256813-1708019401.png" alt="img" loading="lazy"></li>
<li>创建控制台程序。<br>
<img src="https://img2023.cnblogs.com/blog/1690009/202501/1690009-20250113005307269-1212398550.png" alt="img" loading="lazy"></li>
<li>修改代码内容并且进行发布到目录。<br>
<img src="https://img2023.cnblogs.com/blog/1690009/202501/1690009-20250113005318133-968205422.png" alt="img" loading="lazy"></li>
<li>选择要发布的目录。<br>
<img src="https://img2023.cnblogs.com/blog/1690009/202501/1690009-20250113005348436-1280891960.png" alt="img" loading="lazy"></li>
<li>配置目录点击发布按钮。<br>
<img src="https://img2023.cnblogs.com/blog/1690009/202501/1690009-20250113005359012-512147725.png" alt="img" loading="lazy"></li>
<li>发布完的程序传输到树莓派。<br>
<img src="https://img2023.cnblogs.com/blog/1690009/202501/1690009-20250113005409017-1772767015.png" alt="img" loading="lazy"></li>
<li>进入程序目录，执行dotnet加程序集的名称dotnet ConsoleApp3.dll<br>
<img src="https://img2023.cnblogs.com/blog/1690009/202501/1690009-20250113005420506-2139819542.png" alt="img" loading="lazy"><br>
如果有输出，表示开发环境已经配置完成，就可以愉快的进行程序的开发和调试，具体的屏幕测试，和其他的一些测试我们后面的视频再进行讲解。</li>
</ol>
<h2 id="总结感悟">总结感悟</h2>
<p>这篇文章涉及了大量的图片，以及很细致的讲解，为什么要写这么啰嗦呢？当然是为了让初学者，也就是没接触过.NET的小伙伴也能通过一步步的操作能够上手.NET。</p>
<p>我希望通过这个系列的文章，能够让大家认识一个不一样的.NET,消除大家对.NET的偏见吧。也希望自己通过这个系列的文章记录自己的制作过程。更希望文章能够对大家有一定的帮助和启发。</p>
<h2 id="参考推荐文档项目如下">参考推荐文档项目如下：</h2>
<ul>
<li><a href="https://github.com/maker-community" target="_blank" rel="noopener nofollow">创客社区地址</a></li>
<li><a href="https://github.com/maker-community/ElectronBot.Standalone" target="_blank" rel="noopener nofollow">桌面桌面机器人仓库地址</a></li>
<li><a href="https://dotnet.microsoft.com/zh-cn/" target="_blank" rel="noopener nofollow">.NET官方地址</a></li>
<li><a href="https://learn.microsoft.com/zh-cn/dotnet/core/install/linux-scripted-manual#manual-install" target="_blank" rel="noopener nofollow">.NET脚本安装文档</a></li>
<li><a href="https://dotnet.microsoft.com/zh-cn/apps/iot" target="_blank" rel="noopener nofollow">.NET IoT官方地址</a></li>
<li><a href="https://visualstudio.microsoft.com/" target="_blank" rel="noopener nofollow">Visual Studio下载地址</a></li>
<li><a href="https://www.raspberrypi.com/software/" target="_blank" rel="noopener nofollow">树莓派官方工具地址</a></li>
<li><a href="https://www.filezilla.cn/" target="_blank" rel="noopener nofollow">FileZilla</a></li>
<li><a href="https://github.com/GreenShadeZhang/dotnet-iot-tutorial-code" target="_blank" rel="noopener nofollow">个人调试的.NET IoT例子</a></li>
</ul>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="2.2143797340462963" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-13 01:05">2025-01-13 01:05</span>&nbsp;
<a href="https://www.cnblogs.com/GreenShade">绿荫阿广</a>&nbsp;
阅读(<span id="post_view_count">3570</span>)&nbsp;
评论(<span id="post_comment_count">30</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18667671" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18667671);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18667671', targetLink: 'https://www.cnblogs.com/GreenShade/p/18667671', title: '互联网不景气了那就玩玩嵌入式吧，用纯.NET开发并制作一个智能桌面机器人（一）：从.NET IoT入门开始' })">举报</a>
</div>
        