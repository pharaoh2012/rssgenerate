
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/vivotech/p/18963128" title="发布于 2025-07-03 10:27">
    <span role="heading" aria-level="2">号码生成系统的创新实践：游戏周周乐幸运码设计</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>作者： vivo 互联网服务器团队- Zhang Jing</p>
<blockquote>
<p>本文以游戏周周乐的幸运码为切入点，针对其生成过程中涉及的随机性、唯一性及高并发等特点，设计了一种基于号段+子码的创新架构。该方案不仅在生成速度上表现突出，还显著提升了存储效率，同时降低了扩容成本，为类似的号码生成系统提供了设计上的新思路和启发。</p>
</blockquote>
<p>文章太长？1分钟看图抓住核心观点👇</p>
<p><img alt="图片" loading="lazy" data-src="https://static001.geekbang.org/infoq/6c/6cb66f472b456b58b83d4d2e78eeeec2.gif" class="lazyload"></p>
<h1 id="一业务背景">一、业务背景</h1>
<p>用户可通过完成相关任务获取周周乐幸运码，幸运码的投放规则如下：</p>
<ul>
<li>
<p><strong>基础投放量</strong>：每期100万注唯一无重复的6位数字幸运码</p>
</li>
<li>
<p><strong>动态扩容机制</strong>：参与人数超额时，可实时追加100万注</p>
</li>
</ul>
<h1 id="二幸运码特性">二、幸运码特性</h1>
<p>根据背景介绍，我们可以知道幸运码需要支持如下特性：</p>
<ul>
<li>
<p><strong>随机性</strong>，发给每个用户的幸运码都是随机的，同时每个用户领取的多个幸运码也是随机的。</p>
</li>
<li>
<p><strong>唯一性</strong>，每一组的幸运码中，各幸运码都是唯一的。</p>
</li>
<li>
<p><strong>范围性</strong>，幸运码严格限定在000000到999999区间内。</p>
</li>
<li>
<p><strong>高并发</strong>，幸运码的生成和发放需要支持高并发，能够至少达到300QPS。</p>
</li>
<li>
<p><strong>可追加</strong>，在当期活动非常火爆时，需要可临时追加一组幸运码库存。</p>
</li>
</ul>
<h1 id="三方案选型">三、方案选型</h1>
<p>鉴于幸运码需严格限定在6位数字范围内（000000-999999），传统雪花算法因生成超长ID（64位二进制）且依赖时间戳递增特性，难以直接适配。以下将对比三种方案：实时随机生成模式、预生成库存模式及号段+子码模式，并会根据生成速度、存储效率、扩容成本三个核心指标进行系统性评估，最终选择出最优解决方案。</p>
<h2 id="31-方案一实时随机生成模式">3.1 方案一：实时随机生成模式</h2>
<p><strong>实现逻辑：</strong></p>
<ol>
<li>
<p>生成随机数</p>
</li>
<li>
<p>再查询数据库是否有该随机数</p>
</li>
<li>
<p>若没有则入库，完成幸运码发放</p>
</li>
<li>
<p>若有再重新执行第一步</p>
</li>
</ol>
<p><strong>缺陷分析：</strong></p>
<ul>
<li>
<p>碰撞概率随库存消耗不断上升</p>
</li>
<li>
<p>数据库IO压力随并发量线性增长</p>
</li>
<li>
<p>不满足高并发场景性能要求</p>
</li>
</ul>
<h2 id="32-方案二预生成库存模式">3.2 方案二：预生成库存模式</h2>
<p><strong>实现逻辑：</strong></p>
<p>采用预生成幸运码方式：离线生成100万个幸运码，随机打散，写入数据库，每个幸运码对应一个从1自增的序列号，并使用Redis记录幸运码序列号索引，初始值为1。</p>
<p><strong>发放步骤</strong>如下：</p>
<ol>
<li>
<p>从Redis查询幸运码序列号索引</p>
</li>
<li>
<p>使用该索引查询幸运码，并完成幸运码发放</p>
</li>
<li>
<p>递增Redis的序列号索引，确保序列号索引关联的幸运码是下一个可发放的幸运码</p>
</li>
</ol>
<p><strong>缺陷分析：</strong></p>
<ul>
<li>
<p><strong>存储空间浪费</strong>：未发放号码占用存储</p>
</li>
<li>
<p><strong>扩容效率低下</strong>：追加库存需重新预生成</p>
</li>
</ul>
<h2 id="33-方案三号段子码模式">3.3 方案三：号段+子码模式</h2>
<p>采用号段+子码机制：</p>
<ul>
<li>
<p><strong>号段管理</strong>：将10^6号码划分为1000个号段（号段值：0-999）</p>
</li>
<li>
<p><strong>子码管理</strong>：每个号段维护1000个可用子码（子码值：0-999）</p>
</li>
<li>
<p><strong>生成规则</strong>：幸运码=随机号段*1000+随机子码（示例：129358=129*1000+358）</p>
</li>
</ul>
<p><img alt="图片" loading="lazy" data-src="https://static001.geekbang.org/infoq/26/26da33bc72fb2f9faf6d7bd1d401852c.jpeg" class="lazyload"></p>
<h2 id="34-方案对比">3.4 方案对比</h2>
<p><img alt="图片" loading="lazy" data-src="https://static001.geekbang.org/infoq/f3/f38527d59a8216741d20c163be5d4d3f.jpeg" class="lazyload"></p>
<p>综上，我们综合幸运码生成速度、存储效率、扩容成本等指标，最终采用了号段+子码模式来生成幸运码。</p>
<h1 id="四关键技术实现">四、关键技术实现</h1>
<h2 id="41-号段分层机制">4.1 号段分层机制</h2>
<p>将100万注幸运码划分为1000个号段（每段1000注），每个号段由两部分组成：</p>
<ul>
<li>
<p><strong>号段ID</strong>：号段ID为唯一且不重复的整数，范围介于0到999之间。</p>
</li>
<li>
<p><strong>子码串</strong>：1000位字符串，采用"01"标记使用状态，0表示未使用，1表示已使用，初始全0。</p>
</li>
</ul>
<p>幸运码生成公式：</p>
<p>幸运码 = 号段ID * 1000 + 子码位置</p>
<p>该设计既保留了生成幸运码的随机性（号段ID随机+子码随机），又通过子码的类比特位存储方式提升了存储效率。</p>
<h2 id="42-分布式并发控制">4.2 分布式并发控制</h2>
<h3 id="421-多级缓存策略">4.2.1 多级缓存策略</h3>
<p>Redis存储可用号段集合，若号段的子码使用完，该号段会从Redis集合中剔除，同时本地缓存也会预加载可用号段，确保发码时能更高效地获取候选号段。</p>
<h3 id="422-高效锁抢占策略">4.2.2 高效锁抢占策略</h3>
<p>系统为每个号段分配了分布式锁，当执行发放幸运码时，会从本地缓存随机获取15个候选号段。然后在遍历获取号段时，将等待锁的超时时间设置成30ms，确保号段被占用的情况下能够快速遍历到下一个号段（根据实际场景统计，等待锁的情况很少发生，一般最多遍历到第二个号段即可成功抢占）。一旦成功获得号段的分布式锁后，便可进一步随机获取该号段下的可用子码。</p>
<h3 id="423-动态库存策略">4.2.3 动态库存策略</h3>
<p>要追加库存，只需再创建一组幸运码号段，并写入Redis，后续发放时获取该组的可用号段生成幸运码即可。从性能和存储空间上远优于预生成方式。</p>
<h2 id="43-幸运码发放">4.3 幸运码发放</h2>
<p><strong>发放步骤</strong>：</p>
<ol>
<li>
<p>随机获取至多15个可用号段</p>
</li>
<li>
<p>遍历号段</p>
</li>
<li>
<p>抢占号段的分布式锁</p>
</li>
<li>
<p>若号段的分布式锁抢占成功，则随机获取号段中可用的子码，再根据号段和子码生成幸运码</p>
</li>
<li>
<p>若号段的分布式锁抢占失败，则遍历下一个号段，并重复上述步骤</p>
</li>
</ol>
<p><img alt="图片" loading="lazy" data-src="https://static001.geekbang.org/infoq/f8/f843fc5307d98134b7ca0cf770d1e8e5.png" class="lazyload"></p>
<h1 id="五总结">五、总结</h1>
<p><strong>（1）双重随机保障</strong></p>
<ul>
<li>
<p>一级随机：号段选择随机（0-999）</p>
</li>
<li>
<p>二级随机：子码选择随机（0-999）</p>
</li>
<li>
<p>通过号段随机和子码随机方式确保生成的幸运码完全随机</p>
</li>
</ul>
<p><strong>（2）数据唯一性</strong></p>
<ul>
<li>通过号段唯一和号段内的子码唯一确保生成的幸运码全局唯一</li>
</ul>
<p><strong>（3）弹性扩展能力</strong></p>
<ul>
<li>
<p>扩容耗时仅需秒级别</p>
</li>
<li>
<p>存储空间相比预生成方案节省80%</p>
</li>
</ul>
<p><strong>（4）高性能发放</strong></p>
<ul>
<li>
<p>通过多重缓存及高效号段抢占策略大幅提升幸运码生成效率</p>
</li>
<li>
<p>实测QPS&gt;300，平均响应时间&lt;15ms</p>
</li>
</ul>
<p>本设计方案通过创新的号段+子码管理机制，在保证号码随机性和唯一性的同时，实现了高并发场景下的稳定服务能力，为类似号码生成系统的设计提供了可复用的架构范式。</p>

</div>
<div id="MySignature" role="contentinfo">
    分享 vivo 互联网技术干货与沙龙活动，推荐最新行业动态与热门会议。
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-07-03 10:27">2025-07-03 10:27</span>&nbsp;
<a href="https://www.cnblogs.com/vivotech">vivo互联网技术</a>&nbsp;
阅读(<span id="post_view_count">148</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18963128);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18963128', targetLink: 'https://www.cnblogs.com/vivotech/p/18963128', title: '号码生成系统的创新实践：游戏周周乐幸运码设计' })">举报</a>
</div>
        