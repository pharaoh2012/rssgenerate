
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/smartloli/p/18801374" title="发布于 2025-03-31 00:51">
    <span role="heading" aria-level="2">如何使用 OpenAI Agents SDK 构建 MCP</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h1>1.概述</h1>
<p>OpenAI Agents SDK 现已支持 MCP（模型上下文协议），这是 AI 互操作性的重大变革。这使开发人员能够高效地将 AI 模型连接到外部工具和数据源。本篇博客，笔者将指导使用 OpenAI Agents SDK 构建 MCP 服务器，以增强你的 AI 应用程序。</p>
<h1>2.内容</h1>
<h2>2.1&nbsp;什么是 MCP</h2>
<p>MCP 服务器（Model Context Protocol Server）是<strong>模型上下文协议（MCP）</strong>的重要组成部分，它是一种专门设计的程序，使 AI 模型（如 Anthropic 的模型）能够安全、标准化地访问和使用外部数据与工具。自 2024 年 11 月推出以来，MCP 服务器扩展了 AI 的能力，使其不仅能生成文本，还能直接与计算机文件、数据库，甚至 GitHub 等服务进行交互。</p>
<p>可以将 MCP 服务器比作 AI 访问外部资源的“接口”，类似于 USB 端口让计算机与不同设备连接。例如，当用户请求 AI 总结一份文档时，AI 可以通过 MCP 服务器直接提取系统中的文件进行处理。同样，如果需要创建 GitHub 问题或查询数据库，MCP 服务器也能提供支持。</p>
<p>MCP 服务器的核心功能包括：</p>
<ul>
<li>数据访问：让 AI 直接读取本地文件、数据库记录等信息。</li>
<li>工具调用：支持 AI 执行 API 调用，与外部系统交互。</li>
<li>交互提示：提供操作指南，优化 AI 在编程、研究、项目管理等任务中的表现。</li>
</ul>
<p>借助 MCP 服务器，AI 的应用场景进一步拓展，使其能够更高效地完成复杂任务，提升生产力和用户体验。</p>
<p><img src="https://img2024.cnblogs.com/blog/666745/202503/666745-20250330233848524-337869998.png" alt="" loading="lazy"></p>
<h2>&nbsp;2.2&nbsp;MCP 服务器如何工作</h2>
<p>MCP 采用客户端-服务器架构运行，确保 AI 高效、安全地访问和利用外部数据。其结构由以下核心组件组成：</p>
<ul>
<li>MCP 主机：希望利用外部数据的应用程序，如 Claude Desktop、IDE 或 AI 辅助工具。</li>
<li>MCP 客户端：负责与 MCP 服务器建立安全、稳定的连接，充当通信桥梁。</li>
<li>MCP 服务器：轻量级程序，通过标准化的模型上下文协议（MCP）公开特定功能，使 AI 能够访问外部资源并执行任务。</li>
</ul>
<p>该架构支持主机通过客户端连接多个 MCP 服务器，每个服务器都提供独立的功能，实现模块化、灵活的集成。MCP 服务器主要提供以下三种类型的公开接口：</p>
<ul>
<li>资源访问：允许 AI 加载数据源，如本地文件、文档或数据库查询。例如，文件系统服务器可让 AI 访问和读取计算机上的文档。</li>
<li>工具调用：支持 AI 执行特定操作，如 API 调用或命令执行。例如，GitHub 服务器可让 AI 进行代码库管理，包括创建 issue、提交代码等。</li>
<li>交互提示：提供可重复使用的 LLM 交互模板，指导 AI 在特定场景下的行为，提升任务执行的准确性与效率。</li>
</ul>
<p><img src="https://img2024.cnblogs.com/blog/666745/202503/666745-20250331002120982-1064554069.png" alt="" loading="lazy"></p>
<h2>&nbsp;2.3&nbsp;MCP 实际上能做什么？</h2>
<p><strong>1.核心特性</strong></p>
<ul>
<li>灵活部署：支持本地或远程运行，适应不同应用场景。</li>
<li>安全优先：采用严格的权限管理，确保连接安全，防止数据泄露。</li>
<li>独立资源管理：每个服务器控制自身的数据和工具，防止越权访问。</li>
</ul>
<p><strong>2.技术架构</strong><br>MCP 服务器通过 JSON-RPC 端点 公开功能，允许客户端查询和调用可用的资源、工具和提示。</p>
<p>例如：</p>
<ul>
<li>资源访问：“readFile” 方法可返回指定文件内容，使 AI 能够直接读取本地或远程文档。</li>
<li>工具调用：“createIssue” 方法支持与 GitHub API 交互，自动创建 Issue 或管理存储库。</li>
<li>动态交互：支持服务器发起的递归与动态 AI 交互，例如基于任务自动调整操作流程，提高 AI 代理的自主性。</li>
</ul>
<p>这种标准化协议不仅提升了 AI 在数据处理、自动化工作流等场景的能力，还保证了高度的安全性与可控性，使其成为 AI 生态中的关键组件。</p>
<h2>2.4&nbsp;MCP 服务器和 API 之间有什么区别？</h2>
<p><img src="https://img2024.cnblogs.com/blog/666745/202503/666745-20250331002334602-1097037162.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p>MCP 服务器与传统 API 都能让软件与外部服务交互，但它们在 AI 环境 中的用途和运作方式存在显著差异：</p>
<p><strong>1. 适用场景</strong></p>
<ul>
<li>传统 API：作为通用通信接口，主要用于让软件访问外部服务，例如 AI 通过 API 查询数据库或获取实时数据。</li>
<li>MCP 服务器：专门为 AI 设计，提供标准化的上下文信息，包括数据、工具和交互提示，使 AI 能更高效地理解和利用外部资源。</li>
</ul>
<p><strong>2. 交互方式</strong></p>
<ul>
<li>传统 API：AI 需要知道 API 的调用方式、参数格式，并解析响应数据，再将其整合到上下文中。</li>
<li>MCP 服务器：直接处理数据源或工具交互，并将结果以 AI 友好的方式呈现，屏蔽底层数据格式的复杂性，让 AI 无需额外解析即可使用。</li>
</ul>
<p><strong>3. 标准化与扩展性</strong></p>
<ul>
<li>传统 API：不同服务的 API 可能采用不同的协议（如 REST、GraphQL），需要针对每个 API 进行定制集成。</li>
<li>MCP 服务器：采用标准化协议，支持即插即用，可无缝集成到各种 AI 应用中，无需针对每个服务单独适配。</li>
</ul>
<p><strong>4. 安全性</strong></p>
<ul>
<li>传统 API：通常依赖外部身份验证（如 OAuth、API Key），安全性取决于具体实现。</li>
<li>MCP 服务器：内置身份验证和访问控制，专门优化 AI 访问权限管理，确保数据安全。</li>
</ul>
<p><strong>5.示例对比</strong><br>在传统 API 方案中，AI 想获取天气数据需要：</p>
<ul>
<li>发送 REST API 请求。</li>
<li>解析 JSON 响应。</li>
<li>提取温度、湿度等信息，并整合到上下文中。</li>
</ul>
<p>使用 MCP 服务器，AI 只需调用 get_weather 工具，服务器会直接返回格式化的天气信息，简化流程，提高效率。</p>
<h1>3.OpenAI Agents SDK</h1>
<p>OpenAI Agents SDK&nbsp; 是一个 Python 库，旨在简化由 OpenAI 语言模型支持的 AI 代理的开发。它为开发人员提供了创建特定于任务的代理、集成外部功能、管理代理间任务委托、执行输入/输出验证和监控执行流程的工具。</p>
<p>OpenAI Agents SDK 提供了一个结构化的框架，用于构建多代理系统，其中每个代理都经过定制以执行特定任务。这些代理可以与用户交互，通过集成工具执行操作，并通过将任务传递给其他代理进行协作。SDK 的关键组件包括：</p>
<ul>
<li>代理：配置了特定指令和角色的语言模型实例。</li>
<li>工具：扩展代理功能的功能或服务（例如，网络搜索，自定义 Python 代码）。</li>
<li>交接：使代理能够无缝地将任务委派给其他代理的机制。</li>
<li>护栏：验证层，确保输入和输出符合定义的标准。</li>
<li>跟踪：用于调试和性能分析的执行日志。</li>
</ul>
<h2>3.1&nbsp;安装和配置</h2>
<p>正确设置对于有效使用 OpenAI Agents SDK 至关重要。介绍先决条件、环境设置、安装和验证。</p>
<ul>
<li>Python 3.8+：使用 验证你的 Python 版本python --version。如果需要，请从<a href="https://www.python.org/downloads/" target="_blank" rel="noopener nofollow">python.org</a>安装。</li>
</ul>
<p><img src="https://img2024.cnblogs.com/blog/666745/202503/666745-20250331002946082-344821320.png" alt="" loading="lazy"></p>
<ul>
<li>OpenAI API 密钥：从你的帐户设置下的platform.openai.com获取密钥。此密钥用于验证对 OpenAI 服务器的请求。</li>
</ul>
<h3>3.1.1&nbsp;设置虚拟环境</h3>
<p>虚拟环境隔离了项目依赖关系，防止与其他 Python 项目发生冲突。要创建并激活虚拟环境，请执行以下操作：</p>
<p><strong>Linux / macOS：</strong></p>
<div class="cnblogs_code">
<pre>python -<span style="color: rgba(0, 0, 0, 1)">m venv agents_env
source agents_env</span>/bin/activate</pre>
</div>
<p><strong>Windows：</strong></p>
<div class="cnblogs_code">
<pre>python -<span style="color: rgba(0, 0, 0, 1)">m venv agents_env
agents_env\Scripts\activate</span></pre>
</div>
<p>一旦激活，你的终端提示符应该反映环境（例如(agents_env)）。此步骤是 Python 开发的最佳实践，可确保工作空间干净。</p>
<h3>3.1.2&nbsp;安装 SDK</h3>
<p>在虚拟环境处于活动状态的情况下，使用 pip 安装 SDK：</p>
<div class="cnblogs_code">
<pre>pip install openai-agents</pre>
</div>
<p>此命令从 PyPI 获取最新版本的 SDK 及其依赖项。要确认安装，请运行：</p>
<div class="cnblogs_code">
<pre>pip show openai-agents-python</pre>
</div>
<p>这将显示元数据，包括版本号，确认包已安装。</p>
<h3>3.1.3&nbsp;配置 API 密钥</h3>
<p>SDK 需要 OpenAI API 密钥才能运行。将其设置为环境变量以避免将其嵌入到代码中，从而增强安全性：</p>
<p><strong>Linux / macOS：</strong></p>
<div class="cnblogs_code">
<pre>export OPENAI_API_KEY=<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">your-api-key</span><span style="color: rgba(128, 0, 0, 1)">'</span></pre>
</div>
<p><strong>Windows：</strong></p>
<div class="cnblogs_code">
<pre>set OPENAI_API_KEY=<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">your-api-key</span><span style="color: rgba(128, 0, 0, 1)">'</span></pre>
</div>
<p>要使其在会话间持久化，请将命令添加到 shell 配置文件中（例如，.bashrc在.zshrcUnix 系统上）。或者，你可以在 Python 中以编程方式设置它，比如：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> os
os.environ[</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">OPENAI_API_KEY</span><span style="color: rgba(128, 0, 0, 1)">"</span>] = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">your-api-key</span><span style="color: rgba(128, 0, 0, 1)">"</span></pre>
</div>
<h3>3.1.4&nbsp;验证安装</h3>
<p>使用最小代理测试设置以确保一切正常：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">from</span> agents <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> Agent, Runner

agent </span>= Agent(name=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">TestAgent</span><span style="color: rgba(128, 0, 0, 1)">"</span>, instructions=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Return 'Setup successful'</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
result </span>= Runner.run_sync(agent, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Run test</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 0, 255, 1)">print</span>(result.final_output)  <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> Expected output: "Setup successful"</span></pre>
</div>
<p>如果显示“安装成功”，则表示您的安装已正常运行。常见问题包括：</p>
<ul>
<li>无效的 API 密钥：仔细检查密钥并确保没有多余的空格或拼写错误。</li>
<li>网络错误：验证你的互联网连接和 OpenAI 的服务器状态。</li>
</ul>
<h2>3.2 创建代理</h2>
<p>代理是 SDK 的基本构建块，每个代理都由独特的角色和行为定义。</p>
<h3>3.2.1 代理初始化</h3>
<p>该类Agent用于实例化代理。关键参数包括：</p>
<ul>
<li>name：字符串标识符（例如“MathAgent”）。</li>
<li>instructions：指定代理目的的字符串（例如“解决数学问题”）。</li>
<li>model：要使用的 OpenAI 模型（默认值gpt-4）。</li>
<li>temperature：0 到 1 之间的浮点数，控制输出随机​​性（默认值：0.7）。</li>
</ul>
<h3>3.2.2&nbsp;基本代理</h3>
<p>这是一个简单的算术代理：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">from</span> agents <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> Agent, Runner

agent </span>=<span style="color: rgba(0, 0, 0, 1)"> Agent(
    name</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">MathAgent</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
    instructions</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Solve arithmetic expressions.</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
)
result </span>= Runner.run_sync(agent, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Calculate 10 * 2</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 0, 255, 1)">print</span>(result.final_output)  <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> Output: "20"</span></pre>
</div>
<p>该Runner.run_sync方法同步执行代理，返回带有final_output属性的结果对象。</p>
<h2>3.3&nbsp;高级配置</h2>
<p>通过调整参数来定制满足特定需求的代理：</p>
<div class="cnblogs_code">
<pre>agent =<span style="color: rgba(0, 0, 0, 1)"> Agent(
    name</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">CreativeWriter</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
    instructions</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Write a short story based on the prompt.</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
    model</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">gpt-4</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
    temperature</span>=0.9<span style="color: rgba(0, 0, 0, 1)">
)
result </span>= Runner.run_sync(agent, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">A robot in a distant galaxy</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 0, 255, 1)">print</span>(result.final_output)  <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> Output: A creative story</span></pre>
</div>
<ul>
<li>模型：gpt-4提供更优越的推理能力，同时gpt-3.5-turbo对于更简单的任务来说更快、更便宜。</li>
<li>温度：较低的值（例如 0.2）产生可预测的输出；较高的值（例如 0.9）可增强创造力。</li>
</ul>
<h1>4.使用 OpenAI MCP 集成的步骤</h1>
<p>使用 OpenAI Agents SDK 构建 MCP 服务器的先决条件，在开始之前，请确保您已：</p>
<ul>
<li>你的系统上已安装 Python 3.8 或更高版本</li>
<li>通过 pip 安装 OpenAI Agents SDK：pip install openai-agents</li>
<li>Node.js 设置为运行 MCP 服务器命令，例如npx某些示例</li>
<li>带有初始化虚拟环境的项目目录，用于依赖管理</li>
<li>对 Python 中的异步编程有基本的了解，因为 SDK 使用 async/await</li>
</ul>
<h2>4.1&nbsp;为 MCP 服务器设置开发环境</h2>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> Create a new directory for your project</span>
mkdir mcp-agent-project &amp;&amp; cd mcp-agent-<span style="color: rgba(0, 0, 0, 1)">project

</span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> Initialize a Python virtual environment</span>
python -m venv venv &amp;&amp; source venv/bin/<span style="color: rgba(0, 0, 0, 1)">activate

</span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> Install the required dependencies</span>
pip install openai-agents pyyaml</pre>
</div>
<p>设置一个配置文件，用于mcp_agent.config.yaml定义 MCP 服务器。此配置指向用于访问本地文件的文件系统 MCP 服务器。</p>
<h2>4.2&nbsp;了解 OpenAI Agents SDK 中的 MCP 服务器类型</h2>
<p>根据 MCP 规范定义，MCP 服务器有两种类型：</p>
<ul>
<li>stdio 服务器：作为应用程序的子进程在本地运行</li>
<li>HTTP SSE 服务器：远程操作并通过 URL 连接</li>
</ul>
<p>OpenAI Agents SDK 提供了两个类来处理这些服务器：</p>
<ul>
<li>MCPServerStdio：对于基于本地子进程的服务器</li>
<li>MCPServerSse：适用于远程 HTTP over SSE 服务器</li>
</ul>
<p>根据应用程序的架构和延迟要求选择服务器类型。Stdio 服务器是本地开发的理想选择，而 SSE 服务器更适合分布式系统。</p>
<h2>4.3&nbsp;将 MCP 服务器连接到 OpenAI 代理</h2>
<p>从 OpenAI Agents SDK 导入必要的类并定义您的 MCP 服务器：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">from</span> openai_agents <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> Agent, MCPServerStdio

</span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> Define path to your sample files</span>
samples_dir = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">/path/to/your/files</span><span style="color: rgba(128, 0, 0, 1)">"</span>

<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> Use async context manager to initialize the server</span>
<span style="color: rgba(0, 0, 0, 1)">async with MCPServerStdio(
    params</span>=<span style="color: rgba(0, 0, 0, 1)">{
        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">command</span><span style="color: rgba(128, 0, 0, 1)">"</span>: <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">npx</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">args</span><span style="color: rgba(128, 0, 0, 1)">"</span>: [<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">-y</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">@modelcontextprotocol/server-filesystem</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, samples_dir],
    }
) as server:
    </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> List tools provided by the MCP server</span>
    tools =<span style="color: rgba(0, 0, 0, 1)"> await server.list_tools()

    </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> Create an agent that uses the MCP server</span>
    agent =<span style="color: rgba(0, 0, 0, 1)"> Agent(
        name</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Assistant</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
        instructions</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Use the filesystem tools to help the user with their tasks.</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
        mcp_servers</span>=<span style="color: rgba(0, 0, 0, 1)">[server]
    )

    </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> Run the agent</span>
    result = await agent.run(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">List the files in the directory.</span><span style="color: rgba(128, 0, 0, 1)">"</span>)</pre>
</div>
<p>此设置允许代理在执行期间动态使用文件系统工具。</p>
<h2>4.4&nbsp;使用工具缓存优化性能</h2>
<p>list_tools()每次代理运行时，MCP 服务器都会调用，这可能会导致延迟，尤其是使用远程服务器时。为了减少这种开销，你可以启用工具缓存：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> Enable caching when initializing the server</span>
<span style="color: rgba(0, 0, 0, 1)">async with MCPServerStdio(
    params</span>=<span style="color: rgba(0, 0, 0, 1)">{
        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">command</span><span style="color: rgba(128, 0, 0, 1)">"</span>: <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">npx</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">args</span><span style="color: rgba(128, 0, 0, 1)">"</span>: [<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">-y</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">@modelcontextprotocol/server-filesystem</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, samples_dir],
    },
    cache_tools_list</span>=True  <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> Enable caching</span>
<span style="color: rgba(0, 0, 0, 1)">) as server:
    </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> The tools list will be cached after the first call</span>
    tools = await server.list_tools()</pre>
</div>
<p>缓存的重要注意事项：</p>
<ul>
<li>仅当您确定工具列表在运行时不会改变时才使用缓存</li>
<li>如果工具需要更新，请使缓存无效：await server.invalidate_tools_cache()</li>
<li>缓存适用于 stdio 和 SSE 服务器，可为远程服务器带来更大的性能优势</li>
</ul>
<h2>4.5&nbsp;实现 MCP 服务器与代理工作流程的集成</h2>
<p>要将 MCP 服务器与你的代理完全集成：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">from</span> openai_agents <span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> Agent, MCPServerStdio, MCPServerSse

async </span><span style="color: rgba(0, 0, 255, 1)">def</span><span style="color: rgba(0, 0, 0, 1)"> run_agent_with_mcp_servers():
    </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> Initialize local stdio MCP server</span>
    local_server =<span style="color: rgba(0, 0, 0, 1)"> MCPServerStdio(
        params</span>=<span style="color: rgba(0, 0, 0, 1)">{
            </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">command</span><span style="color: rgba(128, 0, 0, 1)">"</span>: <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">npx</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
            </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">args</span><span style="color: rgba(128, 0, 0, 1)">"</span>: [<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">-y</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">@modelcontextprotocol/server-filesystem</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">./local_files</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">],
        },
        cache_tools_list</span>=<span style="color: rgba(0, 0, 0, 1)">True
    )

    </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> Initialize remote SSE MCP server (if needed)</span>
    remote_server =<span style="color: rgba(0, 0, 0, 1)"> MCPServerSse(
        url</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">&lt;https://your-remote-mcp-server.com/stream&gt;</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
        cache_tools_list</span>=<span style="color: rgba(0, 0, 0, 1)">True
    )

    async with local_server, remote_server:
        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> Create agent with both servers</span>
        agent =<span style="color: rgba(0, 0, 0, 1)"> Agent(
            name</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">MultiToolAgent</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
            instructions</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Use the available tools to accomplish tasks.</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
            mcp_servers</span>=<span style="color: rgba(0, 0, 0, 1)">[local_server, remote_server]
        )

        </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> Run the agent</span>
        result = await agent.run(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Complete the requested task using appropriate tools.</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> result</pre>
</div>
<p>这种方法使您的代理可以通过标准化 MCP 接口访问本地和远程工具。</p>
<h2>4.6&nbsp;调试和监控你的 MCP 服务器</h2>
<p>有效的调试和监控策略包括：</p>
<ul>
<li>检查 MCP 服务器日志中是否存在工具执行过程中的错误</li>
<li>使用 OpenAI Agents SDK 的跟踪仪表板监控工具调用</li>
<li>测试诸如无效工具名称或服务器停机等边缘情况以确保稳健性</li>
<li>监控使用远程 SSE 服务器时的延迟，并在必要时通过缓存进行优化</li>
<li>利用 SDK 的内置跟踪功能，可以自动捕获：</li>
</ul>
<p>&nbsp;</p>
<ul>
<li style="list-style-type: none">
<ul>
<li>调用 MCP 服务器列出工具</li>
<li>MCP 函数调用相关信息</li>
</ul>
</li>
</ul>
<p>&nbsp;</p>
<h1>5.总结</h1>
<p>使用 OpenAI Agents SDK 构建 MCP 服务器为使用外部工具和数据源增强 AI 代理开辟了新的可能性。标准化的 MCP 接口使跨不同环境的集成更简单、更可靠。</p>
<p>本篇博客作为参考，你可以创建功能强大的代理，通过模型上下文协议利用本地和远程资源。随着 MCP 生态系统的不断发展，您的代理将能够访问不断扩展的工具和功能。</p>
<h1>6.结束语</h1>
<p>这篇博客就和大家分享到这里，如果大家在研究学习的过程当中有什么问题，可以加群进行讨论或发送邮件给我，我会尽我所能为您解答，与君共勉！</p>
<p>另外，博主出新书了《<strong><a href="https://item.jd.com/14699434.html" rel="noopener nofollow" target="_blank">深入理解Hive</a></strong>》、同时已出版的《<strong><a href="https://item.jd.com/12455361.html" rel="noopener nofollow" target="_blank">Kafka并不难学</a></strong>》和《<strong><a href="https://item.jd.com/12371763.html" rel="noopener nofollow" target="_blank">Hadoop大数据挖掘从入门到进阶实战</a></strong>》也可以和新书配套使用，喜欢的朋友或同学， 可以<span style="color: rgba(255, 0, 0, 1)"><strong>在公告栏那里点击购买链接购买博主的书</strong></span>进行学习，在此感谢大家的支持。关注下面公众号，根据提示，可免费获取书籍的教学视频。</p>
<p>&nbsp;</p>
</div>
<div id="MySignature" role="contentinfo">
    <div>
<b class="b1"></b><b class="b2 d1"></b><b class="b3 d1"></b><b class="b4 d1"></b>
<div class="b d1 k">  
联系方式：
<br>
邮箱：smartloli.org@gmail.com
<br>
<strong style="color: green">QQ群（Hive与AI实战【新群】）：935396818</strong>
<br>
QQ群（Hadoop - 交流社区1）：424769183
<br>
QQ群（Kafka并不难学）：825943084
<br>
温馨提示：请大家加群的时候写上加群理由（姓名＋公司/学校），方便管理员审核，谢谢！
<br>
<h3>热爱生活，享受编程，与君共勉！</h3>  
</div>
<b class="b4b d1"></b><b class="b3b d1"></b><b class="b2b d1"></b><b class="b1b"></b>
</div>
<br>
<div>
<b class="b1"></b><b class="b2 d1"></b><b class="b3 d1"></b><b class="b4 d1"></b>
<div class="b d1 k">
<h3>公众号：</h3>
<h3><img style="width: 8%; margin-left: 10px" src="https://www.cnblogs.com/images/cnblogs_com/smartloli/1324636/t_qr.png"></h3>
</div>
<b class="b4b d1"></b><b class="b3b d1"></b><b class="b2b d1"></b><b class="b1b"></b>
</div>
<br>
<div>
<b class="b1"></b><b class="b2 d1"></b><b class="b3 d1"></b><b class="b4 d1"></b>
<div class="b d1 k">
<h3>作者：哥不是小萝莉 ［<a style="color: green" href="http://www.kafka-eagle.org/" target="_blank">关于我</a>］［<a style="color: green" href="http://www.cnblogs.com/smartloli/p/4241701.html" target="_blank">犒赏</a>］</h3>
<h3>出处：<a style="color: green" href="http://www.cnblogs.com/smartloli/" target="_blank">http://www.cnblogs.com/smartloli/</a></h3>
<h3>转载请注明出处，谢谢合作！</h3>
</div>
<b class="b4b d1"></b><b class="b3b d1"></b><b class="b2b d1"></b><b class="b1b"></b>
</div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.22332590216087964" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-31 00:52">2025-03-31 00:51</span>&nbsp;
<a href="https://www.cnblogs.com/smartloli">哥不是小萝莉</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18801374" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18801374);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18801374', targetLink: 'https://www.cnblogs.com/smartloli/p/18801374', title: '如何使用 OpenAI Agents SDK 构建 MCP' })">举报</a>
</div>
        