
        <div class="postTitle">
            <h1><a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/chenyishi/p/18757021" title="发布于 2025-03-07 10:04">
    <span role="heading" aria-level="2">非容器环境中使用Selenium，提升Chrome与ChromeDiver兼容性</span>
    

</a>
</h1>
        </div>
        <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h4>背景</h4>
<p>在 Windows 环境下使用 Selenium 时，Chrome 浏览器版本与 ChromeDriver 版本的兼容性问题是一个常见的困扰。</p>
<p>由于 Chrome 频繁更新，而 ChromeDriver 需要与特定版本的 Chrome 精确匹配，导致 Selenium 代码可能会因版本不匹配而无法正常运行。</p>
<p>在非容器环境中，直接使用系统安装的 Chrome 可能会引发问题，比如自动更新导致版本不匹配。</p>
<p>因此，我们推荐的做法是下载 Chrome 的指定版本，并将其与匹配的 ChromeDriver 版本一起放入项目的发布目录，确保 Selenium 运行时始终使用兼容的版本。</p>
<h4>解决方案</h4>
<h4>下载兼容版本的 Chrome 和 ChromeDriver</h4>
<p>首先，访问 ChromeDriver 官方文档中的<a href="https://developer.chrome.google.cn/docs/chromedriver/downloads/version-selection?hl=zh-cn" target="_blank" rel="noopener nofollow">版本选择指南</a>，找到与你的 Chrome 版本兼容的 ChromeDriver。</p>
<p>然后，下载对应版本的 Chrome 和 ChromeDriver，并将它们解压到项目的 <code>chrome-win64</code> 目录中。</p>
<p><img src="https://img2024.cnblogs.com/blog/1033233/202503/1033233-20250307095340422-714935999.png" alt="" width="681" height="364" loading="lazy"></p>
<h4>将 Chrome 和 ChromeDriver 包含到发布目录</h4>
<p>在项目的 <code>.csproj</code> 文件中，添加以下配置，以确保 <code>chrome-win64</code> 目录在发布时被包含到输出目录：</p>
<pre><code class="language-xml">&lt;ItemGroup&gt;
    &lt;None Update="chrome-win64\**"&gt;
        &lt;CopyToOutputDirectory&gt;PreserveNewest&lt;/CopyToOutputDirectory&gt;
    &lt;/None&gt;
&lt;/ItemGroup&gt;
</code></pre>
<p>这样，在 <code>dotnet publish</code> 之后，<code>chrome-win64</code> 目录及其内容都会被复制到发布目录，确保部署后仍能找到 Chrome 和 ChromeDriver。</p>
<h4>在代码中指定 Chrome 和 ChromeDriver 的路径</h4>
<p>在 C# 代码中，使用 <code>ChromeOptions</code> 显式指定 Chrome 的二进制文件路径，并使用 <code>ChromeDriverService</code> 指定 ChromeDriver 的路径：</p>
<pre><code class="language-csharp">using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using System;
using System.IO;

class Program
{
    static void Main()
    {
        var options = new ChromeOptions();
        options.BinaryLocation = Path.Combine(AppContext.BaseDirectory, "chrome-win64", "chrome.exe");
        
        var chromeService = ChromeDriverService.CreateDefaultService(
            Path.Combine(AppContext.BaseDirectory, "chrome-win64"), "chromedriver.exe"
        );
        
        var driver = new ChromeDriver(chromeService, options);
        
        driver.Navigate().GoToUrl("https://www.example.com");
        Console.WriteLine(driver.Title);
        
        driver.Quit();
    }
}
</code></pre>
<h4>运行与调试</h4>
<p>执行程序时，Selenium 会使用 <code>chrome-win64</code> 目录中的 Chrome 及 ChromeDriver，避免了系统 Chrome 版本更新导致的不兼容问题。</p>
<p>如果需要更新 Chrome，可以手动下载新的 Chrome 便携版和对应的 ChromeDriver，并替换 <code>chrome-win64</code> 目录中的文件。</p>
<h4>总结</h4>
<p>在 Windows 非容器环境中使用 Selenium 时，通过手动下载 Chrome 和 ChromeDriver 并将其包含到项目的发布目录，可以有效避免版本兼容性问题。</p>
<p>这种方法确保了 Selenium 运行时始终使用正确的 Chrome 版本，提高了代码的稳定性和可维护性。</p>
</div>
<div class="clear"></div>

        <div class="postDesc">posted on 
<span id="post-date" data-last-update-days="10.038086758219908" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-07 10:04">2025-03-07 10:04</span>&nbsp;
<a href="https://www.cnblogs.com/chenyishi">chester·chen</a>&nbsp;
阅读(<span id="post_view_count">281</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18757021" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18757021);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18757021', targetLink: 'https://www.cnblogs.com/chenyishi/p/18757021', title: '非容器环境中使用Selenium，提升Chrome与ChromeDiver兼容性' })">举报</a>
</div>
    