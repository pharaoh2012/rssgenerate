
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/lymblog/p/18933193" title="发布于 2025-06-17 16:35">
    <span role="heading" aria-level="2">AEM6.5集成Redis详细步骤(附代码)</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h3 class="header-OdWb_u auto-hide-last-sibling-br">一、环境准备</h3>
<ol class="auto-hide-last-sibling-br">
<li>
<div class="auto-hide-last-sibling-br paragraph-Oc488D paragraph-element br-paragraph-space">
<h4>Redis 安装</h4>
<div class="cnblogs_code">
<pre># Ubuntu/<span style="color: rgba(0, 0, 0, 1)">Debian系统
</span><span style="color: rgba(0, 0, 255, 1)">sudo</span><span style="color: rgba(0, 0, 0, 1)"> apt update
</span><span style="color: rgba(0, 0, 255, 1)">sudo</span> apt <span style="color: rgba(0, 0, 255, 1)">install</span> redis-<span style="color: rgba(0, 0, 0, 1)">server

# 启动Redis
</span><span style="color: rgba(0, 0, 255, 1)">sudo</span> systemctl start redis-<span style="color: rgba(0, 0, 0, 1)">server

# 验证运行状态
</span><span style="color: rgba(0, 0, 255, 1)">sudo</span> systemctl status redis-server</pre>
</div>
<p>&nbsp;</p>
</div>
</li>
</ol>
<h4>&nbsp;　　2.配置 Redis 远程访问</h4>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)"># 编辑配置文件
</span><span style="color: rgba(0, 0, 255, 1)">sudo</span> nano /etc/redis/<span style="color: rgba(0, 0, 0, 1)">redis.conf

# 找到bind </span><span style="color: rgba(128, 0, 128, 1)">127.0</span>.<span style="color: rgba(128, 0, 128, 1)">0.1</span><span style="color: rgba(0, 0, 0, 1)"> ::1并修改为(生产环境建议设置具体IP)
bind </span><span style="color: rgba(128, 0, 128, 1)">0.0</span>.<span style="color: rgba(128, 0, 128, 1)">0.0</span><span style="color: rgba(0, 0, 0, 1)">

# 启用密码认证(推荐)
requirepass your_redis_password

# 重启Redis
</span><span style="color: rgba(0, 0, 255, 1)">sudo</span> systemctl restart redis-server</pre>
</div>
<p>&nbsp;</p>
<h3 class="header-OdWb_u auto-hide-last-sibling-br">二、AEM 端配置</h3>
<h4 class="header-OdWb_u auto-hide-last-sibling-br">　　1.添加 Redis 客户端依赖</h4>
<p class="header-OdWb_u auto-hide-last-sibling-br">　　在 AEM 项目的<code>pom.xml</code>中添加：</p>
<div class="cnblogs_code">
<pre>&lt;dependency&gt;
    &lt;groupId&gt;redis.clients&lt;/groupId&gt;
    &lt;artifactId&gt;jedis&lt;/artifactId&gt;
    &lt;version&gt;4.4.3&lt;/version&gt; &lt;!-- 最新稳定版 --&gt;
&lt;/dependency&gt;</pre>
</div>
<h4>　　2.创建 Redis 连接工厂</h4>
<div class="cnblogs_code">
<pre>import<span> redis.clients.jedis.Jedis;
import<span> redis.clients.jedis.JedisPool;
import<span> redis.clients.jedis.JedisPoolConfig;

public class<span> RedisConnectionFactory {
    private static<span> JedisPool jedisPool;
    
    static<span> {
        JedisPoolConfig poolConfig = new<span> JedisPoolConfig();
        poolConfig.setMaxTotal(100<span>);
        poolConfig.setMaxIdle(10<span>);
        poolConfig.setMinIdle(5<span>);
        poolConfig.setTestOnBorrow(true<span>);
        poolConfig.setTestOnReturn(true<span>);
        
        // 替换为实际的Redis服务器信息
        jedisPool = new<span> JedisPool(
            poolConfig,
            "redis-server-ip"<span>,
            6379<span>,
            5000<span>,
            "your_redis_password"<span>
        );
    }
    
    public static<span> Jedis getConnection() {
        return<span> jedisPool.getResource();
    }
    
    public static void<span> closeConnection(Jedis jedis) {
        if (jedis != null<span>) {
            jedis.close();
        }
    }
}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</div>
<h3 class="header-OdWb_u auto-hide-last-sibling-br">三、缓存实现示例</h3>
<ol class="auto-hide-last-sibling-br">
<li>
<h4 class="auto-hide-last-sibling-br paragraph-Oc488D paragraph-element br-paragraph-space">创建 Redis 缓存服务</h4>
</li>
</ol>
<div class="cnblogs_code">
<pre>import<span> org.osgi.service.component.annotations.Component;
import<span> redis.clients.jedis.Jedis;

@Component(service = CacheService.class<span>)
public class RedisCacheServiceImpl implements<span> CacheService {
    
    @Override
    public void<span> put(String key, String value) {
        Jedis jedis = null<span>;
        try<span> {
            jedis =<span> RedisConnectionFactory.getConnection();
            jedis.set(key, value);
        } catch<span> (Exception e) {
            // 记录异常日志
<span>            e.printStackTrace();
        } finally<span> {
            RedisConnectionFactory.closeConnection(jedis);
        }
    }
    
    @Override
    public<span> String get(String key) {
        Jedis jedis = null<span>;
        try<span> {
            jedis =<span> RedisConnectionFactory.getConnection();
            return<span> jedis.get(key);
        } catch<span> (Exception e) {
            // 记录异常日志
<span>            e.printStackTrace();
            return null<span>;
        } finally<span> {
            RedisConnectionFactory.closeConnection(jedis);
        }
    }
    
    @Override
    public void<span> delete(String key) {
        Jedis jedis = null<span>;
        try<span> {
            jedis =<span> RedisConnectionFactory.getConnection();
            jedis.del(key);
        } catch<span> (Exception e) {
            // 记录异常日志
<span>            e.printStackTrace();
        } finally<span> {
            RedisConnectionFactory.closeConnection(jedis);
        }
    }
}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</div>
<h4>　　　　2.缓存服务接口</h4>
<div class="cnblogs_code">
<pre>public interface<span> CacheService {
    void<span> put(String key, String value);
    String get(String key);
    void<span> delete(String key);
}</span></span></span></pre>
</div>
<h3 class="header-OdWb_u auto-hide-last-sibling-br">四、AEM Dispatcher 配置</h3>
<div class="auto-hide-last-sibling-br paragraph-Oc488D paragraph-element br-paragraph-space">在<code>dispatcher.any</code>中添加 Redis 缓存规则：</div>
<div class="auto-hide-last-sibling-br paragraph-Oc488D paragraph-element br-paragraph-space">
<div class="cnblogs_code">
<pre>/<span>vanityurl {
  /docroot "/content"
  /handler "/libs/granite/dispatcher/content/vanity"
  /<span>invalidate {
    /0001 { /type "path" /glob "/content/**" }
<span>  }
  /<span>cache {
    /docroot "/content"
    /<span>rules {
      /0001 { /type "allow" /glob "*" }
<span>    }
    /<span>headers {
      /0001 { /type "allow" /name "Content-Type" }
<span>    }
    /<span>invalidate {
      /0001 { /type "path" /glob "/content/**" }
<span>    }
    /<span>redis {
      /host "redis-server-ip"
      /port 6379
      /password "your_redis_password"
      /timeout 5000<span>
    }
  }
}</span></span></span></span></span></span></span></span></span></span></span></span></pre>
</div>
<h3 class="header-OdWb_u auto-hide-last-sibling-br">五、验证集成</h3>
<ol class="auto-hide-last-sibling-br">
<li>
<h4 class="auto-hide-last-sibling-br paragraph-Oc488D paragraph-element br-paragraph-space">Redis CLI 测试</h4>
</li>
</ol></div>
<div class="cnblogs_code">
<pre>redis-cli -h redis-server-ip -<span>a your_redis_password
ping  # 应返回PONG</span></pre>
</div>
<h4>&nbsp;　　 2.AEM 代码测试</h4>
<div class="cnblogs_code">
<pre>public class<span> CacheTest {
    public static void<span> main(String[] args) {
        CacheService cacheService = new<span> RedisCacheServiceImpl();
        
        // 存入缓存
        cacheService.put("testKey", "Hello Redis!"<span>);
        
        // 获取缓存
        String value = cacheService.get("testKey"<span>);
        System.out.println("缓存值: " +<span> value);
        
        // 删除缓存
        cacheService.delete("testKey"<span>);
    }
}</span></span></span></span></span></span></span></pre>
</div>
<h3 class="header-OdWb_u auto-hide-last-sibling-br">六、生产环境建议</h3>
<ol class="auto-hide-last-sibling-br">
<li>
<div class="auto-hide-last-sibling-br paragraph-Oc488D paragraph-element br-paragraph-space">安全加固</div>
<ul class="auto-hide-last-sibling-br">
<li>禁用 Redis 默认端口 (6379)</li>
<li>配置防火墙限制访问</li>
<li>启用 TLS 加密通信</li>
<li>定期备份 Redis 数据</li>
</ul>
</li>
<li>
<div class="auto-hide-last-sibling-br paragraph-Oc488D paragraph-element br-paragraph-space">性能优化</div>
<ul class="auto-hide-last-sibling-br">
<li>配置 Redis 内存策略</li>
<li>
<div class="cnblogs_code">
<pre><span># 在redis.conf中添加
maxmemory 256mb
maxmemory-policy allkeys-lru</span></pre>
</div>
</li>
<li>使用 Redis 集群提高可用性</li>
</ul>
</li>
</ol>
<p>&nbsp;</p>
<p class="auto-hide-last-sibling-br paragraph-Oc488D paragraph-element br-paragraph-space">　　　　3.监控与告警</p>
<p>&nbsp;　　　　○ 集成 Prometheus+Grafana 监控 Redis 性能</p>
<p>　　　　○ 设置内存使用率、连接数等告警阈值</p>
<div class="auto-hide-last-sibling-br paragraph-Oc488D paragraph-element br-paragraph-space">　　通过以上步骤，你可以成功将 AEM 6.5 与最新版 Redis 集成，实现高性能缓存机制。</div>
<p>&nbsp;</p>
<h2>问题：</h2>
<h3>一、修改绑定地址这一步，需要端口号吗？</h3>
<p>在 Redis 配置中修改绑定地址（<code>bind</code>参数）时，不需要指定端口号。<code>bind</code>参数仅用于配置 Redis 服务器监听的 IP 地址，端口号由单独的<code>port</code>参数控制（默认是 6379）。</p>
<p>详细说明：<br>1.bind 参数作用<br>该参数用于限制 Redis 服务器只接受来自指定 IP 地址的连接请求。例如：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)"># 仅监听本地回环地址（默认值）
bind </span><span style="color: rgba(128, 0, 128, 1)">127.0</span>.<span style="color: rgba(128, 0, 128, 1)">0.1</span><span style="color: rgba(0, 0, 0, 1)">

# 监听所有可用网络接口（不推荐生产环境）
bind </span><span style="color: rgba(128, 0, 128, 1)">0.0</span>.<span style="color: rgba(128, 0, 128, 1)">0.0</span><span style="color: rgba(0, 0, 0, 1)">

# 监听特定IP地址（推荐生产环境）
bind </span><span style="color: rgba(128, 0, 128, 1)">192.168</span>.<span style="color: rgba(128, 0, 128, 1)">1.100</span></pre>
</div>
<p>2。port 参数作用<br>该参数用于指定 Redis 服务器监听的端口号，默认是 6379。例如：</p>
<div class="cnblogs_code">
<pre>port <span style="color: rgba(128, 0, 128, 1)">6379</span></pre>
</div>
<p>3.配置示例<br>如果需要 Redis 监听特定 IP 和端口，应分别设置这两个参数：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)"># 监听特定IP地址
bind </span><span style="color: rgba(128, 0, 128, 1)">192.168</span>.<span style="color: rgba(128, 0, 128, 1)">1.100</span><span style="color: rgba(0, 0, 0, 1)">

# 使用非标准端口
port </span><span style="color: rgba(128, 0, 128, 1)">6380</span></pre>
</div>
<p>注意事项：<br>安全风险：bind 0.0.0.0会使 Redis 暴露在公网，存在安全风险，生产环境建议绑定具体内网 IP。<br>防火墙配置：如果修改了默认端口，需确保防火墙开放相应端口。<br>重启生效：修改配置后需重启 Redis 服务：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">sudo</span> systemctl restart redis-server</pre>
</div>
<p>验证配置：<br>可以通过以下命令检查 Redis 监听的 IP 和端口：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)"># 查看Redis进程监听情况
</span><span style="color: rgba(0, 0, 255, 1)">sudo</span> netstat -tulpn | <span style="color: rgba(0, 0, 255, 1)">grep</span><span style="color: rgba(0, 0, 0, 1)"> redis

# 输出示例（显示监听127.</span><span style="color: rgba(128, 0, 128, 1)">0.0</span>.<span style="color: rgba(128, 0, 128, 1)">1</span>:<span style="color: rgba(128, 0, 128, 1)">6379</span><span style="color: rgba(0, 0, 0, 1)">）
tcp        </span><span style="color: rgba(128, 0, 128, 1)">0</span>      <span style="color: rgba(128, 0, 128, 1)">0</span> <span style="color: rgba(128, 0, 128, 1)">127.0</span>.<span style="color: rgba(128, 0, 128, 1)">0.1</span>:<span style="color: rgba(128, 0, 128, 1)">6379</span>          <span style="color: rgba(128, 0, 128, 1)">0.0</span>.<span style="color: rgba(128, 0, 128, 1)">0.0</span>:*               LISTEN      <span style="color: rgba(128, 0, 128, 1)">1234</span>/redis-server <span style="color: rgba(128, 0, 128, 1)">1</span></pre>
</div>
<p>因此，在修改 Redis 绑定地址时，只需指定 IP 地址，无需包含端口号。</p>
<p>&nbsp;</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.004166666666666667" data-date-updated="2025-06-17 16:41">2025-06-17 16:35</span>&nbsp;
<a href="https://www.cnblogs.com/lymblog">名曰大神</a>&nbsp;
阅读(<span id="post_view_count">14</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18933193);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18933193', targetLink: 'https://www.cnblogs.com/lymblog/p/18933193', title: 'AEM6.5集成Redis详细步骤(附代码)' })">举报</a>
</div>
        