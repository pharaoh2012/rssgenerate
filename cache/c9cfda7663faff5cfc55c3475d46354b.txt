
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/zhuweisky/p/18936492" title="发布于 2025-06-19 16:55">
    <span role="heading" aria-level="2">C#实现语音预处理：降噪、静音检测、自动增益（附Demo源码）</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        无论是在音视频通话系统或视频会议系统中，对从麦克风采集到的说话的声音数据进行预处理，都是是非常必要的。语音数据预处理主要包括：​​降噪、静音检测、自动增益​​ 。这篇我们来看看在C#中如何实现这些功能。
    </div>
<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p>&nbsp; &nbsp; &nbsp; 无论是在音视频录制系统，还是音视频通话系统、或视频会议系统中，对从麦克风采集到的说话的声音数据进行预处理，都是是非常必要的。</p>
<p>&nbsp; &nbsp; &nbsp; 语音数据预处理主要包括：​​降噪（Noise Reduction）、静音检测（Silence Detection/VAD）、自动增益（Automatic Gain Control, AGC）​​ 。</p>
<h2>一. 语音预处理的作用</h2>
<p>　&nbsp; 我们先解释一下，降噪、静音检测、自动增益，这些语音预处理分别起什么作用。</p>
<p>（1）降噪</p>
<p>&nbsp; &nbsp; &nbsp; 降噪，用于消除背景噪声，比如马路车流声、环境杂音等，以保留清晰的说话人声。</p>
<p>&nbsp; &nbsp; &nbsp; 更高级的，结合AI模型训练，还可以消除电脑的风扇声、键盘敲击声等等。</p>
<p>（2）静音检测</p>
<p>&nbsp; &nbsp; &nbsp; 静音检测，又称为语音活动检测，用于识别音频流中的静音片段（没有讲话人声），这样可以简化后续的编码等环节，并可以节省传递所需要的带宽。</p>
<p>（3）自动增益</p>
<p>&nbsp; &nbsp; &nbsp; 自动增益，用于动态调整说话声音的音量，使输出电平保持稳定，以避免讲话的声音忽大忽小。</p>
<h2>二. 实现语音预处理</h2>
<p>&nbsp; &nbsp; &nbsp; 接下来，我们使用C#实现一个Demo，这个Demo将从麦克风采集声音数据，然后进行语音预处理，并且将处理后的声音数据实时播放出来。Demo的运行效果如下图所示：</p>
<p>&nbsp; &nbsp; &nbsp;&nbsp;<img src="https://img2024.cnblogs.com/blog/9005/202506/9005-20250619143534855-338562595.png" alt=""></p>
<p>&nbsp; &nbsp; &nbsp; Demo 功能很简单，那我们来具体看看代码是如何实现的。</p>
<h3>1. 创建采集器、预处理器、播放器</h3>
<p>&nbsp; &nbsp; &nbsp;麦克风声音数据采样率我们选择16K、单声道。&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 128, 1)">WaveSampleRate</span> sr =<span style="color: rgba(0, 0, 0, 1)"><span style="color: rgba(0, 128, 128, 1)"> WaveSampleRate</span>.S16k;
</span><span style="color: rgba(0, 0, 255, 1)">int</span> channelCount = <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">;

</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">创建语音预处理器，开启降噪、自动增益、静音检测</span>
<span style="color: rgba(0, 0, 255, 1)">this</span>.voicePreprocessor = <span style="color: rgba(0, 128, 128, 1)">CapturerFactory</span>.CreateVoicePreprocessor(sr, channelCount, <span style="color: rgba(0, 0, 255, 1)">true</span> ,<span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">创建麦克风采集器</span>
<span style="color: rgba(0, 0, 255, 1)">this</span>.microphoneCapturer = <span style="color: rgba(0, 128, 128, 1)">CapturerFactory</span>.CreateMicrophoneCapturer(<span style="color: rgba(0, 0, 255, 1)">int</span>.Parse(<span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">.textBox_mic.Text), sr);
</span><span style="color: rgba(0, 0, 255, 1)">this</span>.microphoneCapturer.AudioCaptured += <span style="color: rgba(0, 0, 255, 1)">new</span> ESBasic.<span style="color: rgba(0, 128, 128, 1)">CbGeneric</span>&lt;<span style="color: rgba(0, 0, 255, 1)">byte</span>[]&gt;<span style="color: rgba(0, 0, 0, 1)">(microphoneCapturer_AudioCaptured);
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">创建声音播放器</span>
<span style="color: rgba(0, 0, 255, 1)">this</span>.audioPlayer = <span style="color: rgba(0, 128, 128, 1)">PlayerFactory</span>.CreateAudioPlayer(<span style="color: rgba(0, 0, 255, 1)">int</span>.Parse(<span style="color: rgba(0, 0, 255, 1)">this</span>.textBox_speaker.Text), (<span style="color: rgba(0, 0, 255, 1)">int</span>)sr, channelCount, <span style="color: rgba(128, 0, 128, 1)">16</span>, <span style="color: rgba(128, 0, 128, 1)">2</span><span style="color: rgba(0, 0, 0, 1)">);                

</span><span style="color: rgba(0, 0, 255, 1)">this</span>.microphoneCapturer.Start();</pre>
</div>
<p>　　CreateVoicePreprocessor 方法的最后两个参数可以指定在降噪的同时，是否开启静音检测和自动增益功能。</p>
<h3>2. 预处理语音数据</h3>
<p>&nbsp; &nbsp; &nbsp; 语音预处理器每次处理10ms的声音数据，而现在的麦克风采集器每次采集的是20ms的PCM数据，所以，我们将其拆成两个10ms数据，再提交给预处理器处理。</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">void</span> microphoneCapturer_AudioCaptured(<span style="color: rgba(0, 0, 255, 1)">byte</span><span style="color: rgba(0, 0, 0, 1)">[] audioData)
{
    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (<span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">.checkBox_enabled.Checked)
    {
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">麦克风每次采集20ms数据，降噪器每次处理10ms数据。</span>
        <span style="color: rgba(0, 0, 255, 1)">byte</span>[] frame10ms1 = <span style="color: rgba(0, 0, 255, 1)">new</span> <span style="color: rgba(0, 0, 255, 1)">byte</span>[audioData.Length / <span style="color: rgba(128, 0, 128, 1)">2</span><span style="color: rgba(0, 0, 0, 1)">];
        </span><span style="color: rgba(0, 0, 255, 1)">byte</span>[] frame10ms2 = <span style="color: rgba(0, 0, 255, 1)">new</span> <span style="color: rgba(0, 0, 255, 1)">byte</span>[audioData.Length / <span style="color: rgba(128, 0, 128, 1)">2</span><span style="color: rgba(0, 0, 0, 1)">];
        <span style="color: rgba(0, 128, 128, 1)">Buffer</span>.BlockCopy(audioData, </span><span style="color: rgba(128, 0, 128, 1)">0</span>, frame10ms1, <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">, frame10ms1.Length);
        <span style="color: rgba(0, 128, 128, 1)">Buffer</span>.BlockCopy(audioData, frame10ms1.Length, frame10ms2, </span><span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">, frame10ms2.Length);
        </span><span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">.HandleData(frame10ms1);
        </span><span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">.HandleData(frame10ms2);
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)">;
    }

    </span><span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">.audioPlayer.Play(audioData);
}</span></pre>
</div>
<p>（1）通过一个CheckBox勾选框来实时控制是否启用语音预处理，这样在测试时，就可以很方便的对比体验开启了语音预处理的效果。</p>
<p>（2）调用IVoicePreprocessor 的&nbsp;Process 方法，就可以完成一帧语音数据（10ms）的预处理。如下所示：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span> HandleData(<span style="color: rgba(0, 0, 255, 1)">byte</span><span style="color: rgba(0, 0, 0, 1)">[] frame10ms)
{
    </span><span style="color: rgba(0, 0, 255, 1)">byte</span>[] res = <span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">.voicePreprocessor.Process(frame10ms);            
    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (res == <span style="color: rgba(0, 0, 255, 1)">null</span>) <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">静音帧</span>
<span style="color: rgba(0, 0, 0, 1)">    {
        </span>++<span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">.silenceFrameCountTotal;
        </span><span style="color: rgba(0, 0, 255, 1)">this</span>.audioPlayer.Play(<span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">.voicePreprocessor.SlienceFrame);
    }
    </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">
    {
        </span><span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">.audioPlayer.Play(res);
    }
}</span></pre>
</div>
<p>　　如果Process 方法返回的是null，表示检测到该帧是静音帧，于是，将内置的10ms静音帧 SlienceFrame 提交给播放器去播放。</p>
<h3>3. 统计静音帧数量</h3>
<p>　　一个语音帧是10ms，那么1秒钟就有100个语音帧，程序中，我们统计了上一秒出现了多少个静音帧，并在UI左下方显示出来。</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">volatile</span> <span style="color: rgba(0, 0, 255, 1)">int</span> silenceFrameCountTotal = <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">volatile</span> <span style="color: rgba(0, 0, 255, 1)">int</span> silenceFrameCountPre = <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
</span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">void</span> timer1_Tick(<span style="color: rgba(0, 0, 255, 1)">object</span><span style="color: rgba(0, 0, 0, 1)"> sender, EventArgs e)
{
    </span><span style="color: rgba(0, 0, 255, 1)">int</span> delt = <span style="color: rgba(0, 0, 255, 1)">this</span>.silenceFrameCountTotal - <span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">.silenceFrameCountPre;
    </span><span style="color: rgba(0, 0, 255, 1)">this</span>.silenceFrameCountPre = <span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">.silenceFrameCountTotal;
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">显示上一秒静音帧数量。</span>
    <span style="color: rgba(0, 0, 255, 1)">this</span>.label_silenceFrameCount.Text =<span style="color: rgba(0, 0, 0, 1)"> delt.ToString();
}</span></pre>
</div>
<p>&nbsp;　　实际测试时可以发现，当不说话时，UI实时显示1秒钟出现的静音帧是100个。</p>
<h2>三. Demo源码下载</h2>
<p>&nbsp; &nbsp; &nbsp; &nbsp; 源码下载：<a href="https://dl.oraycn.com/DownLoadFiles/MCapture/Oraycn.VoicePreprocessDemo.rar" target="_blank" rel="noopener nofollow">VoicePreprocessDemo.rar</a></p>
<p>　　 如果不想打开VS，可以直接到Debug目录下，双击&nbsp;Oraycn.VoicePreprocessDemo.exe 即可运行Demo，开始体验语音降噪、静音检测、自动增益的处理效果。</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; 建议使用耳麦测试，对比效果会更明显。当开启预处理时，能立即感觉到背景噪音消失了，而且说话的声音变大了（AGC），不说话时，UI显示静音帧的数量变多。</p>
<p>&nbsp;　　来下载试试语音预处理的效果吧。</p>
<p>&nbsp;</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-06-19 16:55">2025-06-19 16:55</span>&nbsp;
<a href="https://www.cnblogs.com/zhuweisky">zhuweisky</a>&nbsp;
阅读(<span id="post_view_count">216</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18936492);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18936492', targetLink: 'https://www.cnblogs.com/zhuweisky/p/18936492', title: 'C#实现语音预处理：降噪、静音检测、自动增益（附Demo源码）' })">举报</a>
</div>
        