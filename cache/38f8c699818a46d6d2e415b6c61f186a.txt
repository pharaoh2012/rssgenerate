
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/hubert-style/p/18950083" title="发布于 2025-06-26 14:57">
    <span role="heading" aria-level="2">React Hooks 钩子特性</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<blockquote>
<p>人在身处逆境时，适应环境的能力实在惊人。人可以忍受不幸，也可以战胜不幸，因为人有着惊人的潜力，只要立志发挥它，就一定能渡过难关。</p>
</blockquote>
<p>Hooks 是 React 16.8 的新增特性。它可以让你在不编写 class 组件的情况下使用 state 以及其他的 React 特性。</p>
<p>React Hooks 表现形式是以 <code>use</code> 开头的函数被称为 <strong>Hook</strong>。<code>useState</code> 是 React 提供的一个内置 Hook。你可以在 <a href="https://zh-hans.react.dev/reference/react" target="_blank" rel="noopener nofollow">React API 参考</a> 中找到其他内置的 Hook。你也可以通过组合现有的 Hook 来编写属于你自己的 Hook。</p>
<p>跟普通函数相比，Hook 比普通函数更为严格。你只能在你的组件的顶层调用 Hook（或其他 Hook里）。如果你想在一个条件或循环中使用 <code>useState</code>，请提取一个新的组件并在组件内部使用它。</p>
<p>为什么要使用 Hooks？</p>
<ul>
<li>解决高阶类组件复用，导致代码层级复杂问题。</li>
<li>React 组件生命周期的复杂，用于代替生命周期函数。</li>
<li>如果一个类一开始设计成了 function 组件，无状态组件，因为需要状态，又改成了 class 成本高。</li>
</ul>
<h2 id="1-state-hook">1. State Hook</h2>
<p>State 让组件“记住”用户输入之类的信息。例如，表单组件可以使用 state 来存储输入值，而图片库组件可以使用 state 来存储所选的图像索引。要给组件添加状态，可以使用以下介绍的钩子之一。</p>
<h3 id="11-usestate">1.1 useState</h3>
<p>useState 是一个 React Hook。它允许你向组件添加一个状态变量。模拟类组件的状态管理。</p>
<pre><code class="language-react">// usss
const [state, setstate] = usestate(initialState)
</code></pre>
<h3 id="12-useactionstate">1.2 useActionState</h3>
<p><code>useActionState</code> 是一个可以根据某个表单动作的结果更新 state 的 Hook。</p>
<h3 id="13-usereducer">1.3 useReducer</h3>
<p>外部状态管理和状态共享。</p>
<p>useReducer 是一个 React Hook，它允许你向组件里面添加一个 <a href="https://zh-hans.react.dev/learn/extracting-state-logic-into-a-reducer" target="_blank" rel="noopener nofollow">reducer</a>，来维护一个状态 state。useReducer 不支持异步处理，异步处理需要借助于 Hooks useEffect。</p>
<p>在单个组件中实现状态管理，理解 useReducer 的使用。</p>
<pre><code class="language-react">const [state, dispatch] = useReducer(reducer, initialState)

// 演示示例
import React, { useReducer } from "react";

// 处理函数
const reducer = (prevState, action) =&gt; {
  let newState = { ...prevState };
  switch (action.type) {
    case "k-minus":
      newState.count--;
      return newState;
    case "k-add":
      newState.count++;
      return newState;
    default:
      return prevState;
  }
};

// 外部对象（状态）
const initialState = {
  count: 0,
};

export default function App() {
  const [state, dispatch] = useReducer(reducer, initialState);

  return (
    &lt;div&gt;
      &lt;button
        onClick={() =&gt; {
          dispatch({
            type: "k-minus",
          });
        }}
      &gt;
        -
      &lt;/button&gt;
      {state.count}
      &lt;button
        onClick={() =&gt; {
          dispatch({
            type: "k-add",
          });
        }}
      &gt;
        +
      &lt;/button&gt;
    &lt;/div&gt;
  );
}
</code></pre>
<p>其次配合 useContext 跨级通信。将数据逻辑（即状态管理）从组件中（视图逻辑）分离出来通过外部管理，降低组件耦合度。对于单个组件来说意义不大，但是对于多个组件数据需要共享状态的时候很方便。</p>
<h2 id="2-context-hook">2. Context Hook</h2>
<h3 id="21-usecontext">2.1 useContext</h3>
<p>useContext 是一个 React Hook，可以让你读取和订阅组件中的 context（GlobalContext）。减少组件层级，便于组件跨级通信处理。</p>
<p>useContext 配合 useState、useContext 配合 useReducer 组合剂实现跨级通信和外部状态管理。</p>
<h2 id="3-ref-hooks">3. Ref Hooks</h2>
<p>Refs 允许组件保存一些不用于呈现（渲染）的信息，比如 DOM 节点或超时 ID。与 state 不同，更新 ref 并不会重新呈现组件。React 提供了 useRef hook 来描述。</p>
<h3 id="31-useref">3.1 useRef</h3>
<p>保存引用值（绑定 Dom 结点），和类组件中 React.createRef 一样。</p>
<pre><code class="language-react">const ref = useRef(initialValue)
</code></pre>
<p>如何保存一个临时变量：使用状态、使用 useRef 保存值。</p>
<pre><code class="language-react">var count = 0 // 刷新的时候 count 值会丢失
var count = useRef(0)
count ++ //改变值，组件重新渲染时候值不会丢失
</code></pre>
<h2 id="4-effect-hooks">4. Effect Hooks</h2>
<p><strong>Effect</strong> 允许组件 <a href="https://zh-hans.react.dev/learn/synchronizing-with-effects" target="_blank" rel="noopener nofollow">连接到外部系统并与之同步</a>。这包括处理网络、浏览器、DOM、动画、使用不同 UI 库编写的 widgets 以及其他非 React 代码。</p>
<p>Effect Hooks 副作用钩子函数很好模拟了类组件的生命周期函数。但是我们知道 Function Component 不存在生命周期，所以不要把 Class Component 的生命周期概念搬过夹试图对号入座。</p>
<h3 id="41-useeffect">4.1 useEffect</h3>
<p><code>useEffect</code> 是一个 React Hook，它允许你 <a href="https://zh-hans.react.dev/learn/synchronizing-with-effects" target="_blank" rel="noopener nofollow">连接到外部系统并与之同步</a>。</p>
<pre><code class="language-react">useEffect(setup, dependencies?)

// 处理副作用
useEffect(() =&gt; {
  // 副作用函数处理代码块 { 比如数据请求，定时器 }
  console.log("effect")

  return () =&gt; {
    console.log("cleanup")
    // cleanup 
    // 执行时机：无依赖情况下：组件销毁执行 有依赖情况下：依赖更新和组件销毁的时候
  }
}, [ name /* 依赖的状态，如果为空表示不依赖任何状态，只会执行一次 */])
</code></pre>
<p>依赖：不要对 Dependencies 撒谎，如果你明明在 effect 中使用了某个变量，却没有申明在依赖中，你等于向 React 撒了谎，后果就是，当依赖的变量改变时，useEffect 也不会再次执行，eslint 会报警告。</p>
<h3 id="42-uselayouteffect">4.2 useLayoutEffect</h3>
<p><code>useLayoutEffect</code> 是 <a href="https://zh-hans.react.dev/reference/react/useEffect" target="_blank" rel="noopener nofollow"><code>useEffect</code></a> 的一个版本，在浏览器重新绘制屏幕之前触发。<code>useLayoutEffect</code> 内部的代码和所有计划的状态更新阻塞了浏览器重新绘制屏幕。如果过度使用，这会使你的应用程序变慢。如果可能的话，尽量选择 <a href="https://zh-hans.react.dev/reference/react/useEffect" target="_blank" rel="noopener nofollow"><code>useEffect</code></a>。</p>
<p>然后如果 Effect 一定要阻止浏览器绘制屏幕，使用 <a href="https://zh-hans.react.dev/reference/react/useLayoutEffect" target="_blank" rel="noopener nofollow"><code>useLayoutEffect</code></a> 替换 <code>useEffect</code>。请注意，<strong>绝大多数的 Effect 都不需要这样</strong>。只有当在浏览器绘制之前运行 Effect 非常重要的时候才需要如此：例如，在用户看到 tooltip 之前测量并定位它。</p>
<h3 id="43-useinsertioneffect">4.3 useInsertionEffect</h3>
<p><code>useInsertionEffect</code> 是为 CSS-in-JS 库的作者特意打造的。除非你正在使用 CSS-in-JS 库并且需要注入样式，否则你应该使用 <a href="https://zh-hans.react.dev/reference/react/useEffect" target="_blank" rel="noopener nofollow"><code>useEffect</code></a> 或者 <a href="https://zh-hans.react.dev/reference/react/useLayoutEffect" target="_blank" rel="noopener nofollow"><code>useLayoutEffect</code></a>。</p>
<h3 id="44-effect-hooks-之间区别">4.4 Effect Hooks 之间区别</h3>
<p>简单来说就是调用时机不同，useLayoutEFfect 和原来 componentDidMount &amp; componentDidUpdate 一致，在 React 完成 Dom 更新后马上同步调用的代码，即在浏览器重新绘制屏幕之前触发 useLayouteEffect。你可以在这里测量布局。会阻塞页面渲染（渲染树）。</p>
<p>useEffect 是会在整个页面渲染完才会调用的代码。</p>
<p>useInsertionEffect 会在 React 修改 DOM 之前触发。可以在这里插入动态 CSS。</p>
<p>官方建议优先使用 useEffect</p>
<blockquote>
<p>However, we recommend starting with useEffect first and only trying useLayoutEffect if that causes a problem.</p>
</blockquote>
<p>在实际使用时如果想避免页面抖动（即在 useEffect 里修改 Dom 很有可能出现）的话，可以把需要操作 Dom 的代码放在 useLayoutEffect 里。在这里做点 Dom 操作，这些 Dom 修改会和 react 做出的更改一起被一次性渲染到屏幕上，只有一次回流、重绘的代价。</p>
<p><img alt="4. Hooks.png" loading="lazy" data-src="https://s2.loli.net/2023/02/20/s8fbDtPI32a79Zc.png" class="lazyload"></p>
<h2 id="5-性能-hook">5. 性能 Hook</h2>
<h3 id="51-usecallback">5.1 useCallBack</h3>
<p><code>useCallback</code> （记忆函数）是一个允许你在多次渲染中缓存函数的 React Hook。记忆函数，防止因为组件重新渲染，导致组件内部定义的方法被重新创建，起到缓存作用。只有第二个参数依赖项变化了才重新声明一次。如果依赖传入空数组，那么函数第一次创建后就被缓存，这时如果函数定义中的使用了某个状态值改变了，以后调用函数拿到的还是老的值。如果不传第二个参数，每次都会重新声明一次。</p>
<pre><code class="language-react">const cachedFn = useCallback(fn, dependencies)
</code></pre>
<h3 id="52-usememo">5.2 useMemo</h3>
<p><code>useMemo</code> 是一个 React Hook，它在每次重新渲染的时候能够缓存（使用）计算的结果。类似计算属性。</p>
<pre><code class="language-react">const cachedValue = useMemo(calculateValue, dependencies)

useMemo(() =&gt; first, [second])
</code></pre>
<p>记忆纯函数计算结果、跳过组件的重新渲染，或者记忆一个函数。</p>
<p>对于使用 useMemo 记忆一个函数，这看起来很笨拙！<strong>记忆函数很常见，React 有一个专门用于此的内置 Hook。将你的函数包装到 <a href="https://zh-hans.react.dev/reference/react/useCallback" target="_blank" rel="noopener nofollow"><code>useCallback</code></a> 而不是 <code>useMemo</code></strong> 中，以避免编写额外的嵌套函数。 即 <code>useCallback</code> 的唯一好处是它可以让你避免在内部编写额外的嵌套函数。它没有做任何其他事情。</p>
<p>和 useCallback 唯一的区别是：useCallback 不会执行第一个参数函数，而是将它返回给你，而 useMemo 会执行第一个参数函数并且将函数执行结果返回给你。所以在前面的例子中，可以返回 handleClick 来达到存储函数的目的。</p>
<p>所以 useCallback 常用记忆事件函数，生成记忆后的事件函数并传递给子组件使用。而 useMemo 更适合经过函数计算得到一个确定的值，比如记忆组件结果。</p>
<h3 id="53-usetransition">5.3 useTransition</h3>
<p><code>useTransition</code> 允许将状态转换标记为非阻塞，并允许其他更新中断它此更新。</p>
<h3 id="54-usedeferredvalued">5.4 useDeferredValued</h3>
<p><code>useDeferredValue</code> 是一个 React Hook，可以让你延迟更新 UI 的某些部分。</p>
<h2 id="6-资源-hook">6. 资源 Hook</h2>
<p><code>use</code> 是一个 React Hook，它可以让你读取类似于 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener nofollow">Promise</a> 或 <a href="https://zh-hans.react.dev/learn/passing-data-deeply-with-context" target="_blank" rel="noopener nofollow">context</a> 的资源的值。</p>
<h2 id="7-其他-hook">7. 其他 Hook</h2>
<p>这些 Hook 主要对库作者有用，而不常用于应用程序代码。</p>
<p><a href="https://zh-hans.react.dev/reference/react/useDebugValue" target="_blank" rel="noopener nofollow"><code>useDebugValue</code></a> 允许在 React 开发者工具中为自定义 Hook 添加一个标签。</p>
<p><a href="https://zh-hans.react.dev/reference/react/useId" target="_blank" rel="noopener nofollow"><code>useId</code></a> 允许组件绑定一个唯一 ID，其通常与可访问性 API 一起使用。</p>
<p><a href="https://zh-hans.react.dev/reference/react/useSyncExternalStore" target="_blank" rel="noopener nofollow"><code>useSyncExternalStore</code></a> 允许一个组件订阅一个外部 store。</p>
<h2 id="8-自定义-hooks">8. 自定义 Hooks</h2>
<p>当我们想在两个函数之间共享逻辑时，我们会把它提取到第三个函数中。即<font color="red">抽离复用 js 逻辑</font>，让结构更加清晰，符合函数式编程思想。</p>
<p>必须以 'use' 开头吗？必须如此。这个约定非常重要。不遵循的话，由于无法判断某个函数是否包含对其内部 Hook 的调用，React 将无法自动检查你的 Hook 是否违反了 Hook 的规则。官网主要研究以下几个问题：</p>
<ul>
<li>什么是自定义钩子，如何编写自己的钩子；</li>
<li>如何命名和结构化自定义的钩子；</li>
<li>何时以及为什么要提取自定义钩子；</li>
<li>如何在组件之间重用逻辑；</li>
</ul>
<p>》官方文档：<a href="https://zh-hans.react.dev/reference/react/useTransition" target="_blank" rel="noopener nofollow">https://zh-hans.react.dev/reference/react/useTransition</a></p>
<p>》ahooks：<a href="https://ahooks.js.org/zh-CN/hooks/use-request/index" target="_blank" rel="noopener nofollow">https://ahooks.js.org/zh-CN/hooks/use-request/index</a></p>
<p>》优秀博客：<a href="https://juejin.cn/post/7101486767336849421" target="_blank" rel="noopener nofollow">https://juejin.cn/post/7101486767336849421</a></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-06-26 14:58">2025-06-26 14:57</span>&nbsp;
<a href="https://www.cnblogs.com/hubert-style">背包の技术</a>&nbsp;
阅读(<span id="post_view_count">8</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18950083);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18950083', targetLink: 'https://www.cnblogs.com/hubert-style/p/18950083', title: 'React Hooks 钩子特性' })">举报</a>
</div>
        