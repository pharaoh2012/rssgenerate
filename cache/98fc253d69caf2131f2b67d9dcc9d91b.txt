
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/Tangtang1997/p/18650356" title="发布于 2025-01-03 16:17">
    <span role="heading" aria-level="2">设计模式合集</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p></p><div class="toc"><div class="toc-container-header">目录</div><ul><li><a href="#引言" rel="noopener nofollow">引言</a></li><li><a href="#设计模式的分类" rel="noopener nofollow">设计模式的分类</a><ul><li><a href="#创建型模式" rel="noopener nofollow">创建型模式</a></li><li><a href="#结构型模式" rel="noopener nofollow">结构型模式</a></li><li><a href="#行为型模式" rel="noopener nofollow">行为型模式</a></li></ul></li></ul></div><p></p>
<h1 id="引言">引言</h1>
<p>在软件开发的世界中，设计模式是一种经过验证的解决方案，用于解决常见的设计问题。它们不仅提高了代码的可维护性和可扩展性，还使开发人员能够更高效地进行开发工作。设计模式提供了一种标准化的方法来解决软件设计中的重复问题，使得开发人员可以更专注于业务逻辑的实现，而不是重复发明轮子。</p>
<p>设计模式的概念最早由Erich Gamma、Richard Helm、Ralph Johnson和John Vlissides在他们的著作《设计模式：可复用面向对象软件的基础》中提出。这本书总结了23种经典的设计模式，并将它们分为三大类：创建型模式、结构型模式和行为型模式。</p>
<p>在这个合集中，将对这23种经典的设计模式进行概述，并介绍它们的分类和应用场景。每个设计模式都有其独特的用途和优点，掌握这些模式可以显著提高编程技能和代码质量。</p>
<p>示例代码放在了 Github 上：<a href="https://github.com/Tangtang1997/DesignPatterns" target="_blank" rel="noopener nofollow">https://github.com/Tangtang1997/DesignPatterns</a></p>
<h1 id="设计模式的分类">设计模式的分类</h1>
<p>设计模式通常分为三大类：</p>
<h2 id="创建型模式">创建型模式</h2>
<p>创建型模式关注对象的创建过程，旨在将对象的创建与使用分离，从而提高系统的灵活性和可扩展性。这些模式包括：</p>
<ol>
<li><a href="https://www.cnblogs.com/Tangtang1997/p/18650232" target="_blank">工厂方法（Factory Method）</a>：定义一个创建对象的接口，但由子类决定实例化哪一个类。</li>
<li><a href="https://www.cnblogs.com/Tangtang1997/p/18650296" target="_blank">抽象工厂（Abstract Factory）</a>：提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。</li>
<li><a href="https://www.cnblogs.com/Tangtang1997/p/18650301" target="_blank">单例（Singleton）</a>：确保一个类只有一个实例，并提供一个全局访问点。</li>
<li><a href="https://www.cnblogs.com/Tangtang1997/p/18650303" target="_blank">建造者（Builder）</a>：将一个复杂对象的构建过程与其表示分离，使得同样的构建过程可以创建不同的表示。</li>
<li><a href="https://www.cnblogs.com/Tangtang1997/p/18650305" target="_blank">原型（Prototype）</a>：通过复制现有的实例来创建新的对象，而不是通过实例化类。</li>
</ol>
<h2 id="结构型模式">结构型模式</h2>
<p>结构型模式关注类和对象的组合，旨在通过组合对象来实现新的功能。这些模式包括：</p>
<ol>
<li><a href="https://www.cnblogs.com/Tangtang1997/p/18650306" target="_blank">适配器（Adapter）</a>：将一个类的接口转换成客户希望的另一个接口，使得原本由于接口不兼容而不能一起工作的类可以一起工作。</li>
<li><a href="https://www.cnblogs.com/Tangtang1997/p/18650308" target="_blank">桥接（Bridge）</a>：将抽象部分与它的实现部分分离，使它们都可以独立地变化。</li>
<li><a href="https://www.cnblogs.com/Tangtang1997/p/18650309" target="_blank">组合（Composite）</a>：将对象组合成树形结构以表示“部分-整体”的层次结构，使得客户可以统一地处理单个对象和组合对象。</li>
<li><a href="https://www.cnblogs.com/Tangtang1997/p/18650312" target="_blank">装饰（Decorator）</a>：动态地给一个对象添加一些额外的职责，就增加功能来说，装饰模式比生成子类更为灵活。</li>
<li><a href="https://www.cnblogs.com/Tangtang1997/p/18650314" target="_blank">外观（Facade）</a>：为子系统中的一组接口提供一个一致的界面，使得子系统更容易使用。</li>
<li><a href="https://www.cnblogs.com/Tangtang1997/p/18650316" target="_blank">享元（Flyweight）</a>：运用共享技术有效地支持大量细粒度的对象。</li>
<li><a href="https://www.cnblogs.com/Tangtang1997/p/18650317" target="_blank">代理（Proxy）</a>：为其他对象提供一种代理以控制对这个对象的访问。</li>
</ol>
<h2 id="行为型模式">行为型模式</h2>
<p>行为型模式关注对象之间的通信和职责分配，旨在使对象之间的交互更加灵活和可扩展。这些模式包括：</p>
<ol>
<li><a href="https://www.cnblogs.com/Tangtang1997/p/18650320" target="_blank">责任链（Chain of Responsibility）</a>：为请求创建一个接收者对象的链，使得多个对象都有机会处理该请求。</li>
<li><a href="https://www.cnblogs.com/Tangtang1997/p/18650323" target="_blank">命令（Command）</a>：将请求封装成对象，从而使你可以用不同的请求对客户进行参数化。</li>
<li><a href="https://www.cnblogs.com/Tangtang1997/p/18650325" target="_blank">解释器（Interpreter）</a>：给定一个语言，定义它的文法的一种表示，并定义一个解释器，该解释器使用该表示来解释语言中的句子。</li>
<li><a href="https://www.cnblogs.com/Tangtang1997/p/18650326" target="_blank">迭代器（Iterator）</a>：提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。</li>
<li><a href="https://www.cnblogs.com/Tangtang1997/p/18650328" target="_blank">中介者（Mediator）</a>：用一个中介对象来封装一系列对象的交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</li>
<li><a href="https://www.cnblogs.com/Tangtang1997/p/18650330" target="_blank">备忘录（Memento）</a>：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。</li>
<li><a href="https://www.cnblogs.com/Tangtang1997/p/18650331" target="_blank">观察者（Observer）</a>：定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。</li>
<li><a href="https://www.cnblogs.com/Tangtang1997/p/18650334" target="_blank">状态（State）</a>：允许对象在内部状态改变时改变它的行为，对象看起来好像修改了它的类。</li>
<li><a href="https://www.cnblogs.com/Tangtang1997/p/18650336" target="_blank">策略（Strategy）</a>：定义一系列算法，把它们一个个封装起来，并且使它们可以互换。</li>
<li><a href="https://www.cnblogs.com/Tangtang1997/p/18650337" target="_blank">模板方法（Template Method）</a>：定义一个操作中的算法的骨架，而将一些步骤延迟到子类中，使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</li>
<li><a href="https://www.cnblogs.com/Tangtang1997/p/18650338" target="_blank">访问者（Visitor）</a>：表示一个作用于某对象结构中的各元素的操作，它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。</li>
</ol>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.0009311587129629629" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-03 16:18">2025-01-03 16:17</span>&nbsp;
<a href="https://www.cnblogs.com/Tangtang1997">贾光辉</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18650356" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18650356);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18650356', targetLink: 'https://www.cnblogs.com/Tangtang1997/p/18650356', title: '设计模式合集' })">举报</a>
</div>
        