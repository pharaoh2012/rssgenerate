
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/xwz1024/p/18991203" title="发布于 2025-07-18 11:27">
    <span role="heading" aria-level="2">Django 实战：I18N 国际化与本地化配置、翻译与切换一步到位</span>
    

</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			    <div id="cnblogs_post_description" style="display: none">
        <img src="https://img2024.cnblogs.com/blog/1565852/202507/1565852-20250718112650561-1624032161.png" alt="Django 实战：I18N 国际化与本地化配置、翻译与切换一步到位" class="desc_img">
        Django国际化与本地化指南，涵盖i18n和l10n的定义、配置、视图与模型中的翻译使用、消息文件生成与编译，以及多语言登录实战。助你打造多语言支持的Web应用。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="一国际化与本地化介绍">一、国际化与本地化介绍</h2>
<h3 id="定义">定义</h3>
<p>国际化和本地化的目标，是允许一个单一的 Web 应用程序以适合受众的语言和格式提供其内容。 Django 提供了完整的国际化（i18n）和本地化（l10n）支持。</p>
<ul>
<li>国际化（i18n） ：是指在软件开发过程中，将软件设计为可以支持多种语言和文化环境的过程。国际化为本地化准备软件。通常由开发者完成。</li>
<li>本地化（l10n） ：是指将软件根据特定语言和文化环境进行定制的过程。本地化编写翻译和本地格式化。通常由翻译者完成。</li>
</ul>
<h3 id="相关概念">相关概念</h3>
<ul>
<li>
<p>消息文件：消息文件（message file）是一个纯文本文件，代表一种语言，它包含所有可用的翻译字段以及如何以给定语言表示。消息文件扩展名是 .po 文件。</p>
</li>
<li>
<p>惰性翻译：gettext_lazy会延迟翻译计算，直到实际渲染时才会根据当前请求语言动态加载，而 gettext 在模块加载时即固定翻译结果</p>
</li>
</ul>
<p>参考资料：<a href="https://docs.djangoproject.com/zh-hans/4.2/topics/i18n/" target="_blank" rel="noopener nofollow">Django 国际化和本地化</a></p>
<h2 id="二安装配置">二、安装配置</h2>
<h3 id="安装-gettext">安装 gettext</h3>
<p><a href="https://mlocati.github.io/articles/gettext-iconv-windows.html" target="_blank" rel="noopener nofollow">下载地址</a>，下载64位 share 安装包。双击安装，默认下一步。安装后检查是否可识别：</p>
<pre><code class="language-sh">msguniq --version
# 上述命令如果在VSCode的终端无法识别，可以在CMD中运行
</code></pre>
<h3 id="配置-settingspy">配置 settings.py</h3>
<p>在 Django 项目的 <code>settings.py</code> 文件中进行如下配置：</p>
<pre><code class="language-python">### I18N 配置
USE_I18N = True
LOCALE_PATHS = [BASE_DIR / "locale"]
LANGUAGES = (
    ("zh-hans", "简体中文"),
    ("en", "English"),
)

MIDDLEWARE = [
    # ...
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.locale.LocaleMiddleware", # I18N多语言支持，注意放置顺序
    "django.middleware.common.CommonMiddleware",
    # ...
]
</code></pre>
<p><a href="https://gitee.com/zhulj993/mars-mgn/blob/master/mysite/mysite/settings.py" target="_blank" rel="noopener nofollow">点击查看完整代码</a></p>
<h2 id="三使用国际化">三、使用国际化</h2>
<h3 id="视图中使用">视图中使用</h3>
<p>视图中使用：使用函数 <code>gettext()</code> 来指定翻译字符串。按照惯例，将其作为下划线( _ )导入，以保存输入。</p>
<pre><code class="language-python">from django.utils.translation import gettext as _

# ...
        # 检查用户名与密码是否正确
        if not user:
            # 登录失败，记录登录日志
            log_data["result"] = LoginResultEnum.BAD_CREDENTIALS.value
            login_log_task.delay(log_data)
            return CommonResponse.error(code=111201, msg=_("账号或密码错误"))
</code></pre>
<h3 id="序列化器和模型中使用">序列化器和模型中使用</h3>
<p>序列化器和模型中使用：使用惰性翻译函数 <code>gettext_lazy()</code> 来指定翻译字符串。</p>
<ul>
<li>序列化器的 <code>error_messages</code> 中直接使用 <code>_()</code> 函数时，Django 会在启动时立即计算翻译值（基于默认语言），而非根据请求动态切换。需改用 <code>ugettext_lazy</code> 实现惰性翻译，使翻译在运行时根据请求语言动态加载。</li>
</ul>
<pre><code class="language-python"># 示例：序列化器中
from django.utils.translation import gettext_lazy as _

        error_messages={
            "required": "密码不能为空",
            "min_length": _("密码长度至少为8位"),
            "max_length": "密码长度不能超过16位",
        },
    
    
# 示例：模型
from django.db import models
from django.utils.translation import gettext_lazy as t

class MyThing(models.Model):
    name = models.CharField(help_text=t("This is the help text"))
</code></pre>
<h2 id="四本地化操作">四、本地化操作</h2>
<h3 id="创建或更新消息文件">创建或更新消息文件</h3>
<p>下面命令会遍历项目源代码，并抽出所有要被翻译的字符串。默认情况下，脚本检查具有 .html、.txt 或 .py 文件扩展名的每个文件。可通过<code>-e</code>选项指定。</p>
<pre><code class="language-sh"># 进入Django 项目的根目录（就是包含 manage.py 的那个目录），或进入Django app的根目录
django-admin makemessages -l zh_Hans
django-admin makemessages -l en

# 只检查 *.py 文件（可选）
django-admin makemessages -l zh_Hans -e py

# 以后使用下面命令，重新检查并更新所有语言的消息文件
django-admin makemessages -a
</code></pre>
<p>生成对应的消息文件<code>*.po</code></p>
<pre><code class="language-sh">locale
├── en
│   └── LC_MESSAGES
│       ├── django.mo
│       └── django.po  # 消息文件
└── zh_Hans
    └── LC_MESSAGES
        ├── django.mo
        └── django.po  # 消息文件
</code></pre>
<h3 id="消息文件说明">消息文件说明</h3>
<p><code>*.po</code>的是消息文件，必须使用 UTF-8 编码</p>
<ul>
<li>msgid ：显示在源代码中需要翻译的字符串。不要改动它。</li>
<li>msgstr ：翻译后的字符串。</li>
</ul>
<pre><code class="language-sh"># mysite\locale\en\LC_MESSAGES\django.po
msgid "账号或密码错误"
msgstr "Account or password error"

# mysite\locale\zh_Hans\LC_MESSAGES\django.po
msgid "账号或密码错误"
msgstr "账号或密码错误"
</code></pre>
<h3 id="编译消息文件">编译消息文件</h3>
<p>下面命令会根据 <code>.po</code> 文件内容，编译并创建对应的 <code>.mo</code> 文件。</p>
<pre><code class="language-sh">django-admin compilemessages
# 如果更新了消息文件，需要重新编译
</code></pre>
<p>生成的翻译文件应位于以下路径。需要重启一下Django项目，才生效。</p>
<pre><code class="language-sh">locale
├── en
│   └── LC_MESSAGES
│       ├── django.mo  # 编译后的翻译文件
│       └── django.po  # 消息文件
└── zh_Hans
    └── LC_MESSAGES
        ├── django.mo  # 编译后的翻译文件
        └── django.po  # 消息文件
</code></pre>
<h2 id="五项目实战">五、项目实战</h2>
<p>用户登录功能，按上述步骤配置国际化与本地化</p>
<p><img alt="image-20250718100411771" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1565852/202507/1565852-20250718112535461-100626435.png" class="lazyload"></p>
<p>用户登录界面默认为中文，给出中文提示</p>
<p><img alt="image-20250718100752565" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1565852/202507/1565852-20250718112543639-260152722.png" class="lazyload"></p>
<p>修改浏览器语言偏好：设置 → 语言 → 添加"英语(美国)" → 拖到顶部作为首选语言</p>
<p><img alt="image-20250718102228462" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1565852/202507/1565852-20250718112550934-386542552.png" class="lazyload"></p>
<p>此时，给出英文提示</p>
<p><img alt="image-20250718101722706" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1565852/202507/1565852-20250718112603485-2002425259.png" class="lazyload"></p>
<p><a href="https://gitee.com/zhulj993/mars-mgn/tree/master/mysite/locale" target="_blank" rel="noopener nofollow">点击查看完成代码</a></p>
<hr>
<p>您正在阅读的是《<strong>Django从入门到实战</strong>》专栏！关注不迷路~</p>

</div>
<div class="clear"></div>

		</div>
		<div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-07-18 11:27">2025-07-18 11:27</span>&nbsp;
<a href="https://www.cnblogs.com/xwz1024">小王子1024</a>&nbsp;
阅读(<span id="post_view_count">142</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18991203);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18991203', targetLink: 'https://www.cnblogs.com/xwz1024/p/18991203', title: 'Django 实战：I18N 国际化与本地化配置、翻译与切换一步到位' })">举报</a>
</div>
	