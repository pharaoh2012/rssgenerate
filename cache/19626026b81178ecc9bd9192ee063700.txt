
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/fanliang11/p/18879769" title="发布于 2025-05-16 11:49">
    <span role="heading" aria-level="2">凯亚物联网平台发布测试版本</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h2>一、前言&nbsp;</h2>
<p>&nbsp;在下载前，为了消除顾虑，再分析dump进行优化，接上篇文章，找出了dotnetty的问题，那surging 没有问题了？这次我们用windbg 来分析，先输出命令!dumpheap -stat，如下图</p>
<p><img src="https://img2024.cnblogs.com/blog/192878/202505/192878-20250516105040066-1144941754.png" alt="" loading="lazy"></p>
<p>&nbsp;从上图来看，已经没有arraypool 对象了，所以dotnetty 优化成功，那么占了19M的system.Byte[]是不是又是dotnetty的出问题了？输入命令<span style="color: rgba(30, 30, 30, 1)">!dumpheap -mt 7ffeed6378d8 查看具体对象</span></p>
<p><img src="https://img2024.cnblogs.com/blog/192878/202505/192878-20250516105516069-1767273342.png" alt="" loading="lazy"></p>
<p>然后找一个比较大的，输入命令<span style="color: rgba(30, 30, 30, 1)"><span style="color: rgba(30, 30, 30, 1)">!dumpobj /d 335e7db8a8</span>， 去看下明细</span></p>
<p>&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/192878/202505/192878-20250516110913793-844037450.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p>&nbsp;content 居然有serviceId 信息，这里还不清楚是什么，点击进去看结果</p>
<p><img src="https://img2024.cnblogs.com/blog/192878/202505/192878-20250516111055488-2098689806.png" alt="" loading="lazy"></p>
<p>&nbsp;从以上内容来看，发现问题所在了居然有payload 用户信息，那么这个问题就是出现在restcontext或者是rpccontext, 但是有http 信息，如下图</p>
<p><img src="https://img2024.cnblogs.com/blog/192878/202505/192878-20250516111401887-782834930.png" alt="" loading="lazy"></p>
<p>&nbsp;从以上分析就知道RestContext出现问题了，然后再看源码，里面有IHttpContextAccessor 对象比较可疑没有销毁，每次获取对象都是通过&nbsp;ServiceLocator.GetService进行获取，明显是依赖注入的问题，然后发现注入的单例模式，看官方说明说IHttpContextAccessor不能用单例，后面改成了Scoped， 代码如下</p>
<div class="cnblogs_code">
<pre>  context.Services.AddScoped&lt;IHttpContextAccessor, HttpContextAccessor&gt;();</pre>
</div>
<p>然后问题解决了。发布之后，我可是压测了，还一直直播推流，但是内存一直比较稳定</p>
<p><img src="https://img2024.cnblogs.com/blog/192878/202505/192878-20250516111932317-106092344.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>HttpFlv:<a href="http://117.72.121.2:281/httpflv.html" rel="noopener nofollow" target="_blank">http://117.72.121.2:281/httpflv.html</a>&nbsp; <a target="_blank">（黑衣人）</a></p>
<p>&nbsp;HttpFlv:<a href="http://117.72.121.2:281/httpflv1.html" rel="noopener nofollow" target="_blank">http://117.72.121.2:281/httpflv1.html&nbsp;</a> <a target="_blank">（大红包）</a></p>
<p>rtmp:<a target="_blank">rtmp://117.72.121.2:76/live1/livestream2&nbsp;&nbsp; （黑衣人）</a></p>
<p>rtmp:<a target="_blank">rtmp://117.72.121.2:76/live1/livestream3&nbsp;&nbsp; （大红包）</a></p>
<p>&nbsp; 凯亚 (Kayak) 是什么?</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 凯亚(Kayak)是基于.NET6.0软件环境下的surging微服务引擎进行开发的, 平台包含了微服务和物联网平台。支持异步和响应式编程开发，功能包含了物模型,设备,产品,网络组件的统一管理和微服务平台下的注册中心，服务路由，模块，中间服务等管理。还有多协议适配(TCP,MQTT,UDP,CoAP,HTTP,Grpc,websocket,rtmp,httpflv,webservice,等),通过灵活多样的配置适配能够接入不同厂家不同协议等设备。并且通过设备告警,消息通知,数据可视化等功能。能够让你能快速建立起微服务物联网平台系统。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp; 凯亚物联网平台：<a href="http://117.72.121.2:3100" rel="noopener nofollow" target="_blank">http://117.72.121.2:3100</a>（用户名：fanly&nbsp; 密码：123456）</p>
<p>&nbsp; &nbsp; 链路跟踪Skywalking V8:<a href="http://117.72.121.2:8080/" rel="noopener nofollow" target="_blank">http://117.72.121.2:8080/</a></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; surging 微服务引擎开源地址：<a href="https://github.com/fanliang11/surging" rel="noopener nofollow" target="_blank">https://github.com/fanliang11/surging</a>（后面surging 会移动到<a href="https://github.com/microsurging/" rel="noopener nofollow" target="_blank">microsurging</a>进行维护）</p>
<h2>二、下载使用</h2>
<p><strong>这是凯亚物联网平台测试版</strong></p>
<p>通过网盘分享的文件：kayak.iot.7z<br>链接: https://pan.baidu.com/s/17ylodtrjD4MQbWWXhaTp8Q?pwd=48a6 提取码: 48a6</p>
<p>然后下载完成，可以看到以下目录结构</p>
<p><img src="https://img2024.cnblogs.com/blog/192878/202505/192878-20250516112350666-1187151571.png" alt="" loading="lazy"></p>
<p>&nbsp;然后可以点击startup.bat&nbsp; 开始运行凯亚物联网平台，然后也可以在skywalking 的bin 目录下找到startup.bat进行点击运行skywalking</p>
<p>然后输入http://127.0.0.1:3100/进行访问，如下图可以登录后可以看到有两个服务节点</p>
<p><img src="https://img2024.cnblogs.com/blog/192878/202505/192878-20250516113025982-1949545496.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p>然后全局的负载算法改成了RoundRobin（权重轮询算法），注意可以在surgingsetting.json文件中修改,大家可以进行测试，新添加的服务节点会有10分钟预热，权重会降低，等服务器预热完毕，达到最佳性能后，会按照设置好的权重进行计算访问。</p>
<p><img src="https://img2024.cnblogs.com/blog/192878/202505/192878-20250516113131710-1477416402.png" alt="" loading="lazy"></p>
<p>基于网络组件开启的http组件，也可以访问swagger </p>
<p><img src="https://img2024.cnblogs.com/blog/192878/202505/192878-20250516114113151-816864744.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p>可以访问http://127.0.0.1:8080/，看到skywalking</p>
<p><img src="https://img2024.cnblogs.com/blog/192878/202505/192878-20250516113951357-1511322856.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>链路追踪</p>
<p><img src="https://img2024.cnblogs.com/blog/192878/202505/192878-20250516114254862-2115146131.png" alt="" loading="lazy"></p>
<p>&nbsp;点击可以查看对应打印的日志</p>
<p><img src="https://img2024.cnblogs.com/blog/192878/202505/192878-20250516114346794-1806806559.png" alt="" loading="lazy"></p>
<p>如果不想开启skywalking, 然后可以在surgingsetting.json 设置，Packages配置节把 SkyApmLogModule;，SkywalkingModule; 去掉就可以了，再重新运行启动就不会加载skywalking 模块，如下图所示</p>
<p><img src="https://img2024.cnblogs.com/blog/192878/202505/192878-20250516114753661-936287900.png" alt="" loading="lazy"></p>
<p>&nbsp;也可以进行直播推流，如果有端口占用，可以在surgingsetting.json修改httpflv,rtmp等 端口，直播效果如下图</p>
<p><img src="https://img2024.cnblogs.com/blog/192878/202505/192878-20250516120100715-404943436.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.5322768507986111" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-16 13:33">2025-05-16 11:49</span>&nbsp;
<a href="https://www.cnblogs.com/fanliang11">fanly11</a>&nbsp;
阅读(<span id="post_view_count">160</span>)&nbsp;
评论(<span id="post_comment_count">1</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18879769);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18879769', targetLink: 'https://www.cnblogs.com/fanliang11/p/18879769', title: '凯亚物联网平台发布测试版本' })">举报</a>
</div>
        