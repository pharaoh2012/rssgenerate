
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/yayujs/p/18723762" title="发布于 2025-02-19 11:33">
    <span role="heading" aria-level="2">Svelte 最新中文文档教程（13）—— 样式</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="前言">前言</h2>
<p>Svelte，一个非常“有趣”、用起来“很爽”的前端框架。从 Svelte 诞生之初，就备受开发者的喜爱，根据统计，<strong>从 2019 年到 2024 年，连续 6 年一直是开发者最感兴趣的前端框架 No.1</strong>：</p>
<p><img src="https://yayujs-blog.oss-cn-beijing.aliyuncs.com/405488775-48df16b1-939c-489b-8d52-6071869893f0.png" alt="image.png" loading="lazy"></p>
<p>Svelte 以其独特的编译时优化机制著称，具有<strong>轻量级</strong>、<strong>高性能</strong>、<strong>易上手</strong>等特性，<strong>非常适合构建轻量级 Web 项目，也是我做个人项目的首选技术栈。</strong></p>
<p>目前 Svelte 基于 Svelte 5 发布了最新的官方文档，但却缺少对应的中文文档。为了帮助大家学习 Svelte，为爱发电翻译了官方文档。</p>
<p>我同时搭建了 Svelte 最新的中文文档站点：<a href="https://svelte.yayujs.com" target="_blank" rel="noopener nofollow">https://svelte.yayujs.com</a> ，如果需要辅助学习，也可以入手我的小册<a href="https://s.juejin.cn/ds/iycmvygA/" target="_blank" rel="noopener nofollow">《Svelte 开发指南》</a>，语法篇、实战篇、原理篇三大篇章带你系统掌握 Svelte！</p>
<p>虽说是翻译，但个人并不喜欢严格遵守原文，为了保证中文阅读流畅，会删减部分语句，对难懂的部分也会另做补充解释，希望能给大家带来一个好的中文学习体验。</p>
<p>欢迎围观我的<a href="https://yayujs.com" target="_blank" rel="noopener nofollow">“网页版朋友圈”</a>、加入<a href="https://www.yuque.com/yayu/nice-people/xou8qr" target="_blank" rel="noopener nofollow">“低调务实优秀中国好青年”</a>前端社群，分享技术，带你成长。</p>
<h2 id="作用域样式">作用域样式</h2>
<p>Svelte 组件可以包含一个 <code>&lt;style&gt;</code> 元素，其中包含属于该组件的 CSS。这些 CSS 默认是<em>有作用域的</em>，这意味着样式不会影响到组件外部的页面元素上。</p>
<p>这是通过向受影响的元素添加一个基于组件样式哈希值的类来实现的（例如 <code>svelte-123xyz</code>）。</p>
<pre><code class="language-svelte">&lt;style&gt;
  p {
    /* 这只会影响本组件中的 &lt;p&gt; 元素 */
    color: burlywood;
  }
&lt;/style&gt;
</code></pre>
<h3 id="优先级">优先级</h3>
<p>每个作用域选择器都会因为添加作用域类（例如 <code>.svelte-123xyz</code>）而获得 0-1-0 的<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity" target="_blank" rel="noopener nofollow">优先级</a>增加。这意味着（例如）在组件中定义的 <code>p</code> 选择器会优先于全局样式表中定义的 <code>p</code> 选择器，即使全局样式表是后加载的。</p>
<p>在某些情况下，作用域类必须多次添加到选择器中，但在第一次出现之后，它会以 <code>:where(.svelte-xyz123)</code> 的形式添加，以避免进一步增加优先级。</p>
<h3 id="作用域关键帧">作用域关键帧</h3>
<p>如果组件定义了 <code>@keyframes</code>，名称将会使用相同的哈希方法限定在组件作用域内。组件中的任何 <code>animation</code> 规则也会相应地进行调整：</p>
<pre><code class="language-svelte">&lt;style&gt;
  .bouncy {
    animation: bounce 10s;
  }

  /* 这些关键帧只能在这个组件内部访问 */
  @keyframes bounce {
    /* ... */
  }
&lt;/style&gt;
</code></pre>
<h2 id="全局样式">全局样式</h2>
<h3 id="global">:global(...)</h3>
<p>要在全局范围内为单个选择器应用样式，请使用 <code>:global(...)</code> 修饰符：</p>
<pre><code class="language-svelte">&lt;style&gt;
  :global(body) {
    /* 应用于 &lt;body&gt; */
    margin: 0;
  }

  div :global(strong) {
    /* 应用于属于本组件的 &lt;div&gt; 元素内的
       所有 &lt;strong&gt; 元素，无论这些 &lt;strong&gt;
       属于哪个组件 */
    color: goldenrod;
  }

  p:global(.big.red) {
    /* 应用于属于本组件的所有带有
       `class="big red"` 的 &lt;p&gt; 元素，
       即使该类是以编程方式添加的（比如通过库） */
  }
&lt;/style&gt;
</code></pre>
<p>如果你想创建全局可访问的 @keyframes，你需要在关键帧名称前加上 <code>-global-</code>。</p>
<p>编译时 <code>-global-</code> 部分会被移除，然后在代码的其他地方可以直接使用 <code>my-animation-name</code> 来引用该关键帧。</p>
<pre><code class="language-svelte">&lt;style&gt;
  @keyframes -global-my-animation-name {
    /* 代码写在这里 */
  }
&lt;/style&gt;
</code></pre>
<h3 id="global-1">:global</h3>
<p>要将样式全局应用于一组选择器，可以创建一个 <code>:global {...}</code> 块：</p>
<pre><code class="language-svelte">&lt;style&gt;
  :global {
    /* 应用于你应用中的每个 &lt;div&gt; */
    div { ... }

    /* 应用于你应用中的每个 &lt;p&gt; */
    p { ... }
  }

  .a :global {
    /* 应用于属于本组件中 .a 元素内的
       任何组件中的所有 `.b .c .d` 元素 */
    .b .c .d {...}
  }
&lt;/style&gt;
</code></pre>
<blockquote>
<p>[!NOTE] 上面的第二个示例也可以写成等效的 <code>.a :global .b .c .d</code> 选择器，其中 <code>:global</code> 之后的所有内容都是未限定作用域的，不过更推荐使用嵌套形式。</p>
</blockquote>
<h2 id="自定义属性">自定义属性</h2>
<p>你可以将 CSS 自定义属性（静态和动态的）传递给组件：</p>
<pre><code class="language-svelte">&lt;Slider
  bind:value
  min={0}
  max={100}
  --track-color="black"
  --thumb-color="rgb({r} {g} {b})"
/&gt;
</code></pre>
<p>上面的代码本质上会被转换成这样：</p>
<pre><code class="language-svelte">&lt;svelte-css-wrapper style="display: contents; --track-color: black; --thumb-color: rgb({r} {g} {b})"&gt;
  &lt;Slider
    bind:value
    min={0}
    max={100}
  /&gt;
&lt;/svelte-css-wrapper&gt;
</code></pre>
<p>对于 SVG 元素，它会使用 <code>&lt;g&gt;</code> 替代：</p>
<pre><code class="language-svelte">&lt;g style="--track-color: black; --thumb-color: rgb({r} {g} {b})"&gt;
  &lt;Slider
    bind:value
    min={0}
    max={100}
  /&gt;
&lt;/g&gt;
</code></pre>
<p>在组件内部，我们可以使用 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties" target="_blank" rel="noopener nofollow"><code>var(...)</code></a> 来读取这些自定义属性（并提供后备值）：</p>
<pre><code class="language-svelte">&lt;style&gt;
  .track {
    background: var(--track-color, #aaa);
  }

  .thumb {
    background: var(--thumb-color, blue);
  }
&lt;/style&gt;
</code></pre>
<p>你不<em>必须</em>直接在组件上指定这些值；只要自定义属性在父元素上定义，组件就可以使用它们。通常在全局样式表中的 <code>:root</code> 元素上定义自定义属性，这样它们就可以应用于整个应用程序。</p>
<blockquote>
<p>[!NOTE] 虽然额外的元素不会影响布局，但它<em>会</em>影响任何使用 <code>&gt;</code> 组合器来直接定位组件容器内元素的 CSS 选择器。</p>
</blockquote>
<h2 id="style-元素"><code>&lt;style&gt;</code> 元素</h2>
<p>每个组件只能有一个顶级 <code>&lt;style&gt;</code> 标签。</p>
<p>然而，可以在其他元素或逻辑块内嵌套 <code>&lt;style&gt;</code> 标签。</p>
<p>在这种情况下，<code>&lt;style&gt;</code> 标签将按原样插入到 DOM 中；不会对 <code>&lt;style&gt;</code> 标签进行任何作用域限制或处理。</p>
<pre><code class="language-svelte">&lt;div&gt;
  &lt;style&gt;
    /* 这个 style 标签将按原样插入 */
    div {
      /* 这将应用于 DOM 中的所有 `&lt;div&gt;` 元素 */
      color: red;
    }
  &lt;/style&gt;
&lt;/div&gt;
</code></pre>
<h2 id="svelte-中文文档">Svelte 中文文档</h2>
<p>本篇已收录在掘金专栏 <a href="https://juejin.cn/column/7459299646696374284" target="_blank" rel="noopener nofollow">《Svelte 中文文档》</a>，该系列预计 40 篇。</p>
<p>系统学习 Svelte，欢迎入手小册<a href="https://s.juejin.cn/ds/iycmvygA/" target="_blank" rel="noopener nofollow">《Svelte 开发指南》</a>。语法篇、实战篇、原理篇三大篇章带你系统掌握 Svelte！</p>
<p>此外我还写过 <a href="https://juejin.cn/column/7035531575974592520" target="_blank" rel="noopener nofollow">JavaScript 系列</a>、<a href="https://juejin.cn/column/7029490086710345742" target="_blank" rel="noopener nofollow">TypeScript 系列</a>、<a href="https://juejin.cn/column/7142674773930147853" target="_blank" rel="noopener nofollow">React 系列</a>、<a href="https://juejin.cn/column/7343569488744611849" target="_blank" rel="noopener nofollow">Next.js 系列</a>、<a href="https://juejin.cn/column/7039526067891077151" target="_blank" rel="noopener nofollow">冴羽答读者问</a>等 14 个系列文章， 全系列文章目录：<a href="https://github.com/mqyqingfeng/Blog" target="_blank" rel="noopener nofollow">https://github.com/mqyqingfeng/Blog</a></p>
<p>通过文字建立交流本身就是一种缘分。欢迎围观我的<a href="https://yayujs.com" target="_blank" rel="noopener nofollow">“网页版朋友圈”</a>、加入<a href="https://www.yuque.com/yayu/nice-people/xou8qr" target="_blank" rel="noopener nofollow">“低调务实优秀中国好青年”</a>前端社群，分享技术，带你成长。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="20.37557966340162" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-19 11:34">2025-02-19 11:33</span>&nbsp;
<a href="https://www.cnblogs.com/yayujs">冴羽</a>&nbsp;
阅读(<span id="post_view_count">19</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18723762" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18723762);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18723762', targetLink: 'https://www.cnblogs.com/yayujs/p/18723762', title: 'Svelte 最新中文文档教程（13）—— 样式' })">举报</a>
</div>
        