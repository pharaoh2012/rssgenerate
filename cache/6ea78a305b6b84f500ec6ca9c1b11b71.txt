
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/leelong/p/18728877" title="发布于 2025-02-21 11:06">
    <span role="heading" aria-level="2">使用C#连接MQTT 进行数据接收和数据处理，QoS1 持久会话模式 解决服务掉选数据丢失问题</span>
    

</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p>1、准备工作</p>
<p>在开始写代码之前，我们先要准备下写程序的</p>
<p>　　基础信息：MQTT地址、OrgID(机构ID)、API访问密钥</p>
<p>　　连接模式：QoS1, 持久会话 ，防止服务掉选数据丢失问题，具体模式根据实际情况而定</p>
<p>2、我们先创建个C#的控制台应用程序，然后写入以下代码：</p>
<p>&nbsp;</p>
<div class="cnblogs_Highlighter">
<pre class="brush:csharp;gutter:true;"> // 创建MQTT客户端工厂
        var mqttFactory = new MqttFactory();
        var mqttClient = mqttFactory.CreateMqttClient();

        // 配置MQTT客户端选项
        var options = new MqttClientOptionsBuilder()
            .WithClientId("org-机构id-quickstart")  // 修改客户端ID
            .WithTcpServer("服务器地址", 1883) // 修改服务器地址，使用默认端口
            .WithCredentials("org-机构id", "秘钥") // 修改用户名
            .WithCleanSession(false)  // 添加这行，不清除会话
            .Build(); // 移除 TLS 配置，因为使用的是普通连接

        try
        {
            // 添加连接状态处理
            mqttClient.UseDisconnectedHandler(async e =&gt;
            {
                Console.WriteLine("已断开连接！正在尝试重新连接...");
                await Task.Delay(TimeSpan.FromSeconds(5));
                try
                {
                    await mqttClient.ConnectAsync(options);
                }
                catch
                {
                    Console.WriteLine("重新连接失败");
                }
            });

            // 修改订阅主题以匹配您的格式
            string topic = "/device_sensor_data/机构id/+/+/+/+";
            
            // 添加订阅处理
            mqttClient.UseApplicationMessageReceivedHandler(e =&gt;
            {
                string payload = Encoding.UTF8.GetString(e.ApplicationMessage.Payload);
                string topic = e.ApplicationMessage.Topic ?? "";
                
                // 解析主题数据
                string[] topicParts = topic.Split('/');
                //将解析后的出具进行处理<br>
            });

            // 修改订阅配置
            var subscribeOptions = new MqttClientSubscribeOptionsBuilder()
                .WithTopicFilter(topic, MqttQualityOfServiceLevel.AtLeastOnce)
                .Build();

            // 连接后进行订阅
            await mqttClient.ConnectAsync(options);
            await mqttClient.SubscribeAsync(subscribeOptions);
            Console.WriteLine("已成功连接并订阅主题 (QoS1, 持久会话)");


            // 保持程序运行
            Console.WriteLine("按任意键退出...");
            Console.ReadKey();

            // 断开连接
            await mqttClient.DisconnectAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"发生错误: {ex.Message}");
        }
</pre>
</div>
<p>　　</p>
<p>4、以下是程序接收到数据后的截图</p>
<p><img src="https://img2024.cnblogs.com/blog/425383/202502/425383-20250221105741688-1988371747.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
</div>
<div class="clear"></div>

		</div>
		<div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.7096421304201389" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-21 11:13">2025-02-21 11:06</span>&nbsp;
<a href="https://www.cnblogs.com/leelong">lee429245403</a>&nbsp;
阅读(<span id="post_view_count">23</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18728877" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18728877);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18728877', targetLink: 'https://www.cnblogs.com/leelong/p/18728877', title: '使用C#连接MQTT 进行数据接收和数据处理，QoS1 持久会话模式 解决服务掉选数据丢失问题' })">举报</a>
</div>
	