
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/zjdxr-up/p/18822510" title="发布于 2025-04-12 20:14">
    <span role="heading" aria-level="2">mongo db集群故障选举分析</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p>转载请注明出处：</p>
<h3 class="md-end-block md-heading"><span class="md-pair-s ">一、MongoDB集群基础架构</span></h3>
<h4 class="md-end-block md-heading"><span class="md-pair-s ">1. 副本集（Replica Set）核心原理</span></h4>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-pair-s "><strong>节点角色</strong><span class="md-plain">：</span></span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-pair-s "><strong>Primary</strong><span class="md-plain md-expand">：唯一可写节点，处理所有写操作和默认读请求</span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-pair-s "><strong>Secondary</strong><span class="md-plain">：异步复制Primary数据，可配置为只读节点</span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-pair-s "><strong>Arbiter</strong><span class="md-plain">（可选）：不存储数据，仅参与投票</span></span></p>
</li>
</ul>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-pair-s "><strong>选举机制</strong><span class="md-plain">：</span></span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">基于Raft协议，需<span class="md-pair-s "><strong>多数节点存活</strong><span class="md-plain">（N/2 +1）才能选出Primary</span></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">每个节点有1票，Arbiter无数据但有投票权</span></p>
</li>
</ul>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-pair-s "><strong>数据同步</strong><span class="md-plain">：</span></span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">通过Oplog（操作日志）实现异步复制</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">写操作需满足<span class="md-pair-s"><code>writeConcern</code><span class="md-plain">级别才返回成功</span></span></span></p>
</li>
</ul>
</li>
</ul>
<h4 class="md-end-block md-heading md-focus"><span class="md-pair-s">2. 三节点典型部署</span></h4>
<div class="cnblogs_code">
<pre>Node1: Primary (投票权=<span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">)
Node2: Secondary (投票权</span>=<span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">)
Node3: Secondary</span>/Arbiter (投票权=<span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">)
多数票数(majority)</span>=<span style="color: rgba(128, 0, 128, 1)">2</span></pre>
</div>
<h3 class="md-end-block md-heading"><span class="md-pair-s">二、单节点故障场景分析</span></h3>
<h4 class="md-end-block md-heading"><span class="md-pair-s">1.集群状态变化<span class="md-plain">：</span></span></h4>
<ol class="ol-list">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-pair-s "><strong>剩余节点</strong><span class="md-plain">：2个节点存活（1主1从或2从）。</span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-pair-s "><strong>选举能力</strong><span class="md-plain">：</span></span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">三节点集群的多数（majority）= 2。</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">剩余2个节点仍能形成多数，触发自动选举。</span></p>
</li>
</ul>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-pair-s "><strong>读写能力</strong><span class="md-plain md-expand">：</span></span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">新主节点继续处理<span class="md-pair-s "><strong>写操作</strong><span class="md-plain">（需满足<span class="md-pair-s"><code>w: majority</code><span class="md-plain">）。</span></span></span></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-pair-s "><strong>读操作</strong><span class="md-plain">可正常进行（从新主或剩余从节点）。</span></span></p>
</li>
</ul>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-pair-s "><strong>数据安全</strong><span class="md-plain">：</span></span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">若宕机节点是主节点：已确认的写操作（<span class="md-pair-s"><code>w: majority</code><span class="md-plain">）不会丢失。</span></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">若宕机节点是从节点：主节点继续服务，数据同步暂停直至节点恢复。</span></p>
</li>
</ul>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-pair-s "><strong>恢复流程</strong><span class="md-plain">：</span></span></p>
</li>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">自动故障转移（通常30秒内完成）。</span></p>
</li>
<li class="md-list-item md-focus-container">
<p class="md-end-block md-p md-focus"><span class="md-plain">宕机节点恢复后自动同步增量数据。</span></p>
</li>
</ul>
<li><strong>选举日志：</strong>
<p><img src="https://img2024.cnblogs.com/blog/1110857/202504/1110857-20250412195953421-1352177553.png" alt="" loading="lazy"></p>
</li>
</ol>
<h4 class="md-end-block md-heading"><span class="md-pair-s">2. 故障节点类型</span></h4>
<table class="md-table">
<thead>
<tr class="md-end-block"><th><span class="td-span"><span class="md-pair-s ">故障节点</span></span></th><th><span class="td-span"><span class="md-pair-s ">集群行为</span></span></th><th><span class="td-span"><span class="md-pair-s ">影响范围</span></span></th></tr>
</thead>
<tbody>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-pair-s "><strong>Primary</strong></span></span></td>
<td><span class="td-span"><span class="md-plain">剩余2个Secondary触发选举，30秒内选出新Primary</span></span></td>
<td><span class="td-span"><span class="md-plain">写入中断&lt;30秒，读操作可继续（若客户端配置<span class="md-pair-s"><code>readPreference=secondaryPreferred</code><span class="md-plain">)</span></span></span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-pair-s "><strong>Secondary</strong></span></span></td>
<td><span class="td-span"><span class="md-plain">Primary继续服务，集群标记该节点为<span class="md-pair-s"><code>RECOVERING</code><span class="md-plain">，恢复后自动同步增量数据</span></span></span></span></td>
<td><span class="td-span"><span class="md-plain">无写入中断，读能力降级（少一个读节点）</span></span></td>
</tr>
</tbody>
</table>
<h4 class="md-end-block md-heading"><span class="md-pair-s">3. 数据一致性保障</span></h4>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-pair-s md-expand"><strong>写关注(Write Concern)</strong><span class="md-plain">：</span></span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">若写操作配置<span class="md-pair-s"><code>w: majority</code><span class="md-plain">，即使故障节点未确认，数据也不会丢失</span></span></span></p>
</li>
<li class="md-list-item md-focus-container">
<p class="md-end-block md-p md-focus"><span class="md-plain">示例安全写入命令：</span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">db.products.insert(
  { item: </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">card</span><span style="color: rgba(128, 0, 0, 1)">"</span>, qty: <span style="color: rgba(128, 0, 128, 1)">15</span><span style="color: rgba(0, 0, 0, 1)"> },
  { writeConcern: { w: </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">majority</span><span style="color: rgba(128, 0, 0, 1)">"</span>, j: <span style="color: rgba(0, 0, 255, 1)">true</span> } }  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> j=true表示持久化到磁盘</span>
)</pre>
</div>
</li>
</ul>
</li>
</ul>
<h3 class="md-end-block md-heading"><span class="md-pair-s ">三、双节点故障场景分析</span></h3>
<h4 class="md-end-block md-heading"><span class="md-pair-s">1.集群状态变化<span class="md-plain">：</span></span></h4>
<ol class="ol-list">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-pair-s "><strong>剩余节点</strong><span class="md-plain">：1个节点存活。</span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-pair-s "><strong>选举能力</strong><span class="md-plain">：</span></span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">无法满足多数（2/3），<span class="md-pair-s "><strong>无法选举新主</strong><span class="md-plain">。</span></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">原主节点若存活则继续服务，否则集群无主。</span></p>
</li>
</ul>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-pair-s "><strong>读写能力</strong><span class="md-plain">：</span></span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-pair-s "><strong>写操作</strong><span class="md-plain">：完全不可用（无主节点）。</span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-pair-s "><strong>读操作</strong><span class="md-plain">：</span></span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">若存活节点是主节点：可读（需客户端直连该节点）。</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">若存活节点是从节点：需设置<span class="md-pair-s"><code>readPreference=secondary</code><span class="md-plain">。</span></span></span></p>
</li>
</ul>
</li>
</ul>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-pair-s "><strong>数据风险</strong><span class="md-plain">：</span></span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">若原主节点宕机且未持久化最新数据：可能丢失未复制到从节点的写操作。</span></p>
</li>
</ul>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-pair-s "><strong>恢复选项</strong><span class="md-plain">：</span></span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-pair-s "><strong>自动恢复</strong><span class="md-plain">：需至少一个节点恢复形成多数。</span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-pair-s "><strong>强制恢复</strong><span class="md-plain">（高风险）</span></span></p>
</li>
</ul>
</li>
</ol>
<h4 class="md-end-block md-heading"><span class="md-pair-s">2. 剩余节点状态</span></h4>
<table class="md-table">
<thead>
<tr class="md-end-block"><th><span class="td-span"><span class="md-pair-s ">存活节点</span></span></th><th><span class="td-span"><span class="md-pair-s ">集群状态</span></span></th><th><span class="td-span"><span class="md-pair-s ">恢复方案</span></span></th></tr>
</thead>
<tbody>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">仅Primary</span></span></td>
<td><span class="td-span"><span class="md-plain">失去majority，Primary自动降级为Secondary，集群进入<span class="md-pair-s "><strong>只读模式</strong></span></span></span></td>
<td><span class="td-span"><span class="md-plain">需手动干预：<span class="md-br md-tag"> <span class="md-plain">1. 重启一个故障节点<span class="md-br md-tag"> <span class="md-plain">2. 或强制重组副本集(<span class="md-pair-s"><code>rs.reconfig()</code><span class="md-plain">)</span></span></span></span></span></span></span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">仅Secondary</span></span></td>
<td><span class="td-span"><span class="md-plain">无Primary，所有写入操作失败，读操作需显式指定<span class="md-pair-s"><code>readPreference=secondary</code></span></span></span></td>
<td><span class="td-span"><span class="md-plain">需至少恢复1个节点以形成majority</span></span></td>
</tr>
</tbody>
</table>
<h4 class="md-end-block md-heading"><span class="md-pair-s">3. 数据风险窗口</span></h4>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-pair-s "><strong>潜在丢失数据</strong><span class="md-plain">：</span></span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">故障前写入未达到<span class="md-pair-s"><code>w: majority</code><span class="md-plain">的数据可能丢失</span></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">可通过<span class="md-pair-s"><code>oplog</code><span class="md-plain">检查未复制的操作：</span></span></span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 在Primary上查看oplog时间窗口</span>
<span style="color: rgba(0, 0, 0, 1)">rs.printReplicationInfo()
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 输出示例：oplog first event time -&gt; last event time</span></pre>
</div>
</li>
</ul>
</li>
</ul>
<h3 class="md-end-block md-heading"><span class="md-pair-s ">四、核心机制深度解析</span></h3>
<h4 class="md-end-block md-heading md-focus"><span class="md-pair-s ">1. 选举触发条件</span></h4>
<div class="cnblogs_code">
<pre>  A[节点检测Primary无响应] --&gt;<span style="color: rgba(0, 0, 0, 1)"> B[发起选举请求]
    B </span>--&gt; C{获票数≥majority?<span style="color: rgba(0, 0, 0, 1)">}
    C </span>--&gt;|Yes|<span style="color: rgba(0, 0, 0, 1)"> D[成为新Primary]
    C </span>--&gt;|No| E[等待重试]</pre>
</div>
<h4 class="md-end-block md-heading"><span class="md-pair-s">2. 数据同步流程</span></h4>
<ol class="ol-list" start="">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">Primary将写操作记录到<span class="md-pair-s"><code>local.oplog.rs</code><span class="md-plain">集合</span></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">Secondary定期拉取(<span class="md-pair-s"><code>fetch</code><span class="md-plain">) Primary的oplog</span></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">应用oplog到本地数据集（异步过程）</span></p>
</li>
</ol>
<h4 class="md-end-block md-heading md-focus"><span class="md-pair-s ">3. 故障恢复时序</span></h4>
<div class="cnblogs_code">
<pre>故障检测(10s) → 选举阶段(30s) → 数据同步(依赖网络带宽)</pre>
</div>
<h3 class="md-end-block md-heading"><span class="md-pair-s ">五、生产环境建议</span></h3>
<h4 class="md-end-block md-heading"><span class="md-pair-s ">1. 部署优化</span></h4>
<ul class="ul-list" data-mark="-">
<li class="md-list-item md-focus-container">
<p class="md-end-block md-p md-focus"><span class="md-pair-s "><strong>跨机房容灾</strong><span class="md-plain">：</span></span></p>
<div class="cnblogs_code">
<pre>机房A: Primary +<span style="color: rgba(0, 0, 0, 1)"> Secondary
机房B: Secondary</span></pre>
</div>
</li>
<li class="md-list-item md-focus-container"><span class="md-pair-s md-expand"><strong>优先级配置</strong><span class="md-plain md-expand">：</span></span>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 确保特定节点优先成为Primary</span>
cfg =<span style="color: rgba(0, 0, 0, 1)"> rs.conf()
cfg.members[</span><span style="color: rgba(128, 0, 128, 1)">0</span>].priority = <span style="color: rgba(128, 0, 128, 1)">2</span><span style="color: rgba(0, 0, 0, 1)">
cfg.members[</span><span style="color: rgba(128, 0, 128, 1)">1</span>].priority = <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">
rs.reconfig(cfg)</span></pre>
</div>
<p>以下是一个集群配置下的 ： rs.conf() 配置：</p>
<div class="cnblogs_code">
<pre>rs0:PRIMARY&gt;<span style="color: rgba(0, 0, 0, 1)"> rs.conf()
{
        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">_id</span><span style="color: rgba(128, 0, 0, 1)">"</span> : <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">rs0</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">version</span><span style="color: rgba(128, 0, 0, 1)">"</span> : <span style="color: rgba(128, 0, 128, 1)">222935</span><span style="color: rgba(0, 0, 0, 1)">,
        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">protocolVersion</span><span style="color: rgba(128, 0, 0, 1)">"</span> : NumberLong(<span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">),
        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">writeConcernMajorityJournalDefault</span><span style="color: rgba(128, 0, 0, 1)">"</span> : <span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">,
        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">members</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)"> : [
                {
                        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">_id</span><span style="color: rgba(128, 0, 0, 1)">"</span> : <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">,
                        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">host</span><span style="color: rgba(128, 0, 0, 1)">"</span> : <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">mongo1:27017</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
                        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">arbiterOnly</span><span style="color: rgba(128, 0, 0, 1)">"</span> : <span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">,
                        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">buildIndexes</span><span style="color: rgba(128, 0, 0, 1)">"</span> : <span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">,
                        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">hidden</span><span style="color: rgba(128, 0, 0, 1)">"</span> : <span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">,
                        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">priority</span><span style="color: rgba(128, 0, 0, 1)">"</span> : <span style="color: rgba(128, 0, 128, 1)">2</span><span style="color: rgba(0, 0, 0, 1)">,
                        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">tags</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)"> : {

                        },
                        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">slaveDelay</span><span style="color: rgba(128, 0, 0, 1)">"</span> : NumberLong(<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">),
                        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">votes</span><span style="color: rgba(128, 0, 0, 1)">"</span> : <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">
                },
                {
                        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">_id</span><span style="color: rgba(128, 0, 0, 1)">"</span> : <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">,
                        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">host</span><span style="color: rgba(128, 0, 0, 1)">"</span> : <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">mongo2:27017</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
                        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">arbiterOnly</span><span style="color: rgba(128, 0, 0, 1)">"</span> : <span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">,
                        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">buildIndexes</span><span style="color: rgba(128, 0, 0, 1)">"</span> : <span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">,
                        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">hidden</span><span style="color: rgba(128, 0, 0, 1)">"</span> : <span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">,
                        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">priority</span><span style="color: rgba(128, 0, 0, 1)">"</span> : <span style="color: rgba(128, 0, 128, 1)">2</span><span style="color: rgba(0, 0, 0, 1)">,
                        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">tags</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)"> : {

                        },
                        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">slaveDelay</span><span style="color: rgba(128, 0, 0, 1)">"</span> : NumberLong(<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">),
                        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">votes</span><span style="color: rgba(128, 0, 0, 1)">"</span> : <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">
                },
                {
                        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">_id</span><span style="color: rgba(128, 0, 0, 1)">"</span> : <span style="color: rgba(128, 0, 128, 1)">2</span><span style="color: rgba(0, 0, 0, 1)">,
                        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">host</span><span style="color: rgba(128, 0, 0, 1)">"</span> : <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">mongo3:27017</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
                        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">arbiterOnly</span><span style="color: rgba(128, 0, 0, 1)">"</span> : <span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">,
                        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">buildIndexes</span><span style="color: rgba(128, 0, 0, 1)">"</span> : <span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">,
                        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">hidden</span><span style="color: rgba(128, 0, 0, 1)">"</span> : <span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">,
                        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">priority</span><span style="color: rgba(128, 0, 0, 1)">"</span> : <span style="color: rgba(128, 0, 128, 1)">2</span><span style="color: rgba(0, 0, 0, 1)">,
                        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">tags</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)"> : {

                        },
                        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">slaveDelay</span><span style="color: rgba(128, 0, 0, 1)">"</span> : NumberLong(<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">),
                        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">votes</span><span style="color: rgba(128, 0, 0, 1)">"</span> : <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">
                }
        ],
        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">settings</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)"> : {
                </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">chainingAllowed</span><span style="color: rgba(128, 0, 0, 1)">"</span> : <span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">,
                </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">heartbeatIntervalMillis</span><span style="color: rgba(128, 0, 0, 1)">"</span> : <span style="color: rgba(128, 0, 128, 1)">2000</span><span style="color: rgba(0, 0, 0, 1)">,
                </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">heartbeatTimeoutSecs</span><span style="color: rgba(128, 0, 0, 1)">"</span> : <span style="color: rgba(128, 0, 128, 1)">10</span><span style="color: rgba(0, 0, 0, 1)">,
                </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">electionTimeoutMillis</span><span style="color: rgba(128, 0, 0, 1)">"</span> : <span style="color: rgba(128, 0, 128, 1)">10000</span><span style="color: rgba(0, 0, 0, 1)">,
                </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">catchUpTimeoutMillis</span><span style="color: rgba(128, 0, 0, 1)">"</span> : -<span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">,
                </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">catchUpTakeoverDelayMillis</span><span style="color: rgba(128, 0, 0, 1)">"</span> : <span style="color: rgba(128, 0, 128, 1)">30000</span><span style="color: rgba(0, 0, 0, 1)">,
                </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">getLastErrorModes</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)"> : {

                },
                </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">getLastErrorDefaults</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)"> : {
                        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">w</span><span style="color: rgba(128, 0, 0, 1)">"</span> : <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">,
                        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">wtimeout</span><span style="color: rgba(128, 0, 0, 1)">"</span> : <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">
                },
                </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">replicaSetId</span><span style="color: rgba(128, 0, 0, 1)">"</span> : ObjectId(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">67d7f53d2d42a33b47b36ff2</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
        }
}
rs0:PRIMARY</span>&gt;</pre>
</div>
</li>
</ul>
<h4 class="md-end-block md-heading"><span class="md-pair-s">2. 监控关键指标</span></h4>
<ul class="ul-list" data-mark="-">
<li class="md-list-item md-focus-container">
<p class="md-end-block md-p md-focus"><span class="md-pair-s "><strong>选举相关</strong><span class="md-plain">：</span></span></p>
<div class="cnblogs_code">
<pre>mongostat -e <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">repl_set_name,election_date,term</span><span style="color: rgba(128, 0, 0, 1)">"</span>  # 监控选举事件</pre>
</div>
</li>
<li class="md-list-item md-focus-container"><span class="md-pair-s md-expand"><span class="md-pair-s md-expand"><strong>复制延迟</strong><span class="md-plain md-expand">：</span></span></span>
<div class="cnblogs_code">
<pre>db.adminCommand({ replSetGetStatus: <span style="color: rgba(128, 0, 128, 1)">1</span> }).members.map(m =&gt; m.optimeDate)</pre>
</div>
</li>
</ul>
<h4 class="md-end-block md-heading"><span class="md-pair-s ">3. 灾难恢复方案</span></h4>
<ul class="ul-list" data-mark="-">
<li class="md-list-item md-focus-container">
<p class="md-end-block md-p md-focus"><span class="md-pair-s "><strong>强制恢复单节点集群</strong><span class="md-plain">（极端情况）：</span></span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 在唯一存活的Secondary上执行</span>
rs.reconfig({_id:<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">rs0</span><span style="color: rgba(128, 0, 0, 1)">"</span>, version:<span style="color: rgba(128, 0, 128, 1)">2</span>, members:[{_id:<span style="color: rgba(128, 0, 128, 1)">1</span>, host:<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">single-node:27017</span><span style="color: rgba(128, 0, 0, 1)">"</span>}]}, {force:<span style="color: rgba(0, 0, 255, 1)">true</span>})</pre>
</div>
</li>
</ul>
<h3 class="md-end-block md-heading"><span class="md-pair-s ">六、与传统数据库对比</span></h3>
<table class="md-table" style="height: 169px; width: 1041px">
<thead>
<tr class="md-end-block"><th><span class="td-span"><span class="md-pair-s ">特性</span></span></th><th><span class="td-span"><span class="md-plain">MongoDB副本集</span></span></th><th><span class="td-span"><span class="md-plain">MySQL主从复制</span></span></th></tr>
</thead>
<tbody>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">故障切换</span></span></td>
<td><span class="td-span"><span class="md-plain">自动选举（秒级）</span></span></td>
<td><span class="td-span"><span class="md-plain">需手动提升从库</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">数据一致性</span></span></td>
<td><span class="td-span"><span class="md-plain">最终一致性+可调强度</span></span></td>
<td><span class="td-span"><span class="md-plain">依赖半同步复制配置</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">读写分离</span></span></td>
<td><span class="td-span"><span class="md-plain">原生支持<span class="md-pair-s"><code>readPreference</code></span></span></span></td>
<td><span class="td-span"><span class="md-plain">需中间件实现</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">网络分区容忍</span></span></td>
<td><span class="td-span"><span class="md-plain">优先保证可用性(AP)</span></span></td>
<td><span class="td-span"><span class="md-plain">优先保证一致性(CP)</span></span></td>
</tr>
</tbody>
</table>
<div class="md-hr md-end-block">&nbsp;</div>
<p>&nbsp;</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="1.083655046076389" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-12 20:14">2025-04-12 20:14</span>&nbsp;
<a href="https://www.cnblogs.com/zjdxr-up">香吧香</a>&nbsp;
阅读(<span id="post_view_count">51</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18822510);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18822510', targetLink: 'https://www.cnblogs.com/zjdxr-up/p/18822510', title: 'mongo db集群故障选举分析' })">举报</a>
</div>
        