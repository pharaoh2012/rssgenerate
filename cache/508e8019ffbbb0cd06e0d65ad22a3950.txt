
    <a name="top"></a>
    <h2><a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/fnng/p/18693023" title="发布于 2025-01-28 10:33">
    <span role="heading" aria-level="2">auto-wing将AI应用于自动化项目</span>
    

</a>
</h2>
    <small>
<span id="post-date" data-last-update-days="1.652284717923611" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-28 10:40">2025-01-28 10:33</span>&nbsp;
<a href="https://www.cnblogs.com/fnng">虫师</a>&nbsp;
阅读(<span id="post_view_count">74</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18693023" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18693023);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18693023', targetLink: 'https://www.cnblogs.com/fnng/p/18693023', title: 'auto-wing将AI应用于自动化项目' })">举报</a>
</small>
    <div class="entry">
        <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>GitHub: <a href="https://github.com/SeldomQA/auto-wing" target="_blank" rel="noopener nofollow">https://github.com/SeldomQA/auto-wing</a></p>
<blockquote>
<p>背景：我们之前介绍过 midsence.js AI自动化测试辅助工具，midsence.js的思路我个人是比较认可的。然而，因为它是基于TS语言实现的，更多的软件测试工程师使用Python语言！我来用Python实现一个满足更多测试工程师的需求。</p>
</blockquote>
<h2 id="auto-wing的定位">auto-wing的定位</h2>
<p>既然借鉴了midsence.js的思路，为什么不叫midsencepy？因为我希望创建的AI自动化辅助工具和midsence.js有一些差异。</p>
<ol>
<li>他应该可以方便的应用到现有的自动化项目中。毕竟我们已经编写了大量的自动化项目，可以方便的接入AI是最好的。</li>
<li>他应该支持更多国内的LLM。国内的LLM并不弱了好吧！这两天不是正在被<code>deepseek-v3</code>刷屏。方便又便宜对吧！？</li>
<li>他应该支持<code>playwright</code>和<code>selenium</code>；大部分工具都是基于<code>playwright</code>, 然而<code>selenium</code>似乎被抛弃了，我来给<code>selenium</code>上个呼吸机。</li>
</ol>
<p>很高兴，我趁着大过年在家撸出来了，我这么为<code>测试工程师</code>群体着想，GitHub加个⭐不过分吧！</p>
<p>为什么叫 auto-wing? 那当然是给你的自动化测试插上AI的翅膀 🪽，直接原地起飞，哈哈！</p>
<h2 id="特性">特性</h2>
<p>⭐ 支持多种操作：<code>ai_action</code>、<code>ai_query</code>、<code>ai_assert</code>。</p>
<p>⭐ 支持多模型：<code>openai</code>、<code>qwen</code> 和 <code>deepseek</code>。</p>
<p>⭐ 支持 <code>playwright</code>、<code>selenium</code>。</p>
<p>⭐ 方便的和现有自动化项目（<code>pytest</code>、<code>unittest</code>）集成。</p>
<h3 id="安装">安装</h3>
<pre><code class="language-shell">pip install autowing
</code></pre>
<h3 id="设置环境变量">设置环境变量</h3>
<p><strong>方法一</strong></p>
<p>申请LLM需要的key，在项目的根目录下创建<code>.env</code>文件。推荐<code>deepseek</code>，一是便宜又强大（没错，我就是在蹭蹭DeepSeek）。</p>
<ul>
<li>DeepSeek: <a href="https://platform.deepseek.com/" target="_blank" rel="noopener nofollow">https://platform.deepseek.com/</a></li>
</ul>
<pre><code class="language-ini">#.env
AUTOWING_MODEL_PROVIDER=deepseek
DEEPSEEK_API_KEY=sk-abdefghijklmnopqrstwvwxyz0123456789
</code></pre>
<p><strong>方法二</strong></p>
<blockquote>
<p>如果不想使用python-dotenv配置环境变量，可以直接配置环境变量。</p>
</blockquote>
<pre><code class="language-shell">export AUTOWING_MODEL_PROVIDER=deepseek
export DEEPSEEK_API_KEY=sk-abdefghijklmnopqrstwvwxyz0123456789
</code></pre>
<h2 id="使用示例">使用示例</h2>
<p>注： <code>pytest</code> 、<code>unittest</code> 和 <code>playwright</code>、<code>selenium</code>可以两两任意组合。</p>
<ul>
<li>pytest + playwright 示例</li>
</ul>
<pre><code class="language-python">"""
pytest example for Playwright with AI automation.
"""
import pytest
from playwright.sync_api import Page, sync_playwright
from autowing.playwright.fixture import create_fixture

from dotenv import load_dotenv


@pytest.fixture(scope="session")
def page():
    """
    playwright fixture
    """
    # loading .env file
    load_dotenv()
    with sync_playwright() as p:
        browser = p.chromium.launch(headless=False)
        context = browser.new_context()
        page = context.new_page()
        yield page
        context.close()
        browser.close()


@pytest.fixture
def ai(page):
    """
    ai fixture
    """
    ai_fixture = create_fixture()
    return ai_fixture(page)


def test_bing_search(page: Page, ai):
    """
    Test Bing search functionality using AI-driven automation.
    This test demonstrates:
    1. Navigating to Bing
    2. Performing a search
    3. Verifying search results
    """
    page.goto("https://cn.bing.com")

    ai.ai_action('搜索输入框输入"playwright"关键字，并回车')
    page.wait_for_timeout(3000)

    items = ai.ai_query('string[], 搜索结果列表中包含"playwright"相关的标题')
    print("query", items)

    assert len(items) &gt; 1

    print("assert")
    assert ai.ai_assert('检查搜索结果列表第一条标题是否包含"playwright"字符串')
</code></pre>
<ul>
<li>unittest + selenium 示例</li>
</ul>
<pre><code class="language-python">"""
Unittest example for Selenium with AI automation.
"""
import unittest
import time
from selenium import webdriver
from autowing.selenium.fixture import create_fixture
from dotenv import load_dotenv


class TestBingSearch(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        # load .env file
        load_dotenv()
        # Initialize Edge WebDriver
        cls.driver = webdriver.Edge()
        # Create AI fixture
        ai_fixture = create_fixture()
        cls.ai = ai_fixture(cls.driver)

    @classmethod
    def tearDownClass(cls):
        cls.driver.quit()

    def test_01_bing_search(self):
        """
        Test Bing search functionality using AI-driven automation.

        This test demonstrates:
        1. Navigating to Bing
        2. Performing a search
        3. Verifying search results
        """
        self.driver.get("https://cn.bing.com")

        self.ai.ai_action('搜索输入框输入"playwright"关键字，并回车')
        time.sleep(3)

        items = self.ai.ai_query('string[], 搜索结果列表中包含"playwright"相关的标题')
        print("query", items)

        self.assertGreater(len(items), 1)

        self.assertTrue(
            self.ai.ai_assert('检查搜索结果列表第一条标题是否包含"playwright"字符串')
        )


if __name__ == '__main__':
    unittest.main()
</code></pre>
<h2 id="qa">Q/A</h2>
<ol>
<li>App是否支持？有计划支持。</li>
<li><code>auto-wing</code>刚发布，肯定还有不少坑，加了我微信的已经推动项目更新了，而你只能发个评论默默等回复。</li>
<li><code>auto-wing</code>稳定之后，<code>seldom</code>和<code>lounger</code>项目也会同步集成。</li>
<li>最后，祝福大家：新年快乐~！。</li>
</ol>

</div>
<div class="clear"></div>

        <div class="clear"></div>
        
</div>
    <ul class="postmetadata">
        <vc:categories-tags blog-app="fnng" blog-id="91739" post-id="18693023"></vc:categories-tags>
    </ul>
