
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/vipstone/p/18861538" title="发布于 2025-05-06 15:09">
    <span role="heading" aria-level="2">LangChain4j比SpringAI强在哪？一文读懂</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>LangChain4j 和 Spring AI 是 Java 生态中实现大模型应用开发的两个最重要的框架，但二者的区别是啥？生产级别又该使用哪种框架？令很多人犯了难，所以本文就来浅聊一下，希望给大家在技术选型时有一个简单的参考。</p>
<h2 id="1功能对比">1.功能对比</h2>
<p>LangChain4j 和 Spring AI 的功能是比较类似的，甚至两者可以配合使用，例如使用 Spring AI 实现 MCP 服务器端，再使用 LangChain4j 实现 MCP 客户端调用 Spring AI，二者可以无缝对接。那二者的区别是啥呢？</p>
<p>总体来说，<strong>LangChain4j 提供的功能更多</strong>，例如实现 RAG 功能时，LangChain4j 提供了三种模式：</p>
<ol>
<li>简单模式</li>
<li>原生模式</li>
<li>高级模式</li>
</ol>
<p>在后两种模式实现时提供了：</p>
<ol>
<li>文本加载器。</li>
<li>文档解析器，可以实现多种文本格式的自动解析，例如PDF、DOC、TXT、MD、HTML 等格式的自动解析。</li>
<li>文本转换器</li>
<li>文本分割器</li>
</ol>
<p>每个细节和模块的职责都定义的很清楚，所以<strong>实现复杂功能和生产级别业务时更推荐使用 LangChain4j</strong>。</p>
<h2 id="2使用和学习成本">2.使用和学习成本</h2>
<p>LangChain4j 的使用和学习成本比 Spring AI 高很多，举个例子，例如 Spring AI 要实现流式对话，只需要一行代码就搞定了：</p>
<pre><code class="language-java">@RequestMapping(value = "/streamChat", produces = "text/event-stream")
public Flux&lt;String&gt; streamChat(@RequestParam(value = "msg") String msg) {
    return chatModel.stream(msg);
}
</code></pre>
<p>而 LangChain4j 实现步骤如下：</p>
<ol>
<li>添加 langchain4j-reactor 依赖。</li>
<li>设置配置文件，配置 streaming-chat-model api-key 和 model-name。</li>
<li>创建 AI Service 并返回 Flux 对象。</li>
<li>调用 Ai Service 才能实现流式输出。</li>
</ol>
<p>具体实现这里就不列举了，大家可以看出来 LangChain4j 的实现复杂度了吧？</p>
<p>类似的场景还有很多，例如 Spring AI 实现 MCP Client 只需要添加依赖，设置配置信息，然后一行 defaultTools 或 tools 设置就可以实现了，如下代码：</p>
<pre><code class="language-java">ChatClient.builder(chatModel)
            .defaultTools(tools.getToolCallbacks()) 
            .build();
</code></pre>
<p>但 LangChain4j 的实现就非常复杂了，除了添加依赖之后，你还需要：</p>
<ol>
<li>创建传输协议 McpTransport。</li>
<li>创建 MCP 客户端 McpClient。</li>
<li>创建 Tools（提供者）对象 ToolProvider。</li>
<li>构建 AiService。</li>
<li>执行 MCP Server 调用。</li>
</ol>
<p>具体实现代码如下：</p>
<pre><code class="language-java">@RequestMapping("/chat")
public String chat(@RequestParam String question) {
    // 1.创建传输协议
    McpTransport transport = new HttpMcpTransport.Builder()
            .sseUrl("http://localhost:8686/sse")
            .logRequests(true) // if you want to see the traffic in the log
            .logResponses(true)
            .build();
    // 2.创建 MCP 客户端
    McpClient mcpClient = new DefaultMcpClient.Builder()
            .transport(transport)
            .build();
    // 3.创建 Tools（提供者）对象
    ToolProvider toolProvider = McpToolProvider.builder()
            .mcpClients(List.of(mcpClient))
            .build();
    // 4.构建 AiService
    ToolsAiService aiService = AiServices.builder(ToolsAiService.class)
            .chatLanguageModel(chatModel)
            .toolProvider(toolProvider)
            .build();
    // 5.调用 MCP Server
    return aiService.chat(question);
}
</code></pre>
<h3 id="小结">小结</h3>
<p>除了 LangChain4j 的使用复杂之外，LangChain4j 的文档也不全，要么是没有关键实现代码案例、要么是干脆文档写的都是错的，LangChain4j 的坑比较多，最后只能通过看最新的源码才能解决和使用相关功能，所以 LangChain4j 学习和使用成本是非常高的。</p>
<h2 id="3spring-生态支持性">3.Spring 生态支持性</h2>
<p><strong>Spring AI 是由 Spring 官方提供的，所以它对于整个 Spring 生态的支持是更好的</strong>，而且稳定性更好；而 LangChain4j 除了支持 Spring 之外还支持 Java 原生写法，以及 Quarkus 框架，<strong>但 LangChain4j 整体对于 Spring 生态的支持就要差一些了</strong>，例如它里面的 ImageModel 都没有提供 Spring Boot 自动装配的实现，还有一些大模型例如智普 AI 根本没有提供 Spring Boot 的支持等。</p>
<h2 id="小结-1">小结</h2>
<p>如果是简单功能、开发周期又紧可以使用 Spring AI；如果功能复杂，且定制型要求比较多，可以使用功能和灵活度更高的 LangChain4j。但使用 LangChain4j 这就意味着你需要忍受 LangChain4j 不够简洁的写法，以及学习和使用成本比较高的问题。</p>
<blockquote>
<p>本文已收录到我的技术小站 <a href="https://www.javacn.site" target="_blank" rel="noopener nofollow">www.javacn.site</a>，其中包含的内容有：Spring AI、LangChain4j、MCP、Function Call、RAG、向量数据库、Prompt、多模态、向量数据库、嵌入模型等内容。</p>
</blockquote>

</div>
<div id="MySignature" role="contentinfo">
    <div style="text-align: center; color: red">
关注下面二维码，订阅更多精彩内容。
<br>
<img style="margin-left: 0px" src="https://images.cnblogs.com/cnblogs_com/vipstone/848916/o_211225130402_gognzhonghao.jpg">
</div>

<div style="display: none">
    <img src="http://icdn.apigo.cn/gitchat/rabbitmq.png?imageView2/0/w/500/h/400">
</div>
<div style="margin-bottom: 50px; display: none">

<img title="微信打赏" src="http://icdn.apigo.cn/myinfo/wchat-pay.png" alt="微信打赏">
<br>

<div style="display: none">
<span style="display: block; position: absolute; height: 40px; top: 50%; margin-top: -20px">关注公众号（加好友）：</span>

<img style="margin-left: 144px" src="http://icdn.apigo.cn/gongzhonghao2.png?imageView2/0/w/120/h/120">
</div>
<p></p>

<div id="AllanboltSignature">
    <p style="border-top: #e0e0e0 1px dashed; border-right: #e0e0e0 1px dashed; border-bottom: #e0e0e0 1px dashed; border-left: #e0e0e0 1px dashed; padding-top: 10px; padding-right: 10px; padding-bottom: 10px; padding-left: 60px; background: url(&quot;https://images.cnblogs.com/cnblogs_com/lloydsheng/239039/o_copyright.gif&quot;) #e5f1f4 no-repeat 1% 50%; font-family: 微软雅黑; font-size: 11px" id="PSignature">
        <br> 作者：
        <a href="http://vipstone.cnblogs.com/" target="_blank">王磊的博客</a>
        <br> 出处：
        <a href="http://vipstone.cnblogs.com/" target="_blank">http://vipstone.cnblogs.com/</a>
        <br>
    </p>
</div></div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.39250025829976853" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-06 15:09">2025-05-06 15:09</span>&nbsp;
<a href="https://www.cnblogs.com/vipstone">磊哥|www.javacn.site</a>&nbsp;
阅读(<span id="post_view_count">65</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18861538);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18861538', targetLink: 'https://www.cnblogs.com/vipstone/p/18861538', title: 'LangChain4j比SpringAI强在哪？一文读懂' })">举报</a>
</div>
        