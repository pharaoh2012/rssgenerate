
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/xwz1024/p/18966141" title="发布于 2025-07-04 18:40">
    <span role="heading" aria-level="2">Django+DRF 实战：从异常捕获到自定义错误信息</span>
    

</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			    <div id="cnblogs_post_description" style="display: none">
        <img src="https://img2024.cnblogs.com/blog/1565852/202507/1565852-20250704183950222-1728389469.png" alt="Django+DRF 实战：从异常捕获到自定义错误信息" class="desc_img">
        本文介绍了DRF（Django REST framework）中的异常处理机制，重点讲解了内置异常类ValidationError的使用场景与示例。同时通过用户注册功能的实战演示，展示了如何在序列化器中自定义参数校验规则，并在视图中捕获并返回结构化的错误信息，提升接口的健壮性与用户体验。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="一drf-异常">一、DRF 异常</h2>
<h3 id="介绍">介绍</h3>
<p><code>APIException</code> 类是 DRF 异常的基类。通过继承APIException，DRF 提供了多种内置异常类。</p>
<ul>
<li><code>ParseError</code>：当请求解析失败时抛出。</li>
<li><code>AuthenticationFailed</code>：认证失败时会出现这个异常。</li>
<li><code>NotAuthenticated</code>：未认证的用户访问需要权限的资源时触发。</li>
<li><code>PermissionDenied</code>：权限被拒绝时抛出该异常。</li>
<li><code>NotFound</code>：请求的资源不存在时出现此异常。</li>
<li><code>MethodNotAllowed</code>：使用不支持的 HTTP 方法时触发。</li>
<li><code>NotAcceptable</code>：无法满足请求的 <code>Accept</code> 标头时抛出。</li>
<li><code>Throttled</code>：请求被限流时会出现这个异常。</li>
<li><code>ValidationError</code>：数据验证失败时触发。</li>
</ul>
<p>通过继承 <code>APIException</code>  类，可以实现自定义（业务）异常。并根据业务需求在视图层返回。但这种方式比较麻烦，不太推荐。</p>
<pre><code class="language-python">from rest_framework.exceptions import APIException

class ServiceUnavailable(APIException):
    status_code = 503
    default_detail = '服务暂不可用，请稍后重试。'
    default_code = 'service_unavailable'
</code></pre>
<h3 id="validationerror-异常"><code>ValidationError</code> 异常</h3>
<p><code>rest_framework.exceptions.ValidationError</code>异常，一般用于序列化器，在数据验证失败时自动触发。</p>
<ul>
<li>语法：<code>ValidationError(detail=None, code=None)</code></li>
<li>属性<code>status_code</code>：默认为<code>status.HTTP_400_BAD_REQUEST</code></li>
<li>属性<code>detail</code>：默认为<code>_('Invalid input.')</code>。支持多种格式的错误信息，包括：
<ul>
<li>字符串：会被转换为包含该字符串的列表。</li>
<li>列表：代表多个错误信息。</li>
<li>字典：指定字段级错误，键为字段名，值为对应字段的错误信息。</li>
</ul>
</li>
</ul>
<p>手动触发<code>ValidationError</code>异常示例</p>
<pre><code class="language-python">from rest_framework import serializers
raise serializers.ValidationError('This field must be an integer value.')
# 或
raise serializers.ValidationError({'name': 'Please enter a valid name.'})
</code></pre>
<h2 id="二validationerror-异常实战">二、<code>ValidationError</code> 异常实战</h2>
<h3 id="实战场景">实战场景</h3>
<p>对请求参数校验，并在不符合要求时返回自定义错误信息。例如：在用户注册的时候，对用户名、昵称和密码进行校验，校验失败时返回自定义的错误信息。</p>
<h3 id="定义序列化器">定义序列化器</h3>
<p>定义用户注册序列化器，用户请求参数校验失败时，返回自定义错误信息</p>
<ul>
<li>校验用户名由字母数字组成、最小长度和最大长度</li>
<li>校验昵称最小长度和最大长度</li>
<li>校对密码最小长度和最大长度</li>
</ul>
<p><img alt="image-20250704161215120" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1565852/202507/1565852-20250704183843603-1574665582.png" class="lazyload"></p>
<h3 id="定义视图">定义视图</h3>
<p>定义用户注册视图，调用序列化器的<code>is_valid()</code>方法，对用户请求参数校验</p>
<p><img alt="image-20250704175020313" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1565852/202507/1565852-20250704183854957-1794401910.png" class="lazyload"></p>
<h3 id="实战效果">实战效果</h3>
<p>用户名校验失败：用户名中含有下划线</p>
<p><img alt="image-20250704162315656" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1565852/202507/1565852-20250704183905181-2043654339.png" class="lazyload"></p>
<p>昵称校验失败：昵称太短</p>
<p><img alt="image-20250704162537164" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1565852/202507/1565852-20250704183911589-1127138386.png" class="lazyload"></p>
<p>密码校验失败：密码太长</p>
<p><img alt="image-20250704162951596" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1565852/202507/1565852-20250704183918322-256117065.png" class="lazyload"></p>
<p><a href="https://gitee.com/zhulj993/mars-mgn/blob/master/mysite/myapp_system/auth/serializers.py" target="_blank" rel="noopener nofollow">点击查看完整代码</a></p>
<hr>
<p>您正在阅读的是《<strong>Django从入门到实战</strong>》专栏！关注不迷路~</p>

</div>
<div class="clear"></div>

		</div>
		<div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-07-04 18:41">2025-07-04 18:40</span>&nbsp;
<a href="https://www.cnblogs.com/xwz1024">小王子1024</a>&nbsp;
阅读(<span id="post_view_count">51</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18966141);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18966141', targetLink: 'https://www.cnblogs.com/xwz1024/p/18966141', title: 'Django+DRF 实战：从异常捕获到自定义错误信息' })">举报</a>
</div>
	