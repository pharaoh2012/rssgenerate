
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/xwz1024/p/18958122" title="发布于 2025-06-30 17:03">
    <span role="heading" aria-level="2">Django数据库配置避坑指南：从初始化到生产环境的实战优化</span>
    

</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			    <div id="cnblogs_post_description" style="display: none">
        <img src="https://img2024.cnblogs.com/blog/1565852/202506/1565852-20250630170243144-815319143.png" alt="Django数据库配置避坑指南：从初始化到生产环境的实战优化" class="desc_img">
        本文介绍了Django数据库配置与初始化实战，涵盖MySQL等主流数据库的配置方法及常见问题处理。内容包括数据库连接设置、驱动安装、配置检查、数据表生成、初始数据导入导出，并提供真实项目部署场景的操作步骤与示例代码，适用于开发、测试及生产环境搭建。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="一数据库配置">一、数据库配置</h2>
<h3 id="介绍">介绍</h3>
<p>Django 4.2 支持多种数据库后端</p>
<table>
<thead>
<tr>
<th><strong>数据库类型</strong></th>
<th><strong>推荐版本</strong></th>
<th><strong>官方支持</strong></th>
<th><strong>驱动 / 后端</strong></th>
<th><strong>默认端口</strong></th>
<th><strong>适用场景</strong></th>
<th><strong>备注</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>PostgreSQL</strong></td>
<td>12+</td>
<td>✅</td>
<td><code>psycopg2-binary</code></td>
<td>5432</td>
<td>生产、开发、测试</td>
<td>支持高级字段类型（JSONField、ArrayField）</td>
</tr>
<tr>
<td><strong>MySQL</strong></td>
<td>5.7+（含 8.0）</td>
<td>✅</td>
<td><code>mysqlclient</code> 或 <code>mysql-connector-python</code></td>
<td>3306</td>
<td>生产、开发</td>
<td>严格模式默认启用</td>
</tr>
<tr>
<td><strong>SQLite</strong></td>
<td>3.35+</td>
<td>✅</td>
<td>内置（无需额外驱动）</td>
<td>无需端口</td>
<td>开发、测试</td>
<td>轻量级，不适合高并发生产环境</td>
</tr>
<tr>
<td><strong>Oracle</strong></td>
<td>12.2+</td>
<td>✅</td>
<td><code>cx_Oracle</code></td>
<td>1521</td>
<td>企业级应用</td>
<td>配置较复杂，需额外依赖</td>
</tr>
<tr>
<td><strong>Microsoft SQL Server</strong></td>
<td>2017+</td>
<td>❌</td>
<td><code>django-pyodbc-azure</code></td>
<td>1433</td>
<td>企业级应用</td>
<td>第三方后端支持</td>
</tr>
<tr>
<td><strong>Firebird</strong></td>
<td>3.0+</td>
<td>❌</td>
<td><code>django-firebird</code></td>
<td>3050</td>
<td>legacy 系统</td>
<td>第三方后端支持</td>
</tr>
<tr>
<td><strong>TimescaleDB</strong></td>
<td>2.0+</td>
<td>❌</td>
<td>基于 PostgreSQL</td>
<td>5432</td>
<td>时间序列数据</td>
<td>需额外配置</td>
</tr>
</tbody>
</table>
<h3 id="配置mysql数据库">配置MySQL数据库</h3>
<p>Django项目配置文件：mysite\mysite\settings.py</p>
<p>实战示例：</p>
<pre><code class="language-python">### 数据库配置
DATABASE_HOST = "127.0.0.1"  # 数据库地址
DATABASE_PORT = "3306"  # 数据库端口
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": "mars-mgn",
        "USER": "root",
        "PASSWORD": "@d9Kf2!x",
        "HOST": DATABASE_HOST,
        "PORT": DATABASE_PORT,
        "OPTIONS": {"init_command": "SET time_zone='+08:00'"},
    }
}
</code></pre>
<h3 id="安装mysql驱动">安装MySQL驱动</h3>
<p>推荐使用<code>mysqlclient</code>驱动。</p>
<p>Windows开发环境安装<code>mysqlclient</code>驱动</p>
<pre><code class="language-sh">pip install mysqlclient
</code></pre>
<p>Linux生产环境安装<code>mysqlclient</code>驱动</p>
<pre><code class="language-sh"># Debian / Ubuntu操作系统：
apt update
apt install python3-dev default-libmysqlclient-dev build-essential pkg-config 
pip install mysqlclient

# Red Hat / CentOS操作系统：
sudo yum install python3-devel mysql-devel pkgconfig
pip install mysqlclient
</code></pre>
<h3 id="配置检查">配置检查</h3>
<p>下面命令检查你的项目配置是否符合规范，包括数据库连接。如果数据库配置错误或无法连接，会提示相关错误。</p>
<pre><code class="language-sh"># 进入Django项目根目录（即包含manage.py的目录）
python manage.py check --database default
</code></pre>
<h3 id="排错指南">排错指南</h3>
<p>错误描述：启动Django项目时，提示如下</p>
<pre><code class="language-sh">django.core.exceptions.ImproperlyConfigured: Error loading MySQLdb module.
Did you install mysqlclient?
</code></pre>
<p>解决方法：尝试降低或升级mysqlclient版本。例如从2.2.4版本，降低到2.2.0版本。</p>
<ul>
<li>ubuntu22.04 + python3.9.20 + Django4.2.7 + mysqlclient2.2.0 测试成功</li>
<li>ubuntu22.04 + python3.9.20 + Django4.2.7 + mysqlclient2.2.4 测试失败</li>
</ul>
<pre><code class="language-sh">pip show mysqlclient
pip install mysqlclient==2.2.0
</code></pre>
<p>参考资料：<a href="https://github.com/PyMySQL/mysqlclient" target="_blank" rel="noopener nofollow">mysqlclient 安装文档</a></p>
<h2 id="二数据库初始化">二、数据库初始化</h2>
<h3 id="介绍-1">介绍</h3>
<p>数据库初始化包括两部分</p>
<ol>
<li>生成数据库表</li>
<li>向数据库表添加初始数据</li>
</ol>
<h3 id="生成数据库表">生成数据库表</h3>
<p>根据模型定义生成数据库迁移文件</p>
<pre><code class="language-bash">python manage.py makemigrations
</code></pre>
<p>执行数据库迁移，将迁移文件应用到数据库</p>
<pre><code class="language-bash">python manage.py migrate
</code></pre>
<h3 id="向数据库表添加初始数据">向数据库表添加初始数据</h3>
<p>在 Django 中，<strong>Fixtures</strong> 允许你将数据库中的数据导出，或加载到数据库中，通常用于测试、初始化数据库或迁移数据。</p>
<p>导出命令</p>
<ul>
<li>在应用APP下 ，创建 <code>fixtures</code> 目录，执行下面命令。其中，myapp 替换为实际的Django APP名称</li>
</ul>
<pre><code class="language-sh"># 进入Django项目根目录（包含manage.py的目录）
python manage.py dumpdata myapp --indent=2 &gt; myapp/fixtures/myapp.json
</code></pre>
<p>导入命令</p>
<pre><code class="language-sh"># 进入Django项目根目录（包含manage.py的目录）
python manage.py loaddata myapp.json
</code></pre>
<p>参考资料：<a href="https://docs.djangoproject.com/zh-hans/4.2/topics/db/fixtures/" target="_blank" rel="noopener nofollow">Django 辅助工具</a></p>
<h2 id="三数据库初始化实战">三、数据库初始化实战</h2>
<h3 id="实战场景">实战场景</h3>
<p>在Django后台管理项目中，<code>myapp_system</code>和<code>myapp_infra</code>是两个Django的应用。</p>
<ul>
<li>在项目开发时，向数据库添加了菜单、菜单权限、RBAC权限角色等初始化数据。如下图所示：</li>
</ul>
<p><img alt="image-20250628172414919" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1565852/202506/1565852-20250630170045745-728744509.png" class="lazyload"></p>
<ul>
<li>在项目生产部署时，需要将上述初始数据导入到生产环境的数据库。</li>
</ul>
<h3 id="导出数据">导出数据</h3>
<p>在开发环境，导出数据库步骤：</p>
<ul>
<li>在应用APP下 ，创建 <code>fixtures</code> 目录。<code>myapp_system</code>和<code>myapp_infra</code>是两个Django的应用，分别在其下创建 <code>fixtures</code>目录</li>
</ul>
<p><img alt="image-20250628165551352" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1565852/202506/1565852-20250630170101871-1956059227.png" class="lazyload"></p>
<ul>
<li>进入Django项目根目录（包含manage.py的目录），执行下面命令</li>
</ul>
<pre><code class="language-sh"># 分别导出`myapp_system`和`myapp_infra`是两个Django的应用的初始数据
python manage.py dumpdata myapp_system --indent=2 &gt; myapp_system/fixtures/myapp_system.json
python manage.py dumpdata myapp_infra --indent=2 &gt; myapp_infra/fixtures/myapp_infra.json

# 导出有集成其它第三方APP的初始数据
python manage.py dumpdata django_celery_beat --indent=2 &gt; myapp_infra/fixtures/django_celery_beat.json
python manage.py dumpdata django_celery_results --indent=2 &gt; myapp_infra/fixtures/django_celery_results.json
</code></pre>
<ul>
<li>转换格式：上述导出的文件格如果是<code>UTF-16 LE</code>编码，需要手动转换为<code>UTF-8</code>编码。</li>
</ul>
<p>格式转换步骤：</p>
<ul>
<li>在 VS Code 中，打开上述导出的文件。查看右下角，显示的编码格式。</li>
</ul>
<p><img alt="image-20250628171709525" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1565852/202506/1565852-20250630170114142-1546010028.png" class="lazyload"></p>
<ul>
<li>点击右下角的这个编码格式——选择<code>Save with Encoding</code>——<code>UTF-8</code></li>
</ul>
<h3 id="加载数据">加载数据</h3>
<p>项目生产部署时，向数据库导入初始数据</p>
<pre><code class="language-sh"># 进入Django项目根目录（包含manage.py的目录），执行下面命令
# Django 会在每个安装的应用程序的 `fixtures` 目录中搜索
python manage.py loaddata myapp_system.json myapp_infra.json
python manage.py loaddata django_celery_beat.json django_celery_results.json
</code></pre>
<p>数据导入后效果：</p>
<p><img alt="image-20250630112735811" loading="lazy" data-src="https://img2024.cnblogs.com/blog/1565852/202506/1565852-20250630170124402-1353102672.png" class="lazyload"></p>
<p><a href="https://gitee.com/zhulj993/mars-mgn/blob/master/mysite/mysite/settings.py" target="_blank" rel="noopener nofollow">点击查看完整代码</a></p>
<hr>
<p>您正在阅读的是《<strong>Django从入门到实战</strong>》专栏！关注不迷路~</p>

</div>
<div class="clear"></div>

		</div>
		<div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-06-30 17:03">2025-06-30 17:03</span>&nbsp;
<a href="https://www.cnblogs.com/xwz1024">小王子1024</a>&nbsp;
阅读(<span id="post_view_count">62</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18958122);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18958122', targetLink: 'https://www.cnblogs.com/xwz1024/p/18958122', title: 'Django数据库配置避坑指南：从初始化到生产环境的实战优化' })">举报</a>
</div>
	