
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/vipstone/p/19027164" title="发布于 2025-08-07 17:04">
    <span role="heading" aria-level="2">超实用！一篇文章讲透分布式锁，建议收藏！</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>分布式锁是在分布式系统环境下，确保多个节点（可能位于不同机器或不同地理位置）对共享资源的互斥访问，从而避免数据不一致和竞争条件。</p>
<p>它是现代微服务应用（分布式应用）架构解决并发控制问题的关键技术，也是面试中的常客了，今天咱们来盘点一下分布式锁的 3 种常见实现方案。</p>
<h2 id="1基于redis的分布式锁">1.基于Redis的分布式锁</h2>
<p>这是分布式锁最常见的实现方案，因为 Redis 本身为分布式组件，所以 Redis 实现的锁就天然的分布式锁：</p>
<p><img src="https://img2024.cnblogs.com/blog/172074/202508/172074-20250807170407742-818628619.png" alt="1" loading="lazy"></p>
<p>基于 Redis 的分布式的实现方案也有以下几种：</p>
<ol>
<li><strong>setnx（set if Not eXists）</strong>：尝试设置键 key 的值为 value，但如果 key 已经存在，则不会执行任何操作并返回 0，如果 key 不存在则加锁成功。
<ul>
<li><strong>缺陷</strong>：存在死锁问题、锁误删问题、不可重入问题、锁无法自动续期问题。</li>
</ul>
</li>
<li><strong>set <strong><strong>nx</strong></strong> ex/px</strong>：setnx 升级版本，Redis 2.6 版本后才能支持此语法。尝试加锁和设置锁超时时间，使用案例 set key value nx px 3000。
<ul>
<li><strong>缺陷</strong>：存在锁误删问题、不可重入问题、锁无法自动续期问题。</li>
</ul>
</li>
<li><strong>Lua 脚本</strong>：解决锁重入的问题
<ul>
<li><strong>缺陷</strong>：实现复杂、且存在锁无法自动续期问题。</li>
</ul>
</li>
<li><strong>Redisson 框架</strong>：基于 Redis 实现分布式锁的开源框架。其实现简单、不存在锁重入和锁续期等问题。</li>
</ol>
<p><strong>可用于生成环境的实现方式为 Redisson 框架实现的分布式锁</strong>，它底层是基于 Redis 主线程执行任务为单线程 + Set 命令的原子性来加锁的，核心命令：SET key value NX EX 命令：</p>
<ul>
<li><strong>NX</strong>：仅当 KEY 不存在时设置，保证互斥；</li>
<li><strong>EX</strong>：设置过期时间，防止死锁；</li>
<li><strong>value</strong>：拥有者 ID，防止误删锁。</li>
</ul>
<p>但它实现简单，不存在锁重入、锁误删、解决了锁续期的问题，所以常被用于生产环境。</p>
<h2 id="2基于zookeeper的分布式锁">2.基于Zookeeper的分布式锁</h2>
<p>ZooKeeper 提供强一致性和顺序性，适合实现高可靠分布式锁。</p>
<p>它的实现原理：</p>
<ol>
<li>创建一个持久父节点，如 /locks；</li>
<li>每个客户端尝试获取锁时，在该父节点下创建一个临时顺序节点，如 /locks/lock_000000001；</li>
<li>客户端获取所有子节点并排序，检查自己创建的节点是否为最小节点；</li>
<li>若是最小节点，则获得锁；否则监听前一个节点的删除事件；</li>
<li>释放锁时删除自己的临时节点，ZooKeeper 自动通知下一个节点。</li>
</ol>
<p>优点：</p>
<ol>
<li>临时节点在客户端断开连接后自动删除，避免死锁；</li>
<li>顺序节点保证公平性；</li>
<li>Watch 机制实现高效通知。</li>
</ol>
<p>缺点：</p>
<ol>
<li>依赖 ZooKeeper 集群，运维复杂；</li>
<li>网络抖动可能导致临时节点被误删。</li>
</ol>
<h2 id="3基于数据库的分布式锁">3.基于数据库的分布式锁</h2>
<p>最简单的实现方式是创建一张锁表，包含资源名称（唯一索引）和持有者信息。加锁时插入记录，利用数据库的唯一约束保证互斥；释放锁时删除记录。</p>
<p>它的缺点是性能差、存在单点故障、无法自动释放（若客户端宕机）。改进方式包括引入过期时间字段，配合定时任务清理，但存在精度问题和性能问题。</p>
<h2 id="小结">小结</h2>
<p>分布式锁的常见实现方案有：基于 Redis 的分布式锁实现、基于 Zookeeper 的分布式锁实现，以及基于数据库的分布式锁实现，但其中使用 Redisson 框架（基于 Redis 实现）实现分布式锁的方案使用的最多，因为它无需单独部署中间件服务，并且使用简单，不存在锁重入和解决了锁续期等问题。</p>
<blockquote>
<p>本文已收录到我的面试小站 <a href="https://www.javacn.site" target="_blank" rel="noopener nofollow">www.javacn.site</a>，其中包含的内容有：场景题、SpringAI、SpringAIAlibaba、并发编程、MySQL、Redis、Spring、Spring MVC、Spring Boot、Spring Cloud、MyBatis、JVM、设计模式、消息队列、Dify、Coze、AI常见面试题等。</p>
</blockquote>

</div>
<div id="MySignature" role="contentinfo">
    <div style="text-align: center; color: red">
关注下面二维码，订阅更多精彩内容。
<br>
<img style="margin-left: 0px" src="https://images.cnblogs.com/cnblogs_com/vipstone/848916/o_211225130402_gognzhonghao.jpg">
</div>

<div style="display: none">
    <img src="http://icdn.apigo.cn/gitchat/rabbitmq.png?imageView2/0/w/500/h/400">
</div>
<div style="margin-bottom: 50px; display: none">

<img title="微信打赏" src="http://icdn.apigo.cn/myinfo/wchat-pay.png" alt="微信打赏">
<br>

<div style="display: none">
<span style="display: block; position: absolute; height: 40px; top: 50%; margin-top: -20px">关注公众号（加好友）：</span>

<img style="margin-left: 144px" src="http://icdn.apigo.cn/gongzhonghao2.png?imageView2/0/w/120/h/120">
</div>
<p></p>

<div id="AllanboltSignature">
    <p style="border-top: #e0e0e0 1px dashed; border-right: #e0e0e0 1px dashed; border-bottom: #e0e0e0 1px dashed; border-left: #e0e0e0 1px dashed; padding-top: 10px; padding-right: 10px; padding-bottom: 10px; padding-left: 60px; background: url(&quot;https://images.cnblogs.com/cnblogs_com/lloydsheng/239039/o_copyright.gif&quot;) #e5f1f4 no-repeat 1% 50%; font-family: 微软雅黑; font-size: 11px" id="PSignature">
        <br> 作者：
        <a href="http://vipstone.cnblogs.com/" target="_blank">王磊的博客</a>
        <br> 出处：
        <a href="http://vipstone.cnblogs.com/" target="_blank">http://vipstone.cnblogs.com/</a>
        <br>
    </p>
</div></div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-08-07 17:04">2025-08-07 17:04</span>&nbsp;
<a href="https://www.cnblogs.com/vipstone">磊哥|www.javacn.site</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19027164);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19027164', targetLink: 'https://www.cnblogs.com/vipstone/p/19027164', title: '超实用！一篇文章讲透分布式锁，建议收藏！' })">举报</a>
</div>
        