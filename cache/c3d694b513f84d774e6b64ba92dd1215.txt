
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/zjdxr-up/p/18778847" title="发布于 2025-03-18 14:14">
    <span role="heading" aria-level="2">Dockerfile 语法与常用命令</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h4>转发请注明出处：</h4>
<h4>一、Dockerfile 核心语法规则</h4>
<ol>
<li>指令大写：所有指令必须大写（如&nbsp;<code class=" inline">FROM</code>,&nbsp;<code class=" inline">RUN</code>）</li>
<li>顺序执行：指令按顺序从上到下执行</li>
<li>分层构建：每条指令生成一个镜像层，修改上层不会影响下层</li>
<li>注释支持：使用&nbsp;<code class=" inline">#</code>&nbsp;符号添加注释</li>
<li>基础镜像：必须包含&nbsp;<code class=" inline">FROM</code>&nbsp;指令作为第一条指令</li>
</ol>
<h4>二、常用指令详解</h4>
<table class="OxEWNITQ">
<thead>
<tr><th>指令</th><th>作用</th><th>示例</th></tr>
</thead>
<tbody>
<tr>
<td>FROM</td>
<td>指定基础镜像</td>
<td><code class=" inline">FROM ubuntu:20.04</code></td>
</tr>
<tr>
<td>RUN</td>
<td>执行命令并提交结果</td>
<td><code class=" inline">RUN apt-get update &amp;&amp; apt-get install -y curl</code></td>
</tr>
<tr>
<td>COPY</td>
<td>复制本地文件到镜像</td>
<td><code class=" inline">COPY ./app /app</code></td>
</tr>
<tr>
<td>ADD</td>
<td>复制文件并支持自动解压（推荐优先使用 COPY）</td>
<td><code class=" inline">ADD https://example.com/file.tar.gz /tmp</code></td>
</tr>
<tr>
<td>CMD</td>
<td>定义容器启动默认命令（可被覆盖）</td>
<td><code class=" inline">CMD ["python", "app.py"]</code></td>
</tr>
<tr>
<td>ENTRYPOINT</td>
<td>定义容器启动主命令（不可被覆盖，可组合使用）</td>
<td><code class=" inline">ENTRYPOINT ["python"]</code></td>
</tr>
<tr>
<td>WORKDIR</td>
<td>设置工作目录</td>
<td><code class=" inline">WORKDIR /app</code></td>
</tr>
<tr>
<td>EXPOSE</td>
<td>声明容器监听端口</td>
<td><code class=" inline">EXPOSE 80</code></td>
</tr>
<tr>
<td>ENV</td>
<td>设置环境变量</td>
<td><code class=" inline">ENV NODE_ENV=production</code></td>
</tr>
<tr>
<td>VOLUME</td>
<td>创建挂载点</td>
<td><code class=" inline">VOLUME /data</code></td>
</tr>
<tr>
<td>ARG</td>
<td>定义构建参数（仅在构建时有效）</td>
<td><code class=" inline">ARG USER_ID=1000</code></td>
</tr>
<tr>
<td>USER</td>
<td>指定运行用户</td>
<td><code class=" inline">USER root</code></td>
</tr>
<tr>
<td>LABEL</td>
<td>添加元数据</td>
<td><code class=" inline">LABEL maintainer="your@email.com"</code></td>
</tr>
<tr>
<td>ONBUILD</td>
<td>定义镜像作为其他镜像基础时执行的指令（较少使用）</td>
<td><code class=" inline">ONBUILD RUN echo "Building child image"</code></td>
</tr>
</tbody>
</table>
<h4>三、典型使用场景示例</h4>
<p id="">示例1：构建 Node.js 应用镜像</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)"># 使用官方 Node.js 镜像作为基础
FROM node:</span><span style="color: rgba(128, 0, 128, 1)">18</span>-<span style="color: rgba(0, 0, 0, 1)">alpine

# 设置工作目录
WORKDIR </span>/<span style="color: rgba(0, 0, 0, 1)">app

# 复制 package.json 并安装依赖
COPY package</span>*.json ./<span style="color: rgba(0, 0, 0, 1)">
RUN npm install </span>--<span style="color: rgba(0, 0, 0, 1)">production

# 复制应用代码
COPY . .

# 暴露应用端口
EXPOSE </span><span style="color: rgba(128, 0, 128, 1)">3000</span><span style="color: rgba(0, 0, 0, 1)">

# 定义启动命令
CMD [</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">npm</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">start</span><span style="color: rgba(128, 0, 0, 1)">"</span>]</pre>
</div>
<p>构建命令：</p>
<div class="cnblogs_code">
<pre>docker build -t my-node-app .</pre>
</div>
<p id="">运行命令：</p>
<div class="code-header">
<div class="cnblogs_code">
<pre>docker run -p <span style="color: rgba(128, 0, 128, 1)">3000</span>:<span style="color: rgba(128, 0, 128, 1)">3000</span> my-node-app</pre>
</div>
<p>示例2：Python Web 服务镜像</p>
</div>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)"># 使用 Python 官方镜像
FROM python:</span><span style="color: rgba(128, 0, 128, 1)">3.11</span>-<span style="color: rgba(0, 0, 0, 1)">slim

# 设置环境变量
ENV PYTHONUNBUFFERED</span>=<span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">

# 创建工作目录
WORKDIR </span>/<span style="color: rgba(0, 0, 0, 1)">code

# 安装系统依赖
RUN apt</span>-<span style="color: rgba(0, 0, 255, 1)">get</span> update &amp;&amp; apt-<span style="color: rgba(0, 0, 255, 1)">get</span> install -y --no-install-<span style="color: rgba(0, 0, 0, 1)">recommends \
    gcc \
    python3</span>-<span style="color: rgba(0, 0, 0, 1)">dev \
    </span>&amp;&amp; rm -rf /<span style="color: rgba(0, 0, 255, 1)">var</span>/lib/apt/lists<span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">

# 复制依赖文件并安装
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# 复制应用代码
COPY . .

# 启动命令
CMD ["gunicorn", "--bind", "0.0.0.0:8000", "myapp.wsgi"]</span></pre>
</div>
<p id="">2.构建优化技巧：</p>
<ol>
<li>使用&nbsp;<code class=" inline">.dockerignore</code>&nbsp;文件排除无关文件</li>
<li>合并 RUN 指令减少层数：</li>
</ol>
<div class="cnblogs_code">
<pre>RUN apt-<span style="color: rgba(0, 0, 255, 1)">get</span><span style="color: rgba(0, 0, 0, 1)"> update \
    </span>&amp;&amp; apt-<span style="color: rgba(0, 0, 255, 1)">get</span> install -<span style="color: rgba(0, 0, 0, 1)">y package \
    </span>&amp;&amp; rm -rf /<span style="color: rgba(0, 0, 255, 1)">var</span>/lib/apt/lists<span style="color: rgba(0, 128, 0, 1)">/*</span></pre>
</div>
<p>3.多阶段构建（减小最终镜像体积）：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)"># 构建阶段
FROM golang:</span><span style="color: rgba(128, 0, 128, 1)">1.21</span> <span style="color: rgba(0, 0, 255, 1)">as</span><span style="color: rgba(0, 0, 0, 1)"> builder
WORKDIR </span>/<span style="color: rgba(0, 0, 0, 1)">app
COPY . .
RUN go build </span>-<span style="color: rgba(0, 0, 0, 1)">o myapp

# 最终阶段
FROM alpine:latest
COPY </span>--<span style="color: rgba(0, 0, 255, 1)">from</span>=builder /app/myapp /app/<span style="color: rgba(0, 0, 0, 1)">
CMD [</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">/app/myapp</span><span style="color: rgba(128, 0, 0, 1)">"</span>]</pre>
</div>
<h4>四、关键注意事项</h4>
<ol>
<li>层缓存机制：Dockerfile 修改后，只有修改后的指令及其后续指令会重新执行</li>
<li>安全最佳实践：
<ul>
<li>避免以 root 用户运行最终容器</li>
<li>使用最小基础镜像（如 alpine）</li>
<li>定期更新基础镜像</li>
</ul>
</li>
<li>多阶段构建：适用于需要编译环境但运行时不需要的情况（如 Go/C++ 应用）</li>
<li>健康检查：
<div class="cnblogs_code">
<pre>HEALTHCHECK --interval=30s --timeout=<span style="color: rgba(0, 0, 0, 1)">3s \
  CMD curl </span>-f http:<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">localhost/ || exit 1</span></pre>
</div>
</li>
</ol>
<h4>五、调试技巧</h4>
<ol>
<li>进入容器调试：
<div class="cnblogs_code">
<pre>docker run -it my-image /bin/bash</pre>
</div>
</li>
<li>查看构建历史：
<div class="cnblogs_code">
<pre>docker history my-image</pre>
</div>
</li>
<li>
<p>查看镜像详细信息：</p>
<div class="cnblogs_code">
<pre>docker inspect my-image</pre>
</div>
<p>&nbsp;</p>
</li>
</ol>
<p>参考链接：</p>
<p>　<a href="https://docs.docker.com/reference/dockerfile/" target="_blank" rel="noopener nofollow">　https://docs.docker.com/reference/dockerfile/</a></p>
<p>&nbsp;</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.00844881492476852" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-18 14:14">2025-03-18 14:14</span>&nbsp;
<a href="https://www.cnblogs.com/zjdxr-up">香吧香</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18778847" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18778847);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18778847', targetLink: 'https://www.cnblogs.com/zjdxr-up/p/18778847', title: 'Dockerfile 语法与常用命令' })">举报</a>
</div>
        