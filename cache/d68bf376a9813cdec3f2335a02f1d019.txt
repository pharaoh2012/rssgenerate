
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/formulahendry/p/18845319" title="发布于 2025-04-24 20:48">
    <span role="heading" aria-level="2">容器化 MCP Server！</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p><span>大家好！我是韩老师。</span></p>
<p><span>本文是 MCP 系列文章的第五篇，之前的四篇是：</span></p>
<ul class="list-paddingleft-1">
<li><span><a href="https://mp.weixin.qq.com/s?__biz=MzU1NjgwNTExNQ==&amp;mid=2247498368&amp;idx=1&amp;sn=67b0b87612452ecda9d7551b959476e1&amp;scene=21#wechat_redirect" target="_blank" data-itemshowtype="11" data-linktype="2" rel="noopener nofollow"><span>Code Runner MCP Server，来了！</span></a></span></li>
<li><span><a href="https://mp.weixin.qq.com/s?__biz=MzU1NjgwNTExNQ==&amp;mid=2247498376&amp;idx=1&amp;sn=5b0f0acfdb8905addc9efe1c197d32cf&amp;scene=21#wechat_redirect" target="_blank" data-itemshowtype="0" data-linktype="2" rel="noopener nofollow"><span>从零开始开发一个 MCP Server！</span></a></span></li>
<li><span><a href="https://mp.weixin.qq.com/s?__biz=MzIwODE4Nzg2NQ==&amp;mid=2650563732&amp;idx=1&amp;sn=febce08ecc9968e84905d804ad5b4b14&amp;scene=21#wechat_redirect" target="_blank" data-itemshowtype="0" data-linktype="2" rel="noopener nofollow"><span>一键安装 MCP Server！</span></a></span></li>
<li><span><a href="https://mp.weixin.qq.com/s?__biz=MzIwODE4Nzg2NQ==&amp;mid=2650563747&amp;idx=1&amp;sn=82d8b9f6a5196558fcd54607ba8614eb&amp;scene=21#wechat_redirect" target="_blank" data-itemshowtype="0" data-linktype="2" rel="noopener nofollow"><span>再见，SSE！你好，Streamable HTTP！</span></a></span></li>
</ul>
<p><span>写在最前：<span>容器化 MCP Server，有用。但是，你不一定需要。</span></span></p>
<h3>WHY</h3>
<p data-pid="jK0fBNpU">如果你在开发一个 local MCP Server，并且有以下的任何一种情况：</p>
<ul>
<li data-pid="zzKdsU3H">需要安装多个 toolchain，才能运行 local MCP Server</li>
<li data-pid="BWpfR2IJ">用于开发 local MCP Server 的语言，没有像 npx 或者 uv 那样一键运行程序的工具</li>
</ul>
<p data-pid="HmMawbpW">那么，容器化 MCP Server，对你的用户是有用的。</p>
<p data-pid="S6XzV2XJ">反之，如果你已经用主流的 Node.js 或者 Python 来开发 local MCP Server，并且没有其他额外的依赖。</p>
<p data-pid="68i4uOh_">那么，你也许并不需要容器化。</p>
<h3>WHAT</h3>
<p data-pid="zJYKtzmr">local MCP Server 其实就是个 Node.js/Python/PHP/Go/Java/... 开发的 Console App 而已，通过 stdin/stdout 与 MCP Client 交互，没有什么特别的地方。</p>
<p data-pid="fsFy78xA">所以，一般来说，你只需要一个 Dockerfile 即可。</p>
<h3>HOW</h3>
<p data-pid="1yWqJ5nD">既然是容器化一个普通的 Console App，那么，一切就变得很简单了。</p>
<p data-pid="jGQ9AU4W">以下是 Code Runner MCP Server 的 Dockerfile ：</p>
<div class="highlight">
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 128, 1)"> 1</span> ## Stage 1<span style="color: rgba(0, 0, 0, 1)">: Builder
</span><span style="color: rgba(0, 128, 128, 1)"> 2</span> <span style="color: rgba(0, 128, 128, 1)">FROM</span><span style="color: rgba(0, 0, 0, 1)"> node:lts-alpine AS builder
</span><span style="color: rgba(0, 128, 128, 1)"> 3</span> 
<span style="color: rgba(0, 128, 128, 1)"> 4</span> <span style="color: rgba(0, 0, 0, 1)"># Set working directory
</span><span style="color: rgba(0, 128, 128, 1)"> 5</span> <span style="color: rgba(0, 128, 128, 1)">WORKDIR</span><span style="color: rgba(0, 0, 0, 1)"> /app
</span><span style="color: rgba(0, 128, 128, 1)"> 6</span> 
<span style="color: rgba(0, 128, 128, 1)"> 7</span> <span style="color: rgba(0, 0, 0, 1)"># Copy all files into the container
</span><span style="color: rgba(0, 128, 128, 1)"> 8</span> <span style="color: rgba(0, 128, 128, 1)">COPY</span><span style="color: rgba(0, 0, 0, 1)"> . .
</span><span style="color: rgba(0, 128, 128, 1)"> 9</span> 
<span style="color: rgba(0, 128, 128, 1)">10</span> <span style="color: rgba(0, 0, 0, 1)"># Install dependencies without running scripts
</span><span style="color: rgba(0, 128, 128, 1)">11</span> <span style="color: rgba(0, 128, 128, 1)">RUN</span><span style="color: rgba(0, 0, 0, 1)"> npm install --ignore-scripts
</span><span style="color: rgba(0, 128, 128, 1)">12</span> 
<span style="color: rgba(0, 128, 128, 1)">13</span> <span style="color: rgba(0, 0, 0, 1)"># Build the TypeScript source code
</span><span style="color: rgba(0, 128, 128, 1)">14</span> <span style="color: rgba(0, 128, 128, 1)">RUN</span><span style="color: rgba(0, 0, 0, 1)"> npm run build
</span><span style="color: rgba(0, 128, 128, 1)">15</span> 
<span style="color: rgba(0, 128, 128, 1)">16</span> ## Stage 2<span style="color: rgba(0, 0, 0, 1)">: Runtime
</span><span style="color: rgba(0, 128, 128, 1)">17</span> <span style="color: rgba(0, 128, 128, 1)">FROM</span><span style="color: rgba(0, 0, 0, 1)"> node:lts-alpine
</span><span style="color: rgba(0, 128, 128, 1)">18</span> 
<span style="color: rgba(0, 128, 128, 1)">19</span> <span style="color: rgba(0, 128, 128, 1)">WORKDIR</span><span style="color: rgba(0, 0, 0, 1)"> /app
</span><span style="color: rgba(0, 128, 128, 1)">20</span> 
<span style="color: rgba(0, 128, 128, 1)">21</span> <span style="color: rgba(0, 0, 0, 1)"># Install Python and other programming languages
</span><span style="color: rgba(0, 128, 128, 1)">22</span> <span style="color: rgba(0, 128, 128, 1)">RUN</span><span style="color: rgba(0, 0, 0, 1)"> apk add --no-cache \
</span><span style="color: rgba(0, 128, 128, 1)">23</span> <span style="color: rgba(0, 0, 0, 1)">    python3 \
</span><span style="color: rgba(0, 128, 128, 1)">24</span> <span style="color: rgba(0, 0, 0, 1)">    go \
</span><span style="color: rgba(0, 128, 128, 1)">25</span> <span style="color: rgba(0, 0, 0, 1)">    php \
</span><span style="color: rgba(0, 128, 128, 1)">26</span> <span style="color: rgba(0, 0, 0, 1)">    ruby
</span><span style="color: rgba(0, 128, 128, 1)">27</span> 
<span style="color: rgba(0, 128, 128, 1)">28</span> <span style="color: rgba(0, 0, 0, 1)"># Copy only the necessary files from the builder stage
</span><span style="color: rgba(0, 128, 128, 1)">29</span> <span style="color: rgba(0, 128, 128, 1)">COPY</span><span style="color: rgba(0, 0, 0, 1)"> --from=builder /app/dist ./dist
</span><span style="color: rgba(0, 128, 128, 1)">30</span> <span style="color: rgba(0, 128, 128, 1)">COPY</span><span style="color: rgba(0, 0, 0, 1)"> package*.json ./
</span><span style="color: rgba(0, 128, 128, 1)">31</span> 
<span style="color: rgba(0, 128, 128, 1)">32</span> <span style="color: rgba(0, 0, 0, 1)"># Install only production dependencies
</span><span style="color: rgba(0, 128, 128, 1)">33</span> <span style="color: rgba(0, 128, 128, 1)">RUN</span><span style="color: rgba(0, 0, 0, 1)"> npm install --production --ignore-scripts
</span><span style="color: rgba(0, 128, 128, 1)">34</span> 
<span style="color: rgba(0, 128, 128, 1)">35</span> <span style="color: rgba(0, 0, 0, 1)"># Use a non-root user for security (optional)
</span><span style="color: rgba(0, 128, 128, 1)">36</span> <span style="color: rgba(0, 128, 128, 1)">RUN</span><span style="color: rgba(0, 0, 0, 1)"> adduser -D mcpuser
</span><span style="color: rgba(0, 128, 128, 1)">37</span> <span style="color: rgba(0, 128, 128, 1)">USER</span><span style="color: rgba(0, 0, 0, 1)"> mcpuser
</span><span style="color: rgba(0, 128, 128, 1)">38</span> 
<span style="color: rgba(0, 128, 128, 1)">39</span> <span style="color: rgba(0, 0, 0, 1)"># Set the entrypoint command
</span><span style="color: rgba(0, 128, 128, 1)">40</span> <span style="color: rgba(0, 128, 128, 1)">CMD</span> ["node", "./dist/index.js"]</pre>
</div>
<p>&nbsp;</p>
</div>
<p data-pid="C8-RrBEK">这，就是一个标准的 multi-stage builds 的 Dockerfile。</p>
<p data-pid="pq84UyUJ">由于 Code Runner MCP Server 需要支持多种编程语言的运行，我在 Dockerfile 里面，预先安装了几个常用的编程语言的解释器/编译器。</p>
<p data-pid="-Q39EwTm">这样，用户在使用的时候，唯一需要安装的，就是 Docker 而已：</p>
<div class="highlight">
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 128, 1)"> 1</span> <span style="color: rgba(0, 0, 0, 1)">{
</span><span style="color: rgba(0, 128, 128, 1)"> 2</span>   "mcp"<span style="color: rgba(0, 0, 0, 1)">: {
</span><span style="color: rgba(0, 128, 128, 1)"> 3</span>     "inputs"<span style="color: rgba(0, 0, 0, 1)">: [],
</span><span style="color: rgba(0, 128, 128, 1)"> 4</span>     "servers"<span style="color: rgba(0, 0, 0, 1)">: {
</span><span style="color: rgba(0, 128, 128, 1)"> 5</span>       "mcp-server-code-runner"<span style="color: rgba(0, 0, 0, 1)">: {
</span><span style="color: rgba(0, 128, 128, 1)"> 6</span>         "command": "docker"<span style="color: rgba(0, 0, 0, 1)">,
</span><span style="color: rgba(0, 128, 128, 1)"> 7</span>         "args"<span style="color: rgba(0, 0, 0, 1)">: [
</span><span style="color: rgba(0, 128, 128, 1)"> 8</span>           "run"<span style="color: rgba(0, 0, 0, 1)">,
</span><span style="color: rgba(0, 128, 128, 1)"> 9</span>           "--rm"<span style="color: rgba(0, 0, 0, 1)">,
</span><span style="color: rgba(0, 128, 128, 1)">10</span>           "-i"<span style="color: rgba(0, 0, 0, 1)">,
</span><span style="color: rgba(0, 128, 128, 1)">11</span>           "formulahendry/mcp-server-code-runner"
<span style="color: rgba(0, 128, 128, 1)">12</span> <span style="color: rgba(0, 0, 0, 1)">        ]
</span><span style="color: rgba(0, 128, 128, 1)">13</span> <span style="color: rgba(0, 0, 0, 1)">      }
</span><span style="color: rgba(0, 128, 128, 1)">14</span> <span style="color: rgba(0, 0, 0, 1)">    }
</span><span style="color: rgba(0, 128, 128, 1)">15</span> <span style="color: rgba(0, 0, 0, 1)">  }
</span><span style="color: rgba(0, 128, 128, 1)">16</span> }</pre>
</div>
<p>&nbsp;</p>
</div>
<p data-pid="BSCZCWTG">完整的代码，可以参考 Code Runner MCP Server 的 repo，完全开源：</p>
<p data-pid="BSCZCWTG"><a href="https://github.com/formulahendry/mcp-server-code-runner" target="_blank" rel="noopener nofollow">https://github.com/formulahendry/mcp-server-code-runner</a></p>
<div>&nbsp;</div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.06085259384259259" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-24 20:48">2025-04-24 20:48</span>&nbsp;
<a href="https://www.cnblogs.com/formulahendry">formulahendry</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18845319);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18845319', targetLink: 'https://www.cnblogs.com/formulahendry/p/18845319', title: '容器化 MCP Server！' })">举报</a>
</div>
        