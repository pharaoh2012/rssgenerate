
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/xiao987334176/p/18810257" title="发布于 2025-04-06 00:56">
    <span role="heading" aria-level="2">k8s部署dify详细过程</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h1>一、概述</h1>
<div>dify官方提供的安装方式是docker-compose方式部署的，单机运行。</div>
<div>但是在企业生产环境，单机没法提供冗余，一旦故障，就很麻烦了。</div>
<div>如果有大量的APP用户，那么单机承受不住这么多并发，也会出现故障。</div>
<div>&nbsp;</div>
<div>很多小伙伴们，想在k8s中运行dify，解决冗余以及并发问题，直接扩容节点即可。</div>
<div><span style="color: rgba(255, 0, 0, 1)"><strong>注意：只有企业版会提供k8s部署，社区版是没有的。</strong></span></div>
<div>对于我们这种个人开发者来说，囊中羞涩，不愿意花费这笔钱。企业版还得联系商务，提供企业相关信息，特别麻烦。</div>
<div>&nbsp;</div>
<div>对于在k8s中部署dify，确实比较难。几个月前一筹莫展，经过不懈的努力，终于搞定了。</div>
<h1>二、准备工作</h1>
<h2>前提条件</h2>
<h3>硬件</h3>
<div>CPU：建议至少 4 核。</div>
<div>内存：建议至少 8GB，推荐 16GB。</div>
<div>存储：建议至少 20GB 可用空间。</div>
<div>操作系统：推荐 Ubuntu 22.04+ 或 WSL（Windows 子系统）。</div>
<div>软件依赖：需要 Docker（版本 20.10.5 或更高）和 Docker Compose（版本 2.0.0 或更高）</div>
<h3>软件</h3>
<div>Docker，Docker Compose，参考文章：<a href="https://www.cnblogs.com/xiao987334176/p/18809253">https://www.cnblogs.com/xiao987334176/p/18809253</a></div>
<div>Harbor，参考文章：<a href="https://www.cnblogs.com/xiao987334176/p/18809269">https://www.cnblogs.com/xiao987334176/p/18809269</a></div>
<div>如果有现成的私有仓库，可以忽略</div>
<div>NFS，参考文章：<a href="https://www.cnblogs.com/xiao987334176/p/18809415">https://www.cnblogs.com/xiao987334176/p/18809415</a></div>
<div>如果有现成的NFS，可以忽略</div>
<div>&nbsp;</div>
<div>符合以上条件，就可以部署了</div>
<h2>镜像推送</h2>
<h3>下载镜像</h3>
<div data-theme="default" data-language="shell">
<div class="cnblogs_code">
<pre>docker pull postgres:<span style="color: rgba(128, 0, 128, 1)">15</span>-<span style="color: rgba(0, 0, 0, 1)">alpine
docker pull redis:</span><span style="color: rgba(128, 0, 128, 1)">6</span>-<span style="color: rgba(0, 0, 0, 1)">alpine
docker pull semitechnologies</span>/weaviate:<span style="color: rgba(128, 0, 128, 1)">1.19</span>.<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">
docker pull nginx:latest
docker pull langgenius</span>/dify-plugin-daemon:<span style="color: rgba(128, 0, 128, 1)">0.0</span>.<span style="color: rgba(128, 0, 128, 1)">6</span>-<span style="color: rgba(0, 0, 0, 1)">local
docker pull langgenius</span>/dify-sandbox:<span style="color: rgba(128, 0, 128, 1)">0.2</span>.<span style="color: rgba(128, 0, 128, 1)">11</span><span style="color: rgba(0, 0, 0, 1)">
docker pull ubuntu</span>/<span style="color: rgba(0, 0, 0, 1)">squid:latest
docker pull langgenius</span>/dify-api:<span style="color: rgba(128, 0, 128, 1)">1.1</span>.<span style="color: rgba(128, 0, 128, 1)">3</span><span style="color: rgba(0, 0, 0, 1)">
docker pull langgenius</span>/dify-web:<span style="color: rgba(128, 0, 128, 1)">1.1</span>.<span style="color: rgba(128, 0, 128, 1)">3</span></pre>
</div>
<p>推送镜像</p>
<p>这里使用shell脚本完成</p>
<div class="cnblogs_code">
<pre>#!/bin/<span style="color: rgba(0, 0, 0, 1)">bash

images</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">postgres:15-alpine</span>
redis:<span style="color: rgba(128, 0, 128, 1)">6</span>-<span style="color: rgba(0, 0, 0, 1)">alpine
semitechnologies</span>/weaviate:<span style="color: rgba(128, 0, 128, 1)">1.19</span>.<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">
nginx:latest
langgenius</span>/dify-plugin-daemon:<span style="color: rgba(128, 0, 128, 1)">0.0</span>.<span style="color: rgba(128, 0, 128, 1)">6</span>-<span style="color: rgba(0, 0, 0, 1)">local
langgenius</span>/dify-sandbox:<span style="color: rgba(128, 0, 128, 1)">0.2</span>.<span style="color: rgba(128, 0, 128, 1)">11</span><span style="color: rgba(0, 0, 0, 1)">
ubuntu</span>/<span style="color: rgba(0, 0, 0, 1)">squid:latest
langgenius</span>/dify-api:<span style="color: rgba(128, 0, 128, 1)">1.1</span>.<span style="color: rgba(128, 0, 128, 1)">3</span><span style="color: rgba(0, 0, 0, 1)">
langgenius</span>/dify-web:<span style="color: rgba(128, 0, 128, 1)">1.1</span>.<span style="color: rgba(128, 0, 128, 1)">3</span><span style="color: rgba(128, 0, 0, 1)">"
</span><span style="color: rgba(0, 0, 0, 1)">
# 遍历镜像列表，并推送到harbor
</span><span style="color: rgba(0, 0, 255, 1)">for</span> line <span style="color: rgba(0, 0, 255, 1)">in</span> $images; <span style="color: rgba(0, 0, 255, 1)">do</span><span style="color: rgba(0, 0, 0, 1)">
    #</span><span style="color: rgba(0, 0, 255, 1)">echo</span> <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">$line</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
    docker tag $line harbor.qq.com:</span><span style="color: rgba(128, 0, 128, 1)">8083</span>/dify/<span style="color: rgba(0, 0, 0, 1)">$line
    docker push harbor.qq.com:</span><span style="color: rgba(128, 0, 128, 1)">8083</span>/dify/<span style="color: rgba(0, 0, 0, 1)">$line
</span><span style="color: rgba(0, 0, 255, 1)">done</span></pre>
</div>
<p><strong><span style="color: rgba(255, 0, 0, 1)">注意修改harbor的的地址为实际访问地址</span></strong></p>
</div>
<p>登录到harbor，查看镜像</p>
<p><img src="https://img2024.cnblogs.com/blog/1341090/202504/1341090-20250405165252213-1961507356.png" alt="" loading="lazy"></p>
<h2>&nbsp;创建命名空间以及密钥</h2>
<div>创建命名空间dify</div>
<div>
<div class="cnblogs_code">
<pre>kubectl create namespace dify</pre>
</div>
<p>&nbsp;</p>
</div>
<div>创建拉取镜像需要的密钥</div>
<div>
<div class="cnblogs_code">
<pre>kubectl create secret docker-registry harbor-key --docker-server=harbor.qq.com:<span style="color: rgba(128, 0, 128, 1)">8083</span> --docker-username=devops --docker-password=1sB5r9UShgK5 --namespace=dify</pre>
</div>
<p><span style="color: rgba(255, 0, 0, 1)"><strong>注意：修改harbor地址，用户名，密码。</strong></span></p>
<h2>下载部署yaml</h2>
<p>yaml已经写好了，推送到我个人的github，地址：<a href="https://github.com/987334176/dify-k8s" target="_blank" rel="noopener nofollow">https://github.com/987334176/dify-k8s</a></p>
<p>下载项目后，进入文件夹1.1.3</p>
<p>目录结构</p>
</div>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">env</span> --&gt;<span style="color: rgba(0, 0, 0, 1)"> 全局环境变量
pvc </span>--&gt;<span style="color: rgba(0, 0, 0, 1)"> 所有组件，统一使用一个pvc来进行持久化存储
databases </span>--&gt;<span style="color: rgba(0, 0, 0, 1)"> 数据库相关：postgresql，redis，weaviate
middleware </span>--&gt; 中间件相关：plugin-daemon，sandox，ssf-<span style="color: rgba(0, 0, 0, 1)">proxy，nginx
services </span>--&gt; 服务相关：api，web，worker</pre>
</div>
<h1>三、创建全局环境变量</h1>
<p>这里有500个多个变量，直接一键运行</p>
<div class="cnblogs_code">
<pre>kubectl apply -f <span style="color: rgba(0, 0, 255, 1)">env</span>/<span style="color: rgba(0, 0, 255, 1)">env</span>.yaml</pre>
</div>
<h1>四、创建pv和pvc</h1>
<p>创建storageClass，因为pv和pvc必须是同一个storageClass才能绑定成功</p>
<div class="cnblogs_code">
<pre>kubectl apply -f pvc/storageClass.yaml</pre>
</div>
<p><span style="color: rgba(255, 0, 0, 1)"><strong>注意：修改NFS 服务端的共享路径，provisioner必须指定为nfs-client</strong></span></p>
<p>&nbsp;nfs-client是一个外部的动态存储供给器（Provisioner），用于在 Kubernetes 集群中动态创建和管理基于 NFS（Network File System）的 PersistentVolumes（PV）。它是 Kubernetes 社区提供的一个解决方案，用于支持 NFS 存储的动态供给。</p>
<p>&nbsp;</p>
<p>创建pv，pvc。<strong><span style="color: rgba(255, 0, 0, 1)">注意：这里的pv是自建的NFS，请根据实际情况修改</span></strong></p>
<div class="cnblogs_code">
<pre>kubectl apply -f pvc/<span style="color: rgba(0, 0, 0, 1)">pv.yaml
kubectl apply </span>-f pvc/pvc.yaml</pre>
</div>
<p>&nbsp;</p>
<p>查看pvc状态，<strong><span style="color: rgba(255, 0, 0, 1)">注意：请确保pvc状态为Bound</span></strong></p>
<div class="cnblogs_code">
<pre># kubectl -<span style="color: rgba(0, 0, 0, 1)">n dify get pvc
NAME       STATUS   VOLUME   CAPACITY   ACCESS MODES   STORAGECLASS   VOLUMEATTRIBUTESCLASS   AGE
dify</span>-pvc   Bound    dify     10Gi       RWX            nfs-storage    &lt;unset&gt;                 12m</pre>
</div>
<p>&nbsp;</p>
<p>服务器已经挂载好了NFS，进入到NFS根目录</p>
<div class="cnblogs_code">
<pre>cd /mnt/nfs_share</pre>
</div>
<p>&nbsp;</p>
<p>创建dify相关持久化文件，并设置权限</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">mkdir</span> -p dify/volumes/db/<span style="color: rgba(0, 0, 0, 1)">data
</span><span style="color: rgba(0, 0, 255, 1)">mkdir</span> -p dify/volumes/redis/<span style="color: rgba(0, 0, 0, 1)">data
</span><span style="color: rgba(0, 0, 255, 1)">mkdir</span> -p dify/volumes/<span style="color: rgba(0, 0, 0, 1)">weaviate
</span><span style="color: rgba(0, 0, 255, 1)">mkdir</span> -p dify/volumes/<span style="color: rgba(0, 0, 0, 1)">plugin_daemon
</span><span style="color: rgba(0, 0, 255, 1)">mkdir</span> -p dify/volumes/app/<span style="color: rgba(0, 0, 0, 1)">storage
</span><span style="color: rgba(0, 0, 255, 1)">chmod</span> <span style="color: rgba(128, 0, 128, 1)">777</span> -R dify</pre>
</div>
<h1>五、数据库相关</h1>
<h2>postgresql</h2>
<p>修改文件postgres-StatefulSet.yaml</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">vi</span> databases/postgresql/postgres-StatefulSet.yaml</pre>
</div>
<p>修改红色部分，增加了密钥，改了镜像地址</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">    spec:
      <span style="color: rgba(255, 0, 0, 1)">imagePullSecrets:
        </span></span><span style="color: rgba(255, 0, 0, 1)">- name: harbor-</span><span style="color: rgba(0, 0, 0, 1)"><span style="color: rgba(255, 0, 0, 1)">key</span>
      terminationGracePeriodSeconds: </span><span style="color: rgba(128, 0, 128, 1)">10</span><span style="color: rgba(0, 0, 0, 1)">
      containers:
        </span>-<span style="color: rgba(0, 0, 0, 1)"> name: postgres
          image: <span style="color: rgba(255, 0, 0, 1)">harbor.qq.com:</span></span><span style="color: rgba(255, 0, 0, 1)">8083/dify/postgres:15-alpine</span></pre>
</div>
<p>发布应用</p>
<div class="cnblogs_code">
<pre>kubectl apply -f databases/postgresql/postgres-<span style="color: rgba(0, 0, 0, 1)">StatefulSet.yaml
kubectl apply </span>-f databases/postgresql/postgres-Service.yaml</pre>
</div>
<p>&nbsp;查看postgresql日志</p>
<div class="cnblogs_code">
<pre># <span style="color: rgba(255, 0, 0, 1)">kubectl -n dify logs -f postgres-0</span><span style="color: rgba(0, 0, 0, 1)">
...
UTC [</span><span style="color: rgba(128, 0, 128, 1)">72</span><span style="color: rgba(0, 0, 0, 1)">] WARNING:  no usable system locales were found
performing post</span>-bootstrap initialization ... </pre>
</div>
<p>第一次会出现，pod到这里就终止了，不用管</p>
<p>&nbsp;</p>
<p>再次查看日志。</p>
<div class="cnblogs_code">
<pre># kubectl -n dify logs -f postgres-<span style="color: rgba(128, 0, 128, 1)">0</span>
<span style="color: rgba(128, 0, 128, 1)">2025</span>-<span style="color: rgba(128, 0, 128, 1)">04</span>-<span style="color: rgba(128, 0, 128, 1)">05</span> <span style="color: rgba(128, 0, 128, 1)">16</span>:<span style="color: rgba(128, 0, 128, 1)">29</span>:<span style="color: rgba(128, 0, 128, 1)">11.415</span> UTC [<span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">] LOG:  database system is ready to accept connections
</span><span style="color: rgba(128, 0, 128, 1)">2025</span>-<span style="color: rgba(128, 0, 128, 1)">04</span>-<span style="color: rgba(128, 0, 128, 1)">05</span> <span style="color: rgba(128, 0, 128, 1)">16</span>:<span style="color: rgba(128, 0, 128, 1)">29</span>:<span style="color: rgba(128, 0, 128, 1)">13.707</span> UTC [<span style="color: rgba(128, 0, 128, 1)">46</span>] FATAL:  database <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">postgres</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)"> does not exist
</span><span style="color: rgba(128, 0, 128, 1)">2025</span>-<span style="color: rgba(128, 0, 128, 1)">04</span>-<span style="color: rgba(128, 0, 128, 1)">05</span> <span style="color: rgba(128, 0, 128, 1)">16</span>:<span style="color: rgba(128, 0, 128, 1)">29</span>:<span style="color: rgba(128, 0, 128, 1)">18.721</span> UTC [<span style="color: rgba(128, 0, 128, 1)">53</span>] FATAL:  database <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">postgres</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)"> does not exist
...</span></pre>
</div>
<p>提示数据库postgres不存在，因为在全局configMap里面，POSTGRES_DB的值为dify，所以默认的postgres不会创建。</p>
<p>这个是不影响dify运行的，但是postgres的健康检查命令，必须要这个数据库存在，否则会一直发日志。</p>
<p>&nbsp;</p>
<p>手动创建postgres</p>
<div class="cnblogs_code">
<pre>kubectl -n dify exec -it postgres-<span style="color: rgba(128, 0, 128, 1)">0</span> -- createdb postgres</pre>
</div>
<p>再次查看日志，就不会再出现了。</p>
<p>&nbsp;</p>
<p>进入容器，查看dify数据库是否创建完成</p>
<div class="cnblogs_code">
<pre># <span style="color: rgba(255, 0, 0, 1)">kubectl -n dify exec -it postgres-0 -- /bin/</span><span style="color: rgba(0, 0, 0, 1)"><span style="color: rgba(255, 0, 0, 1)">bash</span>
postgres</span>-<span style="color: rgba(128, 0, 128, 1)">0</span>:/# <span style="color: rgba(255, 0, 0, 1)">pg_isready -U $PGUSER -d $POSTGRES_DB
</span>/var/run/postgresql:<span style="color: rgba(128, 0, 128, 1)">5432</span> - accepting connections</pre>
</div>
<p>出现accepting connections，说明连接成功了</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>111</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.21575656288541667" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-06 01:03">2025-04-06 00:56</span>&nbsp;
<a href="https://www.cnblogs.com/xiao987334176">肖祥</a>&nbsp;
阅读(<span id="post_view_count">3</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18810257" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18810257);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18810257', targetLink: 'https://www.cnblogs.com/xiao987334176/p/18810257', title: 'k8s部署dify详细过程' })">举报</a>
</div>
        