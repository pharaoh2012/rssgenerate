
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/FreakEmbedded/p/18797179" title="发布于 2025-03-28 00:42">
    <span role="heading" aria-level="2">一文速通Python并行计算：04 Python多线程编程-多线程同步（上）—基于条件变量、事件和屏障</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        <img src="https://img2024.cnblogs.com/blog/2591203/202503/2591203-20250328004208894-371260048.png" alt="一文速通Python并行计算：04 Python多线程编程-多线程同步（上）—基于条件变量、事件和屏障" class="desc_img">
        本文介绍了Python多线程同步的三种机制：条件变量（Condition）、事件（Event）和屏障（Barrier），条件变量指的是线程等待特定条件满足后执行，适用于生产者-消费者模型；Event指的是线程通过事件标志进行同步，适用于线程间简单通信；Barrier指的是多个线程需同步到同一阶段时使用，适用于并行任务的分阶段执行。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="一文速通-python-并行计算04-python-多线程编程-多线程同步下基于条件变量事件和屏障">一文速通 Python 并行计算：04 Python 多线程编程-多线程同步（下）—基于条件变量、事件和屏障</h1>
<p><img src="https://img2024.cnblogs.com/blog/2591203/202503/2591203-20250326231509385-1642894601.png" alt="image" loading="lazy"></p>
<h1 id="摘要"><strong>摘要：</strong></h1>
<p>本文介绍了 Python 多线程同步的三种机制：条件变量（Condition）、事件（Event）和屏障（Barrier），条件变量指的是线程等待特定条件满足后执行，适用于生产者-消费者模型；Event 指的是线程通过事件标志进行同步，适用于线程间简单通信；Barrier 指的是多个线程需同步到同一阶段时使用，适用于并行任务的分阶段执行。</p>
<p><img src="https://img2024.cnblogs.com/blog/2591203/202503/2591203-20250321010016257-450656136.png" alt="image" loading="lazy"></p>
<blockquote>
<p><strong>关于我们更多介绍可以查看云文档：</strong><a href="https://f1829ryac0m.feishu.cn/docx/SGvHdRW1eoxgGIxwIjacX7SVnVb?from=from_copylink" target="_blank" rel="noopener nofollow">Freak 嵌入式工作室云文档</a><strong>，或者访问我们的 wiki：****<a href="https://github.com/leezisheng/Doc/wik" target="_blank" rel="noopener nofollow">https://github.com/leezisheng/Doc/wik</a></strong></p>
</blockquote>
<h1 id="原文链接"><strong>原文链接：</strong></h1>
<p><a href="https://www.cnblogs.com/FreakEmbedded" target="_blank"><strong>FreakStudio的博客</strong></a></p>
<h1 id="往期推荐"><strong>往期推荐：</strong></h1>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzkwMTYzNTY3Ng==&amp;mid=2247483825&amp;idx=1&amp;sn=149aaf3baa6a96703713e554d4a888db&amp;chksm=c0b08a82f7c70394074a24b722a1caddb0ad598a7303e61133216ae61423df0b5bc57a6b82b2&amp;scene=21#wechat_redirect" title="**学嵌入式的你，还不会面向对象？？！**" target="_blank" rel="noopener nofollow"><strong>学嵌入式的你，还不会面向对象？？！</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/sycnlnMhtFji8q2fYh0MFQ" title="**全网最适合入门的面向对象编程教程：00 面向对象设计方法导论**" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：00 面向对象设计方法导论</strong></a></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzkwMTYzNTY3Ng==&amp;mid=2247483853&amp;idx=1&amp;sn=c7685237216b8dd1cadf95f3353fde8e&amp;chksm=c0b08afef7c703e8ce7b76958718ebe381220a199fac9e872710ea1cb4f8fc6f93d36d151279&amp;scene=21#wechat_redirect" title="**全网最适合入门的面向对象编程教程：01 面向对象编程的基本概念**" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：01 面向对象编程的基本概念</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/XKpEAGY9WJ7GRFc98E6dcw" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：02 类和对象的 Python 实现-使用 Python 创建类</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/LsNtLbHLNtVBtiQ3eaJnSg" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：03 类和对象的 Python 实现-为自定义类添加属性</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/A5rMO3ppTZTUwRPL2NQxdg" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：04 类和对象的Python实现-为自定义类添加方法</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/YjM1JPzLakfyWiDkyy4LQw" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：05 类和对象的Python实现-PyCharm代码标签</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/z7CmgHJXf0QlAgIIRRTXlw" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：06 类和对象的Python实现-自定义类的数据封装</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/7r4hgM3a187si_D5ReEMCA" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：07 类和对象的Python实现-类型注解</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/sSO-L_NQHarXh160xiVZVg" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：08 类和对象的Python实现-@property装饰器</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/cAZzXr9MSL0nVxVcTgNlQA" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：09 类和对象的Python实现-类之间的关系</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/29Lr_nigsMuIJMmWEObk1g" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：10 类和对象的Python实现-类的继承和里氏替换原则</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/HEvQNiVXkjlnbhz8Sdt_4Q" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：11 类和对象的Python实现-子类调用父类方法</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/QHYLu7Mrs2ErUHvy_k59QA" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：12 类和对象的Python实现-Python使用logging模块输出程序运行日志</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/EbJJpqIq8v_eRQZfdWONFA" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：13 类和对象的Python实现-可视化阅读代码神器Sourcetrail的安装使用</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/fLSGXknzwY8FHzavunfQXg" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：全网最适合入门的面向对象编程教程：14 类和对象的Python实现-类的静态方法和类方法</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/fLSGXknzwY8FHzavunfQXg" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：15 类和对象的 Python 实现-__slots__魔法方法</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/VNlMnPhSyglZ9FalqIfw-A" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：16 类和对象的Python实现-多态、方法重写与开闭原则</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/mffQ0sdsI5yt_tJrZRxe-g" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：17 类和对象的Python实现-鸭子类型与“file-like object“</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/JSIKlWJ4pNShBGkfXolkQg" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：18 类和对象的Python实现-多重继承与PyQtGraph串口数据绘制曲线图</strong></a></p>
<p><a href="https://www.cnblogs.com/FreakEmbedded/p/18308599" target="_blank"><strong>全网最适合入门的面向对象编程教程：19 类和对象的 Python 实现-使用 PyCharm 自动生成文件注释和函数注释</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/_TuErM5YRBsy2wixYbbbkw" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：20 类和对象的Python实现-组合关系的实现与CSV文件保存</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/zqG3vuxVq0pmUqrV-tztng" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：21 类和对象的Python实现-多文件的组织：模块module和包package</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/Wj5ovLUWqKudW5VSiycK5A" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：22 类和对象的Python实现-异常和语法错误</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/o5cgglFtmr9q3lW5gAiYEg" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：23 类和对象的Python实现-抛出异常</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/DPC8Drr6iCnC0j-YMGyOfg" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：24 类和对象的Python实现-异常的捕获与处理</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/ghhS3fk98LTkh1a-daEg0Q" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：25 类和对象的Python实现-Python判断输入数据类型</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/LHj-igDSYaL_1z8H7VEj1Q" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：26 类和对象的Python实现-上下文管理器和with语句</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/tQ2NHEWCMI4e4AG5BBsSpw" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：27 类和对象的Python实现-Python中异常层级与自定义异常类的实现</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/rvHzNvuovU-3KY2FtcQK-Q" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：28 类和对象的Python实现-Python编程原则、哲学和规范大汇总</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/swfA2JsajMFpaOa5PZCEbg" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：29 类和对象的Python实现-断言与防御性编程和help函数的使用</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/5NxKSJUxetAkdwYW9n941w" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：30 Python的内置数据类型-object根类</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/Z3AMqnfkmhqzcK3A-J3ylw" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：31 Python的内置数据类型-对象Object和类型Type</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/C4pj9ujGsQMMOnLEqI414A" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：32 Python的内置数据类型-类Class和实例Instance</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/V_3QFDJRss_lAJHgJ4oVwg" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：33 Python的内置数据类型-对象Object和类型Type的关系</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/crZBcEEBKBfDfWA9ub-d-A" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：34 Python的内置数据类型-Python常用复合数据类型：元组和命名元组</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/_X7sKhro7wJ96KwhbAcopg" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：35 Python的内置数据类型-文档字符串和__doc__属性</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/KCvCx7Im35uiBkPpJASTkg" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：36 Python的内置数据类型-字典</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/bNSPkIhKgmzLFz5BYdizNQ" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：37 Python常用复合数据类型-列表和列表推导式</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/XgTr4hvBC4Uk2hPmaDRn2Q" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：38 Python常用复合数据类型-使用列表实现堆栈、队列和双端队列</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/Cx0--RZGrzud_aILXTlEJg" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：39 Python常用复合数据类型-集合</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/bCxbepaVypefwEOtKnzb5g" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：40 Python常用复合数据类型-枚举和enum模块的使用</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/Ah-fhWf67Jm7TF-OGooy-g" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：41 Python常用复合数据类型-队列（FIFO、LIFO、优先级队列、双端队列和环形队列）</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/XkIocfNXpie-65voC4W8wA" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：42 Python常用复合数据类型-collections容器数据类型</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/ODYRdwzdlcBQkCE3xpYjIA" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：43 Python常用复合数据类型-扩展内置数据类型</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/DLylf2L_dpkcXYw6iFnhwA" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：44 Python内置函数与魔法方法-重写内置类型的魔法方法</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/AEyP4BfRGZB63akTgGLWZw" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：45 Python实现常见数据结构-链表、树、哈希表、图和堆</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/3COyHC1ob9xs_EUQtk7hCA" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：46 Python函数方法与接口-函数与事件驱动框架</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/wmc2ZcSC3l5JOLpMpthv6Q" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：47 Python函数方法与接口-回调函数Callback</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/MEvlZqaItRNwP4zRtMQHhQ" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：48 Python函数方法与接口-位置参数、默认参数、可变参数和关键字参数</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/qDQo9KxfGrTj5-FDo-MBiA" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：49 Python函数方法与接口-函数与方法的区别和lamda匿名函数</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/DwKug8eHOYyC2pE77eLw9w" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：50 Python函数方法与接口-接口和抽象基类</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/pDQWfDDh3WeCgjC5b5rP1Q" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：51 Python函数方法与接口-使用Zope实现接口</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/Wgqc8PbpMMf8pKFHo4H7PA" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：52 Python函数方法与接口-Protocol协议与接口</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/jvOLalgkUpxR7LGgQnJ9aQ" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：53 Python字符串与序列化-字符串与字符编码</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/z3JS3dcpPQTD9ygWyxRUDg" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：54 Python字符串与序列化-字符串格式化与format方法</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/C0rgRhmC1ydh2PpEwAuMlw" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：55 Python字符串与序列化-字节序列类型和可变字节字符串</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/UmXPSAbrLvYyH-45kBHLZQ" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：56 Python字符串与序列化-正则表达式和re模块应用</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/-Y8DX8wo1OAhKkWK7dikzg" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：57 Python字符串与序列化-序列化与反序列化</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/BFTYNXXtXarbU70RvOs20Q" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：58 Python字符串与序列化-序列化Web对象的定义与实现</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/cgs1FP0bRMvqXv00J1AzkA" target="_blank" rel="noopener nofollow"><strong>全网最适合入门的面向对象编程教程：59 Python并行与并发-并行与并发和线程与进程</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/plVWoeJY-W4Yhm25jrt9yw" target="_blank" rel="noopener nofollow"><strong>一文速通Python并行计算：00 并行计算的基本概念</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/SJx4UHy_Ql0gnz_PklWaRg" target="_blank" rel="noopener nofollow"><strong>一文速通Python并行计算：01 Python多线程编程-基本概念、切换流程、GIL锁机制和生产者与消费者模型</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/wc3Vu_Ymzuq4cJFz5g5L0A" target="_blank" rel="noopener nofollow"><strong>一文速通Python并行计算：02 Python多线程编程-threading模块、线程的创建和查询与守护线程</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/LBNCaDv-PhNEkpT_hTqtGA" target="_blank" rel="noopener nofollow"><strong>一文速通Python并行计算：03 Python多线程编程-多线程同步（上）—基于互斥锁、递归锁和信号量</strong></a></p>
<h1 id="更多精彩内容可看"><strong>更多精彩内容可看：</strong></h1>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzkwMTYzNTY3Ng==&amp;mid=2247483747&amp;idx=1&amp;sn=0e203586516fd6e925085b9c1244dbee&amp;scene=21#wechat_redirect" title="**给你的 Python 加加速：一文速通 Python 并行计算**" target="_blank" rel="noopener nofollow"><strong>给你的 Python 加加速：一文速通 Python 并行计算</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzkwMTYzNTY3Ng==&amp;mid=2247483719&amp;idx=1&amp;sn=7ece9da65d002fdc3df9539cc43f3a8d&amp;scene=21#wechat_redirect" title="**一文搞懂 CM3 单片机调试原理**" target="_blank" rel="noopener nofollow"><strong>一文搞懂 CM3 单片机调试原理</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzkwMTYzNTY3Ng==&amp;mid=2247483671&amp;idx=1&amp;sn=c267a0c6f4ab93d6b6d934bf803b5919&amp;scene=21#wechat_redirect" title="**肝了半个月，嵌入式技术栈大汇总出炉**" target="_blank" rel="noopener nofollow"><strong>肝了半个月，嵌入式技术栈大汇总出炉</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzkwMTYzNTY3Ng==&amp;mid=2247483774&amp;idx=1&amp;sn=46d57506febe92c1719c8567ebe95269&amp;scene=21#wechat_redirect" title="**电子计算机类比赛的“武林秘籍”**" target="_blank" rel="noopener nofollow"><strong>电子计算机类比赛的“武林秘籍”</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzkwMTYzNTY3Ng==&amp;mid=2247483854&amp;idx=1&amp;sn=fd666dc501a0de850abfbd8793abff00&amp;chksm=c0b08afdf7c703eb494f8e402a5d60eba9a802bfdb02c07a5e1666a8a1b335e38240adc6c1b5&amp;scene=21#wechat_redirect" title="**一个MicroPython的开源项目集锦：awesome-micropython，包含各个方面的Micropython工具库**" target="_blank" rel="noopener nofollow"><strong>一个MicroPython的开源项目集锦：awesome-micropython，包含各个方面的Micropython工具库</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/2-Z6WqekVOuDbEdiE65Wfw" target="_blank" rel="noopener nofollow"><strong>Avnet ZUBoard 1CG开发板—深度学习新选择</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/WrFVqS2-s1g6RYNd_Q5CDA" target="_blank" rel="noopener nofollow"><strong>工程师不要迷信开源代码，还要注重基本功</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/FUzf9kAHABNfo2aZh1jHzA" target="_blank" rel="noopener nofollow"><strong>什么？配色个性化的电机驱动模块？！！</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/TNsGwgi0pdE9v-tY4FZu6w" target="_blank" rel="noopener nofollow"><strong>什么？XIAO主控新出三款扩展板!</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/0jIkDXaGKFOn2o03wUmUmQ" target="_blank" rel="noopener nofollow"><strong>手把手教你实现Arduino发布第三方库</strong></a></p>
<p><a href="https://mp.weixin.qq.com/s/7n7tYqg5GVHvRC9TUi50MA" target="_blank" rel="noopener nofollow"><strong>万字长文手把手教你实现MicroPython/Python发布第三方库</strong></a></p>
<h1 id="文档获取"><strong>文档获取：</strong></h1>
<p>可访问如下链接进行对文档下载：</p>
<p><a href="https://github.com/leezisheng/Doc" target="_blank" rel="noopener nofollow">https://github.com/leezisheng/Doc</a></p>
<p>该文档是一份关于 <strong>并行计算</strong> 和 <strong>Python 并发编程</strong> 的学习指南，内容涵盖了并行计算的基本概念、Python 多线程编程、多进程编程以及协程编程的核心知识点：</p>
<p><img src="https://img2024.cnblogs.com/blog/2591203/202503/2591203-20250321010038855-257589202.png" alt="image" loading="lazy"></p>
<h1 id="正文"><strong>正文</strong></h1>
<h1 id="1基于条件变量的线程同步">1.基于条件变量的线程同步</h1>
<p>Python 提供的 <code>Condition</code> 对象提供了对复杂线程同步问题的支持。<code>Condition</code> 被称为条件变量，与互斥锁不同，条件变量是用来等待而不是用来上锁的。<strong>条件变量用来自动阻塞一个线程，直到某特殊情况发生为止。</strong>条件变量是利用线程间共享的全局变量进行同步的一种机制，主要包括两个动作：</p>
<ul>
<li>一个线程等待"条件变量的条件成立"而挂起；</li>
<li>另一个线程使 “条件成立”（给出条件成立信号）。</li>
</ul>
<p>使用 <code>Condition</code> 的主要方式为：<strong>线程首先<strong><strong>acquire</strong></strong>一个条件变量，然后判断一些条件。如果条件不满足则<strong><strong>wait</strong></strong>；如果条件满足，进行一些处理改变条件后，通过<strong><strong>notify</strong></strong>方法通知其他线程，其他处于<strong><strong>wait</strong></strong>状态的线程接到通知后会重新判断条件，</strong>不断的重复这一过程，从而解决复杂的同步问题。</p>
<p>解释条件机制最好的例子还是生产者-消费者问题，在本例中，只要缓存不满，生产者一直向缓存生产；只要缓存不空，消费者一直从缓存取出（之后销毁）；当缓冲队列不为空的时候，生产者将通知消费者；当缓冲队列不满的时候，消费者将通知生产者。</p>
<pre><code>**i**mport threading
import time

condition = threading.Condition()
products = 0

class Producer(threading.Thread):
    def __init__(self):
        threading.Thread.__init__(self)

    def run(self):
        global condition, products
        while True:
            _# 消费者通过拿到锁来修改共享的资源_
            if condition.acquire(): 
            _# 线程首先acquire一个条件变量，然后判断生产是否饱和。_
                if products &lt; 10:
                    _# 如果产品数量小于10，继续生成，并通过notify方法通知消费者_
                    _# 只要缓存不满，生产者一直向缓存生产；_
                    products += 1;
                    print("Producer(%s):deliver one, now products:%s" % (self.name, products))
                    _# 当缓冲队列不为空的时候，生产者将通知消费者_
                    condition.notify()
                _# 如果已经满了，那么生产者进入等待状态，直到被唤醒_
                else:
                    print("Producer(%s):already 10, stop deliver, now products:%s" % (self.name, products))
                    condition.wait()
                _# 如果队列没有满，就生产1个item，通知状态并释放资源_
                condition.release()
                time.sleep(2)

class Consumer(threading.Thread):
    def __init__(self):
        threading.Thread.__init__(self)

    def run(self):
        global condition, products
        while True:
            if condition.acquire():
                if products &gt; 1:
                    _# 只要缓存不空，消费者一直从缓存取出（之后销毁）。_
                    products -= 1
                    print("Consumer(%s):consume one, now products:%s" % (self.name, products))
                    _# 当缓冲队列不满的时候，消费者将通知生产者。_
                    condition.notify()
                else:
                    print("Consumer(%s):only 1, stop consume, products:%s" % (self.name, products))
                    _# 缓存空，消费者线程等待_
                    condition.wait()
                condition.release()
                time.sleep(2)

if __name__ == "__main__":
    _# 首先是2个生成者生产products_
    for p in range(0, 2):
        p = Producer()
        p.start()
    _# 接下来的10个消费者将会消耗products_
    for c in range(0, 10):
        c = Consumer()
        c.start()
</code></pre>
<p>运行的结果如下：</p>
<p><img src="https://img2024.cnblogs.com/blog/2591203/202503/2591203-20250328003907304-898626764.png" alt="image" loading="lazy"></p>
<p>乍一看这段代码好像会死锁，因为 <code>condition.acquire()</code> 之后就在 <code>wait()</code> 了，好像会一直持有锁。其实 <code>wait()</code> 会将锁释放，然后等待其他线程 <code>notify()</code> 之后会重新尝试获得锁。**但是要注意 <strong><strong>notify()</strong></strong> 并不会自动释放锁，所以代码中有两行，先 <strong><strong>notify()</strong></strong> 然后再 ****release() **<strong>。</strong></p>
<p><img src="https://img2024.cnblogs.com/blog/2591203/202503/2591203-20250328003913180-1327244888.png" alt="image" loading="lazy"></p>
<p>实际上，<strong>条件的检测是在互斥锁的保护下进行的。线程在改变条件状态之前必须首先锁住互斥量。</strong>如果一个条件为假，一个线程自动阻塞，并释放等待状态改变的互斥锁。<strong>如果另一个线程改变了条件，它发信号给关联的条件变量，唤醒一个或多个等待它的线程，重新获得互斥锁，重新评价条件。</strong>如果两进程共享可读写的内存，条件变量 可以被用来实现这两进程间的线程同步。</p>
<p>另外：<strong>Condition<strong><strong>对象的构造函数可以接受一个</strong></strong>Lock/RLock<strong><strong>对象作为参数，如果没有指定，则</strong></strong>Condition<strong><strong>对象会在内部自行创建一个</strong></strong>RLock****；</strong>除了 <code>notify</code> 方法外，<code>Condition</code> 对象还提供了 <code>notifyAll</code> 方法，可以通知 <code>waiting</code> 池中的所有线程尝试 <code>acquire</code> 内部锁。由于上述机制，处于 <code>waiting</code> 状态的线程只能通过 <code>notify</code> 方法唤醒，所以 <code>notifyAll</code> 的作用在于防止有线程永远处于沉默状态。</p>
<p><strong>如果不使用条件变量，也可以不断循环检测缓存是否大于 0，但该方法会造成 CPU 资源的浪费。</strong>采用条件变量这一问题就可以迎刃而解！条件变量允许一个线程休眠（阻塞等待）直至获取到另一个线程的通知（收到信号）再去执行自己的操作。</p>
<p><img src="https://img2024.cnblogs.com/blog/2591203/202503/2591203-20250328003922882-1474517495.png" alt="image" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/2591203/202503/2591203-20250328003929169-654618672.png" alt="image" loading="lazy"></p>
<p>以上消费者-生产者模型过程如下：</p>
<p><img src="https://img2024.cnblogs.com/blog/2591203/202503/2591203-20250328003932790-1277425460.png" alt="image" loading="lazy"></p>
<p>以下是另一个有趣的关于条件变量的例子：</p>
<p><img src="https://img2024.cnblogs.com/blog/2591203/202503/2591203-20250328003936917-982881901.png" alt="image" loading="lazy"></p>
<p>原理很简单，就是线程拿到锁先检查是不是自己渴望的状态。比如打印“B”的线程，渴望的状态 <code>current = 'B'</code> 然后打印出 B，将状态改成 C ，这样就成了打印“C”的线程渴望的状态。但是这里不能唤醒指定的线程，只好唤醒所有的线程，让他们自己再检查一遍状态了。</p>
<h1 id="2基于事件的线程同步">2.基于事件的线程同步</h1>
<p>想象这样一个场景，你启动了多个线程，这些线程都要去访问一个资源，但是，这里有一个小小的问题，即将被访问的资源还没有准备好接受访问，那么此时，多个线程去访问，必然得到不响应，你还得处理这种得不到响应的情况。这样的场景下，能否先在主线程里去做试探，确定资源可以访问以后，再让已经启动了的多线程去访问呢？让我们考虑一下如何用 <code>Event</code> 来处理这样的问题。</p>
<ol>
<li>创建一个 <code>Event</code> 对象，现在，事件内部标识是 <code>False</code>；</li>
<li>启动多线程，线程里调用 <code>wait</code> 方法，这时，会阻塞；</li>
<li>主线程去试探，确定资源可访问以后，调用 <code>set</code> 方法，将内置标志设置为 <code>True</code>；</li>
<li>该 <code>Event</code> 会通知所有等待状态的线程恢复运行：已经调用 <code>wait</code> 的线程接手到事件信息，访问资源。</li>
</ol>
<p>以下为示例代码：</p>
<pre><code>import threading
from threading import Event


def worker(event_obj, i):
    print('{i}号线程等待事件信号'.format(i=i))
    event_obj.wait()
    print('{i}号线程收到事件信号'.format(i=i))


event = Event()

for i in range(5):
    t = threading.Thread(target=worker, args=(event, i))
    t.start()

print('确认资源可用')
event.set()
</code></pre>
<p>以下为代码输出，可以看到在 <code>event.set()</code> 后所有线程恢复运行：</p>
<p><img src="https://img2024.cnblogs.com/blog/2591203/202503/2591203-20250328004002268-938025502.png" alt="image" loading="lazy"></p>
<p>让我们再一次回到生产者-消费者问题上，若要确保如果缓冲区满，生产者不会生成新数据，另外如果缓存区为空，消费者不会查找数据的要求，如何用 <code>event</code> 机制实现？代码如下：</p>
<pre><code>import time
from threading import Thread, Event
import random

items = []
event = Event()

class consumer(Thread):
    def __init__(self, items, event):
        _#  producer 类初始化时定义了item的list和 Event ，_
        _# 与条件对象时候的例子不同，这里的list并不是全局的，而是通过参数传入的_
        Thread.__init__(self)
        self.items = items
        self.event = event

    def run(self):
        while True:
            time.sleep(2)
            _# 等待元素到达_
            _# 当元素到达时，consumer放弃这个锁_
            _# 这就允许其他生产者或消费者进入并获得这个锁_
            self.event.wait()

            _# 若consumer放弃这个锁被唤醒，它会重新获得锁_
            _# 元素到达时，元素从items列表弹出_
            item = self.items.pop()
            print('Consumer notify : %d popped from list by %s' % (item, self.name))

class producer(Thread):
    def __init__(self, items, event):
        Thread.__init__(self)
        self.items = items
        self.event = event

    def run(self):
        global item
        for i in range(100):
            time.sleep(2)
            item = random.randint(0, 256)
            self.items.append(item)
            print('Producer notify : item N° %d appended to list by %s' % (item, self.name))
            print('Producer notify : event set by %s' % self.name)
            _# 添加元素后通知事件_
            _# 将内部标识设置为 true 。所有正在等待这个事件的线程将被唤醒。_
            _# 当标识为 true 时，调用wait()方法的线程不会被阻塞。_
            self.event.set()
            print('Produce notify : event cleared by %s '% self.name)
            _# 将内部标识设置为 false 。之后调用wait()方法的线程将会被阻塞，_
            _# 直到调用set()方法将内部标识再次设置为 true 。_
            self.event.clear()

if __name__ == '__main__':
    t1 = producer(items, event)
    t2 = consumer(items, event)
    t1.start()
    t2.start()
    t1.join()
    t2.join()
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/2591203/202503/2591203-20250328004009032-2091474277.png" alt="image" loading="lazy"></p>
<p>上图是运行程序时候的运行结果，线程 <code>t1</code> 在 <code>list</code> 最后添加值，然后设置 <code>event</code> 来通知消费者。消费者通过 <code>wait()</code> 阻塞，直到收到信号的时候从 <code>list</code> 中取出元素消费。</p>
<p><img src="https://img2024.cnblogs.com/blog/2591203/202503/2591203-20250328004012467-1142047162.png" alt="image" loading="lazy"></p>
<p>补充一下 <code>wait()</code> 方法：</p>
<p><img src="https://img2024.cnblogs.com/blog/2591203/202503/2591203-20250328004015711-798403809.png" alt="image" loading="lazy"></p>
<h1 id="3基于屏障的线程同步">3.基于屏障的线程同步</h1>
<p>屏障用于应对固定数量的线程需要彼此相互等待的情况，与之前介绍 <code>互斥锁Lock/事件Event/定时器Timer</code> 等不同，<strong>多线程<strong><strong>Barrier</strong></strong>会设置一个线程障碍数量<strong><strong>parties</strong></strong>，如果等待的线程数量没有达到障碍数量 pa<strong><strong>r</strong></strong>ties，所有线程会处于阻塞状态，当等待的线程到达了这个数量就会唤醒所有的等待线程。</strong></p>
<p>以播放器为例子：</p>
<p><img src="https://img2024.cnblogs.com/blog/2591203/202503/2591203-20250328004021516-2145294269.png" alt="image" loading="lazy"></p>
<p>首先一个线程做播放器初始化工作(加载本地文件或者获取播放地址)，然后一个线程获取视频画面，一个线程获取视频声音，只有当初始化工作完毕，视频画面获取完毕，视频声音获取完毕，播放器才会开始播放，其中任意一个线程没有完成，播放器会处于阻塞状态直到三个任务都完成！</p>
<pre><code>class threading.Barrier(parties, action=None, timeout=None)
</code></pre>
<p>创建一个需要 <code>parties</code> 个线程的栅栏对象。如果提供了可调用的 <code>action</code> 参数，它会在所有线程被释放时在其中一个线程中自动调用。 <code>timeout</code> 是默认的超时时间，如果没有在 <code>wait()</code> 方法中指定超时时间的话。</p>
<p>使用方法包括：</p>
<p><img src="https://img2024.cnblogs.com/blog/2591203/202503/2591203-20250328004026748-1186025470.png" alt="image" loading="lazy"></p>
<p>以下为示例代码，创建三个线程：初始化准备、音频准备、视频准备，当且仅当三个初始化完成，才能启动音乐播放。</p>
<pre><code>_# 导入线程模块_
import threading

def plyer_display():
    print('初始化通过完成，音视频同步完成，可以开始播放....')

_# 设置3个障碍对象_
barrier = threading.Barrier(3, action=plyer_display, timeout=None)
def player_init(statu):
    print(statu)
    try:
        _# 设置超时时间，如果2秒内，没有达到障碍线程数量，_
        _# 会进入断开状态，引发BrokenBarrierError错误_
        barrier.wait(2)
    except Exception as e:
    _# 断开状态，引发BrokenBarrierError错误_
            print("等待超时了... ")
    else:
        print("xxxooooxxxxxooooxxxoooo")
        
if __name__ == '__main__':
    statu_list = ["init ready", "video ready", "audio ready"]
    thread_list = list()
    _# 创建三个线程：初始化准备、音频准备、视频准备_
    _# 当且仅当三个初始化完成，才能启动音乐播放_
    for i in range(0, 3):
        t = threading.Thread(target=player_init, args=(statu_list[i],))
        t.start()
        thread_list.append(t)
    for t in thread_list:
        t.join()
</code></pre>
<p>以下为代码运行结果，注意：如果 <code>barrier.wait(timeout=None)</code> 等待超时，会进入断开状态，引发 <code>BrokenBarrierError</code> 错误，为了程序的健壮性，最好加上异常处理。</p>
<p><img src="https://img2024.cnblogs.com/blog/2591203/202503/2591203-20250328004035617-119665210.png" alt="image" loading="lazy"></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.07014352046296296" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-28 00:43">2025-03-28 00:42</span>&nbsp;
<a href="https://www.cnblogs.com/FreakEmbedded">FreakStudio</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18797179" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18797179);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18797179', targetLink: 'https://www.cnblogs.com/FreakEmbedded/p/18797179', title: '一文速通Python并行计算：04 Python多线程编程-多线程同步（上）—基于条件变量、事件和屏障' })">举报</a>
</div>
        