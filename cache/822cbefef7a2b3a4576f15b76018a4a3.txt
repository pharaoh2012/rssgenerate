
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/ThinkerQAQ/p/18957376" title="发布于 2025-06-30 11:02">
    <span role="heading" aria-level="2">7.Java SDK源码分析系列笔记-JDK1.8 HashMap</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p></p><div class="toc"><div class="toc-container-header">目录</div><ul><li><a href="#1-是什么" rel="noopener nofollow">1. 是什么</a></li><li><a href="#2-如何使用" rel="noopener nofollow">2. 如何使用</a></li><li><a href="#3-原理分析" rel="noopener nofollow">3. 原理分析</a><ul><li><a href="#31-uml" rel="noopener nofollow">3.1. uml</a></li><li><a href="#32-构造方法" rel="noopener nofollow">3.2. 构造方法</a></li><li><a href="#33-put方法" rel="noopener nofollow">3.3. put方法</a><ul><li><a href="#331-计算key的hash值" rel="noopener nofollow">3.3.1. 计算key的hash值</a></li><li><a href="#332-第一次进来table肯定为空那么扩容" rel="noopener nofollow">3.3.2. 第一次进来table肯定为空，那么扩容</a></li><li><a href="#333-使用hash值数组长度1计算改数据存放的位置i" rel="noopener nofollow">3.3.3. 使用hash值&amp;数组长度1计算改数据存放的位置i</a></li><li><a href="#334-第二次进来如果位置i为空那么用keyvalue存入该位置" rel="noopener nofollow">3.3.4. 第二次进来如果位置i为空，那么用（key，value）存入该位置</a></li><li><a href="#335-第三次进来如果位置i不为空那么遍历链表或红黑树找到key相等的节点替换value" rel="noopener nofollow">3.3.5. 第三次进来如果位置i不为空，那么遍历链表或红黑树找到key相等的节点替换value</a><ul><li><a href="#3351-怎么转换成红黑树的" rel="noopener nofollow">3.3.5.1. 怎么转换成红黑树的</a><ul><li><a href="#33511-node-treenode" rel="noopener nofollow">3.3.5.1.1. Node-&gt;TreeNode</a></li><li><a href="#33512-树化" rel="noopener nofollow">3.3.5.1.2. 树化</a></li></ul></li></ul></li></ul></li><li><a href="#34-get方法" rel="noopener nofollow">3.4. get方法</a><ul><li><a href="#341-计算key的hash值" rel="noopener nofollow">3.4.1. 计算key的hash值</a></li><li><a href="#342-使用hash值数组长度-1计算改数据存放的位置i" rel="noopener nofollow">3.4.2. 使用hash值&amp;数组长度-1计算改数据存放的位置i</a></li><li><a href="#343-第一个节点就是要找的节点" rel="noopener nofollow">3.4.3. 第一个节点就是要找的节点</a></li><li><a href="#344-转调树或红黑树的查找操作找到节点" rel="noopener nofollow">3.4.4. 转调树或红黑树的查找操作找到节点</a></li><li><a href="#345-没有找到返回null" rel="noopener nofollow">3.4.5. 没有找到返回null</a></li></ul></li><li><a href="#35-containskey方法" rel="noopener nofollow">3.5. containsKey方法</a></li><li><a href="#36-remove方法" rel="noopener nofollow">3.6. remove方法</a><ul><li><a href="#361-计算key的hash值" rel="noopener nofollow">3.6.1. 计算key的hash值</a></li><li><a href="#362-使用hash值数组长度1计算改数据存放的位置i" rel="noopener nofollow">3.6.2. 使用hash值&amp;数组长度1计算改数据存放的位置i</a></li><li><a href="#363-调用链表或是红黑树的查找操作找到key相等的节点" rel="noopener nofollow">3.6.3. 调用链表或是红黑树的查找操作找到key相等的节点</a></li><li><a href="#364-调用链表或红黑树的删除操作" rel="noopener nofollow">3.6.4. 调用链表或红黑树的删除操作</a></li></ul></li><li><a href="#37-containsvalue" rel="noopener nofollow">3.7. containsValue</a></li></ul></li><li><a href="#4-问题" rel="noopener nofollow">4. 问题</a><ul><li><a href="#41-相对于jdk17的区别" rel="noopener nofollow">4.1. 相对于JDK1.7的区别</a></li><li><a href="#42-如何解决并发resize时的死循环问题" rel="noopener nofollow">4.2. 如何解决并发resize时的死循环问题</a></li><li><a href="#43-什么时候扩容" rel="noopener nofollow">4.3. 什么时候扩容</a></li><li><a href="#44-怎么扩容的" rel="noopener nofollow">4.4. 怎么扩容的</a></li></ul></li><li><a href="#5-参考" rel="noopener nofollow">5. 参考</a></li></ul></div><p></p>
<h2 id="1-是什么">1. 是什么</h2>
<p>实现O(1)存取效率的key-value对数据结构</p>
<h2 id="2-如何使用">2. 如何使用</h2>
<pre><code class="language-java">public class HashMapTest
{
    public static void main(String[] args)
    {
        HashMap&lt;String, Object&gt; map = new HashMap&lt;&gt;();
        map.put("key1", "value1");

        System.out.println(map.get("key1"));
        map.remove("key1");

        map.containsKey("key1");
    }
}
</code></pre>
<h2 id="3-原理分析">3. 原理分析</h2>
<h3 id="31-uml">3.1. uml</h3>
<p><img alt="" loading="lazy" data-src="https://raw.githubusercontent.com/TDoct/images/master/img/20200122230723.png" class="lazyload"></p>
<p>可克隆，可序列化，实现了Map</p>
<h3 id="32-构造方法">3.2. 构造方法</h3>
<pre><code class="language-java">
public class HashMap&lt;K,V&gt; extends AbstractMap&lt;K,V&gt;
    implements Map&lt;K,V&gt;, Cloneable, Serializable {
    //使用Node数组实现，使用链地址法解决Hash冲突
    transient Node&lt;K,V&gt;[] table;
    //默认的初始容量
    static final int DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4; // aka 16
    //最大容量
    static final int MAXIMUM_CAPACITY = 1 &lt;&lt; 30;
    //默认的加载因子
    static final float DEFAULT_LOAD_FACTOR = 0.75f;
    //链表转树的长度
    static final int TREEIFY_THRESHOLD = 8;
    //树转回链表的长度
    static final int UNTREEIFY_THRESHOLD = 6;

    static final int MIN_TREEIFY_CAPACITY = 64; 

    public HashMap() {
    //设置默认加载因子
    //table中已有的元素个数/table所有元素的个数，当这个比值&gt;=0.75的时候需要扩容
    //或者说使用的容量到达16*0.75=12时需要扩容
    this.loadFactor = DEFAULT_LOAD_FACTOR; // all other fields defaulted
    }
}
</code></pre>
<h3 id="33-put方法">3.3. put方法</h3>
<p>总体伪算法如下：</p>
<ul>
<li>
<p>计算key的hash值</p>
</li>
<li>
<p>使用hash值&amp;数组长度1计算改数据存放的位置i</p>
<ul>
<li>table为空，进行扩容</li>
<li>如果位置i为空，那么用（key，value）存入该位置</li>
<li>如果位置i不为空
<ul>
<li>比较该位置的key与新的key是否相等，是则替换value</li>
<li>否则
<ul>
<li>如果是树节点，那么调用红黑树的插入操作</li>
<li>如果是链表节点，那么遍历链表
<ul>
<li>如果找到key相同的节点，替换value</li>
<li>否则插入到链表尾部</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>插入完毕之后比较size是否大于容量*加载因子，是则需要扩容</p>
<ul>
<li>容量为原来的两倍</li>
<li>创建一个新的node数组，原来数组的元素迁移到这个数组中</li>
</ul>
</li>
<li>
<p>put</p>
</li>
</ul>
<pre><code class="language-java">public V put(K key, V value) {
    return putVal(hash(key), key, value, false, true);
}

</code></pre>
<h4 id="331-计算key的hash值">3.3.1. 计算key的hash值</h4>
<ul>
<li>hash</li>
</ul>
<pre><code class="language-java">//hash函数
static final int hash(Object key) {
    int h;
    //hashCode 异或 hashCode 右移16bit
    return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);
}
</code></pre>
<ul>
<li>putVal</li>
</ul>
<pre><code class="language-java">final V putVal(int hash, K key, V value, boolean onlyIfAbsent,
               boolean evict) {
    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, i;
	//table为空或者长度为0
    if ((tab = table) == null || (n = tab.length) == 0)
    	//第一次扩容
        n = (tab = resize()).length;
    //使用hash至以及数组长度计算下标，如果table[下标]为空，即没有元素，直接赋值即可
    if ((p = tab[i = (n  1) &amp; hash]) == null)
        tab[i] = newNode(hash, key, value, null);
    //否则说明table[下标]有元素
    else {
        Node&lt;K,V&gt; e; K k;
        //头节点不仅hash值相同，key也equals（即头节点就是要找的节点），那么保存这个节点以便后续使用
        if (p.hash == hash &amp;&amp;
            ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))
            e = p;
        //头节点不是要找的节点，同时是个TreeNode，那么转调tree的操作
        else if (p instanceof TreeNode)
            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value);
        //头节点不是要找的节点，同时是普通的链表
        else {
        	//遍历链表找，同时记录遍历了几个元素存到bitCount里。
            for (int binCount = 0; ; ++binCount) {
            	//到达链表的尾部
                if ((e = p.next) == null) {
                    p.next = newNode(hash, key, value, null);
                    //判断bitCount是否达到树化的限度，是则树化
                    if (binCount &gt;= TREEIFY_THRESHOLD  1) // 1 for 1st
                        treeifyBin(tab, hash);
                    break;
                }
                //找到了相等的节点
                if (e.hash == hash &amp;&amp;
                    ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))
                    break;
                p = e;
            }
        }
        //如果有找到相等的节点，那么e保存的就是这个节点的引用，直接替换value即可
        if (e != null) { // existing mapping for key
            V oldValue = e.value;
            if (!onlyIfAbsent || oldValue == null)
                e.value = value;
            afterNodeAccess(e);
            return oldValue;
        }
    }
    ++modCount;
    //加入这个节点后超过了threshold，那么resize
    if (++size &gt; threshold)
        resize();
    afterNodeInsertion(evict);
    return null;
}
</code></pre>
<h4 id="332-第一次进来table肯定为空那么扩容">3.3.2. 第一次进来table肯定为空，那么扩容</h4>
<ul>
<li>resize方法</li>
</ul>
<pre><code class="language-java">final Node&lt;K,V&gt;[] resize() {
	//保存旧的table，capacity，threshold
    Node&lt;K,V&gt;[] oldTab = table;
    int oldCap = (oldTab == null) ? 0 : oldTab.length;
    int oldThr = threshold;
    //新的capacity和threshold初始化为0
    int newCap, newThr = 0;
    if (oldCap &gt; 0) {
    	//旧的capacity比int MAXIMUM_CAPACITY = 1 &lt;&lt; 30还要大，那么更新threshold为Integer.MAX_VALUE，并且直接返回旧的table（即不进行扩容）
        if (oldCap &gt;= MAXIMUM_CAPACITY) {
            threshold = Integer.MAX_VALUE;
            return oldTab;
        }
        //新的capacity为旧的capacity的两倍（即新的capacity为16*2=32）
        //如果32 &lt; MAXIMUM_CAPACITY 并且 oldCap &gt;= DEFAULT_INITIAL_CAPACITY
        else if ((newCap = oldCap &lt;&lt; 1) &lt; MAXIMUM_CAPACITY &amp;&amp;
                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)
         	//则把threshold也更新为旧的2倍（即新的threshold为12*2=24）
            newThr = oldThr &lt;&lt; 1; // double threshold
    }
    //新的capacity就为threshold
    else if (oldThr &gt; 0) // initial capacity was placed in threshold
        newCap = oldThr;
    //第一次初始化。
    else { // zero initial threshold signifies using defaults
        newCap = DEFAULT_INITIAL_CAPACITY;
        newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);
    }
    if (newThr == 0) {
        float ft = (float)newCap * loadFactor;
        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (float)MAXIMUM_CAPACITY ?
                  (int)ft : Integer.MAX_VALUE);
    }
    threshold = newThr;
    @SuppressWarnings({"rawtypes","unchecked"})
    //创建新的table，大小为newCapacity
    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])new Node[newCap];
    table = newTab;
    if (oldTab != null) {
    	//遍历旧table中的每一个链表
        for (int j = 0; j &lt; oldCap; ++j) {
            Node&lt;K,V&gt; e;
            if ((e = oldTab[j]) != null) {
                //置为null让gc及时回收，当然oldTab[j]已经保存到局部变量e中了
                oldTab[j] = null;
                //第一种情况：如果链表中只有一个节点
                if (e.next == null)
                	//那么重新计算位置（e.hash &amp; (newCap  1)），并放入新的table
                    newTab[e.hash &amp; (newCap - 1)] = e;
                //第二种情况：链表中有多个节点，同时第一个节点为TreeNode，那么转调树的操作
                else if (e instanceof TreeNode)
                    ((TreeNode&lt;K,V&gt;)e).split(this, newTab, j, oldCap);
                //第三种情况：链表中有多个节点，且是普通链表
                else { // preserve order
                    //旧table的链表，rehash后在新table中的位置
                        //要么跟旧table中的位置一样-----------（1）
                        //要么是旧table中的位置+oldCap-------（2）
                    //其实就是把原来的链表分成两部分，所以
                        //loXXX代表（1）
                        //hiXXX代表（2）
                    Node&lt;K,V&gt; loHead = null, loTail = null;

                    Node&lt;K,V&gt; hiHead = null, hiTail = null;
                    Node&lt;K,V&gt; next;
                    do {
                        next = e.next;
                      	//高位是0，那么这个元素在新table中的位置跟在旧table一样
                        if ((e.hash &amp; oldCap) == 0) {
                            if (loTail == null)
                                loHead = e;
                            else
                                loTail.next = e;
                            loTail = e;
                        }
                        //高位是1，那么这个元素在新table中的位置是旧table的位置+oldCap
                        else {
                            if (hiTail == null)
                                hiHead = e;
                            else
                                hiTail.next = e;
                            hiTail = e;
                        }
                    } while ((e = next) != null);
                    //上面的循环把链表瓜分完了，下面开始赋值到新table了
                    if (loTail != null) {
                        loTail.next = null;
                        //（1）
                        newTab[j] = loHead;
                    }
                    if (hiTail != null) {
                        hiTail.next = null;
                        //（2）
                        newTab[j + oldCap] = hiHead;
                    }
                }
            }
        }
    }
    return newTab;
}
</code></pre>
<h4 id="333-使用hash值数组长度1计算改数据存放的位置i">3.3.3. 使用hash值&amp;数组长度1计算改数据存放的位置i</h4>
<pre><code class="language-java">i = (n - 1) &amp; hash
</code></pre>
<h4 id="334-第二次进来如果位置i为空那么用keyvalue存入该位置">3.3.4. 第二次进来如果位置i为空，那么用（key，value）存入该位置</h4>
<pre><code class="language-java">//使用hash至以及数组长度计算下标，如果table[下标]为空，即没有元素，直接赋值即可
if ((p = tab[i = (n - 1) &amp; hash]) == null)
    tab[i] = newNode(hash, key, value, null);

</code></pre>
<h4 id="335-第三次进来如果位置i不为空那么遍历链表或红黑树找到key相等的节点替换value">3.3.5. 第三次进来如果位置i不为空，那么遍历链表或红黑树找到key相等的节点替换value</h4>
<pre><code class="language-java">//否则说明table[下标]有元素
else {
    Node&lt;K,V&gt; e; K k;
    //头节点不仅hash值相同，key也equals（即头节点就是要找的节点），那么保存这个节点以便后续使用
    if (p.hash == hash &amp;&amp;
        ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))
        e = p;
    //头节点不是要找的节点，同时是个TreeNode，那么转调tree的操作
    else if (p instanceof TreeNode)
        e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value);
    //头节点不是要找的节点，同时是普通的链表
    else {
    	//遍历链表找，同时记录遍历了几个元素存到bitCount里。
        for (int binCount = 0; ; ++binCount) {
        	//到达链表的尾部
            if ((e = p.next) == null) {
                p.next = newNode(hash, key, value, null);
                //判断bitCount是否达到树化的限度，是则树化
                //这里binCount为TREEIFY_THRESHOLD - 1，也就是7的时候
                //也就是这个链表中的节点（不包括头节点）个数为8的时候
                if (binCount &gt;= TREEIFY_THRESHOLD - 1) // 1 for 1st
                    treeifyBin(tab, hash);
                break;
            }
            //找到了相等的节点
            if (e.hash == hash &amp;&amp;
                ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))
                break;
            p = e;
        }
    }
    //如果有找到相等的节点，那么e保存的就是这个节点的引用，直接替换value即可
    if (e != null) { // existing mapping for key
        V oldValue = e.value;
        if (!onlyIfAbsent || oldValue == null)
            e.value = value;
        afterNodeAccess(e);
        return oldValue;
    }
}
</code></pre>
<h5 id="3351-怎么转换成红黑树的">3.3.5.1. 怎么转换成红黑树的</h5>
<ul>
<li>treeifyBin</li>
</ul>
<pre><code class="language-java">final void treeifyBin(Node&lt;K,V&gt;[] tab, int hash) {
    int n, index; Node&lt;K,V&gt; e;
    //这里table的长度&lt;64的时候并不进行树化，而是进行扩容
    //也就是说链表转换成红黑树的条件是 链表中元素个数为8个 并且 table长度为64
    if (tab == null || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)//MIN_TREEIFY_CAPACITY是64
        resize();
    //下面的操作是把链表中的节点（Node）转换成树中的节点（TreeNode）
    else if ((e = tab[index = (n - 1) &amp; hash]) != null) {
        TreeNode&lt;K,V&gt; hd = null, tl = null;
        //这个循环遍历链表
        do {
            //传入链表中的当前节点以及下一个节点，转换成TreeNode
            TreeNode&lt;K,V&gt; p = replacementTreeNode(e, null);
            //tail为空，就是说现在是树中的第一个元素
            if (tl == null)
                //那么同时得初始化head为当前节点
                hd = p;
            //不是树中的第一个元素，那么插入到树的末尾
            else {
                //这里的树节点怎么感觉像是个双向链表？？？
                p.prev = tl;
                tl.next = p;
            }
            tl = p;
        } while ((e = e.next) != null);
        if ((tab[index] = hd) != null)
            //上面仅是构造了TreeNode为节点的双向链表，这里才是真正的树化操作
            hd.treeify(tab);
    }
}

</code></pre>
<h6 id="33511-node-treenode">3.3.5.1.1. Node-&gt;TreeNode</h6>
<ul>
<li>replacementTreeNode</li>
</ul>
<pre><code class="language-java">TreeNode&lt;K,V&gt; replacementTreeNode(Node&lt;K,V&gt; p, Node&lt;K,V&gt; next) {
    //就是把当前节点的hash、key、value初始化成TreeNode的hash、key、value
    //把下一个节点初始化为TreeNode.next
    return new TreeNode&lt;&gt;(p.hash, p.key, p.value, next);
}
    
</code></pre>
<ul>
<li>TreeNode</li>
</ul>
<pre><code class="language-java">static final class TreeNode&lt;K,V&gt; extends LinkedHashMap.Entry&lt;K,V&gt; {
    TreeNode&lt;K,V&gt; parent;  // red-black tree links
    TreeNode&lt;K,V&gt; left;
    TreeNode&lt;K,V&gt; right;
    TreeNode&lt;K,V&gt; prev;    // needed to unlink next upon deletion
    boolean red;
    //这个构造方法其实就是HashMap的Node的构造方法，没什么特殊的
    TreeNode(int hash, K key, V val, Node&lt;K,V&gt; next) {
    //LinkedHashMap.Entry
        super(hash, key, val, next);
    }

</code></pre>
<ul>
<li>LinkedHashMap.Entry</li>
</ul>
<pre><code class="language-java">static class Entry&lt;K,V&gt; extends HashMap.Node&lt;K,V&gt; {
    Entry&lt;K,V&gt; before, after;
    Entry(int hash, K key, V value, Node&lt;K,V&gt; next) {
    //HashMap.Node
        super(hash, key, value, next);
    }
}
</code></pre>
<ul>
<li>HashMap.Node</li>
</ul>
<pre><code class="language-java">static class Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; {
    final int hash;
    final K key;
    V value;
    Node&lt;K,V&gt; next;

    Node(int hash, K key, V value, Node&lt;K,V&gt; next) {
        this.hash = hash;
        this.key = key;
        this.value = value;
        this.next = next;
    }

</code></pre>
<h6 id="33512-树化">3.3.5.1.2. 树化</h6>
<ul>
<li>treeify</li>
</ul>
<p>有点复杂，暂时飘过。。。</p>
<pre><code class="language-java">final void treeify(Node&lt;K,V&gt;[] tab) {
    TreeNode&lt;K,V&gt; root = null;
    for (TreeNode&lt;K,V&gt; x = this, next; x != null; x = next) {
        next = (TreeNode&lt;K,V&gt;)x.next;
        x.left = x.right = null;
        if (root == null) {
            x.parent = null;
            x.red = false;
            root = x;
        }
        else {
            K k = x.key;
            int h = x.hash;
            Class&lt;?&gt; kc = null;
            for (TreeNode&lt;K,V&gt; p = root;;) {
                int dir, ph;
                K pk = p.key;
                if ((ph = p.hash) &gt; h)
                    dir = -1;
                else if (ph &lt; h)
                    dir = 1;
                else if ((kc == null &amp;&amp;
                          (kc = comparableClassFor(k)) == null) ||
                         (dir = compareComparables(kc, k, pk)) == 0)
                    dir = tieBreakOrder(k, pk);

                TreeNode&lt;K,V&gt; xp = p;
                if ((p = (dir &lt;= 0) ? p.left : p.right) == null) {
                    x.parent = xp;
                    if (dir &lt;= 0)
                        xp.left = x;
                    else
                        xp.right = x;
                    root = balanceInsertion(root, x);
                    break;
                }
            }
        }
    }
    moveRootToFront(tab, root);
}
</code></pre>
<h3 id="34-get方法">3.4. get方法</h3>
<p>总体伪算法如下：</p>
<ul>
<li>计算key的hash值</li>
<li>使用hash值&amp;数组长度1计算改数据存放的位置i
<ul>
<li>如果位置i不为空，那么比较key是否相等，是则返回
<ul>
<li>否则如果是树，转调红黑树的查询</li>
<li>如果是链表，遍历链表查找key相等的node</li>
</ul>
</li>
<li>否则直接返回null</li>
</ul>
</li>
</ul>
<pre><code class="language-java">public V get(Object key) {
    Node&lt;K,V&gt; e;
    //通过key的hash值+key本身寻找node
    return (e = getNode(hash(key), key)) == null ? null : e.value;
}
</code></pre>
<h4 id="341-计算key的hash值">3.4.1. 计算key的hash值</h4>
<ul>
<li>hash</li>
</ul>
<pre><code class="language-java">//hash函数
static final int hash(Object key) {
    int h;
    //hashCode 异或 hashCode 右移16bit
    return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);
}


</code></pre>
<ul>
<li>getNode方法</li>
</ul>
<pre><code class="language-java">final Node&lt;K,V&gt; getNode(int hash, Object key) {
    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; int n; K k;
    //通过hash&amp;(table长度1)计算下标
    if ((tab = table) != null &amp;&amp; (n = tab.length) &gt; 0 &amp;&amp;
        (first = tab[(n  1) &amp; hash]) != null) {
        //找到了：当前节点与table[下标]相等hash相等且key相等
        if (first.hash == hash &amp;&amp; // always check first node
            ((k = first.key) == key || (key != null &amp;&amp; key.equals(k))))
            return first;
        //继续寻找
        if ((e = first.next) != null) {
        	//TreeNode，转调树
            if (first instanceof TreeNode)
                return ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);
            do {
            	//遍历链表寻找相等的节点
                if (e.hash == hash &amp;&amp;
                    ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))
                    return e;
            } while ((e = e.next) != null);
        }
    }
    return null;
}
</code></pre>
<h4 id="342-使用hash值数组长度-1计算改数据存放的位置i">3.4.2. 使用hash值&amp;数组长度-1计算改数据存放的位置i</h4>
<pre><code class="language-java">i = (n - 1) &amp; hash
</code></pre>
<h4 id="343-第一个节点就是要找的节点">3.4.3. 第一个节点就是要找的节点</h4>
<pre><code class="language-java">if ((tab = table) != null &amp;&amp; (n = tab.length) &gt; 0 &amp;&amp;
    (first = tab[(n  1) &amp; hash]) != null) {
    //找到了：当前节点与table[下标]相等hash相等且key相等
    if (first.hash == hash &amp;&amp; // always check first node
        ((k = first.key) == key || (key != null &amp;&amp; key.equals(k))))
        return first;
</code></pre>
<h4 id="344-转调树或红黑树的查找操作找到节点">3.4.4. 转调树或红黑树的查找操作找到节点</h4>
<pre><code class="language-java"> //继续寻找
if ((e = first.next) != null) {
	//TreeNode，转调树
    if (first instanceof TreeNode)
        return ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);
    do {
    	//遍历链表寻找相等的节点
        if (e.hash == hash &amp;&amp;
            ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))
            return e;
    } while ((e = e.next) != null);
}
</code></pre>
<h4 id="345-没有找到返回null">3.4.5. 没有找到返回null</h4>
<pre><code class="language-java">return null;
</code></pre>
<h3 id="35-containskey方法">3.5. containsKey方法</h3>
<pre><code class="language-java">public boolean containsKey(Object key) {
    //也是调用的getNode方法判断是否为空
    return getNode(hash(key), key) != null;
}
</code></pre>
<h3 id="36-remove方法">3.6. remove方法</h3>
<p>总体伪算法如下：</p>
<ul>
<li>
<p>计算key的hash值</p>
</li>
<li>
<p>使用hash值&amp;数组长度1计算改数据存放的位置i</p>
</li>
<li>
<p>如果位置i不为空，对比key是否相等，相等则改变头节点指向下一个</p>
</li>
<li>
<p>否则</p>
<ul>
<li>如果是树节点，转调红黑树的删除接口</li>
<li>如果是链表节点，遍历链表找到key相等的节点，把前一个节点的next指向该节点的next</li>
</ul>
</li>
<li>
<p>remove</p>
</li>
</ul>
<pre><code class="language-java">public V remove(Object key) {
    Node&lt;K,V&gt; e;
    return (e = removeNode(hash(key), key, null, false, true)) == null ?
        null : e.value;
}
</code></pre>
<h4 id="361-计算key的hash值">3.6.1. 计算key的hash值</h4>
<ul>
<li>hash</li>
</ul>
<pre><code class="language-java">//hash函数
static final int hash(Object key) {
    int h;
    //hashCode 异或 hashCode 右移16bit
    return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);
}


</code></pre>
<ul>
<li>removeNode方法</li>
</ul>
<pre><code class="language-java">final Node&lt;K,V&gt; removeNode(int hash, Object key, Object value,
                           boolean matchValue, boolean movable) {
    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, index;
    if ((tab = table) != null &amp;&amp; (n = tab.length) &gt; 0 &amp;&amp;
    	//计算第一个节点的位置
        (p = tab[index = (n  1) &amp; hash]) != null) {
        Node&lt;K,V&gt; node = null, e; K k; V v;
        //第一个节点就是要找的节点
        if (p.hash == hash &amp;&amp;
            ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))
            node = p;
        //不是则继续寻找
        else if ((e = p.next) != null) {
        	//是个TreeNode，转调树
            if (p instanceof TreeNode)
                node = ((TreeNode&lt;K,V&gt;)p).getTreeNode(hash, key);
            //遍历链表直到找到相等的节点
            else {
                do {
                    if (e.hash == hash &amp;&amp;
                        ((k = e.key) == key ||
                         (key != null &amp;&amp; key.equals(k)))) {
                        node = e;
                        break;
                    }
                    p = e;
                } while ((e = e.next) != null);
            }
        }
        //有找到节点
        if (node != null &amp;&amp; (!matchValue || (v = node.value) == value ||
                             (value != null &amp;&amp; value.equals(v)))) {
            //转调树
            if (node instanceof TreeNode)
                ((TreeNode&lt;K,V&gt;)node).removeTreeNode(this, tab, movable);
            //链表的第一个元素
            else if (node == p)
                tab[index] = node.next;
            //链表的非第一个元素
            else
                p.next = node.next;
            ++modCount;
            size;
            afterNodeRemoval(node);
            return node;
        }
    }
    return null;
}

</code></pre>
<h4 id="362-使用hash值数组长度1计算改数据存放的位置i">3.6.2. 使用hash值&amp;数组长度1计算改数据存放的位置i</h4>
<pre><code class="language-java">i = (n  1) &amp; hash
</code></pre>
<h4 id="363-调用链表或是红黑树的查找操作找到key相等的节点">3.6.3. 调用链表或是红黑树的查找操作找到key相等的节点</h4>
<pre><code class="language-java">Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, index;
    if ((tab = table) != null &amp;&amp; (n = tab.length) &gt; 0 &amp;&amp;
    	//计算第一个节点的位置
        (p = tab[index = (n  1) &amp; hash]) != null) {
        Node&lt;K,V&gt; node = null, e; K k; V v;
        //第一个节点就是要找的节点
        if (p.hash == hash &amp;&amp;
            ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))
            node = p;
        //不是则继续寻找
        else if ((e = p.next) != null) {
        	//是个TreeNode，转调树
            if (p instanceof TreeNode)
                node = ((TreeNode&lt;K,V&gt;)p).getTreeNode(hash, key);
            //遍历链表直到找到相等的节点
            else {
                do {
                    if (e.hash == hash &amp;&amp;
                        ((k = e.key) == key ||
                         (key != null &amp;&amp; key.equals(k)))) {
                        node = e;
                        break;
                    }
                    p = e;
                } while ((e = e.next) != null);
            }
        }
</code></pre>
<h4 id="364-调用链表或红黑树的删除操作">3.6.4. 调用链表或红黑树的删除操作</h4>
<pre><code class="language-java">//有找到节点
if (node != null &amp;&amp; (!matchValue || (v = node.value) == value ||
                     (value != null &amp;&amp; value.equals(v)))) {
    //转调树
    if (node instanceof TreeNode)
        ((TreeNode&lt;K,V&gt;)node).removeTreeNode(this, tab, movable);
    //链表的第一个元素
    else if (node == p)
        tab[index] = node.next;
    //链表的非第一个元素
    else
        p.next = node.next;
    ++modCount;
    size;
    afterNodeRemoval(node);
    return node;
}
</code></pre>
<h3 id="37-containsvalue">3.7. containsValue</h3>
<ul>
<li>效率O（N²）</li>
</ul>
<pre><code class="language-java">public boolean containsValue(Object value) {
Node&lt;K,V&gt;[] tab; V v;
if ((tab = table) != null &amp;&amp; size &gt; 0) {
	//遍历数组的每个元素
    for (int i = 0; i &lt; tab.length; ++i) {
    	//链表的每个元素
        for (Node&lt;K,V&gt; e = tab[i]; e != null; e = e.next) {
            if ((v = e.value) == value ||
                (value != null &amp;&amp; value.equals(v)))
                return true;
        }
    }
}
return false;
}
</code></pre>
<h2 id="4-问题">4. 问题</h2>
<h3 id="41-相对于jdk17的区别">4.1. 相对于JDK1.7的区别</h3>
<ul>
<li>使用了红黑树<br>
因此JDK1.8的内部实现是数组+链表+红黑树<br>
1.8之前是数组+链表实现的。对于一个key，先计算其Hash值再对数组大小取模决定放在那个元素上，再通过连地址法解决冲突<br>
如果很多key映射到同一个元素上，那么效率退化成O（N），因此1.8在链表超过阈值的时候会转成红黑树，效率为O（logN）</li>
<li>解决了并发resize时的死循环问题<br>
保留了顺序，使用的尾插法而不是头插法</li>
</ul>
<h3 id="42-如何解决并发resize时的死循环问题">4.2. 如何解决并发resize时的死循环问题</h3>
<p>保留了顺序，把头插法改成了尾插法</p>
<h3 id="43-什么时候扩容">4.3. 什么时候扩容</h3>
<p>map中Entry的数量 &gt;= threshold的时候，其中threshold =容量*负载因子</p>
<h3 id="44-怎么扩容的">4.4. 怎么扩容的</h3>
<p>参考</p>
<blockquote>
<p>3.3.2. 第一次进来table肯定为空，那么扩容</p>
</blockquote>
<h2 id="5-参考">5. 参考</h2>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/87929020" target="_blank" rel="noopener nofollow">HashMap几个***钻的面试题，第六个我就跪了 - 知乎</a></li>
<li><a href="https://juejin.im/post/5d9fbd72e51d45781a677c87" target="_blank" rel="noopener nofollow">3分钟让你明白 HashMap之红黑树树化过程 - 掘金</a></li>
</ul>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-06-30 11:02">2025-06-30 11:02</span>&nbsp;
<a href="https://www.cnblogs.com/ThinkerQAQ">ThinkerQAQ</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18957376);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18957376', targetLink: 'https://www.cnblogs.com/ThinkerQAQ/p/18957376', title: '7.Java SDK源码分析系列笔记-JDK1.8 HashMap' })">举报</a>
</div>
        