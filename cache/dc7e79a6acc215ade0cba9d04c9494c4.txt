
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/Amd794/p/18915170" title="发布于 2025-06-07 04:15">
    <span role="heading" aria-level="2">FastAPI认证系统：从零到令牌大师的奇幻之旅</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        <img src="https://img2024.cnblogs.com/blog/1546022/202506/1546022-20250606203841792-818500421.png" alt="FastAPI认证系统：从零到令牌大师的奇幻之旅" class="desc_img">
        FastAPI认证系统的基础架构包括用户注册、登录认证、权限验证和令牌刷新机制。实现步骤涵盖环境准备、数据库模型定义、安全工具函数、路由实现及API端点保护。通过Swagger UI可测试注册、登录和受保护端点。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<hr>
<p>title: FastAPI认证系统：从零到令牌大师的奇幻之旅<br>
date: 2025/06/06 16:13:06<br>
updated: 2025/06/06 16:13:06<br>
author: <a href="https://cmdragon.cn" target="_blank" rel="noopener nofollow"> cmdragon </a></p>
<p>excerpt:<br>
FastAPI认证系统的基础架构包括用户注册、登录认证、权限验证和令牌刷新机制。实现步骤涵盖环境准备、数据库模型定义、安全工具函数、路由实现及API端点保护。通过Swagger UI可测试注册、登录和受保护端点。常见报错如422验证错误和401未授权，可通过检查请求参数和令牌有效性解决。JWT令牌由Header、Payload和Signature组成，密码存储使用哈希函数确保安全性。</p>
<p>categories:</p>
<ul>
<li>后端开发</li>
<li>FastAPI</li>
</ul>
<p>tags:</p>
<ul>
<li>FastAPI</li>
<li>认证系统</li>
<li>JWT</li>
<li>用户注册</li>
<li>权限验证</li>
<li>Swagger UI</li>
<li>安全工具函数</li>
</ul>
<hr>
<img src="https://static.shutu.cn/shutu/jpeg/openab/2025/06/06/29cf0fdf7274191b4a977ffc364eeed9.jpeg" title="cmdragon_cn.png" alt="cmdragon_cn.png">
<img src="https://api2.cmdragon.cn/upload/cmder/20250304_012821924.jpg" title="cmdragon_cn.png" alt="cmdragon_cn.png">
<p>扫描<a href="https://api2.cmdragon.cn/upload/cmder/20250304_012821924.jpg" target="_blank" rel="noopener nofollow">二维码</a><br>
关注或者微信搜一搜：<code>编程智域 前端至全栈交流与成长</code></p>
<p><a href="https://tools.cmdragon.cn/zh/apps?category=ai_chat" target="_blank" rel="noopener nofollow">探索数千个预构建的 AI 应用，开启你的下一个伟大创意</a>：<a href="https://tools.cmdragon.cn/" target="_blank" rel="noopener nofollow">https://tools.cmdragon.cn/</a></p>
<h1 id="第一章构建fastapi完整认证系统">第一章：构建FastAPI完整认证系统</h1>
<h2 id="1-认证系统基础架构">1. 认证系统基础架构</h2>
<p>现代Web应用的认证系统通常包含以下核心组件：</p>
<ul>
<li>用户注册模块（处理密码哈希存储）</li>
<li>登录认证流程（JWT令牌颁发）</li>
<li>权限验证中间件（保护API端点）</li>
<li>令牌刷新机制（维护会话有效性）</li>
</ul>
<p>认证流程示意图：<br>
客户端 → 注册 → 登录获取令牌 → 携带令牌访问API → 服务端验证令牌 → 返回资源</p>
<h2 id="2-完整实现步骤">2. 完整实现步骤</h2>
<h3 id="21-环境准备">2.1 环境准备</h3>
<p>安装所需依赖（推荐使用虚拟环境）：</p>
<pre><code class="language-bash">pip install fastapi==0.78.0 uvicorn==0.18.2 python-jose[cryptography]==3.3.0 passlib[bcrypt]==1.7.4 python-multipart==0.0.5
</code></pre>
<h3 id="22-数据库模型定义">2.2 数据库模型定义</h3>
<pre><code class="language-python">from pydantic import BaseModel, EmailStr
from typing import Optional


class UserCreate(BaseModel):
    email: EmailStr
    password: str


class UserInDB(UserCreate):
    hashed_password: str


class Token(BaseModel):
    access_token: str
    token_type: str


class TokenData(BaseModel):
    email: Optional[EmailStr] = None
</code></pre>
<h3 id="23-安全工具函数">2.3 安全工具函数</h3>
<pre><code class="language-python">from datetime import datetime, timedelta
from jose import JWTError, jwt
from passlib.context import CryptContext

SECRET_KEY = "your-secret-key-here"
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")


def verify_password(plain_password: str, hashed_password: str):
    return pwd_context.verify(plain_password, hashed_password)


def get_password_hash(password: str):
    return pwd_context.hash(password)


def create_access_token(data: dict):
    to_encode = data.copy()
    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    to_encode.update({"exp": expire})
    return jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
</code></pre>
<h3 id="24-路由实现">2.4 路由实现</h3>
<pre><code class="language-python">from fastapi import APIRouter, Depends, HTTPException, status
from fastapi.security import OAuth2PasswordRequestForm

router = APIRouter()

# 模拟数据库
fake_users_db = {}


@router.post("/register", response_model=UserInDB)
async def register(user: UserCreate):
    if user.email in fake_users_db:
        raise HTTPException(status_code=400, detail="Email already registered")

    hashed_password = get_password_hash(user.password)
    user_db = UserInDB(**user.dict(), hashed_password=hashed_password)
    fake_users_db[user.email] = user_db.dict()
    return user_db


@router.post("/login", response_model=Token)
async def login(form_data: OAuth2PasswordRequestForm = Depends()):
    user_data = fake_users_db.get(form_data.username)
    if not user_data or not verify_password(form_data.password, user_data["hashed_password"]):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid credentials",
            headers={"WWW-Authenticate": "Bearer"},
        )

    access_token = create_access_token(data={"sub": user_data["email"]})
    return {"access_token": access_token, "token_type": "bearer"}
</code></pre>
<h3 id="25-保护api端点">2.5 保护API端点</h3>
<pre><code class="language-python">from fastapi.security import OAuth2PasswordBearer

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="login")


async def get_current_user(token: str = Depends(oauth2_scheme)):
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        email: str = payload.get("sub")
        if email is None:
            raise credentials_exception
    except JWTError:
        raise credentials_exception

    user = fake_users_db.get(email)
    if user is None:
        raise credentials_exception
    return user


@router.get("/protected")
async def protected_endpoint(current_user: UserInDB = Depends(get_current_user)):
    return {
        "message": f"Hello {current_user['email']}",
        "protected_data": "Sensitive information here"
    }
</code></pre>
<h2 id="3-使用swagger-ui测试">3. 使用Swagger UI测试</h2>
<h3 id="31-启动应用">3.1 启动应用</h3>
<p>创建main.py：</p>
<pre><code class="language-python">from fastapi import FastAPI

app = FastAPI()
app.include_router(router, prefix="/api")

if __name__ == "__main__":
    import uvicorn

    uvicorn.run(app, host="0.0.0.0", port=8000)
</code></pre>
<h3 id="32-测试流程">3.2 测试流程</h3>
<ol>
<li>访问 <a href="http://localhost:8000/docs" target="_blank" rel="noopener nofollow">http://localhost:8000/docs</a></li>
<li>测试注册接口：
<ul>
<li>请求体：</li>
</ul>
</li>
<li>测试登录接口获取令牌</li>
<li>点击"Authorize"按钮，输入获取的JWT令牌</li>
<li>测试/protected端点</li>
</ol>
<p>成功响应示例：</p>
<pre><code class="language-json">{
  "message": "Hello user@example.com",
  "protected_data": "Sensitive information here"
}
</code></pre>
<h2 id="4-常见报错解决方案">4. 常见报错解决方案</h2>
<h3 id="41-422-validation-error">4.1 422 Validation Error</h3>
<p><strong>现象</strong>：请求参数不符合验证规则<br>
<strong>解决方案</strong>：</p>
<ol>
<li>检查请求体是否符合定义的Pydantic模型</li>
<li>验证email格式是否正确（必须包含@符号）</li>
<li>确保密码字段存在且长度合适</li>
</ol>
<h3 id="42-401-unauthorized">4.2 401 Unauthorized</h3>
<p><strong>原因</strong>：</p>
<ul>
<li>缺失Authorization头</li>
<li>令牌过期</li>
<li>无效的签名<br>
<strong>处理步骤</strong>：</li>
</ul>
<ol>
<li>检查请求头是否包含<code>Authorization: Bearer &lt;token&gt;</code></li>
<li>重新获取有效令牌</li>
<li>验证密钥和算法是否匹配</li>
</ol>
<h2 id="课后quiz">课后Quiz</h2>
<p><strong>Q1：为什么在用户注册时要存储密码哈希而不是明文？</strong><br>
A：防止数据库泄露导致用户密码暴露，哈希函数不可逆，提高系统安全性</p>
<p><strong>Q2：JWT令牌包含哪三个主要组成部分？</strong><br>
A：Header（元数据）、Payload（有效载荷）、Signature（签名验证）</p>
<p><strong>Q3：如何实现自动刷新令牌？</strong><br>
A：可以通过以下两种方式实现：</p>
<ol>
<li>在令牌payload中添加refresh_token字段</li>
<li>单独提供/refresh端点，使用长期有效的刷新令牌获取新的访问令牌</li>
</ol>
<p><strong>Q4：访问/protected端点时出现403错误可能是什么原因？</strong><br>
A：可能原因包括：</p>
<ol>
<li>令牌已过期（超过30分钟）</li>
<li>令牌签名与服务端密钥不匹配</li>
<li>令牌中的用户信息不存在于数据库</li>
</ol>
<p>余下文章内容请点击跳转至 个人博客页面 或者 扫码关注或者微信搜一搜：<code>编程智域 前端至全栈交流与成长</code>，阅读完整的文章：<a href="https://blog.cmdragon.cn/posts/209b68f4f80b/" target="_blank" rel="noopener nofollow">FastAPI认证系统：从零到令牌大师的奇幻之旅 | cmdragon's Blog</a></p>
<h2 id="往期文章归档">往期文章归档：</h2>
<ul>
<li><a href="https://blog.cmdragon.cn/posts/48d0eea47030/" target="_blank" rel="noopener nofollow">FastAPI安全异常处理：从401到422的奇妙冒险 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/ac15f0972638/" target="_blank" rel="noopener nofollow">FastAPI权限迷宫：RBAC与多层级依赖的魔法通关秘籍 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/ec3aa76fc0de/" target="_blank" rel="noopener nofollow">JWT令牌：从身份证到代码防伪的奇妙之旅 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/4541d035d084/" target="_blank" rel="noopener nofollow">FastAPI安全认证：从密码到令牌的魔法之旅 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/e1b940e13b4d/" target="_blank" rel="noopener nofollow">密码哈希：Bcrypt的魔法与盐值的秘密 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/15de786fd044/" target="_blank" rel="noopener nofollow">用户认证的魔法配方：从模型设计到密码安全的奇幻之旅 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/bbb2f2716edb/" target="_blank" rel="noopener nofollow">FastAPI安全门神：OAuth2PasswordBearer的奇妙冒险 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/4054bb761a12/" target="_blank" rel="noopener nofollow">OAuth2密码模式：信任的甜蜜陷阱与安全指南 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/547a7e3d7ac7/" target="_blank" rel="noopener nofollow">API安全大揭秘：认证与授权的双面舞会 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/4a29b618aa59/" target="_blank" rel="noopener nofollow">异步日志监控：FastAPI与MongoDB的高效整合之道 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/6455cdef0c41/" target="_blank" rel="noopener nofollow">FastAPI与MongoDB分片集群：异步数据路由与聚合优化 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/3c81964d922c/" target="_blank" rel="noopener nofollow">FastAPI与MongoDB Change Stream的实时数据交响曲 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/b933afc93ab1/" target="_blank" rel="noopener nofollow">地理空间索引：解锁日志分析中的位置智慧 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/73a07166228e/" target="_blank" rel="noopener nofollow">异步之舞：FastAPI与MongoDB的极致性能优化之旅 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/f243ecf59662/" target="_blank" rel="noopener nofollow">异步日志分析：MongoDB与FastAPI的高效存储揭秘 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/2565cdc59f74/" target="_blank" rel="noopener nofollow">MongoDB索引优化的艺术：从基础原理到性能调优实战 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/714772e1fbe0/" target="_blank" rel="noopener nofollow">解锁FastAPI与MongoDB聚合管道的性能奥秘 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/bd24c2bf486f/" target="_blank" rel="noopener nofollow">异步之舞：Motor驱动与MongoDB的CRUD交响曲 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/8d4b0186aaf6/" target="_blank" rel="noopener nofollow">异步之舞：FastAPI与MongoDB的深度协奏 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/67c49b3ab489/" target="_blank" rel="noopener nofollow">数据库迁移的艺术：FastAPI生产环境中的灰度发布与回滚策略 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/c761e999ff26/" target="_blank" rel="noopener nofollow">数据库迁移的艺术：团队协作中的冲突预防与解决之道 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/1129cda88dea/" target="_blank" rel="noopener nofollow">驾驭FastAPI多数据库：从读写分离到跨库事务的艺术 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/e878319e1f7e/" target="_blank" rel="noopener nofollow">数据库事务隔离与Alembic数据恢复的实战艺术 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/24aeaadbab78/" target="_blank" rel="noopener nofollow">FastAPI与Alembic：数据库迁移的隐秘艺术 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/944b5aca784d/" target="_blank" rel="noopener nofollow">飞行中的引擎更换：生产环境数据库迁移的艺术与科学 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/24dfbc5f2148/" target="_blank" rel="noopener nofollow">Alembic迁移脚本冲突的智能检测与优雅合并之道 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/91ba0550aa71/" target="_blank" rel="noopener nofollow">多数据库迁移的艺术：Alembic在复杂环境中的精妙应用 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/55a63eaa29d3/" target="_blank" rel="noopener nofollow">数据库事务回滚：FastAPI中的存档与读档大法 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/24a6445f18ef/" target="_blank" rel="noopener nofollow">Alembic迁移脚本：让数据库变身时间旅行者 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/57d1e2810a31/" target="_blank" rel="noopener nofollow">数据库连接池：从银行柜台到代码世界的奇妙旅程 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/336930484b68/" target="_blank" rel="noopener nofollow">点赞背后的技术大冒险：分布式事务与SAGA模式 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/bd59ee70c62e/" target="_blank" rel="noopener nofollow">N+1查询：数据库性能的隐形杀手与终极拯救指南 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/9f5729db84ef/" target="_blank" rel="noopener nofollow">FastAPI与Tortoise-ORM开发的神奇之旅 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/62012cf83e26/" target="_blank" rel="noopener nofollow">DDD分层设计与异步职责划分：让你的代码不再“异步”混乱 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/c195d6c4d0b5/" target="_blank" rel="noopener nofollow">异步数据库事务锁：电商库存扣减的防超卖秘籍 | cmdragon's Blog</a></li>
<li><a href="https://tools.cmdragon.cn/sitemap_index.xml" target="_blank" rel="noopener nofollow">XML Sitemap</a></li>
<li></li>
</ul>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.0019910723414351852" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-06-07 04:15">2025-06-07 04:15</span>&nbsp;
<a href="https://www.cnblogs.com/Amd794">Amd794</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18915170);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18915170', targetLink: 'https://www.cnblogs.com/Amd794/p/18915170', title: 'FastAPI认证系统：从零到令牌大师的奇幻之旅' })">举报</a>
</div>
        