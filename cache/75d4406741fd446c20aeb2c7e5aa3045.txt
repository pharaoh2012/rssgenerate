
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/xxghw/p/19027382" title="发布于 2025-08-08 09:51">
    <span role="heading" aria-level="2">Python中变量之间赋值的理解</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="1问题描述">1.问题描述</h2>
<p>在Python项目中，有一个这样的需求：<br>
一个文件a需要负责提供一个函数，返回该文件中一个全局变量value,类似与get_value()接口<br>
在另一个文件b中，创建一个变量temp=get_value()，去取a文件中的value，而且<strong>希望后续a文件中对value的修改，会直接影响到b文件中的temp</strong><br>
例如：在a文件中,有个函数叫set_value()，里面执行value = Myclass(),希望temp也受到修改影响，变为指向新的MyClass</p>
<pre><code># a.py

value = MyClass()

def get_value():
  return value

def set_value():
  value = MyClass()
</code></pre>
<pre><code># b.py
import a

temp = get_value()
print(temp)
set_value()
print(temp)
</code></pre>
<p>但上面这样操作，显然不会满足需求。</p>
<h2 id="2python中变量的赋值逻辑">2.Python中变量的赋值逻辑</h2>
<p>对于等号右方为非变量名时，如:value = "string" 或者 value = 10 或者 value = MyClass()<br>
均可以理解成:<strong>value指向了一块空间a</strong>，里面存放着右侧这些数据.（value为该指针名字）<br>
<img src="https://img2024.cnblogs.com/blog/2303439/202508/2303439-20250808091942903-961791542.png" alt="image" loading="lazy"></p>
<p>当等号右方为变量名时，如 b = value，<br>
可以理解成:一个新的指针b，<strong>指向了value所指向的那块空间</strong><br>
<img src="https://img2024.cnblogs.com/blog/2303439/202508/2303439-20250808092151861-281151104.png" alt="image" loading="lazy"></p>
<p>所以，理解了上述赋值的区别后，1中的情况就很好解释了:<br>
temp = get_value()时，temp指针指向了value所指向的那块空间<br>
<img src="https://img2024.cnblogs.com/blog/2303439/202508/2303439-20250808092533316-722230822.png" alt="image" loading="lazy"></p>
<p>此时调用set_value，value又重新指向了另一块新的MyClass空间，但temp依旧指向原来的MyClass<br>
<img src="https://img2024.cnblogs.com/blog/2303439/202508/2303439-20250808092742368-1499530315.png" alt="image" loading="lazy"></p>
<p>所以value的修改并不会影响temp，故无法满足需求。</p>
<h2 id="3解决方案">3.解决方案</h2>
<p>很明显，上述实现的阻碍在于，value更新时，<strong>会指向新的空间</strong>，导致外界的temp无法及时同步更新。<br>
因此我们考虑让value降低一层，包裹在<strong>更高一层的容器中</strong></p>
<p>有一个list数据a, a = [value, value1, value2, value3]<br>
<img src="https://img2024.cnblogs.com/blog/2303439/202508/2303439-20250808093942846-1289656262.png" alt="image" loading="lazy"><br>
我们get这个list a，get_a(), temp = get_a()<br>
<img src="https://img2024.cnblogs.com/blog/2303439/202508/2303439-20250808094049848-1938044473.png" alt="image" loading="lazy"><br>
按照上述的理解，所有的value实际上都是一个指针，指向了赋值给自己的空间<br>
<img src="https://img2024.cnblogs.com/blog/2303439/202508/2303439-20250808094445374-1659617233.png" alt="image" loading="lazy"><br>
如果此时set_value,实际上是修改a[0]=MyClass()，由于value被a容器所管理，即使它指向了新的地方，<strong>也可以通过a直接访问</strong>，又temp指向的本身是容器a，故temp也可以直接访问到新的value<br>
<img src="https://img2024.cnblogs.com/blog/2303439/202508/2303439-20250808094830562-1725221032.png" alt="image" loading="lazy"></p>
<p>故我们目的达到，当value被修改时，我们可以通过temp取到更新后的value值</p>
<p>Ps:最主要的是和C++中的赋值区分开，不能单纯用C++的引用去理解</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-08-08 09:51">2025-08-08 09:51</span>&nbsp;
<a href="https://www.cnblogs.com/xxghw">gonghw403</a>&nbsp;
阅读(<span id="post_view_count">116</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19027382);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19027382', targetLink: 'https://www.cnblogs.com/xxghw/p/19027382', title: 'Python中变量之间赋值的理解' })">举报</a>
</div>
        