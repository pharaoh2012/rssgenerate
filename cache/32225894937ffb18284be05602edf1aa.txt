
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/GuijiH6/p/18713864" title="发布于 2025-02-13 16:18">
    <span role="heading" aria-level="2">CTFHub技能树-信息泄露wp</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="信息泄露">信息泄露</h1>
<p><strong>信息泄露</strong>（Information Disclosure）通常指题目中意外暴露了敏感数据或隐藏信息，这些信息可能直接或间接帮助解题者获取Flag</p>
<p>常见类型如下：</p>
<pre><code class="language-php">HTTP请求
robots协议
目录扫描：dirsearch/gobuster扫描
源码泄露：git泄露/SVN泄露/HG泄露
文件/源码泄露
目录遍历
域名（DNS）解析
</code></pre>
<p><img src="https://track123.oss-cn-beijing.aliyuncs.com/20250210111400639.png" alt="" loading="lazy"></p>
<h2 id="目录遍历">目录遍历</h2>
<p>打开环境，是如下界面，查看源码并无有用信息</p>
<p><img src="https://track123.oss-cn-beijing.aliyuncs.com/20250210111542144.png" alt="" loading="lazy"></p>
<p>点击寻找flag</p>
<p><img src="https://track123.oss-cn-beijing.aliyuncs.com/20250210111616426.png" alt="" loading="lazy"></p>
<p>接下来只需要一个一个点击即可，找到此文件，点击即可查找flag</p>
<p><img src="https://track123.oss-cn-beijing.aliyuncs.com/20250210111708553.png" alt="" loading="lazy"></p>
<p>或者使用脚本获取</p>
<pre><code class="language-python">import requests

url = "http://challenge-915f58a5bc2422c4.sandbox.ctfhub.com:108000/flag_in_here/"

for i in range(5):
    for j in range(5):
        # URL字符串拼接 
        url_test =url+"/"+str(i)+"/"+str(j)
        # 获取页面响应内容
        r = requests.get(url_test)
        # 设置编码方式
        r.encoding = 'utf-8' 
        # 查找是否存在 flag.txt
        get_file=r.text
        if "flag.txt" in get_file:
            print(url_test)

# 此程序只适用于flag.txt文件形式存在的flag 
</code></pre>
<h2 id="phpinfo">PHPINFO</h2>
<p>打开环境，查看源码，没有任何信息泄露，点击查看</p>
<p><img src="https://track123.oss-cn-beijing.aliyuncs.com/20250210163049315.png" alt="" loading="lazy"></p>
<p>ctrl+f，搜索flag，查找成功</p>
<p><img src="https://track123.oss-cn-beijing.aliyuncs.com/20250210163117462.png" alt="" loading="lazy"></p>
<h2 id="备份文件下载">备份文件下载</h2>
<p><img src="https://track123.oss-cn-beijing.aliyuncs.com/20250210163224422.png" alt="" loading="lazy"></p>
<h3 id="网站源码">网站源码</h3>
<p>打开环境</p>
<p><img src="https://track123.oss-cn-beijing.aliyuncs.com/20250210164622833.png" alt="" loading="lazy"></p>
<p>dirsearch扫描一下目录，发现www.zip</p>
<pre><code class="language-bash">dirsearch -u http://challenge-b4ebb5050665bf49.sandbox.ctfhub.com:10800/ -e*
</code></pre>
<p><img src="https://track123.oss-cn-beijing.aliyuncs.com/20250210164412614.png" alt="" loading="lazy"></p>
<p>访问www.zip，下载该文件</p>
<p><img src="https://track123.oss-cn-beijing.aliyuncs.com/20250210164205789.png" alt="" loading="lazy"></p>
<p>打开压缩包逐一查看，都没有有用信息</p>
<p><img src="https://track123.oss-cn-beijing.aliyuncs.com/20250210164530361.png" alt="" loading="lazy"></p>
<p>在浏览器访问一下，得到flag</p>
<p><img src="https://track123.oss-cn-beijing.aliyuncs.com/20250210164641607.png" alt="" loading="lazy"></p>
<h3 id="bak文件">bak文件</h3>
<p><strong>.bak文件</strong>是常见的<strong>备份文件</strong>扩展名，通常由软件自动生成或用户手动创建，用于在修改或覆盖原始文件前保存副本</p>
<p>根据提示访问之后还是该页面</p>
<p><img src="https://track123.oss-cn-beijing.aliyuncs.com/20250210174215335.png" alt="" loading="lazy"></p>
<p>由题目名字尝试访问 index.php.bat</p>
<p><img src="https://track123.oss-cn-beijing.aliyuncs.com/20250210174307939.png" alt="" loading="lazy"></p>
<p>下载并查看，得到flag</p>
<p><img src="https://track123.oss-cn-beijing.aliyuncs.com/20250210174359615.png" alt="" loading="lazy"></p>
<p>也可以使用curl命令，将源码打印出来</p>
<p><img src="https://track123.oss-cn-beijing.aliyuncs.com/20250210174920856.png" alt="" loading="lazy"></p>
<h3 id="vim缓存">vim缓存</h3>
<p>当开发人员在线上环境中使用 vim 编辑器，在使用过程中会留下 vim 编辑器缓存，当vim异常退出时，缓存会一直留在服务器上，引起网站源码泄露。</p>
<p>这里介绍一下产生的结果：</p>
<pre><code class="language-bash">第一次产生的交换文件名为 .index.php.swp
再次意外退出后，将会产生名为 .index.php.swo 的交换文件
第三次产生的交换文件则为 .index.php.swn
</code></pre>
<p>可以目录扫描一下该网站</p>
<p><img src="https://track123.oss-cn-beijing.aliyuncs.com/20250210180207861.png" alt="" loading="lazy"></p>
<p>访问一下，下载下来</p>
<p><img src="https://track123.oss-cn-beijing.aliyuncs.com/20250210180103643.png" alt="" loading="lazy"></p>
<p>这里可以直接访问获取</p>
<p><img src="https://track123.oss-cn-beijing.aliyuncs.com/20250210180312843.png" alt="" loading="lazy"></p>
<p>或者在kali里，执行以下命令恢复文件，任何查看即可</p>
<pre><code class="language-bash">vim -r index.php.swp
</code></pre>
<p><img src="https://track123.oss-cn-beijing.aliyuncs.com/20250210180740688.png" alt="" loading="lazy"></p>
<h3 id="ds_store">.DS_Store</h3>
<p><strong>.DS_Store</strong> 是 <strong>Mac OS</strong> 保存文件夹的自定义属性的隐藏文件。通过.DS_Store可以知道这个目录里面所有文件的清单。</p>
<p>访问 <strong>/.DS_Store</strong>并下载</p>
<p><img src="https://track123.oss-cn-beijing.aliyuncs.com/20250212143546925.png" alt="" loading="lazy"></p>
<p>在记事本打开，发现一个txt文件</p>
<p><img src="https://track123.oss-cn-beijing.aliyuncs.com/20250212143717647.png" alt="" loading="lazy"></p>
<p>访问该txt文件，得到flag</p>
<p><img src="https://track123.oss-cn-beijing.aliyuncs.com/20250212143828079.png" alt="" loading="lazy"></p>
<h2 id="git泄露">Git泄露</h2>
<p><strong>Git泄露</strong>通常指的是在使用Git进行版本控制时，意外地将<strong>敏感信息或代码公开</strong>。这可能包括机密数据、API密钥、密码或其他不应该公开的信息。Git泄露可能会导致安全风险，因为这些敏感信息可能被恶意用户利用。</p>
<p>工具下载</p>
<pre><code class="language-php">git clone https://github.com/BugScanTeam/GitHack.git
</code></pre>
<p><img src="https://track123.oss-cn-beijing.aliyuncs.com/20250212151800936.png" alt="" loading="lazy"></p>
<p>使用时候需要切换python2版本</p>
<pre><code class="language-php">update-alternatives --config python
</code></pre>
<p><img src="https://track123.oss-cn-beijing.aliyuncs.com/20250212163334445.png" alt="" loading="lazy"></p>
<h3 id="log">Log</h3>
<p>当前大量开发人员使用git进行版本控制，对站点自动部署。如果配置不当,可能会将.git文件夹直接部署到线上环境。这就引起了git泄露漏洞。请尝试使用<strong>BugScanTeam的GitHack</strong>完成本题</p>
<p>打开环境，在kali里执行以下命令</p>
<pre><code class="language-php">python GitHack.py http://challenge-8997207b4373c264.sandbox.ctfhub.com:10800/.git/
</code></pre>
<p><img src="https://track123.oss-cn-beijing.aliyuncs.com/20250212163407725.png" alt="" loading="lazy"></p>
<p>会在dist目录下生成一个文件</p>
<p><img src="https://track123.oss-cn-beijing.aliyuncs.com/20250212163451410.png" alt="" loading="lazy"></p>
<p>进入该文件，执行<strong>git log</strong>，可以看到flag在第二个日志信息里，使用<strong>版本回退命令-reset</strong></p>
<pre><code class="language-php">git reset --hard c60e6bfeac9700e386a61a7169c311df9c4cf3a0
</code></pre>
<p><img src="https://track123.oss-cn-beijing.aliyuncs.com/20250212163535533.png" alt="" loading="lazy"></p>
<p>会在该目录下生成flag文件，打开即可</p>
<p><img src="https://track123.oss-cn-beijing.aliyuncs.com/20250212163712895.png" alt="" loading="lazy"></p>
<h3 id="stash">Stash</h3>
<p>如此执行之后，打开文档内容是假的</p>
<p><img src="https://track123.oss-cn-beijing.aliyuncs.com/20250212170325059.png" alt="" loading="lazy"></p>
<p>具体方法和之前的相同，不同点在于需要<strong>将最新存储的更改（即最近的 stash）应用到你当前的工作分支上。</strong></p>
<pre><code class="language-php">git stash pop
</code></pre>
<p><img src="https://track123.oss-cn-beijing.aliyuncs.com/20250212170104500.png" alt="" loading="lazy"></p>
<p>然后查看文档即可</p>
<p><img src="https://track123.oss-cn-beijing.aliyuncs.com/20250212170232241.png" alt="" loading="lazy"></p>
<h3 id="index">Index</h3>
<p>恢复完成之后在这个文档直接就可以查看</p>
<p><img src="https://track123.oss-cn-beijing.aliyuncs.com/20250212170536457.png" alt="" loading="lazy"></p>
<h2 id="svn泄露subversion">SVN泄露(subversion)</h2>
<p>该题需要利用<strong>dvcs-ripper工具</strong>工具</p>
<pre><code class="language-php">git clone https://github.com/kost/dvcs-ripper
</code></pre>
<p>初始文件</p>
<p><img src="https://track123.oss-cn-beijing.aliyuncs.com/20250213151551834.png" alt="" loading="lazy"></p>
<p>检测该漏洞</p>
<p><img src="https://track123.oss-cn-beijing.aliyuncs.com/20250213145823288.png" alt="" loading="lazy"></p>
<p>访问 url/.svn/</p>
<p><img src="https://track123.oss-cn-beijing.aliyuncs.com/20250213145841700.png" alt="" loading="lazy"></p>
<p>结合提示确定是<strong>SVN泄露</strong></p>
<p><img src="https://track123.oss-cn-beijing.aliyuncs.com/20250213145857957.png" alt="" loading="lazy"></p>
<p>执行以下命令</p>
<pre><code class="language-php">cd dvcs-ripper
perl rip-svn.pl -v -u http://challenge-00ab51d964931f2d.sandbox.ctfhub.com:10800/.svn/
</code></pre>
<p><img src="https://track123.oss-cn-beijing.aliyuncs.com/20250213150803612.png" alt="" loading="lazy"></p>
<p><strong>ls -al</strong>查看，发现一个隐藏的<strong>.svn</strong>文件</p>
<pre><code class="language-php">entries：这是一个 XML 格式的文件，记录了当前目录下的所有条目（包括文件和子目录）的版本控制信息
format：这个文件记录了当前工作区使用的 SVN 格式版本
pristine：这是一个目录，用于存储文件的“原始”（pristine）版本
text-base ：这是一个文件，用于存储某个文件的“基准”内容。如果一个文件未被修改，它的 text-base 文件与工作区文件完全一致。
tmp：这是一个临时目录，用于存储 SVN 操作过程中的一些临时文件
wc.db：这是工作区数据库文件（SQLite 格式），用于存储有关当前工作区的元信息
wc.db-journal：数据库的事务日志文件
</code></pre>
<p><img src="https://track123.oss-cn-beijing.aliyuncs.com/20250213151752792.png" alt="" loading="lazy"></p>
<p><strong>wc.db</strong>是svn的数据库文件，查看</p>
<p><img src="https://track123.oss-cn-beijing.aliyuncs.com/20250213151921362.png" alt="" loading="lazy"></p>
<p>发现一个flag文件</p>
<p><img src="https://track123.oss-cn-beijing.aliyuncs.com/20250213152013483.png" alt="" loading="lazy"></p>
<p>查看 flag_2400911700.txt</p>
<p><img src="https://track123.oss-cn-beijing.aliyuncs.com/20250213152041826.png" alt="" loading="lazy"></p>
<p>根据题目提示在服务器旧版本中，pristine是存放旧版本源码的文件</p>
<p><img src="https://track123.oss-cn-beijing.aliyuncs.com/20250213152351690.png" alt="" loading="lazy"></p>
<p>得到flag</p>
<h2 id="hg泄露mercurial">HG泄露(Mercurial)</h2>
<p>当开发人员使用 Mercurial 进行版本控制，对站点自动部署。如果配置不当,可能会将<strong>.hg</strong> 文件夹(存在目录列表)直接部署到线上环境。这就引起了 hg 泄露漏洞。</p>
<p>检测方式</p>
<pre><code class="language-php">访问 http://目标地址/.hg/，若返回目录列表或非404状态码（如403），可能存在泄露。
访问关键文件（如http://目标地址/.hg/dirstate或http://目标地址/.hg/requires），若存在则确认泄露。
或者dirsearch目录扫描
</code></pre>
<p>执行以下命令恢复</p>
<pre><code class="language-php">cd dvcs-ripper
./rip-hg.pl -v -u http://challenge-bc1d26a96ebd2a34.sandbox.ctfhub.com:10800/.hg/
</code></pre>
<p>恢复完成之后查看，可以看到是存在flag的，<strong>蓝色</strong>的表示是一个目录</p>
<p><img src="https://track123.oss-cn-beijing.aliyuncs.com/20250213161203308.png" alt="" loading="lazy"></p>
<p>进入store目录查看</p>
<p><img src="https://track123.oss-cn-beijing.aliyuncs.com/20250213161529669.png" alt="" loading="lazy"></p>
<p>再看看fncache文件</p>
<p><img src="https://track123.oss-cn-beijing.aliyuncs.com/20250213161551830.png" alt="" loading="lazy"></p>
<p>最后在浏览器访问即可</p>
<pre><code class="language-php">http://challenge-bc1d26a96ebd2a34.sandbox.ctfhub.com:10800/flag_2857223930.txt
</code></pre>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.012432381704861111" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-13 16:19">2025-02-13 16:18</span>&nbsp;
<a href="https://www.cnblogs.com/GuijiH6">H轨迹H</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18713864" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18713864);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18713864', targetLink: 'https://www.cnblogs.com/GuijiH6/p/18713864', title: 'CTFHub技能树-信息泄露wp' })">举报</a>
</div>
        