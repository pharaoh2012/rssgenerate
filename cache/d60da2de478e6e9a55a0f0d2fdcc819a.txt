
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/edisonchou/p/-/introduction-to-vector-query-demo" title="发布于 2025-02-27 18:30">
    <span role="heading" aria-level="2">基于Microsoft.Extensions.VectorData实现语义搜索</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        <img src="https://img2024.cnblogs.com/blog/381412/202502/381412-20250225200624867-2028897845.png" alt="基于Microsoft.Extensions.VectorData实现语义搜索" class="desc_img">
        本文介绍了Microsoft.Extensions.Vector的基本概念 和 基本使用，结合Embedding Model（如all-minilm） 和 VectorStore（如Qdrant），我们可以快速实现语义搜索，而不仅仅是关键字匹配。如果你也是.NET程序员希望参与AI应用的开发，那就快快了解和使用基于Microsoft.Extensioins.AI的生态组件库吧。
    </div>
<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p>大家好，我是Edison。</p>
<p>上周水了一篇&nbsp;<span>Microsoft.Extensions.AI&nbsp;的介绍文章，很多读者反馈想要了解更多。很多时候，除了集成LLM实现聊天对话，还会有很多语义搜索和RAG的使用场景，那么今天就给大家介绍一下如何完成语义搜索。<br></span></p>
<h1><strong>Microsoft.Extensions.VectorData介绍</strong></h1>
<p>
<strong><span><span>语义搜索正在改变应用程序查找和解释数据的方式，<span>它专注于语义关联，而不仅仅是关键字匹配。</span></span></span></strong></p>
<p><strong><span>Microsoft.Extensions.VectorData</span></strong><span>&nbsp;是一组 .NET代码库，旨在管理 .NET 应用程序中基于向量的数据。这些库为与向量存储交互提供了一个统一的 C# 抽象层，使开发人员能够有效地处理嵌入并执行向量相似性查询。</span></p>
<p><img src="https://img2024.cnblogs.com/blog/381412/202502/381412-20250225195903873-291036908.png" alt="" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p><span><span>更多该代码库的内容请参考：</span><span>Luis 《<a href="https://devblogs.microsoft.com/dotnet/introducing-microsoft-extensions-vector-data" target="_blank" rel="noopener nofollow">Introducting Microsoft.Extensions.VectorData</a>》</span></span></p>
<p><span><span>在接下来的demo中，我们会使用以下工具：</span></span></p>
<p><span><span>(1) Qdrant 作为 VectorStore</span></span></p>
<p><span><span>(2) Ollama 运行 all-minilm 模型 作为 Emedding生成器</span></span></p>
<div class="cnblogs_code">
<pre>ollama pull all-minilm</pre>
</div>
<h1><strong>Qdrant向量搜索引擎</strong></h1>
<p>Qdrant是一个向量相似性搜索引擎，它提供了一个生产就绪的服务，拥有便捷的 API来存储、搜索和管理带有额外负载的点（即向量）。它非常适合需要高效相似性搜索的应用程序。我们可以在 Docker 容器中运行 它，这也使它成为对开发人员友好的选择。</p>
<p>容器运行Qdrant：</p>
<div class="cnblogs_code">
<pre>docker run -p <span style="color: rgba(128, 0, 128, 1)">6333</span>:<span style="color: rgba(128, 0, 128, 1)">6333</span> -p <span style="color: rgba(128, 0, 128, 1)">6334</span>:<span style="color: rgba(128, 0, 128, 1)">6334</span><span style="color: rgba(0, 0, 0, 1)"> \
</span>-v $(<span style="color: rgba(0, 0, 255, 1)">pwd</span>)/qdrant_storage:/qdrant/<span style="color: rgba(0, 0, 0, 1)">storage \
qdrant</span>/qdrant</pre>
</div>
<p>验证Qdrant运行：访问 server:6333/dashboard</p>
<p><img src="https://img2024.cnblogs.com/blog/381412/202502/381412-20250225200002299-622059129.png" alt="" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<h1><strong>开始DEMO案例</strong></h1>
<p>安装NuGet包：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">Microsoft.Extensions.AI (preview)
Microsoft.Extensions.Ollama (preivew)
Microsoft.Extensions.AI.OpenAI (preivew)
Microsoft.Extensions.VectorData.Abstractions (preivew)
Microsoft.SemanticKernel.Connectors.Qdrant (preivew)</span></pre>
</div>
<p>这里我们假设做一个CloudService的语义搜索，分下面一些步骤来实现它。</p>
<p><span>Step1. 配置文件appsettings.json：</span></p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">{
  </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Embedding</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">: {
    </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">EndPoint</span><span style="color: rgba(128, 0, 0, 1)">"</span>: <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">http://localhost:11434</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
    </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Model</span><span style="color: rgba(128, 0, 0, 1)">"</span>: <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">all-minilm</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
  },
  </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Qdrant</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">: {
    </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Host</span><span style="color: rgba(128, 0, 0, 1)">"</span>: <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">edt-dev-server</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
    </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Port</span><span style="color: rgba(128, 0, 0, 1)">"</span>: <span style="color: rgba(128, 0, 128, 1)">6334</span><span style="color: rgba(0, 0, 0, 1)">
  }
}</span></pre>
</div>
<p><span><span><span>Step2.&nbsp;<span><span>加载配置：</span></span></span></span></span></p>
<div class="cnblogs_code">
<pre>var config =<span style="color: rgba(0, 0, 0, 1)"> new ConfigurationBuilder()
    .AddJsonFile($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">appsettings.json</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
    .Build();</span></pre>
</div>
<p><span><span>Step3.&nbsp;<span><span>初始化Embedding生成器：<span>这里我们使用的是本地的Ollama运行all-minilm模型来做。</span></span></span></span></span></p>
<div class="cnblogs_code">
<pre>var generator =<span style="color: rgba(0, 0, 0, 1)">
    new OllamaEmbeddingGenerator(new Uri(config[</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Embedding:EndPoint</span><span style="color: rgba(128, 0, 0, 1)">"</span>]), config[<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Embedding:Model</span><span style="color: rgba(128, 0, 0, 1)">"</span>]);</pre>
</div>
<p><span>此外，我们也可以使用OpenAI的Embedding服务：</span></p>
<div class="cnblogs_code">
<pre>var generator = new OpenAIClient(new ApiKeyCredential(config[<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">OneAPI:ApiKey</span><span style="color: rgba(128, 0, 0, 1)">"</span>]), new OpenAIClientOptions() { Endpoint = new Uri(config[<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">OneAPI:EndPoint</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">]) })
    .AsEmbeddingGenerator(modelId: config[</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Embedding:ModelId</span><span style="color: rgba(128, 0, 0, 1)">"</span>]);</pre>
</div>
<p><span>Step4. 初始化Qdrant向量存储<span>：</span></span></p>
<div class="cnblogs_code">
<pre>var vectorStore = new QdrantVectorStore(new QdrantClient(config[<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Qdrant:Host</span><span style="color: rgba(128, 0, 0, 1)">"</span>], <span style="color: rgba(0, 0, 255, 1)">int</span>.Parse(config[<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Qdrant:Port</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">])));
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Get the collection if it exist in qdrant</span>
var cloudServicesStore = vectorStore.GetCollection&lt;<span style="color: rgba(0, 0, 255, 1)">ulong</span>, CloudService&gt;(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">cloudServices</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Create the collection if it doesn't exist yet.</span>
await cloudServicesStore.CreateCollectionIfNotExistsAsync();</pre>
</div>
<p>Step5. 插入测试数据：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Define the test data</span>
var cloudServices = new List&lt;CloudService&gt;<span style="color: rgba(0, 0, 0, 1)">()
{
    new CloudService
        {
            Key</span>=<span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">,
            Name</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Azure App Service</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
            Description</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Host .NET, Java, Node.js, and Python web applications and APIs in a fully managed Azure service. You only need to deploy your code to Azure. Azure takes care of all the infrastructure management like high availability, load balancing, and autoscaling.</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
        },
    new CloudService
        {
            Key</span>=<span style="color: rgba(128, 0, 128, 1)">2</span><span style="color: rgba(0, 0, 0, 1)">,
            Name</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Azure Service Bus</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
            Description</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">A fully managed enterprise message broker supporting both point to point and publish-subscribe integrations. It's ideal for building decoupled applications, queue-based load leveling, or facilitating communication between microservices.</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
        },
    new CloudService
        {
            Key</span>=<span style="color: rgba(128, 0, 128, 1)">3</span><span style="color: rgba(0, 0, 0, 1)">,
            Name</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Azure Blob Storage</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
            Description</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Azure Blob Storage allows your applications to store and retrieve files in the cloud. Azure Storage is highly scalable to store massive amounts of data and data is stored redundantly to ensure high availability.</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
        },
    new CloudService
        {
            Key</span>=<span style="color: rgba(128, 0, 128, 1)">4</span><span style="color: rgba(0, 0, 0, 1)">,
            Name</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Microsoft Entra ID</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
            Description</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Manage user identities and control access to your apps, data, and resources..</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
        },
    new CloudService
        {
            Key</span>=<span style="color: rgba(128, 0, 128, 1)">5</span><span style="color: rgba(0, 0, 0, 1)">,
            Name</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Azure Key Vault</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
            Description</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Store and access application secrets like connection strings and API keys in an encrypted vault with restricted access to make sure your secrets and your application aren't compromised.</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
        },
    new CloudService
        {
            Key</span>=<span style="color: rgba(128, 0, 128, 1)">6</span><span style="color: rgba(0, 0, 0, 1)">,
            Name</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Azure AI Search</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
            Description</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Information retrieval at scale for traditional and conversational search applications, with security and options for AI enrichment and vectorization.</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
        }
};
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Insert test data into the collection in qdrant</span>
foreach (var service <span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> cloudServices)
{
    service.Vector </span>=<span style="color: rgba(0, 0, 0, 1)"> await generator.GenerateEmbeddingVectorAsync(service.Description);
    await cloudServicesStore.UpsertAsync(service);
}</span></pre>
</div>
<p>其中，CloudService的定义如下：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">public class CloudService
{
    [VectorStoreRecordKey]
    public </span><span style="color: rgba(0, 0, 255, 1)">ulong</span><span style="color: rgba(0, 0, 0, 1)"> Key { get; set; }

    [VectorStoreRecordData]
    public </span><span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)"> Name { get; set; }

    [VectorStoreRecordData]
    public </span><span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)"> Description { get; set; }

    [VectorStoreRecordVector(</span><span style="color: rgba(128, 0, 128, 1)">384</span><span style="color: rgba(0, 0, 0, 1)">, DistanceFunction.CosineSimilarity)]
    public ReadOnlyMemory</span>&lt;<span style="color: rgba(0, 0, 255, 1)">float</span>&gt;<span style="color: rgba(0, 0, 0, 1)"> Vector { get; set; }
}</span></pre>
</div>
<p>Step6. 生成查询Emedding并从Qdrant中执行查询：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Generate query embedding</span>
var query = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Which Azure service should I use to store my Word documents?</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;
var queryEmbedding </span>=<span style="color: rgba(0, 0, 0, 1)"> await generator.GenerateEmbeddingVectorAsync(query);
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Query from vector data store</span>
var searchOptions =<span style="color: rgba(0, 0, 0, 1)"> new VectorSearchOptions()
{
    Top </span>= <span style="color: rgba(128, 0, 128, 1)">1</span>, <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Only return the Top 1 record from Qdrant</span>
    VectorPropertyName = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Vector</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
};
var results </span>=<span style="color: rgba(0, 0, 0, 1)"> await cloudServicesStore.VectorizedSearchAsync(queryEmbedding, searchOptions);
await foreach (var result </span><span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> results.Results)
{
    Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Name: {result.Record.Name}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
    Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Description: {result.Record.Description}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
    Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Vector match score: {result.Score}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
    Console.WriteLine();
}</span></pre>
</div>
<p>首先，验证下Qdrant中是否新增了数据：</p>
<p><img src="https://img2024.cnblogs.com/blog/381412/202502/381412-20250225200249863-1761287111.png" alt="" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p>其次，查看运行结果显示：返回最匹配的一个数据返回，因为我们设置的Top1记录。</p>
<p><img src="https://img2024.cnblogs.com/blog/381412/202502/381412-20250225200258097-2118459840.png" alt="" loading="lazy" style="display: block; margin-left: auto; margin-right: auto"></p>
<p>完整的代码示例请参考该示例代码的<a href="https://github.com/edisontalk/EdisonTalk.AI.Agents?wt.mc_id=MVP_397012" target="_blank" rel="noopener nofollow">GitHub仓库</a>。</p>
<h1><span><span>小结</span></span></h1>
<p>本文介绍了Microsoft.Extensions.Vector的基本概念 和 基本使用，结合Embedding Model（如all-minilm） 和 VectorStore（如Qdrant），我们可以快速实现语义搜索，而不仅仅是关键字匹配。</p>
<p>如果你也是.NET程序员希望参与AI应用的开发，那就快快了解和使用基于Microsoft.Extensioins.AI的生态组件库吧。</p>
<h1><strong>参考内容</strong></h1>
<p>Eddie Chen,《探索Microsoft.Extensions.VectorData与Qdrant和Azure AI搜索的使用》</p>
<p>Luis,《Introducting Microsoft.Extensions.VectorData》</p>
<p>路边石,《Microsoft.Extensions.AI.OpenAI官方代码示例》</p>
<h1><span><span>推荐内容</span></span></h1>
<p><a href="https://learn.microsoft.com/zh-cn/dotnet/ai/ai-extensions?wt.mc_id=MVP_397012" target="_blank" rel="noopener nofollow"><span><span>Microsoft Learn</span></span></a></p>
<p><a href="https://github.com/dotnet/eShopSupport?wt.mc_id=MVP_397012" target="_blank" rel="noopener nofollow"><span><span>eShopSupport</span></span></a></p>
<p><a href="https://devblogs.microsoft.com/dotnet/e-shop-infused-with-ai-comprehensive-intelligent-dotnet-app-sample?wt.mc_id=MVP_397012" target="_blank" rel="noopener nofollow"><span><span>devblogs</span></span></a></p>
<p>&nbsp;</p>
<p style="text-align: center"><img src="https://images.cnblogs.com/cnblogs_com/edisonchou/1647700/o_200902144330EdisonTalk-Footer.jpg" alt="" style="width: 65%; border: 1px solid rgba(221, 221, 221, 1); border-radius: 3px; box-shadow: 0 4px 8px rgba(3, 27, 78, 0.12)"></p>
<div id="Copyright">
<p>作者：<a title="author" href="https://edisonchou.cnblogs.com" target="_blank">周旭龙</a></p>
<p>出处：<a title="from" href="https://edisonchou.cnblogs.com" target="_blank">https://edisonchou.cnblogs.com</a></p>
<p>本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文链接。</p>
</div>
</div>
<div id="MySignature" role="contentinfo">
    <div align="center"><a href="https://weibo.com/u/2068032061?s=6uyXnP" target="_blank"><img border="0" src="http://service.t.sina.com.cn/widget/qmd/2068032061/d643d182/10.png"></a></div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.09109378570833333" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-27 18:30">2025-02-27 18:30</span>&nbsp;
<a href="https://www.cnblogs.com/edisonchou">EdisonZhou</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18737148" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18737148);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18737148', targetLink: 'https://www.cnblogs.com/edisonchou/p/-/introduction-to-vector-query-demo', title: '基于Microsoft.Extensions.VectorData实现语义搜索' })">举报</a>
</div>
        