
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/BFMC/p/18687474" title="发布于 2025-01-23 13:50">
    <span role="heading" aria-level="2">C# WebAPI 插件热插拔</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h1>背景</h1>
<p>WebAPI <span style="font-family: 宋体">插件热插拔是指在不重启应用程序的情况下，能够动态地加载、更新或卸载功能模块（即插件）的能力。这种设计模式在软件开发中非常有用，尤其是在需要频繁更新或扩展功能的大型系统中。通过实现插件架构，可以将系统的不同部分解耦，使得它们可以独立开发、测试和部署。</span></p>
<p><span style="font-family: 宋体">对于</span>WebAPI<span style="font-family: 宋体">来说，这意味着服务端可以在运行时根据业务需求灵活调整其提供的</span><span style="font-family: Calibri">API</span><span style="font-family: 宋体">接口和服务逻辑，而无需担心每次修改都要重新启动整个应用，从而减少停机时间，提高系统的稳定性和灵活性。</span></p>
<h1>程序演示</h1>
<p>我们启动程序通过调用动态接口使用插件的增删改查等功能；，其中带{DynamicParam}的是你要使用的插件的名称；{funName}是你要使用插件的接口名称。</p>
<h2>程序运行界面</h2>
<p><img src="https://img2024.cnblogs.com/blog/1266469/202501/1266469-20250123150513511-1618878724.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>查询筛选接口</h2>
<p><span style="font-family: 宋体">使用</span><span style="font-family: Calibri">postman </span><span style="font-family: 宋体">进行查询筛选博客操作</span></p>
<p>&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/1266469/202501/1266469-20250123145520163-111319149.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>插件新增接口</h2>
<p>插件的新增博客接口，然后看数据库变化</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/1266469/202501/1266469-20250123145533802-30314875.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/1266469/202501/1266469-20250123145540563-882124954.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>插件更新接口</h2>
<p>插件的更新博客接口</p>
<p><img src="https://img2024.cnblogs.com/blog/1266469/202501/1266469-20250123145608567-2101071670.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/1266469/202501/1266469-20250123145616029-1254199175.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>插件删除接口</h2>
<p><img src="https://img2024.cnblogs.com/blog/1266469/202501/1266469-20250123113720791-1288138857.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/1266469/202501/1266469-20250123113726049-679294926.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<h2>插件上传文件接口</h2>
<p><img src="https://img2024.cnblogs.com/blog/1266469/202501/1266469-20250123113731928-1206681620.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<h2>热插拔功能演示&nbsp;</h2>
<p>1，我们先看一下目前加载的所有插件，发现只有一个BlogPluginApi。</p>
<p><img src="https://img2024.cnblogs.com/blog/1266469/202502/1266469-20250205163029771-92702877.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p>2，然后我们加载一个PersonnelExamResultApi（人员管理）的插件。再次查询后，发现就有两个插件了。</p>
<p><img src="https://img2024.cnblogs.com/blog/1266469/202502/1266469-20250205163256181-1314144134.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/1266469/202502/1266469-20250205163542193-1075564280.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p>3，接下来，我们执行以下人员管理插件的查询方法。可以看到正常请求了。</p>
<p><img src="https://img2024.cnblogs.com/blog/1266469/202502/1266469-20250205163957498-562999905.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p>4，那么我们删除一下人员管理插件后，再次执行下查询方法。发现提示找不到对象了。</p>
<p><img src="https://img2024.cnblogs.com/blog/1266469/202502/1266469-20250205164018723-1636165579.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/1266469/202502/1266469-20250205164149575-96700291.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>5，我们再查看一下所有插件，发现人员管理的插件被成功清除掉了。</p>
<p>&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/1266469/202502/1266469-20250205164208172-855163696.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h1>代码实现</h1>
<h2>前提准备</h2>
<p>需要安装nuget程序包：Newtonsoft.Json，SqlSugarCore。方便我们做类型转换和数据存储的相关功能；</p>
<p>1，首先我们创建一个webapi 的项目，然后定义一个插件IPluginDllApi.cs的接口（后续新增的类库需要继承用）</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> Microsoft.AspNetCore.Mvc;

</span><span style="color: rgba(0, 0, 255, 1)">namespace</span><span style="color: rgba(0, 0, 0, 1)"> DynamicPluginApiDemo.Utils
{
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">interface</span><span style="color: rgba(0, 0, 0, 1)"> IPluginDllApi
    {
        </span><span style="color: rgba(0, 0, 255, 1)">string</span> Name { <span style="color: rgba(0, 0, 255, 1)">get</span><span style="color: rgba(0, 0, 0, 1)">; }

        IActionResult GetRequest(</span><span style="color: rgba(0, 0, 255, 1)">string</span> funName, Dictionary&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>, <span style="color: rgba(0, 0, 255, 1)">string</span>&gt;<span style="color: rgba(0, 0, 0, 1)"> queryParameters);

        IActionResult PostRequestForm(</span><span style="color: rgba(0, 0, 255, 1)">string</span> funName, Dictionary&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>, <span style="color: rgba(0, 0, 255, 1)">string</span>&gt;<span style="color: rgba(0, 0, 0, 1)"> queryParameters, IFormCollection formData);

        IActionResult PostRequestBody(</span><span style="color: rgba(0, 0, 255, 1)">string</span> funName, Dictionary&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>, <span style="color: rgba(0, 0, 255, 1)">string</span>&gt; queryParameters, <span style="color: rgba(0, 0, 255, 1)">object</span><span style="color: rgba(0, 0, 0, 1)"> jsonData);

    }
}</span></pre>
</div>
<p>2，创建一个插件帮助类和数据库帮助类。</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Reflection;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Runtime.Loader;

</span><span style="color: rgba(0, 0, 255, 1)">namespace</span><span style="color: rgba(0, 0, 0, 1)"> DynamicPluginApiDemo.Utils
{
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> PluginDllHelper
    {
        </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">string</span> _pluginFolder = Path.Combine(Directory.GetCurrentDirectory(), <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Plugins</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
        </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">static</span> List&lt;PluginContextDto&gt; PluginContextList = <span style="color: rgba(0, 0, 255, 1)">new</span> List&lt;PluginContextDto&gt;<span style="color: rgba(0, 0, 0, 1)">();

        </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;summary&gt;</span>
        <span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(0, 128, 0, 1)"> 初始化加载指定的目录的dll文件。
        </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;/summary&gt;</span>
        <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> InitLoadDll()
        {
            </span><span style="color: rgba(0, 0, 255, 1)">if</span> (!<span style="color: rgba(0, 0, 0, 1)">Directory.Exists(_pluginFolder))
                Directory.CreateDirectory(_pluginFolder);

            </span><span style="color: rgba(0, 0, 255, 1)">foreach</span> (<span style="color: rgba(0, 0, 255, 1)">var</span> dllPath <span style="color: rgba(0, 0, 255, 1)">in</span> Directory.GetFiles(_pluginFolder, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">*.dll</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">))
            {
                </span><span style="color: rgba(0, 0, 255, 1)">var</span> dllName =<span style="color: rgba(0, 0, 0, 1)"> Path.GetFileNameWithoutExtension(dllPath);
                </span><span style="color: rgba(0, 0, 255, 1)">var</span> stream =<span style="color: rgba(0, 0, 0, 1)"> File.OpenRead(dllPath);

                </span><span style="color: rgba(0, 0, 255, 1)">var</span> contextData = <span style="color: rgba(0, 0, 255, 1)">new</span> PluginContextDto(<span style="color: rgba(0, 0, 255, 1)">new</span> AssemblyLoadContext(dllName, <span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">));
                </span><span style="color: rgba(0, 0, 255, 1)">var</span> assembly =<span style="color: rgba(0, 0, 0, 1)"> contextData.AssemblyLoadContext.LoadFromStream(stream);
                </span><span style="color: rgba(0, 0, 255, 1)">var</span> obj = assembly.GetTypes().Where(x =&gt; <span style="color: rgba(0, 0, 255, 1)">typeof</span><span style="color: rgba(0, 0, 0, 1)">(IPluginDllApi).IsAssignableFrom(x)).FirstOrDefault();
                </span><span style="color: rgba(0, 0, 255, 1)">if</span> (obj != <span style="color: rgba(0, 0, 255, 1)">null</span> &amp;&amp; !<span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)">.IsNullOrEmpty(obj.FullName))
                {
                    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (assembly.CreateInstance(obj.FullName) <span style="color: rgba(0, 0, 255, 1)">is</span><span style="color: rgba(0, 0, 0, 1)"> IPluginDllApi instance)
                    {
                        contextData.Service </span>=<span style="color: rgba(0, 0, 0, 1)"> instance;
                        PluginContextList.Add(contextData);
                    }
                }
            }
        }


        </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;summary&gt;</span>
        <span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(0, 128, 0, 1)"> 加载插件
        </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;/summary&gt;</span>
        <span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;param name="dll"&gt;&lt;/param&gt;</span>
        <span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;param name="domainName"&gt;&lt;/param&gt;</span>
        <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">void</span> LoadPlugin(<span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)"> domainName, Stream stream)
        {
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">删除旧插件</span>
<span style="color: rgba(0, 0, 0, 1)">            UnloadPlugin(domainName);

            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">新增或更新新插件</span>
            <span style="color: rgba(0, 0, 255, 1)">var</span> contextData = <span style="color: rgba(0, 0, 255, 1)">new</span> PluginContextDto(<span style="color: rgba(0, 0, 255, 1)">new</span> AssemblyLoadContext(domainName, <span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">));
            </span><span style="color: rgba(0, 0, 255, 1)">var</span> assembly =<span style="color: rgba(0, 0, 0, 1)"> contextData.AssemblyLoadContext.LoadFromStream(stream);
            </span><span style="color: rgba(0, 0, 255, 1)">var</span> obj = assembly.GetTypes().Where(x =&gt; <span style="color: rgba(0, 0, 255, 1)">typeof</span><span style="color: rgba(0, 0, 0, 1)">(IPluginDllApi).IsAssignableFrom(x)).FirstOrDefault();
            </span><span style="color: rgba(0, 0, 255, 1)">if</span> (obj != <span style="color: rgba(0, 0, 255, 1)">null</span> &amp;&amp; !<span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)">.IsNullOrEmpty(obj.FullName))
            {
                </span><span style="color: rgba(0, 0, 255, 1)">if</span> (assembly.CreateInstance(obj.FullName) <span style="color: rgba(0, 0, 255, 1)">is</span><span style="color: rgba(0, 0, 0, 1)"> IPluginDllApi instance)
                {
                    contextData.Service </span>=<span style="color: rgba(0, 0, 0, 1)"> instance;
                    PluginContextList.Add(contextData);
                }
            }
        }

        </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;summary&gt;</span>
        <span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(0, 128, 0, 1)"> 卸载插件
        </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;/summary&gt;</span>
        <span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;param name="domainName"&gt;&lt;/param&gt;</span>
        <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">void</span> UnloadPlugin(<span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)"> domainName)
        {
            </span><span style="color: rgba(0, 0, 255, 1)">var</span> contextData = PluginContextList.FirstOrDefault(x =&gt; x.Service.Name ==<span style="color: rgba(0, 0, 0, 1)"> domainName);
            </span><span style="color: rgba(0, 0, 255, 1)">if</span> (contextData != <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">)
            {
                contextData.Service </span>= <span style="color: rgba(0, 0, 255, 1)">null</span>;<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 有一点坑，就是说如果被别处引用或者使用中，就无法释放；</span>
<span style="color: rgba(0, 0, 0, 1)">                contextData.AssemblyLoadContext.Unload();
                PluginContextList.Remove(contextData);
                </span><span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(0, 0, 255, 1)">int</span> i = <span style="color: rgba(128, 0, 128, 1)">0</span>; contextData.weakReference.IsAlive &amp; (i &lt; <span style="color: rgba(128, 0, 128, 1)">10</span>); i++<span style="color: rgba(0, 0, 0, 1)">)
                {
                    GC.Collect();
                    GC.WaitForPendingFinalizers();
                }
                </span><span style="color: rgba(0, 0, 255, 1)">var</span> dlls = AppDomain.CurrentDomain.GetAssemblies().Where(x =&gt; x.GetName().Name?.Contains(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">System</span><span style="color: rgba(128, 0, 0, 1)">"</span>) == <span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">);
            }
        }

        </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;summary&gt;</span>
        <span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(0, 128, 0, 1)"> 获取所有插件
        </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;/summary&gt;</span>
        <span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;returns&gt;&lt;/returns&gt;</span>
        <span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> List&lt;PluginContextDto&gt;<span style="color: rgba(0, 0, 0, 1)"> GetAllDll()
        {
            </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> PluginContextList;
        }

    }
}</span></pre>
</div>
<p>&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Runtime.Loader;

</span><span style="color: rgba(0, 0, 255, 1)">namespace</span><span style="color: rgba(0, 0, 0, 1)"> DynamicPluginApiDemo.Utils
{
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> PluginContextDto
    {
        </span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> PluginContextDto(AssemblyLoadContext assemblyLoadContext)
        {
            AssemblyLoadContext </span>=<span style="color: rgba(0, 0, 0, 1)"> assemblyLoadContext;
            weakReference </span>= <span style="color: rgba(0, 0, 255, 1)">new</span> WeakReference(AssemblyLoadContext, <span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">);
        }
        </span><span style="color: rgba(0, 0, 255, 1)">public</span> AssemblyLoadContext AssemblyLoadContext { <span style="color: rgba(0, 0, 255, 1)">get</span>; <span style="color: rgba(0, 0, 255, 1)">set</span><span style="color: rgba(0, 0, 0, 1)">; }
        </span><span style="color: rgba(0, 0, 255, 1)">public</span> WeakReference weakReference { <span style="color: rgba(0, 0, 255, 1)">get</span>; <span style="color: rgba(0, 0, 255, 1)">set</span><span style="color: rgba(0, 0, 0, 1)">; }

        </span><span style="color: rgba(0, 0, 255, 1)">public</span> IPluginDllApi Service { <span style="color: rgba(0, 0, 255, 1)">get</span>; <span style="color: rgba(0, 0, 255, 1)">set</span><span style="color: rgba(0, 0, 0, 1)">; }
    }
}</span></pre>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> SqlSugar;

</span><span style="color: rgba(0, 0, 255, 1)">namespace</span><span style="color: rgba(0, 0, 0, 1)"> DynamicPluginApiDemo.Utils
{
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> DbHelper
    {
        </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span><span style="color: rgba(0, 0, 0, 1)"> SqlSugarClient Db;
        </span><span style="color: rgba(0, 0, 255, 1)">static</span><span style="color: rgba(0, 0, 0, 1)"> DbHelper()
        {
            </span><span style="color: rgba(0, 0, 255, 1)">if</span> (Db == <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">)
                </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">创建数据库对象 (用法和EF Dappper一样通过new保证线程安全)</span>
                Db = <span style="color: rgba(0, 0, 255, 1)">new</span> SqlSugarClient(<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> ConnectionConfig()
                {
                    ConnectionString </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">server=192.168.1.61;Database=testdb;Uid=root;Pwd=MyNewPass@123;SslMode=None;AllowPublicKeyRetrieval=true;</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
                    DbType </span>=<span style="color: rgba(0, 0, 0, 1)"> SqlSugar.DbType.MySql,
                    IsAutoCloseConnection </span>= <span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">
                },
               db </span>=&gt;<span style="color: rgba(0, 0, 0, 1)">
               {
                   db.Aop.OnLogExecuting </span>= (sql, pars) =&gt;<span style="color: rgba(0, 0, 0, 1)">
                   {
                       </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">获取原生SQL推荐 5.1.4.63  性能OK</span>
<span style="color: rgba(0, 0, 0, 1)">                       Console.WriteLine(UtilMethods.GetNativeSql(sql, pars));
                   };

               });
        }
    }
}</span><span style="color: rgba(0, 0, 255, 1)"><br></span></pre>
</div>
<p>3，然后我们在程序启动的时候进行调用</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/1266469/202502/1266469-20250205164527995-1199943006.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p>&nbsp;4，接下来我们创建一个PluginController.cs和PluginManageController.cs控制器。代码如下：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> DynamicPluginApiDemo.Utils;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> Microsoft.AspNetCore.Http;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> Microsoft.AspNetCore.Mvc;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> Newtonsoft.Json.Linq;

</span><span style="color: rgba(0, 0, 255, 1)">namespace</span><span style="color: rgba(0, 0, 0, 1)"> DynamicPluginApiDemo.Controllers
{
    [Route(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">api/[controller]/{DynamicParam}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)]
    [ApiController]
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> PluginController : ControllerBase
    {

        </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;summary&gt;</span>
        <span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(0, 128, 0, 1)"> 动态插件的名称
        </span><span style="color: rgba(128, 128, 128, 1)">///</span> <span style="color: rgba(128, 128, 128, 1)">&lt;/summary&gt;</span>
        <span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">readonly</span> <span style="color: rgba(0, 0, 255, 1)">string</span> _dynamicParam = <span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)">.Empty;
        </span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> PluginController(IHttpContextAccessor httpContextAccessor)
        {
            </span><span style="color: rgba(0, 0, 255, 1)">var</span> dynamicParamKey = httpContextAccessor?.HttpContext?.GetRouteValue(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">DynamicParam</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
            </span><span style="color: rgba(0, 0, 255, 1)">if</span> (dynamicParamKey != <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">)
                _dynamicParam </span>= dynamicParamKey?.ToString() ?? <span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)">.Empty;
        }




        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> GET: api/Plugin/apidll/GetRequest/Query?SearchName=AAA</span>
        [HttpGet(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">GetRequest/{functionName}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)]
        </span><span style="color: rgba(0, 0, 255, 1)">public</span> IActionResult GetRequest(<span style="color: rgba(0, 0, 255, 1)">string</span> functionName, [FromQuery] Dictionary&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>, <span style="color: rgba(0, 0, 255, 1)">string</span>&gt;<span style="color: rgba(0, 0, 0, 1)"> queryParameters)
        {
            </span><span style="color: rgba(0, 0, 255, 1)">var</span> instance = PluginDllHelper.GetAllDll().FirstOrDefault(x =&gt; x.Service.Name ==<span style="color: rgba(0, 0, 0, 1)"> _dynamicParam);
            </span><span style="color: rgba(0, 0, 255, 1)">if</span> (instance == <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">)
                </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> NotFound();
            </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> instance.Service.GetRequest(functionName, queryParameters);
        }



        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> POST: api/Dynamic/json
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Receives query parameters and JSON body</span>
        [HttpPost(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">PostRequestBody/{functionName}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)]
        </span><span style="color: rgba(0, 0, 255, 1)">public</span> IActionResult PostRequestBody(<span style="color: rgba(0, 0, 255, 1)">string</span> functionName, [FromQuery] Dictionary&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>, <span style="color: rgba(0, 0, 255, 1)">string</span>&gt; queryParameters, [FromBody] <span style="color: rgba(0, 0, 255, 1)">object</span><span style="color: rgba(0, 0, 0, 1)"> jsonData)
        {
            </span><span style="color: rgba(0, 0, 255, 1)">var</span> instance = PluginDllHelper.GetAllDll().FirstOrDefault(x =&gt; x.Service.Name ==<span style="color: rgba(0, 0, 0, 1)"> _dynamicParam);
            </span><span style="color: rgba(0, 0, 255, 1)">if</span> (instance == <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">)
                </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> NotFound();
            </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> instance.Service.PostRequestBody(functionName, queryParameters, jsonData);
        }

        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> POST: api/Dynamic/form</span>
        [HttpPost(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">PostRequestForm/{functionName}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)]
        </span><span style="color: rgba(0, 0, 255, 1)">public</span> IActionResult PostRequestForm(<span style="color: rgba(0, 0, 255, 1)">string</span> functionName, [FromQuery] Dictionary&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>, <span style="color: rgba(0, 0, 255, 1)">string</span>&gt;<span style="color: rgba(0, 0, 0, 1)"> queryParameters, IFormCollection formData)
        {
            </span><span style="color: rgba(0, 0, 255, 1)">var</span> instance = PluginDllHelper.GetAllDll().FirstOrDefault(x =&gt; x.Service.Name ==<span style="color: rgba(0, 0, 0, 1)"> _dynamicParam);
            </span><span style="color: rgba(0, 0, 255, 1)">if</span> (instance == <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">)
                </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> NotFound();
            </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> instance.Service.PostRequestForm(functionName, queryParameters, formData);
        }



    }
}</span></pre>
</div>
<p>&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> DynamicPluginApiDemo.Utils;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> Microsoft.AspNetCore.Http;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> Microsoft.AspNetCore.Mvc;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> Microsoft.AspNetCore.Mvc.Routing;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.IO;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Reflection;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Runtime.Loader;
</span><span style="color: rgba(0, 0, 255, 1)">using</span> <span style="color: rgba(0, 0, 255, 1)">static</span><span style="color: rgba(0, 0, 0, 1)"> System.Net.Mime.MediaTypeNames;

</span><span style="color: rgba(0, 0, 255, 1)">namespace</span><span style="color: rgba(0, 0, 0, 1)"> DynamicPluginApiDemo.Controllers
{
    [Route(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">api/[controller]</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)]
    [ApiController]
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> PluginManageController : ControllerBase
    {
        </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)"> _pluginFolder;
        </span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> PluginManageController()
        {
            _pluginFolder </span>= Path.Combine(Directory.GetCurrentDirectory(), <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Plugins</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
        }

        [HttpGet(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">GetAllPlugin</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)]
        </span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> IActionResult GetAllPlugin()
        {
            </span><span style="color: rgba(0, 0, 255, 1)">var</span> allP = PluginDllHelper.GetAllDll().Select(s =&gt;<span style="color: rgba(0, 0, 0, 1)"> s.AssemblyLoadContext.Name).ToList();
            </span><span style="color: rgba(0, 0, 255, 1)">return</span> Ok(<span style="color: rgba(0, 0, 255, 1)">string</span>.Join(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">,</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, allP));

            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">var pluginAssemblies = new List&lt;Assembly&gt;();
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">foreach (var assembly in AppDomain.CurrentDomain.GetAssemblies())
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">{
            </span><span style="color: rgba(0, 128, 0, 1)">//</span>    <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 获取程序集中的所有类型
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">    var types = assembly.GetTypes();
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">    foreach (var type in types)
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">    {
            </span><span style="color: rgba(0, 128, 0, 1)">//</span>        <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 检查类型是否实现了IPluginDllApi且不是接口或抽象类
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">        if (typeof(IPluginDllApi).IsAssignableFrom(type) &amp;&amp; !type.IsInterface &amp;&amp; !type.IsAbstract)
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">        {
            </span><span style="color: rgba(0, 128, 0, 1)">//</span>            <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 如果找到了一个实现了IPluginDllApi的类型，添加此程序集到列表中并跳出循环
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">            pluginAssemblies.Add(assembly);
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">            break;
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">        }
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">    }
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">}
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">return Ok(string.Join(" | ", pluginAssemblies.Select(s =&gt; s.FullName)));</span>
<span style="color: rgba(0, 0, 0, 1)">        }


        [HttpPost(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">LoadPlugin</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)]
        </span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> IActionResult LoadPlugin([FromForm] IFormFile file)
        {
            </span><span style="color: rgba(0, 0, 255, 1)">if</span> (file != <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">)
            {
                </span><span style="color: rgba(0, 0, 255, 1)">var</span> fileStream =<span style="color: rgba(0, 0, 0, 1)"> file.OpenReadStream();
                </span><span style="color: rgba(0, 0, 255, 1)">var</span> fileName =<span style="color: rgba(0, 0, 0, 1)"> Path.GetFileNameWithoutExtension(file.FileName);
                PluginDllHelper.LoadPlugin(file.FileName, fileStream);
                </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">PluginDllHelper.LoadPlugin(@"D:\03MyStudyProject\02后端\Api插件管理\DynamicPluginApiDemo\DynamicPluginApiDemo\DynamicPluginApiDemo\Plugins\PersonnelExamResultApi.dll", "PersonnelExamResultApi");</span>
<span style="color: rgba(0, 0, 0, 1)">            }

            </span><span style="color: rgba(0, 0, 255, 1)">return</span> Ok(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">LoadPlugin success</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
        }


        [HttpGet(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">UnloadPlugin</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)]
        </span><span style="color: rgba(0, 0, 255, 1)">public</span> IActionResult UnloadPlugin([FromQuery] <span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)"> dllName)
        {
            PluginDllHelper.UnloadPlugin(dllName);
            </span><span style="color: rgba(0, 0, 255, 1)">return</span> Ok(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">UnloadPlugin success</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
        }

    }
}</span></pre>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>5，webapi项目的内容差不多了。接下来我们创建一个类库项目，名字叫做BlogPluginApi。然后项目引用一下主项目，并且创建一个BlogPluginApi.cs文件继承主项目的IPluginDllApi。</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> BlogPluginApi.Service;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> DynamicPluginApiDemo.Utils;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> Microsoft.AspNetCore.Http;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> Microsoft.AspNetCore.Mvc;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> Microsoft.SqlServer.Server;

</span><span style="color: rgba(0, 0, 255, 1)">namespace</span><span style="color: rgba(0, 0, 0, 1)"> BlogPluginApi
{
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> BlogPluginApi : IPluginDllApi
    {
        </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">string</span> Name =&gt; <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">BlogPluginApi</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;

        </span><span style="color: rgba(0, 0, 255, 1)">public</span> IActionResult GetRequest(<span style="color: rgba(0, 0, 255, 1)">string</span> funName, Dictionary&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>, <span style="color: rgba(0, 0, 255, 1)">string</span>&gt;<span style="color: rgba(0, 0, 0, 1)"> queryParameters)
        {
            </span><span style="color: rgba(0, 0, 255, 1)">var</span> result = <span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)">.Empty;
            </span><span style="color: rgba(0, 0, 255, 1)">switch</span><span style="color: rgba(0, 0, 0, 1)"> (funName)
            {
                </span><span style="color: rgba(0, 0, 255, 1)">case</span> <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Query</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">:
                    result </span>=<span style="color: rgba(0, 0, 0, 1)"> BlogService.Query(queryParameters);
                    </span><span style="color: rgba(0, 0, 255, 1)">break</span><span style="color: rgba(0, 0, 0, 1)">;
            }
            </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> ContentResult
            {
                StatusCode </span>= <span style="color: rgba(128, 0, 128, 1)">200</span><span style="color: rgba(0, 0, 0, 1)">,
                ContentType </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">text/plain</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
                Content </span>=<span style="color: rgba(0, 0, 0, 1)"> result
            };
        }

        </span><span style="color: rgba(0, 0, 255, 1)">public</span> IActionResult PostRequestBody(<span style="color: rgba(0, 0, 255, 1)">string</span> funName, Dictionary&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>, <span style="color: rgba(0, 0, 255, 1)">string</span>&gt; queryParameters, <span style="color: rgba(0, 0, 255, 1)">object</span><span style="color: rgba(0, 0, 0, 1)"> jsonData)
        {
            </span><span style="color: rgba(0, 0, 255, 1)">var</span> result = <span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)">.Empty;
            </span><span style="color: rgba(0, 0, 255, 1)">switch</span><span style="color: rgba(0, 0, 0, 1)"> (funName)
            {
                </span><span style="color: rgba(0, 0, 255, 1)">case</span> <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Save</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">:
                    result </span>=<span style="color: rgba(0, 0, 0, 1)"> BlogService.Save(jsonData);
                    </span><span style="color: rgba(0, 0, 255, 1)">break</span><span style="color: rgba(0, 0, 0, 1)">;
                </span><span style="color: rgba(0, 0, 255, 1)">case</span> <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Update</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">:
                    result </span>=<span style="color: rgba(0, 0, 0, 1)"> BlogService.Update(jsonData);
                    </span><span style="color: rgba(0, 0, 255, 1)">break</span><span style="color: rgba(0, 0, 0, 1)">;
                </span><span style="color: rgba(0, 0, 255, 1)">case</span> <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Delete</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">:
                    result </span>=<span style="color: rgba(0, 0, 0, 1)"> BlogService.Delete(jsonData);
                    </span><span style="color: rgba(0, 0, 255, 1)">break</span><span style="color: rgba(0, 0, 0, 1)">;
            }
            </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> ContentResult
            {
                StatusCode </span>= <span style="color: rgba(128, 0, 128, 1)">200</span><span style="color: rgba(0, 0, 0, 1)">,
                ContentType </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">text/plain</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
                Content </span>=<span style="color: rgba(0, 0, 0, 1)"> result
            };
        }

        </span><span style="color: rgba(0, 0, 255, 1)">public</span> IActionResult PostRequestForm(<span style="color: rgba(0, 0, 255, 1)">string</span> funName, Dictionary&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>, <span style="color: rgba(0, 0, 255, 1)">string</span>&gt;<span style="color: rgba(0, 0, 0, 1)"> queryParameters, IFormCollection formData)
        {
            </span><span style="color: rgba(0, 0, 255, 1)">var</span> result = <span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)">.Empty;
            </span><span style="color: rgba(0, 0, 255, 1)">switch</span><span style="color: rgba(0, 0, 0, 1)"> (funName)
            {
                </span><span style="color: rgba(0, 0, 255, 1)">case</span> <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">UploadFile</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">:
                    result </span>=<span style="color: rgba(0, 0, 0, 1)"> BlogService.UploadFile(queryParameters, formData);
                    </span><span style="color: rgba(0, 0, 255, 1)">break</span><span style="color: rgba(0, 0, 0, 1)">;
            }
            </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> ContentResult
            {
                StatusCode </span>= <span style="color: rgba(128, 0, 128, 1)">200</span><span style="color: rgba(0, 0, 0, 1)">,
                ContentType </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">text/plain</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
                Content </span>=<span style="color: rgba(0, 0, 0, 1)"> result
            };
        }
    }
}</span></pre>
</div>
<p>6，然后我们增加blog表的实体，服务，模型等。当然这些可以放在主项目中，通过项目引用使用主项目的代码。</p>
<p><img src="https://img2024.cnblogs.com/blog/1266469/202501/1266469-20250123114931244-1550553375.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> SqlSugar;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Collections.Generic;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Linq;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Text;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Threading.Tasks;

</span><span style="color: rgba(0, 0, 255, 1)">namespace</span><span style="color: rgba(0, 0, 0, 1)"> BlogPluginApi.Entitys.Blogs
{
    [SugarTable(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">BLOG</span><span style="color: rgba(128, 0, 0, 1)">"</span>, TableDescription = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">博客</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)]
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> Blog
    {
        [SugarColumn(ColumnName </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">ID</span><span style="color: rgba(128, 0, 0, 1)">"</span>, IsIdentity = <span style="color: rgba(0, 0, 255, 1)">true</span>, IsPrimaryKey = <span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">)]
        </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">int</span> Id { <span style="color: rgba(0, 0, 255, 1)">get</span>; <span style="color: rgba(0, 0, 255, 1)">set</span><span style="color: rgba(0, 0, 0, 1)">; }

        [SugarColumn(ColumnName </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Title</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)]
        </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">string</span> Title { <span style="color: rgba(0, 0, 255, 1)">get</span>; <span style="color: rgba(0, 0, 255, 1)">set</span><span style="color: rgba(0, 0, 0, 1)">; }

        [SugarColumn(ColumnName </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Context</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)]
        </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">string</span> Context { <span style="color: rgba(0, 0, 255, 1)">get</span>; <span style="color: rgba(0, 0, 255, 1)">set</span><span style="color: rgba(0, 0, 0, 1)">; }

        [SugarColumn(ColumnName </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">UserId</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)]
        </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">int</span> UserId { <span style="color: rgba(0, 0, 255, 1)">get</span>; <span style="color: rgba(0, 0, 255, 1)">set</span><span style="color: rgba(0, 0, 0, 1)">; }

        [SugarColumn(ColumnName </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">CreateTime</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)]

        </span><span style="color: rgba(0, 0, 255, 1)">public</span> DateTime CreateTime { <span style="color: rgba(0, 0, 255, 1)">get</span>; <span style="color: rgba(0, 0, 255, 1)">set</span><span style="color: rgba(0, 0, 0, 1)">; }
    }
}


</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> SqlSugar;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Collections.Generic;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Linq;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Text;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Threading.Tasks;

</span><span style="color: rgba(0, 0, 255, 1)">namespace</span><span style="color: rgba(0, 0, 0, 1)"> BlogPluginApi.Models.Blogs
{
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> BlogInputDto
    {
        </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">int</span>? Id { <span style="color: rgba(0, 0, 255, 1)">get</span>; <span style="color: rgba(0, 0, 255, 1)">set</span><span style="color: rgba(0, 0, 0, 1)">; }

        </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">string</span>? Title { <span style="color: rgba(0, 0, 255, 1)">get</span>; <span style="color: rgba(0, 0, 255, 1)">set</span><span style="color: rgba(0, 0, 0, 1)">; }

        </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">string</span>? Context { <span style="color: rgba(0, 0, 255, 1)">get</span>; <span style="color: rgba(0, 0, 255, 1)">set</span><span style="color: rgba(0, 0, 0, 1)">; }

        </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">int</span>? UserId { <span style="color: rgba(0, 0, 255, 1)">get</span>; <span style="color: rgba(0, 0, 255, 1)">set</span><span style="color: rgba(0, 0, 0, 1)">; }


        </span><span style="color: rgba(0, 0, 255, 1)">public</span> DateTime? CreateTime { <span style="color: rgba(0, 0, 255, 1)">get</span>; <span style="color: rgba(0, 0, 255, 1)">set</span><span style="color: rgba(0, 0, 0, 1)">; }
    }
}


</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Collections.Generic;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Linq;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Text;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Threading.Tasks;

</span><span style="color: rgba(0, 0, 255, 1)">namespace</span><span style="color: rgba(0, 0, 0, 1)"> BlogPluginApi.Models.Blogs
{
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> SearchDto
    {
        </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">string</span> SearchName { <span style="color: rgba(0, 0, 255, 1)">get</span>; <span style="color: rgba(0, 0, 255, 1)">set</span><span style="color: rgba(0, 0, 0, 1)">; }
    }
}


</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> AutoMapper;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> BlogPluginApi.Entitys.Blogs;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> BlogPluginApi.Models.Blogs;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> DynamicPluginApiDemo.Utils;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> Microsoft.AspNetCore.Http;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> Newtonsoft.Json;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Collections.Generic;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Linq;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Text;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> System.Threading.Tasks;

</span><span style="color: rgba(0, 0, 255, 1)">namespace</span><span style="color: rgba(0, 0, 0, 1)"> BlogPluginApi.Service
{
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> BlogService
    {

        </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">string</span> Query(Dictionary&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>, <span style="color: rgba(0, 0, 255, 1)">string</span>&gt;<span style="color: rgba(0, 0, 0, 1)"> queryParameters)
        {
            SearchDto searchBlogDto </span>= <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> SearchDto();
            </span><span style="color: rgba(0, 0, 255, 1)">if</span> (queryParameters.TryGetValue(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">SearchName</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(0, 0, 255, 1)">out</span> <span style="color: rgba(0, 0, 255, 1)">var</span><span style="color: rgba(0, 0, 0, 1)"> searchName))
            {
                searchBlogDto.SearchName </span>=<span style="color: rgba(0, 0, 0, 1)"> searchName;
            }
            </span><span style="color: rgba(0, 0, 255, 1)">var</span> result = <span style="color: rgba(0, 0, 255, 1)">string</span>.Join(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">,</span><span style="color: rgba(128, 0, 0, 1)">"</span>, DbHelper.Db.Queryable&lt;Blog&gt;().Select(s =&gt;<span style="color: rgba(0, 0, 0, 1)"> s.Title).ToList());
            </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> result;
        }

        </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">string</span> Delete(<span style="color: rgba(0, 0, 255, 1)">object</span><span style="color: rgba(0, 0, 0, 1)"> param)
        {
            </span><span style="color: rgba(0, 0, 255, 1)">var</span> strParam =<span style="color: rgba(0, 0, 0, 1)"> param.ToString();
            </span><span style="color: rgba(0, 0, 255, 1)">if</span> (<span style="color: rgba(0, 0, 255, 1)">string</span>.IsNullOrEmpty(strParam)) <span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)">.Empty;
            </span><span style="color: rgba(0, 0, 255, 1)">var</span> deleteIds = JsonConvert.DeserializeObject&lt;List&lt;<span style="color: rgba(0, 0, 255, 1)">int</span>&gt;&gt;<span style="color: rgba(0, 0, 0, 1)">(strParam);
            </span><span style="color: rgba(0, 0, 255, 1)">if</span> (deleteIds != <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">)
            {
                </span><span style="color: rgba(0, 0, 255, 1)">var</span> count = DbHelper.Db.Deleteable&lt;Blog&gt;().Where(x =&gt;<span style="color: rgba(0, 0, 0, 1)"> deleteIds.Contains(x.Id)).ExecuteCommand();
                </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> count.ToString();
            }
            </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)">.Empty;

        }

        </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">string</span> Save(<span style="color: rgba(0, 0, 255, 1)">object</span><span style="color: rgba(0, 0, 0, 1)"> param)
        {
            </span><span style="color: rgba(0, 0, 255, 1)">var</span> strParam =<span style="color: rgba(0, 0, 0, 1)"> param.ToString();
            </span><span style="color: rgba(0, 0, 255, 1)">if</span> (<span style="color: rgba(0, 0, 255, 1)">string</span>.IsNullOrEmpty(strParam)) <span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)">.Empty;
            </span><span style="color: rgba(0, 0, 255, 1)">var</span> inputDto = JsonConvert.DeserializeObject&lt;Blog&gt;<span style="color: rgba(0, 0, 0, 1)">(strParam);
            </span><span style="color: rgba(0, 0, 255, 1)">if</span> (inputDto != <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">)
            {
                </span><span style="color: rgba(0, 0, 255, 1)">var</span> count =<span style="color: rgba(0, 0, 0, 1)"> DbHelper.Db.Insertable(inputDto).ExecuteCommand();
            }
            </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">success</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;
        }

        </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">string</span> Update(<span style="color: rgba(0, 0, 255, 1)">object</span><span style="color: rgba(0, 0, 0, 1)"> param)
        {
            </span><span style="color: rgba(0, 0, 255, 1)">var</span> strParam =<span style="color: rgba(0, 0, 0, 1)"> param.ToString();
            </span><span style="color: rgba(0, 0, 255, 1)">if</span> (<span style="color: rgba(0, 0, 255, 1)">string</span>.IsNullOrEmpty(strParam)) <span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)">.Empty;
            </span><span style="color: rgba(0, 0, 255, 1)">var</span> inputDto = JsonConvert.DeserializeObject&lt;Blog&gt;<span style="color: rgba(0, 0, 0, 1)">(strParam);
            </span><span style="color: rgba(0, 0, 255, 1)">if</span> (inputDto != <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">)
            {
                </span><span style="color: rgba(0, 0, 255, 1)">var</span> count =<span style="color: rgba(0, 0, 0, 1)"> DbHelper.Db.Updateable(inputDto).ExecuteCommand();
            }
            </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">success</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;
        }

        </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">string</span> UploadFile(Dictionary&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>, <span style="color: rgba(0, 0, 255, 1)">string</span>&gt;<span style="color: rgba(0, 0, 0, 1)"> queryParameters, IFormCollection formData)
        {
            </span><span style="color: rgba(0, 0, 255, 1)">string</span> UploadId = <span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)">.Empty;
            </span><span style="color: rgba(0, 0, 255, 1)">if</span> (queryParameters.TryGetValue(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">uploadId</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(0, 0, 255, 1)">out</span> <span style="color: rgba(0, 0, 255, 1)">var</span><span style="color: rgba(0, 0, 0, 1)"> uploadId))
            {
                UploadId </span>=<span style="color: rgba(0, 0, 0, 1)"> uploadId;
            }

            </span><span style="color: rgba(0, 0, 255, 1)">var</span> file =<span style="color: rgba(0, 0, 0, 1)"> formData.Files.FirstOrDefault();
            </span><span style="color: rgba(0, 0, 255, 1)">if</span> (file != <span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">)
                </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> file.FileName;

            </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)">.Empty;
        }


    }
}</span></pre>
</div>
<p>&nbsp;7，然后我们生成一下BlogPluginApi项目，把生成的dll文件放在放在主项目的Plugins文件夹下就可以了。</p>
<p>&nbsp;8，人员管理插件代码：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> DynamicPluginApiDemo.Utils;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> Microsoft.AspNetCore.Http;
</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> Microsoft.AspNetCore.Mvc;

</span><span style="color: rgba(0, 0, 255, 1)">namespace</span><span style="color: rgba(0, 0, 0, 1)"> PersonnelExamResultApi
{
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> PersonnelExamResultApi : IPluginDllApi
    {
        </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">string</span> Name =&gt; <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">PersonnelExamResultApi</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;

        </span><span style="color: rgba(0, 0, 255, 1)">public</span> IActionResult GetRequest(<span style="color: rgba(0, 0, 255, 1)">string</span> funName, Dictionary&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>, <span style="color: rgba(0, 0, 255, 1)">string</span>&gt;<span style="color: rgba(0, 0, 0, 1)"> queryParameters)
        {
            </span><span style="color: rgba(0, 0, 255, 1)">var</span> result = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">success</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;
            </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> ContentResult
            {
                StatusCode </span>= <span style="color: rgba(128, 0, 128, 1)">200</span><span style="color: rgba(0, 0, 0, 1)">,
                ContentType </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">text/plain</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
                Content </span>=<span style="color: rgba(0, 0, 0, 1)"> result
            };
        }

        </span><span style="color: rgba(0, 0, 255, 1)">public</span> IActionResult PostRequestBody(<span style="color: rgba(0, 0, 255, 1)">string</span> funName, Dictionary&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>, <span style="color: rgba(0, 0, 255, 1)">string</span>&gt; queryParameters, <span style="color: rgba(0, 0, 255, 1)">object</span><span style="color: rgba(0, 0, 0, 1)"> jsonData)
        {
            </span><span style="color: rgba(0, 0, 255, 1)">var</span> result = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">success</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;
            </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> ContentResult
            {
                StatusCode </span>= <span style="color: rgba(128, 0, 128, 1)">200</span><span style="color: rgba(0, 0, 0, 1)">,
                ContentType </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">text/plain</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
                Content </span>=<span style="color: rgba(0, 0, 0, 1)"> result
            };
        }

        </span><span style="color: rgba(0, 0, 255, 1)">public</span> IActionResult PostRequestForm(<span style="color: rgba(0, 0, 255, 1)">string</span> funName, Dictionary&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>, <span style="color: rgba(0, 0, 255, 1)">string</span>&gt;<span style="color: rgba(0, 0, 0, 1)"> queryParameters, IFormCollection formData)
        {
            </span><span style="color: rgba(0, 0, 255, 1)">var</span> result = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">success</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;
            </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> ContentResult
            {
                StatusCode </span>= <span style="color: rgba(128, 0, 128, 1)">200</span><span style="color: rgba(0, 0, 0, 1)">,
                ContentType </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">text/plain</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
                Content </span>=<span style="color: rgba(0, 0, 0, 1)"> result
            };
        }

        </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> SayHello()
        {
            Console.WriteLine(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Hello from MyLibrary!</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
        }
    }
}</span></pre>
</div>
<p>&nbsp;</p>
<p>&nbsp;注意：</p>
<p>系统必须被设计为能够识别和管理不同的插件版本，并且能够在运行时安全地切换这些版本。</p>
<h1>结语</h1>
<p>Web API插件的热插拔是一个复杂但非常有价值的功能，它不仅提高了系统的灵活性和可用性，还增强了用户体验。通过精心规划和技术实践，可以使这一特性成为现代Web应用和服务的一个亮点。</p>
<p>文献参考：<a href="https://www.bilibili.com/video/BV1o841187Me/?spm_id_from=333.788.videopod.sections&amp;vd_source=71014aaf4da20e1f3133d917fdd24258" rel="noopener nofollow">.NetCore新版本的AssemblyLoadContext热插拔实现_哔哩哔哩_bilibili</a></p>
<p>项目结构截图：</p>
<p><img src="https://img2024.cnblogs.com/blog/1266469/202502/1266469-20250205172757023-763750258.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p><img src="https://img2024.cnblogs.com/blog/1266469/202502/1266469-20250205172806179-728292230.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
</div>
<div id="MySignature" role="contentinfo">
    从前慢，车马慢。
一生只爱一个人。
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.7271149197199074" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-05 17:31">2025-01-23 13:50</span>&nbsp;
<a href="https://www.cnblogs.com/BFMC">黄金程序员</a>&nbsp;
阅读(<span id="post_view_count">2041</span>)&nbsp;
评论(<span id="post_comment_count">16</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18687474" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18687474);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18687474', targetLink: 'https://www.cnblogs.com/BFMC/p/18687474', title: 'C# WebAPI 插件热插拔' })">举报</a>
</div>
        