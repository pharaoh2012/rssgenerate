
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/TheMagicalRainbowSea/p/18692743" title="发布于 2025-01-27 18:10">
    <span role="heading" aria-level="2">四.1 Redis 五大数据类型/结构的详细说明/详细使用（List 列表数据类型详解和使用）</span>
    

</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="四1-redis-五大数据类型结构的详细说明详细使用list-列表数据类型详解和使用">四.1 Redis 五大数据类型/结构的详细说明/详细使用（List 列表数据类型详解和使用）</h1>
<p>@</p><div class="toc"><div class="toc-container-header">目录</div><ul><li><a href="#四1-redis-五大数据类型结构的详细说明详细使用list-列表数据类型详解和使用" rel="noopener nofollow">四.1 Redis 五大数据类型/结构的详细说明/详细使用（List 列表数据类型详解和使用）</a></li><li><a href="#2-list-列表常用指令详细讲解说明" rel="noopener nofollow">2. list 列表常用指令(详细讲解说明)</a><ul><li><a href="#21--lpushrpush---keyvalue1value2value3--从左边右边插入一个或多个值" rel="noopener nofollow">2.1 <code> lpush/rpush   &lt;key&gt;&lt;value1&gt;&lt;value2&gt;&lt;value3&gt; ....</code> 从左边/右边插入一个或多个值</a></li><li><a href="#22-lrange-keystartstop--按照索引下标获得元素从左到右" rel="noopener nofollow">2.2 <code>lrange &lt;key&gt;&lt;start&gt;&lt;stop&gt; </code> 按照索引下标获得元素(从左到右)</a></li><li><a href="#23--lpoprpop---key-从左边右边吐出一个值那么对应的-list-对象里的值也是少了一个了" rel="noopener nofollow">2.3 <code> lpop/rpop   &lt;key&gt;</code> 从左边/右边吐出一个值，那么对应的 list 对象里的值也是少了一个了</a></li><li><a href="#24-rpoplpush---key1key2从key1-列表右边吐出一个值插到key2列表左边" rel="noopener nofollow">2.4 <code>rpoplpush   &lt;key1&gt;&lt;key2&gt;从&lt;key1&gt;</code> 列表右边吐出一个值，插到<code>&lt;key2&gt;</code>列表左边</a></li><li><a href="#25--lrange-mylist-0--1------0-左边第一个-1-右边第一个0-1-表示获取所有" rel="noopener nofollow">2.5  <code>lrange mylist 0 -1</code>      0 左边第一个，-1 右边第一个，（0-1 表示获取所有）</a></li><li><a href="#26--lindex-keyindex-按照索引下标获得元素从左到右" rel="noopener nofollow">2.6  <code>lindex &lt;key&gt;&lt;index&gt;</code> 按照索引下标获得元素(从左到右)</a></li><li><a href="#27-llen-key获得列表长度" rel="noopener nofollow">2.7 <code>llen &lt;key&gt;</code>获得列表长度</a></li><li><a href="#28-linsert-key---before-valuenewvalue在value的前面插入newvalue插入值" rel="noopener nofollow">2.8 <code>linsert &lt;key&gt;   before &lt;value&gt;&lt;newvalue&gt;</code>在<code>&lt;value&gt;</code>的前面插入<code>&lt;newvalue&gt;</code>插入值</a></li><li><a href="#29--linsert-key---atfore-valuenewvalue在value的后面插入newvalue插入值" rel="noopener nofollow">2.9  <code>linsert &lt;key&gt;   atfore &lt;value&gt;&lt;newvalue&gt;</code>在<code>&lt;value&gt;</code>的后面插入<code>&lt;newvalue&gt;</code>插入值</a></li><li><a href="#210-lrem-keynvalue从左边删除-n-个-value从左到右" rel="noopener nofollow">2.10 <code>lrem &lt;key&gt;&lt;n&gt;&lt;value&gt;</code>从左边删除 n 个 value(从左到右)</a></li><li><a href="#211--lsetkeyindexvalue-将列表-key-下标为-index-的值替换成-value" rel="noopener nofollow">2.11 <code> lset&lt;key&gt;&lt;index&gt;&lt;value&gt;</code> 将列表 key 下标为 index 的值替换成 value</a></li></ul></li><li><a href="#3-list-对象的应用场景" rel="noopener nofollow">3. list 对象的应用场景</a></li><li><a href="#4-最后" rel="noopener nofollow">4. 最后：</a></li></ul></div><p></p>
<hr>
<p><strong>list ：一句话: list 类型,  保存多个数据，底层使用双向链表存储结构实现</strong> 。</p>
<p><strong>list 存储结构示意图：</strong></p>
<p><strong>双向链表示意图：</strong></p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202501/3084824-20250127180054024-1394180237.png" alt="在这里插入图片描述" loading="lazy"></p>
<blockquote>
<p>示意图：说明：</p>
<ol>
<li>Redis 列表是简单的字符串列表，按照插入顺序排序，你可以添加一个元素到列表的头部(左边)或者尾部(右边)。</li>
<li>底层是个双向链表，对两端的操作性能高，通过索引下标的操作中间的节点性能较差。</li>
<li>关于更多双向链表的内容，大家可以移步至：🌟🌟🌟 <a href="https://rainbowsea.blog.csdn.net/article/details/125365407" target="_blank" rel="noopener nofollow">双向循环带头节点链表 —— C语言_双向循环节点-CSDN博客</a></li>
</ol>
</blockquote>
<blockquote>
<p>关于 list 列表的命令，在 Redis 当中有如下这些：</p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202501/3084824-20250127180053940-2054757763.png" alt="在这里插入图片描述" loading="lazy"></p>
</blockquote>
<p><strong>这里我们介绍一些 list 列表比较常用的一些命令，然后，举一反三，根据文档也可以对其它的命令上手学习使用了</strong> 。</p>
<h1 id="2-list-列表常用指令详细讲解说明">2. list 列表常用指令(详细讲解说明)</h1>
<h2 id="21--lpushrpush---keyvalue1value2value3--从左边右边插入一个或多个值">2.1 <code> lpush/rpush   &lt;key&gt;&lt;value1&gt;&lt;value2&gt;&lt;value3&gt; ....</code> 从左边/右边插入一个或多个值</h2>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202501/3084824-20250127180053975-1249900432.png" alt="在这里插入图片描述" loading="lazy"></p>
<blockquote>
<p><strong>注意：同时是会创建一个 list 对象的</strong></p>
</blockquote>
<pre><code class="language-sh">127.0.0.1:6379&gt; lpush k9 "a" "b" "c"
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202501/3084824-20250127180053917-1212611801.png" alt="在这里插入图片描述" loading="lazy"></p>
<hr>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202501/3084824-20250127180053937-1937337364.png" alt="在这里插入图片描述" loading="lazy"></p>
<pre><code class="language-sh">127.0.0.1:6379&gt; rpush k10 "a" "b" "c"
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202501/3084824-20250127180053938-584623859.png" alt="在这里插入图片描述" loading="lazy"></p>
<h2 id="22-lrange-keystartstop--按照索引下标获得元素从左到右">2.2 <code>lrange &lt;key&gt;&lt;start&gt;&lt;stop&gt; </code> 按照索引下标获得元素(从左到右)</h2>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202501/3084824-20250127180053773-334739215.png" alt="在这里插入图片描述" loading="lazy"></p>
<blockquote>
<p><strong>注意：</strong>  <code>lreage list 0 -1</code> 就是获取到该 list 的从开头到结尾的全部内容了。</p>
</blockquote>
<pre><code class="language-sh">127.0.0.1:6379&gt; lrange k10 0 -1
1) "a"
2) "b"
3) "c"
127.0.0.1:6379&gt; lrange k10 0 1
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202501/3084824-20250127180053907-45004881.png" alt="在这里插入图片描述" loading="lazy"></p>
<h2 id="23--lpoprpop---key-从左边右边吐出一个值那么对应的-list-对象里的值也是少了一个了">2.3 <code> lpop/rpop   &lt;key&gt;</code> 从左边/右边吐出一个值，那么对应的 list 对象里的值也是少了一个了</h2>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202501/3084824-20250127180053884-55498410.png" alt="在这里插入图片描述" loading="lazy"></p>
<pre><code class="language-sh">127.0.0.1:6379&gt; lpop k9
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202501/3084824-20250127180054032-1291824027.png" alt="在这里插入图片描述" loading="lazy"></p>
<blockquote>
<p><strong>注意：</strong> 列表的头元素。 当 <code>key</code> 不存在时，返回 <code>nil</code> 。</p>
</blockquote>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202501/3084824-20250127180054022-730879357.png" alt="在这里插入图片描述" loading="lazy"></p>
<hr>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202501/3084824-20250127180053910-895186789.png" alt="在这里插入图片描述" loading="lazy"></p>
<h2 id="24-rpoplpush---key1key2从key1-列表右边吐出一个值插到key2列表左边">2.4 <code>rpoplpush   &lt;key1&gt;&lt;key2&gt;从&lt;key1&gt;</code> 列表右边吐出一个值，插到<code>&lt;key2&gt;</code>列表左边</h2>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202501/3084824-20250127180054034-1843322154.png" alt="在这里插入图片描述" loading="lazy"></p>
<pre><code class="language-sh">127.0.0.1:6379&gt; rpoplpush k9 k10
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202501/3084824-20250127180054025-1027892512.png" alt="在这里插入图片描述" loading="lazy"></p>
<h2 id="25--lrange-mylist-0--1------0-左边第一个-1-右边第一个0-1-表示获取所有">2.5  <code>lrange mylist 0 -1</code>      0 左边第一个，-1 右边第一个，（0-1 表示获取所有）</h2>
<h2 id="26--lindex-keyindex-按照索引下标获得元素从左到右">2.6  <code>lindex &lt;key&gt;&lt;index&gt;</code> 按照索引下标获得元素(从左到右)</h2>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202501/3084824-20250127180054023-1551987572.png" alt="在这里插入图片描述" loading="lazy"></p>
<pre><code class="language-sh">127.0.0.1:6379&gt; lindex k10 1
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202501/3084824-20250127180053840-353961647.png" alt="在这里插入图片描述" loading="lazy"></p>
<h2 id="27-llen-key获得列表长度">2.7 <code>llen &lt;key&gt;</code>获得列表长度</h2>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202501/3084824-20250127180054031-913626727.png" alt="在这里插入图片描述" loading="lazy"></p>
<pre><code class="language-sh">127.0.0.1:6379&gt; llen k10
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202501/3084824-20250127180053906-541294930.png" alt="在这里插入图片描述" loading="lazy"></p>
<h2 id="28-linsert-key---before-valuenewvalue在value的前面插入newvalue插入值">2.8 <code>linsert &lt;key&gt;   before &lt;value&gt;&lt;newvalue&gt;</code>在<code>&lt;value&gt;</code>的前面插入<code>&lt;newvalue&gt;</code>插入值</h2>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202501/3084824-20250127180053919-1761607480.png" alt="在这里插入图片描述" loading="lazy"></p>
<pre><code class="language-sh">127.0.0.1:6379&gt; linsert k9 before "b" "tom"
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202501/3084824-20250127180053886-1068917342.png" alt="在这里插入图片描述" loading="lazy"></p>
<h2 id="29--linsert-key---atfore-valuenewvalue在value的后面插入newvalue插入值">2.9  <code>linsert &lt;key&gt;   atfore &lt;value&gt;&lt;newvalue&gt;</code>在<code>&lt;value&gt;</code>的后面插入<code>&lt;newvalue&gt;</code>插入值</h2>
<pre><code class="language-sh">127.0.0.1:6379&gt; linsert k9 after "b" "jack"
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202501/3084824-20250127180053890-1088173225.png" alt="在这里插入图片描述" loading="lazy"></p>
<h2 id="210-lrem-keynvalue从左边删除-n-个-value从左到右">2.10 <code>lrem &lt;key&gt;&lt;n&gt;&lt;value&gt;</code>从左边删除 n 个 value(从左到右)</h2>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202501/3084824-20250127180053913-1901773729.png" alt="在这里插入图片描述" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202501/3084824-20250127180053915-1066182942.png" alt="在这里插入图片描述" loading="lazy"></p>
<pre><code class="language-sh">127.0.0.1:6379&gt; lrem k9 1 "b"
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202501/3084824-20250127180053888-2055006670.png" alt="在这里插入图片描述" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202501/3084824-20250127180053842-821887164.png" alt="在这里插入图片描述" loading="lazy"></p>
<h2 id="211--lsetkeyindexvalue-将列表-key-下标为-index-的值替换成-value">2.11 <code> lset&lt;key&gt;&lt;index&gt;&lt;value&gt;</code> 将列表 key 下标为 index 的值替换成 value</h2>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202501/3084824-20250127180053921-417925585.png" alt="在这里插入图片描述" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202501/3084824-20250127180053838-1012955825.png" alt="在这里插入图片描述" loading="lazy"></p>
<blockquote>
<p><strong>注意：</strong> 当 <code>index</code> 参数超出范围，或对一个空列表( <code>key</code> 不存在)进行 <a href="#lset" rel="noopener nofollow">LSET</a> 时，返回一个错误。</p>
</blockquote>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202501/3084824-20250127180053777-2130129825.png" alt="在这里插入图片描述" loading="lazy"></p>
<h1 id="3-list-对象的应用场景">3. list 对象的应用场景</h1>
<blockquote>
<p>redis 当中  list 对象 应用于具有操作先后顺序的数据控制</p>
</blockquote>
<ol>
<li>系统通知，按照时间顺序展示，将最近的通知列在前面。</li>
</ol>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202501/3084824-20250127180053911-1811126258.png" alt="在这里插入图片描述" loading="lazy"></p>
<ol start="2">
<li>其它，比如微信的最近转发，微博的最新关注等。</li>
</ol>
<h1 id="4-最后">4. 最后：</h1>
<blockquote>
<p>“在这个最后的篇章中，我要表达我对每一位读者的感激之情。你们的关注和回复是我创作的动力源泉，我从你们身上吸取了无尽的灵感与勇气。我会将你们的鼓励留在心底，继续在其他的领域奋斗。感谢你们，我们总会在某个时刻再次相遇。”</p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202501/3084824-20250127180054130-685731265.gif" alt="在这里插入图片描述" loading="lazy"></p>
</blockquote>

</div>
<div class="clear"></div>

		</div>
		<div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.0040386119375" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-01-27 18:10">2025-01-27 18:10</span>&nbsp;
<a href="https://www.cnblogs.com/TheMagicalRainbowSea">Rainbow-Sea</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18692743" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18692743);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18692743', targetLink: 'https://www.cnblogs.com/TheMagicalRainbowSea/p/18692743', title: '四.1 Redis 五大数据类型/结构的详细说明/详细使用（List 列表数据类型详解和使用）' })">举报</a>
</div>
	