
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/EricsT/p/18870307" title="发布于 2025-05-10 23:26">
    <span role="heading" aria-level="2">初识C#</span>
    

</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			    <div id="cnblogs_post_description" style="display: none">
        
        初认识C#
    </div>
<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<h1>命名空间</h1>
<p>C#程序是利用命名空间组织起来的</p>
<p>命名空间既用作程序的“内部”组织系统，也用作向“外部”公开的组织系统（即一种向其他程序公开自己拥有的程序元素的方法）</p>
<p>如果要调用某个命名空间中的类或者方法，需要首先使用<code>using</code>指令引入命名空间，<code>using</code>指令将命名空间名所标识的命名空间内的类型成员导入当前编译单元中，从而可以直接使用每个被导入的类型的标识符，而不必加上它们的完全限定名</p>
<p>C#中的各命名空间就好像是一个存储了不同类型的仓库，而<code>using</code>指令就好比是一把钥匙，命名空间的名称就好比仓库的名称，可以通过钥匙打开指定名称的仓库，从而在仓库中获取所需的物品</p>
<p><code>using</code>指令的基本形式：</p>
<pre class="language-csharp highlighter-hljs"><code>using 命名空间名;</code></pre>
<h1>类</h1>
<p>类是一种数据结构，它可以封装数据成员、函数成员和其他的类</p>
<p>类是创建对象的模板</p>
<p>C#中所有的语句都必须位于类内</p>
<p>类是C#语言的核心和基本构成模块</p>
<p>C#支持自定义类，使用C#编程就是编写自己的类来描述实际需要解决的问题</p>
<p>使用任何新的类之前都必须声明它，一个类一旦被声明，就可以当做一种新的类型来使用，在C#中通过使用<code>class</code>关键字来声明类，声明形式如下：</p>
<pre class="language-csharp highlighter-hljs"><code>[类修饰符] class [类名][基类和接口]
{
    [类体]
}</code></pre>
<p>在C#中，类名是一种标识符，必须符合标识符的命名规则</p>
<p>类名要能够体现类的含义和用途</p>
<p>类名一般采用第一个字母大写的名词，也可以采用多个词构成的组合词</p>
<h1>Main()方法</h1>
<p>Main()方法是程序的入口点，C#程序必须包含一个Main()方法，在该方法中可以创建对象和调用其他方法，一个C#程序中只能有一个Main()方法，并且在C#中所有的Main()方法都是静态的</p>
<p>C#是一种面向对象的编程语言，即使是程序的启动入口点，它也是一个类的成员</p>
<p>由于程序启动时还没有创建类的对象，因此，必须将入口点Main()方法定义为静态方法，使它可以不依赖于类的实例对象而执行</p>
<p>可以用3个修饰符修饰Main()方法，分别是public、static和void</p>
<ul>
<li>public：说明Main()方法是共有的，在类的外面也可以调用整个方法</li>
<li>static：说明Main()方法是一个静态的方法，即这个方法属于类的本身而不是这个类的特定对象。调用静态方法不能使用类的实例化对象，必须使用类名来调用</li>
<li>void：此修饰符说明Main()方法无返回值</li>
</ul>
<h1>标识符及关键字</h1>
<h2>标识符</h2>
<p>标识符可以简单的理解为一个名字，用来标识类名、变量名、方法名、数组名、文件名的有效字符序列</p>
<p>C#语言规定标识符由任意顺序的字母、下划线（_）和数字组成，并且第一个字符不能是数字</p>
<p>标识符不能是C#中保留的关键字</p>
<p>在C#中，标识符中的字母是严格区分大小写的</p>
<h2>关键字</h2>
<p>关键字是C#语言中已经被赋予特定意义的一些单词，不可以把这些关键字作为标识符来使用</p>
<table style="border-collapse: collapse; width: 100.027%" border="1"><caption>C#常用关键字</caption>
<tbody>
<tr>
<td style="width: 15.7378%">int</td>
<td style="width: 15.7378%">public</td>
<td style="width: 15.7378%">this</td>
<td style="width: 15.7378%">finally</td>
<td style="width: 15.7378%">boolean</td>
<td style="width: 15.7394%">abstract</td>
</tr>
<tr>
<td style="width: 15.7378%">continue</td>
<td style="width: 15.7378%">float</td>
<td style="width: 15.7378%">long</td>
<td style="width: 15.7378%">short</td>
<td style="width: 15.7378%">throw</td>
<td style="width: 15.7394%">retrurn</td>
</tr>
<tr>
<td style="width: 15.7378%">break</td>
<td style="width: 15.7378%">for</td>
<td style="width: 15.7378%">foreach</td>
<td style="width: 15.7378%">static</td>
<td style="width: 15.7378%">new</td>
<td style="width: 15.7394%">interface</td>
</tr>
<tr>
<td style="width: 15.7378%">if</td>
<td style="width: 15.7378%">goto</td>
<td style="width: 15.7378%">default</td>
<td style="width: 15.7378%">byte</td>
<td style="width: 15.7378%">do</td>
<td style="width: 15.7394%">case</td>
</tr>
<tr>
<td style="width: 15.7378%">void</td>
<td style="width: 15.7378%">try</td>
<td style="width: 15.7378%">switch</td>
<td style="width: 15.7378%">else</td>
<td style="width: 15.7378%">catch</td>
<td style="width: 15.7394%">private</td>
</tr>
<tr>
<td style="width: 15.7378%">double</td>
<td style="width: 15.7378%">protected</td>
<td style="width: 15.7378%">while</td>
<td style="width: 15.7378%">char</td>
<td style="width: 15.7378%">class</td>
<td style="width: 15.7394%">using</td>
</tr>
</tbody>
</table>
<h1>C#语句</h1>
<p>语句是构造所有C#程序的基本单位</p>
<p>语句可以声明局部变量或常数、调用方法、创建对象或将值赋给变量、属性或字段，语句通常以分号终止</p>
<h1>注释</h1>
<p>编译器编译程序时不执行注释的代码或文字，其主要功能是对某行或某段代码进行说明，方便对代码的理解与维护</p>
<p>注释可以分为行注释和块注释两种</p>
<p>行注释都以<code>//</code>开头，如果注释的行数较少，一般使用行注释</p>
<p>对于连续多行的大段注释，则使用块注释，块注释通常以<code>/*</code>开始，以<code>*/</code>结束，注释的内容放在它们之间</p>
<p>注释的内容可以出现在代码的任意位置，但是不能分隔关键字和标识符</p>
<h1>代码书写规则</h1>
<ul>
<li>尽量使用接口，然后使用类实现接口，以提高程序的灵活性</li>
<li>尽量不要手工更改计算机生成的代码，若必须修改，一定要改成和计算机生成的代码风格一样</li>
<li>关键的语句（包括声明关键的变量）必须要写注释</li>
<li>建议局部变量在最接近使用它的地方声明</li>
<li>不要使用<code>goto</code>系列语句，除非是用在跳出深层循环时</li>
<li>避免写超过5个参数的方法。如果要传递多个参数，则使用结构</li>
<li>避免代码量过大的<code>try-catch</code>代码块</li>
<li>避免在同一个文件中放置多个类</li>
<li>生成和构建一个长的字符串时，一定要使用<code>StringBuilder</code>类型，而不是使用<code>string</code>类型</li>
<li><code>switch</code>语句一定要有<code>default</code>语句来处理意外情况</li>
<li>对于<code>if</code>语句，应该使用一对<code>{}</code>把语句块包含起来</li>
<li>尽量不使用<code>this</code>关键字引用</li>
</ul>
<h1>命名规范</h1>
<ul>
<li>用Pascal规则来命名方法和类型，Pascal的命名规则是第一个字母必须大写，并且后面的连接词的第一个字母均大写</li>
<li>用Camel规则来命名局部变量和方法的参数，Camel规则是指名称中第一个单词的第一个字母小写，并且后面的连接词的第一个字母均大写</li>
<li>所有的成员变量前加前缀“_”</li>
<li>接口的名称前加前缀“I”</li>
<li>方法的命名，一般将其命名为动宾短语</li>
<li>所有的成员变量声明在类的顶端，用一个换行把它和方法分开</li>
<li>用有意义的名字命名空间<code>namespace</code></li>
<li>使用某一个控件的值时，尽量命名局部变量</li>
</ul>
<p>在类中定义私有变量和私有方法，变量和方法只能在该类中使用，不能对类进行实例化，对其进行调用</p>
<p>在定义有返回值的方法时，必须在设置方法时，定义方法的类型，并在方法体结束后用<code>return</code>返回值</p>
</div>
<div id="MySignature" role="contentinfo">
    <p>本文来自博客园，作者：<a href="https://www.cnblogs.com/EricsT/" target="_blank">EricsT</a>，转载请注明原文链接：<a href="https://www.cnblogs.com/EricsT/p/18870307" target="_blank">https://www.cnblogs.com/EricsT/p/18870307</a></p>
</div>
<div class="clear"></div>

		</div>
		<div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="1.5469821108935184" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-10 23:26">2025-05-10 23:26</span>&nbsp;
<a href="https://www.cnblogs.com/EricsT">EricsT</a>&nbsp;
阅读(<span id="post_view_count">12</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18870307);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18870307', targetLink: 'https://www.cnblogs.com/EricsT/p/18870307', title: '初识C#' })">举报</a>
</div>
	