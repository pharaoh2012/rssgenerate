
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/JulianHuang/p/19023906" title="发布于 2025-08-05 19:56">
    <span role="heading" aria-level="2">Go动态感知资源变更的技术实践，你指定用过！</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<blockquote>
<p>最近在倒腾“AI大模型基础设施”， 宏观目标是做一个基于云原生的AI算力平台，目前因公司隐私暂不能公开宏观背景和技术方案， 姑且记录实践中遇到的一些技能点。</p>
</blockquote>
<p><img src="https://files.mdnice.com/user/4236/60e23bbc-6997-464c-af64-137610a35ca2.png" alt="" loading="lazy"></p>
<p>前文已经记录了第1步： 使用arena 提交训练任务的实践。</p>
<p>今天我们记录聊一聊平台侧另一个核心能力：<br>
动态纳管云原生k8s集群，并监听AI/ML训练任务的状态变化。也就是上图的第4步。</p>
<hr>
<p>作为面向算法开发者的云原生saas平台，平台在界面上提供了纳管集群的交互入口，平台启动后会去监听pytorch，mpi训练任务的状态变更，并回显到界面（并给开发者发送飞书变更通知）。</p>
<p>本文核心关注：</p>
<ul>
<li>如何动态纳管k8s集群</li>
<li>如何重建k8s informer监听</li>
</ul>
<hr>
<p>这里我提供我的实践， 请看下图：</p>
<p><img src="https://files.mdnice.com/user/4236/ebd1a454-8d44-45e4-8afc-dc6688ec62a3.png" alt="" loading="lazy"></p>
<ol>
<li>程序启动，加载初始k8s集群，informer监听训练任务状态，并绑定informer停止信号（stopCh）、重建信号（rebuildCh）</li>
</ol>
<pre><code>package main

import "k8s.io/client-go/rest"

type StartInformerFunc func(clusterId string, restConf *rest.Config) (stopCh chan struct{}, err error)
type InformerManager struct {
	clusterConfigs map[string]string
	gvr            map[string]StartInformerFunc
	stopCh         chan struct{}  // informer 需要用到
	rebuildCh      chan struct{}
}

var InformerManagerInstance *InformerManager

func NewInFormerManager() *InformerManager {
	InformerManagerInstance = &amp;InformerManager{
		clusterConfigs: map[string]string{
			"id1": "kubeconfig1",
			"id2": "kubeconfig2",
		},
		gvr: map[string]StartInformerFunc{
		   "pytorchjob": startPytorchjobInformer,
		   "mpijob": startMpijobInformer,
		   "job": startRawjobInformer,
		},
		stopCh:    make(chan struct{}),
		rebuildCh: make(chan struct{}, 1),
	}
	return InformerManagerInstance
}

</code></pre>
<ol start="2">
<li>开协程定时任务去轮循落盘的待纳管k8s集群记录</li>
<li>考虑纳管的k8s集群数据可控，变更时机可控，采用md5校验的方式判断是否发生集群变更</li>
</ol>
<p>下面的<code>k8s.CheckClusterChanged(mgr.clusterConfigs)</code> 是利用对kube-configs做md5， 前后对比判断集群是否发生变更。</p>
<pre><code>func (mgr *InformerManager) monitorcLusterChanged() bool {
	ticker := time.NewTicker(30 * time.Second)
	defer ticker.Stop()
	for {
		select {
		case &lt;-ticker.C:
			if k8s.CheckClusterChanged(mgr.clusterConfigs) {
				fmt.Println("cluster changed")
				mgr.rebuildCh &lt;- struct{}{}
			} else {
				fmt.Println("cluster no change")
			}
		case &lt;-mgr.rebuildCh:
			fmt.Println("rebuild informer")
			mgr.clusterConfigs = k8s.GetInitclusters()
			for k, v := range mgr.clusterConfigs {
				rc, err := k8s.ConvertToRestConfig([]byte(v))
				if err != nil {
					fmt.Println("convert to rest config failed")
					continue
				}
				for gvr, StartInformerFunc := range mgr.gvr {
					go func(k string, rc *rest.Config) {
						newStopch, err := StartInformerFunc(k, rc)
						if err != nil {
							return
						}
						if mgr.stopCh != nil {
							close(mgr.stopCh)
						}
						mgr.stopCh = newStopch
						fmt.Printf("%s informer started for cluster %s  \n", gvr, k)
					}(k, rc)
				}
			}
		}
	}
}
</code></pre>
<ol start="4">
<li>利用简单的链表指针，重置informer监听信道</li>
</ol>
<pre><code>func (mgr *InformerManager) Run() {
	for k, v := range mgr.clusterConfigs {
		rc, err := k8s.ConvertToRestConfig([]byte(v))
		if err != nil {
			fmt.Println("failed to convert kubeconfig to rest config")
			continue
		}
		for gvr, StartInformerFunc := range mgr.gvr {
			go func(k string, rc *rest.Config) {
				newStopch, err := StartInformerFunc(k, rc)
				if err != nil {
					return
				}
				if mgr.stopCh != nil {
					close(mgr.stopCh)
				}
				mgr.stopCh = newStopch
				fmt.Printf("start %s informer for cluster %s  \n", gvr,k)
			}(k, rc)
		}
		go mgr.monitorClusterChanged()
	}
}
</code></pre>
<hr>
<p>本文记录了使用定时任务感知资源变更，并利用golang信道作为变更信号的姿势，可作为golang中动态感知资源变化的常规技能实践。</p>

</div>
<div id="MySignature" role="contentinfo">
    <hr style="FILTER: alpha(opacity=100,finishopacity=0,style=3)" width="80%" color="#987cb9" size="3">
<div style="text-align:center;">
<p>本文来自博客园，作者：{有态度的马甲}，转载请注明原文链接：<a href="https://www.cnblogs.com/JulianHuang/p/19023906" target="_blank">https://www.cnblogs.com/JulianHuang/p/19023906</a></p>
<strong style="color: red; ">欢迎关注我的原创技术、职场公众号， 加好友谈天说地，一起进化</strong>
<div><img style="width: 250px;height:250px;" src="https://blog-static.cnblogs.com/files/JulianHuang/QR.gif"> </div>

</div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-08-05 19:57">2025-08-05 19:56</span>&nbsp;
<a href="https://www.cnblogs.com/JulianHuang">码甲哥不卷</a>&nbsp;
阅读(<span id="post_view_count">28</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19023906);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19023906', targetLink: 'https://www.cnblogs.com/JulianHuang/p/19023906', title: 'Go动态感知资源变更的技术实践，你指定用过！' })">举报</a>
</div>
        