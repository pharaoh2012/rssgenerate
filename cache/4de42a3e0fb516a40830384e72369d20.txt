
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/wang_yb/p/18881943" title="发布于 2025-05-18 08:59">
    <span role="heading" aria-level="2">Manim：动画制作背后的魔法</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p><code>Manim</code>是一个强大的数学动画制作库，它能够帮助我们创建出令人惊叹的动画，无论是用于教学还是娱乐。</p>
<p>不过，对于初学者来说，<code>Manim</code>的内部工作机制可能显得有些复杂。</p>
<p>本文将从整体上简单介绍<code>Manim</code>的内部结构，希望能帮助你更好地理解它是如何工作的。</p>
<h1 id="1-manim是什么">1. Manim是什么？</h1>
<p><code>Manim</code>是一个基于<code>Python</code>的动画库，主要用于创建数学相关的动画。</p>
<p>它最初是由<code>Grant Sanderson</code>（<code>3Blue1Brown</code>的创始人）开发的，后来发展成为一个开源项目。</p>
<p><code>Manim</code>的核心思想是通过代码来定义动画，这种方式不仅能够精确控制动画的每一个细节，还能方便地进行复用和修改。</p>
<h1 id="2-manim的工作流程">2. Manim的工作流程</h1>
<h2 id="21-场景scene的准备">2.1. 场景（Scene）的准备</h2>
<p>在<code>Manim</code>中，一个场景（<code>Scene</code>）代表了一个完整的动画序列。</p>
<p>当我们运行<code>Manim</code>代码时，<code>Manim</code>首先会读取我们的场景代码，并准备场景以供渲染。</p>
<p>这个过程包括解析代码、初始化场景对象以及设置渲染器等步骤。</p>
<p>例如，当我们运行以下代码时：</p>
<pre><code class="language-python">from manim import *

class ToyExample(Scene):
    def construct(self):
        orange_square = Square(color=ORANGE, fill_opacity=0.5)
        blue_circle = Circle(color=BLUE, fill_opacity=0.5)
        self.add(orange_square)
        self.play(ReplacementTransform(orange_square, blue_circle, run_time=3))
        small_dot = Dot()
        small_dot.add_updater(lambda mob: mob.next_to(blue_circle, DOWN))
        self.play(Create(small_dot))
        self.play(blue_circle.animate.shift(RIGHT))
        self.wait()
        self.play(FadeOut(blue_circle, small_dot))
</code></pre>
<p><strong>注</strong>：这个示例来自<code>Manim</code>官方文档中。</p>
<p><code>Manim</code>会按照以下步骤进行处理：</p>
<ul>
<li><strong>导入库</strong>：<code>Manim</code>通过<code>from manim import *</code>导入所需的类和函数。</li>
<li><strong>初始化场景</strong>：创建<code>ToyExample</code>类的实例，并调用其<code>construct</code>方法。</li>
<li><strong>设置渲染器</strong>：根据配置选择<code>Cairo</code>渲染器或<code>OpenGL</code>渲染器。</li>
</ul>
<h2 id="22-对象mobject的初始化">2.2. 对象（Mobject）的初始化</h2>
<p><code>Manim</code>中的所有可视对象都被称为<code>Mobjects</code>（<code>Mathematical Objects</code>或<code>Manim Objects</code>）。</p>
<p><code>Mobjects</code>是<code>Manim</code>的核心，它们可以是简单的<strong>几何形状</strong>（如正方形、圆形），也可以是复杂的组合对象。</p>
<p>在我们的示例中，<code>Square</code>和<code>Circle</code>都是<code>Mobjects</code>。</p>
<p>当我们创建一个<code>Square</code>时，<code>Manim</code>会调用<code>Square.__init__</code>方法，设置其属性（如颜色、填充透明度等），并将其添加到场景中。</p>
<h2 id="23-动画的创建">2.3. 动画的创建</h2>
<p><code>Manim</code>的动画是通过<code>Animation</code>类及其子类实现的。</p>
<p>每个动画对象都包含了一个<code>Mobject</code>以及动画的详细信息（如持续时间、动画类型等）。</p>
<p>在我们的示例中，<code>ReplacementTransform</code>是一个动画类，它将一个<code>Mobject</code>（橙色正方形）变形为另一个<code>Mobject</code>（蓝色圆形）。</p>
<p>动画的初始化过程会设置动画的起始状态和目标状态，并在渲染时逐步更新<code>Mobject</code>的状态。</p>
<h2 id="24-渲染循环">2.4. 渲染循环</h2>
<p><strong>渲染</strong>是<code>Manim</code>中最关键的步骤。</p>
<p><code>Manim</code>通过一个循环逐步生成每一帧的图像，并将它们组合成一个视频文件。</p>
<p>在渲染过程中，<code>Manim</code>会：</p>
<ul>
<li>确定动画的持续时间和帧率：根据动画的<code>run_time</code>属性和配置的帧率，计算出需要渲染的帧数。</li>
<li>更新<code>Mobject</code>的状态：在每一帧中，<code>Manim</code>会调用<code>Animation.interpolate()</code>方法，根据当前时间戳更新<code>Mobject</code>的状态。</li>
<li>渲染帧：使用<code>Cairo</code>或<code>OpenGL</code>渲染器将当前场景的<code>Mobjects</code>绘制到帧中。</li>
<li>保存帧：将每一帧保存为视频文件的一部分。</li>
</ul>
<h1 id="3-manim的内部结构">3. Manim的内部结构</h1>
<p>总的来看，<code>Manim</code>的内部结构可以分为以下几个部分：</p>
<ul>
<li><code>Mobject</code>：<code>Manim</code>的基本对象，用于表示场景中的所有可视元素。</li>
<li><code>Animation</code>：动画类，用于定义<code>Mobject</code>的动画效果。</li>
<li><code>Scene</code>：场景类，用于管理<code>Mobjects</code>和动画的播放。</li>
<li><code>Renderer</code>：渲染器，负责将<code>Mobjects</code>绘制到帧中，并生成视频文件。</li>
</ul>
<h1 id="4-总结">4. 总结</h1>
<p><code>Manim</code>是一个功能强大的动画制作工具，它通过代码的方式定义动画，使得动画的制作更加灵活和精确。</p>
<p>通过深入了解<code>Manim</code>的内部工作机制，我们可以更好地掌握如何使用它来创建出令人惊叹的动画。</p>
<p>如果你对<code>Manim</code>感兴趣，可以尝试自己动手编写一些简单的动画代码，体验一下<code>Manim</code>的魅力！</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.47740695752314816" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-18 09:00">2025-05-18 08:59</span>&nbsp;
<a href="https://www.cnblogs.com/wang_yb">wang_yb</a>&nbsp;
阅读(<span id="post_view_count">33</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18881943);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18881943', targetLink: 'https://www.cnblogs.com/wang_yb/p/18881943', title: 'Manim：动画制作背后的魔法' })">举报</a>
</div>
        