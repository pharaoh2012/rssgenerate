
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/sxxs/p/19038068" title="发布于 2025-08-14 17:16">
    <span role="heading" aria-level="2">Elasticsearch嵌套类型nested使用指南</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="elasticsearch嵌套类型nested使用指南">Elasticsearch嵌套类型nested使用指南</h1>
<h3 id="嵌套类型nested的特点">嵌套类型nested的特点</h3>
<ul>
<li>可以存储数组对象</li>
<li>每个对象独立存储为隐藏的子文档</li>
</ul>
<h3 id="嵌套类型nested和object类型的区别和应用场景">嵌套类型nested和object类型的区别和应用场景</h3>
<ul>
<li>
<p>nested</p>
<ul>
<li>每个对象独立存储为隐藏的子文档</li>
<li>适合存储数组</li>
<li>查询的时候有特定的语法 nested查询 且字段要用对象.字段名</li>
<li>性能略低 因为要维护子文档</li>
</ul>
</li>
<li>
<p>object</p>
<ul>
<li>扁平化存储，数组中的对象相同字段会合并成数组</li>
<li>适合存储单层的json对象</li>
<li>查询的时候指定对象.字段名称即可</li>
<li>查询性能高</li>
</ul>
</li>
</ul>
<h3 id="嵌套类型nested如何使用">嵌套类型nested如何使用</h3>
<p><strong>索引结构</strong></p>
<pre><code>"properties" : {
       "create_time" : {
         "format" : "yyyy-MM-dd HH:mm:ss Z||yyyy-MM-dd HH:mm:ss||yyyy-MM-dd HH:mm:ss.SSS Z||yyyy-MM-dd HH:mm:ss.SSS||yyyy-MM-dd HH:mm:ss,SSS||yyyy/MM/dd HH:mm:ss||yyyy-MM-dd HH:mm:ss,SSS Z||yyyy/MM/dd HH:mm:ss,SSS Z||epoch_millis||yyyy-MM-dd",
         "index" : true,
         "type" : "date",
         "doc_values" : true
       },
       "title" : {
         "index" : true,
         "type" : "text"
       },
       "users" : {
         "type" : "nested",
         "properties" : {
           "sex" : {
             "type" : "keyword"
           },
           "age" : {
             "type" : "integer"
           },
           "username" : {
             "type" : "keyword"
           }
         }
       }
     }
</code></pre>
<p><strong>插入数据</strong></p>
<pre><code>POST cn_taoym_json_to_nested/_bulk
{"index":{}}
{"create_time":"2023-10-01 10:00:00","title":"第一条数据","users":[{"username":"user1","age":25,"sex":"male"}]}
{"index":{}}
{"create_time":"2023-10-02 14:30:00","title":"第二条数据","users":[{"username":"user2","age":30,"sex":"female"}]}
{"index":{}}
{"create_time":"2023-10-03 09:15:00","title":"第三条数据","users":[{"username":"user3","age":28,"sex":"male"},{"username":"user4","age":22,"sex":"female"}]}
{"index":{}}
{"create_time":"1696300800000","title":"第四条数据（时间戳格式）","users":[{"username":"user5","age":35,"sex":"male"}]}
{"index":{}}
{"create_time":"2023/10/05 16:45:00","title":"第五条数据（不同日期格式）","users":[{"username":"user6","age":27,"sex":"female"}]}
</code></pre>
<p><strong>查询username为user3的数据</strong></p>
<pre><code>GET cn_taoym_json_to_nested/_search
{
  "query": {
    "nested": {
      "path": "users",
      "query": {
        "term": {
          "users.username": {
            "value": "user3"
          }
        }
      },
      "inner_hits": {}
    }
  }
}
</code></pre>
<p><strong>结果集</strong></p>
<pre><code>{
  "took" : 2,
  "timed_out" : false,
  "_shards" : {
    "total" : 4,
    "successful" : 4,
    "skipped" : 0,
    "failed" : 0
  },
  "hits" : {
    "total" : 1,
    "max_score" : 0.9808291,
    "hits" : [ {
      "_index" : "cn_taoym_json_to_nested",
      "_type" : "_doc",
      "_id" : "EKfHp5gBCQbF-O0GPRhA",
      "_score" : 0.9808291,
      "_source" : {
        "create_time" : "2023-10-03 09:15:00",
        "title" : "第三条数据",
        "users" : [ {
          "sex" : "male",
          "age" : 28,
          "username" : "user3"
        }, {
          "sex" : "female",
          "age" : 22,
          "username" : "user4"
        } ]
      },
      "inner_hits" : {
        "users" : {
          "hits" : {
            "hits" : [ {
              "_index" : "cn_taoym_json_to_nested",
              "_type" : "_doc",
              "_source" : {
                "sex" : "male",
                "age" : 28,
                "username" : "user3"
              },
              "_id" : "EKfHp5gBCQbF-O0GPRhA",
              "_nested" : {
                "field" : "users",
                "offset" : 0
              },
              "_score" : 0.9808291
            } ],
            "total" : 1,
            "max_score" : 0.9808291
          }
        }
      }
    } ]
  }
}

</code></pre>
<p>"inner_hits": {}的作用是将嵌套查询中复合预期的数据单独收集起来。source里面存储的是原数据，里面自然包含所有数据的</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0" data-date-updated="2025-08-14 17:16">2025-08-14 17:16</span>&nbsp;
<a href="https://www.cnblogs.com/sxxs">实习小生</a>&nbsp;
阅读(<span id="post_view_count">100</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(19038068);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '19038068', targetLink: 'https://www.cnblogs.com/sxxs/p/19038068', title: 'Elasticsearch嵌套类型nested使用指南' })">举报</a>
</div>
        