
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/Amd794/p/18769003" title="发布于 2025-03-13 01:49">
    <span role="heading" aria-level="2">FastAPI 核心机制：分页参数的实现与最佳实践</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<hr>
<p>title: FastAPI 核心机制：分页参数的实现与最佳实践<br>
date: 2025/3/13<br>
updated: 2025/3/13<br>
author: <a href="https://cmdragon.cn" target="_blank" rel="noopener nofollow"> cmdragon </a></p>
<p>excerpt:<br>
在构建现代Web应用程序时，分页是一个不可或缺的功能。无论是处理大量数据还是优化用户体验，分页都起到了至关重要的作用。本文将深入探讨如何在FastAPI中实现分页参数（如page、page_size以及总页数计算），并涵盖相关的核心机制、最佳实践、常见问题及解决方案。</p>
<p>categories:</p>
<ul>
<li>后端开发</li>
<li>FastAPI</li>
</ul>
<p>tags:</p>
<ul>
<li>FastAPI</li>
<li>分页</li>
<li>Web开发</li>
<li>数据库查询</li>
<li>性能优化</li>
<li>安全实践</li>
<li>错误处理</li>
</ul>
<hr>
<p><img src="https://img2024.cnblogs.com/blog/1546022/202503/1546022-20250313013643707-1448832345.png" alt="image" loading="lazy"><br>
<img src="https://img2024.cnblogs.com/blog/1546022/202503/1546022-20250313013643644-640990543.png" alt="image" loading="lazy"></p>
<p><img src="uploading..." alt="image" loading="lazy"></p>
<p>扫描<a href="https://static.amd794.com/blog/images/cmdragon_cn.png" target="_blank" rel="noopener nofollow">二维码</a>关注或者微信搜一搜：<code>编程智域 前端至全栈交流与成长</code></p>
<p><a href="https://tools.cmdragon.cn/zh/apps?category=ai_chat" target="_blank" rel="noopener nofollow">探索数千个预构建的 AI 应用，开启你的下一个伟大创意</a></p>
<h3 id="1-分页的基本概念"><strong>1. 分页的基本概念</strong></h3>
<p>分页是将大量数据分割成多个小块（即“页”），以便用户或系统可以逐步加载和处理这些数据。在Web应用中，分页通常用于处理数据库查询结果、API响应等场景。常见的分页参数包括：</p>
<ul>
<li><code>page</code>：当前页码。</li>
<li><code>page_size</code>：每页显示的数据条数。</li>
<li><code>total_pages</code>：总页数。</li>
</ul>
<h3 id="2-fastapi中的分页实现"><strong>2. FastAPI中的分页实现</strong></h3>
<p>在FastAPI中，分页可以通过查询参数来实现。以下是一个简单的示例，展示了如何在FastAPI中实现分页功能。</p>
<pre><code class="language-python">from fastapi import FastAPI, Query
from typing import List, Optional

app = FastAPI()

# 模拟数据库数据
fake_items_db = [{"item_name": f"Item {i}"} for i in range(100)]


@app.get("/items/")
async def read_items(page: int = Query(1, gt=0), page_size: int = Query(10, gt=0)):
    start = (page - 1) * page_size
    end = start + page_size
    items = fake_items_db[start:end]
    total_items = len(fake_items_db)
    total_pages = (total_items + page_size - 1) // page_size
    return {
        "items": items,
        "page": page,
        "page_size": page_size,
        "total_items": total_items,
        "total_pages": total_pages,
    }
</code></pre>
<p>在这个示例中，我们定义了两个查询参数<code>page</code>和<code>page_size</code>，并通过计算<code>start</code>和<code>end</code><br>
来获取当前页的数据。我们还计算了总页数<code>total_pages</code>，并将其包含在响应中。</p>
<h3 id="3-分页参数的最佳实践"><strong>3. 分页参数的最佳实践</strong></h3>
<h4 id="31-参数验证"><strong>3.1 参数验证</strong></h4>
<p>为了确保分页参数的有效性，我们需要对<code>page</code>和<code>page_size</code>进行验证。FastAPI提供了<code>Query</code>参数验证功能，可以轻松实现这一点。</p>
<pre><code class="language-python">from fastapi import Query


@app.get("/items/")
async def read_items(page: int = Query(1, gt=0), page_size: int = Query(10, gt=0, le=100)):
    # 分页逻辑
    pass
</code></pre>
<p>在这个示例中，我们使用<code>gt</code>（大于）和<code>le</code>（小于等于）来限制<code>page</code>和<code>page_size</code>的取值范围。如果用户提供的参数不符合要求，FastAPI会自动返回422<br>
Validation Error。</p>
<h4 id="32-默认值设置"><strong>3.2 默认值设置</strong></h4>
<p>为分页参数设置合理的默认值可以提升用户体验。例如，将<code>page_size</code>的默认值设置为10或20，可以避免用户一次性加载过多数据。</p>
<pre><code class="language-python">@app.get("/items/")
async def read_items(page: int = Query(1, gt=0), page_size: int = Query(10, gt=0, le=100)):
    # 分页逻辑
    pass
</code></pre>
<h4 id="33-总页数计算"><strong>3.3 总页数计算</strong></h4>
<p>总页数的计算公式为：</p>
<pre><code class="language-python">total_pages = (total_items + page_size - 1) // page_size
</code></pre>
<p>这个公式确保了总页数的准确性，即使<code>total_items</code>不能被<code>page_size</code>整除。</p>
<h3 id="4-数据库查询中的分页"><strong>4. 数据库查询中的分页</strong></h3>
<p>在实际应用中，分页通常与数据库查询结合使用。以下是一个使用SQLAlchemy进行分页查询的示例。</p>
<pre><code class="language-python">from sqlalchemy.orm import Session
from fastapi import Depends
from .database import SessionLocal


def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()


@app.get("/items/")
async def read_items(page: int = Query(1, gt=0), page_size: int = Query(10, gt=0, le=100),
                     db: Session = Depends(get_db)):
    start = (page - 1) * page_size
    items = db.query(Item).offset(start).limit(page_size).all()
    total_items = db.query(Item).count()
    total_pages = (total_items + page_size - 1) // page_size
    return {
        "items": items,
        "page": page,
        "page_size": page_size,
        "total_items": total_items,
        "total_pages": total_pages,
    }
</code></pre>
<p>在这个示例中，我们使用<code>offset</code>和<code>limit</code>来实现分页查询，并通过<code>count</code>方法获取总数据条数。</p>
<h3 id="5-分页的安全性"><strong>5. 分页的安全性</strong></h3>
<h4 id="51-避免sql注入"><strong>5.1 避免SQL注入</strong></h4>
<p>在使用原始SQL查询时，必须注意避免SQL注入攻击。SQLAlchemy等ORM框架已经内置了防止SQL注入的机制，但在使用原始SQL时，仍需谨慎。</p>
<pre><code class="language-python">from sqlalchemy.sql import text


@app.get("/items/")
async def read_items(page: int = Query(1, gt=0), page_size: int = Query(10, gt=0, le=100),
                     db: Session = Depends(get_db)):
    start = (page - 1) * page_size
    query = text("SELECT * FROM items LIMIT :limit OFFSET :offset")
    items = db.execute(query, {"limit": page_size, "offset": start}).fetchall()
    total_items = db.execute(text("SELECT COUNT(*) FROM items")).scalar()
    total_pages = (total_items + page_size - 1) // page_size
    return {
        "items": items,
        "page": page,
        "page_size": page_size,
        "total_items": total_items,
        "total_pages": total_pages,
    }
</code></pre>
<p>在这个示例中，我们使用参数化查询来避免SQL注入。</p>
<h4 id="52-数据隐私"><strong>5.2 数据隐私</strong></h4>
<p>在处理敏感数据时，确保分页查询不会泄露隐私信息。例如，避免在分页查询中返回未授权的数据。</p>
<h3 id="6-性能优化"><strong>6. 性能优化</strong></h3>
<h4 id="61-索引优化"><strong>6.1 索引优化</strong></h4>
<p>在数据库查询中，为分页字段（如<code>id</code>、<code>created_at</code>等）创建索引可以显著提升查询性能。</p>
<pre><code class="language-sql">CREATE INDEX idx_items_created_at ON items (created_at);
</code></pre>
<h4 id="62-缓存"><strong>6.2 缓存</strong></h4>
<p>对于频繁访问的分页数据，可以使用缓存机制（如Redis）来减少数据库查询次数。</p>
<pre><code class="language-python">from fastapi_cache import FastAPICache
from fastapi_cache.decorator import cache


@app.get("/items/")
@cache(expire=60)
async def read_items(page: int = Query(1, gt=0), page_size: int = Query(10, gt=0, le=100)):
    # 分页逻辑
    pass
</code></pre>
<p>在这个示例中，我们使用<code>fastapi-cache</code>库来缓存分页查询结果，缓存有效期为60秒。</p>
<h3 id="7-常见错误及解决方案"><strong>7. 常见错误及解决方案</strong></h3>
<h4 id="71-422-validation-error"><strong>7.1 422 Validation Error</strong></h4>
<p>当分页参数不符合验证规则时，FastAPI会返回422 Validation Error。解决方案是确保分页参数的取值范围正确，并在API文档中明确说明。</p>
<pre><code class="language-python">@app.get("/items/")
async def read_items(page: int = Query(1, gt=0), page_size: int = Query(10, gt=0, le=100)):
    # 分页逻辑
    pass
</code></pre>
<h4 id="72-500-internal-server-error"><strong>7.2 500 Internal Server Error</strong></h4>
<p>当数据库查询失败或分页逻辑出现错误时，可能会返回500 Internal Server Error。解决方案是捕获异常并返回友好的错误信息。</p>
<pre><code class="language-python">from fastapi import HTTPException


@app.get("/items/")
async def read_items(page: int = Query(1, gt=0), page_size: int = Query(10, gt=0, le=100),
                     db: Session = Depends(get_db)):
    try:
        start = (page - 1) * page_size
        items = db.query(Item).offset(start).limit(page_size).all()
        total_items = db.query(Item).count()
        total_pages = (total_items + page_size - 1) // page_size
        return {
            "items": items,
            "page": page,
            "page_size": page_size,
            "total_items": total_items,
            "total_pages": total_pages,
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
</code></pre>
<p>在这个示例中，我们捕获了所有异常，并返回500 Internal Server Error。</p>
<h3 id="8-课后quiz"><strong>8. 课后Quiz</strong></h3>
<ol>
<li>
<p><strong>如何避免SQL注入攻击？</strong></p>
<ul>
<li>使用参数化查询。</li>
<li>避免拼接SQL语句。</li>
<li>使用ORM框架。</li>
</ul>
</li>
<li>
<p><strong>如何优化分页查询的性能？</strong></p>
<ul>
<li>为分页字段创建索引。</li>
<li>使用缓存机制。</li>
<li>减少查询返回的字段数量。</li>
</ul>
</li>
<li>
<p><strong>如何处理分页参数无效的情况？</strong></p>
<ul>
<li>使用FastAPI的<code>Query</code>参数验证功能。</li>
<li>返回422 Validation Error。</li>
<li>在API文档中明确说明参数要求。</li>
</ul>
</li>
</ol>
<hr>
<p><strong>常见报错解决方案：</strong></p>
<ul>
<li><strong>422 Validation Error</strong>：检查分页参数的取值范围，确保符合验证规则。</li>
<li><strong>500 Internal Server Error</strong>：捕获异常并返回友好的错误信息，检查数据库查询逻辑。</li>
<li><strong>404 Not Found</strong>：确保分页参数不会导致查询结果为空，处理边界情况。</li>
</ul>
<p>余下文章内容请点击跳转至 个人博客页面 或者 扫码关注或者微信搜一搜：<code>编程智域 前端至全栈交流与成长</code>，阅读完整的文章：<a href="https://blog.cmdragon.cn/posts/6a3cba67a72d/" target="_blank" rel="noopener nofollow">FastAPI 核心机制：分页参数的实现与最佳实践 | cmdragon's Blog</a></p>
<h2 id="往期文章归档">往期文章归档：</h2>
<ul>
<li><a href="https://blog.cmdragon.cn/posts/615a966b68d9/" target="_blank" rel="noopener nofollow">FastAPI 错误处理与自定义错误消息完全指南：构建健壮的 API 应用 🛠️ | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/c08aca091616/" target="_blank" rel="noopener nofollow">FastAPI 自定义参数验证器完全指南：从基础到高级实战 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/67c76d0b9297/" target="_blank" rel="noopener nofollow">FastAPI 参数别名与自动文档生成完全指南：从基础到高级实战 🚀 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/143aef8a44f0/" target="_blank" rel="noopener nofollow">FastAPI Cookie 和 Header 参数完全指南：从基础到高级实战 🚀 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/378acc9ed556/" target="_blank" rel="noopener nofollow">FastAPI 表单参数与文件上传完全指南：从基础到高级实战 🚀 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/17872b9724be/" target="_blank" rel="noopener nofollow">FastAPI 请求体参数与 Pydantic 模型完全指南：从基础到嵌套模型实战 🚀 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/361d6ce26859/" target="_blank" rel="noopener nofollow">FastAPI 查询参数完全指南：从基础到高级用法 🚀 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/14c3a0c58061/" target="_blank" rel="noopener nofollow">FastAPI 路径参数完全指南：从基础到高级校验实战 🚀 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/11c340ef08d4/" target="_blank" rel="noopener nofollow">FastAPI路由专家课：微服务架构下的路由艺术与工程实践 🌐 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/8737e29cfe7a/" target="_blank" rel="noopener nofollow">FastAPI路由与请求处理进阶指南：解锁企业级API开发黑科技 🔥 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/7fa6ec101733/" target="_blank" rel="noopener nofollow">FastAPI路由与请求处理全解：手把手打造用户管理系统 🔌 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/4e5a7adbcde4/" target="_blank" rel="noopener nofollow">FastAPI极速入门：15分钟搭建你的首个智能API（附自动文档生成）🚀 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/2d417c3e7cac/" target="_blank" rel="noopener nofollow">HTTP协议与RESTful API实战手册（终章）：构建企业级API的九大秘籍 🔐 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/074086de21be/" target="_blank" rel="noopener nofollow">HTTP协议与RESTful API实战手册（二）：用披萨店故事说透API设计奥秘 🍕 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/e5078a4d6fad/" target="_blank" rel="noopener nofollow">从零构建你的第一个RESTful API：HTTP协议与API设计超图解指南 🌐 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/f49972bd19a6/" target="_blank" rel="noopener nofollow">Python异步编程进阶指南：破解高并发系统的七重封印 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/b279dbab11eb/" target="_blank" rel="noopener nofollow">Python异步编程终极指南：用协程与事件循环重构你的高并发系统 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/8f8db75c315d/" target="_blank" rel="noopener nofollow">Python类型提示完全指南：用类型安全重构你的代码，提升10倍开发效率 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/d0b1b6a9f135/" target="_blank" rel="noopener nofollow">三大平台云数据库生态服务对决 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/91aae808d87e/" target="_blank" rel="noopener nofollow">分布式数据库解析 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/5fcc2532e318/" target="_blank" rel="noopener nofollow">深入解析NoSQL数据库：从文档存储到图数据库的全场景实践 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/c971b2302602/" target="_blank" rel="noopener nofollow">数据库审计与智能监控：从日志分析到异常检测 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/735fa4090f0b/" target="_blank" rel="noopener nofollow">数据库加密全解析：从传输到存储的安全实践 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/5c01d5c0a63b/" target="_blank" rel="noopener nofollow">数据库安全实战：访问控制与行级权限管理 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/7f71048cd61c/" target="_blank" rel="noopener nofollow">数据库扩展之道：分区、分片与大表优化实战 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/8e5e3ffe33dd/" target="_blank" rel="noopener nofollow">查询优化：提升数据库性能的实用技巧 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/3c6ba213efe2/" target="_blank" rel="noopener nofollow">性能优化与调优：全面解析数据库索引 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/84376403bdf0/" target="_blank" rel="noopener nofollow">存储过程与触发器：提高数据库性能与安全性的利器 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/f357e8ef59f1/" target="_blank" rel="noopener nofollow">数据操作与事务：确保数据一致性的关键 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/87c82dea0024/" target="_blank" rel="noopener nofollow">深入掌握 SQL 深度应用：复杂查询的艺术与技巧 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/3f3203c3e56b/" target="_blank" rel="noopener nofollow">彻底理解数据库设计原则：生命周期、约束与反范式的应用 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/91e1bf521e8c/" target="_blank" rel="noopener nofollow">深入剖析实体-关系模型（ER 图）：理论与实践全解析 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/05264e28f9f8/" target="_blank" rel="noopener nofollow">数据库范式详解：从第一范式到第五范式 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/a58cca68755e/" target="_blank" rel="noopener nofollow">PostgreSQL：数据库迁移与版本控制 | cmdragon's Blog</a></li>
<li><a href="https://blog.cmdragon.cn/posts/d5b4e82e959a/" target="_blank" rel="noopener nofollow">Node.js 与 PostgreSQL 集成：深入 pg 模块的应用与实践 | cmdragon's Blog</a></li>
<li></li>
</ul>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.02199315993287037" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-13 01:50">2025-03-13 01:49</span>&nbsp;
<a href="https://www.cnblogs.com/Amd794">Amd794</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18769003" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18769003);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18769003', targetLink: 'https://www.cnblogs.com/Amd794/p/18769003', title: 'FastAPI 核心机制：分页参数的实现与最佳实践' })">举报</a>
</div>
        