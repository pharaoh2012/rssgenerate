
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/TheMagicalRainbowSea/p/18744478" title="发布于 2025-03-01 09:01">
    <span role="heading" aria-level="2">5. Nginx 负载均衡配置案例(附有详细截图说明++)</span>
    

</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="5-nginx-负载均衡配置案例附有详细截图说明">5. Nginx 负载均衡配置案例(附有详细截图说明++)</h1>
<p>@</p><div class="toc"><div class="toc-container-header">目录</div><ul><li><a href="#5-nginx-负载均衡配置案例附有详细截图说明" rel="noopener nofollow">5. Nginx 负载均衡配置案例(附有详细截图说明++)</a></li><li><a href="#1-nginx-负载均衡-配置实例" rel="noopener nofollow">1. Nginx 负载均衡 配置实例</a></li><li><a href="#3-注意事项和避免的坑" rel="noopener nofollow">3. 注意事项和避免的坑</a></li><li><a href="#4-文档-nginx-的-upstream-配置技巧" rel="noopener nofollow">4. 文档: Nginx 的 upstream 配置技巧</a></li><li><a href="#5-最后" rel="noopener nofollow">5. 最后：</a></li></ul></div><p></p>
<hr>
<h1 id="1-nginx-负载均衡-配置实例">1. Nginx 负载均衡 配置实例</h1>
<p>需求说明/图解</p>
<p><strong>windows 浏览器输入: <a href="http://www.rainbowseacrm.com/search/look.html" target="_blank" rel="noopener nofollow">http://www.rainbowseacrm.com/search/look.html</a></strong></p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202503/3084824-20250301085555092-1614813176.png" alt="在这里插入图片描述" loading="lazy"></p>
<p><strong>负载均衡配置-思路分析/图解</strong></p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202503/3084824-20250301085555168-234165379.png" alt="在这里插入图片描述" loading="lazy"></p>
<p><strong>负载均衡配置规则:</strong></p>
<ul>
<li>
<p>负载均衡就是将负载分摊到不同的服务单元，既保证服务的可用性，又保证响应足够快。</p>
</li>
<li>
<p>Linux 下有：<code>Nginx、LVS、Haproxy  </code> 等等服务可以提供负载均衡服务，Nginx 提供了如下几种分配方式(策略)：</p>
<ol>
<li>轮询<strong>(默认)</strong> ：每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器  down  掉，能自动剔 除</li>
<li>weight(根据权重的大小，比例进行负载均衡)</li>
</ol>
<p>weight  代表权,重默认为  1,权重越高被分配的客户端越多。</p>
<p>指定轮询几率，weight  和访问比率成正比，用于后端服务器性能不均的情况。  例如</p>
<pre><code class="language-properties">upstream rsservers{
server 192.168.12.134:8080 weight=1;
server 192.168.12.134:8081 weight=2;
}
</code></pre>
<ol start="3">
<li>ip_hash : 每个请求按访问 IP 的 hash 结果分配，这样每个访客固定访问一个后端服务器，可以解决 session 的问题。例如：</li>
</ol>
<pre><code class="language-properties">upstream rsservers{
ip_hash;
server 192.168.12.134:8081;
server 192.168.12.134:8080;
}
</code></pre>
<ol start="4">
<li>fair(第三方)：按后端服务器的响应时间来分配请求，响应时间短的优先分配</li>
</ol>
</li>
</ul>
<pre><code class="language-properties">upstream rsservers{
server 192.168.12.134:8080;
server 192.168.12.134:8081;
fair;
}
</code></pre>
<p>​</p>
<pre><code> # 2. Nginx 负载均衡实现具体步骤如下
</code></pre>
<ol>
<li><strong>修改  C:\Windows\System32\drivers\etc\hosts  配置虚拟主机名，配置相关域名的映射</strong></li>
</ol>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202503/3084824-20250301085555183-942598314.png" alt="在这里插入图片描述" loading="lazy"></p>
<pre><code class="language-properties"># Copyright (c) 1993-2009 Microsoft Corp.
#
# This is a sample HOSTS file used by Microsoft TCP/IP for Windows.
#
# This file contains the mappings of IP addresses to host names. Each
# entry should be kept on an individual line. The IP address should
# be placed in the first column followed by the corresponding host name.
# The IP address and the host name should be separated by at least one
# space.
#
# Additionally, comments (such as these) may be inserted on individual
# lines or following the machine name denoted by a '#' symbol.
#
# For example:
#
#      102.54.94.97     rhino.acme.com          # source server
#       38.25.63.10     x.acme.com              # x client host

# localhost name resolution is handled within DNS itself.
#	127.0.0.1       localhost
#	::1             localhost
 
127.0.0.1 account.wondershare.com
# 配置 eureka 主机 和 ip 的映射
127.0.0.1 eureka9001.com
127.0.0.1 eureka9002.com
192.168.76.157 www.rainbowsea.com
192.168.76.159 www.rainbowseamall.com
192.168.76.160 www.rainbowseacrm.com

</code></pre>
<ol start="2">
<li><strong>修改 <code>安装目录conf\nginx.conf</code> 配置，反向代理路径映射</strong></li>
</ol>
<p>这里我的 nginx.conf  路径是在 <code>/usr/local/nginx/conf</code> 路径下。<br>
<img src="https://img2024.cnblogs.com/blog/3084824/202503/3084824-20250301085555192-649534927.png" alt="在这里插入图片描述" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202503/3084824-20250301085555171-970325538.png" alt="在这里插入图片描述" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202503/3084824-20250301085555101-2077058664.png" alt="在这里插入图片描述" loading="lazy"></p>
<pre><code class="language-properties"> upstream rsservers {
 36         server 192.168.76.160:8080;
 37         server 192.168.76.160:8081;
 38 
 39     }
 40 
 41     server {
 42         listen       80;
 43         server_name 192.168.76.160;
 44        #server_name  localhost;
 45         #charset koi8-r;
 46 
 47         #access_log  logs/host.access.log  main;
 48 
 49         location / {
 50             root   html;
 51             proxy_pass http://rsservers;
 52             index  index.html index.htm;
 53         }
 54 

</code></pre>
<p>查看 nginx.conf 是否存在配置错误：</p>
<pre><code class="language-sh">[root@localhost nginx]# ./sbin/nginx -t
[root@localhost nginx]# /usr/local/nginx/sbin/nginx -t

</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202503/3084824-20250301085555110-1415431298.png" alt="在这里插入图片描述" loading="lazy"></p>
<p>重启 Nginx ，加载我们修改后的配置：</p>
<pre><code class="language-sh">[root@localhost nginx]# ./sbin/nginx -s reload
</code></pre>
<pre><code class="language-sh">[root@localhost nginx]# ps -aux | grep nginx
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202503/3084824-20250301085555164-1982305427.png" alt="在这里插入图片描述" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202503/3084824-20250301085555164-458787947.png" alt="在这里插入图片描述" loading="lazy"></p>
<ol start="3">
<li><strong>在 Linux 的 Tomcat8080  创建  webapps\search\look.html</strong></li>
</ol>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202503/3084824-20250301085555164-759313531.png" alt="在这里插入图片描述" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202503/3084824-20250301085555151-1844990752.png" alt="在这里插入图片描述" loading="lazy"></p>
<p>这里我先进入到  Tomcat 的 webapps 目录下，创建  look.html 文件，进行一个访问映射。</p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202503/3084824-20250301085555120-1323323548.png" alt="在这里插入图片描述" loading="lazy"></p>
<pre><code class="language-html">&lt;h1&gt;tomcat 8080 search.... &lt;/h1&gt;
</code></pre>
<ol start="4">
<li><strong>在 Linux 下重新安装一份 Tomcat, 并将端口修改成 8081</strong></li>
</ol>
<pre><code class="language-sh">[root@localhost opt]# cp -r ./tomcat/ ./tomcat8081
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202503/3084824-20250301085555211-949613631.png" alt="在这里插入图片描述" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202503/3084824-20250301085555194-1833379092.png" alt="在这里插入图片描述" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202503/3084824-20250301085555200-933932313.png" alt="在这里插入图片描述" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202503/3084824-20250301085555023-1947076186.png" alt="在这里插入图片描述" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202503/3084824-20250301085555170-261276546.png" alt="在这里插入图片描述" loading="lazy"></p>
<blockquote>
<p>修改 tomcat 的  conf\server.xml ,  注意要修改如下位置，否则该 Tomcat 是不能正常工作。</p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202503/3084824-20250301085555205-650571437.png" alt="在这里插入图片描述" loading="lazy"></p>
</blockquote>
<blockquote>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202503/3084824-20250301085555069-1904031912.png" alt="在这里插入图片描述" loading="lazy"></p>
</blockquote>
<blockquote>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202503/3084824-20250301085555158-514718950.png" alt="在这里插入图片描述" loading="lazy"></p>
</blockquote>
<blockquote>
<p>细节说明：不同版本的 tomcat 修改的端口还不一样,  小伙伴们灵活处理即可。</p>
</blockquote>
<ol start="4">
<li><strong>在 Linux 的 Tomcat8081  创建  webapps\search\look.html</strong></li>
</ol>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202503/3084824-20250301085555196-220840057.png" alt="在这里插入图片描述" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202503/3084824-20250301085555007-1594969650.png" alt="在这里插入图片描述" loading="lazy"></p>
<pre><code class="language-html">&lt;h1&gt;tomcat 8081 search.... &lt;/h1&gt;
</code></pre>
<ol start="5">
<li><strong>linux  防火墙打开  80 端口，  保证外网可以访问</strong></li>
</ol>
<pre><code class="language-sh">[root@localhost product]# firewall-cmd --add-port=80/tcp --permanent # 防火墙开放 10000 端口
</code></pre>
<pre><code class="language-sh">[root@localhost product]# firewall-cmd --reload # 重启防火墙
</code></pre>
<pre><code class="language-sh">[root@localhost product]# firewall-cmd --list-all # 查看防火墙信息
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202503/3084824-20250301085555223-472378079.png" alt="在这里插入图片描述" loading="lazy"></p>
<ol start="6">
<li><strong>启动 Linux 下两个 Tomcat</strong></li>
</ol>
<pre><code class="language-sh">[root@localhost bin]# ./startup.sh
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202503/3084824-20250301085555176-370712234.png" alt="在这里插入图片描述" loading="lazy"></p>
<pre><code class="language-sh">[root@localhost bin]# netstat -an | more
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202503/3084824-20250301085555168-1906197205.png" alt="在这里插入图片描述" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202503/3084824-20250301085555206-631567027.png" alt="在这里插入图片描述" loading="lazy"></p>
<p>打开 Linux 当中的浏览器： 访问</p>
<ul>
<li><a href="http://localhost:8080/" target="_blank" rel="noopener nofollow">http://localhost:8080/</a></li>
<li><a href="http://localhost:8081/" target="_blank" rel="noopener nofollow">http://localhost:8081/</a></li>
</ul>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202503/3084824-20250301085555086-414828606.png" alt="在这里插入图片描述" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202503/3084824-20250301085555221-854066419.png" alt="在这里插入图片描述" loading="lazy"></p>
<blockquote>
<p>查看启动的端口,  确保有 8080  和  8081  端口在监听(提示:  如果 tomcat 没有监听 对应端口,  说明启动失败了,  可以尝试先执行  shutdown.sh  再执行  startup.sh  解决)</p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202503/3084824-20250301085555047-907477183.png" alt="在这里插入图片描述" loading="lazy"></p>
</blockquote>
<ol start="7">
<li><strong>测试是否可以在 Linux 下可以正常访问到两个页面</strong></li>
</ol>
<ul>
<li>Tomcat 8080 访问/search/look.html 成功 ；<a href="http://localhost:8080/search/look.html" target="_blank" rel="noopener nofollow">http://localhost:8080/search/look.html</a></li>
</ul>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202503/3084824-20250301085555205-795828463.png" alt="在这里插入图片描述" loading="lazy"></p>
<ul>
<li>Tomcat 8081 访问/search/look.html 成功 ；<a href="http://localhost:8081/search/look.html" target="_blank" rel="noopener nofollow">http://localhost:8081/search/look.html</a></li>
</ul>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202503/3084824-20250301085555168-259778638.png" alt="在这里插入图片描述" loading="lazy"></p>
<ol start="8">
<li><strong>启动  或者  重新加载  Nginx</strong></li>
</ol>
<pre><code class="language-sh">[root@localhost nginx]# ./sbin/nginx
</code></pre>
<pre><code class="language-sh">[root@localhost nginx]# ps -aux | grep nginx
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202503/3084824-20250301085555143-1963715323.png" alt="在这里插入图片描述" loading="lazy"></p>
<ol start="9">
<li><strong>windows 浏览器输入(保证浏览器不是无痕上网): <a href="http://www.rainbowseacrm.com/search/look.html" target="_blank" rel="noopener nofollow">http://www.rainbowseacrm.com/search/look.html</a></strong></li>
</ol>
<p><a href="http://www.rainbowseacrm.com/search/look.html" target="_blank" rel="noopener nofollow">http://www.rainbowseacrm.com/search/look.html</a></p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202503/3084824-20250301085555222-1988899856.png" alt="在这里插入图片描述" loading="lazy"></p>
<h1 id="3-注意事项和避免的坑">3. 注意事项和避免的坑</h1>
<ol>
<li>nginx.conf 的  upstream 不能带下划线,  否则会失败,  但是语法检测不到</li>
</ol>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202503/3084824-20250301085555170-1573201260.png" alt="在这里插入图片描述" loading="lazy"></p>
<p>带下划线，报错信息，如下：<br>
<img src="https://img2024.cnblogs.com/blog/3084824/202503/3084824-20250301085555170-1878548126.png" alt="在这里插入图片描述" loading="lazy"></p>
<ol start="2">
<li>
<p>如果你的浏览器是无痕上网,  负载均衡可能失效,  因为 Nginx 无法采集到相关信息,  就遇到这个情况，  改用其它浏览器即可(比如 chrome)</p>
</li>
<li>
<p>如果某 tomcat 没有监听对应端口说明启动失败了，可以尝试先执行，shutdown.sh再执行 startup.sh 解决</p>
</li>
</ol>
<h1 id="4-文档-nginx-的-upstream-配置技巧">4. 文档: Nginx 的 upstream 配置技巧</h1>
<p>基本介绍：</p>
<p>Nginx 是一个反向代理软件，大部分的网站都采用 Nginx 作为网站/平台的 服务器软件。Nginx 除了可以直接作为 web 服务器使用外，更多的情况是 通过反向代理将请求转发给上游服务器。</p>
<p>配置上游服务器可以使用 upstream 进行设置，通过 upstream 可以实现服 务的负载均衡规则，可以提高服务器的高可用性。</p>
<p>地址：<a href="https://zhuanlan.zhihu.com/p/409693332" target="_blank" rel="noopener nofollow">https://zhuanlan.zhihu.com/p/409693332</a></p>
<ul>
<li>如果停掉 1 个 Tomcat,  会怎样?</li>
<li>如果停掉 1 个 Tomcat,  然后又恢复，会怎样?</li>
<li>如何给不同的服务，分配权重 weight</li>
</ul>
<h1 id="5-最后">5. 最后：</h1>
<blockquote>
<p>“在这个最后的篇章中，我要表达我对每一位读者的感激之情。你们的关注和回复是我创作的动力源泉，我从你们身上吸取了无尽的灵感与勇气。我会将你们的鼓励留在心底，继续在其他的领域奋斗。感谢你们，我们总会在某个时刻再次相遇。”</p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202503/3084824-20250301085555233-729031314.gif" alt="在这里插入图片描述" loading="lazy"></p>
</blockquote>

</div>
<div class="clear"></div>

		</div>
		<div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.6357557929826388" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-01 09:01">2025-03-01 09:01</span>&nbsp;
<a href="https://www.cnblogs.com/TheMagicalRainbowSea">Rainbow-Sea</a>&nbsp;
阅读(<span id="post_view_count">124</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18744478" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18744478);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18744478', targetLink: 'https://www.cnblogs.com/TheMagicalRainbowSea/p/18744478', title: '5. Nginx 负载均衡配置案例(附有详细截图说明++)' })">举报</a>
</div>
	