
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/qq21497936/p/18890352" title="发布于 2025-05-22 10:41">
    <span role="heading" aria-level="2">GStreamer开发笔记（四）：ubuntu搭建GStreamer基础开发环境以及基础Demo</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<div class="cl-preview-section">
<h1>前言</h1>
</div>
<div class="cl-preview-section">
<p>  本篇开始gstreamer的编程学习，先搭建基础的环境，跑通一个基础的Demo对GStreamer编程有个初步的了解。</p>
</div>
<div class="cl-preview-section">&nbsp;</div>
<div class="cl-preview-section">
<h1><a id="Demo_5"></a>Demo</h1>
</div>
<div class="cl-preview-section">
<p>  <img src="https://img2024.cnblogs.com/blog/1971530/202505/1971530-20250522104044210-1655606993.png" alt="在这里插入图片描述"></p>
</div>
<div class="cl-preview-section">
<p>  <img src="https://img2024.cnblogs.com/blog/1971530/202505/1971530-20250522104044352-306516838.png" alt="在这里插入图片描述"></p>
</div>
<div class="cl-preview-section">&nbsp;</div>
<div class="cl-preview-section">
<h1><a id="GStreamer_13"></a>GStreamer</h1>
</div>
<div class="cl-preview-section">
<p>  GStreamer是一个灵活、快速、多平台的多媒体框架，此框架非常强大和通用，用于创建流媒体应用程序。GStreamer框架的许多优点来自其模块化，GStreamer可以无缝地整合新的插件模块。但是，由于模块化和强大的功能往往以更高的复杂性为代价，编写新的应用程序并不总是那么容易。</p>
</div>
<div class="cl-preview-section">
<h2><a id="_15"></a>结构</h2>
</div>
<div class="cl-preview-section">
<p>  教程分为几个部分，围绕一个共同的主题：</p>
</div>
<div class="cl-preview-section">
<ul>
<li>基础教程：描述理解GStreamer中其余教程所需的一般主题。</li>
<li>播放教程：解释使用GStreamer制作媒体播放应用程序所需知道的一切。</li>
<li>Android教程：涉及您需要知道的几个Android特定主题的教程。</li>
<li>iOS教程：涉及您需要知道的几个iOS特定主题的教程。<br>  基础教程——理解其余教程所需的一般主题</li>


</ul>


</div>
<div class="cl-preview-section">&nbsp;</div>
<div class="cl-preview-section">
<h1><a id="_25"></a>搭建基础开发环境</h1>


</div>
<div class="cl-preview-section">
<h2><a id="gstreamer10_26"></a>步骤一：安装gstreamer1.0环境</h2>


</div>
<div class="cl-preview-section">
<pre><code class="prism language-cpp">sudo apt<span class="token operator">-get update
sudo apt<span class="token operator">-get install libgstreamer1<span class="token punctuation">.<span class="token number">0<span class="token operator">-dev libgstreamer<span class="token operator">-plugins<span class="token operator">-base1<span class="token punctuation">.<span class="token number">0<span class="token operator">-dev libgstreamer<span class="token operator">-plugins<span class="token operator">-bad1<span class="token punctuation">.<span class="token number">0<span class="token operator">-dev gstreamer1<span class="token punctuation">.<span class="token number">0<span class="token operator">-plugins<span class="token operator">-base gstreamer1<span class="token punctuation">.<span class="token number">0<span class="token operator">-plugins<span class="token operator">-good gstreamer1<span class="token punctuation">.<span class="token number">0<span class="token operator">-plugins<span class="token operator">-bad gstreamer1<span class="token punctuation">.<span class="token number">0<span class="token operator">-plugins<span class="token operator">-ugly gstreamer1<span class="token punctuation">.<span class="token number">0<span class="token operator">-libav gstreamer1<span class="token punctuation">.<span class="token number">0<span class="token operator">-doc gstreamer1<span class="token punctuation">.<span class="token number">0<span class="token operator">-tools gstreamer1<span class="token punctuation">.<span class="token number">0<span class="token operator">-x gstreamer1<span class="token punctuation">.<span class="token number">0<span class="token operator">-alsa gstreamer1<span class="token punctuation">.<span class="token number">0<span class="token operator">-gl gstreamer1<span class="token punctuation">.<span class="token number">0<span class="token operator">-gtk3 gstreamer1<span class="token punctuation">.<span class="token number">0<span class="token operator">-qt5 gstreamer1<span class="token punctuation">.<span class="token number">0<span class="token operator">-pulseaudio
sudo apt<span class="token operator">-get install libglib2<span class="token punctuation">.<span class="token number">0<span class="token operator">-<span class="token number">0
</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
<div class="cl-preview-section">
<h2><a id="C_32"></a>步骤二：创建C工程</h2>
</div>
<div class="cl-preview-section">
<p>  使用QtCreator新建空的C工程：<br>  <img src="https://img2024.cnblogs.com/blog/1971530/202505/1971530-20250522104044055-610787967.png" alt="在这里插入图片描述"></p>


</div>
<div class="cl-preview-section">
<h2><a id="gstreamer_36"></a>步骤三：添加gstreamer开发环境</h2>


</div>
<div class="cl-preview-section">
<p>  然后查找gst.h头文件：</p>


</div>
<div class="cl-preview-section">
<pre><code class="prism language-cpp">sudo find <span class="token operator">/ <span class="token operator">-name <span class="token string">"gst.h"
</span></span></span></code></pre>
</div>
<div class="cl-preview-section">
<p>  <img src="https://img2024.cnblogs.com/blog/1971530/202505/1971530-20250522104044008-281134817.png" alt="在这里插入图片描述"></p>
</div>
<div class="cl-preview-section">
<p>  查找库：</p>
</div>
<div class="cl-preview-section">
<pre><code class="prism language-cpp">sudo find <span class="token operator">/ <span class="token operator">-name "gstreamer<span class="token operator">-<span class="token number">1.0<span class="token operator">*”
</span></span></span></span></span></code></pre>
</div>
<div class="cl-preview-section">
<p>  <img src="https://img2024.cnblogs.com/blog/1971530/202505/1971530-20250522104044108-1192374227.png" alt="在这里插入图片描述"></p>
</div>
<div class="cl-preview-section">
<p>  查找依赖的头文件：</p>
</div>
<div class="cl-preview-section">
<pre><code class="prism language-cpp">sudo find <span class="token operator">/ <span class="token operator">-name <span class="token string">"glib.h"
</span></span></span></code></pre>
</div>
<div class="cl-preview-section">
<p>  <img src="https://img2024.cnblogs.com/blog/1971530/202505/1971530-20250522104044124-2037866011.png" alt="在这里插入图片描述"></p>
</div>
<div class="cl-preview-section">
<pre><code class="prism language-cpp">sudo find <span class="token operator">/ <span class="token operator">-name “glibconfig”
</span></span></code></pre>
</div>
<div class="cl-preview-section">
<p>  <img src="https://img2024.cnblogs.com/blog/1971530/202505/1971530-20250522104044102-1641614718.png" alt="在这里插入图片描述"></p>
</div>
<div class="cl-preview-section">
<p>  将头文件路径和库添加进pri：<br>  <img src="https://img2024.cnblogs.com/blog/1971530/202505/1971530-20250522104044139-318156963.png" alt="在这里插入图片描述"></p>


</div>
<div class="cl-preview-section">
<pre><code class="prism language-cpp"><span class="token macro property"><span class="token directive-hash"># <span class="token directive keyword">gstreamer<span class="token expression">头文件和库文件
INCLUDEPATH <span class="token operator">+= <span class="token operator">/usr<span class="token operator">/include<span class="token operator">/gstreamer<span class="token operator">-<span class="token number">1.0
LIBS <span class="token operator">+= <span class="token operator">-lgstreamer<span class="token operator">-<span class="token number">1.0
<span class="token macro property"><span class="token directive-hash">#<span class="token expression">LIBS <span class="token operator">+= <span class="token operator">-lgobject<span class="token operator">-<span class="token number">2.0 <span class="token operator">-lgstreamer<span class="token operator">-<span class="token number">1.0 <span class="token operator">-lgstvideo<span class="token operator">-<span class="token number">1.0

<span class="token macro property"><span class="token directive-hash"># <span class="token directive keyword">glibc<span class="token expression">头文件和库文件
INCLUDEPATH <span class="token operator">+= <span class="token operator">/usr<span class="token operator">/include<span class="token operator">/glib<span class="token operator">-<span class="token number">2.0
INCLUDEPATH <span class="token operator">+= <span class="token operator">/usr<span class="token operator">/lib<span class="token operator">/x86_64<span class="token operator">-linux<span class="token operator">-gnu<span class="token operator">/glib<span class="token operator">-<span class="token number">2.0<span class="token operator">/include
LIBS <span class="token operator">+= <span class="token operator">-lglib<span class="token operator">-<span class="token number">2.0
</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
<div class="cl-preview-section">&nbsp;</div>
<div class="cl-preview-section">
<h1><a id="GStreamer_77"></a>第一个GStreamer程序</h1>
</div>
<div class="cl-preview-section">
<h2><a id="gst_78"></a>步骤一：初始化gst</h2>
</div>
<div class="cl-preview-section">
<p>  这是每个程序都要做的。<br>  <img src="https://img2024.cnblogs.com/blog/1971530/202505/1971530-20250522104044089-402812078.png" alt="在这里插入图片描述"></p>


</div>
<div class="cl-preview-section">
<h2><a id="_82"></a>步骤二：定义管道</h2>


</div>
<div class="cl-preview-section">
<p>  <img src="https://img2024.cnblogs.com/blog/1971530/202505/1971530-20250522104044056-1910646405.png" alt="在这里插入图片描述"></p>


</div>
<div class="cl-preview-section">
<h2><a id="_85"></a>步骤三：设置管道状态</h2>


</div>
<div class="cl-preview-section">
<p>  <img src="https://img2024.cnblogs.com/blog/1971530/202505/1971530-20250522104044120-1123703815.png" alt="在这里插入图片描述"></p>


</div>
<div class="cl-preview-section">
<h2><a id="bus_88"></a>步骤四：获取管道的总线bus</h2>


</div>
<div class="cl-preview-section">
<p>  <img src="https://img2024.cnblogs.com/blog/1971530/202505/1971530-20250522104044064-1555046485.png" alt="在这里插入图片描述"></p>


</div>
<div class="cl-preview-section">
<h2><a id="bus_91"></a>步骤五：从总线bus中阻塞获取指定的信息</h2>


</div>
<div class="cl-preview-section">
<p>  <img src="https://img2024.cnblogs.com/blog/1971530/202505/1971530-20250522104043989-2070511169.png" alt="在这里插入图片描述"></p>


</div>
<div class="cl-preview-section">
<p>  <img src="https://img2024.cnblogs.com/blog/1971530/202505/1971530-20250522104044162-1643488516.png" alt="在这里插入图片描述"></p>


</div>
<div class="cl-preview-section">
<h2><a id="_96"></a>步骤六：消息处理</h2>


</div>
<div class="cl-preview-section">
<p>  <img src="https://img2024.cnblogs.com/blog/1971530/202505/1971530-20250522104044035-60273692.png" alt="在这里插入图片描述"></p>


</div>
<div class="cl-preview-section">
<h2><a id="_99"></a>步骤七：释放资源</h2>


</div>
<div class="cl-preview-section">
<p>  <img src="https://img2024.cnblogs.com/blog/1971530/202505/1971530-20250522104044518-632413091.png" alt="在这里插入图片描述"></p>


</div>
<div class="cl-preview-section">&nbsp;</div>
<div class="cl-preview-section">
<h1><a id="_105"></a>关键函数</h1>


</div>
<div class="cl-preview-section">
<h2><a id="gst_init_106"></a>gst_init()</h2>


</div>
<div class="cl-preview-section">
<p>  初始化所有内部结构，检查哪些插件可用，执行GStreamer的任何命令行选项。</p>


</div>
<div class="cl-preview-section">
<h2><a id="gst_parse_launch_108"></a>gst_parse_launch()</h2>


</div>
<div class="cl-preview-section">
<p>  在GStreamer中，通过手动组装单个元素来构建管道，但是，当管道足够简单，并且不需要任何高级功能时，可以使用快捷方式：gst_parse_launch()；<br>  此函数接受管道的文本表示并将其转换为实际的管道，这非常方便。事实上，这个函数非常方便，有一个完全围绕它构建的工具，请参阅GStreamer工具，了解gst-launch-1.0和gst-launch-1.0语法。<br>  本篇，我们正在构建一个由一个名为playbin的元素组成的管道。playbin是一个特殊的元素，它既是源又是汇，是一个完整的管道。在内部，它创建并连接了播放媒体所需的所有元素。</p>


</div>
<div class="cl-preview-section">
<h2><a id="gst_element_set_state_112"></a>gst_element_set_state()</h2>


</div>
<div class="cl-preview-section">
<p>  每个GStreamer元素都有一个关联的状态，您或多或少可以将其视为常规DVD播放器中的播放/暂停按钮。现在，只需说，除非将管道设置为播放状态，否则播放将不会开始。<br>  gst_element_set_stat()将管道（我们唯一的元素，记住）设置为播放状态，从而启动播放。</p>


</div>
<div class="cl-preview-section">
<h2><a id="gst_element_get_bus_115"></a>gst_element_get_bus()</h2>


</div>
<div class="cl-preview-section">
<p>  检索管道的总线。</p>


</div>
<div class="cl-preview-section">
<h2><a id="gst_bus_timed_pop_filtered_117"></a>gst_bus_timed_pop_filtered()</h2>


</div>
<div class="cl-preview-section">
<p>  gst_bus_timed_pop_filtered()将阻塞，直到您通过该总线收到指定错误或指定的事件，这些事件预定义了。</p>


</div>
<div class="cl-preview-section">
<h2><a id="gst_message_unrefmsg_119"></a>gst_message_unref(msg);</h2>


</div>
<div class="cl-preview-section">
<p>  清理消息。</p>


</div>
<div class="cl-preview-section">
<h2><a id="gst_object_unref_bus_121"></a>gst_object_unref (bus);</h2>


</div>
<div class="cl-preview-section">
<p>  清理qobject类型，按照生成顺序逆向的来unref释放引用。</p>


</div>
<div class="cl-preview-section">
<h2><a id="gst_element_set_state_pipeline_GST_STATE_NULL_123"></a>gst_element_set_state (pipeline, GST_STATE_NULL);</h2>


</div>
<div class="cl-preview-section">
<p>  设置管道状态为空，资源都会被自动回收。</p>


</div>
<div class="cl-preview-section">
<h2><a id="gst_object_unref_pipeline_125"></a>gst_object_unref (pipeline)</h2>


</div>
<div class="cl-preview-section">
<p>  清理qobject类型，按照生成顺序逆向的来unref释放引用。</p>


</div>
<div class="cl-preview-section">&nbsp;</div>
<div class="cl-preview-section">
<h1><a id="_130"></a>模块化</h1>


</div>
<div class="cl-preview-section">
<p>  <img src="https://img2024.cnblogs.com/blog/1971530/202505/1971530-20250522104044014-252487542.png" alt="在这里插入图片描述"></p>


</div>
<div class="cl-preview-section">
<h2><a id="gstreamerManagerpri_133"></a>gstreamerManager.pri</h2>


</div>
<div class="cl-preview-section">
<pre><code class="prism language-cpp">INCLUDEPATH <span class="token operator">+= $$PWD
DEPENDPATH <span class="token operator">+= $$PWD

HEADERS <span class="token operator">+= \
    $$PWD<span class="token operator">/gstreamerManager<span class="token punctuation">.h

SOURCES <span class="token operator">+= \
    $$PWD<span class="token operator">/gstreamerManager<span class="token punctuation">.c

QMAKE_CXXFLAGS <span class="token operator">+= <span class="token operator">-fpermissive

<span class="token macro property"><span class="token directive-hash"># <span class="token directive keyword">gstreamer<span class="token expression">头文件和库文件
INCLUDEPATH <span class="token operator">+= <span class="token operator">/usr<span class="token operator">/include<span class="token operator">/gstreamer<span class="token operator">-<span class="token number">1.0
LIBS <span class="token operator">+= <span class="token operator">-lgstreamer<span class="token operator">-<span class="token number">1.0
<span class="token macro property"><span class="token directive-hash">#<span class="token expression">LIBS <span class="token operator">+= <span class="token operator">-lgobject<span class="token operator">-<span class="token number">2.0 <span class="token operator">-lgstreamer<span class="token operator">-<span class="token number">1.0 <span class="token operator">-lgstvideo<span class="token operator">-<span class="token number">1.0

<span class="token macro property"><span class="token directive-hash"># <span class="token directive keyword">glibc<span class="token expression">头文件和库文件
INCLUDEPATH <span class="token operator">+= <span class="token operator">/usr<span class="token operator">/include<span class="token operator">/glib<span class="token operator">-<span class="token number">2.0
INCLUDEPATH <span class="token operator">+= <span class="token operator">/usr<span class="token operator">/lib<span class="token operator">/x86_64<span class="token operator">-linux<span class="token operator">-gnu<span class="token operator">/glib<span class="token operator">-<span class="token number">2.0<span class="token operator">/include
LIBS <span class="token operator">+= <span class="token operator">-lglib<span class="token operator">-<span class="token number">2.0
</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
<div class="cl-preview-section">&nbsp;</div>
<div class="cl-preview-section">
<h1><a id="Demo_160"></a>Demo源码</h1>
</div>
<div class="cl-preview-section">
<pre><code class="prism language-cpp"><span class="token macro property"><span class="token directive-hash">#<span class="token directive keyword">include <span class="token string">"gstreamerManager.h"

<span class="token macro property"><span class="token directive-hash">#<span class="token directive keyword">include <span class="token string">&lt;gst/gst.h&gt;

<span class="token macro property"><span class="token directive-hash">#<span class="token directive keyword">define <span class="token macro-name">DEBUG   <span class="token expression"><span class="token function">printf<span class="token punctuation">(<span class="token string">"%s:%d\n"<span class="token expression"><span class="token punctuation">, <span class="token constant">__FILE__<span class="token punctuation">, <span class="token constant">__LINE__<span class="token punctuation">)

<span class="token keyword">void <span class="token function">test001HelloWorldDemo<span class="token punctuation">(<span class="token keyword">int <span class="token operator">*argc<span class="token punctuation">, <span class="token keyword">char <span class="token operator">*<span class="token operator">*argv<span class="token punctuation">[<span class="token punctuation">]<span class="token punctuation">)
<span class="token punctuation">{
    GstElement <span class="token operator">*pipeline<span class="token punctuation">;
    GstBus <span class="token operator">*bus<span class="token punctuation">;
    GstMessage <span class="token operator">*msg<span class="token punctuation">;

    <span class="token comment">// 步骤一：初始化gst
    <span class="token function">gst_init<span class="token punctuation">(argc<span class="token punctuation">, argv<span class="token punctuation">)<span class="token punctuation">;
    <span class="token comment">// 步骤二：定义管道(指定渲染器，否则ubuntu上渲染画面会出错）
<span class="token comment">//    pipeline = gst_parse_launch("playbin uri=https://gstreamer.freedesktop.org/data/media/sintel_trailer-480p.webm", NULL);
    pipeline <span class="token operator">= <span class="token function">gst_parse_launch<span class="token punctuation">(<span class="token string">"playbin uri=https://gstreamer.freedesktop.org/data/media/sintel_trailer-480p.webm video-sink=\"ximagesink\""<span class="token punctuation">, <span class="token constant">NULL<span class="token punctuation">)<span class="token punctuation">;
    <span class="token comment">// 步骤三：开始播放（设置管道的运行状态：空、准备、播放、暂停）
    <span class="token function">gst_element_set_state <span class="token punctuation">(pipeline<span class="token punctuation">, GST_STATE_PLAYING<span class="token punctuation">)<span class="token punctuation">;
    <span class="token comment">// 步骤四：获取管道的总线
    bus <span class="token operator">= <span class="token function">gst_element_get_bus <span class="token punctuation">(pipeline<span class="token punctuation">)<span class="token punctuation">;
    <span class="token comment">// 步骤五：阻塞获取bus上指定的消息返回（未获取到则阻塞）
    msg <span class="token operator">= <span class="token function">gst_bus_timed_pop_filtered <span class="token punctuation">(bus<span class="token punctuation">, GST_CLOCK_TIME_NONE<span class="token punctuation">, GST_MESSAGE_ERROR <span class="token operator">| GST_MESSAGE_EOS<span class="token punctuation">)<span class="token punctuation">;
    <span class="token comment">// 步骤六：消息的处理（这里有很多消息，只是举例子一个
    <span class="token keyword">if<span class="token punctuation">(<span class="token function">GST_MESSAGE_TYPE<span class="token punctuation">(msg<span class="token punctuation">) <span class="token operator">== GST_MESSAGE_ERROR<span class="token punctuation">)
    <span class="token punctuation">{
        <span class="token function">g_printerr <span class="token punctuation">(<span class="token string">"An error occurred! Re-run with the GST_DEBUG=*:WARN "
                    <span class="token string">"environment variable set for more details.\n"<span class="token punctuation">)<span class="token punctuation">;
    <span class="token punctuation">}
    <span class="token comment">// 步骤七：释放资源（其中管道先设置状态空：该状态将会回收所有被该组件占用的资源，然后再释放）
    <span class="token function">gst_message_unref <span class="token punctuation">(msg<span class="token punctuation">)<span class="token punctuation">;
    <span class="token function">gst_object_unref <span class="token punctuation">(bus<span class="token punctuation">)<span class="token punctuation">;
    <span class="token function">gst_element_set_state <span class="token punctuation">(pipeline<span class="token punctuation">, GST_STATE_NULL<span class="token punctuation">)<span class="token punctuation">;
    <span class="token function">gst_object_unref <span class="token punctuation">(pipeline<span class="token punctuation">)<span class="token punctuation">;
<span class="token punctuation">}
</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
<div class="cl-preview-section">&nbsp;</div>
<div class="cl-preview-section">
<h1><a id="v100_201"></a>工程模板v1.0.0</h1>
</div>
<div class="cl-preview-section">
<p>emsp;emsp;<img src="https://img2024.cnblogs.com/blog/1971530/202505/1971530-20250522104044204-535833004.png" alt="在这里插入图片描述"></p>
</div>
<div class="cl-preview-section">
<h1><a id="_206"></a>入坑</h1>
</div>
<div class="cl-preview-section">
<h2><a id="_207"></a>入坑一：播放画面异常</h2>
</div>
<div class="cl-preview-section">
<h3><a id="_208"></a>问题</h3>
</div>
<div class="cl-preview-section">
<p>emsp;emsp;播放画面错位<br>emsp;emsp;<img src="https://img2024.cnblogs.com/blog/1971530/202505/1971530-20250522104044024-688219538.png" alt="在这里插入图片描述"></p>


</div>
<div class="cl-preview-section">
<p>emsp;emsp;测试原本文件应该是：<br>emsp;emsp;<img src="https://img2024.cnblogs.com/blog/1971530/202505/1971530-20250522104044096-968053141.png" alt="在这里插入图片描述"></p>


</div>
<div class="cl-preview-section">
<h3><a id="_215"></a>尝试</h3>


</div>
<div class="cl-preview-section">
<p>emsp;emsp;命令行去检测，也是异常：<br>emsp;emsp;<img src="https://img2024.cnblogs.com/blog/1971530/202505/1971530-20250522104044113-1602089254.png" alt="在这里插入图片描述"></p>


</div>
<div class="cl-preview-section">
<p>emsp;emsp;测试windows上，是正常：<br>emsp;emsp;<img src="https://img2024.cnblogs.com/blog/1971530/202505/1971530-20250522104044456-65069737.png" alt="在这里插入图片描述"></p>


</div>
<div class="cl-preview-section">
<p>emsp;emsp;所以是系统装的环境可能有问题。重新切换虚拟机使用ubuntu20.04重新制作虚拟机，用起来还是一样，有问题：<br>emsp;emsp;<img src="https://img2024.cnblogs.com/blog/1971530/202505/1971530-20250522104044163-146695883.png" alt="在这里插入图片描述"></p>


</div>
<div class="cl-preview-section">
<p>emsp;emsp;用网页测试，没问题：<br>emsp;emsp;<img src="https://img2024.cnblogs.com/blog/1971530/202505/1971530-20250522104044134-65592858.png" alt="在这里插入图片描述"></p>


</div>
<div class="cl-preview-section">
<p>emsp;emsp;用vlc测试，也没问题：<br>emsp;emsp;<img src="https://img2024.cnblogs.com/blog/1971530/202505/1971530-20250522104044011-1302907370.png" alt="在这里插入图片描述"></p>


</div>
<div class="cl-preview-section">
<p>emsp;emsp;然后测试其他地址试试，发现没问题：<br>emsp;emsp;<img src="https://img2024.cnblogs.com/blog/1971530/202505/1971530-20250522104044110-1022811253.png" alt="在这里插入图片描述"></p>


</div>
<div class="cl-preview-section">
<h3><a id="_234"></a>解决</h3>


</div>
<div class="cl-preview-section">
<p>  后来发现是需要指定渲染器才行。</p>


</div>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.7329389065231482" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-22 10:42">2025-05-22 10:41</span>&nbsp;
<a href="https://www.cnblogs.com/qq21497936">长沙红胖子Qt创微智科</a>&nbsp;
阅读(<span id="post_view_count">98</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18890352);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18890352', targetLink: 'https://www.cnblogs.com/qq21497936/p/18890352', title: 'GStreamer开发笔记（四）：ubuntu搭建GStreamer基础开发环境以及基础Demo' })">举报</a>
</div>
        