
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/wang_yb/p/18785003" title="发布于 2025-03-21 13:57">
    <span role="heading" aria-level="2">『Plotly实战指南』--柱状图绘制基础篇</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>柱状图作为最基础的数据可视化形式之一，能直观展示不同类别数据的对比关系，适用于一下的场景：</p>
<ul>
<li>比较不同类别之间的数据大小，如不同产品的销售额对比。</li>
<li>展示数据的分布情况，如各年龄段的人口数量分布。</li>
<li>分析时间序列数据的变化趋势，如某公司近几年的利润变化。</li>
</ul>
<p>今天，我们就来深入探索<code>Plotly</code><strong>柱状图</strong>的绘制基础，掌握<strong>垂直柱状图</strong>和<strong>水平柱状图</strong>的绘制方法。</p>
<h1 id="1-垂直柱状图绘制">1. 垂直柱状图绘制</h1>
<h2 id="11-数据准备">1.1. 数据准备</h2>
<p>适合绘制垂直柱状图的数据通常是具有明确类别和对应数值的数据。</p>
<p>例如，关于不同城市人口数量的数据：城市名称作为类别，人口数量作为数值，这样的数据结构就非常适合用垂直柱状图来展示。</p>
<p>创建示例数据：</p>
<pre><code class="language-python"># 示例数据
data = {
    "城市": ["北京", "上海", "广州", "深圳", "成都"],
    "人口数量（万）": [2189, 2487, 1530, 1259, 1633]
}
</code></pre>
<h2 id="12-绘图">1.2. 绘图</h2>
<p>使用 <code>Plotly</code> 创建垂直柱状图的基本代码结构如下：</p>
<pre><code class="language-python">import plotly.express as px

# 示例数据
data = {
    "城市": ["北京", "上海", "广州", "深圳", "成都"],
    "人口数量（万）": [2189, 2487, 1530, 1259, 1633]
}

# 创建垂直柱状图
fig = px.bar(
    data_frame=data,
    x="城市",
    y="人口数量（万）",
    title="各城市人口数量柱状图"
)

# 显示图形
fig.show()
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202503/83005-20250321135649195-858912452.png" alt="" loading="lazy"></p>
<p>在上述代码中，我们通过<code>px.bar()</code>函数来创建垂直柱状图。</p>
<p>其中，<code>data_frame</code> 参数用于指定数据源，<code>x</code>参数指定类别的列名，<code>y</code>参数指定数值的列名。</p>
<p><code>Plotly</code> 会自动将<code>y</code>列中的数值映射到柱状的高度上，从而实现数据到图形的转换。</p>
<h2 id="13-坐标轴标签与刻度设置">1.3. 坐标轴标签与刻度设置</h2>
<p>上一节的代码将生成一个垂直柱状图，横轴显示城市名称，纵轴显示人口数量，每个城市的柱子高度对应其相应的人口数量。</p>
<p>通过这个直观的图形，我们可以很容易地比较各城市的人口规模。</p>
<p>但是，为了使柱状图更加清晰易懂，我们常常需要对坐标轴标签和刻度进行设置。</p>
<pre><code class="language-python"># 设置 X 轴标签
fig.update_xaxes(title_text="城市名称")  
# 设置 Y 轴标签
fig.update_yaxes(title_text="人口数量（万人）")  

# 调整 X 轴刻度角度和字体大小
fig.update_xaxes(tickangle=45, tickfont=dict(size=10))  
# 设置 Y 轴刻度间隔和字体大小
fig.update_yaxes(dtick=500, tickfont=dict(size=10))  

fig.update_yaxes(range=[0, 3000])  # 设置 Y 轴范围为 0 到 3000
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202503/83005-20250321135649189-1430623897.png" alt="" loading="lazy"></p>
<p>通过这些设置，我们可以使坐标轴的标签和刻度更加符合数据的特点和展示需求，从而提高图表的可读性。</p>
<h1 id="2-水平柱状图绘制">2. 水平柱状图绘制</h1>
<h2 id="21-数据准备">2.1. 数据准备</h2>
<p>水平柱状图适用于展示类别名称较长或需要强调数据大小对比的情况。</p>
<p>例如，对于一组关于不同国家 GDP 的数据，国家名称作为类别，GDP 数值作为对应的值，这种数据结构适合用水平柱状图来呈现，尤其是当国家名称较长时，水平布局能更好地展示类别信息。</p>
<pre><code class="language-python"># 示例数据
data = {
    "国家": ["美国", "中国", "日本", "德国", "英国"],
    "GDP（万亿美元）": [25.0, 17.7, 4.9, 4.2, 3.1]
}
</code></pre>
<h2 id="22-绘图">2.2. 绘图</h2>
<p>要实现<strong>水平柱状图</strong>，只需对<strong>垂直柱状图</strong>的代码稍作修改：</p>
<pre><code class="language-python">import plotly.express as px

# 示例数据
data = {
    "国家": ["美国", "中国", "日本", "德国", "英国"],
    "GDP（万亿美元）": [25.0, 17.7, 4.9, 4.2, 3.1]
}

# 创建水平柱状图
fig = px.bar(
    data_frame=data,
    y="国家",  # 将类别列指定为 Y 轴
    x="GDP（万亿美元）",  # 将数值列指定为 X 轴
    orientation='h',  # 设置柱状图为水平方向
    title="各国 GDP 水平柱状图"
)

# 显示图形
fig.show()
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202503/83005-20250321135649204-1596813310.png" alt="" loading="lazy"></p>
<p>在上述代码中，我们将 <code>y</code> 参数设置为类别列，<code>x</code> 参数设置为数值列，并通过 <code>orientation='h'</code> 参数指定柱状图为水平布局。</p>
<p>这样，<code>Plotly</code> 就会根据数据生成<strong>水平柱状图</strong>。</p>
<p>运行代码后，生成一个水平柱状图，横轴表示 <code>GDP</code> 数值，纵轴表示国家名称，每个国家的柱子水平延伸，长度对应其 <code>GDP</code> 大小。</p>
<p>这种布局使得国家名称能够完整显示，便于比较各国 <code>GDP</code> 的差异。</p>
<h2 id="23-坐标轴和标签布局">2.3. 坐标轴和标签布局</h2>
<p>了使水平柱状图更加美观和易读，也可以对坐标轴和标签进行调整。</p>
<pre><code class="language-python"># 反转 Y 轴顺序，使柱子从上到下排列
fig.update_yaxes(autorange="reversed")  

fig.update_layout(
    margin=dict(l=150),  # 增加左侧边距，防止国家名称被截断
    title_x=0.5  # 将标题居中显示
)

# 设置 Y 轴刻度垂直显示，字体大小为 12
fig.update_yaxes(tickangle=0, tickfont=dict(size=12))
# 设置 X 轴刻度角度为 45 度，字体大小为 10
fig.update_xaxes(tickangle=45, tickfont=dict(size=10))  
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/83005/202503/83005-20250321135649184-875314171.png" alt="" loading="lazy"></p>
<p>通过这些调整，<strong>水平柱状图</strong>的坐标轴方向和标签布局将更加合理，图表的整体效果将得到显著提升。</p>
<h1 id="3-两种柱状图的对比">3. 两种柱状图的对比</h1>
<p><strong>垂直柱状图</strong>和<strong>水平柱状图</strong>在视觉上最大的差异在于坐标轴的方向和柱子的排列方式。</p>
<p><strong>垂直柱状图</strong>适合展示类别名称较短、需要强调数据分布或趋势的情况；</p>
<p>而<strong>水平柱状图</strong>则更适合类别名称较长、需要突出数据大小对比的场景。</p>
<p>在选择时，根据自己的数据选择不同的柱状图：</p>
<ul>
<li><strong>类别名称较短且数据点较少</strong>：优先选择垂直柱状图，因为它更符合人们的阅读习惯，能够直观地展示数据的高低变化。</li>
<li><strong>类别名称较长或数据点较多</strong>：水平柱状图是更好的选择，它可以避免类别名称被截断，使每个类别的数据都能清晰地展示出来。</li>
<li><strong>需要强调数据大小对比</strong>：水平柱状图在展示数据大小差异时更具优势，因为水平排列的柱子在视觉上更容易比较长度。</li>
<li><strong>展示时间序列数据或数据分布</strong>：垂直柱状图更适合，它能够清晰地呈现数据随时间或其他连续变量的变化趋势。</li>
</ul>
<h1 id="4-总结">4. 总结</h1>
<p>通过本文，我们掌握了<code>Plotly</code>绘制基础柱状图的关键步骤，包括垂直柱状图和水平柱状图的创建方法、数据映射、坐标轴设置以及标签优化等。</p>
<p><code>Plotly</code> 强大的功能为我们提供了丰富的可视化手段，能够帮助我们将数据以直观、美观的方式呈现出来。</p>
<p>在实际项目中，我们可以根据数据的特点和分析需求，灵活选择合适的柱状图类型，并运用所学的知识对图表进行定制和优化，从而更好地传达数据背后的信息和价值。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.5160392749236111" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-21 13:58">2025-03-21 13:57</span>&nbsp;
<a href="https://www.cnblogs.com/wang_yb">wang_yb</a>&nbsp;
阅读(<span id="post_view_count">100</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18785003" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18785003);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18785003', targetLink: 'https://www.cnblogs.com/wang_yb/p/18785003', title: '『Plotly实战指南』--柱状图绘制基础篇' })">举报</a>
</div>
        