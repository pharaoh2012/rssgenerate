
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/piperliu/p/18859867" title="发布于 2025-05-05 09:03">
    <span role="heading" aria-level="2">Go 1.22 相比 Go 1.21 有哪些值得注意的改动？</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        
        本系列旨在梳理 Go 的 release notes 与发展史，来更加深入地理解 Go 语言设计的思路。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<blockquote>
<p>本系列旨在梳理 Go 的 release notes 与发展史，来更加深入地理解 Go 语言设计的思路。</p>
</blockquote>

<p><a href="https://go.dev/doc/go1.22" target="_blank" rel="noopener nofollow">https://go.dev/doc/go1.22</a></p>
<p>Go 1.22 值得关注的改动：</p>
<ol>
<li><strong><code>for</code> 循环改进</strong> ： 循环变量在每次迭代时创建新实例，避免闭包共享问题；<code>for range</code> 现在支持遍历整数。</li>
<li><strong>工作区（Workspace）改进</strong> ： <code>go work</code> 支持 <code>vendor</code> 目录，允许工作区统一管理依赖。</li>
<li><strong><code>vet</code> 工具增强</strong> ： 新增对 <code>defer</code> 语句中 <code>time.Since</code> 错误用法的警告。</li>
<li><strong>运行时（Runtime）优化</strong> ： 通过改进垃圾回收（Garbage Collection）元数据的存储方式，提升了程序性能和内存效率。</li>
<li><strong>编译器（Compiler）优化</strong> ： 改进了基于配置文件优化（Profile-guided Optimization, PGO）的效果，并增强了内联（inlining）策略。</li>
<li><strong>新增 <code>math/rand/v2</code> 包</strong> ： 引入了新的 <code>math/rand/v2</code> 包，提供了更现代、更快速的伪随机数生成器和更符合 Go 习惯的 API。</li>
<li><strong>新增 <code>go/version</code> 包</strong> ： 提供了用于验证和比较 Go 版本字符串的功能。</li>
<li><strong>增强的 <code>net/http</code> 路由</strong> ： 标准库 <code>net/http.ServeMux</code> 支持更强大的路由模式，包括 HTTP 方法匹配和路径参数（wildcards）。</li>
</ol>
<p>下面是一些值得展开的讨论：</p>
<h3 id="for-循环的两项重要改进"><code>for</code> 循环的两项重要改进</h3>
<p>Go 1.22 对 <code>for</code> 循环进行了两项重要的改进：循环变量的语义变更和对整数的 <code>range</code> 支持。</p>
<p><strong>1. 循环变量作用域变更</strong></p>
<p>在 Go 1.22 之前，<code>for</code> 循环声明的变量（例如 <code>for i, v := range slice</code> 中的 <code>i</code> 和 <code>v</code>）只会被创建一次。在每次迭代中，这些变量的值会被更新。这常常导致一个经典的 bug：如果在循环内部启动的 goroutine 引用了这些循环变量，它们可能会意外地共享同一个变量的最终值，而不是捕获每次迭代时的值。</p>
<p>考虑以下 Go 1.21 及之前的代码：</p>
<pre><code class="language-go">package main

import (
    "fmt"
    "time"
)

func main() {
    s := []string{"a", "b", "c"}

    for _, v := range s {
        go func() {
            fmt.Println(v) // 期望输出 a, b, c
        }()
    }

    time.Sleep(1 * time.Second) // 等待 goroutine 执行
}
</code></pre>
<p>在 Go 1.21 及更早版本中，这段代码很可能输出三次 <code>c</code>，因为所有 goroutine 都捕获了同一个变量 <code>v</code>，而当 goroutine 实际执行时，循环已经结束，<code>v</code> 的值停留在了最后一次迭代的 <code>"c"</code>。</p>
<p>为了解决这个问题，开发者通常需要显式地在循环内部创建一个新变量来捕获当前迭代的值：</p>
<pre><code class="language-go">// Go 1.21 及之前的修复方法
for _, v := range s {
    v := v // 创建一个新的 v，遮蔽（shadow）外层的 v
    go func() {
        fmt.Println(v)
    }()
}
</code></pre>
<p>从 Go 1.22 开始，语言规范进行了修改： <strong>每次循环迭代都会创建新的循环变量</strong> 。这意味着，在 Go 1.22 中，无需任何修改，上面第一个例子就能按预期工作，输出 <code>a</code>, <code>b</code>, <code>c</code> （顺序不定，因为 goroutine 并发执行）。这个改动大大降低了因循环变量共享而出错的可能性。</p>
<p><strong>2. <code>for range</code> 支持整数</strong></p>
<p>Go 1.22 引入了一个便捷的语法糖：<code>for range</code> 现在可以直接用于整数类型。<code>for i := range n</code> 的形式等价于 <code>for i := 0; i &lt; n; i++</code>。这使得编写简单的计数循环更加简洁。</p>
<p>例如，要倒序打印 10 到 1：</p>
<pre><code class="language-go">package main

import "fmt"

func main() {
    // Go 1.22 新增语法
    for i := range 10 {
        fmt.Println(10 - i)
    }

    fmt.Println("go1.22 has lift-off!")

    // 等价的 Go 1.21 及之前的写法
    // for i := 0; i &lt; 10; i++ {
    //  fmt.Println(10 - i)
    // }
}
</code></pre>
<p>这个新特性简化了代码，提高了可读性。</p>
<p>此外，Go 1.22 还包含了一个实验性的语言特性预览：支持对函数进行 <code>range</code> 迭代（range-over-function iterators）。可以通过设置环境变量 <code>GOEXPERIMENT=rangefunc</code> 来启用这个特性，但这仍处于试验阶段，可能在未来的版本中发生变化。</p>
<h3 id="工作区workspaces支持-vendor-目录">工作区（Workspaces）支持 <code>vendor</code> 目录</h3>
<p>Go 1.22 增强了对工作区（Workspaces）模式的支持，引入了对 <code>vendor</code> 目录的集成。</p>
<p>在 Go 1.21 及之前，<code>vendor</code> 目录是模块（module）级别的特性。每个模块可以有自己的 <code>vendor</code> 目录，存放该模块的依赖项。然而，在使用 Go 工作区管理多个相互关联的模块时，并没有统一的 <code>vendor</code> 机制。开发者可能需要在每个模块下单独执行 <code>go mod vendor</code>，或者依赖 Go 工具链自动查找各个模块的依赖。</p>
<p>Go 1.22 引入了 <code>go work vendor</code> 命令。当你在工作区的根目录下运行此命令时，它会创建一个顶级的 <code>vendor</code> 目录，并将工作区内所有模块的 <strong>全部依赖项</strong> 收集到这个目录中。</p>
<p>之后，当你在工作区内执行构建命令（如 <code>go build</code>, <code>go test</code>）时，如果存在这个顶级的 <code>vendor</code> 目录，Go 工具链默认会使用 <code>-mod=vendor</code> 标志，优先从这个 <code>vendor</code> 目录中查找依赖，而不是去下载或者查找本地 <code>GOPATH</code> 或模块缓存。</p>
<p>这带来了几个好处：</p>
<ol>
<li><strong>依赖隔离与一致性</strong> ： 确保整个工作区内的所有模块都使用同一套经过 <code>vendor</code> 固定的依赖版本，增强了构建的确定性和可复现性。</li>
<li><strong>简化离线构建</strong> ： 只需要一个顶级的 <code>vendor</code> 目录，就可以支持整个工作区的离线构建。</li>
<li><strong>统一管理</strong> ： 无需在每个子模块中维护各自的 <code>vendor</code> 目录。</li>
</ol>
<p>需要注意的是，工作区的 <code>vendor</code> 目录与单个模块的 <code>vendor</code> 目录是不同的。如果工作区的根目录恰好也是其中一个模块的根目录，那么该目录下的 <code>vendor</code> 子目录要么服务于整个工作区（由 <code>go work vendor</code> 创建），要么服务于该模块本身（由 <code>go mod vendor</code> 创建），但不能同时服务两者。</p>
<p>此外，Go 1.22 的 <code>go</code> 命令还有一些其他变化：</p>
<ul>
<li>在旧的 <code>GOPATH</code> 模式下（即设置 <code>GO111MODULE=off</code>），<code>go get</code> 命令不再被支持。但其他构建命令如 <code>go build</code> 和 <code>go test</code> 仍将无限期支持 <code>GOPATH</code> 项目。</li>
<li><code>go mod init</code> 不再尝试从其他包管理工具（如 <code>Gopkg.lock</code>）的配置文件中导入依赖。</li>
<li><code>go test -cover</code> 现在会为那些没有自己测试文件但被覆盖到的包输出覆盖率摘要（通常是 0.0%），而不是之前的 <code>[no test files]</code> 提示。</li>
<li>如果构建命令需要调用外部 C 链接器（external linker），但 <code>cgo</code> 未启用，现在会报错。因为 Go 运行时需要 <code>cgo</code> 支持来确保与 C 链接器添加的库兼容。</li>
</ul>
<h3 id="vet-工具对-defer-timesince-的新警告"><code>vet</code> 工具对 <code>defer time.Since</code> 的新警告</h3>
<p>Go 1.22 中的 <code>vet</code> 工具增加了一项检查，用于识别 <code>defer</code> 语句中对 <code>time.Since</code> 的常见误用。</p>
<p>考虑以下代码片段，其目的是在函数退出时记录执行耗时：</p>
<pre><code class="language-go">package main

import (
    "log"
    "time"
)

func operation() {
    t := time.Now()
    // 常见的错误用法：
    defer log.Println(time.Since(t)) // vet 在 Go 1.22 中会对此发出警告

    // 模拟一些耗时操作
    time.Sleep(100 * time.Millisecond)
}

func main() {
    operation()
}
</code></pre>
<p>许多开发者期望 <code>defer log.Println(time.Since(t))</code> 会在 <code>operation</code> 函数即将返回时计算 <code>time.Since(t)</code>，从而得到 <code>operation</code> 函数的精确执行时间。然而，<code>defer</code> 的工作机制并非如此。</p>
<p><code>defer</code> 语句会将其后的 <strong>函数调用</strong> 推迟到包含 <code>defer</code> 的函数即将返回之前执行。但是， <strong>函数调用的参数是在 <code>defer</code> 语句执行时就被立即计算（evaluated）并保存的</strong> 。</p>
<p>因此，在 <code>defer log.Println(time.Since(t))</code> 这行代码执行时：</p>
<ol>
<li><code>time.Since(t)</code> 被 <strong>立即调用</strong> 。由于 <code>t</code> 刚刚被设置为 <code>time.Now()</code>，此时 <code>time.Since(t)</code> 的结果几乎为 0（或一个非常小的值）。</li>
<li><code>log.Println</code> 函数及其（几乎为 0 的）参数被注册为一个延迟调用。</li>
<li>当 <code>operation</code> 函数结束时，被推迟的 <code>log.Println</code> 函数被执行，打印出那个在 <code>defer</code> 语句执行时就已经计算好的、非常小的时间差。</li>
</ol>
<p>这显然不是我们想要的。<code>vet</code> 工具现在会警告这种模式，因为它几乎总是错误的。</p>
<p>正确的做法是确保 <code>time.Since(t)</code> 在延迟函数 <strong>实际执行时</strong> 才被调用。这通常通过一个闭包（匿名函数）来实现：</p>
<pre><code class="language-go">package main

import (
    "log"
    "time"
)

func operationCorrect() {
    t := time.Now()
    // 正确用法：
    defer func() {
        // time.Since(t) 在 defer 的函数体内部被调用
        // 这确保了它在 operationCorrect 即将返回时才计算时间差
        log.Println(time.Since(t))
    }()

    // 模拟一些耗时操作
    time.Sleep(100 * time.Millisecond)
}

func main() {
    operationCorrect() // 输出接近 100ms 的值
}
</code></pre>
<p>在这个正确的版本中，<code>defer</code> 后面跟着的是一个匿名函数 <code>func() { ... }</code>。这个匿名函数本身被推迟执行。当 <code>operationCorrect</code> 即将返回时，这个匿名函数被调用，此时它内部的 <code>time.Since(t)</code> 才会被执行，从而正确计算出从 <code>t</code> 被赋值到函数返回的总时长。</p>
<p><code>vet</code> 的这项新检查有助于开发者避免这个常见的 <code>defer</code> 陷阱，确保计时逻辑的正确性。</p>
<h3 id="运行时优化改进-gc-元数据布局">运行时优化：改进 GC 元数据布局</h3>
<p>Go 1.22 运行时进行了一项优化，改变了垃圾回收（Garbage Collection, GC）所需的类型元数据（type-based metadata）的存储方式。现在，这些元数据被存储得更靠近堆（heap）上的对象本身。</p>
<p>这项改变带来了两个主要好处：</p>
<ol>
<li><strong>性能提升</strong> ： 通过让 GC 元数据与对象在内存中物理位置更近，利用了 CPU 缓存的局部性原理（locality of reference）。当 GC 需要访问对象的元数据时，这些数据更有可能已经在 CPU 缓存中，减少了从主内存读取数据的延迟。这使得 Go 程序的 CPU 性能（延迟或吞吐量）提升了 1-3%。</li>
<li><strong>内存开销降低</strong> ： 通过重新组织元数据，运行时能够更好地去重（deduplicate）冗余的元数据信息。对于大多数 Go 程序，这可以减少约 1% 的内存开销。</li>
</ol>
<p>为了理解这个变化，我们可以做一个简单的类比（注意这只是一个帮助理解的概念模型，并非内存布局的精确表示）：</p>
<p>假设在 Go 1.21 中，堆内存布局可能像这样：</p>
<pre><code class="language-txt">[Object A Header] [Object A Data...]   [Object B Header] [Object B Data...]
        |                                       |
        +-----------------+                     +-----------------+
                          |                                       |
                          V                                       V
                  [Metadata Area: Type Info for A, ...]   [Metadata Area: Type Info for B, ...]
</code></pre>
<p>GC 需要在对象头和可能相距较远的元数据区之间跳转。</p>
<p>在 Go 1.22 中，布局可能更接近这样：</p>
<pre><code class="language-txt">[Object A Header | Metadata for A] [Object A Data...]   [Object B Header | Metadata for B] [Object B Data...]
</code></pre>
<p>元数据紧邻对象头，提高了访问效率。同时，如果多个对象共享相同的元数据，运行时可以更有效地管理这些共享信息，减少总体内存占用。</p>
<p>然而，这项优化也带来了一个潜在的副作用： <strong>内存对齐（memory alignment）的变化</strong> 。</p>
<p>在此更改之前，Go 的内存分配器（memory allocator）倾向于将对象分配在 16 字节（或更高）对齐的内存地址上。但优化后的元数据布局调整了内存分配器的内部大小类别（size class）边界。因此，某些对象现在可能只保证 8 字节对齐，而不是之前的 16 字节。</p>
<p>对于绝大多数纯 Go 代码来说，这个变化没有影响。但是，如果你的代码中包含手写的汇编（assembly）代码，并且这些汇编代码依赖于 Go 对象地址具有超过 8 字节的对齐保证（例如，使用了需要 16 字节对齐地址的 SIMD 指令），那么这些代码在 Go 1.22 下可能会失效。</p>
<p>Go 团队预计这种情况非常罕见。但如果确实遇到了问题，可以临时使用 <code>GOEXPERIMENT=noallocheaders</code> 构建程序来恢复旧的元数据布局和对齐行为。不过，这只是一个临时的解决方案，包的维护者应该尽快更新他们的汇编代码，移除对特定内存对齐的假设，因为这个 <code>GOEXPERIMENT</code> 标志将在未来的版本中被移除。</p>
<h3 id="编译器优化更强的-pgo-和内联">编译器优化：更强的 PGO 和内联</h3>
<p>Go 1.22 编译器在优化方面取得了进展，特别是增强了基于配置文件优化（Profile-guided Optimization, PGO）和内联（inlining）策略。</p>
<p><strong>1. PGO 效果增强</strong></p>
<p>PGO 是一种编译器优化技术，它利用程序运行时的真实执行数据（profile）来指导编译过程，做出更优的决策。在 Go 1.22 中，PGO 的一个关键改进是能够 <strong>去虚拟化（devirtualization）</strong> 更高比例的接口方法调用。</p>
<p>去虚拟化是指编译器能够确定一个接口变量在某个调用点实际指向的具体类型，从而将原本需要通过接口查找（动态分派）的方法调用替换为对具体类型方法的直接调用（静态分派）。直接调用通常比接口调用更快。</p>
<p>想象一下这样的代码：</p>
<pre><code class="language-go">type Writer interface {
    Write([]byte) (int, error)
}

func writeData(w Writer, data []byte) {
    w.Write(data) // 这是一个接口调用
}

type fileWriter struct { /* ... */ }
func (fw *fileWriter) Write(p []byte) (int, error) { /* ... */ }

func main() {
    // ...
    f := &amp;fileWriter{}
    // 假设 PGO 数据显示 writeData 总是或经常被 fileWriter 调用
    writeData(f, someData)
}
</code></pre>
<p>如果 PGO 数据表明 <code>writeData</code> 函数中的 <code>w</code> 变量在运行时绝大多数情况下都是 <code>*fileWriter</code> 类型，Go 1.22 的编译器就更有可能将 <code>w.Write(data)</code> 这个接口调用优化为对 <code>f.Write(data)</code> 的直接调用，从而提升性能。</p>
<p>得益于这种更强的去虚拟化能力以及其他 PGO 改进，现在大多数 Go 程序在启用 PGO 后，可以观察到 <strong>2% 到 14%</strong> 的运行时性能提升。</p>
<p><strong>2. 改进的内联策略</strong></p>
<p>内联是将函数调用替换为函数体本身的操作，可以消除函数调用的开销，并为其他优化（如常量传播、死代码消除）创造机会。</p>
<p>Go 1.22 编译器现在能够更好地 <strong>交织（interleave）去虚拟化和内联</strong> 。这意味着，即使是接口方法调用，在经过 PGO 去虚拟化变成直接调用后，也可能更容易被内联，进一步优化性能。</p>
<p>此外，Go 1.22 还包含了一个 <strong>实验性的增强内联器</strong> 。这个新的内联器使用启发式规则（heuristics）来更智能地决定是否内联。它会倾向于在被认为是“重要”的调用点（例如循环内部）进行内联，而在被认为是“不重要”的调用点（例如 <code>panic</code> 路径上）则减少内联，以平衡性能提升和代码体积的增长。</p>
<p>可以通过设置环境变量 <code>GOEXPERIMENT=newinliner</code> 来启用这个新的实验性内联器。相关的讨论和反馈可以在 <a href="https://github.com/golang/go/issues/61502" target="_blank" rel="noopener nofollow">https://github.com/golang/go/issues/61502</a> 中找到。</p>
<h3 id="增强的-nethttp-路由模式">增强的 <code>net/http</code> 路由模式</h3>
<p>Go 1.22 对标准库中的 <code>net/http.ServeMux</code> 进行了显著增强，使其路由模式（patterns）更具表现力，引入了对 HTTP 方法和路径参数（wildcards）的支持。</p>
<p>在此之前，<code>http.ServeMux</code> 的路由功能非常基础，基本上只能基于 URL 路径前缀进行匹配。这使得实现 RESTful API 或更复杂的路由逻辑时，开发者往往需要引入第三方的路由库。</p>
<p>Go 1.22 的改进使得标准库的路由能力大大增强：</p>
<p><strong>1. HTTP 方法匹配</strong></p>
<p>现在可以在注册处理器（handler）时指定 HTTP 方法。</p>
<pre><code class="language-go">package main

import (
    "fmt"
    "net/http"
)

func main() {
    mux := http.NewServeMux()

    // 只匹配 POST 请求到 /items/create
    mux.HandleFunc("POST /items/create", func(w http.ResponseWriter, r *http.Request) {
        fmt.Fprintln(w, "Create item")
    })

    // 匹配所有方法的 /items/
    mux.HandleFunc("/items/", func(w http.ResponseWriter, r *http.Request) {
        fmt.Fprintf(w, "Default item handler for method %s\n", r.Method)
    })

    // http.ListenAndServe(":8080", mux)
}
</code></pre>
<ul>
<li><code>POST /items/create</code> 只会匹配 <code>POST</code> 方法的请求。</li>
<li>带有方法的模式优先级高于不带方法的通用模式。例如，一个 <code>POST</code> 请求到 <code>/items/create</code> 会被第一个处理器处理，而一个 <code>GET</code> 请求到 <code>/items/create</code> 则会回退（fall back）到匹配 <code>/items/</code> 的处理器（如果存在且匹配的话）。</li>
<li>特殊情况：注册 <code>GET</code> 方法的处理器会自动也为 <code>HEAD</code> 请求注册相同的处理器。</li>
</ul>
<p><strong>2. 路径参数（Wildcards）</strong></p>
<p>模式中可以使用 <code>{}</code> 来定义路径参数（也叫路径变量或通配符）。</p>
<pre><code class="language-go">package main

import (
    "fmt"
    "net/http"
)

func main() {
    mux := http.NewServeMux()

    // 匹配如 /items/123, /items/abc 等
    // {id} 匹配路径中的一个段 (segment)
    mux.HandleFunc("/items/{id}", func(w http.ResponseWriter, r *http.Request) {
        // 通过 r.PathValue("id") 获取实际匹配到的值
        itemID := r.PathValue("id")
        fmt.Fprintf(w, "Get item with ID: %s\n", itemID)
    })

    // 匹配如 /files/a/b/c.txt
    // {path...} 必须在末尾，匹配剩余所有路径段
    mux.HandleFunc("/files/{path...}", func(w http.ResponseWriter, r *http.Request) {
        filePath := r.PathValue("path")
        fmt.Fprintf(w, "Accessing file path: %s\n", filePath)
    })

    // http.ListenAndServe(":8080", mux)
}
</code></pre>
<ul>
<li><code>{name}</code> 形式的通配符匹配 URL 路径中的单个段。</li>
<li><code>{name...}</code> 形式的通配符必须出现在模式的末尾，它会匹配该点之后的所有剩余路径段。</li>
<li>可以使用 <code>r.PathValue("name")</code> 在处理器函数中获取通配符匹配到的实际值。</li>
</ul>
<p><strong>3. 精确匹配与后缀斜杠</strong></p>
<ul>
<li>像以前一样，以 <code>/</code> 结尾的模式（如 <code>/static/</code>）会匹配所有以此为前缀的路径。</li>
<li>如果想要精确匹配一个以斜杠结尾的路径（而不是作为前缀匹配），可以在末尾加上 <code>{$}</code>，例如 <code>/exact/match/{$}</code> 只会匹配 <code>/exact/match/</code> 而不会匹配 <code>/exact/match/foo</code>。</li>
</ul>
<p><strong>4. 优先级规则</strong></p>
<p>当两个模式可能匹配同一个请求时（模式重叠），<strong>更具体（more specific）</strong> 的模式优先。如果两者没有明确的哪个更具体，则模式冲突（注册时会 panic）。这个规则推广了之前的优先级规则，并保证了注册顺序不影响最终的匹配结果。<br>
例如：</p>
<ul>
<li><code>POST /items/{id}</code> 比 <code>/items/{id}</code> 更具体（因为它指定了方法）。</li>
<li><code>/items/specific</code> 比 <code>/items/{id}</code> 更具体（因为它包含了一个字面量段而不是通配符）。</li>
<li><code>/a/{x}/b</code> 和 <code>/a/{y}/c</code> 没有明确的哪个更具体，如果它们可能匹配相同的请求路径（例如 <code>/a/foo/b</code> 和 <code>/a/foo/c</code> 不冲突，但 <code>/a/{z}</code> 和 <code>/a/b</code> 可能会冲突），这取决于具体实现，但通常 <code>/a/b</code> 会优先于 <code>/a/{z}</code>。</li>
</ul>
<p><strong>5. 向后兼容性</strong></p>
<p>这些改动在某些方面破坏了向后兼容性：</p>
<ul>
<li>包含 <code>{</code> 和 <code>}</code> 的路径现在会被解析为带通配符的模式，行为与之前不同。</li>
<li>对路径中转义字符的处理也得到了改进，可能导致行为差异。</li>
</ul>
<p>为了帮助平滑过渡，可以通过设置 <code>GODEBUG</code> 环境变量来恢复旧的行为：</p>
<pre><code class="language-bash">export GODEBUG=httpmuxgo121=1
</code></pre>
<p>总的来说，Go 1.22 对 <code>net/http.ServeMux</code> 的增强大大提升了标准库进行 Web 开发的能力，减少了对第三方路由库的依赖。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.005713823799768519" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-05-05 09:04">2025-05-05 09:03</span>&nbsp;
<a href="https://www.cnblogs.com/piperliu">Piper蛋窝</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18859867);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18859867', targetLink: 'https://www.cnblogs.com/piperliu/p/18859867', title: 'Go 1.22 相比 Go 1.21 有哪些值得注意的改动？' })">举报</a>
</div>
        