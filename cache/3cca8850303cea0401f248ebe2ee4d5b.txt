
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/darklong/p/18719824" title="发布于 2025-02-17 13:59">
    <span role="heading" aria-level="2">表单文本框里写太多字就出 404 了？原因和解决办法都在这儿！</span>
    

</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			    <div id="cnblogs_post_description" style="display: none">
        
        本文聊聊表单文本框内容太多导致 404 错误的那些事儿，帮你找出原因并解决问题。文章先介绍了表单的 `enctype` 属性，解释了 `multipart/form-data` 的特点。接着分析了 404 错误的可能原因，包括路径截断和后端解析问题。最后，提供了简单易行的解决方案，比如移除 `enctype`、用 AJAX 提交数据或调整后端逻辑。通过这些方法，你可以轻松解决表单内容过多导致的 404 错误。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p></p><div class="toc"><div class="toc-container-header">目录</div><ul><li><a href="#1-表单的enctype-属性" rel="noopener nofollow">1. 表单的<code>enctype</code> 属性</a></li><li><a href="#2-404-错误的原因分析" rel="noopener nofollow">2. 404 错误的原因分析</a><ul><li><a href="#1-路径片段截断" rel="noopener nofollow">(1) 路径片段截断</a></li><li><a href="#2-后端路径解析逻辑" rel="noopener nofollow">(2) 后端路径解析逻辑</a></li></ul></li><li><a href="#3字符数量导致问题的原因" rel="noopener nofollow">3.字符数量导致问题的原因</a><ul><li><a href="#1字数较少时正常的原因" rel="noopener nofollow">(1)字数较少时正常的原因</a></li><li><a href="#2字数较多时出现问题的原因" rel="noopener nofollow">(2)字数较多时出现问题的原因</a></li></ul></li><li><a href="#4-post-请求与-multipartform-data-的兼容性问题" rel="noopener nofollow">4. <code>POST</code> 请求与 <code>multipart/form-data</code> 的兼容性问题</a></li><li><a href="#5-表单提交方法的影响" rel="noopener nofollow">5. 表单提交方法的影响</a><ul><li><a href="#1-表单自动提交applyaddfmsubmit" rel="noopener nofollow">(1) 表单自动提交（<code>$("#applyaddfm").submit();</code>）</a></li><li><a href="#2-手动提交httppost-函数" rel="noopener nofollow">(2) 手动提交（<strong><code>httpPost</code> 函数</strong>）</a></li></ul></li><li><a href="#6-解决方案" rel="noopener nofollow">6. 解决方案</a><ul><li><a href="#1-移除-enctypemultipartform-data适用于无文件上传" rel="noopener nofollow">(1) 移除 <code>enctype="multipart/form-data"</code>（适用于无文件上传）</a></li><li><a href="#2-使用-fetch-或-xmlhttprequest-提交数据" rel="noopener nofollow">(2) 使用 <code>fetch</code> 或 <code>XMLHttpRequest</code> 提交数据</a></li><li><a href="#3-调整后端解析逻辑" rel="noopener nofollow">(3) 调整后端解析逻辑</a></li></ul></li><li><a href="#6后端jvav设置处理-multipartform-data-请求的方法" rel="noopener nofollow">6.后端（JVAV）设置处理 <code>multipart/form-data</code> 请求的方法：</a><ul><li><a href="#使用-servlet-30在-webxml-中配置-multipartconfig" rel="noopener nofollow">使用 Servlet 3.0：在 <code>web.xml</code> 中配置 <code>MultipartConfig</code>：</a></li><li><a href="#示例代码" rel="noopener nofollow">示例代码：</a></li><li><a href="#关键点" rel="noopener nofollow">关键点：</a></li></ul></li><li><a href="#7-总结" rel="noopener nofollow">7. 总结</a></li></ul></div><p></p>
<h4 id="1-表单的enctype-属性">1. 表单的<code>enctype</code> 属性</h4>
<blockquote>
<p><code>enctype</code> 属性用于指定表单数据在提交时的编码方式，决定了浏览器如何封装和发送数据。</p>
</blockquote>
<ol>
<li><strong><code>application/x-www-form-urlencoded</code></strong>：
<ul>
<li><strong>未指定 <code>enctype</code> 时，浏览器会使用此值。</strong></li>
<li><strong>编码方式</strong>：表单数据会被编码为<strong>名称/值对</strong>，特殊字符会被转换为 ASCII 十六进制值。例如，空格会被转换为 <code>+</code> 号。</li>
<li><strong>适用场景</strong>：适用于常规的表单提交，其中不包含文件上传。</li>
</ul>
</li>
<li><strong><code>multipart/form-data</code></strong>：
<ul>
<li><strong>编码方式</strong>：表单数据以<strong>二进制形式编码</strong>，允许发送文本和二进制文件。</li>
<li><strong>数据分割</strong>：<code>multipart/form-data</code> 会将表单数据分割成多个部分（<code>part</code>），每个部分有自己的边界（<code>boundary</code>）。</li>
<li><strong>边界生成</strong>：浏览器会自动生成边界字符串，这些边界字符串可能会占用额外的字节数。</li>
<li><strong>浏览器默认行为</strong>：当 <code>enctype</code> 设置为 <code>multipart/form-data</code> 时，浏览器会<strong>自动处理</strong>表单数据的分割和边界生成。</li>
<li><strong>数据格式</strong>：<code>multipart/form-data</code> 的数据格式较为复杂，可能会导致后端解析失败或路径匹配错误。</li>
<li><strong>适用场景</strong>：用于文件上传。当表单中包含 <code>&lt;input type="file"&gt;</code> 时，必须将 <code>enctype</code> 设置为 <code>multipart/form-data</code>。</li>
</ul>
</li>
<li><strong><code>text/plain</code></strong>：
<ul>
<li><strong>编码方式</strong>：表单数据以纯文本形式发送，不进行特殊字符的编码。空格会被转换为 <code>+</code> 号，但特殊字符不会被编码。</li>
<li><strong>适用场景</strong>：通常用于发送纯文本信息，如电子邮件等。这种格式不常用，因为它不提供数据的转义或保护。</li>
</ul>
</li>
</ol>
<p><strong>注意：</strong></p>
<ul>
<li><strong>GET 方法</strong>：如果表单使用 <code>GET</code> 方法发送数据，<code>enctype</code> 属性无效。数据将以 URL 的查询字符串形式发送。</li>
<li><strong>服务器端处理</strong>：在使用 <code>multipart/form-data</code> 时，后端需要处理，去解析这种类型的数据。通常是通过解析上传的文件流来实现。</li>
</ul>
<h4 id="2-404-错误的原因分析">2. 404 错误的原因分析</h4>
<blockquote>
<p>404 错误通常是请求的路径未找到，而不是直接由字符限制或编码问题导致的。可能与表单数据量或编码方式有关。以下是一些可能的路径相关问题：</p>
</blockquote>
<h5 id="1-路径片段截断">(1) 路径片段截断</h5>
<p>当使用 <code>multipart/form-data</code> 提交大量数据时，某些中间件或服务器可能对请求体的大小有限制，导致路径信息或请求参数被截断，使得后端无法正确匹配路径。</p>
<h5 id="2-后端路径解析逻辑">(2) 后端路径解析逻辑</h5>
<p>如果后端对 <code>multipart/form-data</code> 请求的路径解析逻辑与普通表单不同，可能会导致路径匹配失败。</p>
<h4 id="3字符数量导致问题的原因">3.字符数量导致问题的原因</h4>
<h5 id="1字数较少时正常的原因">(1)字数较少时正常的原因</h5>
<ul>
<li><strong>数据量较小</strong>：当输入的字数较少时，生成的 <code>boundary</code> 和分割部分较少，数据格式相对简单，后端能够正确解析。</li>
<li><strong>路径未被截断</strong>：较少的数据量不会导致路径或参数被截断，因此请求能够正常到达后端。</li>
</ul>
<h5 id="2字数较多时出现问题的原因">(2)字数较多时出现问题的原因</h5>
<ul>
<li><strong>数据量过大</strong>：当输入的字数较多时，生成的 <code>boundary</code> 和分割部分增多，数据格式变得复杂，可能导致后端解析失败。</li>
<li><strong>路径或参数被截断</strong>：大量的数据可能导致路径或参数被截断，导致请求无法正确匹配后端路径，从而返回 404 错误。</li>
<li><strong>后端限制</strong>：后端可能对 <code>multipart/form-data</code> 的请求体大小有限制，超过限制时会导致解析失败或路径匹配错误。</li>
</ul>
<h4 id="4-post-请求与-multipartform-data-的兼容性问题">4. <code>POST</code> 请求与 <code>multipart/form-data</code> 的兼容性问题</h4>
<p>当使用 <code>POST</code> 请求且 <code>enctype="multipart/form-data"</code> 时，以下因素可能导致问题：</p>
<ul>
<li><strong><code>boundary</code> 生成问题</strong>：浏览器自动生成的 <code>boundary</code> 可能与后端的解析逻辑不匹配。</li>
<li><strong>字段格式问题</strong>：某些字段可能未被正确包含在 <code>multipart/form-data</code> 的请求体中。</li>
</ul>
<h4 id="5-表单提交方法的影响">5. 表单提交方法的影响</h4>
<p><code>$("#applyaddfm").submit();</code> 使用了表单的默认提交行为，而 <code>httpPost</code> 函数手动构建了一个新的表单并提交。这两者之间的差异可能导致问题。</p>
<h5 id="1-表单自动提交applyaddfmsubmit">(1) 表单自动提交（<code>$("#applyaddfm").submit();</code>）</h5>
<ul>
<li>如果表单的 <code>enctype</code> 是 <code>multipart/form-data</code>，浏览器会以特定的格式发送请求体，但由于某些原因（如 <code>boundary</code> 未正确生成或字段格式不规范），可能导致后端无法正确解析路径或参数，进而返回 404。</li>
</ul>
<h5 id="2-手动提交httppost-函数">(2) 手动提交（<strong><code>httpPost</code> 函数</strong>）</h5>
<ul>
<li>手动创建的表单可能未设置 <code>enctype="multipart/form-data"</code>，浏览器会以默认的 <code>application/x-www-form-urlencoded</code> 格式提交数据，后端能更稳定地解析。</li>
</ul>
<h4 id="6-解决方案">6. 解决方案</h4>
<h5 id="1-移除-enctypemultipartform-data适用于无文件上传">(1) 移除 <code>enctype="multipart/form-data"</code>（适用于无文件上传）</h5>
<p>如果表单无需文件上传功能，移除 <code>enctype</code>，让浏览器使用默认的 <code>application/x-www-form-urlencoded</code> 编码方式：</p>
<pre><code class="language-html">&lt;form name="fm" id="applyaddfm" method="post" onsubmit="queryWait()"&gt;
  &lt;!-- 表单内容 --&gt;
&lt;/form&gt;
</code></pre>
<h5 id="2-使用-fetch-或-xmlhttprequest-提交数据">(2) 使用 <code>fetch</code> 或 <code>XMLHttpRequest</code> 提交数据</h5>
<p>使用现代 AJAX 方法（如 <code>fetch</code>）提交数据，灵活控制请求格式：</p>
<pre><code class="language-javascript">fetch('${ctx}/lossAndDuty/car_query.do', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/x-www-form-urlencoded'
  },
  body: new URLSearchParams($("#applyaddfm").serialize())
})
.then(response =&gt; response.json())
.then(data =&gt; console.log(data));
</code></pre>
<h5 id="3-调整后端解析逻辑">(3) 调整后端解析逻辑</h5>
<ul>
<li><strong>增加请求体大小限制</strong>：确保后端能处理较大的 <code>multipart/form-data</code> 请求。</li>
<li><strong>优化路径匹配逻辑</strong>：确保路径匹配不受数据量影响。</li>
</ul>
<h4 id="6后端jvav设置处理-multipartform-data-请求的方法">6.后端（JVAV）设置处理 <code>multipart/form-data</code> 请求的方法：</h4>
<h5 id="使用-servlet-30在-webxml-中配置-multipartconfig">使用 Servlet 3.0：在 <code>web.xml</code> 中配置 <code>MultipartConfig</code>：</h5>
<pre><code class="language-xml">&lt;web-app&gt;
  &lt;servlet-mapping&gt;
    &lt;servlet-name&gt;default&lt;/servlet-name&gt;
    &lt;url-pattern&gt;/&lt;/url-pattern&gt;
  &lt;/servlet-mapping&gt;

  &lt;multipart-config&gt;
    &lt;max-file-size&gt;10485760&lt;/max-file-size&gt; &lt;!-- 文件最大尺寸，单位字节 --&gt;
    &lt;max-request-size&gt;10485760&lt;/max-request-size&gt;
    &lt;file-size-threshold&gt;0&lt;/file-size-threshold&gt;
  &lt;/multipart-config&gt;
&lt;/web-app&gt;
</code></pre>
<h5 id="示例代码">示例代码：</h5>
<pre><code class="language-java">import javax.servlet.*;
import javax.servlet.http.*;
import java.io.*;

public class FileUploadServlet extends HttpServlet {
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        // 检查是否是多部分请求
        if (ServletFileUpload.isMultipartContent(request)) {
            // 配置文件上传
            DiskFileItemFactory factory = new DiskFileItemFactory();
            ServletFileUpload upload = new ServletFileUpload(factory);

            // 解析请求
            List&lt;FileItem&gt; items = upload.parseRequest(request);

            for (FileItem item : items) {
                if (item.isFormField()) {
                    // 处理普通表单字段
                    String fieldName = item.getFieldName();
                    String fieldValue = item.getString();
                    System.out.println(fieldName + ": " + fieldValue);
                } else {
                    // 处理文件字段
                    String fileName = item.getName();
                    item.write(new File("uploads/" + fileName));
                    System.out.println("File uploaded: " + fileName);
                }
            }
        }
    }
}
</code></pre>
<h5 id="关键点">关键点：</h5>
<ul>
<li><code>ServletFileUpload</code>：用于解析 <code>multipart/form-data</code> 请求。</li>
<li><code>item.write()</code>：将文件保存到指定路径。</li>
</ul>
<h4 id="7-总结">7. 总结</h4>
<p>表单文本框内容过多导致 404 错误，通常是由于 <code>multipart/form-data</code> 的复杂性引发的路径截断或后端解析失败。通过移除 <code>enctype</code>、使用现代 AJAX 方法或调整后端逻辑，可以有效解决该问题。</p>

</div>
<div class="clear"></div>

		</div>
		<div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="8.595557873177084" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-17 13:59">2025-02-17 13:59</span>&nbsp;
<a href="https://www.cnblogs.com/darklong">DarkLONGLOVE</a>&nbsp;
Views(<span id="post_view_count">274</span>)&nbsp;
Comments(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18719824" rel="nofollow">Edit</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18719824);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18719824', targetLink: 'https://www.cnblogs.com/darklong/p/18719824', title: '表单文本框里写太多字就出 404 了？原因和解决办法都在这儿！' })">举报</a>
</div>
	