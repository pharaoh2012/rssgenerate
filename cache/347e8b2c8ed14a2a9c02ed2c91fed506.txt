
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/TheMagicalRainbowSea/p/18697758" title="发布于 2025-02-03 21:22">
    <span role="heading" aria-level="2">六. Redis当中的“发布” 和 “订阅” 的详细讲解说明(图文并茂)</span>
    

</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="七-redis-当中-jedis-的详细刨析与使用">七. Redis 当中 Jedis 的详细刨析与使用</h1>
<p>@</p><div class="toc"><div class="toc-container-header">目录</div><ul><li><a href="#七-redis-当中-jedis-的详细刨析与使用" rel="noopener nofollow">七. Redis 当中 Jedis 的详细刨析与使用</a></li><li><a href="#1-jedis-概述" rel="noopener nofollow">1. Jedis 概述</a></li><li><a href="#2-java程序中使用jedis-操作-redis-数据" rel="noopener nofollow">2. Java程序中使用Jedis 操作 Redis 数据</a><ul><li><a href="#21-java-程序使用-jedis-连接-redis-的注意事项" rel="noopener nofollow">2.1 Java 程序使用 Jedis 连接 Redis 的注意事项</a></li><li><a href="#22-java程序通过-jedis当中操作-redis-的-key-键值对" rel="noopener nofollow">2.2 Java程序通过 Jedis当中操作 Redis 的 key 键值对</a></li><li><a href="#23--java程序通过-jedis-当中操作-redis-的-string-字符串" rel="noopener nofollow">2.3  Java程序通过 Jedis 当中操作 Redis 的 string 字符串</a></li><li><a href="#24-java程序通过-jedis-当中操作-redis-的-list-列表" rel="noopener nofollow">2.4 Java程序通过 Jedis 当中操作 Redis 的 list 列表</a></li><li><a href="#25-java程序通过-jedis-当中操作-redis-的-set-集合" rel="noopener nofollow">2.5 Java程序通过 Jedis 当中操作 Redis 的 set 集合</a></li><li><a href="#26-java程序通过-jedis-当中操作-redis-的-hash-哈希表" rel="noopener nofollow">2.6 Java程序通过 Jedis 当中操作 Redis 的 hash 哈希表</a></li><li><a href="#27-java程序通过-jedis-当中操作-redis-的-zset-有序集合" rel="noopener nofollow">2.7 Java程序通过 Jedis 当中操作 Redis 的 Zset 有序集合</a></li></ul></li><li><a href="#3-最后" rel="noopener nofollow">3. 最后：</a></li></ul></div><p></p>
<hr>
<h1 id="1-jedis-概述">1. Jedis 概述</h1>
<p><strong>Jedis 是 Java程序操作 Redis 的工具，就像Java操作MySQL时的JDBC一样的功能</strong> 。</p>
<p><strong>Jedis  工作示意图：</strong></p>
<blockquote>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250203211510225-480461558.png" alt="在这里插入图片描述" loading="lazy"></p>
</blockquote>
<p><strong>Jedis 的API 文档：</strong> <a href="https://www.javadoc.io/doc/redis.clients/jedis/latest/index.html" target="_blank" rel="noopener nofollow">https://www.javadoc.io/doc/redis.clients/jedis/latest/index.html</a></p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250203211509927-1142474600.png" alt="在这里插入图片描述" loading="lazy"></p>
<p><strong>下面是来自一位网上网友总结的 Jedis中文文档：这里搬运了一下：</strong> <a href="https://blog.csdn.net/CYY941027/article/details/109110455" target="_blank" rel="noopener nofollow">https://blog.csdn.net/CYY941027/article/details/109110455</a></p>
<p><strong>创建 Jedis 对象，使用对应的构造器：</strong></p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250203211510077-1602289718.png" alt="在这里插入图片描述" loading="lazy"></p>
<p><strong>键值对的操作：</strong></p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250203211509950-445264767.png" alt="在这里插入图片描述" loading="lazy"></p>
<p><strong>字符串操作：</strong></p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250203211510304-615778967.png" alt="在这里插入图片描述" loading="lazy"></p>
<p><strong>整数和浮点数操作：</strong></p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250203211510192-1415240512.png" alt="在这里插入图片描述" loading="lazy"></p>
<p><strong>列表List 操作：</strong></p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250203211510240-1626631739.png" alt="在这里插入图片描述" loading="lazy"></p>
<p><strong>集合(Set) 操作：</strong></p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250203211510202-1002186562.png" alt="在这里插入图片描述" loading="lazy"></p>
<p><strong>哈希表(Hash) 操作：</strong></p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250203211510105-1533726030.png" alt="在这里插入图片描述" loading="lazy"></p>
<p><strong>有序集合(Zsort) 操作：</strong></p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250203211510238-166764807.png" alt="在这里插入图片描述" loading="lazy"></p>
<p><strong>排序操作：</strong></p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250203211510115-115865499.png" alt="在这里插入图片描述" loading="lazy"></p>
<blockquote>
<p><strong>我们可以观察到上述 API 的方法，可以明显的发觉这些就是我们在 Redis 当中敲的命令，只不过是被替换成了Java当中的方法使用了。因为我们是要在Java程序当中操作 Redis 的，所以自然是要将命令转换为Java当中的方法来操作。</strong></p>
</blockquote>
<h1 id="2-java程序中使用jedis-操作-redis-数据">2. Java程序中使用Jedis 操作 Redis 数据</h1>
<p><strong>快速入门：</strong></p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250203211510067-807617628.png" alt="在这里插入图片描述" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250203211510259-2045806107.png" alt="在这里插入图片描述" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250203211510047-722734845.png" alt="在这里插入图片描述" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250203211509913-1433717997.png" alt="在这里插入图片描述" loading="lazy"></p>
<p>我们想要使用 jedis 需要在 pom.xml 文件当中引入相关的 jar 依赖。</p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250203211510317-897735455.png" alt="在这里插入图片描述" loading="lazy"></p>
<pre><code class="language-xml">&lt;dependencies&gt;
        &lt;!--        引入 jedis 依赖--&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;redis.clients&lt;/groupId&gt;
            &lt;artifactId&gt;jedis&lt;/artifactId&gt;
            &lt;version&gt;3.2.0&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
</code></pre>
<p>Java 程序通过 Jedis 连接数据库之前，需要先将 Linux 当中安装的 Redis 服务器启动起来。</p>
<pre><code class="language-sh">[root@localhost bin]# redis-server /etc/redis.conf # 启动 redis 服务器
[root@localhost bin]# redis-cli # 进入到 Redis 客户端

</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250203211510245-1531430513.png" alt="在这里插入图片描述" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250203211510205-1020390979.png" alt="在这里插入图片描述" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250203211510302-257592859.png" alt="在这里插入图片描述" loading="lazy"></p>
<h2 id="21-java-程序使用-jedis-连接-redis-的注意事项">2.1 Java 程序使用 Jedis 连接 Redis 的注意事项</h2>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250203211510326-1219028139.png" alt="在这里插入图片描述" loading="lazy"></p>
<pre><code class="language-java">package com.rainbowsea.jedis;

import org.junit.Test;
import redis.clients.jedis.Jedis;

public class JedisTest {
    // 连接 Redis
    @Test
    public void con() {
        // 使用 ip地址 + redis的端口的构造器方法
        Jedis jedis = new Jedis("192.168.76.145", 6379);
        String ping = jedis.ping();
        System.out.println("连接成功 ping 返回的结果 = " + ping);

        jedis.close();  // 关闭连接

    }
}

</code></pre>
<blockquote>
<p>ip地址没错，我们是复制过来的。端口号也没错，是默认的6379 。可显示连接不上。同时还提示我们连接超时了。</p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250203211510231-1268674365.png" alt="在这里插入图片描述" loading="lazy"></p>
</blockquote>
<p><strong>原因和解决方法：</strong></p>
<ol>
<li>第一个原因是：我们 Linux 当中的对于 6379 这个端口的防火墙是关闭的。如果防火墙是对于该 6379 端口是关闭，不是开放的。我们外界是无法连接上该端口的。所以我们需要在 Linux 当中将该 6379 端口打开开启。让我们外界(Java 程序)可以连接该 6379端口。</li>
</ol>
<p>具体操作如下：</p>
<pre><code class="language-sh">[root@localhost bin]# firewall-cmd --list-all
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250203211510218-112273380.png" alt="在这里插入图片描述" loading="lazy"></p>
<p>设置开放的端口号：</p>
<pre><code class="language-sh">[root@localhost bin]# firewall-cmd --add-port=6379/tcp --permanent
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250203211510075-852736705.png" alt="在这里插入图片描述" loading="lazy"></p>
<blockquote>
<p><strong>注意：设置后开放端口以后，还得重启一下防火墙才能生效。</strong></p>
</blockquote>
<p>重启防火墙：</p>
<pre><code class="language-sh">[root@localhost bin]# firewall-cmd --reload # 重启防火墙
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250203211510139-741225428.png" alt="在这里插入图片描述" loading="lazy"></p>
<p>再次执行 <code>firewall-cmd --list-all</code> 命令查看是否，将 6379 端口打开成功。</p>
<pre><code class="language-sh">[root@localhost bin]# firewall-cmd --list-all
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250203211510070-1998876060.png" alt="在这里插入图片描述" loading="lazy"></p>
<ol start="2">
<li>第二个原因：在Redis 当中的 <code>/etc/redis.conf</code> 文件当中，存在一个 <code>bind</code> ，设置：我们需要将其设置为远程访问的设置。而不是本机设置。</li>
</ol>
<p>使用 vim 打开该文件，进行修改。</p>
<pre><code class="language-sh">[root@localhost bin]# vim /etc/redis.conf
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250203211510134-1007910760.png" alt="在这里插入图片描述" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250203211510032-1613347574.png" alt="在这里插入图片描述" loading="lazy"></p>
<pre><code class="language-sh"># bind 127.0.0.1 -::1
</code></pre>
<p>同样修改了配置之后，需要关闭 Redis 服务，再启动 Redis 服务，配置才能生效。</p>
<pre><code class="language-sh">[root@localhost ~]# redis-cli -p 6379 shutdown # 关闭 Redis 服务
</code></pre>
<pre><code class="language-sh">[root@localhost bin]# redis-server /etc/redis.conf # 重启Redis 服务器
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250203211510137-289910093.png" alt="在这里插入图片描述" loading="lazy"></p>
<ol start="3">
<li>第三个原因：我们还需要将 <code> protected-mode yes</code>  修改为 <code>no</code> 关闭保护模式，如下图所示</li>
</ol>
<pre><code class="language-properties">protected-mode no
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250203211510111-1444963063.png" alt="在这里插入图片描述" loading="lazy"></p>
<p>同样修改了配置之后，需要关闭 Redis 服务，再启动 Redis 服务，配置才能生效。</p>
<p>我们再次尝试在Java程序当中连接 Redis 。</p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250203211510079-706486572.png" alt="在这里插入图片描述" loading="lazy"></p>
<ol start="4">
<li>Redis 默认是没有配置密码的，但是，没有密码的话，我们 Jedis 会认为是不安全的。我们为 Redis 配置密码。在 <code>/etc/redis.conf</code> 文件当中的 <code>requirepass</code> 配置密码。如下图所示：</li>
</ol>
<pre><code class="language-properties"> requirepass rainbowsea
</code></pre>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250203211510108-2046135072.png" alt="在这里插入图片描述" loading="lazy"></p>
<p>同样修改了配置之后，需要关闭 Redis 服务，再启动 Redis 服务，配置才能生效。</p>
<p>设置密码后：使用 <code>auth 密码</code> 登录。</p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250203211510253-1958218017.png" alt="在这里插入图片描述" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250203211510228-2093156931.png" alt="在这里插入图片描述" loading="lazy"></p>
<p>我们再次尝试在Java程序当中连接 Redis 。</p>
<blockquote>
<p><strong>注意：</strong> 这里我们 Redis 设置了密码，所以我们Java程序连接的时候，需要先执行 <code>auth()</code> 方法进行一个认证登录，才能连接上 Redis 服务。不然是无法连接数上的。</p>
</blockquote>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250203211510101-403810123.png" alt="在这里插入图片描述" loading="lazy"></p>
<pre><code class="language-java">package com.rainbowsea.jedis;

import org.junit.Test;
import redis.clients.jedis.Jedis;

public class JedisTest {
    // 连接 Redis
    // 1. 如果Redis 设置了密码，则需要进行身份校验
    // 2. 因为需要连接到 redis端口，比如6379，就需要配置防火墙，放开端口
    // 3. 注意修改 bind ，支持远程连接
    // 4 注意关闭保护模式，protected-mode no ，no表示关闭
    // 5. 注意：设置了密码，需要执行 auth(密码)进行身份验证
    @Test
    public void con() {
        // 使用 ip地址 + redis的端口的构造器方法
        Jedis jedis = new Jedis("192.168.76.145", 6379);

        // 如果Redis 配置了密码，则需要进行身份校验
        jedis.auth("rainbowsea");
        String ping = jedis.ping();
        System.out.println("连接成功 ping 返回的结果 = " + ping);

        jedis.close();  // 关闭当前连接，注意并没有关闭 Redis

    }
}

</code></pre>
<h2 id="22-java程序通过-jedis当中操作-redis-的-key-键值对">2.2 Java程序通过 Jedis当中操作 Redis 的 key 键值对</h2>
<blockquote>
<p>在 Redis 当中是什么命令操作 key的，那么在Java程序中就以该命令的方法操作 key</p>
</blockquote>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250203211510277-1696604569.png" alt="在这里插入图片描述" loading="lazy"></p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250203211510189-1395340419.png" alt="在这里插入图片描述" loading="lazy"></p>
<pre><code class="language-java">
import org.junit.Test;
import redis.clients.jedis.Jedis;

import java.util.Set;

public class JedisTest {
    // key 操作
    @Test
    public void key() {
        // 创建 jedis 连接对象
        Jedis jedis = new Jedis("192.168.76.145", 6379);
        // 密码身份登录
        jedis.auth("rainbowsea");

        jedis.set("k1", "v1");
        jedis.set("k2", "v2");
        jedis.set("k3", "v3");

        // 获取key
        Set&lt;String&gt; keys = jedis.keys("*");
        for (String key : keys) {
            System.out.println("key=&gt;" + key);
        }

        // 判断 key 是否存在
        System.out.println("exists:" + jedis.exists("k1")); // True
        System.out.println("exists: " + jedis.exists("k99"));
        // ttl
        System.out.println("ttl:" + jedis.ttl("k2"));

        System.out.println("k3 = " + jedis.get("k3")); // v3

        jedis.close();// 关闭当前连接

    }
}
</code></pre>
<h2 id="23--java程序通过-jedis-当中操作-redis-的-string-字符串">2.3  Java程序通过 Jedis 当中操作 Redis 的 string 字符串</h2>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250203211510262-1308995900.png" alt="在这里插入图片描述" loading="lazy"></p>
<pre><code class="language-java">
import org.junit.Test;
import redis.clients.jedis.Jedis;

import java.util.List;
import java.util.Set;

public class JedisTest {
    // string 操作

    @Test
    public void string() {
        // 创建 jedis 连接对象
        Jedis jedis = new Jedis("192.168.76.145", 6379);
        // 密码身份登录
        jedis.auth("rainbowsea");

        // 批量设置k-v
        jedis.mset("s1","jack","s2","scott","s3","rainbow");

        // 批量获取
        List&lt;String&gt; mget = jedis.mget("s1", "s2");
        for (String s : mget) {
            System.out.println("s -&gt; " + s);
        }

        jedis.close();

    }
}
</code></pre>
<h2 id="24-java程序通过-jedis-当中操作-redis-的-list-列表">2.4 Java程序通过 Jedis 当中操作 Redis 的 list 列表</h2>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250203211510143-66291464.png" alt="在这里插入图片描述" loading="lazy"></p>
<pre><code class="language-java">
import org.junit.Test;
import redis.clients.jedis.Jedis;

import java.util.List;
import java.util.Set;

public class JedisTest {
    // list 操作

    @Test
    public void list() {
        // 创建 jedis 连接对象
        Jedis jedis = new Jedis("192.168.76.145", 6379);
        // 密码身份登录
        jedis.auth("rainbowsea");

        // 添加 list 数据
        jedis.lpush("name_list", "jack", "tom", "nono");

        List&lt;String&gt; nameList = jedis.lrange("name_list", 0, -1);
        for (String name : nameList) {
            System.out.println("name --&gt;" + name);
        }

        jedis.close();

    }
}
</code></pre>
<h2 id="25-java程序通过-jedis-当中操作-redis-的-set-集合">2.5 Java程序通过 Jedis 当中操作 Redis 的 set 集合</h2>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250203211510187-2010199208.png" alt="在这里插入图片描述" loading="lazy"></p>
<pre><code class="language-java">
import org.junit.Test;
import redis.clients.jedis.Jedis;

import java.util.List;
import java.util.Set;

public class JedisTest {
    // set 操作
    @Test
    public void set() {
        // 创建 jedis 连接对象
        Jedis jedis = new Jedis("192.168.76.145", 6379);
        // 密码身份登录
        jedis.auth("rainbowsea");

        jedis.sadd("city","北京","上海");
        jedis.sadd("city","广州");
        jedis.sadd("city","深圳");

        Set&lt;String&gt; smembers = jedis.smembers("city");
        for (String city : smembers) {
            System.out.println("city --&gt;" + city);
        }

        jedis.close(); // 关闭连接
    }
}
</code></pre>
<h2 id="26-java程序通过-jedis-当中操作-redis-的-hash-哈希表">2.6 Java程序通过 Jedis 当中操作 Redis 的 hash 哈希表</h2>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250203211510073-2055638016.png" alt="在这里插入图片描述" loading="lazy"></p>
<pre><code class="language-java">
import org.junit.Test;
import redis.clients.jedis.Jedis;

import java.util.List;
import java.util.Set;

public class JedisTest {
    // hash操作
    @Test
    public void hash() {
        // 创建 jedis 连接对象
        Jedis jedis = new Jedis("192.168.76.145", 6379);
        // 密码身份登录
        jedis.auth("rainbowsea");

        jedis.hset("hash01", "name", "李白");
        jedis.hset("hash01", "age", "18");

        // 获取hash 的值
        String name = jedis.hget("hash01", "name");
        System.out.println("name - &gt;" + name);
        jedis.close();



    }
}
</code></pre>
<p>也可以先构建一个 Java的 map,然后再加入到 Redis 当中的 hash 值当中。</p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250203211509904-711204200.png" alt="在这里插入图片描述" loading="lazy"></p>
<pre><code class="language-java">
import org.junit.Test;
import redis.clients.jedis.Jedis;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class JedisTest {
    // hash操作

    @Test
    public void hash2() {
        // 创建 jedis 连接对象
        Jedis jedis = new Jedis("192.168.76.145", 6379);
        // 密码身份登录
        jedis.auth("rainbowsea");

        // 先构建一个Java的map
        Map&lt;String, String&gt; maps = new HashMap&lt;&gt;();

        maps.put("job", "Java工程师");
        maps.put("name", "李华");
        maps.put("emial", "lihua@qq.com");

        jedis.hset("hash02", maps);

        // 获取hash 的值
        List&lt;String&gt; person = jedis.hmget("hash02", "name", "job", "emial");
        for (String s : person) {
            System.out.println("s = &gt;" + s);
        }

        jedis.close();


    }
}
</code></pre>
<h2 id="27-java程序通过-jedis-当中操作-redis-的-zset-有序集合">2.7 Java程序通过 Jedis 当中操作 Redis 的 Zset 有序集合</h2>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250203211510310-160267531.png" alt="在这里插入图片描述" loading="lazy"></p>
<pre><code class="language-java">
import org.junit.Test;
import redis.clients.jedis.Jedis;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class JedisTest {


    // zset 有序集合操作
    @Test
    public void zset() {
        // 创建 jedis 连接对象
        Jedis jedis = new Jedis("192.168.76.145", 6379);
        // 密码身份登录
        jedis.auth("rainbowsea");

        jedis.zadd("heros", 1, "关羽");
        jedis.zadd("heros", 2, "张飞");
        jedis.zadd("heros", 3, "赵云");
        jedis.zadd("heros", 4, "马超");
        jedis.zadd("heros", 5, "黄忠");


        // 取出
        Set&lt;String&gt; heros = jedis.zrange("heros", 0, -1);  // 默认是升序(根据 score 评分值升序)
        for (String hero : heros) {
            System.out.println("hero = " + hero);
        }
        jedis.close();
    }
}
</code></pre>
<blockquote>
<p><strong>注意：</strong> 可以使用 <code>zrevrange()</code> 方法/命令，是个<strong>降序(根据 score评分值进行降序)</strong></p>
<pre><code class="language-java">Set&lt;String&gt; heros = jedis.zrevrange("heros", 0, -1);  // 降序(根据 score 评分值降序)
</code></pre>
</blockquote>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250203211510160-1883785077.png" alt="在这里插入图片描述" loading="lazy"></p>
<pre><code class="language-java">
import org.junit.Test;
import redis.clients.jedis.Jedis;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class JedisTest {
    // zset 有序集合操作
    @Test
    public void zset() {
        // 创建 jedis 连接对象
        Jedis jedis = new Jedis("192.168.76.145", 6379);
        // 密码身份登录
        jedis.auth("rainbowsea");

        jedis.zadd("heros", 1, "关羽");
        jedis.zadd("heros", 2, "张飞");
        jedis.zadd("heros", 3, "赵云");
        jedis.zadd("heros", 4, "马超");
        jedis.zadd("heros", 5, "黄忠");


        // 取出
        //Set&lt;String&gt; heros = jedis.zrange("heros", 0, -1);  // 默认是升序(根据 score 评分值升序)
        Set&lt;String&gt; heros = jedis.zrevrange("heros", 0, -1);  // 降序(根据 score 评分值降序)
        for (String hero : heros) {
            System.out.println("hero = " + hero);
        }
        jedis.close();
    }
}
</code></pre>
<h1 id="3-最后">3. 最后：</h1>
<p>感谢网友的总结：<a href="https://blog.csdn.net/CYY941027/article/details/109110455" target="_blank" rel="noopener nofollow">https://blog.csdn.net/CYY941027/article/details/109110455</a></p>
<blockquote>
<p>“在这个最后的篇章中，我要表达我对每一位读者的感激之情。你们的关注和回复是我创作的动力源泉，我从你们身上吸取了无尽的灵感与勇气。我会将你们的鼓励留在心底，继续在其他的领域奋斗。感谢你们，我们总会在某个时刻再次相遇。”</p>
<p><img src="https://img2024.cnblogs.com/blog/3084824/202502/3084824-20250203211510558-426034258.gif" alt="在这里插入图片描述" loading="lazy"></p>
</blockquote>

</div>
<div class="clear"></div>

		</div>
		<div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.36922075506828705" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-03 21:22">2025-02-03 21:22</span>&nbsp;
<a href="https://www.cnblogs.com/TheMagicalRainbowSea">Rainbow-Sea</a>&nbsp;
阅读(<span id="post_view_count">8</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18697758" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18697758);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18697758', targetLink: 'https://www.cnblogs.com/TheMagicalRainbowSea/p/18697758', title: '六. Redis当中的“发布” 和 “订阅” 的详细讲解说明(图文并茂)' })">举报</a>
</div>
	