
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/shanyou/p/18748718" title="发布于 2025-03-03 17:07">
    <span role="heading" aria-level="2">.NET MCP项目对比分析：MCPSharp、mcpdotnet与ModelContextProtocol.NET</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p>MCP（Model Context Protocol）协议是一种由Anthropic推出的开放协议，旨在实现大型语言模型（LLM）与外部数据源和工具之间的无缝集成。简要对比分析三个.NET的MCP项目（MCPSharp、mcpdotnet、ModelContextProtocol.NET）如下：</p><p>1. 项目概述</p><p>MCPSharp</p><ul><li>简介：MCPSharp(https://github.com/afrise/MCPSharp ) 是一个.NET库，旨在帮助开发者构建Model Context Protocol（MCP）服务器和客户端，这是AI助手和模型使用的标准化API协议。</li><li>核心功能：创建MCP合规的工具和函数、连接现有MCP服务器、将.NET方法暴露为MCP端点、处理MCP协议细节和JSON-RPC通信。</li><li>新特性：与Microsoft.Extensions.AI集成、Semantic Kernel支持、动态工具注册、工具变更通知、复杂对象参数支持、错误处理。</li><li>使用场景：为AI助手创建工具、构建MCP API、暴露现有.NET代码为MCP端点。</li><li>特点：易用的基于属性的API、内置JSON-RPC支持、自动参数验证和类型转换、丰富的文档支持。</li><li>许可证：MIT许可证。</li></ul><p>mcpdotnet</p><ul><li>简介：Mcpdotnet(https://github.com/PederHP/mcpdotnet) 是一个.NET实现的模型上下文协议（MCP），使.NET应用程序能够与MCP客户端和服务器进行交互。</li><li>核心功能：支持多种MCP功能、遵循规范的实现、提供全面的日志支持。</li><li>兼容性：兼容.NET 8.0及以上版本。</li><li>使用指南：提供客户端和服务器的入门使用方法。</li><li>未来规划：有明确的未来发展路线图。</li><li>许可证：MIT许可证。</li></ul><p>ModelContextProtocol.NET</p><ul><li>简介：ModelContextProtocol.NET（https://github.com/salty-flower/ModelContextProtocol.NET）是一个C# SDK，实现了模型上下文协议（MCP）。</li><li>核心功能：标准输入输出通信、工具集成框架、原生AOT兼容。</li><li>特色功能：计算器演示实现。</li><li>开发中功能：WebSocket支持、资源管理和提示系统。</li><li>使用文档：详细介绍了安装、使用（无托管和有托管）、日志配置和工具实现方法。</li><li>活跃度：最近2个月不活跃。</li><li>许可证： MIT许可证。</li></ul><p>2. 功能对比</p><ul><li>MCPSharp 和 mcpdotnet 都提供了与MCP协议的全面集成，包括服务器和客户端的实现。两者都支持多种MCP功能，并提供了易于使用的API。</li><li>ModelContextProtocol.NET 除了基本的MCP实现外，还提供了额外的工具集成框架和原生AOT兼容等特性，但部分功能仍在开发中。</li><li>MCPSharp 在错误处理、复杂对象参数支持和动态工具注册等方面提供了更丰富的功能，而 mcpdotnet 则在日志支持和兼容性方面表现出色。</li></ul><p>3. 使用场景与便捷性</p><ul><li>MCPSharp 和 mcpdotnet 都适用于需要构建或集成MCP协议的应用程序，特别是那些与AI助手和模型交互的场景。</li><li>MCPSharp 通过其易用的API和丰富的文档支持，为开发者提供了更便捷的开发体验。</li><li>ModelContextProtocol.NET 虽然提供了额外的工具集成框架等特性，但由于部分功能仍在开发中且最近不活跃，可能对于需要稳定功能的项目来说不是最佳选择。</li></ul><p>4. 许可证与开源社区</p><ul><li>三个项目都采用了MIT许可证，这是一种广泛使用的开源许可证，允许自由使用、修改和分发代码。</li><li>MCPSharp 和 mcpdotnet 的GitHub页面显示有活跃的开源社区和贡献者，而 ModelContextProtocol.NET 的社区活跃度较低。</li></ul><p>5. 结论</p><ul><li>如果需要构建或集成MCP协议，并且希望获得丰富的功能、易用的API和稳定的开源社区支持，MCPSharp 是一个不错的选择。</li><li>如果对日志支持和兼容性有特别高的要求，可以考虑使用 mcpdotnet。</li><li>对于那些需要额外工具集成框架等特性但可以接受部分功能仍在开发中的项目来说，ModelContextProtocol.NET 可能是一个备选方案，但需要注意其近期的活跃度较低。</li></ul>
</div>
<div id="MySignature" role="contentinfo">
    <p>欢迎大家扫描下面二维码成为我的客户，扶你上云</p>
<img src="https://images.cnblogs.com/cnblogs_com/shanyou/57459/o_220125090408_%E9%82%80%E8%AF%B7%E4%BA%8C%E7%BB%B4%E7%A0%81-258px.jpeg" width="170">
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.2987804602662037" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-03 17:09">2025-03-03 17:07</span>&nbsp;
<a href="https://www.cnblogs.com/shanyou">张善友</a>&nbsp;
阅读(<span id="post_view_count">94</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18748718" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18748718);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18748718', targetLink: 'https://www.cnblogs.com/shanyou/p/18748718', title: '.NET MCP项目对比分析：MCPSharp、mcpdotnet与ModelContextProtocol.NET' })">举报</a>
</div>
        