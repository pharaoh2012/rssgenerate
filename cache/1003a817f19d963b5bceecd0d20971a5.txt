
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/Bgwithcode/p/18983034" title="发布于 2025-07-13 23:47">
    <span role="heading" aria-level="2">Educational Codeforces Round 180 (Rated for Div. 2) C. Coloring Game</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h4 id="c--coloring-game">C – Coloring Game</h4>
<br>
<p><font color="#000033" size="3" face="微软雅黑"><strong>思路：</strong><br>
不难看出，当 Alice 选完三个数 a b c（其中 a ≤ b ≤ c）后，Bob 能选的只有两种情况：</font></p><font color="#000033" size="3" face="微软雅黑">
<ol>
<li>选择 c，这样只用比较 a+b 和 c 的大小关系，其中 a+b 一定要大于c；</li>
<li>选择数组最大值 a[n]，这样只用比较 a+b+c 和 a[n] 的大小关系，且前者要更大。<br>
所以，排序后枚举外层 a_id 和内层 b_id：</li>
</ol>
<ul>
<li>对于情况1：因为 a+b 的和一开始较小，后续逐渐变大，所以最大能选择的 c_id 一开始会较小，然后会随着 b_id 的变大而变大，该情况的“最大满足当前条件的 c_id”记为 k；</li>
<li>对于情况2：因为 a+b 的和一开始较小，需要较大的 c 才能使得 a+b+c &gt; a[n]，因此满足条件的最小 c_id 一开始会较大，后续随着 a+b 的增大而变小，该情况的“最小满足当前条件的 c_id”记为 l。</li>
</ul>
</font><p><font color="#000033" size="3" face="微软雅黑">那么，对于每对 (a_id, b_id)，可选的 c_id 数量即为 [l, k] 区间长度。利用 k、l 单调移动的特点，可用双指针在 O(n²) 内完成。</font></p>
<details>
<summary>view code</summary>
<pre><code class="language-cpp">#include&lt;bits/stdc++.h&gt;
#define FAST ios::sync_with_stdio(false)
#define abs(a) ((a)&gt;=0?(a):-(a))
#define sz(x) ((int)(x).size())
#define all(x) (x).begin(),(x).end()
#define mem(a,b) memset(a,b,sizeof(a))
#define max(a,b) ((a)&gt;(b)?(a):(b))
#define min(a,b) ((a)&lt;(b)?(a):(b))
#define rep(i,a,n) for(int i=a;i&lt;=n;++i)
#define per(i,n,a) for(int i=n;i&gt;=a;--i)
#define endl '\n'
#define pb push_back
#define mp make_pair
#define fi first
#define se second
using namespace std;
typedef long long ll;
typedef pair&lt;ll,ll&gt; PII;
const int maxn = 1e5+200;
const int inf=0x3f3f3f3f;
const double eps = 1e-7;
const double pi=acos(-1.0);
const int mod = 1e9+7;
inline int lowbit(int x){return x&amp;(-x);}
ll gcd(ll a,ll b){return b?gcd(b,a%b):a;}
void ex_gcd(ll a,ll b,ll &amp;d,ll &amp;x,ll &amp;y){if(!b){d=a,x=1,y=0;}else{ex_gcd(b,a%b,d,y,x);y-=x*(a/b);}}
inline ll qpow(ll a,ll b,ll MOD=mod){ll res=1;a%=MOD;while(b&gt;0){if(b&amp;1)res=res*a%MOD;a=a*a%MOD;b&gt;&gt;=1;}return res;}
inline ll inv(ll x,ll p){return qpow(x,p-2,p);}
inline ll Jos(ll n,ll k,ll s=1){ll res=0; rep(i,1,n+1) res=(res+k)%i; return (res+s)%n;}
inline ll read(){ ll f=1,x=0; char ch=getchar(); while(ch&gt;'9'||ch&lt;'0'){ if(ch=='-') f=-1; ch=getchar(); } while(ch&gt;='0'&amp;&amp;ch&lt;='9'){ x=(x&lt;&lt;3)+(x&lt;&lt;1)+ch-'0'; ch=getchar(); } return x*f; }
int dir[4][2] = {{1,0},{-1,0},{0,1},{0,-1}};

ll a[maxn];

void sol() {
    ll n = read();
    rep(i,1,n) a[i] = read();
    sort(a+1,a+1+n);
    ll ans = 0;
    rep(i,1,n) {
        ll k = i+2, l = n;
        rep(j,i+1,n-1) {
            while(k &lt;= n &amp;&amp; a[i] + a[j] &gt; a[k]) k++;
            while(l &gt; j &amp;&amp; a[i] + a[j] + a[l] &gt; a[n]) l--;
            ll k1 = min(n, k-1), l1 = max(l+1, j+1);
            if(k1 &gt;= l1) ans += (k1 - l1 + 1);
        }
    }
    cout &lt;&lt; ans &lt;&lt; endl;
}

int main() {
    int kase;
    cin &gt;&gt; kase;
    while(kase--) sol();
    return 0;
}
</code></pre>
</details>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.015277777777777777" data-date-updated="2025-07-14 00:09">2025-07-13 23:47</span>&nbsp;
<a href="https://www.cnblogs.com/Bgwithcode">TL自动机</a>&nbsp;
阅读(<span id="post_view_count">5</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18983034);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18983034', targetLink: 'https://www.cnblogs.com/Bgwithcode/p/18983034', title: 'Educational Codeforces Round 180 (Rated for Div. 2) C. Coloring Game' })">举报</a>
</div>
        