
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/idealx/p/18715577" title="发布于 2025-02-14 16:17">
    <span role="heading" aria-level="2">从 14 秒到 1 秒：MySQL DDL 性能优化实战</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="1-问题背景">1. 问题背景</h1>
<p>MySQL版本:8.0.30<br>
测试表数据量:200万</p>
<p>在 MySQL 中，研发人员最初执行了以下 SQL 语句，向表 t_email 中添加了一个允许为 NULL 的列 id3，并设置了默认值为 0：</p>
<pre><code>ALTER TABLE t_email ADD COLUMN id3 INT NULL DEFAULT 0;
</code></pre>
<p>随后发现需要将该列修改为 NOT NULL，于是尝试执行以下语句：</p>
<pre><code>ALTER TABLE t_email MODIFY COLUMN id3 INT NOT NULL DEFAULT 0;
</code></pre>
<p>然而，直接修改时发现无法使用 ALGORITHM=INSTANT，只能使用 ALGORITHM=INPLACE 或 ALGORITHM=COPY，导致操作耗时较长（14.67 秒）。</p>
<p>后续的测试中改为先删除列，再重新添加列的方式，成功使用了 ALGORITHM=INSTANT，速度显著提升。</p>
<h1 id="2-问题分析">2. 问题分析</h1>
<ul>
<li>ALGORITHM=INSTANT 的限制<br>
8.0.12 新添加了INSTANT算法。<br>
MySQL 的 ALGORITHM=INSTANT 是一种快速修改表结构的算法，但它仅支持特定的 DDL 操作。<br>
添加和删除列是支持的,修改列的NULL或NOT NULL不支持.<br>
在尝试将列从 NULL 修改为 NOT NULL 时，ALGORITHM=INSTANT 不支持此操作，因此 MySQL 只能使用 ALGORITHM=INPLACE 或 ALGORITHM=COPY，导致操作耗时较长。<br>
<a href="https://dev.mysql.com/doc/refman/8.0/en/innodb-online-ddl-operations.html#online-ddl-column-operations:~:text=Table%C2%A017.18%C2%A0Online%20DDL%20Support%20for%20Column%20Operations" title="Table 17.18 Online DDL Support for Column Operations" target="_blank" rel="noopener nofollow">Table 17.18 Online DDL Support for Column Operations</a></li>
<li>ALGORITHM=INPLACE 和 ALGORITHM=COPY 的开销<br>
ALGORITHM=INPLACE：在表上直接修改元数据，但仍可能需要重建表数据。<br>
ALGORITHM=COPY：创建新表并复制数据，完成后删除旧表。这种方式通常较慢，尤其是在表数据量较大时。</li>
<li>删除列并重新添加列的优化<br>
通过删除列并重新添加列的方式，可以绕过 MODIFY COLUMN 的限制，直接使用 ALGORITHM=INSTANT，从而显著提升性能。</li>
</ul>
<h1 id="3-解决方案">3. 解决方案</h1>
<ul>
<li>原始方案<br>
添加允许为NULL的列id3，并设置了默认值为0</li>
</ul>
<pre><code>mysql&gt; alter table t_email add column id3 int null default 0;
Query OK, 0 rows affected (0.86 sec)
Records: 0  Duplicates: 0  Warnings: 0
</code></pre>
<p>将列的属性修改为不允许为NULL,其他不变</p>
<pre><code>mysql&gt; alter table t_email modify column id3 int not null default 0;
Query OK, 0 rows affected (14.67 sec)
Records: 0  Duplicates: 0  Warnings: 0
</code></pre>
<ul>
<li>优化后的方案<br>
添加允许为NULL的列id3，并设置了默认值为0。</li>
</ul>
<pre><code>mysql&gt; alter table t_email add column id3 int null default 0, ALGORITHM=INSTANT;
Query OK, 0 rows affected (0.85 sec)
Records: 0  Duplicates: 0  Warnings: 0
</code></pre>
<p>删除id3列，耗时0.98秒。</p>
<pre><code>mysql&gt; alter table t_email drop column id3, ALGORITHM=INSTANT;
Query OK, 0 rows affected (0.98 sec)
Records: 0  Duplicates: 0  Warnings: 0
</code></pre>
<p>重新添加id3列，将属性改为NOT NULL，并设置了默认值为0，耗时0.68秒。</p>
<pre><code>mysql&gt; alter table t_email add column id3 int not null default 0, ALGORITHM=INSTANT;
Query OK, 0 rows affected (0.68 sec)
Records: 0  Duplicates: 0  Warnings: 0
</code></pre>
<h1 id="4-总结">4. 总结</h1>
<p>ALGORITHM=INSTANT 的限制：不支持修改列的 NULL 属性。仅支持特定的 DDL 操作（如添加列、删除列）。虽然不会操作不会阻塞DML,但是在DDL刚开始和结束时，都要获取MDL，如果这两个阶段表上有事务，DDL会因为获取不到MDL而被阻塞。<br>
优化思路：对于不支持 ALGORITHM=INSTANT 的操作，可以尝试通过删除列并重新添加列的方式绕过限制。这种方式在表数据量越大时，性能提升越明显。</p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.001340127835648148" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-14 16:18">2025-02-14 16:17</span>&nbsp;
<a href="https://www.cnblogs.com/idealx">ideal_x</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18715577" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18715577);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18715577', targetLink: 'https://www.cnblogs.com/idealx/p/18715577', title: '从 14 秒到 1 秒：MySQL DDL 性能优化实战' })">举报</a>
</div>
        