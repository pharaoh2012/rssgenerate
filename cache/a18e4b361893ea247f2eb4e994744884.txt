
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/qizhou/p/18717381" title="发布于 2025-03-01 17:50">
    <span role="heading" aria-level="2">wikidata介绍和查询</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p>  <a href="https://www.wikidata.org/wiki/Wikidata:Main_Page" target="_blank" rel="noopener nofollow"><strong>Wikidata</strong></a>是一个大型结构化开源知识图，为维基百科等项目提供支持。我们可使用<strong>SPARQL（<span style="font-family: &quot;Microsoft YaHei&quot;"><a href="https://www.wikidata.org/wiki/Wikidata:SPARQL_tutorial" rel="noopener nofollow">Wikidata官方Tutorial</a></span>）</strong>对其进行查询。SPARQL是一种专为 <strong>RDF（Resource Description Framework）</strong>数据模型设计的查询语言。RDF通过三元组（主语subject，谓词predicate，宾语object）来组织数据。我们可在<strong>WDQS (<a href="https://query.wikidata.org/" target="_blank" rel="noopener nofollow">WikiData Query Service</a>)</strong>中使用SPARQL对Wikidata进行在线查询。</p>
<h1>Wikidata介绍</h1>
<h2>实体和属性</h2>
<p>  Wikidata中最基本概念为<strong>实体（Entity）</strong>和<strong>属性（Property）</strong>。由于语义多样性，每个实体和属性都会以字母加数字的形式进行唯一化，实体以Q为前缀，属性以P为前缀，如<a href="https://www.wikidata.org/wiki/Q148" target="_blank" rel="noopener nofollow">Q148</a>&nbsp;(China)，<a href="https://www.wikidata.org/wiki/Property:P31" target="_blank" rel="noopener nofollow">P31</a> (Instance of)。实体和属性分别构成了整个Wikidata知识图的节点和边。<strong>需注意的是，</strong>属性并不一定为知识图的一条边（连接两个实体）。这种情况十分常见，如<a href="https://www.wikidata.org/wiki/Property:P31" target="_blank" rel="noopener nofollow">P31</a> (Instance of) 用于表明实体所属的类别，将指向该实体对应的父类实体；而<a href="https://www.wikidata.org/wiki/Property:P1082" target="_blank" rel="noopener nofollow">P1082</a> (Population) 用于表明实体（如某个国家）的人口数量，将直接对应一个数字。此外，属性不一定只对应一个值，由于人口会随时间不断变化，因此<a href="https://www.wikidata.org/wiki/Property:P1082" target="_blank" rel="noopener nofollow">P1082</a> (Population) 通常会有多个对应不同时间戳的值。</p>
<h2>数据结构</h2>
<p>  由于在线查询受制于网速，可在<a href="https://dumps.wikimedia.org/wikidatawiki/" target="_blank" rel="noopener nofollow">WikidataDumps</a>下载Wikidata的数据备份。如下载<code>entities/latest-all.json.bz2</code>，即可将整个Wikidata的知识图数据下载至一个json文件中（压缩文件约100GB，解压文件超过1TB）。json文件包含一个列表，列表中每个元素为一个字典，每个字典包含如下字段：</p>
<ul>
<li><strong>type</strong>：类型，实体item或属性property。大部分是实体item，还有property。</li>
<li><strong>id</strong>：唯一标识符。</li>
<li><strong>labels</strong>：多语言标签，即名称。</li>
<li><strong>descriptions</strong>：多语言描述。</li>
<li><strong>aliases</strong>：多语言别名。</li>
<li><strong>claims</strong>：声明，包含属性及其对应的值。构建知识图最重要的字段。</li>
<li><strong>sitelinks</strong>：在其他维基项目中的链接，如中文wiki、法文wiki等。</li>
<li><strong>pageid</strong>：在维基百科等站点中的页面 ID。</li>
<li><strong>ns</strong>：所在的命名空间 (namespace)。条目通常在 0 命名空间，而用户页面在 2 命名空间。</li>
<li><strong>title</strong>：标题。</li>
<li><strong>lastrevid</strong>：最后一次修改的版本 ID。</li>
<li><strong>modified</strong>：最后修改时间。</li>
</ul>
<p>  其中，声明<strong>claims</strong>的字典结构较为复杂，以属性标识符<code>P[...]</code>为键。每个键对应一个列表，存放相应的多条属性内容。属性内容字典结构如下：</p>
<ul>
<li><strong>mainsnak</strong>：主体部分，包含属性和属性值
<ul>
<li>snaktype：mainsnak 的类型。常见有：value表示有有效的属性值；novalue表示没有值；somevalue表示值未知或不确定。</li>
<li>property：属性的ID（例如：P31）。</li>
<li>datavalue：属性的值，可能是不同的数据类型，如实体、时间、量化数据等。
<ul>
<li>value：具体的值（例如：Q5，表示人类）。</li>
<li>type：值的类型，常见的类型有：
<ul>
<li>wikibase-entityid：表示实体（Item 或 Property）类型。</li>
<li>time：表示时间。</li>
<li>quantity：表示量化数据。</li>
<li>string：表示字符串（例如：文本类型的描述）。</li>
</ul>
</li>
<li>datatype：值的数据类型，通常是 wikibase-item（指向另一个实体）或 quantity（表示数量）。</li>
</ul>
</li>
</ul>
</li>
<li><strong>type</strong>：性质。可取值如：statement，最常见，表示这是一个有效的声明；mediainfo表示与媒体文件相关的信息；sitelinks涉及网站链接。</li>
<li><strong>qualifiers</strong>：限定条件，用来描述属性值的更多信息（通常是一个列表）。例如，某个属性值可能会有时间戳（时间限定）、地点限定等。
<ul>
<li>property：限定条件的属性ID。</li>
<li>datavalue：限定条件的值，通常是某个属性的具体内容。</li>
</ul>
</li>
<li><strong>qualifiers-order</strong>：限定条件的字段顺序，帮助理解属性的附加信息。</li>
<li><strong>rank</strong>：声明的等级。常见的等级有：
<ul>
<li>normal：普通等级。</li>
<li>preferred：首选等级（如果存在多个声明）。</li>
<li>deprecated：已弃用的声明。</li>
</ul>
</li>
<li><strong>references</strong>：该声明的参考来源，通常是引用的文献或其他来源。
<ul>
<li>snaks：引用的具体内容，类似于声明的 mainsnak，包括属性ID和对应的值。</li>
<li>snaks-order：引用的属性的顺序。</li>
</ul>
</li>
<li><strong>id</strong>：声明的唯一ID（用于区分不同的声明）。</li>
</ul>
<h1>SPARQL-Wikidata查询</h1>
<p>  以下通过简单例子来介绍如何使用SPARQL查询Wikidata知识图。语法类似SQL，利用<code>SELECT</code>和<code>WHERE</code>，其关键是使用主谓宾三元组来构成查询。</p>
<h2>基本用法 — 主谓宾三元组</h2>
<p><strong>  查询巴赫的所有孩子：</strong></p>
<pre class="highlighter-prismjs prismjs-lines-highlighted language-sql" tabindex="0"><code>SELECT ?child
WHERE
{
# ?child  father   Bach
  ?child wdt:P22 wd:Q1339.
}</code></pre>
<p>  其中<code>?child</code>为待查询变量，可随意命名；<code>wd</code>表示WikiData的简写，用于引用实体；<code>wdt</code>表示WikiData Truthy，用于引用实体属性的值。语句连起来即：有属性<code>father (P22)</code>值为实体<code>Bach (Q1339)</code>的实体。以上将查询到实体ID的列表。如果要在列表中加上标签列，可加上wikidata的魔术语句：</p>
<pre class="highlighter-prismjs prismjs-lines-highlighted language-sql" tabindex="0"><code>SELECT ?child ?childLabel
WHERE
{
# ?child  father   Bach
  ?child wdt:P22 wd:Q1339.
  SERVICE wikibase:label { bd:serviceParam wikibase:language "en". }
}</code></pre>
<p>  其中<code>wikibase:label</code>为指定实体标签的固定字段。标签变量<code>?childLabel</code>的命名是固定的：必须以为要查询的实体的变量为前缀，即<code>?child</code>；并以首字母大写的待查询字段为后缀，即<code>Label</code>。</p>
<p>  <strong>巴赫和Maria Barbara Bach生的孩子中，既是作曲家又是钢琴家的孩子：</strong></p>
<pre class="highlighter-prismjs prismjs-lines-highlighted language-sql" tabindex="0"><code>SELECT ?child
WHERE
{
  ?child wdt:P22 wd:Q1339; 
         wdt:P25 wd:Q57487; # P25: mother  
         wdt:P106 wd:Q36834, wd:Q486748. # P106: occupation  
}</code></pre>
<p>  这里展示了分号<code>;</code>逗号<code>,</code>和句号<code>.</code>的用法和区别。如分号可用于省略主语<code>?child</code>，逗号可用于省略谓语<code>wdt:P106</code>。</p>
<p><strong>  巴赫的（外）孙子/女：</strong></p>
<pre class="highlighter-prismjs prismjs-lines-highlighted language-sql" tabindex="0"><code>SELECT ?grandChild
WHERE
{
  wd:Q1339 wdt:P40 ?child. # P40: child  
  ?child wdt:P40 ?grandChild.
}</code></pre>
<p>  这里展示了一个多跳查询，即通过<code>?child</code>作为中间跳板，限定了<code>?grandChild</code>与巴赫<code>Q1339</code>的关系。可进一步简化为：</p>
<pre class="highlighter-prismjs prismjs-lines-highlighted language-sql" tabindex="0"><code>SELECT ?grandChild
WHERE
{
  wd:Q1339 wdt:P40 [ wdt:P40 ?grandChild ].
}</code></pre>
<p>  以上使用方括号<code>[]</code>来表达“有以<code>?grandChild</code>为孩子的实体”，从而省略了前面的跳板变量<code>?child</code>。可理解为一个使用定语从句的复合句：<code>Bach has a child who has a child ?grandchild.</code>。</p>
<h2>符号拓展<code>/*+|</code></h2>
<p>  符号<code>/</code>表示属性路径，用于连接多条属性，构成多跳查询；符号<code>*+</code>类似正则表达式，<code>*</code>表示匹配零个或多个属性，<code>+</code>表示匹配一个或多个属性；符号<code>|</code>表示“或”。以下展示代码实例。</p>
<p>  <strong>所有艺术作品：</strong></p>
<pre class="highlighter-prismjs prismjs-lines-highlighted language-sql" tabindex="0"><code>SELECT ?work ?workLabel
WHERE
{
  ?work wdt:P31/wdt:P279* wd:Q838948. # instance of any subclass of work of art
  SERVICE wikibase:label { bd:serviceParam wikibase:language "[AUTO_LANGUAGE]". }
}</code></pre>
<p><strong>  巴赫的所有后代：</strong></p>
<pre class="highlighter-prismjs prismjs-lines-highlighted language-sql" tabindex="0"><code>SELECT ?descendant ?descendantLabel
WHERE
{
  wd:Q1339 wdt:P40+ ?descendant.
  SERVICE wikibase:label { bd:serviceParam wikibase:language "[AUTO_LANGUAGE]". }
}</code></pre>
<p>  <strong>巴赫的所有后代：</strong></p>
<pre class="highlighter-prismjs prismjs-lines-highlighted language-sql" tabindex="0"><code>SELECT ?descendant ?descendantLabel
WHERE
{
  ?descendant (wdt:P22|wdt:P25)+ wd:Q1339.
  SERVICE wikibase:label { bd:serviceParam wikibase:language "[AUTO_LANGUAGE]". }
}</code></pre>
<p>  此外，其中的问号<code>?</code>也是有语义的，表示：匹配一个或零个元素。</p>
<h2>声明限定 Qualifiers</h2>
<p>  用Qualifiers来对要查询的实体进行细粒度限定。</p>
<h2>排序和数量限制</h2>
<p>  用<code>ORDER BY</code>对查询结果进行排序，用<code>LIMIT</code>限定返回结果的最大数量。</p>
<p>  <strong>降序返回人口最大的前十个主权国家：</strong></p>
<pre class="highlighter-prismjs prismjs-lines-highlighted language-sql" tabindex="0"><code>SELECT ?country ?countryLabel ?population
WHERE
{
  ?country wdt:P31/wdt:P279* wd:Q3624078; # P31: instance of; P279: subclass of; Q3624078: sovereign state
           wdt:P1082 ?population. # P1082: population
  SERVICE wikibase:label { bd:serviceParam wikibase:language "en". }
}
ORDER BY DESC(?population)
LIMIT 10</code></pre>
<p>  <code>DESC</code>表示降序，<code>ASC</code>表示升序，默认升序。</p>
<h2>可选条件</h2>
<p>  如果想返回部分字段，但不想让其影响检索条件，可使用<code>OPTIONAL</code>。</p>
<p>  <strong>所有Arthur Conan Doyle的书，并且检索的字段title等是可选的：</strong></p>
<pre class="highlighter-prismjs prismjs-lines-highlighted language-sql" tabindex="0"><code>SELECT ?book ?title ?illustratorLabel ?publisherLabel ?published
WHERE
{
  ?book wdt:P50 wd:Q35610. # P50: auther; Q35610: Arthur Conan Doyle
  OPTIONAL { ?book wdt:P1476 ?title. }
  OPTIONAL { ?book wdt:P110  ?illustrator. }
  OPTIONAL { ?book wdt:P123  ?publisher. }
  OPTIONAL { ?book wdt:P577  ?published. }
  SERVICE wikibase:label { bd:serviceParam wikibase:language "[AUTO_LANGUAGE]". }
}</code></pre>
<p>  其中title、illustrator等的匹配并不影响<code>?book wdt:P50 wd:Q35610.</code>的结果，能匹配上就返回值，否则该值填空。注意和下面代码的区别：</p>
<pre class="highlighter-prismjs prismjs-lines-highlighted language-sql" tabindex="0"><code>SELECT ?book ?title ?illustratorLabel ?publisherLabel ?published
WHERE
{
  ?book wdt:P50 wd:Q35610.
  OPTIONAL {
    ?book wdt:P1476 ?title;
          wdt:P110 ?illustrator;
          wdt:P123 ?publisher;
          wdt:P577 ?published.
  }
  SERVICE wikibase:label { bd:serviceParam wikibase:language "en". }
}</code></pre>
<p>  这个是<code>OPTIONAL</code>中任意字段不匹配，全都填空。</p>
<h2>表达式<code>FILTER</code>和<code>BIND</code></h2>
<p>  用表达式进行判断等操作。用到再记录。</p>
<h2>组合<code>GROUPING</code></h2>
<p>  把结果通过某个字段组合起来。用到再记录。</p>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.017540151703703703" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-01 17:50">2025-03-01 17:50</span>&nbsp;
<a href="https://www.cnblogs.com/qizhou">颀周</a>&nbsp;
阅读(<span id="post_view_count">0</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18717381" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18717381);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18717381', targetLink: 'https://www.cnblogs.com/qizhou/p/18717381', title: 'wikidata介绍和查询' })">举报</a>
</div>
        