
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/heymar/p/18574171" title="发布于 2024-11-28 21:35">
    <span role="heading" aria-level="2">ThreeJs-03材质进阶</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h1 id="一uv贴图">一.uv贴图</h1>
<p>在3D计算机图形学中，UV映射是一种将2D纹理映射到3D模型表面的方法。在这里，“U”和“V”代表了2D纹理空间的坐标，这与2D笛卡尔坐标系统中的“X”和“Y”是类似的。在3D模型的每个顶点上，都会有一组对应的UV坐标，它们定义了3D模型在这个顶点上的表面应当对应纹理图像的哪个部分。</p>
<p>UV坐标通常被储存在模型的顶点属性中，并与其他属性（如顶点位置、法线向量等）一起被传递到渲染管线中。在渲染过程中，像素着色器会使用这些UV坐标来从纹理中采样颜色，然后用这些颜色来着色模型的表面。</p>
<p>UV坐标的取值范围通常是[0, 1]，其中(0,0)对应纹理的左下角，(1,1)对应纹理的右上角。然而，也可以使用超出这个范围的值，这通常会导致纹理的重复或镜像，具体的效果取决于纹理的环绕模式（wrap mode）。</p>
<p>UV映射的主要挑战之一是如何有效地将2D纹理映射到复杂的3D形状上，以避免拉伸、压缩或其他形式的失真。这通常需要专门的UV展开或UV拆分工具，以及一些手动的调整工作。</p>
<p>总的来说，UV属性在3D场景中是非常重要的，它们定义了如何将纹理映射到3D模型的表面，从而极大地影响了模型的最终视觉效果。</p>
<h2 id="解释">解释</h2>
<p>uv可以理解为一个坐标系，主要作用于给物体进行贴图的</p>
<p>为什么这一个贴图贴上去，就刚刚好图片在物体正中间不偏不倚</p>
<p><img src="https://heymar.oss-cn-chengdu.aliyuncs.com/undefined202411281357025.png" alt="image-20241119213759699" loading="lazy"></p>
<p>这个鸭子使用很多个平面三角形组成，那么为什么用了这么一张图片他知道眼睛这里用黑色，嘴巴那里用稍微黑一点的</p>
<p><img src="https://heymar.oss-cn-chengdu.aliyuncs.com/undefined202411281357994.png" alt="image-20241119213917384" loading="lazy"></p>
<p><img src="https://heymar.oss-cn-chengdu.aliyuncs.com/undefined202411281357008.png" alt="image-20241119213946010" loading="lazy"></p>
<p><img src="https://heymar.oss-cn-chengdu.aliyuncs.com/undefined202411281357063.png" alt="image-20241119213935994" loading="lazy"></p>
<p><mark>举例</mark></p>
<p>创建一个平面几何体，给上贴图</p>
<p><img src="https://heymar.oss-cn-chengdu.aliyuncs.com/undefined202411281357067.png" alt="image-20241119214048101" loading="lazy"></p>
<p>但是这个几何体使用创建顶点的方式实现的</p>
<p><img src="https://heymar.oss-cn-chengdu.aliyuncs.com/undefined202411281357077.png" alt="image-20241119214135181" loading="lazy"></p>
<p>再创建一个几何体，不创建uv，直接给贴图</p>
<p><img src="https://heymar.oss-cn-chengdu.aliyuncs.com/undefined202411281357533.png" alt="image-20241119214217850" loading="lazy"></p>
<p>左边就是有uv的，右边没有uv不知道怎么贴图就是白色</p>
<p><img src="https://heymar.oss-cn-chengdu.aliyuncs.com/undefined202411281357744.png" alt="image-20241119214251515" loading="lazy"></p>
<p>之前用顶点，三个点是一个点的位置</p>
<p><img src="https://heymar.oss-cn-chengdu.aliyuncs.com/undefined202411281357874.png" alt="image-20241119214429262" loading="lazy"></p>
<p>这里创建uv坐标，并且设置属性的时候声明两个点是一个坐标的位置</p>
<p><img src="https://heymar.oss-cn-chengdu.aliyuncs.com/undefined202411281357889.png" alt="image-20241119214556859" loading="lazy"></p>
<p><img src="https://heymar.oss-cn-chengdu.aliyuncs.com/undefined202411281358089.png" alt="image-20241119214602936" loading="lazy"></p>
<p>还可以把第四个点拉到下面来</p>
<p><img src="https://heymar.oss-cn-chengdu.aliyuncs.com/undefined202411281358376.png" alt="image-20241119214653529" loading="lazy"></p>
<p><img src="https://heymar.oss-cn-chengdu.aliyuncs.com/undefined202411281358927.png" alt="image-20241119214714272" loading="lazy"></p>
<p><img src="https://heymar.oss-cn-chengdu.aliyuncs.com/undefined202411281358056.png" alt="image-20241119214719475" loading="lazy"></p>
<p>眼睛顶点</p>
<p><img src="https://heymar.oss-cn-chengdu.aliyuncs.com/undefined202411281358183.png" alt="image-20241119214822927" loading="lazy"></p>
<p><img src="https://heymar.oss-cn-chengdu.aliyuncs.com/undefined202411281358208.png" alt="image-20241119214832407" loading="lazy"></p>
<h1 id="二法向量">二.法向量</h1>
<h2 id="1解释">1.解释</h2>
<p>法向量就是投射于物体的一条直线，可以形成反射效果</p>
<p><img src="https://heymar.oss-cn-chengdu.aliyuncs.com/undefined202411281358541.png" alt="image-20241120202053070" loading="lazy"></p>
<p>如果是快速创建的一个物体他会自动有法向量，但是通过顶点创建就没有，所以在环境贴图里面就不能反射</p>
<p><img src="https://heymar.oss-cn-chengdu.aliyuncs.com/undefined202411281358186.png" alt="image-20241120202154785" loading="lazy"></p>
<p>开启法向量</p>
<p><img src="https://heymar.oss-cn-chengdu.aliyuncs.com/undefined202411281358235.png" alt="image-20241120202222091" loading="lazy"></p>
<p>同时环境贴图要设置每一个可以作用的材质</p>
<p><img src="https://heymar.oss-cn-chengdu.aliyuncs.com/undefined202411281358286.png" alt="image-20241120202254224" loading="lazy"></p>
<p><img src="https://heymar.oss-cn-chengdu.aliyuncs.com/undefined202411281358757.gif" alt="GIF" loading="lazy"></p>
<p><strong>除了自动计算法向量也可以自己设置顶点</strong></p>
<p><img src="https://heymar.oss-cn-chengdu.aliyuncs.com/undefined202411281358224.png" alt="image-20241120202518117" loading="lazy"></p>
<p><img src="https://heymar.oss-cn-chengdu.aliyuncs.com/undefined202411281358307.png" alt="image-20241120202524101" loading="lazy"></p>
<p>辅助线开启</p>
<p><img src="https://heymar.oss-cn-chengdu.aliyuncs.com/undefined202411281358634.png" alt="image-20241120202545762" loading="lazy"></p>
<p><img src="https://heymar.oss-cn-chengdu.aliyuncs.com/undefined202411281358856.png" alt="image-20241120202600981" loading="lazy"></p>
<p>在3D计算机图形学中，"法向量"（或简称为"法线"）是一个向量，表示3D模型表面在某一点的方向。在每个顶点上，都会有一个关联的法向量，这个向量通常被归一化，也就是说它的长度为1。</p>
<p><img src="https://heymar.oss-cn-chengdu.aliyuncs.com/undefined202411281358242.png" alt="" loading="lazy"></p>
<p>顶点的法向属性在很多计算图形的领域都有应用，但最常见的用途是在光照计算中。当光源照亮一个3D模型的时候，每个表面的亮度取决于光线与表面的相对角度。这个角度可以通过比较光线方向和表面法向量来计算。这样，即使表面的几何形状非常复杂，也可以通过使用每个顶点的法向量来进行准确的光照计算。</p>
<p>法向量通常在模型的创建过程中被计算出来，然后存储在每个顶点的属性中。对于有些表面，如平面或者球体，法向量可以通过简单的数学公式来计算。但对于更复杂的几何形状，可能需要通过比如"法线映射"（normal mapping）等更复杂的技术来生成。</p>
<p>除了用于光照计算外，法向量也可以用于一些其他的图形效果，如环境光遮蔽（ambient occlusion）、凹凸映射（bump mapping）、反射和折射等。总的来说，法向属性在3D场景中是非常重要的，它们对于渲染真实感的图像有着关键的作用。</p>
<h2 id="2顶点转换">2.顶点转换</h2>
<p>也就是之前用的position、rotate、scale等不仅可以直接用方法，还可以用顶点的方式</p>
<p>初始顶点的位置</p>
<p><img src="https://heymar.oss-cn-chengdu.aliyuncs.com/undefined202411281358393.png" alt="image-2024112020530270" loading="lazy"></p>
<p>想让他移动x轴为4</p>
<p><img src="https://heymar.oss-cn-chengdu.aliyuncs.com/undefined202411281358497.png" alt="image-20241120205325556" loading="lazy"></p>
<p><img src="https://heymar.oss-cn-chengdu.aliyuncs.com/undefined202411281358895.png" alt="image-20241120205331878" loading="lazy"></p>
<h2 id="3包围盒">3.包围盒</h2>
<p>什么是包围盒，比如这一个鸭子，有一个立方体框柱就是他的包围盒</p>
<p>好处在于如果想去计算鸭子的大小，那么会去计算很多个顶点很麻烦，但是如果他有一个包围盒计算包围盒的大小也就上下左右几个顶点就可以了</p>
<p><img src="https://heymar.oss-cn-chengdu.aliyuncs.com/undefined202411281358176.png" alt="image-2024112020580344" loading="lazy"></p>
<p>实现</p>
<p><img src="https://heymar.oss-cn-chengdu.aliyuncs.com/undefined202411281358569.png" alt="image-20241120205834672" loading="lazy"></p>
<p>直接加载模型</p>
<p><img src="https://heymar.oss-cn-chengdu.aliyuncs.com/undefined202411281358722.png" alt="image-20241120205926276" loading="lazy"></p>
<p>可以查看这个物体的名字和id</p>
<p><img src="https://heymar.oss-cn-chengdu.aliyuncs.com/undefined202411281358059.png" alt="image-20241120210018549" loading="lazy"></p>
<p><img src="https://heymar.oss-cn-chengdu.aliyuncs.com/undefined202411281358704.png" alt="image-20241120210028155" loading="lazy"></p>
<p><img src="https://heymar.oss-cn-chengdu.aliyuncs.com/undefined202411281358745.png" alt="image-2024112021003348" loading="lazy"></p>
<p>在导入模型的回调里面</p>
<p><img src="https://heymar.oss-cn-chengdu.aliyuncs.com/undefined202411281358180.png" alt="image-20241120210330617" loading="lazy"></p>
<p><mark>但是此时的包围盒会很大，因为他的缩放给的值很大</mark></p>
<h3 id="31-世界矩阵">3.1 世界矩阵</h3>
<p>这个时候就要用到世界矩阵，让他的变换和本地的一样比例</p>
<p><img src="https://heymar.oss-cn-chengdu.aliyuncs.com/undefined202411281358662.png" alt="image-20241120210650583" loading="lazy"></p>
<p><img src="https://heymar.oss-cn-chengdu.aliyuncs.com/undefined202411281358740.png" alt="image-2024112021071705" loading="lazy"></p>
<p><img src="https://heymar.oss-cn-chengdu.aliyuncs.com/undefined202411281358905.gif" alt="GIF" loading="lazy"></p>
<h2 id="4几何体居中和获取几何体中心">4.几何体居中和获取几何体中心</h2>
<p>有了包围盒，可以快速让一个模型居中</p>
<p><img src="https://heymar.oss-cn-chengdu.aliyuncs.com/undefined202411281358480.png" alt="image-20241120211024724" loading="lazy"></p>
<p><img src="https://heymar.oss-cn-chengdu.aliyuncs.com/undefined202411281358986.png" alt="image-20241120211036218" loading="lazy"></p>
<h2 id="5获取多个物体包围盒">5.获取多个物体包围盒</h2>
<p>加入有多个物体，想让他们在一起形成一个大的包围盒去操作</p>
<p>得益于包围盒有这么一个方法</p>
<p><img src="https://heymar.oss-cn-chengdu.aliyuncs.com/undefined202411281358281.png" alt="image-20241120211613201" loading="lazy"></p>
<p>三个小球</p>
<p><img src="https://heymar.oss-cn-chengdu.aliyuncs.com/undefined202411281358712.png" alt="image-20241120211630223" loading="lazy"></p>
<p><img src="https://heymar.oss-cn-chengdu.aliyuncs.com/undefined202411281358934.png" alt="image-20241120211746532" loading="lazy"></p>
<p><img src="https://heymar.oss-cn-chengdu.aliyuncs.com/undefined202411281358038.png" alt="image-20241120211753655" loading="lazy"></p>
<p>也可以快速直接计算</p>
<p><img src="https://heymar.oss-cn-chengdu.aliyuncs.com/undefined202411281358290.png" alt="image-20241120211817719" loading="lazy"></p>
<p><img src="https://heymar.oss-cn-chengdu.aliyuncs.com/undefined202411281358416.png" alt="image-20241120211826350" loading="lazy"></p>
<h2 id="6边缘几何体和线框几何体">6.边缘几何体和线框几何体</h2>
<p>边缘几何体就是边缘是经过计算得到，不再是每个平面都是用三角形组成，而线段几何体就是之前的wireframe，将所有面用三角线组成</p>
<p><img src="https://heymar.oss-cn-chengdu.aliyuncs.com/undefined202411281358138.png" alt="image-20241120212559953" loading="lazy"></p>
<p>拿到物体的几何体，创建边缘几何体，要用到线段材质</p>
<p><img src="https://heymar.oss-cn-chengdu.aliyuncs.com/undefined202411281358259.png" alt="image-20241120213019806" loading="lazy"></p>
<p><img src="https://heymar.oss-cn-chengdu.aliyuncs.com/undefined202411281358612.png" alt="image-20241120212707824" loading="lazy"></p>
<p>此时方向不一致，那是因为这是直接拿到物体的顶点来创建的，得到的最原始的位置旋转等，如果想要跟这个模型一模一样，那么需要复制到这个物体的矩阵</p>
<p>开启建筑物的矩阵，然后让边缘几何体赋值建筑物的矩阵，并且需要更新，decompose就是结构当前的信息分别给到边缘几何体的位置、旋转和缩放</p>
<p><img src="https://heymar.oss-cn-chengdu.aliyuncs.com/undefined202411281358154.png" alt="image-20241120213222043" loading="lazy"></p>
<p>完全重合</p>
<p><img src="https://heymar.oss-cn-chengdu.aliyuncs.com/undefined202411281358436.png" alt="image-20241120213351331" loading="lazy"></p>
<p><mark>线段几何体</mark></p>
<p><img src="https://heymar.oss-cn-chengdu.aliyuncs.com/undefined202411281358666.png" alt="image-20241120213426151" loading="lazy"></p>
<p><img src="https://heymar.oss-cn-chengdu.aliyuncs.com/undefined202411281358685.png" alt="image-20241120213510063" loading="lazy"></p>
<p><mark>如果一个模型过大，里面很多物体都想变为边缘几何体，就可以通过遍历，traverse专门获取里面的3D物体</mark></p>
<p><img src="https://heymar.oss-cn-chengdu.aliyuncs.com/undefined202411281358899.png" alt="image-20241120213834430" loading="lazy"></p>
<p><img src="https://heymar.oss-cn-chengdu.aliyuncs.com/undefined202411281358083.png" alt="image-20241120213850093" loading="lazy"></p>
<p><img src="https://heymar.oss-cn-chengdu.aliyuncs.com/undefined202411281358761.gif" alt="GIF" loading="lazy"></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="27.9520229723125" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2024-11-28 21:36">2024-11-28 21:35</span>&nbsp;
<a href="https://www.cnblogs.com/heymar">Heymar-10</a>&nbsp;
阅读(<span id="post_view_count">110</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18574171" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18574171);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18574171', targetLink: 'https://www.cnblogs.com/heymar/p/18574171', title: 'ThreeJs-03材质进阶' })">举报</a>
</div>
        