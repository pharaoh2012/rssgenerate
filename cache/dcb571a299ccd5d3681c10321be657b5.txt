
        <h2>
            <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/zizifn/p/18742379" title="发布于 2025-02-28 00:11">
    <span role="heading" aria-level="2">从 0 写个微小的 Javascript 运行时(01) -- 什么是 Javascript 运行时？</span>
    

</a>

        </h2>
        <div class="postbody">
            <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p><img src="https://pic4.zhimg.com/v2-ebf363e42000a0e037c49589dae28a13_1440w.jpg" alt="" loading="lazy"></p>
<p>对于 Nodejs 而言. 简单的可以理解为下面,</p>
<p><img src="https://pic1.zhimg.com/v2-aafe3c290d022b03e802aa902877927e_1440w.jpg" alt="" loading="lazy"></p>
<h3 id="众多的-javascript-运行时">众多的 Javascript 运行时</h3>
<p>现在市面上有很多 Javascript 运行时。下面是比较有名的几个。</p>
<h3 id="nodejs"><a href="https://zhida.zhihu.com/search?content_id=252925435&amp;content_type=Article&amp;match_order=1&amp;q=Node.js&amp;zhida_source=entity" target="_blank" rel="noopener nofollow">Node.js</a></h3>
<ul>
<li>基于 <a href="https://zhida.zhihu.com/search?content_id=252925435&amp;content_type=Article&amp;match_order=1&amp;q=V8+%E5%BC%95%E6%93%8E&amp;zhida_source=entity" target="_blank" rel="noopener nofollow">V8 引擎</a>（Chrome 的 JavaScript 引擎）和 C++ 构建</li>
<li>主要用途：服务端和后端应用开发</li>
<li>特点：事件驱动、非阻塞 I/O、丰富的包生态系统（npm）</li>
</ul>
<h3 id="deno"><a href="https://zhida.zhihu.com/search?content_id=252925435&amp;content_type=Article&amp;match_order=1&amp;q=Deno&amp;zhida_source=entity" target="_blank" rel="noopener nofollow">Deno</a></h3>
<ul>
<li>基于 V8 和 Rust 构建</li>
<li>主要用途：安全且现代化的运行时，支持 ES 模块</li>
<li>特点：内置 TypeScript 支持，默认安全（沙箱机制）</li>
</ul>
<h3 id="bun"><a href="https://zhida.zhihu.com/search?content_id=252925435&amp;content_type=Article&amp;match_order=1&amp;q=Bun&amp;zhida_source=entity" target="_blank" rel="noopener nofollow">Bun</a></h3>
<ul>
<li>使用 Zig 和 JavaScriptCore（WebKit 引擎）构建</li>
<li>主要用途：高性能的一体化解决方案（打包工具、测试运行器等）</li>
<li>特点：快速启动、集成工具、兼容 Node.js</li>
</ul>
<h3 id="cloudflare-workers"><a href="https://zhida.zhihu.com/search?content_id=252925435&amp;content_type=Article&amp;match_order=1&amp;q=Cloudflare+Workers&amp;zhida_source=entity" target="_blank" rel="noopener nofollow">Cloudflare Workers</a></h3>
<ul>
<li>基于 V8 引擎（隔离 Workers）和 C++ 构建</li>
<li>主要用途：边缘计算的无服务器环境</li>
<li>特点：极小的冷启动时间，为轻量级函数优化</li>
</ul>
<h3 id="aws-llrt">AWS LLRT</h3>
<ul>
<li>基于 Quickjs 引擎 和 Rust 构建</li>
<li>主要用途：边缘计算的无服务器环境</li>
<li>特点：极小的冷启动时间</li>
</ul>
<p><strong>这些 runtime 各自实现了自己的标准库和 API。虽然说生态蓬勃发展，但是也带来了一些问题。比如，不同的 runtime 之间的代码不可复用，不同的 runtime 之间的代码不可迁移。</strong></p>
<h3 id="wintertc-technical-committee-on-web-interoperable-server-runtimes">WinterTC (Technical Committee on Web-interoperable Server Runtimes)</h3>
<p>WinterTC (TC55) 是 Ecma International 的一个技术委员会，旨在实现服务器端 JavaScript 运行时之间的 API 互操作性，特别是对于与 Web 共同的 API。</p>
<p><strong>ECMA?? 相信熟悉 Javascript 都听过 <a href="https://link.zhihu.com/?target=https%3A//tc39.es/ecma262/" target="_blank" rel="noopener nofollow">ECMAScript® Language Specification - TC39</a>。</strong></p>
<p>WinterTC (TC55) 制定了很多 API，不同的 Javascript 运行都会实现这些 API。大家可以在他们官网去查看。<a href="https://link.zhihu.com/?target=https%3A//wintercg.org/work" target="_blank" rel="noopener nofollow">WinterTC work</a></p>
<p>这些 API 有很多是 web standrad 已有标准，比如 <code>fetch</code>, <code>File</code>, <code>web stream</code> 等等。</p>
<p>目前 Nodejs 已经实现了很多 web API。比如关于 stream 的 API 就有两个包 <code>node:stream</code>（Node.js 自己的 API） 和 <code>node:stream/web</code> <a href="https://link.zhihu.com/?target=https%3A//streams.spec.whatwg.org/" target="_blank" rel="noopener nofollow">whatwg/streams</a>。</p>
<blockquote>
<p>当然这也带来一些问题，让 nodejs API 变得更加复杂。</p>
</blockquote>
<p>WinterTC 还有关于网络的 proposal， 比如 <code>Sockets API</code> <code>CLI API</code> 等。</p>
<blockquote>
<p>你要是问为什么不直接使用 Node.js 的 API 作为标准。<br>
那么请让我先问一个问题，为什么 ES module(ES2015) 在制定的标准的时候，不直接使用早就出来的 CommonJS 作为规范呢？ES module 标准已经 10年了，但是我们如果看 JS 生态，大家还在日常开发中和这两种标准斗智斗勇。</p>
</blockquote>

</div>
<div class="clear"></div>

        </div>
        <p class="postfoot">
            posted on 
<span id="post-date" data-last-update-days="14.844531970774305" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-02-28 00:12">2025-02-28 00:11</span>&nbsp;
<a href="https://www.cnblogs.com/zizifn">格格巫的阿兹猫</a>&nbsp;
阅读(<span id="post_view_count">13</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18742379" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18742379);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18742379', targetLink: 'https://www.cnblogs.com/zizifn/p/18742379', title: '从 0 写个微小的 Javascript 运行时(01) -- 什么是 Javascript 运行时？' })">举报</a>

        </p>
    