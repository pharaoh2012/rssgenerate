
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/dennyLee2025/p/18843911" title="发布于 2025-04-24 08:32">
    <span role="heading" aria-level="2">学习设计模式找不到练手的实战项目？项目已开源</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<blockquote>
<p>手写解析器、渲染器、主题样式、自定义弹窗和精细的撤销/恢复机制等。</p>
</blockquote>
<h2 id="整体总结">📌整体总结</h2>
<p>YtyMark-java 项目，从用户输入到用户查看到实时渲染结果的全过程</p>
<p><img src="https://img2024.cnblogs.com/blog/1209017/202504/1209017-20250423231852515-1656265677.jpg" alt="image" loading="lazy"></p>
<ul>
<li>
<p>监听文本区域内容是否发生变化</p>
</li>
<li>
<p>解析和渲染：“原始文本的块裁剪”→“块级元素解析” → “行内元素解析” → “渲染” 四大阶段</p>
</li>
<li>
<p>将渲染结果重新刷新展示出来</p>
</li>
</ul>
<p>从UI界面到核心的解析渲染，通过一系列设计模式串联各模块，实现了高度的模块化和可扩展性。</p>
<h3 id="构建者模式">构建者模式</h3>
<p>用于构造解析器（<code>ParserBuilder</code>）和渲染器（<code>RendererBuilder</code>），将复杂对象的组装过程与表示分离，使客户端只需<strong>按需配置各组件</strong>即可得到完整的解析/渲染器实例。</p>
<p>先从核心模块的这四个阶段来看设计模式的使用情况。</p>
<h2 id="1-原始文本的块裁剪阶段">📦1. 原始文本的块裁剪阶段</h2>
<p>此阶段为“块级元素预处理”阶段，将普通文本按照块级元素进行裁剪。</p>
<h3 id="状态模式">状态模式</h3>
<p>主要设计模式为<strong>状态模式</strong>：</p>
<p>在“块级元素预处理”阶段，根据当前处理状态（如普通文本、列表、引用块等）动态切换处理逻辑，将不同类型的文本裁剪成块级元素，避免了大量的条件分支。</p>
<p>通过状态模式实现类似状态机的机制，当状态（语法）匹配时，自动流转到专门处理这个语法的程序，处理完之后分割成一个“块”（这个块就是一个块元素），再回到默认状态，然后继续处理后续的文本。具体代码位于：<code>org.ytymark.parser.block.state</code>包。</p>
<p><img src="https://img2024.cnblogs.com/blog/1209017/202504/1209017-20250423231908387-1274591908.jpg" alt="image" loading="lazy"></p>
<h2 id="2-块级元素解析阶段">📦2. 块级元素解析阶段</h2>
<h3 id="责任链模式">责任链模式</h3>
<p>构建一条解析“流水线”，不同的责任对象<strong>按优先级</strong>依次尝试处理当前文本块或嵌套结构，直到有对象<strong>成功解析为止</strong>，极大提升了解析流程的灵活性。</p>
<h3 id="组合模式">组合模式</h3>
<p>将解析结果组织成一棵 AST（抽象语法树）<strong>块级元素节点树</strong>，节点既可作为叶子，也可包含子节点，这个阶段<strong>标题、段落和水平分割线只能是叶子节点</strong>，统一对外提供相同的接口，便于树形结构的构建与遍历。</p>
<p>整个处理流程，如图：</p>
<p><img src="https://img2024.cnblogs.com/blog/1209017/202504/1209017-20250423231923492-297079806.jpg" alt="image" loading="lazy"></p>
<p>关于涉及的相关代码，可以查看专门简述<strong>核心功能</strong>那篇文章。</p>
<h2 id="3-行级元素的解析阶段">🗂3. 行级元素的解析阶段</h2>
<h3 id="策略模式">策略模式</h3>
<p>动态选择不同的行内元素解析策略（例如链接、加粗、斜体等）以及界面的主题渲染策略（浅色/暗黑主题），通过统一接口切换算法或样式实现。</p>
<h3 id="组合模式迭代器模式">组合模式+迭代器模式</h3>
<p>通过迭代器结合递归来<strong>遍历节点树</strong>，为 AST 提供统一的遍历方式。在<strong>解析阶段</strong>，用于遍历块级元素进行行内元素解析；在<strong>渲染阶段</strong>，遍历节点树完成渲染操作。</p>
<p>使用迭代器完成兄弟节点的遍历（广度遍历），再结合递归完成子节点遍历（深度遍历）。</p>
<h2 id="4-渲染阶段">🧩4. 渲染阶段</h2>
<h3 id="中介者模式思想">中介者模式思想</h3>
<p>在 AST、解析器、渲染器之间引入中介逻辑，解耦它们的直接依赖，使得解析和渲染两者可以灵活组合，支持输出到不同类型的文档。</p>
<p><img src="https://img2024.cnblogs.com/blog/1209017/202504/1209017-20250423231950126-2139698219.jpg" alt="image" loading="lazy"></p>
<h3 id="访问者模式">访问者模式</h3>
<p>将节点数据结构与渲染行为分离，在块级和行级元素解析和渲染时，访问者对象负责执行相应操作，以解决嵌套调用的复杂性并提高扩展性。在渲染的过程中，<strong>组合模式+迭代器模式</strong>起到非常关键的作用，在<strong>渲染阶段</strong>，使用迭代器完成兄弟节点的遍历（广度遍历），再结合递归完成子节点遍历（深度遍历），完成节点树的渲染操作。</p>
<p><img src="https://img2024.cnblogs.com/blog/1209017/202504/1209017-20250424083037278-184427742.jpg" alt="image" loading="lazy"></p>
<p>后面介绍以工具界面、操作相关的功能。</p>
<h2 id="5-样式相关功能">📍5. 样式相关功能</h2>
<h3 id="工厂模式">工厂模式</h3>
<p>在渲染器中，根据不同场景创建对应的样式或渲染器实例，如PDF 等输出的字体、颜色工厂。</p>
<h3 id="观察者模式和单例模式">观察者模式和单例模式</h3>
<p>监听主题（暗黑/浅色）变化或 JavaFX 属性变化，触发重新渲染文本内容，保持 UI 与主题状态同步。主题监听器将有<strong>主题管理类</strong>来统一管理，并结合<strong>单例模式</strong>，使得主题管理器全局唯一，并提供统一访问入口<code>ThemeManager.getInstance()</code>。</p>
<h2 id="6-自定义弹框">🎯6. 自定义弹框</h2>
<p>自定义通用弹框，在此基础上根据不同场景进行不同的装饰</p>
<h3 id="装饰模式">装饰模式</h3>
<p>对基础弹框组件进行功能性扩展，在不同场景下动态增加或修改对话框行为和样式，而无需改动原有组件代码。</p>
<h2 id="7-编辑操作">📝7. 编辑操作</h2>
<h3 id="命令模式和备忘录模式">命令模式和备忘录模式</h3>
<p>将菜单项、工具栏按钮、快捷键等操作封装为命令对象，支持撤销/重做、宏命令等功能的统一管理。以单次输入为粒度保存编辑历史，实现精细化的撤销与重做，支持一千步的撤销/重做，并预留撤销/重做的开启或关闭。</p>
<h2 id="8-界面截图预览">📸8. 界面截图预览</h2>
<h3 id="白天模式的截图">白天模式的截图：</h3>
<p><img src="https://img2024.cnblogs.com/blog/1209017/202504/1209017-20250424083046060-1996464423.jpg" alt="image" loading="lazy"></p>
<h3 id="夜间模式的截图">夜间模式的截图：</h3>
<p><img src="https://img2024.cnblogs.com/blog/1209017/202504/1209017-20250424083052018-1483147680.jpg" alt="image" loading="lazy"></p>
<h2 id="️9-总结">✏️9. 总结</h2>
<p>以上即为 YtyMark-java 项目所用的主要设计模式及其在各个功能模块中的应用场景，既展现了设计模式的实战价值，也为后续扩展与维护打下了坚实基础。</p>
<p>🙌<strong>我的开源项目地址</strong></p>
<blockquote>
<p>🌍 <a href="https://github.com/yuantingyue/YtyMark-java" target="_blank" rel="noopener nofollow">GitHub 开源地址（YtyMark-java）</a></p>
</blockquote>
<p>欢迎提交 PR、Issue、Star ⭐️！</p>
<p>如果需要单独学习这些设计模式，可以在微信公众号回复：<strong>设计模式</strong>，来获取《掌握设计模式：23种经典模式实践、选择、价值与思想》pdf手册。</p>
<p><img src="https://img2024.cnblogs.com/blog/1209017/202504/1209017-20250424083106364-187453952.gif" alt="image" loading="lazy"></p>
<p>查看往期设计模式文章的：<a href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzI5NDM5NDM1NA==&amp;action=getalbum&amp;album_id=3572346739375538182#wechat_redirect" target="_blank" rel="noopener nofollow">设计模式</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzI5NDM5NDM1NA==&amp;mid=2247486066&amp;idx=1&amp;sn=e8c7423105ddd0562f50892010941efc&amp;scene=21#wechat_redirect" target="_blank" rel="noopener nofollow">超实用的SpringAOP实战之日志记录</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzI5NDM5NDM1NA==&amp;mid=2247485873&amp;idx=1&amp;sn=08b58de61c716e5c57ff2fddb947f0d8&amp;scene=21#wechat_redirect" target="_blank" rel="noopener nofollow">2023年下半年软考考试重磅消息</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzI5NDM5NDM1NA==&amp;mid=2247485909&amp;idx=1&amp;sn=e20f3b7b413310ca78f90c13305972ab&amp;scene=21#wechat_redirect" target="_blank" rel="noopener nofollow">通过软考后却领取不到实体证书？</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzI5NDM5NDM1NA==&amp;mid=2247485802&amp;idx=1&amp;sn=863cf239124b98d39ec551b6cb67845c&amp;scene=21#wechat_redirect" target="_blank" rel="noopener nofollow">计算机算法设计与分析（第5版）</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzI5NDM5NDM1NA==&amp;mid=2247485015&amp;idx=1&amp;sn=862bc2b379726b89cdb396ec0d325cc0&amp;scene=21#wechat_redirect" target="_blank" rel="noopener nofollow">Java全栈学习路线、学习资源和面试题一条龙</a></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzI5NDM5NDM1NA==&amp;mid=2247485956&amp;idx=1&amp;sn=57407d9f7921254ba19ed70fa3bd6a2d&amp;chksm=ec62ca99db15438f13f2cf96d17a3e282028fa7960af56126caec68fb6eafd46d6e04a10ad0c&amp;scene=21#wechat_redirect" target="_blank" rel="noopener nofollow">软考证书=职称证书？</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzI5NDM5NDM1NA==&amp;mid=2247485837&amp;idx=1&amp;sn=b9b17dfd252882468b8eea31012df6fc&amp;scene=21#wechat_redirect" target="_blank" rel="noopener nofollow">软考中级--软件设计师毫无保留的备考分享</a></p>

</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.025763751684027777" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-04-24 08:32">2025-04-24 08:32</span>&nbsp;
<a href="https://www.cnblogs.com/dennyLee2025">渊渟岳</a>&nbsp;
阅读(<span id="post_view_count">36</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18843911);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18843911', targetLink: 'https://www.cnblogs.com/dennyLee2025/p/18843911', title: '学习设计模式找不到练手的实战项目？项目已开源' })">举报</a>
</div>
        