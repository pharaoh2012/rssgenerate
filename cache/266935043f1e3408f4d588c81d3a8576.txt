
            <h1 class="postTitle">
                <a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/dtflyx/p/18756951" title="发布于 2025-03-07 09:12">
    <span role="heading" aria-level="2">如何用Forest方便快捷地在SpringBoot项目中对接DeepSeek</span>
    

</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<span data-cke-copybin-start="1"><span data-cke-copybin-start="1">​</span></span>
<h2><span id="cke_bm_1108S">&nbsp;一. 环境要求</span></h2>
<ul>
<li>
<p>JDK 8 / 17</p>
</li>
<li>
<p>SpringBoot 2.x / 3.x</p>
</li>
<li>
<p>Forest 1.6.4+</p>
</li>
<li>
<p>Fastjson2</p>
</li>
</ul>
<h3>依赖配置</h3>
<p>除了 SpringBoot 和 Lombok 等基础框架之外，再加上 Forest 和 Fastjson2 的依赖</p>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="15" data-cke-widget-wrapper="1">
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">&lt;!--</span><span style="color: rgba(0, 128, 0, 1)"> Forest框架 </span><span style="color: rgba(0, 128, 0, 1)">--&gt;</span>
<span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">dependency</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
    <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">groupId</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>com.dtflys.forest<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">groupId</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
    <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">artifactId</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>forest-spring-boot-starter<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">artifactId</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
    <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">version</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>1.6.4<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">version</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">dependency</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>

<span style="color: rgba(0, 128, 0, 1)">&lt;!--</span><span style="color: rgba(0, 128, 0, 1)"> Fastjson2 </span><span style="color: rgba(0, 128, 0, 1)">--&gt;</span>
<span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">dependency</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
    <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">groupId</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>com.alibaba<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">groupId</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
    <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">artifactId</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>fastjson<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">artifactId</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
    <span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">version</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>2.0.53<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">version</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>
<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">dependency</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span></pre>
</div>
<img src="https://img2024.cnblogs.com/blog/420826/202503/420826-20250307091120783-986023844.gif" width="15" height="15" class="cke_reset cke_widget_drag_handler" title="点击并拖拽以移动" style="font-family: &quot;PingFang SC&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px" data-cke-widget-drag-handler="1"></div>
<h2>二. 申请 DeepSeek 的 API Key</h2>
<p>打开 DeepSeek 官网，进入到 API Key 的管理页面(<span class="cke_widget_wrapper cke_widget_inline cke_widget_csdnlink cke_widget_selected" data-cke-display-name="a" data-cke-filter="off" data-cke-widget-id="14" data-cke-widget-wrapper="1"><a class="cke_widget_editable cke_widget_element" title="DeepSeek" href="https://platform.deepseek.com/api_keys" data-cke-enter-mode="2" data-cke-saved-href="https://platform.deepseek.com/api_keys" data-cke-widget-data="%7B%22url%22%3A%22https%3A%2F%2Fplatform.deepseek.com%2Fapi_keys%22%2C%22text%22%3A%22DeepSeek%22%2C%22desc%22%3A%22Join%20DeepSeek%20API%20platform%20to%20access%20our%20AI%20models%2C%20developer%20resources%20and%20API%20documentation.%22%2C%22icon%22%3A%22https%3A%2F%2Fcsdnimg.cn%2Frelease%2Fblog_editor_html%2Frelease2.3.8%2Fckeditor%2Fplugins%2FCsdnLink%2Ficons%2Ficon-default.png%3Ft%3DP1C7%22%2C%22isCard%22%3Afalse%2C%22hasResquest%22%3Atrue%2C%22iconDefault%22%3A%22https%3A%2F%2Fcsdnimg.cn%2Frelease%2Fblog_editor_html%2Frelease2.3.8%2Fckeditor%2Fplugins%2FCsdnLink%2Ficons%2Ficon-default.png%3Ft%3DP1C7%22%2C%22id%22%3A%22k6ZiOY-1741309066240%22%2C%22classes%22%3Anull%7D" data-cke-widget-editable="text" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-link-desc="Join DeepSeek API platform to access our AI models, developer resources and API documentation." data-link-icon="https://csdnimg.cn/release/blog_editor_html/release2.3.8/ckeditor/plugins/CsdnLink/icons/icon-default.png?t=P1C7" data-link-title="DeepSeek" data-widget="csdnlink" rel="noopener nofollow">DeepSeek</a>)，就能找到您的 API Key。</span></p>
<p>如果还没有 KEY，可以点击页面下方的<code>创建API Key</code>按钮</p>
<p><img src="https://img2024.cnblogs.com/blog/420826/202503/420826-20250307090741820-559455637.png" alt="API Keys 页面" title="API Keys 页面" loading="lazy"></p>
<p>&nbsp;</p>
<p>创建完之后，会弹出一个对话框告诉您新生成的 API Key 字符串，然后要及时把它复制下来保存到一个安全的地方。</p>
<h2>三. 配置项目</h2>
<p>进入 SpringBoot 的配置文件<code>application.yml</code>，加入以下代码：</p>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="12" data-cke-widget-wrapper="1">
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> Forest 框架配置</span>
<span style="color: rgba(0, 0, 0, 1)">forest:
  connect</span>-timeout: 10000      <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 请求连接超时时间</span>
  read-timeout: 3600000       <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 请求数据读取超时时间，越长越好</span>
<span style="color: rgba(0, 0, 0, 1)">  variables:
    apiKey: YOUR_API_KEY      </span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 替换为您申请到的 API Key</span>
    model: deepseek-reasoner  <span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> DeepSeek 支持的模型，R1 模型</span></pre>
</div>
<img src="https://img2024.cnblogs.com/blog/420826/202503/420826-20250307091120783-986023844.gif" width="15" height="15" class="cke_reset cke_widget_drag_handler" title="点击并拖拽以移动" style="font-family: &quot;PingFang SC&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px" data-cke-widget-drag-handler="1"></div>
<h2>四. 创建声名式接口</h2>
<p>Forest 支持以声名式的方式发送 HTTP 请求，以下代码就是将 DeepSeek API 请求以声名式接口的方式进行定义</p>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="11" data-cke-widget-wrapper="1">
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">interface</span><span style="color: rgba(0, 0, 0, 1)"> DeepSeek {
    
    @Post(
            url </span>= "https://api.deepseek.com/chat/completions"<span style="color: rgba(0, 0, 0, 1)">,
            contentType </span>= "application/json"<span style="color: rgba(0, 0, 0, 1)">,
            headers </span>= "Authorization: Bearer {apiKey}"<span style="color: rgba(0, 0, 0, 1)">,
            data </span>= "{\"messages\":[{\"content\":\"{content}\",\"role\":\"user\"}],\"model\":\"{model}\",\"stream\":true}"<span style="color: rgba(0, 0, 0, 1)">)
    ForestSSE completions(@Var(</span>"content"<span style="color: rgba(0, 0, 0, 1)">) String content);
}</span></pre>
</div>
<img src="https://img2024.cnblogs.com/blog/420826/202503/420826-20250307091120783-986023844.gif" width="15" height="15" class="cke_reset cke_widget_drag_handler" title="点击并拖拽以移动" style="font-family: &quot;PingFang SC&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px" data-cke-widget-drag-handler="1"></div>
<p>以上的代码意思也很明显，调用该接口方法就会发送一个<code>POST</code>请求，URL 地址为 https://api.deepseek.com/chat/completions</p>
<p>其中 {apiKey} 和 {model} 的意思为读取配置文件中的 apiKey 字段，{content} 则是读取 @Var("content") 注解修饰的参数。 并且请求体数据为官网文档提供的 JSON 字符串，然后通过<code>{变量名}</code>这种字符串模板占位符的形式拼接出您想要的参数。</p>
<p>接口方法的返回类型为<code>ForestSSE</code>，这是 Forest 框架提供的内置类型，主要用于接受和处理 SSE 事件流消息。</p>
<h2>五. 调用接口</h2>
<p>在声名式接口创建完之后，可以通过 Spring 的<code>@Resouce</code>注解将此接口实例注入到启动类中，Forest框架会利用动态代理模式自动生成相应的接口代理类实例，并将其自动注入到您所需要调用的类中。</p>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="10" data-cke-widget-wrapper="1">
<pre class="cke_widget_element" data-cke-widget-data="%7B%22lang%22%3A%22java%22%2C%22code%22%3A%22%40Resource%5Cnprivate%C2%A0DeepSeek%C2%A0deepSeek%3B%5Cn%22%2C%22classes%22%3Anull%7D" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-widget="codeSnippet"><code class="language-java hljs"><span class="hljs-meta">@Resource
<span class="hljs-keyword">private&nbsp;DeepSeek&nbsp;deepSeek;
</span></span></code></pre>
<span class="cke_reset cke_widget_drag_handler_container"><img src="https://img2024.cnblogs.com/blog/420826/202503/420826-20250307091120783-986023844.gif" width="15" height="15" class="cke_reset cke_widget_drag_handler" title="点击并拖拽以移动" data-cke-widget-drag-handler="1"></span></div>
<p>然后就可以调用接口进行发送请求的操作了，并设置Lambda表达式来接收和处理返回的 SSE 流式事件消息</p>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="9" data-cke-widget-wrapper="1">
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">@SpringBootApplication
</span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span> DeepSeekExampleApplication <span style="color: rgba(0, 0, 255, 1)">implements</span><span style="color: rgba(0, 0, 0, 1)"> CommandLineRunner {

    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> DeepSeek 声名式接口</span>
<span style="color: rgba(0, 0, 0, 1)">    @Resource
    </span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> DeepSeek deepSeek; 

    @Override
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> run(String... args) {
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 调用声明式接口方法</span>
        deepSeek.completions("你好，你是谁？"<span style="color: rgba(0, 0, 0, 1)">)
                .setOnMessage(event </span>-&gt;<span style="color: rgba(0, 0, 0, 1)"> {
                    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 接受和处理 SSE 事件</span>
                    <span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)"> {
                        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 获取消息数据，并反序列化为 DeepSeekResult 类</span>
                        DeepSeekResult result = event.value(DeepSeekResult.<span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)">);
                        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 打印 DeepSeekResult 对象中的消息内容</span>
<span style="color: rgba(0, 0, 0, 1)">                        System.out.print(result.content());
                    } </span><span style="color: rgba(0, 0, 255, 1)">catch</span><span style="color: rgba(0, 0, 0, 1)"> (Exception e) {
                    }
                })
                .listen(SSELinesMode.SINGLE_LINE); </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 监听 SSE，并设置为单行消息模式</span>
<span style="color: rgba(0, 0, 0, 1)">    }

    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> main(String[] args) {
        </span><span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)"> {
            SpringApplication.run(DeepSeekExampleApplication.</span><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)">, args);
        } </span><span style="color: rgba(0, 0, 255, 1)">catch</span><span style="color: rgba(0, 0, 0, 1)"> (Throwable th) {
            th.printStackTrace();
        }
    }
}</span></pre>
</div>
<img src="https://img2024.cnblogs.com/blog/420826/202503/420826-20250307091120783-986023844.gif" width="15" height="15" class="cke_reset cke_widget_drag_handler" title="点击并拖拽以移动" style="font-family: &quot;PingFang SC&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px" data-cke-widget-drag-handler="1"></div>
<p>其中，DeepSeekResult 是根据返回的消息格式定义的数据类，具体代码如下</p>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="8" data-cke-widget-wrapper="1">
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">@Data
</span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> DeepSeekResult {

    </span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> String id;

    </span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> String object;

    </span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> Integer created;

    </span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> String model;

    @JSONField(name </span>= "system_fingerprint"<span style="color: rgba(0, 0, 0, 1)">)
    </span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> String systemFingerprint;

    </span><span style="color: rgba(0, 0, 255, 1)">private</span> List&lt;JSONObject&gt;<span style="color: rgba(0, 0, 0, 1)"> choices;

    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 获取消息中的 choices[0].delta.content</span>
    <span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> String content() {
        List</span>&lt;JSONObject&gt; choices =<span style="color: rgba(0, 0, 0, 1)"> getChoices();
        </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (CollectionUtil.isNotEmpty(choices)) {
            JSONObject chooseJson </span>= choices.get(0<span style="color: rgba(0, 0, 0, 1)">);
            DeepSeekResultChoice choice </span>= chooseJson.toJavaObject(DeepSeekResultChoice.<span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)">);
            </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> choice.getDelta().getContent();
        }
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> ""<span style="color: rgba(0, 0, 0, 1)">;
    }
}</span></pre>
</div>
<img src="https://img2024.cnblogs.com/blog/420826/202503/420826-20250307091120783-986023844.gif" width="15" height="15" class="cke_reset cke_widget_drag_handler" title="点击并拖拽以移动" style="font-family: &quot;PingFang SC&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px" data-cke-widget-drag-handler="1"></div>
<p>其他的数据类包括 DeepSeekResultChoice 类也都类似。如果要看具体代码，在文章末尾会提供代码仓库地址。</p>
<h2>六. 应答测试</h2>
<p>调用方法写完之后，我们就可以跑一下代码看看了，点击 Run 之后可以看到控制台日志会打印以下内容</p>
<div class="cke_widget_wrapper cke_widget_block cke_widget_image cke_widget_image_hascaption cke_widget_selected" data-cke-display-name="图像" data-cke-filter="off" data-cke-widget-id="7" data-cke-widget-wrapper="1">
<p><img src="https://img2024.cnblogs.com/blog/420826/202503/420826-20250307090726930-1854705466.png" alt="测试日志" title="测试日志" loading="lazy"></p>
<span class="cke_image_resizer_wrapper"><span class="cke_image_resizer" title="点击并拖拽以改变尺寸">​</span></span></div>
<p>日志上半部分<code>POST https://api.deepseek.com/chat/completions HTTPS [SSE]</code>这类信息为 Forest 的请求日志，会告诉您发出去的 HTTP 请求信息中有些什么数据和参数。</p>
<p>而下半部分 “您好！我是由中国的深度求索（DeepSeek）公司开发的智能助手DeepSeek-R1...” 自然就是 DeepSeek 的回答了。</p>
<h2>七. 思维链</h2>
<p>以上的代码案例，只会返回 DeepSeek 的回答内容，不包含他的思考过程，拿怕模型是<code>DeepSeek-R1</code>也一样。如果要打印出思维链，就要修改一下代码</p>
<p>首先要修改 DeepSeekResult 类中的 content() 方法</p>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="6" data-cke-widget-wrapper="1">
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">@Data
</span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> DeepSeekResult {

    </span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> String id;

    </span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> String object;

    </span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> Integer created;

    </span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> String model;

    @JSONField(name </span>= "system_fingerprint"<span style="color: rgba(0, 0, 0, 1)">)
    </span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> String systemFingerprint;

    </span><span style="color: rgba(0, 0, 255, 1)">private</span> List&lt;JSONObject&gt;<span style="color: rgba(0, 0, 0, 1)"> choices;

    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 获取消息中的 choices[0].delta.reasoning_content
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 或 choices[0].delta.content
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 是否为思维内容，通过 DeepSeekContent.isReasoning 来标识</span>
    <span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> DeepSeekContent content() {
        List</span>&lt;JSONObject&gt; choices =<span style="color: rgba(0, 0, 0, 1)"> getChoices();
        </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (CollectionUtil.isNotEmpty(choices)) {
            JSONObject chooseJson </span>= choices.get(0<span style="color: rgba(0, 0, 0, 1)">);
            DeepSeekResultChoice choice </span>= chooseJson.toJavaObject(DeepSeekResultChoice.<span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)">);
            String reasoningContent </span>=<span style="color: rgba(0, 0, 0, 1)"> choice.getDelta().getReasoningContent();
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 判断是否存在 reasoningContent，存在就是思维链内容，否则就是存粹的回答内容</span>
            <span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (StringUtils.isNotEmpty(reasoningContent)) {
                </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">new</span> DeepSeekContent(<span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">, reasoningContent);
            }
            </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">new</span> DeepSeekContent(<span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">, choice.getDelta().getContent());
        }
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> DeepSeekContent();
    }
}</span></pre>
</div>
<img src="https://img2024.cnblogs.com/blog/420826/202503/420826-20250307091120783-986023844.gif" width="15" height="15" class="cke_reset cke_widget_drag_handler" title="点击并拖拽以移动" style="font-family: &quot;PingFang SC&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px" data-cke-widget-drag-handler="1"></div>
<p>添加 DeepSeekContent 类</p>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="5" data-cke-widget-wrapper="1">
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">@Data
</span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> DeepSeekContent {
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 是否为思考过程内容</span>
    <span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">boolean</span> reasoning = <span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">;
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> DeepSeek 回答的具体内容</span>
    <span style="color: rgba(0, 0, 255, 1)">private</span> String content = ""<span style="color: rgba(0, 0, 0, 1)">;

    </span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> DeepSeekContent() {
    }

    </span><span style="color: rgba(0, 0, 255, 1)">public</span> DeepSeekContent(<span style="color: rgba(0, 0, 255, 1)">boolean</span><span style="color: rgba(0, 0, 0, 1)"> reasoning, String content) {
        </span><span style="color: rgba(0, 0, 255, 1)">this</span>.reasoning =<span style="color: rgba(0, 0, 0, 1)"> reasoning;
        </span><span style="color: rgba(0, 0, 255, 1)">this</span>.content =<span style="color: rgba(0, 0, 0, 1)"> content;
    }
}</span></pre>
</div>
<img src="https://img2024.cnblogs.com/blog/420826/202503/420826-20250307091120783-986023844.gif" width="15" height="15" class="cke_reset cke_widget_drag_handler" title="点击并拖拽以移动" style="font-family: &quot;PingFang SC&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px" data-cke-widget-drag-handler="1"></div>
<p>最后，修改接口的调用部分</p>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="4" data-cke-widget-wrapper="1">
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 0, 1)">@SpringBootApplication
</span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span> DeepSeekExampleApplication <span style="color: rgba(0, 0, 255, 1)">implements</span><span style="color: rgba(0, 0, 0, 1)"> CommandLineRunner {

    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> DeepSeek 声名式接口</span>
<span style="color: rgba(0, 0, 0, 1)">    @Resource
    </span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> DeepSeek deepSeek; 

    @Override
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> run(String... args) {
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 标志位：是否为第一次接收到到思维链内容</span>
        AtomicBoolean isFirstReasoning = <span style="color: rgba(0, 0, 255, 1)">new</span> AtomicBoolean(<span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">);
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 调用声明式接口方法</span>
        deepSeek.completions("1+1等于几？"<span style="color: rgba(0, 0, 0, 1)">)
                .setOnMessage(event </span>-&gt;<span style="color: rgba(0, 0, 0, 1)"> {
                    </span><span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)"> {
                        DeepSeekResult result </span>= event.value(DeepSeekResult.<span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)">);
                        DeepSeekContent content </span>=<span style="color: rgba(0, 0, 0, 1)"> result.content();
                        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 通过 CAS 判断是否第一次接收到到思维链内容
                        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 如果是，则打印出&lt;思维链&gt;标签</span>
                        <span style="color: rgba(0, 0, 255, 1)">if</span> (content.isReasoning() &amp;&amp; isFirstReasoning.compareAndSet(<span style="color: rgba(0, 0, 255, 1)">false</span>, <span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">)) {
                            System.out.println(</span>"&lt;思维链&gt;"<span style="color: rgba(0, 0, 0, 1)">);
                            System.out.print(content.getContent());
                        } </span><span style="color: rgba(0, 0, 255, 1)">else</span> <span style="color: rgba(0, 0, 255, 1)">if</span> (!content.isReasoning() &amp;&amp; isFirstReasoning.compareAndSet(<span style="color: rgba(0, 0, 255, 1)">true</span>, <span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">)) {
                            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 当 isFirstReasoning 由 true 转为 false
                            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 则表明消息从思维链内容转向正式回答内容</span>
<span style="color: rgba(0, 0, 0, 1)">                            System.out.print(content.getContent());
                            System.out.println(</span>"\n&lt;/思维链&gt;\n"<span style="color: rgba(0, 0, 0, 1)">);
                        } </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)"> {
                            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 打印正常的思维链或正式回答内容</span>
                            System.out.print(Opt.ofBlankAble(content.getContent()).orElse(""<span style="color: rgba(0, 0, 0, 1)">));
                        }
                    } </span><span style="color: rgba(0, 0, 255, 1)">catch</span><span style="color: rgba(0, 0, 0, 1)"> (Exception e) {
                    }
                })
                .listen(SSELinesMode.SINGLE_LINE);
    }

    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> main(String[] args) {
        </span><span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)"> {
            SpringApplication.run(DeepSeekExampleApplication.</span><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)">, args);
        } </span><span style="color: rgba(0, 0, 255, 1)">catch</span><span style="color: rgba(0, 0, 0, 1)"> (Throwable th) {
            th.printStackTrace();
        }
    }
}</span></pre>
</div>
<img src="https://img2024.cnblogs.com/blog/420826/202503/420826-20250307091120783-986023844.gif" width="15" height="15" class="cke_reset cke_widget_drag_handler" title="点击并拖拽以移动" style="font-family: &quot;PingFang SC&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px" data-cke-widget-drag-handler="1"></div>
<h2>八. 思维链消息测试</h2>
<p>接下来就可以运行程序测试了，看看日志中是否包含了思维链的过程</p>
<div class="cke_widget_wrapper cke_widget_block cke_widget_image cke_widget_image_hascaption cke_widget_selected" data-cke-display-name="图像" data-cke-filter="off" data-cke-widget-id="3" data-cke-widget-wrapper="1">
<p><img src="https://img2024.cnblogs.com/blog/420826/202503/420826-20250307090843730-193766079.png" alt="思维链日志" title="思维链日志" loading="lazy"></p>
<p>&nbsp;</p>
</div>
<p>从日志中可以看出，程序正常运行了，其中被包裹在<code>&lt;思维链&gt;</code>和<code>&lt;/思维链&gt;</code>标签中间的部分就是 DeepSeek 告诉我们的思维过程。 而在<code>&lt;/思维链&gt;</code>结束标签之后的文字就是他的正式回答内容。</p>
<h2>九. 错误处理</h2>
<p>本文案例调用的是 DeepSeek 官方的 API。由于众所周知的原因，调用接口时极有可能发生<code>401</code>等网络错误。</p>
<p>遇到这种请求，加一个拦截器就完事了</p>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="2" data-cke-widget-wrapper="1">
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Forest 的 SSE 请求拦截器</span>
<span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span> DeepSeekInterceptor <span style="color: rgba(0, 0, 255, 1)">implements</span><span style="color: rgba(0, 0, 0, 1)"> SSEInterceptor {

    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 接受到请求响应时会自动调用该方法</span>
<span style="color: rgba(0, 0, 0, 1)">    @Override
    </span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> ResponseResult onResponse(ForestRequest request, ForestResponse response) {
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 判断请求是否发生错误，如 401、404 等等</span>
        <span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (response.isError()) {
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 如有错，就打印“服务端繁忙，请稍后再试”</span>
            System.out.println("服务端繁忙，请稍后再试"<span style="color: rgba(0, 0, 0, 1)">);
            </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> success();
        }
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> proceed();
    }
}</span></pre>
</div>
<img src="https://img2024.cnblogs.com/blog/420826/202503/420826-20250307091120783-986023844.gif" width="15" height="15" class="cke_reset cke_widget_drag_handler" title="点击并拖拽以移动" style="font-family: &quot;PingFang SC&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px" data-cke-widget-drag-handler="1"></div>
<p>然后，将拦截器绑定到接口上</p>
<div class="cke_widget_wrapper cke_widget_block cke_widget_codeSnippet cke_widget_selected" data-cke-display-name="代码段" data-cke-filter="off" data-cke-widget-id="1" data-cke-widget-wrapper="1">
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 为整个接口绑定拦截器</span>
@BaseRequest(interceptor = DeepSeekInterceptor.<span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">interface</span><span style="color: rgba(0, 0, 0, 1)"> DeepSeek {
    
    @Post(
            url </span>= "https://api.deepseek.com/chat/completions"<span style="color: rgba(0, 0, 0, 1)">,
            contentType </span>= "application/json"<span style="color: rgba(0, 0, 0, 1)">,
            headers </span>= "Authorization: Bearer {apiKey}"<span style="color: rgba(0, 0, 0, 1)">,
            data </span>= "{\"messages\":[{\"content\":\"{content}\",\"role\":\"user\"}],\"model\":\"{model}\",\"stream\":true}"<span style="color: rgba(0, 0, 0, 1)">)
    ForestSSE completions(@Var(</span>"content"<span style="color: rgba(0, 0, 0, 1)">) String content);
}</span></pre>
</div>
<img src="https://img2024.cnblogs.com/blog/420826/202503/420826-20250307091120783-986023844.gif" width="15" height="15" class="cke_reset cke_widget_drag_handler" title="点击并拖拽以移动" style="font-family: &quot;PingFang SC&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px" data-cke-widget-drag-handler="1"></div>
<h2>十. 总结</h2>
<p>可以看到，通过 Forest 这种声名式的形式来对接 DeepSeek API，相比于 OkHttp 和 HttpClient 有很多明显的好处。除了代码简洁，容易实现之外，更重要的是声名式代码天然更容易解耦。文本代码很自然的就实现了在参数配置、HTTP请求参数、以及接口调用的业务逻辑之间实现了代码解耦。如果要修改 API Key 或者模型，直接该配置文件就行。如果要修改 HTTP 的 URL 或参数，可以直接改声名式接口，而不会影响到调用接口的业务代码。而且可以很自然地将 DeepSeek API 的 HTTP 代码统一放到一个接口类中，方便管理，而且请求中的 URL、请求头、请求体参数都都一目了然。</p>
<p><strong>代码仓库地址：</strong><span class="cke_widget_wrapper cke_widget_inline cke_widget_csdnlink cke_widget_selected" data-cke-display-name="a" data-cke-filter="off" data-cke-widget-id="0" data-cke-widget-wrapper="1"><a class="cke_widget_editable cke_widget_element" title="forest: 声明式HTTP客户端API框架，让Java发送HTTP/HTTPS请求不再难。它比OkHttp和HttpClient更高层，是封装调用第三方restful api client接口的好帮手，是retrofit和feign之外另一个选择。通过在接口上声明注解的方式配置HTTP请求接口 - Gitee.com" href="https://gitee.com/dromara/forest/tree/master/forest-examples/example-deepseek" data-cke-enter-mode="2" data-cke-saved-href="https://gitee.com/dromara/forest/tree/master/forest-examples/example-deepseek" data-cke-widget-data="%7B%22url%22%3A%22https%3A%2F%2Fgitee.com%2Fdromara%2Fforest%2Ftree%2Fmaster%2Fforest-examples%2Fexample-deepseek%22%2C%22text%22%3A%22forest%3A%20%E5%A3%B0%E6%98%8E%E5%BC%8FHTTP%E5%AE%A2%E6%88%B7%E7%AB%AFAPI%E6%A1%86%E6%9E%B6%EF%BC%8C%E8%AE%A9Java%E5%8F%91%E9%80%81HTTP%2FHTTPS%E8%AF%B7%E6%B1%82%E4%B8%8D%E5%86%8D%E9%9A%BE%E3%80%82%E5%AE%83%E6%AF%94OkHttp%E5%92%8CHttpClient%E6%9B%B4%E9%AB%98%E5%B1%82%EF%BC%8C%E6%98%AF%E5%B0%81%E8%A3%85%E8%B0%83%E7%94%A8%E7%AC%AC%E4%B8%89%E6%96%B9restful%20api%20client%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%A5%BD%E5%B8%AE%E6%89%8B%EF%BC%8C%E6%98%AFretrofit%E5%92%8Cfeign%E4%B9%8B%E5%A4%96%E5%8F%A6%E4%B8%80%E4%B8%AA%E9%80%89%E6%8B%A9%E3%80%82%E9%80%9A%E8%BF%87%E5%9C%A8%E6%8E%A5%E5%8F%A3%E4%B8%8A%E5%A3%B0%E6%98%8E%E6%B3%A8%E8%A7%A3%E7%9A%84%E6%96%B9%E5%BC%8F%E9%85%8D%E7%BD%AEHTTP%E8%AF%B7%E6%B1%82%E6%8E%A5%E5%8F%A3%20-%20Gitee.com%22%2C%22desc%22%3A%22%22%2C%22icon%22%3A%22https%3A%2F%2Fcsdnimg.cn%2Frelease%2Fblog_editor_html%2Frelease2.3.8%2Fckeditor%2Fplugins%2FCsdnLink%2Ficons%2Ficon-default.png%3Ft%3DP1C7%22%2C%22isCard%22%3Afalse%2C%22hasResquest%22%3Atrue%2C%22iconDefault%22%3A%22https%3A%2F%2Fcsdnimg.cn%2Frelease%2Fblog_editor_html%2Frelease2.3.8%2Fckeditor%2Fplugins%2FCsdnLink%2Ficons%2Ficon-default.png%3Ft%3DP1C7%22%2C%22id%22%3A%22kO0uHG-1741309066205%22%2C%22classes%22%3Anull%7D" data-cke-widget-editable="text" data-cke-widget-keep-attr="0" data-cke-widget-upcasted="1" data-link-icon="https://csdnimg.cn/release/blog_editor_html/release2.3.8/ckeditor/plugins/CsdnLink/icons/icon-default.png?t=P1C7" data-link-title="forest: 声明式HTTP客户端API框架，让Java发送HTTP/HTTPS请求不再难。它比OkHttp和HttpClient更高层，是封装调用第三方restful api client接口的好帮手，是retrofit和feign之外另一个选择。通过在接口上声明注解的方式配置HTTP请求接口 - Gitee.com" data-widget="csdnlink" rel="noopener nofollow">forest: 声明式HTTP客户端API框架，让Java发送HTTP/HTTPS请求不再难。它比OkHttp和HttpClient更高层，是封装调用第三方restful api client接口的好帮手，是retrofit和feign之外另一个选择。通过在接口上声明注解的方式配置HTTP请求接口 - Gitee.com</a></span></p>
<span data-cke-copybin-start="1"><span data-cke-copybin-end="1">​</span></span>
</div>
<div class="clear"></div>

            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.07247059586805556" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2025-03-07 09:13">2025-03-07 09:12</span>&nbsp;
<a href="https://www.cnblogs.com/dtflyx">公子骏</a>&nbsp;
阅读(<span id="post_view_count">9</span>)&nbsp;
评论(<span id="post_comment_count">1</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=18756951" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(18756951);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '18756951', targetLink: 'https://www.cnblogs.com/dtflyx/p/18756951', title: '如何用Forest方便快捷地在SpringBoot项目中对接DeepSeek' })">举报</a>
</div>
        